
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c170  0800c170  0000d170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5e0  0800c5e0  0000d5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5ec  0800c5ec  0000d5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c5f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003c8  240001d8  0800c7c8  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005a0  0800c7c8  0000e5a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018b3e  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dc9  00000000  00000000  00026d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012e0  00000000  00000000  00029b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eb5  00000000  00000000  0002adf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038daa  00000000  00000000  0002bca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000191ba  00000000  00000000  00064a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001694d0  00000000  00000000  0007dc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e70d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000641c  00000000  00000000  001e711c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001ed538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c154 	.word	0x0800c154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800c154 	.word	0x0800c154

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <bmp388_quantize_calibration>:
BMP388_ProcessedData_t bmp388_processedData;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (float)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000a6c:	4b66      	ldr	r3, [pc, #408]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a78:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8000c0c <bmp388_quantize_calibration+0x1a4>
 8000a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a80:	4b63      	ldr	r3, [pc, #396]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000a82:	edc3 7a00 	vstr	s15, [r3]
  quantized_bmp388_calib.par_t2 = (float)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000a86:	4b60      	ldr	r3, [pc, #384]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000a88:	885b      	ldrh	r3, [r3, #2]
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a92:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8000c14 <bmp388_quantize_calibration+0x1ac>
 8000a96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000a9c:	edc3 7a01 	vstr	s15, [r3, #4]
  quantized_bmp388_calib.par_t3 = (float)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8000aa0:	4b59      	ldr	r3, [pc, #356]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000aa2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aae:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ab6:	4b56      	ldr	r3, [pc, #344]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000ab8:	edc3 7a02 	vstr	s15, [r3, #8]

  quantized_bmp388_calib.par_p1 = ((float)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8000abc:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000abe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ac2:	ee07 3a90 	vmov	s15, r3
 8000ac6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aca:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8000c1c <bmp388_quantize_calibration+0x1b4>
 8000ace:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ad2:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8000c20 <bmp388_quantize_calibration+0x1b8>
 8000ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ada:	4b4d      	ldr	r3, [pc, #308]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000adc:	edc3 7a03 	vstr	s15, [r3, #12]
  quantized_bmp388_calib.par_p2 = ((float)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8000ae0:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000ae2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aee:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8000c1c <bmp388_quantize_calibration+0x1b4>
 8000af2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000af6:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8000c24 <bmp388_quantize_calibration+0x1bc>
 8000afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000afe:	4b44      	ldr	r3, [pc, #272]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b00:	edc3 7a04 	vstr	s15, [r3, #16]
  quantized_bmp388_calib.par_p3 = (float)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 8000b04:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b06:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b12:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8000c28 <bmp388_quantize_calibration+0x1c0>
 8000b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b1c:	edc3 7a05 	vstr	s15, [r3, #20]
  quantized_bmp388_calib.par_p4 = (float)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8000b20:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b22:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000b26:	ee07 3a90 	vmov	s15, r3
 8000b2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b2e:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8000c2c <bmp388_quantize_calibration+0x1c4>
 8000b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b36:	4b36      	ldr	r3, [pc, #216]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b38:	edc3 7a06 	vstr	s15, [r3, #24]
  quantized_bmp388_calib.par_p5 = (float)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 8000b3c:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b3e:	899b      	ldrh	r3, [r3, #12]
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b48:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b50:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b52:	edc3 7a07 	vstr	s15, [r3, #28]
  quantized_bmp388_calib.par_p6 = (float)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 8000b56:	4b2c      	ldr	r3, [pc, #176]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b58:	89db      	ldrh	r3, [r3, #14]
 8000b5a:	ee07 3a90 	vmov	s15, r3
 8000b5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b62:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000c30 <bmp388_quantize_calibration+0x1c8>
 8000b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6a:	4b29      	ldr	r3, [pc, #164]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b6c:	edc3 7a08 	vstr	s15, [r3, #32]
  quantized_bmp388_calib.par_p7 = (float)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 8000b70:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b72:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b76:	ee07 3a90 	vmov	s15, r3
 8000b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b7e:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000c0c <bmp388_quantize_calibration+0x1a4>
 8000b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b86:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b88:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  quantized_bmp388_calib.par_p8 = (float)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b8e:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000b92:	ee07 3a90 	vmov	s15, r3
 8000b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8000c34 <bmp388_quantize_calibration+0x1cc>
 8000b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000ba4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p9 = (float)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000baa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bc0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  quantized_bmp388_calib.par_p10 = (float)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000bc6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd2:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bdc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p11 = (float)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000be2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bee:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8000c38 <bmp388_quantize_calibration+0x1d0>
 8000bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bf8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	240001f4 	.word	0x240001f4
 8000c0c:	43800000 	.word	0x43800000
 8000c10:	2400020c 	.word	0x2400020c
 8000c14:	4e800000 	.word	0x4e800000
 8000c18:	57800000 	.word	0x57800000
 8000c1c:	46800000 	.word	0x46800000
 8000c20:	49800000 	.word	0x49800000
 8000c24:	4e000000 	.word	0x4e000000
 8000c28:	4f800000 	.word	0x4f800000
 8000c2c:	52000000 	.word	0x52000000
 8000c30:	42800000 	.word	0x42800000
 8000c34:	47000000 	.word	0x47000000
 8000c38:	60000000 	.word	0x60000000

08000c3c <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	@ 0x40
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <bmp388_write_reg+0x44>)
 8000c52:	f001 fcaf 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000c56:	1df9      	adds	r1, r7, #7
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <bmp388_write_reg+0x48>)
 8000c5e:	f004 fc33 	bl	80054c8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c62:	1db9      	adds	r1, r7, #6
 8000c64:	2364      	movs	r3, #100	@ 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <bmp388_write_reg+0x48>)
 8000c6a:	f004 fc2d 	bl	80054c8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2140      	movs	r1, #64	@ 0x40
 8000c72:	4803      	ldr	r0, [pc, #12]	@ (8000c80 <bmp388_write_reg+0x44>)
 8000c74:	f001 fc9e 	bl	80025b4 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58020000 	.word	0x58020000
 8000c84:	240002e0 	.word	0x240002e0

08000c88 <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
  uint8_t temp_data = 0x80 | reg;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	4814      	ldr	r0, [pc, #80]	@ (8000cf8 <bmp388_read_reg+0x70>)
 8000ca8:	f001 fc84 	bl	80025b4 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8000cac:	f107 010e 	add.w	r1, r7, #14
 8000cb0:	2364      	movs	r3, #100	@ 0x64
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <bmp388_read_reg+0x74>)
 8000cb6:	f004 fc07 	bl	80054c8 <HAL_SPI_Transmit>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <bmp388_read_reg+0x40>
    Error_Handler();
 8000cc4:	f000 fd00 	bl	80016c8 <Error_Handler>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2364      	movs	r3, #100	@ 0x64
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <bmp388_read_reg+0x74>)
 8000cd2:	f004 fde7 	bl	80058a4 <HAL_SPI_Receive>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <bmp388_read_reg+0x5c>
    Error_Handler();
 8000ce0:	f000 fcf2 	bl	80016c8 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <bmp388_read_reg+0x70>)
 8000cea:	f001 fc63 	bl	80025b4 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	240002e0 	.word	0x240002e0

08000d00 <bmp388_setup>:
void bmp388_setup()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08e      	sub	sp, #56	@ 0x38
 8000d04:	af00      	add	r7, sp, #0
  uint8_t temp_data[22];
  bmp388_read_reg(0x31, temp_data, 22);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2216      	movs	r2, #22
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2031      	movs	r0, #49	@ 0x31
 8000d10:	f7ff ffba 	bl	8000c88 <bmp388_read_reg>
  uint8_t calib_data[21];
  for (int idx = 0; idx < 21; idx++)
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d18:	e00d      	b.n	8000d36 <bmp388_setup+0x36>
      {
      	  calib_data[idx] = temp_data[idx + 1];
 8000d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	3338      	adds	r3, #56	@ 0x38
 8000d20:	443b      	add	r3, r7
 8000d22:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8000d26:	1d3a      	adds	r2, r7, #4
 8000d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	701a      	strb	r2, [r3, #0]
  for (int idx = 0; idx < 21; idx++)
 8000d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d32:	3301      	adds	r3, #1
 8000d34:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d38:	2b14      	cmp	r3, #20
 8000d3a:	ddee      	ble.n	8000d1a <bmp388_setup+0x1a>
      }
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 8000d3c:	793b      	ldrb	r3, [r7, #4]
 8000d3e:	b21a      	sxth	r2, r3
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b36      	ldr	r3, [pc, #216]	@ (8000e28 <bmp388_setup+0x128>)
 8000d4e:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	b21a      	sxth	r2, r3
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <bmp388_setup+0x128>)
 8000d62:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 8000d64:	7a3b      	ldrb	r3, [r7, #8]
 8000d66:	b25a      	sxtb	r2, r3
 8000d68:	4b2f      	ldr	r3, [pc, #188]	@ (8000e28 <bmp388_setup+0x128>)
 8000d6a:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 8000d6c:	7a7b      	ldrb	r3, [r7, #9]
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	7abb      	ldrb	r3, [r7, #10]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21b      	sxth	r3, r3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <bmp388_setup+0x128>)
 8000d7c:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	7b3b      	ldrb	r3, [r7, #12]
 8000d84:	021b      	lsls	r3, r3, #8
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <bmp388_setup+0x128>)
 8000d8e:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8000d90:	7b7b      	ldrb	r3, [r7, #13]
 8000d92:	b25a      	sxtb	r2, r3
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <bmp388_setup+0x128>)
 8000d96:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 8000d98:	7bbb      	ldrb	r3, [r7, #14]
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <bmp388_setup+0x128>)
 8000d9e:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	7c3b      	ldrb	r3, [r7, #16]
 8000da6:	021b      	lsls	r3, r3, #8
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <bmp388_setup+0x128>)
 8000db2:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8000db4:	7c7b      	ldrb	r3, [r7, #17]
 8000db6:	b21a      	sxth	r2, r3
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21b      	sxth	r3, r3
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <bmp388_setup+0x128>)
 8000dc6:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 8000dc8:	7cfb      	ldrb	r3, [r7, #19]
 8000dca:	b25a      	sxtb	r2, r3
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <bmp388_setup+0x128>)
 8000dce:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8000dd0:	7d3b      	ldrb	r3, [r7, #20]
 8000dd2:	b25a      	sxtb	r2, r3
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <bmp388_setup+0x128>)
 8000dd6:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 8000dd8:	7d7b      	ldrb	r3, [r7, #21]
 8000dda:	b21a      	sxth	r2, r3
 8000ddc:	7dbb      	ldrb	r3, [r7, #22]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21b      	sxth	r3, r3
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b21a      	sxth	r2, r3
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <bmp388_setup+0x128>)
 8000de8:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 8000dea:	7dfb      	ldrb	r3, [r7, #23]
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <bmp388_setup+0x128>)
 8000df0:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8000df2:	7e3b      	ldrb	r3, [r7, #24]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <bmp388_setup+0x128>)
 8000df8:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 8000dfa:	f7ff fe35 	bl	8000a68 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1B, 0x30);  // normal mode, temp pressure on by default with it
 8000dfe:	2130      	movs	r1, #48	@ 0x30
 8000e00:	201b      	movs	r0, #27
 8000e02:	f7ff ff1b 	bl	8000c3c <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 8000e06:	2103      	movs	r1, #3
 8000e08:	201c      	movs	r0, #28
 8000e0a:	f7ff ff17 	bl	8000c3c <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 8000e0e:	2102      	movs	r1, #2
 8000e10:	201d      	movs	r0, #29
 8000e12:	f7ff ff13 	bl	8000c3c <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x02);  // coefficient for IIR filter, ideally low value for the dart
 8000e16:	2102      	movs	r1, #2
 8000e18:	201f      	movs	r0, #31
 8000e1a:	f7ff ff0f 	bl	8000c3c <bmp388_write_reg>
}
 8000e1e:	bf00      	nop
 8000e20:	3738      	adds	r7, #56	@ 0x38
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	240001f4 	.word	0x240001f4

08000e2c <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
  uint8_t data[6];
  uint8_t temp_data[7];
  bmp388_read_reg(0x04, temp_data, 7); // 0x04-0x06 pressure, 0x07-0x09 temperature
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2207      	movs	r2, #7
 8000e36:	4619      	mov	r1, r3
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f7ff ff25 	bl	8000c88 <bmp388_read_reg>
  for (int idx = 0; idx < 6; idx++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e00e      	b.n	8000e62 <bmp388_read_raw_data+0x36>
      {
      	  data[idx] = temp_data[idx + 1];
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	3318      	adds	r3, #24
 8000e4a:	443b      	add	r3, r7
 8000e4c:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8000e50:	f107 020c 	add.w	r2, r7, #12
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	4413      	add	r3, r2
 8000e58:	460a      	mov	r2, r1
 8000e5a:	701a      	strb	r2, [r3, #0]
  for (int idx = 0; idx < 6; idx++)
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	dded      	ble.n	8000e44 <bmp388_read_raw_data+0x18>
      }

  // annoying bit shift because both are 20 bit values
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0])); // ask jason
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	041a      	lsls	r2, r3, #16
 8000e6c:	7b7b      	ldrb	r3, [r7, #13]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	4313      	orrs	r3, r2
 8000e72:	7b3a      	ldrb	r2, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	461a      	mov	r2, r3
 8000e78:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <bmp388_read_raw_data+0x6c>)
 8000e7a:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 8000e7c:	7c7b      	ldrb	r3, [r7, #17]
 8000e7e:	041a      	lsls	r2, r3, #16
 8000e80:	7c3b      	ldrb	r3, [r7, #16]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	4313      	orrs	r3, r2
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4b02      	ldr	r3, [pc, #8]	@ (8000e98 <bmp388_read_raw_data+0x6c>)
 8000e8e:	601a      	str	r2, [r3, #0]

}
 8000e90:	bf00      	nop
 8000e92:	3718      	adds	r7, #24
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	24000248 	.word	0x24000248

08000e9c <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static float bmp388_compensated_temperature(uint32_t raw_temp)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  float partial_data1 = (float)(raw_temp)-quantized_bmp388_calib.par_t1;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <bmp388_compensated_temperature+0x68>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb8:	edc7 7a03 	vstr	s15, [r7, #12]
  float partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <bmp388_compensated_temperature+0x68>)
 8000ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eca:	edc7 7a02 	vstr	s15, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <bmp388_compensated_temperature+0x68>)
 8000ed8:	edd3 7a02 	vldr	s15, [r3, #8]
 8000edc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <bmp388_compensated_temperature+0x68>)
 8000eea:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  return quantized_bmp388_calib.t_lin;
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <bmp388_compensated_temperature+0x68>)
 8000ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef2:	ee07 3a90 	vmov	s15, r3
}
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	2400020c 	.word	0x2400020c

08000f08 <bmp388_compensated_pressure>:

static float bmp388_compensated_pressure(uint32_t raw_pressure)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b08b      	sub	sp, #44	@ 0x2c
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  float pressure;
  float partial_data1, partial_data2, partial_data3, partial_data4;
  float partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8000f10:	4b6d      	ldr	r3, [pc, #436]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f12:	ed93 7a08 	vldr	s14, [r3, #32]
 8000f16:	4b6c      	ldr	r3, [pc, #432]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f18:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f20:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f24:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f26:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000f2a:	4b67      	ldr	r3, [pc, #412]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f2c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f34:	4b64      	ldr	r3, [pc, #400]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f36:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3e:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f42:	4b61      	ldr	r3, [pc, #388]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f44:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000f48:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f4a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f52:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f54:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f5e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8000f6a:	4b57      	ldr	r3, [pc, #348]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f6c:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f70:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f78:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f80:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f88:	edc7 7a06 	vstr	s15, [r7, #24]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f92:	4b4d      	ldr	r3, [pc, #308]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000f94:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f9c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000fa0:	4b49      	ldr	r3, [pc, #292]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fa2:	ed93 7a05 	vldr	s14, [r3, #20]
 8000fa6:	4b48      	ldr	r3, [pc, #288]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fa8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fb0:	4b45      	ldr	r3, [pc, #276]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fb2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000fbe:	4b42      	ldr	r3, [pc, #264]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fc4:	4b40      	ldr	r3, [pc, #256]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fc6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	4b3e      	ldr	r3, [pc, #248]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fd0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000fda:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe2:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_out2 = (float)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff0:	4b35      	ldr	r3, [pc, #212]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8000ff2:	edd3 6a03 	vldr	s13, [r3, #12]
 8000ff6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ffa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000ffe:	edd7 7a08 	vldr	s15, [r7, #32]
 8001002:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001006:	edd7 7a07 	vldr	s15, [r7, #28]
 800100a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800100e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001012:	edc7 7a05 	vstr	s15, [r7, #20]

  partial_data1 = (float)raw_pressure * (float)raw_pressure;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8001034:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 800103a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800103e:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8001040:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104c:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = partial_data1 * partial_data2;
 8001050:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001054:	edd7 7a08 	vldr	s15, [r7, #32]
 8001058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105c:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_data4 = ((float)raw_pressure * (float)raw_pressure * (float)raw_pressure) * quantized_bmp388_calib.par_p11;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <bmp388_compensated_pressure+0x1c0>)
 8001088:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800108c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001090:	edc7 7a04 	vstr	s15, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data3 + partial_data4;
 8001094:	ed97 7a06 	vldr	s14, [r7, #24]
 8001098:	edd7 7a05 	vldr	s15, [r7, #20]
 800109c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	edc7 7a03 	vstr	s15, [r7, #12]

  return pressure;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	ee07 3a90 	vmov	s15, r3
}
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	372c      	adds	r7, #44	@ 0x2c
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	2400020c 	.word	0x2400020c

080010cc <bmp388_getData>:

void bmp388_getData()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80010d0:	f7ff feac 	bl	8000e2c <bmp388_read_raw_data>
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <bmp388_getData+0x34>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff15 	bl	8000f08 <bmp388_compensated_pressure>
 80010de:	eef0 7a40 	vmov.f32	s15, s0
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <bmp388_getData+0x38>)
 80010e4:	edc3 7a01 	vstr	s15, [r3, #4]
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <bmp388_getData+0x34>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fed5 	bl	8000e9c <bmp388_compensated_temperature>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	4b03      	ldr	r3, [pc, #12]	@ (8001104 <bmp388_getData+0x38>)
 80010f8:	edc3 7a00 	vstr	s15, [r3]
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	24000248 	.word	0x24000248
 8001104:	24000250 	.word	0x24000250

08001108 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001110:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001114:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001120:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001124:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001128:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001130:	e000      	b.n	8001134 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001132:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001134:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f9      	beq.n	8001132 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800113e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	@ 0x30
 800115c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800115e:	f000 fa87 	bl	8001670 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001162:	f000 fe2d 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001166:	f000 f849 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116a:	f000 fa0b 	bl	8001584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800116e:	f000 f9bd 	bl	80014ec <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001172:	f000 f8bf 	bl	80012f4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001176:	f000 f96b 	bl	8001450 <MX_TIM2_Init>
  MX_SPI2_Init();
 800117a:	f000 f913 	bl	80013a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 800117e:	481a      	ldr	r0, [pc, #104]	@ (80011e8 <main+0x90>)
 8001180:	f004 ff42 	bl	8006008 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2224      	movs	r2, #36	@ 0x24
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f007 fccb 	bl	8008b2a <memset>
  mpu9250_setup();
 8001194:	f000 fac4 	bl	8001720 <mpu9250_setup>
  bmp388_setup();
 8001198:	f7ff fdb2 	bl	8000d00 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <main+0x94>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <main+0x58>
	  {
		  timer_flag = 0;	//reset timer flag
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <main+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]

		  //mpu9250_getRawAngle();
		  bmp388_getData();
 80011ac:	f7ff ff8e 	bl	80010cc <bmp388_getData>
	 // double pitch_angle = kalman_getAngle(&KalmanPitch, imu_angles.pitch, imu_processed_data.gyro_y, dt);
	  //double roll_angle = kalman_getAngle(&KalmanRoll, imu_angles.roll, imu_processed_data.gyro_x, dt);

	  //send data through UART
	  //snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", pitch_angle, roll_angle);
	  snprintf(buffer, sizeof(buffer), "%lu, %lu\n", bmp388_rawData.temperature, bmp388_rawData.pressure);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	@ (80011f0 <main+0x98>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <main+0x98>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	4638      	mov	r0, r7
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	4a0d      	ldr	r2, [pc, #52]	@ (80011f4 <main+0x9c>)
 80011c0:	2128      	movs	r1, #40	@ 0x28
 80011c2:	f007 fc1b 	bl	80089fc <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011c6:	463b      	mov	r3, r7
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff f8d9 	bl	8000380 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4639      	mov	r1, r7
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	4807      	ldr	r0, [pc, #28]	@ (80011f8 <main+0xa0>)
 80011da:	f005 fbef 	bl	80069bc <HAL_UART_Transmit>
	  HAL_Delay(5);
 80011de:	2005      	movs	r0, #5
 80011e0:	f000 fe80 	bl	8001ee4 <HAL_Delay>
	  if(timer_flag)
 80011e4:	e7da      	b.n	800119c <main+0x44>
 80011e6:	bf00      	nop
 80011e8:	24000368 	.word	0x24000368
 80011ec:	24000448 	.word	0x24000448
 80011f0:	24000248 	.word	0x24000248
 80011f4:	0800c170 	.word	0x0800c170
 80011f8:	240003b4 	.word	0x240003b4

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09c      	sub	sp, #112	@ 0x70
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	224c      	movs	r2, #76	@ 0x4c
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f007 fc8d 	bl	8008b2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	2220      	movs	r2, #32
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fc87 	bl	8008b2a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800121c:	2002      	movs	r0, #2
 800121e:	f001 f9e3 	bl	80025e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001222:	2300      	movs	r3, #0
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <SystemClock_Config+0xf0>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a30      	ldr	r2, [pc, #192]	@ (80012ec <SystemClock_Config+0xf0>)
 800122c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <SystemClock_Config+0xf0>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b2c      	ldr	r3, [pc, #176]	@ (80012f0 <SystemClock_Config+0xf4>)
 800123e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001240:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <SystemClock_Config+0xf4>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001248:	4b29      	ldr	r3, [pc, #164]	@ (80012f0 <SystemClock_Config+0xf4>)
 800124a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124c:	f003 0301 	and.w	r3, r3, #1
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001254:	bf00      	nop
 8001256:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <SystemClock_Config+0xf0>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800125e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001262:	d1f8      	bne.n	8001256 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001264:	2302      	movs	r3, #2
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001268:	2301      	movs	r3, #1
 800126a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126c:	2340      	movs	r3, #64	@ 0x40
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001274:	2300      	movs	r3, #0
 8001276:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001278:	2304      	movs	r3, #4
 800127a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800127c:	233c      	movs	r3, #60	@ 0x3c
 800127e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001280:	2302      	movs	r3, #2
 8001282:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001284:	2305      	movs	r3, #5
 8001286:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001288:	2302      	movs	r3, #2
 800128a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800128c:	230c      	movs	r3, #12
 800128e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001290:	2300      	movs	r3, #0
 8001292:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129c:	4618      	mov	r0, r3
 800129e:	f001 f9dd 	bl	800265c <HAL_RCC_OscConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012a8:	f000 fa0e 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	233f      	movs	r3, #63	@ 0x3f
 80012ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2303      	movs	r3, #3
 80012b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012b8:	2308      	movs	r3, #8
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012bc:	2340      	movs	r3, #64	@ 0x40
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012c0:	2340      	movs	r3, #64	@ 0x40
 80012c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012ca:	2340      	movs	r3, #64	@ 0x40
 80012cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2104      	movs	r1, #4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fe1c 	bl	8002f10 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80012de:	f000 f9f3 	bl	80016c8 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3770      	adds	r7, #112	@ 0x70
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	58024800 	.word	0x58024800
 80012f0:	58000400 	.word	0x58000400

080012f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <MX_SPI1_Init+0xa8>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <MX_SPI1_Init+0xac>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b27      	ldr	r3, [pc, #156]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001304:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b25      	ldr	r3, [pc, #148]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b23      	ldr	r3, [pc, #140]	@ (800139c <MX_SPI1_Init+0xa8>)
 800130e:	2207      	movs	r2, #7
 8001310:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001312:	4b22      	ldr	r3, [pc, #136]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001314:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001318:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <MX_SPI1_Init+0xa8>)
 800131c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001324:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800132a:	4b1c      	ldr	r3, [pc, #112]	@ (800139c <MX_SPI1_Init+0xa8>)
 800132c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001330:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001338:	4b18      	ldr	r3, [pc, #96]	@ (800139c <MX_SPI1_Init+0xa8>)
 800133a:	2200      	movs	r2, #0
 800133c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001340:	2200      	movs	r2, #0
 8001342:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001344:	4b15      	ldr	r3, [pc, #84]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001346:	2200      	movs	r2, #0
 8001348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_SPI1_Init+0xa8>)
 800134c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001350:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001354:	2200      	movs	r2, #0
 8001356:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001358:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_SPI1_Init+0xa8>)
 800135a:	2200      	movs	r2, #0
 800135c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001360:	2200      	movs	r2, #0
 8001362:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001366:	2200      	movs	r2, #0
 8001368:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_SPI1_Init+0xa8>)
 800136c:	2200      	movs	r2, #0
 800136e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001372:	2200      	movs	r2, #0
 8001374:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001378:	2200      	movs	r2, #0
 800137a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	@ (800139c <MX_SPI1_Init+0xa8>)
 800137e:	2200      	movs	r2, #0
 8001380:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_SPI1_Init+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_SPI1_Init+0xa8>)
 800138a:	f003 ff79 	bl	8005280 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001394:	f000 f998 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	24000258 	.word	0x24000258
 80013a0:	40013000 	.word	0x40013000

080013a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013a8:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013aa:	4a28      	ldr	r2, [pc, #160]	@ (800144c <MX_SPI2_Init+0xa8>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013b0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b24      	ldr	r3, [pc, #144]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b22      	ldr	r3, [pc, #136]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013be:	2207      	movs	r2, #7
 80013c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c2:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80013f0:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <MX_SPI2_Init+0xa4>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001406:	2200      	movs	r2, #0
 8001408:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800140a:	4b0f      	ldr	r3, [pc, #60]	@ (8001448 <MX_SPI2_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001410:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001418:	2200      	movs	r2, #0
 800141a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <MX_SPI2_Init+0xa4>)
 800141e:	2200      	movs	r2, #0
 8001420:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001424:	2200      	movs	r2, #0
 8001426:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <MX_SPI2_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	@ (8001448 <MX_SPI2_Init+0xa4>)
 8001436:	f003 ff23 	bl	8005280 <HAL_SPI_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001440:	f000 f942 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	240002e0 	.word	0x240002e0
 800144c:	40003800 	.word	0x40003800

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0310 	add.w	r3, r7, #16
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <MX_TIM2_Init+0x98>)
 8001470:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001474:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <MX_TIM2_Init+0x98>)
 8001478:	f240 321f 	movw	r2, #799	@ 0x31f
 800147c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_TIM2_Init+0x98>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_TIM2_Init+0x98>)
 8001486:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800148a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_TIM2_Init+0x98>)
 800148e:	2200      	movs	r2, #0
 8001490:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_TIM2_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001498:	4813      	ldr	r0, [pc, #76]	@ (80014e8 <MX_TIM2_Init+0x98>)
 800149a:	f004 fd5e 	bl	8005f5a <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014a4:	f000 f910 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MX_TIM2_Init+0x98>)
 80014b6:	f004 ff27 	bl	8006308 <HAL_TIM_ConfigClockSource>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80014c0:	f000 f902 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <MX_TIM2_Init+0x98>)
 80014d2:	f005 f977 	bl	80067c4 <HAL_TIMEx_MasterConfigSynchronization>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80014dc:	f000 f8f4 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3720      	adds	r7, #32
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	24000368 	.word	0x24000368

080014ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_USART2_UART_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	@ (8001580 <MX_USART2_UART_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_USART2_UART_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_USART2_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_USART2_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_USART2_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001536:	f005 f9f1 	bl	800691c <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f8c2 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_USART2_UART_Init+0x90>)
 8001548:	f006 fa87 	bl	8007a5a <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 f8b9 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <MX_USART2_UART_Init+0x90>)
 800155a:	f006 fabc 	bl	8007ad6 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 f8b0 	bl	80016c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_USART2_UART_Init+0x90>)
 800156a:	f006 fa3d 	bl	80079e8 <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f8a8 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	240003b4 	.word	0x240003b4
 8001580:	40004400 	.word	0x40004400

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 030c 	add.w	r3, r7, #12
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <MX_GPIO_Init+0x80>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a0:	4a18      	ldr	r2, [pc, #96]	@ (8001604 <MX_GPIO_Init+0x80>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015aa:	4b16      	ldr	r3, [pc, #88]	@ (8001604 <MX_GPIO_Init+0x80>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <MX_GPIO_Init+0x80>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015be:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <MX_GPIO_Init+0x80>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <MX_GPIO_Init+0x80>)
 80015ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2160      	movs	r1, #96	@ 0x60
 80015da:	480b      	ldr	r0, [pc, #44]	@ (8001608 <MX_GPIO_Init+0x84>)
 80015dc:	f000 ffea 	bl	80025b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 80015e0:	2360      	movs	r3, #96	@ 0x60
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_GPIO_Init+0x84>)
 80015f8:	f000 fe2c 	bl	8002254 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015fc:	bf00      	nop
 80015fe:	3720      	adds	r7, #32
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	58024400 	.word	0x58024400
 8001608:	58020000 	.word	0x58020000

0800160c <HAL_TIM_PeriodElapsedCallback>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
	}
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	24000368 	.word	0x24000368
 8001634:	24000448 	.word	0x24000448

08001638 <_write>:
int _write(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e009      	b.n	800165e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	60ba      	str	r2, [r7, #8]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fd58 	bl	8001108 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbf1      	blt.n	800164a <_write+0x12>
	}
	return len;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001682:	f000 fd6f 	bl	8002164 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800168a:	2300      	movs	r3, #0
 800168c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001692:	231f      	movs	r3, #31
 8001694:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001696:	2387      	movs	r3, #135	@ 0x87
 8001698:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800169a:	2300      	movs	r3, #0
 800169c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800169e:	2300      	movs	r3, #0
 80016a0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016a6:	2301      	movs	r3, #1
 80016a8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fd8d 	bl	80021d4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016ba:	2004      	movs	r0, #4
 80016bc:	f000 fd6a 	bl	8002194 <HAL_MPU_Enable>

}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <Error_Handler+0x8>

080016d4 <mpu9250_write_reg>:
		.R_measure = 0.03f
};


void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	460a      	mov	r2, r1
 80016de:	71fb      	strb	r3, [r7, #7]
 80016e0:	4613      	mov	r3, r2
 80016e2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2120      	movs	r1, #32
 80016e8:	480b      	ldr	r0, [pc, #44]	@ (8001718 <mpu9250_write_reg+0x44>)
 80016ea:	f000 ff63 	bl	80025b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80016ee:	1df9      	adds	r1, r7, #7
 80016f0:	2364      	movs	r3, #100	@ 0x64
 80016f2:	2201      	movs	r2, #1
 80016f4:	4809      	ldr	r0, [pc, #36]	@ (800171c <mpu9250_write_reg+0x48>)
 80016f6:	f003 fee7 	bl	80054c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80016fa:	1db9      	adds	r1, r7, #6
 80016fc:	2364      	movs	r3, #100	@ 0x64
 80016fe:	2201      	movs	r2, #1
 8001700:	4806      	ldr	r0, [pc, #24]	@ (800171c <mpu9250_write_reg+0x48>)
 8001702:	f003 fee1 	bl	80054c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	2120      	movs	r1, #32
 800170a:	4803      	ldr	r0, [pc, #12]	@ (8001718 <mpu9250_write_reg+0x44>)
 800170c:	f000 ff52 	bl	80025b4 <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	58020000 	.word	0x58020000
 800171c:	24000258 	.word	0x24000258

08001720 <mpu9250_setup>:
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
}

void mpu9250_setup()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001724:	2105      	movs	r1, #5
 8001726:	201a      	movs	r0, #26
 8001728:	f7ff ffd4 	bl	80016d4 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 800172c:	2110      	movs	r1, #16
 800172e:	201c      	movs	r0, #28
 8001730:	f7ff ffd0 	bl	80016d4 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001734:	2108      	movs	r1, #8
 8001736:	201b      	movs	r0, #27
 8001738:	f7ff ffcc 	bl	80016d4 <mpu9250_write_reg>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	@ (8001770 <HAL_MspInit+0x30>)
 8001748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800174c:	4a08      	ldr	r2, [pc, #32]	@ (8001770 <HAL_MspInit+0x30>)
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_MspInit+0x30>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	58024400 	.word	0x58024400

08001774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b0be      	sub	sp, #248	@ 0xf8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800178c:	f107 0320 	add.w	r3, r7, #32
 8001790:	22c0      	movs	r2, #192	@ 0xc0
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f007 f9c8 	bl	8008b2a <memset>
  if(hspi->Instance==SPI1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a71      	ldr	r2, [pc, #452]	@ (8001964 <HAL_SPI_MspInit+0x1f0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d16a      	bne.n	800187a <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80017a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	f107 0320 	add.w	r3, r7, #32
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 ff34 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80017c6:	f7ff ff7f 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017ca:	4b67      	ldr	r3, [pc, #412]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017d0:	4a65      	ldr	r2, [pc, #404]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017da:	4b63      	ldr	r3, [pc, #396]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e4:	61fb      	str	r3, [r7, #28]
 80017e6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b58      	ldr	r3, [pc, #352]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180c:	4a56      	ldr	r2, [pc, #344]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001816:	4b54      	ldr	r3, [pc, #336]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001824:	2380      	movs	r3, #128	@ 0x80
 8001826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800183c:	2305      	movs	r3, #5
 800183e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001846:	4619      	mov	r1, r3
 8001848:	4848      	ldr	r0, [pc, #288]	@ (800196c <HAL_SPI_MspInit+0x1f8>)
 800184a:	f000 fd03 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800184e:	2318      	movs	r3, #24
 8001850:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001866:	2305      	movs	r3, #5
 8001868:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001870:	4619      	mov	r1, r3
 8001872:	483f      	ldr	r0, [pc, #252]	@ (8001970 <HAL_SPI_MspInit+0x1fc>)
 8001874:	f000 fcee 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001878:	e070      	b.n	800195c <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a3d      	ldr	r2, [pc, #244]	@ (8001974 <HAL_SPI_MspInit+0x200>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d16b      	bne.n	800195c <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001884:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001890:	2300      	movs	r3, #0
 8001892:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001896:	f107 0320 	add.w	r3, r7, #32
 800189a:	4618      	mov	r0, r3
 800189c:	f001 fec4 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80018a6:	f7ff ff0f 	bl	80016c8 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b27      	ldr	r3, [pc, #156]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d8:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <HAL_SPI_MspInit+0x1f4>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001904:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001908:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800191e:	2305      	movs	r3, #5
 8001920:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001924:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001928:	4619      	mov	r1, r3
 800192a:	4811      	ldr	r0, [pc, #68]	@ (8001970 <HAL_SPI_MspInit+0x1fc>)
 800192c:	f000 fc92 	bl	8002254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001934:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800194a:	2305      	movs	r3, #5
 800194c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001954:	4619      	mov	r1, r3
 8001956:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_SPI_MspInit+0x1f8>)
 8001958:	f000 fc7c 	bl	8002254 <HAL_GPIO_Init>
}
 800195c:	bf00      	nop
 800195e:	37f8      	adds	r7, #248	@ 0xf8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40013000 	.word	0x40013000
 8001968:	58024400 	.word	0x58024400
 800196c:	58020000 	.word	0x58020000
 8001970:	58020400 	.word	0x58020400
 8001974:	40003800 	.word	0x40003800

08001978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001988:	d116      	bne.n	80019b8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198a:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 800198c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001990:	4a0b      	ldr	r2, [pc, #44]	@ (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_TIM_Base_MspInit+0x48>)
 800199c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	201c      	movs	r0, #28
 80019ae:	f000 fba4 	bl	80020fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019b2:	201c      	movs	r0, #28
 80019b4:	f000 fbbb 	bl	800212e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58024400 	.word	0x58024400

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0ba      	sub	sp, #232	@ 0xe8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	22c0      	movs	r2, #192	@ 0xc0
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f007 f8a0 	bl	8008b2a <memset>
  if(huart->Instance==USART2)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a26      	ldr	r2, [pc, #152]	@ (8001a88 <HAL_UART_MspInit+0xc4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d145      	bne.n	8001a80 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019f4:	f04f 0202 	mov.w	r2, #2
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f001 fe0c 	bl	8003628 <HAL_RCCEx_PeriphCLKConfig>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001a16:	f7ff fe57 	bl	80016c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a20:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a26:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a2a:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a3e:	4a13      	ldr	r2, [pc, #76]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a48:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <HAL_UART_MspInit+0xc8>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a56:	230c      	movs	r3, #12
 8001a58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	@ (8001a90 <HAL_UART_MspInit+0xcc>)
 8001a7c:	f000 fbea 	bl	8002254 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a80:	bf00      	nop
 8001a82:	37e8      	adds	r7, #232	@ 0xe8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40004400 	.word	0x40004400
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020000 	.word	0x58020000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <NMI_Handler+0x4>

08001a9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <HardFault_Handler+0x4>

08001aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <MemManage_Handler+0x4>

08001aac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <BusFault_Handler+0x4>

08001ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <UsageFault_Handler+0x4>

08001abc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 f9db 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <TIM2_IRQHandler+0x10>)
 8001afa:	f004 fafd 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	24000368 	.word	0x24000368

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f007 f855 	bl	8008bd0 <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <_exit+0x12>

08001b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e00a      	b.n	8001b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b60:	f3af 8000 	nop.w
 8001b64:	4601      	mov	r1, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf0      	blt.n	8001b60 <_read+0x12>
  }

  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <_isatty>:

int _isatty(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b085      	sub	sp, #20
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f006 ffd6 	bl	8008bd0 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	24080000 	.word	0x24080000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	2400044c 	.word	0x2400044c
 8001c58:	240005a0 	.word	0x240005a0

08001c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c60:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <SystemInit+0xe4>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a36      	ldr	r2, [pc, #216]	@ (8001d40 <SystemInit+0xe4>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c70:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <SystemInit+0xe8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d807      	bhi.n	8001c8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c7c:	4b31      	ldr	r3, [pc, #196]	@ (8001d44 <SystemInit+0xe8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 030f 	bic.w	r3, r3, #15
 8001c84:	4a2f      	ldr	r2, [pc, #188]	@ (8001d44 <SystemInit+0xe8>)
 8001c86:	f043 0307 	orr.w	r3, r3, #7
 8001c8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <SystemInit+0xec>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a2d      	ldr	r2, [pc, #180]	@ (8001d48 <SystemInit+0xec>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	@ (8001d48 <SystemInit+0xec>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <SystemInit+0xec>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4929      	ldr	r1, [pc, #164]	@ (8001d48 <SystemInit+0xec>)
 8001ca4:	4b29      	ldr	r3, [pc, #164]	@ (8001d4c <SystemInit+0xf0>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001caa:	4b26      	ldr	r3, [pc, #152]	@ (8001d44 <SystemInit+0xe8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0308 	and.w	r3, r3, #8
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb6:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <SystemInit+0xe8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 030f 	bic.w	r3, r3, #15
 8001cbe:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <SystemInit+0xe8>)
 8001cc0:	f043 0307 	orr.w	r3, r3, #7
 8001cc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <SystemInit+0xec>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <SystemInit+0xec>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d48 <SystemInit+0xec>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d48 <SystemInit+0xec>)
 8001cda:	4a1d      	ldr	r2, [pc, #116]	@ (8001d50 <SystemInit+0xf4>)
 8001cdc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <SystemInit+0xec>)
 8001ce0:	4a1c      	ldr	r2, [pc, #112]	@ (8001d54 <SystemInit+0xf8>)
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	@ (8001d48 <SystemInit+0xec>)
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <SystemInit+0xfc>)
 8001ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cea:	4b17      	ldr	r3, [pc, #92]	@ (8001d48 <SystemInit+0xec>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <SystemInit+0xec>)
 8001cf2:	4a19      	ldr	r2, [pc, #100]	@ (8001d58 <SystemInit+0xfc>)
 8001cf4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <SystemInit+0xec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <SystemInit+0xec>)
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <SystemInit+0xfc>)
 8001d00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <SystemInit+0xec>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	@ (8001d48 <SystemInit+0xec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d48 <SystemInit+0xec>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <SystemInit+0xec>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <SystemInit+0x100>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <SystemInit+0x104>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d26:	d202      	bcs.n	8001d2e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <SystemInit+0x108>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <SystemInit+0x10c>)
 8001d30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00
 8001d44:	52002000 	.word	0x52002000
 8001d48:	58024400 	.word	0x58024400
 8001d4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d50:	02020200 	.word	0x02020200
 8001d54:	01ff0000 	.word	0x01ff0000
 8001d58:	01010280 	.word	0x01010280
 8001d5c:	5c001000 	.word	0x5c001000
 8001d60:	ffff0000 	.word	0xffff0000
 8001d64:	51008108 	.word	0x51008108
 8001d68:	52004000 	.word	0x52004000

08001d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d70:	f7ff ff74 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d74:	480c      	ldr	r0, [pc, #48]	@ (8001da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d76:	490d      	ldr	r1, [pc, #52]	@ (8001dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d78:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9a:	f006 ff1f 	bl	8008bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d9e:	f7ff f9db 	bl	8001158 <main>
  bx  lr
 8001da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001da4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001dac:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001db0:	0800c5f0 	.word	0x0800c5f0
  ldr r2, =_sbss
 8001db4:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001db8:	240005a0 	.word	0x240005a0

08001dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC3_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 f98c 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dcc:	f001 fa56 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <HAL_Init+0x68>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	4913      	ldr	r1, [pc, #76]	@ (8001e2c <HAL_Init+0x6c>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	f003 031f 	and.w	r3, r3, #31
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dea:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <HAL_Init+0x68>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <HAL_Init+0x6c>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <HAL_Init+0x70>)
 8001e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <HAL_Init+0x74>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e0a:	200f      	movs	r0, #15
 8001e0c:	f000 f814 	bl	8001e38 <HAL_InitTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e002      	b.n	8001e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1a:	f7ff fc91 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58024400 	.word	0x58024400
 8001e2c:	0800c17c 	.word	0x0800c17c
 8001e30:	24000004 	.word	0x24000004
 8001e34:	24000000 	.word	0x24000000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_InitTick+0x60>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e021      	b.n	8001e90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_InitTick+0x64>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_InitTick+0x60>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f971 	bl	800214a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f93b 	bl	80020fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_InitTick+0x68>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2400000c 	.word	0x2400000c
 8001e9c:	24000000 	.word	0x24000000
 8001ea0:	24000008 	.word	0x24000008

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2400000c 	.word	0x2400000c
 8001ec8:	24000450 	.word	0x24000450

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	@ (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	24000450 	.word	0x24000450

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2400000c 	.word	0x2400000c

08001f2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f30:	4b03      	ldr	r3, [pc, #12]	@ (8001f40 <HAL_GetREVID+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	5c001000 	.word	0x5c001000

08001f44 <__NVIC_SetPriorityGrouping>:
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f72:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <__NVIC_SetPriorityGrouping+0x40>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	60d3      	str	r3, [r2, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00
 8001f88:	05fa0000 	.word	0x05fa0000

08001f8c <__NVIC_GetPriorityGrouping>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_EnableIRQ>:
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	db0b      	blt.n	8001fd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	4907      	ldr	r1, [pc, #28]	@ (8001fe0 <__NVIC_EnableIRQ+0x38>)
 8001fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fc6:	095b      	lsrs	r3, r3, #5
 8001fc8:	2001      	movs	r0, #1
 8001fca:	fa00 f202 	lsl.w	r2, r0, r2
 8001fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100

08001fe4 <__NVIC_SetPriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	@ (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	@ (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff29 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002108:	f7ff ff40 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 800210c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	68b9      	ldr	r1, [r7, #8]
 8002112:	6978      	ldr	r0, [r7, #20]
 8002114:	f7ff ff90 	bl	8002038 <NVIC_EncodePriority>
 8002118:	4602      	mov	r2, r0
 800211a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800211e:	4611      	mov	r1, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff5f 	bl	8001fe4 <__NVIC_SetPriority>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002138:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff33 	bl	8001fa8 <__NVIC_EnableIRQ>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffa4 	bl	80020a0 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002168:	f3bf 8f5f 	dmb	sy
}
 800216c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_MPU_Disable+0x28>)
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	4a06      	ldr	r2, [pc, #24]	@ (800218c <HAL_MPU_Disable+0x28>)
 8002174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002178:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800217a:	4b05      	ldr	r3, [pc, #20]	@ (8002190 <HAL_MPU_Disable+0x2c>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	e000ed90 	.word	0xe000ed90

08002194 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800219c:	4a0b      	ldr	r2, [pc, #44]	@ (80021cc <HAL_MPU_Enable+0x38>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_MPU_Enable+0x3c>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	4a09      	ldr	r2, [pc, #36]	@ (80021d0 <HAL_MPU_Enable+0x3c>)
 80021ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80021b2:	f3bf 8f4f 	dsb	sy
}
 80021b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021b8:	f3bf 8f6f 	isb	sy
}
 80021bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed90 	.word	0xe000ed90
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	785a      	ldrb	r2, [r3, #1]
 80021e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	4a19      	ldr	r2, [pc, #100]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80021f0:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7b1b      	ldrb	r3, [r3, #12]
 80021fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	7adb      	ldrb	r3, [r3, #11]
 8002202:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002204:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7a9b      	ldrb	r3, [r3, #10]
 800220a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800220c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7b5b      	ldrb	r3, [r3, #13]
 8002212:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7b9b      	ldrb	r3, [r3, #14]
 800221a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800221c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7bdb      	ldrb	r3, [r3, #15]
 8002222:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	7a5b      	ldrb	r3, [r3, #9]
 800222a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800222c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002234:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800223c:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800223e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002240:	6113      	str	r3, [r2, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000ed90 	.word	0xe000ed90

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002262:	4b89      	ldr	r3, [pc, #548]	@ (8002488 <HAL_GPIO_Init+0x234>)
 8002264:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002266:	e194      	b.n	8002592 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8186 	beq.w	800258c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d005      	beq.n	8002298 <HAL_GPIO_Init+0x44>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d130      	bne.n	80022fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ce:	2201      	movs	r2, #1
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 0201 	and.w	r2, r3, #1
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b03      	cmp	r3, #3
 8002304:	d017      	beq.n	8002336 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	2203      	movs	r2, #3
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4313      	orrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d123      	bne.n	800238a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	08da      	lsrs	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3208      	adds	r2, #8
 800234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0203 	and.w	r2, r3, #3
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80e0 	beq.w	800258c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023cc:	4b2f      	ldr	r3, [pc, #188]	@ (800248c <HAL_GPIO_Init+0x238>)
 80023ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023d2:	4a2e      	ldr	r2, [pc, #184]	@ (800248c <HAL_GPIO_Init+0x238>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023dc:	4b2b      	ldr	r3, [pc, #172]	@ (800248c <HAL_GPIO_Init+0x238>)
 80023de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ea:	4a29      	ldr	r2, [pc, #164]	@ (8002490 <HAL_GPIO_Init+0x23c>)
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	3302      	adds	r3, #2
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	220f      	movs	r2, #15
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a20      	ldr	r2, [pc, #128]	@ (8002494 <HAL_GPIO_Init+0x240>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d052      	beq.n	80024bc <HAL_GPIO_Init+0x268>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_GPIO_Init+0x244>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d031      	beq.n	8002482 <HAL_GPIO_Init+0x22e>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a1e      	ldr	r2, [pc, #120]	@ (800249c <HAL_GPIO_Init+0x248>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d02b      	beq.n	800247e <HAL_GPIO_Init+0x22a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1d      	ldr	r2, [pc, #116]	@ (80024a0 <HAL_GPIO_Init+0x24c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d025      	beq.n	800247a <HAL_GPIO_Init+0x226>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a1c      	ldr	r2, [pc, #112]	@ (80024a4 <HAL_GPIO_Init+0x250>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d01f      	beq.n	8002476 <HAL_GPIO_Init+0x222>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <HAL_GPIO_Init+0x254>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d019      	beq.n	8002472 <HAL_GPIO_Init+0x21e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a1a      	ldr	r2, [pc, #104]	@ (80024ac <HAL_GPIO_Init+0x258>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d013      	beq.n	800246e <HAL_GPIO_Init+0x21a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <HAL_GPIO_Init+0x25c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00d      	beq.n	800246a <HAL_GPIO_Init+0x216>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <HAL_GPIO_Init+0x260>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <HAL_GPIO_Init+0x212>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a17      	ldr	r2, [pc, #92]	@ (80024b8 <HAL_GPIO_Init+0x264>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d101      	bne.n	8002462 <HAL_GPIO_Init+0x20e>
 800245e:	2309      	movs	r3, #9
 8002460:	e02d      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002462:	230a      	movs	r3, #10
 8002464:	e02b      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002466:	2308      	movs	r3, #8
 8002468:	e029      	b.n	80024be <HAL_GPIO_Init+0x26a>
 800246a:	2307      	movs	r3, #7
 800246c:	e027      	b.n	80024be <HAL_GPIO_Init+0x26a>
 800246e:	2306      	movs	r3, #6
 8002470:	e025      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002472:	2305      	movs	r3, #5
 8002474:	e023      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002476:	2304      	movs	r3, #4
 8002478:	e021      	b.n	80024be <HAL_GPIO_Init+0x26a>
 800247a:	2303      	movs	r3, #3
 800247c:	e01f      	b.n	80024be <HAL_GPIO_Init+0x26a>
 800247e:	2302      	movs	r3, #2
 8002480:	e01d      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002482:	2301      	movs	r3, #1
 8002484:	e01b      	b.n	80024be <HAL_GPIO_Init+0x26a>
 8002486:	bf00      	nop
 8002488:	58000080 	.word	0x58000080
 800248c:	58024400 	.word	0x58024400
 8002490:	58000400 	.word	0x58000400
 8002494:	58020000 	.word	0x58020000
 8002498:	58020400 	.word	0x58020400
 800249c:	58020800 	.word	0x58020800
 80024a0:	58020c00 	.word	0x58020c00
 80024a4:	58021000 	.word	0x58021000
 80024a8:	58021400 	.word	0x58021400
 80024ac:	58021800 	.word	0x58021800
 80024b0:	58021c00 	.word	0x58021c00
 80024b4:	58022000 	.word	0x58022000
 80024b8:	58022400 	.word	0x58022400
 80024bc:	2300      	movs	r3, #0
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ce:	4938      	ldr	r1, [pc, #224]	@ (80025b0 <HAL_GPIO_Init+0x35c>)
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002530:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa22 f303 	lsr.w	r3, r2, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	f47f ae63 	bne.w	8002268 <HAL_GPIO_Init+0x14>
  }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3724      	adds	r7, #36	@ 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	58000400 	.word	0x58000400

080025b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025c4:	787b      	ldrb	r3, [r7, #1]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ca:	887a      	ldrh	r2, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025d0:	e003      	b.n	80025da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	041a      	lsls	r2, r3, #16
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025f0:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00a      	beq.n	8002612 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025fc:	4b16      	ldr	r3, [pc, #88]	@ (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01f      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e01d      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	490f      	ldr	r1, [pc, #60]	@ (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4313      	orrs	r3, r2
 8002620:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002622:	f7ff fc53 	bl	8001ecc <HAL_GetTick>
 8002626:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002628:	e009      	b.n	800263e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800262a:	f7ff fc4f 	bl	8001ecc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002638:	d901      	bls.n	800263e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e007      	b.n	800264e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800263e:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_PWREx_ConfigSupply+0x70>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264a:	d1ee      	bne.n	800262a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	58024800 	.word	0x58024800

0800265c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	f000 bc48 	b.w	8002f00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8088 	beq.w	800278e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267e:	4b99      	ldr	r3, [pc, #612]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002688:	4b96      	ldr	r3, [pc, #600]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002690:	2b10      	cmp	r3, #16
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_OscConfig+0x48>
 8002694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002696:	2b18      	cmp	r3, #24
 8002698:	d111      	bne.n	80026be <HAL_RCC_OscConfig+0x62>
 800269a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d10c      	bne.n	80026be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a4:	4b8f      	ldr	r3, [pc, #572]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d06d      	beq.n	800278c <HAL_RCC_OscConfig+0x130>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d169      	bne.n	800278c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f000 bc21 	b.w	8002f00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x7a>
 80026c8:	4b86      	ldr	r3, [pc, #536]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a85      	ldr	r2, [pc, #532]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e02e      	b.n	8002734 <HAL_RCC_OscConfig+0xd8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x9c>
 80026de:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a80      	ldr	r2, [pc, #512]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026e8:	6013      	str	r3, [r2, #0]
 80026ea:	4b7e      	ldr	r3, [pc, #504]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a7d      	ldr	r2, [pc, #500]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80026f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xd8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0xc0>
 8002702:	4b78      	ldr	r3, [pc, #480]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a77      	ldr	r2, [pc, #476]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b75      	ldr	r3, [pc, #468]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a74      	ldr	r2, [pc, #464]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xd8>
 800271c:	4b71      	ldr	r3, [pc, #452]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a70      	ldr	r2, [pc, #448]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b6e      	ldr	r3, [pc, #440]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a6d      	ldr	r2, [pc, #436]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273c:	f7ff fbc6 	bl	8001ecc <HAL_GetTick>
 8002740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fbc2 	bl	8001ecc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e3d4      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002756:	4b63      	ldr	r3, [pc, #396]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xe8>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff fbb2 	bl	8001ecc <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fbae 	bl	8001ecc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e3c0      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800277e:	4b59      	ldr	r3, [pc, #356]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x110>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80ca 	beq.w	8002930 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279c:	4b51      	ldr	r3, [pc, #324]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a6:	4b4f      	ldr	r3, [pc, #316]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_RCC_OscConfig+0x166>
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	2b18      	cmp	r3, #24
 80027b6:	d156      	bne.n	8002866 <HAL_RCC_OscConfig+0x20a>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d151      	bne.n	8002866 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c2:	4b48      	ldr	r3, [pc, #288]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_RCC_OscConfig+0x17e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e392      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027da:	4b42      	ldr	r3, [pc, #264]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 0219 	bic.w	r2, r3, #25
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	493f      	ldr	r1, [pc, #252]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7ff fb6e 	bl	8001ecc <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f4:	f7ff fb6a 	bl	8001ecc <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e37c      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002812:	f7ff fb8b 	bl	8001f2c <HAL_GetREVID>
 8002816:	4603      	mov	r3, r0
 8002818:	f241 0203 	movw	r2, #4099	@ 0x1003
 800281c:	4293      	cmp	r3, r2
 800281e:	d817      	bhi.n	8002850 <HAL_RCC_OscConfig+0x1f4>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b40      	cmp	r3, #64	@ 0x40
 8002826:	d108      	bne.n	800283a <HAL_RCC_OscConfig+0x1de>
 8002828:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002830:	4a2c      	ldr	r2, [pc, #176]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002836:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002838:	e07a      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b2a      	ldr	r3, [pc, #168]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	031b      	lsls	r3, r3, #12
 8002848:	4926      	ldr	r1, [pc, #152]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284e:	e06f      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b24      	ldr	r3, [pc, #144]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	4921      	ldr	r1, [pc, #132]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002860:	4313      	orrs	r3, r2
 8002862:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002864:	e064      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d047      	beq.n	80028fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800286e:	4b1d      	ldr	r3, [pc, #116]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0219 	bic.w	r2, r3, #25
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	491a      	ldr	r1, [pc, #104]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7ff fb24 	bl	8001ecc <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002888:	f7ff fb20 	bl	8001ecc <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e332      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289a:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	f7ff fb41 	bl	8001f2c <HAL_GetREVID>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d819      	bhi.n	80028e8 <HAL_RCC_OscConfig+0x28c>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d108      	bne.n	80028ce <HAL_RCC_OscConfig+0x272>
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028c4:	4a07      	ldr	r2, [pc, #28]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ca:	6053      	str	r3, [r2, #4]
 80028cc:	e030      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	031b      	lsls	r3, r3, #12
 80028dc:	4901      	ldr	r1, [pc, #4]	@ (80028e4 <HAL_RCC_OscConfig+0x288>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	604b      	str	r3, [r1, #4]
 80028e2:	e025      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
 80028e4:	58024400 	.word	0x58024400
 80028e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	4997      	ldr	r1, [pc, #604]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
 80028fc:	e018      	b.n	8002930 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fe:	4b95      	ldr	r3, [pc, #596]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a94      	ldr	r2, [pc, #592]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290a:	f7ff fadf 	bl	8001ecc <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002912:	f7ff fadb 	bl	8001ecc <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e2ed      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002924:	4b8b      	ldr	r3, [pc, #556]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a9 	beq.w	8002a90 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b85      	ldr	r3, [pc, #532]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002946:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002948:	4b82      	ldr	r3, [pc, #520]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d007      	beq.n	8002964 <HAL_RCC_OscConfig+0x308>
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b18      	cmp	r3, #24
 8002958:	d13a      	bne.n	80029d0 <HAL_RCC_OscConfig+0x374>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d135      	bne.n	80029d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002964:	4b7b      	ldr	r3, [pc, #492]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_OscConfig+0x320>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b80      	cmp	r3, #128	@ 0x80
 8002976:	d001      	beq.n	800297c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e2c1      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800297c:	f7ff fad6 	bl	8001f2c <HAL_GetREVID>
 8002980:	4603      	mov	r3, r0
 8002982:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002986:	4293      	cmp	r3, r2
 8002988:	d817      	bhi.n	80029ba <HAL_RCC_OscConfig+0x35e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2b20      	cmp	r3, #32
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x348>
 8002992:	4b70      	ldr	r3, [pc, #448]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800299a:	4a6e      	ldr	r2, [pc, #440]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 800299c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a2:	e075      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	069b      	lsls	r3, r3, #26
 80029b2:	4968      	ldr	r1, [pc, #416]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029b8:	e06a      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029ba:	4b66      	ldr	r3, [pc, #408]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	061b      	lsls	r3, r3, #24
 80029c8:	4962      	ldr	r1, [pc, #392]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029ce:	e05f      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d042      	beq.n	8002a5e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff fa72 	bl	8001ecc <HAL_GetTick>
 80029e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029ec:	f7ff fa6e 	bl	8001ecc <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e280      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029fe:	4b55      	ldr	r3, [pc, #340]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0a:	f7ff fa8f 	bl	8001f2c <HAL_GetREVID>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d817      	bhi.n	8002a48 <HAL_RCC_OscConfig+0x3ec>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3d6>
 8002a20:	4b4c      	ldr	r3, [pc, #304]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a28:	4a4a      	ldr	r2, [pc, #296]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a2e:	6053      	str	r3, [r2, #4]
 8002a30:	e02e      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
 8002a32:	4b48      	ldr	r3, [pc, #288]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	069b      	lsls	r3, r3, #26
 8002a40:	4944      	ldr	r1, [pc, #272]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
 8002a46:	e023      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
 8002a48:	4b42      	ldr	r3, [pc, #264]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	493f      	ldr	r1, [pc, #252]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	60cb      	str	r3, [r1, #12]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a3c      	ldr	r2, [pc, #240]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7ff fa2f 	bl	8001ecc <HAL_GetTick>
 8002a6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a72:	f7ff fa2b 	bl	8001ecc <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e23d      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a84:	4b33      	ldr	r3, [pc, #204]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d036      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab0:	f7ff fa0c 	bl	8001ecc <HAL_GetTick>
 8002ab4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab8:	f7ff fa08 	bl	8001ecc <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e21a      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aca:	4b22      	ldr	r3, [pc, #136]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x45c>
 8002ad6:	e018      	b.n	8002b0a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002adc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7ff f9f2 	bl	8001ecc <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aec:	f7ff f9ee 	bl	8001ecc <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e200      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d039      	beq.n	8002b8a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2a:	f7ff f9cf 	bl	8001ecc <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b32:	f7ff f9cb 	bl	8001ecc <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1dd      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4d6>
 8002b50:	e01b      	b.n	8002b8a <HAL_RCC_OscConfig+0x52e>
 8002b52:	bf00      	nop
 8002b54:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b58:	4b9b      	ldr	r3, [pc, #620]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a9a      	ldr	r2, [pc, #616]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b64:	f7ff f9b2 	bl	8001ecc <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6c:	f7ff f9ae 	bl	8001ecc <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e1c0      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b7e:	4b92      	ldr	r3, [pc, #584]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8081 	beq.w	8002c9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b98:	4b8c      	ldr	r3, [pc, #560]	@ (8002dcc <HAL_RCC_OscConfig+0x770>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a8b      	ldr	r2, [pc, #556]	@ (8002dcc <HAL_RCC_OscConfig+0x770>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba4:	f7ff f992 	bl	8001ecc <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7ff f98e 	bl	8001ecc <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	@ 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1a0      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bbe:	4b83      	ldr	r3, [pc, #524]	@ (8002dcc <HAL_RCC_OscConfig+0x770>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x584>
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	e02d      	b.n	8002c3c <HAL_RCC_OscConfig+0x5e0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x5a6>
 8002be8:	4b77      	ldr	r3, [pc, #476]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bec:	4a76      	ldr	r2, [pc, #472]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf4:	4b74      	ldr	r3, [pc, #464]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf8:	4a73      	ldr	r2, [pc, #460]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	f023 0304 	bic.w	r3, r3, #4
 8002bfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c00:	e01c      	b.n	8002c3c <HAL_RCC_OscConfig+0x5e0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c8>
 8002c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c16:	4b6c      	ldr	r3, [pc, #432]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a6b      	ldr	r2, [pc, #428]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0x5e0>
 8002c24:	4b68      	ldr	r3, [pc, #416]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c28:	4a67      	ldr	r2, [pc, #412]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c30:	4b65      	ldr	r3, [pc, #404]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c34:	4a64      	ldr	r2, [pc, #400]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c44:	f7ff f942 	bl	8001ecc <HAL_GetTick>
 8002c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4a:	e00a      	b.n	8002c62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7ff f93e 	bl	8001ecc <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e14e      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c62:	4b59      	ldr	r3, [pc, #356]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0ee      	beq.n	8002c4c <HAL_RCC_OscConfig+0x5f0>
 8002c6e:	e014      	b.n	8002c9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff f92c 	bl	8001ecc <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7ff f928 	bl	8001ecc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e138      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1ee      	bne.n	8002c78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 812d 	beq.w	8002efe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ca4:	4b48      	ldr	r3, [pc, #288]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cac:	2b18      	cmp	r3, #24
 8002cae:	f000 80bd 	beq.w	8002e2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	f040 809e 	bne.w	8002df8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b42      	ldr	r3, [pc, #264]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a41      	ldr	r2, [pc, #260]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7ff f900 	bl	8001ecc <HAL_GetTick>
 8002ccc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7ff f8fc 	bl	8001ecc <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e10e      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce2:	4b39      	ldr	r3, [pc, #228]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cee:	4b36      	ldr	r3, [pc, #216]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf2:	4b37      	ldr	r3, [pc, #220]	@ (8002dd0 <HAL_RCC_OscConfig+0x774>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cfe:	0112      	lsls	r2, r2, #4
 8002d00:	430a      	orrs	r2, r1
 8002d02:	4931      	ldr	r1, [pc, #196]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d16:	3b01      	subs	r3, #1
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	3b01      	subs	r3, #1
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d38:	4923      	ldr	r1, [pc, #140]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d3e:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d4e:	4b21      	ldr	r3, [pc, #132]	@ (8002dd4 <HAL_RCC_OscConfig+0x778>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d56:	00d2      	lsls	r2, r2, #3
 8002d58:	491b      	ldr	r1, [pc, #108]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	f023 020c 	bic.w	r2, r3, #12
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6a:	4917      	ldr	r1, [pc, #92]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d70:	4b15      	ldr	r3, [pc, #84]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d74:	f023 0202 	bic.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7c:	4912      	ldr	r1, [pc, #72]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002da6:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	4a07      	ldr	r2, [pc, #28]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_RCC_OscConfig+0x76c>)
 8002db8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7ff f885 	bl	8001ecc <HAL_GetTick>
 8002dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc4:	e011      	b.n	8002dea <HAL_RCC_OscConfig+0x78e>
 8002dc6:	bf00      	nop
 8002dc8:	58024400 	.word	0x58024400
 8002dcc:	58024800 	.word	0x58024800
 8002dd0:	fffffc0c 	.word	0xfffffc0c
 8002dd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7ff f878 	bl	8001ecc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e08a      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dea:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x77c>
 8002df6:	e082      	b.n	8002efe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e04:	f7ff f862 	bl	8001ecc <HAL_GetTick>
 8002e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff f85e 	bl	8001ecc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e070      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x7b0>
 8002e2a:	e068      	b.n	8002efe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e32:	4b35      	ldr	r3, [pc, #212]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d031      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0203 	and.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d12a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d122      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d11a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0a5b      	lsrs	r3, r3, #9
 8002e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d111      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d108      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	0e1b      	lsrs	r3, r3, #24
 8002e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d001      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e02b      	b.n	8002f00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ea8:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eac:	08db      	lsrs	r3, r3, #3
 8002eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d01f      	beq.n	8002efe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002ebe:	4b12      	ldr	r3, [pc, #72]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec2:	4a11      	ldr	r2, [pc, #68]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eca:	f7fe ffff 	bl	8001ecc <HAL_GetTick>
 8002ece:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ed0:	bf00      	nop
 8002ed2:	f7fe fffb 	bl	8001ecc <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d0f9      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <HAL_RCC_OscConfig+0x8b0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eea:	00d2      	lsls	r2, r2, #3
 8002eec:	4906      	ldr	r1, [pc, #24]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ef2:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <HAL_RCC_OscConfig+0x8ac>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3730      	adds	r7, #48	@ 0x30
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	58024400 	.word	0x58024400
 8002f0c:	ffff0007 	.word	0xffff0007

08002f10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e19c      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b8a      	ldr	r3, [pc, #552]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d910      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 020f 	bic.w	r2, r3, #15
 8002f3a:	4985      	ldr	r1, [pc, #532]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b83      	ldr	r3, [pc, #524]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e184      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b7b      	ldr	r3, [pc, #492]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d908      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f70:	4b78      	ldr	r3, [pc, #480]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	4975      	ldr	r1, [pc, #468]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d010      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	4b70      	ldr	r3, [pc, #448]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d908      	bls.n	8002fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	496a      	ldr	r1, [pc, #424]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d010      	beq.n	8002fde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699a      	ldr	r2, [r3, #24]
 8002fc0:	4b64      	ldr	r3, [pc, #400]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d908      	bls.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fcc:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	495e      	ldr	r1, [pc, #376]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0320 	and.w	r3, r3, #32
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d010      	beq.n	800300c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69da      	ldr	r2, [r3, #28]
 8002fee:	4b59      	ldr	r3, [pc, #356]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d908      	bls.n	800300c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ffa:	4b56      	ldr	r3, [pc, #344]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4953      	ldr	r1, [pc, #332]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003008:	4313      	orrs	r3, r2
 800300a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	429a      	cmp	r2, r3
 8003026:	d908      	bls.n	800303a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003028:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f023 020f 	bic.w	r2, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4947      	ldr	r1, [pc, #284]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003036:	4313      	orrs	r3, r2
 8003038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d055      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003046:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	4940      	ldr	r1, [pc, #256]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003054:	4313      	orrs	r3, r2
 8003056:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d107      	bne.n	8003070 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003060:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d121      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0f6      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d107      	bne.n	8003088 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d115      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0ea      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d107      	bne.n	80030a0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003090:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e0de      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d6      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030b0:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4925      	ldr	r1, [pc, #148]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030c2:	f7fe ff03 	bl	8001ecc <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ca:	f7fe feff 	bl	8001ecc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e0be      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d1eb      	bne.n	80030ca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	4b14      	ldr	r3, [pc, #80]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	429a      	cmp	r2, r3
 800310c:	d208      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f023 020f 	bic.w	r2, r3, #15
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	490e      	ldr	r1, [pc, #56]	@ (8003154 <HAL_RCC_ClockConfig+0x244>)
 800311c:	4313      	orrs	r3, r2
 800311e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d214      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 020f 	bic.w	r2, r3, #15
 8003136:	4906      	ldr	r1, [pc, #24]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <HAL_RCC_ClockConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e086      	b.n	800325e <HAL_RCC_ClockConfig+0x34e>
 8003150:	52002000 	.word	0x52002000
 8003154:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d010      	beq.n	8003186 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	4b3f      	ldr	r3, [pc, #252]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003170:	429a      	cmp	r2, r3
 8003172:	d208      	bcs.n	8003186 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003174:	4b3c      	ldr	r3, [pc, #240]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	4939      	ldr	r1, [pc, #228]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003182:	4313      	orrs	r3, r2
 8003184:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d010      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800319e:	429a      	cmp	r2, r3
 80031a0:	d208      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031a2:	4b31      	ldr	r3, [pc, #196]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	492e      	ldr	r1, [pc, #184]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	4b28      	ldr	r3, [pc, #160]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d208      	bcs.n	80031e2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031d0:	4b25      	ldr	r3, [pc, #148]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	4922      	ldr	r1, [pc, #136]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	4b1d      	ldr	r3, [pc, #116]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d208      	bcs.n	8003210 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	4917      	ldr	r1, [pc, #92]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 800320c:	4313      	orrs	r3, r2
 800320e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003210:	f000 f834 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	4912      	ldr	r1, [pc, #72]	@ (800326c <HAL_RCC_ClockConfig+0x35c>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
 800322c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <HAL_RCC_ClockConfig+0x358>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <HAL_RCC_ClockConfig+0x35c>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	fa22 f303 	lsr.w	r3, r2, r3
 8003244:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <HAL_RCC_ClockConfig+0x360>)
 8003246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003248:	4a0a      	ldr	r2, [pc, #40]	@ (8003274 <HAL_RCC_ClockConfig+0x364>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800324e:	4b0a      	ldr	r3, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x368>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fdf0 	bl	8001e38 <HAL_InitTick>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800325c:	7bfb      	ldrb	r3, [r7, #15]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400
 800326c:	0800c17c 	.word	0x0800c17c
 8003270:	24000004 	.word	0x24000004
 8003274:	24000000 	.word	0x24000000
 8003278:	24000008 	.word	0x24000008

0800327c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003282:	4bb3      	ldr	r3, [pc, #716]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800328a:	2b18      	cmp	r3, #24
 800328c:	f200 8155 	bhi.w	800353a <HAL_RCC_GetSysClockFreq+0x2be>
 8003290:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032fd 	.word	0x080032fd
 800329c:	0800353b 	.word	0x0800353b
 80032a0:	0800353b 	.word	0x0800353b
 80032a4:	0800353b 	.word	0x0800353b
 80032a8:	0800353b 	.word	0x0800353b
 80032ac:	0800353b 	.word	0x0800353b
 80032b0:	0800353b 	.word	0x0800353b
 80032b4:	0800353b 	.word	0x0800353b
 80032b8:	08003323 	.word	0x08003323
 80032bc:	0800353b 	.word	0x0800353b
 80032c0:	0800353b 	.word	0x0800353b
 80032c4:	0800353b 	.word	0x0800353b
 80032c8:	0800353b 	.word	0x0800353b
 80032cc:	0800353b 	.word	0x0800353b
 80032d0:	0800353b 	.word	0x0800353b
 80032d4:	0800353b 	.word	0x0800353b
 80032d8:	08003329 	.word	0x08003329
 80032dc:	0800353b 	.word	0x0800353b
 80032e0:	0800353b 	.word	0x0800353b
 80032e4:	0800353b 	.word	0x0800353b
 80032e8:	0800353b 	.word	0x0800353b
 80032ec:	0800353b 	.word	0x0800353b
 80032f0:	0800353b 	.word	0x0800353b
 80032f4:	0800353b 	.word	0x0800353b
 80032f8:	0800332f 	.word	0x0800332f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032fc:	4b94      	ldr	r3, [pc, #592]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003308:	4b91      	ldr	r3, [pc, #580]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	08db      	lsrs	r3, r3, #3
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	4a90      	ldr	r2, [pc, #576]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003314:	fa22 f303 	lsr.w	r3, r2, r3
 8003318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800331a:	e111      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800331c:	4b8d      	ldr	r3, [pc, #564]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800331e:	61bb      	str	r3, [r7, #24]
      break;
 8003320:	e10e      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003322:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003324:	61bb      	str	r3, [r7, #24]
      break;
 8003326:	e10b      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003328:	4b8c      	ldr	r3, [pc, #560]	@ (800355c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800332a:	61bb      	str	r3, [r7, #24]
      break;
 800332c:	e108      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800332e:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003338:	4b85      	ldr	r3, [pc, #532]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003342:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003344:	4b82      	ldr	r3, [pc, #520]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800334e:	4b80      	ldr	r3, [pc, #512]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003352:	08db      	lsrs	r3, r3, #3
 8003354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80e1 	beq.w	8003534 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2b02      	cmp	r3, #2
 8003376:	f000 8083 	beq.w	8003480 <HAL_RCC_GetSysClockFreq+0x204>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b02      	cmp	r3, #2
 800337e:	f200 80a1 	bhi.w	80034c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x114>
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d056      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x1c0>
 800338e:	e099      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003390:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02d      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800339c:	4b6c      	ldr	r3, [pc, #432]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	08db      	lsrs	r3, r3, #3
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003554 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033a8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033f6:	e087      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003564 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b51      	ldr	r3, [pc, #324]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800343a:	e065      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003568 <HAL_RCC_GetSysClockFreq+0x2ec>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b40      	ldr	r3, [pc, #256]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	e043      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800356c <HAL_RCC_GetSysClockFreq+0x2f0>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c2:	e021      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003568 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003560 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800350a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350c:	0a5b      	lsrs	r3, r3, #9
 800350e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003512:	3301      	adds	r3, #1
 8003514:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	ee07 3a90 	vmov	s15, r3
 800351c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003520:	edd7 6a07 	vldr	s13, [r7, #28]
 8003524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	ee17 3a90 	vmov	r3, s15
 8003530:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003532:	e005      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	61bb      	str	r3, [r7, #24]
      break;
 8003538:	e002      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800353c:	61bb      	str	r3, [r7, #24]
      break;
 800353e:	bf00      	nop
  }

  return sysclockfreq;
 8003540:	69bb      	ldr	r3, [r7, #24]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	58024400 	.word	0x58024400
 8003554:	03d09000 	.word	0x03d09000
 8003558:	003d0900 	.word	0x003d0900
 800355c:	017d7840 	.word	0x017d7840
 8003560:	46000000 	.word	0x46000000
 8003564:	4c742400 	.word	0x4c742400
 8003568:	4a742400 	.word	0x4a742400
 800356c:	4bbebc20 	.word	0x4bbebc20

08003570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003576:	f7ff fe81 	bl	800327c <HAL_RCC_GetSysClockFreq>
 800357a:	4602      	mov	r2, r0
 800357c:	4b10      	ldr	r3, [pc, #64]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	490f      	ldr	r1, [pc, #60]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003588:	5ccb      	ldrb	r3, [r1, r3]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	fa22 f303 	lsr.w	r3, r2, r3
 8003592:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	4a09      	ldr	r2, [pc, #36]	@ (80035c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	4a07      	ldr	r2, [pc, #28]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035ae:	4a07      	ldr	r2, [pc, #28]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	58024400 	.word	0x58024400
 80035c4:	0800c17c 	.word	0x0800c17c
 80035c8:	24000004 	.word	0x24000004
 80035cc:	24000000 	.word	0x24000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80035d4:	f7ff ffcc 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b06      	ldr	r3, [pc, #24]	@ (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4904      	ldr	r1, [pc, #16]	@ (80035f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	58024400 	.word	0x58024400
 80035f8:	0800c17c 	.word	0x0800c17c

080035fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003600:	f7ff ffb6 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4904      	ldr	r1, [pc, #16]	@ (8003624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	58024400 	.word	0x58024400
 8003624:	0800c17c 	.word	0x0800c17c

08003628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800362c:	b0ca      	sub	sp, #296	@ 0x128
 800362e:	af00      	add	r7, sp, #0
 8003630:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800363a:	2300      	movs	r3, #0
 800363c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800364c:	2500      	movs	r5, #0
 800364e:	ea54 0305 	orrs.w	r3, r4, r5
 8003652:	d049      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800365a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800365e:	d02f      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003660:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003664:	d828      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800366a:	d01a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800366c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003670:	d822      	bhi.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367a:	d007      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800367c:	e01c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800367e:	4bb8      	ldr	r3, [pc, #736]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	4ab7      	ldr	r2, [pc, #732]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003688:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800368a:	e01a      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	3308      	adds	r3, #8
 8003692:	2102      	movs	r1, #2
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fc8f 	bl	8004fb8 <RCCEx_PLL2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036a0:	e00f      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a6:	3328      	adds	r3, #40	@ 0x28
 80036a8:	2102      	movs	r1, #2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fd36 	bl	800511c <RCCEx_PLL3_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036b6:	e004      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036be:	e000      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80036ca:	4ba5      	ldr	r3, [pc, #660]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80036d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036d8:	4aa1      	ldr	r2, [pc, #644]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	430b      	orrs	r3, r1
 80036dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80036de:	e003      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80036f4:	f04f 0900 	mov.w	r9, #0
 80036f8:	ea58 0309 	orrs.w	r3, r8, r9
 80036fc:	d047      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003704:	2b04      	cmp	r3, #4
 8003706:	d82a      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003708:	a201      	add	r2, pc, #4	@ (adr r2, 8003710 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370e:	bf00      	nop
 8003710:	08003725 	.word	0x08003725
 8003714:	08003733 	.word	0x08003733
 8003718:	08003749 	.word	0x08003749
 800371c:	08003767 	.word	0x08003767
 8003720:	08003767 	.word	0x08003767
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4b8e      	ldr	r3, [pc, #568]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003728:	4a8d      	ldr	r2, [pc, #564]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003730:	e01a      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	3308      	adds	r3, #8
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f001 fc3c 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003746:	e00f      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	3328      	adds	r3, #40	@ 0x28
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f001 fce3 	bl	800511c <RCCEx_PLL3_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800375c:	e004      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003770:	4b7b      	ldr	r3, [pc, #492]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003774:	f023 0107 	bic.w	r1, r3, #7
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	4a78      	ldr	r2, [pc, #480]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003780:	430b      	orrs	r3, r1
 8003782:	6513      	str	r3, [r2, #80]	@ 0x50
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800379a:	f04f 0b00 	mov.w	fp, #0
 800379e:	ea5a 030b 	orrs.w	r3, sl, fp
 80037a2:	d04c      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ae:	d030      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037b4:	d829      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80037b8:	d02d      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80037bc:	d825      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037be:	2b80      	cmp	r3, #128	@ 0x80
 80037c0:	d018      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037c2:	2b80      	cmp	r3, #128	@ 0x80
 80037c4:	d821      	bhi.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d007      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80037ce:	e01c      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d0:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d4:	4a62      	ldr	r2, [pc, #392]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037dc:	e01c      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	3308      	adds	r3, #8
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f001 fbe6 	bl	8004fb8 <RCCEx_PLL2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037f2:	e011      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	3328      	adds	r3, #40	@ 0x28
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 fc8d 	bl	800511c <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003808:	e006      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003810:	e002      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003812:	bf00      	nop
 8003814:	e000      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10a      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003820:	4b4f      	ldr	r3, [pc, #316]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003824:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382e:	4a4c      	ldr	r2, [pc, #304]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003830:	430b      	orrs	r3, r1
 8003832:	6513      	str	r3, [r2, #80]	@ 0x50
 8003834:	e003      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800384a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800384e:	2300      	movs	r3, #0
 8003850:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003854:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d053      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800385e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003862:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003866:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800386a:	d035      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800386c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003870:	d82e      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003872:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003876:	d031      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003878:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800387c:	d828      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800387e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003882:	d01a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003888:	d822      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800388e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003892:	d007      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003894:	e01c      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003896:	4b32      	ldr	r3, [pc, #200]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389a:	4a31      	ldr	r2, [pc, #196]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a2:	e01c      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	3308      	adds	r3, #8
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f001 fb83 	bl	8004fb8 <RCCEx_PLL2_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038b8:	e011      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038be:	3328      	adds	r3, #40	@ 0x28
 80038c0:	2100      	movs	r1, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fc2a 	bl	800511c <RCCEx_PLL3_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038ce:	e006      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d6:	e002      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038d8:	bf00      	nop
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003912:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800391c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d056      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800392e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003932:	d038      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003934:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003938:	d831      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800393a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800393e:	d034      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003940:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003944:	d82b      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003946:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800394a:	d01d      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800394c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003950:	d825      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003956:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800395c:	e01f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800395e:	bf00      	nop
 8003960:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003964:	4ba2      	ldr	r3, [pc, #648]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	4aa1      	ldr	r2, [pc, #644]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800396e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003970:	e01c      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	3308      	adds	r3, #8
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fb1c 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003986:	e011      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398c:	3328      	adds	r3, #40	@ 0x28
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 fbc3 	bl	800511c <RCCEx_PLL3_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039b4:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039c4:	4a8a      	ldr	r2, [pc, #552]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80039e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80039ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80039ee:	460b      	mov	r3, r1
 80039f0:	4313      	orrs	r3, r2
 80039f2:	d03a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	2b30      	cmp	r3, #48	@ 0x30
 80039fc:	d01f      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039fe:	2b30      	cmp	r3, #48	@ 0x30
 8003a00:	d819      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d00c      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a06:	2b20      	cmp	r3, #32
 8003a08:	d815      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d019      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d111      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a12:	4b77      	ldr	r3, [pc, #476]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a16:	4a76      	ldr	r2, [pc, #472]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a1e:	e011      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a24:	3308      	adds	r3, #8
 8003a26:	2102      	movs	r1, #2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f001 fac5 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a4c:	4b68      	ldr	r3, [pc, #416]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a50:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a5a:	4a65      	ldr	r2, [pc, #404]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003a76:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003a80:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	d051      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a94:	d035      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a9a:	d82e      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a9c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aa0:	d031      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003aa2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aa6:	d828      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aac:	d01a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ab2:	d822      	bhi.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003abc:	d007      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003abe:	e01c      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ac0:	4b4b      	ldr	r3, [pc, #300]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003acc:	e01c      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fa6e 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ae2:	e011      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	3328      	adds	r3, #40	@ 0x28
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 fb15 	bl	800511c <RCCEx_PLL3_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b10:	4b37      	ldr	r3, [pc, #220]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b14:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	4a34      	ldr	r2, [pc, #208]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	d056      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b58:	d033      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b5e:	d82c      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b64:	d02f      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b6a:	d826      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b70:	d02b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b76:	d820      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b7c:	d012      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b82:	d81a      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d115      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3308      	adds	r3, #8
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 fa0e 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	3328      	adds	r3, #40	@ 0x28
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fab5 	bl	800511c <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10d      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bdc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be6:	4a02      	ldr	r2, [pc, #8]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6513      	str	r3, [r2, #80]	@ 0x50
 8003bec:	e006      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	d055      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c28:	d033      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c2e:	d82c      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c34:	d02f      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3a:	d826      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c40:	d02b      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c46:	d820      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c4c:	d012      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c52:	d81a      	bhi.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d022      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c5c:	d115      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f9a6 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c72:	e015      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f001 fa4d 	bl	800511c <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c88:	e00a      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c90:	e006      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c92:	bf00      	nop
 8003c94:	e004      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10b      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ca8:	4ba3      	ldr	r3, [pc, #652]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cb8:	4a9f      	ldr	r2, [pc, #636]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbe:	e003      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	d037      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf2:	d00e      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003cf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf8:	d816      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003cfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d04:	4b8c      	ldr	r3, [pc, #560]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	4a8b      	ldr	r2, [pc, #556]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d10:	e00f      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	3308      	adds	r3, #8
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f001 f94c 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a7b      	ldr	r2, [pc, #492]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	430b      	orrs	r3, r1
 8003d4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003d6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	d039      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d81c      	bhi.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d82:	a201      	add	r2, pc, #4	@ (adr r2, 8003d88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003dc5 	.word	0x08003dc5
 8003d8c:	08003d99 	.word	0x08003d99
 8003d90:	08003da7 	.word	0x08003da7
 8003d94:	08003dc5 	.word	0x08003dc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b67      	ldr	r3, [pc, #412]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9c:	4a66      	ldr	r2, [pc, #408]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	3308      	adds	r3, #8
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f902 	bl	8004fb8 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dba:	e004      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dce:	4b5a      	ldr	r3, [pc, #360]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd2:	f023 0103 	bic.w	r1, r3, #3
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ddc:	4a56      	ldr	r2, [pc, #344]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003de2:	e003      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003df8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e06:	460b      	mov	r3, r1
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f000 809f 	beq.w	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a4a      	ldr	r2, [pc, #296]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e1a:	f7fe f857 	bl	8001ecc <HAL_GetTick>
 8003e1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e22:	e00b      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e24:	f7fe f852 	bl	8001ecc <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	@ 0x64
 8003e32:	d903      	bls.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3a:	e005      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0ed      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d179      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e50:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e5c:	4053      	eors	r3, r2
 8003e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d015      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e66:	4b34      	ldr	r3, [pc, #208]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e72:	4b31      	ldr	r3, [pc, #196]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e76:	4a30      	ldr	r2, [pc, #192]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a2d      	ldr	r2, [pc, #180]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e9e:	d118      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe f814 	bl	8001ecc <HAL_GetTick>
 8003ea4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea8:	e00d      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eaa:	f7fe f80f 	bl	8001ecc <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eb4:	1ad2      	subs	r2, r2, r3
 8003eb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d903      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003ec4:	e005      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0eb      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d129      	bne.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eea:	d10e      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003efc:	091a      	lsrs	r2, r3, #4
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6113      	str	r3, [r2, #16]
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f14:	6113      	str	r3, [r2, #16]
 8003f16:	4b08      	ldr	r3, [pc, #32]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	4a04      	ldr	r2, [pc, #16]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2c:	e00e      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f36:	e009      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	58024800 	.word	0x58024800
 8003f40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 0301 	and.w	r3, r2, #1
 8003f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f000 8089 	beq.w	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f74:	2b28      	cmp	r3, #40	@ 0x28
 8003f76:	d86b      	bhi.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f78:	a201      	add	r2, pc, #4	@ (adr r2, 8003f80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	08004059 	.word	0x08004059
 8003f84:	08004051 	.word	0x08004051
 8003f88:	08004051 	.word	0x08004051
 8003f8c:	08004051 	.word	0x08004051
 8003f90:	08004051 	.word	0x08004051
 8003f94:	08004051 	.word	0x08004051
 8003f98:	08004051 	.word	0x08004051
 8003f9c:	08004051 	.word	0x08004051
 8003fa0:	08004025 	.word	0x08004025
 8003fa4:	08004051 	.word	0x08004051
 8003fa8:	08004051 	.word	0x08004051
 8003fac:	08004051 	.word	0x08004051
 8003fb0:	08004051 	.word	0x08004051
 8003fb4:	08004051 	.word	0x08004051
 8003fb8:	08004051 	.word	0x08004051
 8003fbc:	08004051 	.word	0x08004051
 8003fc0:	0800403b 	.word	0x0800403b
 8003fc4:	08004051 	.word	0x08004051
 8003fc8:	08004051 	.word	0x08004051
 8003fcc:	08004051 	.word	0x08004051
 8003fd0:	08004051 	.word	0x08004051
 8003fd4:	08004051 	.word	0x08004051
 8003fd8:	08004051 	.word	0x08004051
 8003fdc:	08004051 	.word	0x08004051
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004051 	.word	0x08004051
 8003fe8:	08004051 	.word	0x08004051
 8003fec:	08004051 	.word	0x08004051
 8003ff0:	08004051 	.word	0x08004051
 8003ff4:	08004051 	.word	0x08004051
 8003ff8:	08004051 	.word	0x08004051
 8003ffc:	08004051 	.word	0x08004051
 8004000:	08004059 	.word	0x08004059
 8004004:	08004051 	.word	0x08004051
 8004008:	08004051 	.word	0x08004051
 800400c:	08004051 	.word	0x08004051
 8004010:	08004051 	.word	0x08004051
 8004014:	08004051 	.word	0x08004051
 8004018:	08004051 	.word	0x08004051
 800401c:	08004051 	.word	0x08004051
 8004020:	08004059 	.word	0x08004059
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	3308      	adds	r3, #8
 800402a:	2101      	movs	r1, #1
 800402c:	4618      	mov	r0, r3
 800402e:	f000 ffc3 	bl	8004fb8 <RCCEx_PLL2_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004038:	e00f      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	3328      	adds	r3, #40	@ 0x28
 8004040:	2101      	movs	r1, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f001 f86a 	bl	800511c <RCCEx_PLL3_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800404e:	e004      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004056:	e000      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004062:	4bbf      	ldr	r3, [pc, #764]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004066:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004070:	4abb      	ldr	r2, [pc, #748]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004072:	430b      	orrs	r3, r1
 8004074:	6553      	str	r3, [r2, #84]	@ 0x54
 8004076:	e003      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800407c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004088:	f002 0302 	and.w	r3, r2, #2
 800408c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004090:	2300      	movs	r3, #0
 8004092:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004096:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800409a:	460b      	mov	r3, r1
 800409c:	4313      	orrs	r3, r2
 800409e:	d041      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040a6:	2b05      	cmp	r3, #5
 80040a8:	d824      	bhi.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040aa:	a201      	add	r2, pc, #4	@ (adr r2, 80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b0:	080040fd 	.word	0x080040fd
 80040b4:	080040c9 	.word	0x080040c9
 80040b8:	080040df 	.word	0x080040df
 80040bc:	080040fd 	.word	0x080040fd
 80040c0:	080040fd 	.word	0x080040fd
 80040c4:	080040fd 	.word	0x080040fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	3308      	adds	r3, #8
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 ff71 	bl	8004fb8 <RCCEx_PLL2_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00f      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e2:	3328      	adds	r3, #40	@ 0x28
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f001 f818 	bl	800511c <RCCEx_PLL3_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80040f2:	e004      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80040fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004106:	4b96      	ldr	r3, [pc, #600]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410a:	f023 0107 	bic.w	r1, r3, #7
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004114:	4a92      	ldr	r2, [pc, #584]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6553      	str	r3, [r2, #84]	@ 0x54
 800411a:	e003      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412c:	f002 0304 	and.w	r3, r2, #4
 8004130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004134:	2300      	movs	r3, #0
 8004136:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800413a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d044      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800414c:	2b05      	cmp	r3, #5
 800414e:	d825      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004150:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004156:	bf00      	nop
 8004158:	080041a5 	.word	0x080041a5
 800415c:	08004171 	.word	0x08004171
 8004160:	08004187 	.word	0x08004187
 8004164:	080041a5 	.word	0x080041a5
 8004168:	080041a5 	.word	0x080041a5
 800416c:	080041a5 	.word	0x080041a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004174:	3308      	adds	r3, #8
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 ff1d 	bl	8004fb8 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 ffc4 	bl	800511c <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	f023 0107 	bic.w	r1, r3, #7
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041be:	4a68      	ldr	r2, [pc, #416]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f002 0320 	and.w	r3, r2, #32
 80041da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d055      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041fa:	d033      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80041fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004200:	d82c      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004206:	d02f      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420c:	d826      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800420e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004212:	d02b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004214:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004218:	d820      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800421a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800421e:	d012      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004224:	d81a      	bhi.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d022      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800422a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800422e:	d115      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	3308      	adds	r3, #8
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f000 febd 	bl	8004fb8 <RCCEx_PLL2_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004244:	e015      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3328      	adds	r3, #40	@ 0x28
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 ff64 	bl	800511c <RCCEx_PLL3_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800425a:	e00a      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004262:	e006      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004264:	bf00      	nop
 8004266:	e004      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800427a:	4b39      	ldr	r3, [pc, #228]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800427c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428a:	4a35      	ldr	r2, [pc, #212]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800428c:	430b      	orrs	r3, r1
 800428e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004290:	e003      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042aa:	2300      	movs	r3, #0
 80042ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d058      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042c6:	d033      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80042c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042cc:	d82c      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d2:	d02f      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042d8:	d826      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042de:	d02b      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80042e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80042e4:	d820      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042ea:	d012      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80042ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042f0:	d81a      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d022      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80042f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042fa:	d115      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	3308      	adds	r3, #8
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fe57 	bl	8004fb8 <RCCEx_PLL2_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004310:	e015      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004316:	3328      	adds	r3, #40	@ 0x28
 8004318:	2102      	movs	r1, #2
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fefe 	bl	800511c <RCCEx_PLL3_Config>
 8004320:	4603      	mov	r3, r0
 8004322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004326:	e00a      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800432e:	e006      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004330:	bf00      	nop
 8004332:	e004      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800433c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10e      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004346:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004356:	4a02      	ldr	r2, [pc, #8]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6593      	str	r3, [r2, #88]	@ 0x58
 800435c:	e006      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800435e:	bf00      	nop
 8004360:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004364:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004368:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004374:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004378:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004382:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004386:	460b      	mov	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	d055      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800438c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004390:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004394:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004398:	d033      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800439a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800439e:	d82c      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043a4:	d02f      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043aa:	d826      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043b0:	d02b      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043b6:	d820      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043bc:	d012      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043c2:	d81a      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d022      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80043c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043cc:	d115      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d2:	3308      	adds	r3, #8
 80043d4:	2100      	movs	r1, #0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fdee 	bl	8004fb8 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043e2:	e015      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	3328      	adds	r3, #40	@ 0x28
 80043ea:	2102      	movs	r1, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fe95 	bl	800511c <RCCEx_PLL3_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80043f8:	e00a      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004400:	e006      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004402:	bf00      	nop
 8004404:	e004      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004406:	bf00      	nop
 8004408:	e002      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800440e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10b      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004418:	4ba1      	ldr	r3, [pc, #644]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004428:	4a9d      	ldr	r2, [pc, #628]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442a:	430b      	orrs	r3, r1
 800442c:	6593      	str	r3, [r2, #88]	@ 0x58
 800442e:	e003      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f002 0308 	and.w	r3, r2, #8
 8004444:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004448:	2300      	movs	r3, #0
 800444a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800444e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004452:	460b      	mov	r3, r1
 8004454:	4313      	orrs	r3, r2
 8004456:	d01e      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004464:	d10c      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	3328      	adds	r3, #40	@ 0x28
 800446c:	2102      	movs	r1, #2
 800446e:	4618      	mov	r0, r3
 8004470:	f000 fe54 	bl	800511c <RCCEx_PLL3_Config>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004480:	4b87      	ldr	r3, [pc, #540]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004490:	4a83      	ldr	r2, [pc, #524]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f002 0310 	and.w	r3, r2, #16
 80044a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044a6:	2300      	movs	r3, #0
 80044a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044b0:	460b      	mov	r3, r1
 80044b2:	4313      	orrs	r3, r2
 80044b4:	d01e      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044c2:	d10c      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	3328      	adds	r3, #40	@ 0x28
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fe25 	bl	800511c <RCCEx_PLL3_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044de:	4b70      	ldr	r3, [pc, #448]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ee:	4a6c      	ldr	r2, [pc, #432]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004500:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004504:	2300      	movs	r3, #0
 8004506:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800450a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800450e:	460b      	mov	r3, r1
 8004510:	4313      	orrs	r3, r2
 8004512:	d03e      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800451c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004520:	d022      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004526:	d81b      	bhi.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004530:	d00b      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004532:	e015      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	3308      	adds	r3, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fd3b 	bl	8004fb8 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004548:	e00f      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	3328      	adds	r3, #40	@ 0x28
 8004550:	2102      	movs	r1, #2
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fde2 	bl	800511c <RCCEx_PLL3_Config>
 8004558:	4603      	mov	r3, r0
 800455a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800455e:	e004      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004566:	e000      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004572:	4b4b      	ldr	r3, [pc, #300]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004576:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004582:	4a47      	ldr	r2, [pc, #284]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004584:	430b      	orrs	r3, r1
 8004586:	6593      	str	r3, [r2, #88]	@ 0x58
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800458e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800459e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a0:	2300      	movs	r3, #0
 80045a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d03b      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045ba:	d01f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045c0:	d818      	bhi.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045c6:	d003      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045cc:	d007      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80045ce:	e011      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d0:	4b33      	ldr	r3, [pc, #204]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80045dc:	e00f      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fd98 	bl	800511c <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80045f2:	e004      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80045fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004606:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	4a22      	ldr	r2, [pc, #136]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004618:	430b      	orrs	r3, r1
 800461a:	6553      	str	r3, [r2, #84]	@ 0x54
 800461c:	e003      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004632:	673b      	str	r3, [r7, #112]	@ 0x70
 8004634:	2300      	movs	r3, #0
 8004636:	677b      	str	r3, [r7, #116]	@ 0x74
 8004638:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d034      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d007      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004652:	e011      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004654:	4b12      	ldr	r3, [pc, #72]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	4a11      	ldr	r2, [pc, #68]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800465e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004660:	e00e      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004666:	3308      	adds	r3, #8
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 fca4 	bl	8004fb8 <RCCEx_PLL2_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004676:	e003      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800467e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004688:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800468c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004696:	4a02      	ldr	r2, [pc, #8]	@ (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004698:	430b      	orrs	r3, r1
 800469a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800469c:	e006      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800469e:	bf00      	nop
 80046a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046ba:	2300      	movs	r3, #0
 80046bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046c2:	460b      	mov	r3, r1
 80046c4:	4313      	orrs	r3, r2
 80046c6:	d00c      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	3328      	adds	r3, #40	@ 0x28
 80046ce:	2102      	movs	r1, #2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fd23 	bl	800511c <RCCEx_PLL3_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80046e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80046ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80046f0:	2300      	movs	r3, #0
 80046f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80046f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80046f8:	460b      	mov	r3, r1
 80046fa:	4313      	orrs	r3, r2
 80046fc:	d038      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800470a:	d018      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800470c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004710:	d811      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004716:	d014      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800471c:	d80b      	bhi.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800471e:	2b00      	cmp	r3, #0
 8004720:	d011      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004726:	d106      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004728:	4bc3      	ldr	r3, [pc, #780]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472c:	4ac2      	ldr	r2, [pc, #776]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800473c:	e004      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800473e:	bf00      	nop
 8004740:	e002      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004742:	bf00      	nop
 8004744:	e000      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10b      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004750:	4bb9      	ldr	r3, [pc, #740]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004760:	4ab5      	ldr	r2, [pc, #724]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004762:	430b      	orrs	r3, r1
 8004764:	6553      	str	r3, [r2, #84]	@ 0x54
 8004766:	e003      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004778:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800477c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800477e:	2300      	movs	r3, #0
 8004780:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004782:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800478c:	4baa      	ldr	r3, [pc, #680]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479a:	4aa7      	ldr	r2, [pc, #668]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479c:	430b      	orrs	r3, r1
 800479e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80047ae:	2300      	movs	r3, #0
 80047b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047b6:	460b      	mov	r3, r1
 80047b8:	4313      	orrs	r3, r2
 80047ba:	d00a      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80047cc:	4a9a      	ldr	r2, [pc, #616]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ce:	430b      	orrs	r3, r1
 80047d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80047e8:	460b      	mov	r3, r1
 80047ea:	4313      	orrs	r3, r2
 80047ec:	d009      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80047ee:	4b92      	ldr	r3, [pc, #584]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047fc:	4a8e      	ldr	r2, [pc, #568]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047fe:	430b      	orrs	r3, r1
 8004800:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800480e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004810:	2300      	movs	r3, #0
 8004812:	647b      	str	r3, [r7, #68]	@ 0x44
 8004814:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800481e:	4b86      	ldr	r3, [pc, #536]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	4a85      	ldr	r2, [pc, #532]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004824:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004828:	6113      	str	r3, [r2, #16]
 800482a:	4b83      	ldr	r3, [pc, #524]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800482c:	6919      	ldr	r1, [r3, #16]
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004836:	4a80      	ldr	r2, [pc, #512]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004838:	430b      	orrs	r3, r1
 800483a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800483c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004844:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800484a:	2300      	movs	r3, #0
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800484e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004852:	460b      	mov	r3, r1
 8004854:	4313      	orrs	r3, r2
 8004856:	d009      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004858:	4b77      	ldr	r3, [pc, #476]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004866:	4a74      	ldr	r2, [pc, #464]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004868:	430b      	orrs	r3, r1
 800486a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
 800487a:	2300      	movs	r3, #0
 800487c:	637b      	str	r3, [r7, #52]	@ 0x34
 800487e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004882:	460b      	mov	r3, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004888:	4b6b      	ldr	r3, [pc, #428]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800488a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004898:	4a67      	ldr	r2, [pc, #412]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489a:	430b      	orrs	r3, r1
 800489c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a6:	2100      	movs	r1, #0
 80048a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d011      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	3308      	adds	r3, #8
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fb78 	bl	8004fb8 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	2100      	movs	r1, #0
 80048e8:	6239      	str	r1, [r7, #32]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80048f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048f4:	460b      	mov	r3, r1
 80048f6:	4313      	orrs	r3, r2
 80048f8:	d011      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fe:	3308      	adds	r3, #8
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fb58 	bl	8004fb8 <RCCEx_PLL2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004926:	2100      	movs	r1, #0
 8004928:	61b9      	str	r1, [r7, #24]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	61fb      	str	r3, [r7, #28]
 8004930:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004934:	460b      	mov	r3, r1
 8004936:	4313      	orrs	r3, r2
 8004938:	d011      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	3308      	adds	r3, #8
 8004940:	2102      	movs	r1, #2
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fb38 	bl	8004fb8 <RCCEx_PLL2_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800495e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	2100      	movs	r1, #0
 8004968:	6139      	str	r1, [r7, #16]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004974:	460b      	mov	r3, r1
 8004976:	4313      	orrs	r3, r2
 8004978:	d011      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800497a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497e:	3328      	adds	r3, #40	@ 0x28
 8004980:	2100      	movs	r1, #0
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fbca 	bl	800511c <RCCEx_PLL3_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	2100      	movs	r1, #0
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049b4:	460b      	mov	r3, r1
 80049b6:	4313      	orrs	r3, r2
 80049b8:	d011      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	3328      	adds	r3, #40	@ 0x28
 80049c0:	2101      	movs	r1, #1
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fbaa 	bl	800511c <RCCEx_PLL3_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80049de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	2100      	movs	r1, #0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049f4:	460b      	mov	r3, r1
 80049f6:	4313      	orrs	r3, r2
 80049f8:	d011      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049fe:	3328      	adds	r3, #40	@ 0x28
 8004a00:	2102      	movs	r1, #2
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fb8a 	bl	800511c <RCCEx_PLL3_Config>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a1e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a32:	46bd      	mov	sp, r7
 8004a34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a38:	58024400 	.word	0x58024400

08004a3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a40:	f7fe fd96 	bl	8003570 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4904      	ldr	r1, [pc, #16]	@ (8004a64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	58024400 	.word	0x58024400
 8004a64:	0800c17c 	.word	0x0800c17c

08004a68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	@ 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a70:	4ba1      	ldr	r3, [pc, #644]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	f003 0303 	and.w	r3, r3, #3
 8004a78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004a7a:	4b9f      	ldr	r3, [pc, #636]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	0b1b      	lsrs	r3, r3, #12
 8004a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004a86:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004a92:	4b99      	ldr	r3, [pc, #612]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a96:	08db      	lsrs	r3, r3, #3
 8004a98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8111 	beq.w	8004cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	f000 8083 	beq.w	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	f200 80a1 	bhi.w	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d056      	beq.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004ad2:	e099      	b.n	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad4:	4b88      	ldr	r3, [pc, #544]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02d      	beq.n	8004b3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ae0:	4b85      	ldr	r3, [pc, #532]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	08db      	lsrs	r3, r3, #3
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	4a84      	ldr	r2, [pc, #528]	@ (8004cfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
 8004af0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	ee07 3a90 	vmov	s15, r3
 8004b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0a:	4b7b      	ldr	r3, [pc, #492]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b3a:	e087      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7e:	e065      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b59      	ldr	r3, [pc, #356]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	e043      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b48      	ldr	r3, [pc, #288]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c06:	e021      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b37      	ldr	r3, [pc, #220]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c50:	0a5b      	lsrs	r3, r3, #9
 8004c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c72:	ee17 2a90 	vmov	r2, s15
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7e:	0c1b      	lsrs	r3, r3, #16
 8004c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca0:	ee17 2a90 	vmov	r2, s15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ca8:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cce:	ee17 2a90 	vmov	r2, s15
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004cd6:	e008      	b.n	8004cea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
}
 8004cea:	bf00      	nop
 8004cec:	3724      	adds	r7, #36	@ 0x24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	03d09000 	.word	0x03d09000
 8004d00:	46000000 	.word	0x46000000
 8004d04:	4c742400 	.word	0x4c742400
 8004d08:	4a742400 	.word	0x4a742400
 8004d0c:	4bbebc20 	.word	0x4bbebc20

08004d10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	@ 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d18:	4ba1      	ldr	r3, [pc, #644]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d22:	4b9f      	ldr	r3, [pc, #636]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d26:	0d1b      	lsrs	r3, r3, #20
 8004d28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d3a:	4b99      	ldr	r3, [pc, #612]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	08db      	lsrs	r3, r3, #3
 8004d40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	ee07 3a90 	vmov	s15, r3
 8004d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8111 	beq.w	8004f80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	f000 8083 	beq.w	8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	f200 80a1 	bhi.w	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d056      	beq.n	8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004d7a:	e099      	b.n	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d7c:	4b88      	ldr	r3, [pc, #544]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02d      	beq.n	8004de4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d88:	4b85      	ldr	r3, [pc, #532]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	4a84      	ldr	r2, [pc, #528]	@ (8004fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
 8004d98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db2:	4b7b      	ldr	r3, [pc, #492]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004de2:	e087      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	ee07 3a90 	vmov	s15, r3
 8004dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df6:	4b6a      	ldr	r3, [pc, #424]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e26:	e065      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	4b59      	ldr	r3, [pc, #356]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6a:	e043      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b48      	ldr	r3, [pc, #288]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eae:	e021      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b37      	ldr	r3, [pc, #220]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	0a5b      	lsrs	r3, r3, #9
 8004efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f1a:	ee17 2a90 	vmov	r2, s15
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f22:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f48:	ee17 2a90 	vmov	r2, s15
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f50:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	0e1b      	lsrs	r3, r3, #24
 8004f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f76:	ee17 2a90 	vmov	r2, s15
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f7e:	e008      	b.n	8004f92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
}
 8004f92:	bf00      	nop
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	58024400 	.word	0x58024400
 8004fa4:	03d09000 	.word	0x03d09000
 8004fa8:	46000000 	.word	0x46000000
 8004fac:	4c742400 	.word	0x4c742400
 8004fb0:	4a742400 	.word	0x4a742400
 8004fb4:	4bbebc20 	.word	0x4bbebc20

08004fb8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fc6:	4b53      	ldr	r3, [pc, #332]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d101      	bne.n	8004fd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e099      	b.n	800510a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a4e      	ldr	r2, [pc, #312]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8004fdc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fc ff73 	bl	8001ecc <HAL_GetTick>
 8004fe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fea:	f7fc ff6f 	bl	8001ecc <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e086      	b.n	800510a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ffc:	4b45      	ldr	r3, [pc, #276]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005008:	4b42      	ldr	r3, [pc, #264]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	031b      	lsls	r3, r3, #12
 8005016:	493f      	ldr	r1, [pc, #252]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	628b      	str	r3, [r1, #40]	@ 0x28
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	3b01      	subs	r3, #1
 8005022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	3b01      	subs	r3, #1
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	b29b      	uxth	r3, r3
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	3b01      	subs	r3, #1
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	3b01      	subs	r3, #1
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800504c:	4931      	ldr	r1, [pc, #196]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005052:	4b30      	ldr	r3, [pc, #192]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	492d      	ldr	r1, [pc, #180]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005060:	4313      	orrs	r3, r2
 8005062:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	f023 0220 	bic.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	4928      	ldr	r1, [pc, #160]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005076:	4b27      	ldr	r3, [pc, #156]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	4a26      	ldr	r2, [pc, #152]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 800507c:	f023 0310 	bic.w	r3, r3, #16
 8005080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005082:	4b24      	ldr	r3, [pc, #144]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <RCCEx_PLL2_Config+0x160>)
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	69d2      	ldr	r2, [r2, #28]
 800508e:	00d2      	lsls	r2, r2, #3
 8005090:	4920      	ldr	r1, [pc, #128]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005096:	4b1f      	ldr	r3, [pc, #124]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	4a1e      	ldr	r2, [pc, #120]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 800509c:	f043 0310 	orr.w	r3, r3, #16
 80050a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	4a19      	ldr	r2, [pc, #100]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050b4:	e00f      	b.n	80050d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050bc:	4b15      	ldr	r3, [pc, #84]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050c8:	e005      	b.n	80050d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050ca:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ce:	4a11      	ldr	r2, [pc, #68]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80050d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050d6:	4b0f      	ldr	r3, [pc, #60]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a0e      	ldr	r2, [pc, #56]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fc fef3 	bl	8001ecc <HAL_GetTick>
 80050e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e8:	e008      	b.n	80050fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050ea:	f7fc feef 	bl	8001ecc <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050fc:	4b05      	ldr	r3, [pc, #20]	@ (8005114 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0f0      	beq.n	80050ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	58024400 	.word	0x58024400
 8005118:	ffff0007 	.word	0xffff0007

0800511c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800512a:	4b53      	ldr	r3, [pc, #332]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b03      	cmp	r3, #3
 8005134:	d101      	bne.n	800513a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e099      	b.n	800526e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800513a:	4b4f      	ldr	r3, [pc, #316]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a4e      	ldr	r2, [pc, #312]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005146:	f7fc fec1 	bl	8001ecc <HAL_GetTick>
 800514a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800514c:	e008      	b.n	8005160 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800514e:	f7fc febd 	bl	8001ecc <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e086      	b.n	800526e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005160:	4b45      	ldr	r3, [pc, #276]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1f0      	bne.n	800514e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800516c:	4b42      	ldr	r3, [pc, #264]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	051b      	lsls	r3, r3, #20
 800517a:	493f      	ldr	r1, [pc, #252]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800517c:	4313      	orrs	r3, r2
 800517e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	3b01      	subs	r3, #1
 8005186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	3b01      	subs	r3, #1
 8005190:	025b      	lsls	r3, r3, #9
 8005192:	b29b      	uxth	r3, r3
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	061b      	lsls	r3, r3, #24
 80051ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051b0:	4931      	ldr	r1, [pc, #196]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051b6:	4b30      	ldr	r3, [pc, #192]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	492d      	ldr	r1, [pc, #180]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051cc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	4928      	ldr	r1, [pc, #160]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051da:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	4a26      	ldr	r2, [pc, #152]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051e6:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <RCCEx_PLL3_Config+0x160>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	69d2      	ldr	r2, [r2, #28]
 80051f2:	00d2      	lsls	r2, r2, #3
 80051f4:	4920      	ldr	r1, [pc, #128]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051fa:	4b1f      	ldr	r3, [pc, #124]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005200:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005204:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d106      	bne.n	800521a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005212:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005216:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005218:	e00f      	b.n	800523a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d106      	bne.n	800522e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005220:	4b15      	ldr	r3, [pc, #84]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005224:	4a14      	ldr	r2, [pc, #80]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005226:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800522a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800522c:	e005      	b.n	800523a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800522e:	4b12      	ldr	r3, [pc, #72]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005232:	4a11      	ldr	r2, [pc, #68]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005234:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005238:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800523a:	4b0f      	ldr	r3, [pc, #60]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a0e      	ldr	r2, [pc, #56]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005246:	f7fc fe41 	bl	8001ecc <HAL_GetTick>
 800524a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800524c:	e008      	b.n	8005260 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800524e:	f7fc fe3d 	bl	8001ecc <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e006      	b.n	800526e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <RCCEx_PLL3_Config+0x15c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800526c:	7bfb      	ldrb	r3, [r7, #15]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
 800527c:	ffff0007 	.word	0xffff0007

08005280 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e10f      	b.n	80054b2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a87      	ldr	r2, [pc, #540]	@ (80054bc <HAL_SPI_Init+0x23c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <HAL_SPI_Init+0x42>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a86      	ldr	r2, [pc, #536]	@ (80054c0 <HAL_SPI_Init+0x240>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00a      	beq.n	80052c2 <HAL_SPI_Init+0x42>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a84      	ldr	r2, [pc, #528]	@ (80054c4 <HAL_SPI_Init+0x244>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d005      	beq.n	80052c2 <HAL_SPI_Init+0x42>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d901      	bls.n	80052c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e0f7      	b.n	80054b2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fe2e 	bl	8005f24 <SPI_GetPacketSize>
 80052c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a7b      	ldr	r2, [pc, #492]	@ (80054bc <HAL_SPI_Init+0x23c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00c      	beq.n	80052ee <HAL_SPI_Init+0x6e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a79      	ldr	r2, [pc, #484]	@ (80054c0 <HAL_SPI_Init+0x240>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <HAL_SPI_Init+0x6e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a78      	ldr	r2, [pc, #480]	@ (80054c4 <HAL_SPI_Init+0x244>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d002      	beq.n	80052ee <HAL_SPI_Init+0x6e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b08      	cmp	r3, #8
 80052ec:	d811      	bhi.n	8005312 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80052f2:	4a72      	ldr	r2, [pc, #456]	@ (80054bc <HAL_SPI_Init+0x23c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d009      	beq.n	800530c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a70      	ldr	r2, [pc, #448]	@ (80054c0 <HAL_SPI_Init+0x240>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_SPI_Init+0x8c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a6f      	ldr	r2, [pc, #444]	@ (80054c4 <HAL_SPI_Init+0x244>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d104      	bne.n	8005316 <HAL_SPI_Init+0x96>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b10      	cmp	r3, #16
 8005310:	d901      	bls.n	8005316 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e0cd      	b.n	80054b2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc fa22 	bl	8001774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005352:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800535c:	d119      	bne.n	8005392 <HAL_SPI_Init+0x112>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005366:	d103      	bne.n	8005370 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10c      	bne.n	8005392 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800537c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005380:	d107      	bne.n	8005392 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00f      	beq.n	80053be <HAL_SPI_Init+0x13e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d90b      	bls.n	80053be <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	e007      	b.n	80053ce <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80053cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e0:	ea42 0103 	orr.w	r1, r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	431a      	orrs	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	431a      	orrs	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800542e:	ea42 0103 	orr.w	r1, r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d113      	bne.n	800546e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005458:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800546c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40013000 	.word	0x40013000
 80054c0:	40003800 	.word	0x40003800
 80054c4:	40003c00 	.word	0x40003c00

080054c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3320      	adds	r3, #32
 80054de:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e0:	f7fc fcf4 	bl	8001ecc <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e1d1      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_Transmit+0x3a>
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e1c9      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_SPI_Transmit+0x4c>
 8005510:	2302      	movs	r3, #2
 8005512:	e1c2      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2203      	movs	r2, #3
 8005520:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	88fa      	ldrh	r2, [r7, #6]
 8005536:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	88fa      	ldrh	r2, [r7, #6]
 800553e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800556c:	d108      	bne.n	8005580 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e009      	b.n	8005594 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005592:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	4b96      	ldr	r3, [pc, #600]	@ (80057f4 <HAL_SPI_Transmit+0x32c>)
 800559c:	4013      	ands	r3, r2
 800559e:	88f9      	ldrh	r1, [r7, #6]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	6812      	ldr	r2, [r2, #0]
 80055a4:	430b      	orrs	r3, r1
 80055a6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055c0:	d107      	bne.n	80055d2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d947      	bls.n	800566a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80055da:	e03f      	b.n	800565c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d114      	bne.n	8005614 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005606:	b29b      	uxth	r3, r3
 8005608:	3b01      	subs	r3, #1
 800560a:	b29a      	uxth	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005612:	e023      	b.n	800565c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005614:	f7fc fc5a 	bl	8001ecc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	429a      	cmp	r2, r3
 8005622:	d803      	bhi.n	800562c <HAL_SPI_Transmit+0x164>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d102      	bne.n	8005632 <HAL_SPI_Transmit+0x16a>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d114      	bne.n	800565c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 fba8 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800563e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e11e      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005662:	b29b      	uxth	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1b9      	bne.n	80055dc <HAL_SPI_Transmit+0x114>
 8005668:	e0f1      	b.n	800584e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	2b07      	cmp	r3, #7
 8005670:	f240 80e6 	bls.w	8005840 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005674:	e05d      	b.n	8005732 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d132      	bne.n	80056ea <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	d918      	bls.n	80056c2 <HAL_SPI_Transmit+0x1fa>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d014      	beq.n	80056c2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b02      	subs	r3, #2
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056c0:	e037      	b.n	8005732 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056c6:	881a      	ldrh	r2, [r3, #0]
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d0:	1c9a      	adds	r2, r3, #2
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3b01      	subs	r3, #1
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80056e8:	e023      	b.n	8005732 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ea:	f7fc fbef 	bl	8001ecc <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d803      	bhi.n	8005702 <HAL_SPI_Transmit+0x23a>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d102      	bne.n	8005708 <HAL_SPI_Transmit+0x240>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d114      	bne.n	8005732 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fb3d 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005714:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e0b3      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d19b      	bne.n	8005676 <HAL_SPI_Transmit+0x1ae>
 800573e:	e086      	b.n	800584e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b02      	cmp	r3, #2
 800574c:	d154      	bne.n	80057f8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b03      	cmp	r3, #3
 8005758:	d918      	bls.n	800578c <HAL_SPI_Transmit+0x2c4>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d914      	bls.n	800578c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005772:	1d1a      	adds	r2, r3, #4
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b04      	subs	r3, #4
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800578a:	e059      	b.n	8005840 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d917      	bls.n	80057c8 <HAL_SPI_Transmit+0x300>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	2b00      	cmp	r3, #0
 800579e:	d013      	beq.n	80057c8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b02      	subs	r3, #2
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80057c6:	e03b      	b.n	8005840 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3320      	adds	r3, #32
 80057d2:	7812      	ldrb	r2, [r2, #0]
 80057d4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80057f2:	e025      	b.n	8005840 <HAL_SPI_Transmit+0x378>
 80057f4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f8:	f7fc fb68 	bl	8001ecc <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d803      	bhi.n	8005810 <HAL_SPI_Transmit+0x348>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Transmit+0x34e>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d114      	bne.n	8005840 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fab6 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005822:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e02c      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005846:	b29b      	uxth	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af79 	bne.w	8005740 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2200      	movs	r2, #0
 8005856:	2108      	movs	r1, #8
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fb35 	bl	8005ec8 <SPI_WaitOnFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800586a:	f043 0220 	orr.w	r2, r3, #32
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fa87 	bl	8005d88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005898:	2300      	movs	r3, #0
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop

080058a4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	603b      	str	r3, [r7, #0]
 80058b0:	4613      	mov	r3, r2
 80058b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	3301      	adds	r3, #1
 80058be:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3330      	adds	r3, #48	@ 0x30
 80058c6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c8:	f7fc fb00 	bl	8001ecc <HAL_GetTick>
 80058cc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d001      	beq.n	80058de <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	e250      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_SPI_Receive+0x46>
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e248      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_SPI_Receive+0x58>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e241      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2204      	movs	r2, #4
 8005908:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	88fa      	ldrh	r2, [r7, #6]
 8005926:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005954:	d108      	bne.n	8005968 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e009      	b.n	800597c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800597a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	4b95      	ldr	r3, [pc, #596]	@ (8005bd8 <HAL_SPI_Receive+0x334>)
 8005984:	4013      	ands	r3, r2
 8005986:	88f9      	ldrh	r1, [r7, #6]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	430b      	orrs	r3, r1
 800598e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a8:	d107      	bne.n	80059ba <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b0f      	cmp	r3, #15
 80059c0:	d96c      	bls.n	8005a9c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80059c2:	e064      	b.n	8005a8e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d114      	bne.n	8005a04 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059e2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80059e4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ea:	1d1a      	adds	r2, r3, #4
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	3b01      	subs	r3, #1
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a02:	e044      	b.n	8005a8e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8bfa      	ldrh	r2, [r7, #30]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d919      	bls.n	8005a46 <HAL_SPI_Receive+0x1a2>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d014      	beq.n	8005a46 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005a26:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a44:	e023      	b.n	8005a8e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a46:	f7fc fa41 	bl	8001ecc <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d803      	bhi.n	8005a5e <HAL_SPI_Receive+0x1ba>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5c:	d102      	bne.n	8005a64 <HAL_SPI_Receive+0x1c0>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d114      	bne.n	8005a8e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f98f 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e178      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d194      	bne.n	80059c4 <HAL_SPI_Receive+0x120>
 8005a9a:	e15e      	b.n	8005d5a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b07      	cmp	r3, #7
 8005aa2:	f240 8153 	bls.w	8005d4c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005aa6:	e08f      	b.n	8005bc8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d114      	bne.n	8005ae8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	8812      	ldrh	r2, [r2, #0]
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005ae6:	e06f      	b.n	8005bc8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	8bfa      	ldrh	r2, [r7, #30]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d924      	bls.n	8005b40 <HAL_SPI_Receive+0x29c>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01f      	beq.n	8005b40 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	8812      	ldrh	r2, [r2, #0]
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b10:	1c9a      	adds	r2, r3, #2
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	8812      	ldrh	r2, [r2, #0]
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b26:	1c9a      	adds	r2, r3, #2
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b02      	subs	r3, #2
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b3e:	e043      	b.n	8005bc8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d119      	bne.n	8005b80 <HAL_SPI_Receive+0x2dc>
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d014      	beq.n	8005b80 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	8812      	ldrh	r2, [r2, #0]
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005b7e:	e023      	b.n	8005bc8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b80:	f7fc f9a4 	bl	8001ecc <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d803      	bhi.n	8005b98 <HAL_SPI_Receive+0x2f4>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d102      	bne.n	8005b9e <HAL_SPI_Receive+0x2fa>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d114      	bne.n	8005bc8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f000 f8f2 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005baa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0db      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f47f af69 	bne.w	8005aa8 <HAL_SPI_Receive+0x204>
 8005bd6:	e0c0      	b.n	8005d5a <HAL_SPI_Receive+0x4b6>
 8005bd8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d117      	bne.n	8005c22 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005c20:	e094      	b.n	8005d4c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	8bfa      	ldrh	r2, [r7, #30]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d946      	bls.n	8005cbe <HAL_SPI_Receive+0x41a>
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d041      	beq.n	8005cbe <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c50:	1c5a      	adds	r2, r3, #1
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c62:	7812      	ldrb	r2, [r2, #0]
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c7e:	7812      	ldrb	r2, [r2, #0]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c88:	1c5a      	adds	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b04      	subs	r3, #4
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005cbc:	e046      	b.n	8005d4c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d81c      	bhi.n	8005d04 <HAL_SPI_Receive+0x460>
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d017      	beq.n	8005d04 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005d02:	e023      	b.n	8005d4c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d04:	f7fc f8e2 	bl	8001ecc <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d803      	bhi.n	8005d1c <HAL_SPI_Receive+0x478>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Receive+0x47e>
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d114      	bne.n	8005d4c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 f830 	bl	8005d88 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e019      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f af41 	bne.w	8005bdc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f814 	bl	8005d88 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3720      	adds	r7, #32
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0210 	orr.w	r2, r2, #16
 8005db6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6919      	ldr	r1, [r3, #16]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec4 <SPI_CloseTransfer+0x13c>)
 8005dd4:	400b      	ands	r3, r1
 8005dd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005de6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d014      	beq.n	8005e1e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00f      	beq.n	8005e1e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0220 	orr.w	r2, r2, #32
 8005e1c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d014      	beq.n	8005e54 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00f      	beq.n	8005e54 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699a      	ldr	r2, [r3, #24]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e52:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00f      	beq.n	8005e7e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e64:	f043 0201 	orr.w	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699a      	ldr	r2, [r3, #24]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e7c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00f      	beq.n	8005ea8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e8e:	f043 0208 	orr.w	r2, r3, #8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699a      	ldr	r2, [r3, #24]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ea6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	fffffc90 	.word	0xfffffc90

08005ec8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ed8:	e010      	b.n	8005efc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eda:	f7fb fff7 	bl	8001ecc <HAL_GetTick>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	1ad3      	subs	r3, r2, r3
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d803      	bhi.n	8005ef2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d102      	bne.n	8005ef8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e00f      	b.n	8005f1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695a      	ldr	r2, [r3, #20]
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	4013      	ands	r3, r2
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	bf0c      	ite	eq
 8005f0c:	2301      	moveq	r3, #1
 8005f0e:	2300      	movne	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	461a      	mov	r2, r3
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d0df      	beq.n	8005eda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	095b      	lsrs	r3, r3, #5
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3307      	adds	r3, #7
 8005f42:	08db      	lsrs	r3, r3, #3
 8005f44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e049      	b.n	8006000 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fb fcf9 	bl	8001978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3304      	adds	r3, #4
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fad5 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e054      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	@ (80060d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604a:	d01d      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	@ (80060dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	@ (80060e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1f      	ldr	r2, [pc, #124]	@ (80060e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1e      	ldr	r2, [pc, #120]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <HAL_TIM_Base_Start_IT+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1b      	ldr	r2, [pc, #108]	@ (80060f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d115      	bne.n	80060b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	4b19      	ldr	r3, [pc, #100]	@ (80060f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b06      	cmp	r3, #6
 8006098:	d015      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a0:	d011      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	e008      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40001800 	.word	0x40001800
 80060f0:	40014000 	.word	0x40014000
 80060f4:	00010007 	.word	0x00010007

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d020      	beq.n	800615c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01b      	beq.n	800615c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0202 	mvn.w	r2, #2
 800612c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f9e2 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9d4 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f9e5 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d020      	beq.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01b      	beq.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0204 	mvn.w	r2, #4
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f9bc 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9ae 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f9bf 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d020      	beq.n	80061f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0308 	and.w	r3, r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01b      	beq.n	80061f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0208 	mvn.w	r2, #8
 80061c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2204      	movs	r2, #4
 80061ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69db      	ldr	r3, [r3, #28]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f996 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 80061e0:	e005      	b.n	80061ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f988 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f999 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d020      	beq.n	8006240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f003 0310 	and.w	r3, r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01b      	beq.n	8006240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f06f 0210 	mvn.w	r2, #16
 8006210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2208      	movs	r2, #8
 8006216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f970 	bl	800650c <HAL_TIM_IC_CaptureCallback>
 800622c:	e005      	b.n	800623a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f962 	bl	80064f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f973 	bl	8006520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00c      	beq.n	8006264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b00      	cmp	r3, #0
 8006252:	d007      	beq.n	8006264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0201 	mvn.w	r2, #1
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fb f9d4 	bl	800160c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626a:	2b00      	cmp	r3, #0
 800626c:	d104      	bne.n	8006278 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00c      	beq.n	8006292 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800628a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fb31 	bl	80068f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb29 	bl	8006908 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00c      	beq.n	80062da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f92d 	bl	8006534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f003 0320 	and.w	r3, r3, #32
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00c      	beq.n	80062fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f06f 0220 	mvn.w	r2, #32
 80062f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 faf1 	bl	80068e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_TIM_ConfigClockSource+0x1c>
 8006320:	2302      	movs	r3, #2
 8006322:	e0dc      	b.n	80064de <HAL_TIM_ConfigClockSource+0x1d6>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	4b6a      	ldr	r3, [pc, #424]	@ (80064e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006340:	4013      	ands	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800634a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68ba      	ldr	r2, [r7, #8]
 8006352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a64      	ldr	r2, [pc, #400]	@ (80064ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	f000 80a9 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006360:	4a62      	ldr	r2, [pc, #392]	@ (80064ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	f200 80ae 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006368:	4a61      	ldr	r2, [pc, #388]	@ (80064f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	f000 80a1 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006370:	4a5f      	ldr	r2, [pc, #380]	@ (80064f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f200 80a6 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006378:	4a5e      	ldr	r2, [pc, #376]	@ (80064f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800637a:	4293      	cmp	r3, r2
 800637c:	f000 8099 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006380:	4a5c      	ldr	r2, [pc, #368]	@ (80064f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f200 809e 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800638c:	f000 8091 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8006390:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006394:	f200 8096 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8006398:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800639c:	f000 8089 	beq.w	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063a4:	f200 808e 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063ac:	d03e      	beq.n	800642c <HAL_TIM_ConfigClockSource+0x124>
 80063ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063b2:	f200 8087 	bhi.w	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ba:	f000 8086 	beq.w	80064ca <HAL_TIM_ConfigClockSource+0x1c2>
 80063be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063c2:	d87f      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063c4:	2b70      	cmp	r3, #112	@ 0x70
 80063c6:	d01a      	beq.n	80063fe <HAL_TIM_ConfigClockSource+0xf6>
 80063c8:	2b70      	cmp	r3, #112	@ 0x70
 80063ca:	d87b      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063cc:	2b60      	cmp	r3, #96	@ 0x60
 80063ce:	d050      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x16a>
 80063d0:	2b60      	cmp	r3, #96	@ 0x60
 80063d2:	d877      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063d4:	2b50      	cmp	r3, #80	@ 0x50
 80063d6:	d03c      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x14a>
 80063d8:	2b50      	cmp	r3, #80	@ 0x50
 80063da:	d873      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063dc:	2b40      	cmp	r3, #64	@ 0x40
 80063de:	d058      	beq.n	8006492 <HAL_TIM_ConfigClockSource+0x18a>
 80063e0:	2b40      	cmp	r3, #64	@ 0x40
 80063e2:	d86f      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063e4:	2b30      	cmp	r3, #48	@ 0x30
 80063e6:	d064      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063e8:	2b30      	cmp	r3, #48	@ 0x30
 80063ea:	d86b      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d060      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063f0:	2b20      	cmp	r3, #32
 80063f2:	d867      	bhi.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d05c      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d05a      	beq.n	80064b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80063fc:	e062      	b.n	80064c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800640e:	f000 f9b9 	bl	8006784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68ba      	ldr	r2, [r7, #8]
 8006428:	609a      	str	r2, [r3, #8]
      break;
 800642a:	e04f      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800643c:	f000 f9a2 	bl	8006784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689a      	ldr	r2, [r3, #8]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800644e:	609a      	str	r2, [r3, #8]
      break;
 8006450:	e03c      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	461a      	mov	r2, r3
 8006460:	f000 f912 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2150      	movs	r1, #80	@ 0x50
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f96c 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8006470:	e02c      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800647e:	461a      	mov	r2, r3
 8006480:	f000 f931 	bl	80066e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2160      	movs	r1, #96	@ 0x60
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f95c 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 8006490:	e01c      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	461a      	mov	r2, r3
 80064a0:	f000 f8f2 	bl	8006688 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2140      	movs	r1, #64	@ 0x40
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 f94c 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 80064b0:	e00c      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f000 f943 	bl	8006748 <TIM_ITRx_SetConfig>
      break;
 80064c2:	e003      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	e000      	b.n	80064cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80064ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	ffceff88 	.word	0xffceff88
 80064ec:	00100040 	.word	0x00100040
 80064f0:	00100030 	.word	0x00100030
 80064f4:	00100020 	.word	0x00100020

080064f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a43      	ldr	r2, [pc, #268]	@ (8006668 <TIM_Base_SetConfig+0x120>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d013      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006566:	d00f      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a40      	ldr	r2, [pc, #256]	@ (800666c <TIM_Base_SetConfig+0x124>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a3f      	ldr	r2, [pc, #252]	@ (8006670 <TIM_Base_SetConfig+0x128>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a3e      	ldr	r2, [pc, #248]	@ (8006674 <TIM_Base_SetConfig+0x12c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_Base_SetConfig+0x40>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3d      	ldr	r2, [pc, #244]	@ (8006678 <TIM_Base_SetConfig+0x130>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d108      	bne.n	800659a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a32      	ldr	r2, [pc, #200]	@ (8006668 <TIM_Base_SetConfig+0x120>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01f      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a8:	d01b      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2f      	ldr	r2, [pc, #188]	@ (800666c <TIM_Base_SetConfig+0x124>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d017      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a2e      	ldr	r2, [pc, #184]	@ (8006670 <TIM_Base_SetConfig+0x128>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006674 <TIM_Base_SetConfig+0x12c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00f      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006678 <TIM_Base_SetConfig+0x130>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00b      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2b      	ldr	r2, [pc, #172]	@ (800667c <TIM_Base_SetConfig+0x134>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d007      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006680 <TIM_Base_SetConfig+0x138>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d003      	beq.n	80065e2 <TIM_Base_SetConfig+0x9a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a29      	ldr	r2, [pc, #164]	@ (8006684 <TIM_Base_SetConfig+0x13c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d108      	bne.n	80065f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a14      	ldr	r2, [pc, #80]	@ (8006668 <TIM_Base_SetConfig+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d00f      	beq.n	800663a <TIM_Base_SetConfig+0xf2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a16      	ldr	r2, [pc, #88]	@ (8006678 <TIM_Base_SetConfig+0x130>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00b      	beq.n	800663a <TIM_Base_SetConfig+0xf2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a15      	ldr	r2, [pc, #84]	@ (800667c <TIM_Base_SetConfig+0x134>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_Base_SetConfig+0xf2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a14      	ldr	r2, [pc, #80]	@ (8006680 <TIM_Base_SetConfig+0x138>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_Base_SetConfig+0xf2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a13      	ldr	r2, [pc, #76]	@ (8006684 <TIM_Base_SetConfig+0x13c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d103      	bne.n	8006642 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f043 0204 	orr.w	r2, r3, #4
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40010400 	.word	0x40010400
 800667c:	40014000 	.word	0x40014000
 8006680:	40014400 	.word	0x40014400
 8006684:	40014800 	.word	0x40014800

08006688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f023 030a 	bic.w	r3, r3, #10
 80066c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b087      	sub	sp, #28
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	60b9      	str	r1, [r7, #8]
 80066f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	f023 0210 	bic.w	r2, r3, #16
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	031b      	lsls	r3, r3, #12
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006722:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	621a      	str	r2, [r3, #32]
}
 800673a:	bf00      	nop
 800673c:	371c      	adds	r7, #28
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4b09      	ldr	r3, [pc, #36]	@ (8006780 <TIM_ITRx_SetConfig+0x38>)
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	f043 0307 	orr.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	609a      	str	r2, [r3, #8]
}
 8006772:	bf00      	nop
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	ffcfff8f 	.word	0xffcfff8f

08006784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800679e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	021a      	lsls	r2, r3, #8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	609a      	str	r2, [r3, #8]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067d8:	2302      	movs	r3, #2
 80067da:	e06d      	b.n	80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a30      	ldr	r2, [pc, #192]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a2f      	ldr	r2, [pc, #188]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d108      	bne.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006816:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006828:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4313      	orrs	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a20      	ldr	r2, [pc, #128]	@ (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d022      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684e:	d01d      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1d      	ldr	r2, [pc, #116]	@ (80068cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d018      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1c      	ldr	r2, [pc, #112]	@ (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d013      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a1a      	ldr	r2, [pc, #104]	@ (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00e      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a15      	ldr	r2, [pc, #84]	@ (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d009      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a16      	ldr	r2, [pc, #88]	@ (80068d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d004      	beq.n	800688c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a15      	ldr	r2, [pc, #84]	@ (80068dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d10c      	bne.n	80068a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006892:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	4313      	orrs	r3, r2
 800689c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40001800 	.word	0x40001800
 80068dc:	40014000 	.word	0x40014000

080068e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068fc:	bf00      	nop
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e042      	b.n	80069b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fb f83f 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2224      	movs	r2, #36	@ 0x24
 800694a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006962:	2b00      	cmp	r3, #0
 8006964:	d002      	beq.n	800696c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fe1e 	bl	80075a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 f8b3 	bl	8006ad8 <UART_SetConfig>
 8006972:	4603      	mov	r3, r0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e01b      	b.n	80069b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800698a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800699a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fe9d 	bl	80076ec <UART_CheckIdleState>
 80069b2:	4603      	mov	r3, r0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08a      	sub	sp, #40	@ 0x28
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d17b      	bne.n	8006ace <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_UART_Transmit+0x26>
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e074      	b.n	8006ad0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2221      	movs	r2, #33	@ 0x21
 80069f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069f6:	f7fb fa69 	bl	8001ecc <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a14:	d108      	bne.n	8006a28 <HAL_UART_Transmit+0x6c>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	e003      	b.n	8006a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a30:	e030      	b.n	8006a94 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2180      	movs	r1, #128	@ 0x80
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 feff 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d005      	beq.n	8006a54 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e03d      	b.n	8006ad0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a68:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e007      	b.n	8006a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1c8      	bne.n	8006a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2140      	movs	r1, #64	@ 0x40
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fec8 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d005      	beq.n	8006ac2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e006      	b.n	8006ad0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006adc:	b092      	sub	sp, #72	@ 0x48
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	431a      	orrs	r2, r3
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4bbe      	ldr	r3, [pc, #760]	@ (8006e00 <UART_SetConfig+0x328>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	6812      	ldr	r2, [r2, #0]
 8006b0e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4ab3      	ldr	r2, [pc, #716]	@ (8006e04 <UART_SetConfig+0x32c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d004      	beq.n	8006b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b40:	4313      	orrs	r3, r2
 8006b42:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689a      	ldr	r2, [r3, #8]
 8006b4a:	4baf      	ldr	r3, [pc, #700]	@ (8006e08 <UART_SetConfig+0x330>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b54:	430b      	orrs	r3, r1
 8006b56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	f023 010f 	bic.w	r1, r3, #15
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4aa6      	ldr	r2, [pc, #664]	@ (8006e0c <UART_SetConfig+0x334>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d177      	bne.n	8006c68 <UART_SetConfig+0x190>
 8006b78:	4ba5      	ldr	r3, [pc, #660]	@ (8006e10 <UART_SetConfig+0x338>)
 8006b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b80:	2b28      	cmp	r3, #40	@ 0x28
 8006b82:	d86d      	bhi.n	8006c60 <UART_SetConfig+0x188>
 8006b84:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <UART_SetConfig+0xb4>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006c31 	.word	0x08006c31
 8006b90:	08006c61 	.word	0x08006c61
 8006b94:	08006c61 	.word	0x08006c61
 8006b98:	08006c61 	.word	0x08006c61
 8006b9c:	08006c61 	.word	0x08006c61
 8006ba0:	08006c61 	.word	0x08006c61
 8006ba4:	08006c61 	.word	0x08006c61
 8006ba8:	08006c61 	.word	0x08006c61
 8006bac:	08006c39 	.word	0x08006c39
 8006bb0:	08006c61 	.word	0x08006c61
 8006bb4:	08006c61 	.word	0x08006c61
 8006bb8:	08006c61 	.word	0x08006c61
 8006bbc:	08006c61 	.word	0x08006c61
 8006bc0:	08006c61 	.word	0x08006c61
 8006bc4:	08006c61 	.word	0x08006c61
 8006bc8:	08006c61 	.word	0x08006c61
 8006bcc:	08006c41 	.word	0x08006c41
 8006bd0:	08006c61 	.word	0x08006c61
 8006bd4:	08006c61 	.word	0x08006c61
 8006bd8:	08006c61 	.word	0x08006c61
 8006bdc:	08006c61 	.word	0x08006c61
 8006be0:	08006c61 	.word	0x08006c61
 8006be4:	08006c61 	.word	0x08006c61
 8006be8:	08006c61 	.word	0x08006c61
 8006bec:	08006c49 	.word	0x08006c49
 8006bf0:	08006c61 	.word	0x08006c61
 8006bf4:	08006c61 	.word	0x08006c61
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006c61 	.word	0x08006c61
 8006c00:	08006c61 	.word	0x08006c61
 8006c04:	08006c61 	.word	0x08006c61
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c51 	.word	0x08006c51
 8006c10:	08006c61 	.word	0x08006c61
 8006c14:	08006c61 	.word	0x08006c61
 8006c18:	08006c61 	.word	0x08006c61
 8006c1c:	08006c61 	.word	0x08006c61
 8006c20:	08006c61 	.word	0x08006c61
 8006c24:	08006c61 	.word	0x08006c61
 8006c28:	08006c61 	.word	0x08006c61
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c36:	e222      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c3e:	e21e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c46:	e21a      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c4e:	e216      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c50:	2320      	movs	r3, #32
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c56:	e212      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c58:	2340      	movs	r3, #64	@ 0x40
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e20e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c60:	2380      	movs	r3, #128	@ 0x80
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e20a      	b.n	800707e <UART_SetConfig+0x5a6>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a69      	ldr	r2, [pc, #420]	@ (8006e14 <UART_SetConfig+0x33c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d130      	bne.n	8006cd4 <UART_SetConfig+0x1fc>
 8006c72:	4b67      	ldr	r3, [pc, #412]	@ (8006e10 <UART_SetConfig+0x338>)
 8006c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d826      	bhi.n	8006ccc <UART_SetConfig+0x1f4>
 8006c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c84 <UART_SetConfig+0x1ac>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006c9d 	.word	0x08006c9d
 8006c88:	08006ca5 	.word	0x08006ca5
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cbd 	.word	0x08006cbd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ca2:	e1ec      	b.n	800707e <UART_SetConfig+0x5a6>
 8006ca4:	2304      	movs	r3, #4
 8006ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006caa:	e1e8      	b.n	800707e <UART_SetConfig+0x5a6>
 8006cac:	2308      	movs	r3, #8
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e1e4      	b.n	800707e <UART_SetConfig+0x5a6>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e1e0      	b.n	800707e <UART_SetConfig+0x5a6>
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e1dc      	b.n	800707e <UART_SetConfig+0x5a6>
 8006cc4:	2340      	movs	r3, #64	@ 0x40
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e1d8      	b.n	800707e <UART_SetConfig+0x5a6>
 8006ccc:	2380      	movs	r3, #128	@ 0x80
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e1d4      	b.n	800707e <UART_SetConfig+0x5a6>
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8006e18 <UART_SetConfig+0x340>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d130      	bne.n	8006d40 <UART_SetConfig+0x268>
 8006cde:	4b4c      	ldr	r3, [pc, #304]	@ (8006e10 <UART_SetConfig+0x338>)
 8006ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	2b05      	cmp	r3, #5
 8006ce8:	d826      	bhi.n	8006d38 <UART_SetConfig+0x260>
 8006cea:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0x218>)
 8006cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cf0:	08006d09 	.word	0x08006d09
 8006cf4:	08006d11 	.word	0x08006d11
 8006cf8:	08006d19 	.word	0x08006d19
 8006cfc:	08006d21 	.word	0x08006d21
 8006d00:	08006d29 	.word	0x08006d29
 8006d04:	08006d31 	.word	0x08006d31
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e1b6      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e1b2      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e1ae      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e1aa      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d28:	2320      	movs	r3, #32
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e1a6      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d30:	2340      	movs	r3, #64	@ 0x40
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e1a2      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d38:	2380      	movs	r3, #128	@ 0x80
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	e19e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a35      	ldr	r2, [pc, #212]	@ (8006e1c <UART_SetConfig+0x344>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d130      	bne.n	8006dac <UART_SetConfig+0x2d4>
 8006d4a:	4b31      	ldr	r3, [pc, #196]	@ (8006e10 <UART_SetConfig+0x338>)
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d826      	bhi.n	8006da4 <UART_SetConfig+0x2cc>
 8006d56:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <UART_SetConfig+0x284>)
 8006d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5c:	08006d75 	.word	0x08006d75
 8006d60:	08006d7d 	.word	0x08006d7d
 8006d64:	08006d85 	.word	0x08006d85
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	2300      	movs	r3, #0
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e180      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e17c      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d84:	2308      	movs	r3, #8
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e178      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e174      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d94:	2320      	movs	r3, #32
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e170      	b.n	800707e <UART_SetConfig+0x5a6>
 8006d9c:	2340      	movs	r3, #64	@ 0x40
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e16c      	b.n	800707e <UART_SetConfig+0x5a6>
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e168      	b.n	800707e <UART_SetConfig+0x5a6>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <UART_SetConfig+0x348>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d142      	bne.n	8006e3c <UART_SetConfig+0x364>
 8006db6:	4b16      	ldr	r3, [pc, #88]	@ (8006e10 <UART_SetConfig+0x338>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d838      	bhi.n	8006e34 <UART_SetConfig+0x35c>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x2f0>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006df1 	.word	0x08006df1
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e25 	.word	0x08006e25
 8006ddc:	08006e2d 	.word	0x08006e2d
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e14a      	b.n	800707e <UART_SetConfig+0x5a6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e146      	b.n	800707e <UART_SetConfig+0x5a6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e142      	b.n	800707e <UART_SetConfig+0x5a6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e13e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006e00:	cfff69f3 	.word	0xcfff69f3
 8006e04:	58000c00 	.word	0x58000c00
 8006e08:	11fff4ff 	.word	0x11fff4ff
 8006e0c:	40011000 	.word	0x40011000
 8006e10:	58024400 	.word	0x58024400
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	2320      	movs	r3, #32
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e2a:	e128      	b.n	800707e <UART_SetConfig+0x5a6>
 8006e2c:	2340      	movs	r3, #64	@ 0x40
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e32:	e124      	b.n	800707e <UART_SetConfig+0x5a6>
 8006e34:	2380      	movs	r3, #128	@ 0x80
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e3a:	e120      	b.n	800707e <UART_SetConfig+0x5a6>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4acb      	ldr	r2, [pc, #812]	@ (8007170 <UART_SetConfig+0x698>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d176      	bne.n	8006f34 <UART_SetConfig+0x45c>
 8006e46:	4bcb      	ldr	r3, [pc, #812]	@ (8007174 <UART_SetConfig+0x69c>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e4e:	2b28      	cmp	r3, #40	@ 0x28
 8006e50:	d86c      	bhi.n	8006f2c <UART_SetConfig+0x454>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <UART_SetConfig+0x380>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006efd 	.word	0x08006efd
 8006e5c:	08006f2d 	.word	0x08006f2d
 8006e60:	08006f2d 	.word	0x08006f2d
 8006e64:	08006f2d 	.word	0x08006f2d
 8006e68:	08006f2d 	.word	0x08006f2d
 8006e6c:	08006f2d 	.word	0x08006f2d
 8006e70:	08006f2d 	.word	0x08006f2d
 8006e74:	08006f2d 	.word	0x08006f2d
 8006e78:	08006f05 	.word	0x08006f05
 8006e7c:	08006f2d 	.word	0x08006f2d
 8006e80:	08006f2d 	.word	0x08006f2d
 8006e84:	08006f2d 	.word	0x08006f2d
 8006e88:	08006f2d 	.word	0x08006f2d
 8006e8c:	08006f2d 	.word	0x08006f2d
 8006e90:	08006f2d 	.word	0x08006f2d
 8006e94:	08006f2d 	.word	0x08006f2d
 8006e98:	08006f0d 	.word	0x08006f0d
 8006e9c:	08006f2d 	.word	0x08006f2d
 8006ea0:	08006f2d 	.word	0x08006f2d
 8006ea4:	08006f2d 	.word	0x08006f2d
 8006ea8:	08006f2d 	.word	0x08006f2d
 8006eac:	08006f2d 	.word	0x08006f2d
 8006eb0:	08006f2d 	.word	0x08006f2d
 8006eb4:	08006f2d 	.word	0x08006f2d
 8006eb8:	08006f15 	.word	0x08006f15
 8006ebc:	08006f2d 	.word	0x08006f2d
 8006ec0:	08006f2d 	.word	0x08006f2d
 8006ec4:	08006f2d 	.word	0x08006f2d
 8006ec8:	08006f2d 	.word	0x08006f2d
 8006ecc:	08006f2d 	.word	0x08006f2d
 8006ed0:	08006f2d 	.word	0x08006f2d
 8006ed4:	08006f2d 	.word	0x08006f2d
 8006ed8:	08006f1d 	.word	0x08006f1d
 8006edc:	08006f2d 	.word	0x08006f2d
 8006ee0:	08006f2d 	.word	0x08006f2d
 8006ee4:	08006f2d 	.word	0x08006f2d
 8006ee8:	08006f2d 	.word	0x08006f2d
 8006eec:	08006f2d 	.word	0x08006f2d
 8006ef0:	08006f2d 	.word	0x08006f2d
 8006ef4:	08006f2d 	.word	0x08006f2d
 8006ef8:	08006f25 	.word	0x08006f25
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f02:	e0bc      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f04:	2304      	movs	r3, #4
 8006f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f0a:	e0b8      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f12:	e0b4      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f14:	2310      	movs	r3, #16
 8006f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f1a:	e0b0      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f1c:	2320      	movs	r3, #32
 8006f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f22:	e0ac      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f24:	2340      	movs	r3, #64	@ 0x40
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e0a8      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e0a4      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a8f      	ldr	r2, [pc, #572]	@ (8007178 <UART_SetConfig+0x6a0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d130      	bne.n	8006fa0 <UART_SetConfig+0x4c8>
 8006f3e:	4b8d      	ldr	r3, [pc, #564]	@ (8007174 <UART_SetConfig+0x69c>)
 8006f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d826      	bhi.n	8006f98 <UART_SetConfig+0x4c0>
 8006f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f50 <UART_SetConfig+0x478>)
 8006f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f50:	08006f69 	.word	0x08006f69
 8006f54:	08006f71 	.word	0x08006f71
 8006f58:	08006f79 	.word	0x08006f79
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	2300      	movs	r3, #0
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e086      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f70:	2304      	movs	r3, #4
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e082      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f78:	2308      	movs	r3, #8
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e07e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f80:	2310      	movs	r3, #16
 8006f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f86:	e07a      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f88:	2320      	movs	r3, #32
 8006f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f8e:	e076      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f90:	2340      	movs	r3, #64	@ 0x40
 8006f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f96:	e072      	b.n	800707e <UART_SetConfig+0x5a6>
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f9e:	e06e      	b.n	800707e <UART_SetConfig+0x5a6>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a75      	ldr	r2, [pc, #468]	@ (800717c <UART_SetConfig+0x6a4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d130      	bne.n	800700c <UART_SetConfig+0x534>
 8006faa:	4b72      	ldr	r3, [pc, #456]	@ (8007174 <UART_SetConfig+0x69c>)
 8006fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fae:	f003 0307 	and.w	r3, r3, #7
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d826      	bhi.n	8007004 <UART_SetConfig+0x52c>
 8006fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006fbc <UART_SetConfig+0x4e4>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08006fdd 	.word	0x08006fdd
 8006fc4:	08006fe5 	.word	0x08006fe5
 8006fc8:	08006fed 	.word	0x08006fed
 8006fcc:	08006ff5 	.word	0x08006ff5
 8006fd0:	08006ffd 	.word	0x08006ffd
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fda:	e050      	b.n	800707e <UART_SetConfig+0x5a6>
 8006fdc:	2304      	movs	r3, #4
 8006fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fe2:	e04c      	b.n	800707e <UART_SetConfig+0x5a6>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006fea:	e048      	b.n	800707e <UART_SetConfig+0x5a6>
 8006fec:	2310      	movs	r3, #16
 8006fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ff2:	e044      	b.n	800707e <UART_SetConfig+0x5a6>
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ffa:	e040      	b.n	800707e <UART_SetConfig+0x5a6>
 8006ffc:	2340      	movs	r3, #64	@ 0x40
 8006ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007002:	e03c      	b.n	800707e <UART_SetConfig+0x5a6>
 8007004:	2380      	movs	r3, #128	@ 0x80
 8007006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800700a:	e038      	b.n	800707e <UART_SetConfig+0x5a6>
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a5b      	ldr	r2, [pc, #364]	@ (8007180 <UART_SetConfig+0x6a8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d130      	bne.n	8007078 <UART_SetConfig+0x5a0>
 8007016:	4b57      	ldr	r3, [pc, #348]	@ (8007174 <UART_SetConfig+0x69c>)
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	2b05      	cmp	r3, #5
 8007020:	d826      	bhi.n	8007070 <UART_SetConfig+0x598>
 8007022:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <UART_SetConfig+0x550>)
 8007024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007028:	08007041 	.word	0x08007041
 800702c:	08007049 	.word	0x08007049
 8007030:	08007051 	.word	0x08007051
 8007034:	08007059 	.word	0x08007059
 8007038:	08007061 	.word	0x08007061
 800703c:	08007069 	.word	0x08007069
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e01a      	b.n	800707e <UART_SetConfig+0x5a6>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e016      	b.n	800707e <UART_SetConfig+0x5a6>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e012      	b.n	800707e <UART_SetConfig+0x5a6>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e00e      	b.n	800707e <UART_SetConfig+0x5a6>
 8007060:	2320      	movs	r3, #32
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e00a      	b.n	800707e <UART_SetConfig+0x5a6>
 8007068:	2340      	movs	r3, #64	@ 0x40
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e006      	b.n	800707e <UART_SetConfig+0x5a6>
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e002      	b.n	800707e <UART_SetConfig+0x5a6>
 8007078:	2380      	movs	r3, #128	@ 0x80
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a3f      	ldr	r2, [pc, #252]	@ (8007180 <UART_SetConfig+0x6a8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	f040 80f8 	bne.w	800727a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800708a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800708e:	2b20      	cmp	r3, #32
 8007090:	dc46      	bgt.n	8007120 <UART_SetConfig+0x648>
 8007092:	2b02      	cmp	r3, #2
 8007094:	f2c0 8082 	blt.w	800719c <UART_SetConfig+0x6c4>
 8007098:	3b02      	subs	r3, #2
 800709a:	2b1e      	cmp	r3, #30
 800709c:	d87e      	bhi.n	800719c <UART_SetConfig+0x6c4>
 800709e:	a201      	add	r2, pc, #4	@ (adr r2, 80070a4 <UART_SetConfig+0x5cc>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	08007127 	.word	0x08007127
 80070a8:	0800719d 	.word	0x0800719d
 80070ac:	0800712f 	.word	0x0800712f
 80070b0:	0800719d 	.word	0x0800719d
 80070b4:	0800719d 	.word	0x0800719d
 80070b8:	0800719d 	.word	0x0800719d
 80070bc:	0800713f 	.word	0x0800713f
 80070c0:	0800719d 	.word	0x0800719d
 80070c4:	0800719d 	.word	0x0800719d
 80070c8:	0800719d 	.word	0x0800719d
 80070cc:	0800719d 	.word	0x0800719d
 80070d0:	0800719d 	.word	0x0800719d
 80070d4:	0800719d 	.word	0x0800719d
 80070d8:	0800719d 	.word	0x0800719d
 80070dc:	0800714f 	.word	0x0800714f
 80070e0:	0800719d 	.word	0x0800719d
 80070e4:	0800719d 	.word	0x0800719d
 80070e8:	0800719d 	.word	0x0800719d
 80070ec:	0800719d 	.word	0x0800719d
 80070f0:	0800719d 	.word	0x0800719d
 80070f4:	0800719d 	.word	0x0800719d
 80070f8:	0800719d 	.word	0x0800719d
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	0800719d 	.word	0x0800719d
 8007104:	0800719d 	.word	0x0800719d
 8007108:	0800719d 	.word	0x0800719d
 800710c:	0800719d 	.word	0x0800719d
 8007110:	0800719d 	.word	0x0800719d
 8007114:	0800719d 	.word	0x0800719d
 8007118:	0800719d 	.word	0x0800719d
 800711c:	0800718f 	.word	0x0800718f
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	d037      	beq.n	8007194 <UART_SetConfig+0x6bc>
 8007124:	e03a      	b.n	800719c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007126:	f7fd fc89 	bl	8004a3c <HAL_RCCEx_GetD3PCLK1Freq>
 800712a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800712c:	e03c      	b.n	80071a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800712e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007132:	4618      	mov	r0, r3
 8007134:	f7fd fc98 	bl	8004a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800713c:	e034      	b.n	80071a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800713e:	f107 0318 	add.w	r3, r7, #24
 8007142:	4618      	mov	r0, r3
 8007144:	f7fd fde4 	bl	8004d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714c:	e02c      	b.n	80071a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800714e:	4b09      	ldr	r3, [pc, #36]	@ (8007174 <UART_SetConfig+0x69c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800715a:	4b06      	ldr	r3, [pc, #24]	@ (8007174 <UART_SetConfig+0x69c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	08db      	lsrs	r3, r3, #3
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	4a07      	ldr	r2, [pc, #28]	@ (8007184 <UART_SetConfig+0x6ac>)
 8007166:	fa22 f303 	lsr.w	r3, r2, r3
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800716c:	e01c      	b.n	80071a8 <UART_SetConfig+0x6d0>
 800716e:	bf00      	nop
 8007170:	40011400 	.word	0x40011400
 8007174:	58024400 	.word	0x58024400
 8007178:	40007800 	.word	0x40007800
 800717c:	40007c00 	.word	0x40007c00
 8007180:	58000c00 	.word	0x58000c00
 8007184:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007188:	4b9d      	ldr	r3, [pc, #628]	@ (8007400 <UART_SetConfig+0x928>)
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800718c:	e00c      	b.n	80071a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800718e:	4b9d      	ldr	r3, [pc, #628]	@ (8007404 <UART_SetConfig+0x92c>)
 8007190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007192:	e009      	b.n	80071a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800719a:	e005      	b.n	80071a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80071a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 81de 	beq.w	800756c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	4a94      	ldr	r2, [pc, #592]	@ (8007408 <UART_SetConfig+0x930>)
 80071b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071be:	fbb3 f3f2 	udiv	r3, r3, r2
 80071c2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	4613      	mov	r3, r2
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	4413      	add	r3, r2
 80071ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d305      	bcc.n	80071e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071dc:	429a      	cmp	r2, r3
 80071de:	d903      	bls.n	80071e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071e6:	e1c1      	b.n	800756c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ea:	2200      	movs	r2, #0
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	60fa      	str	r2, [r7, #12]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	4a84      	ldr	r2, [pc, #528]	@ (8007408 <UART_SetConfig+0x930>)
 80071f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	2200      	movs	r2, #0
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800720a:	f7f9 fa7d 	bl	8000708 <__aeabi_uldivmod>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4610      	mov	r0, r2
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	020b      	lsls	r3, r1, #8
 8007220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007224:	0202      	lsls	r2, r0, #8
 8007226:	6979      	ldr	r1, [r7, #20]
 8007228:	6849      	ldr	r1, [r1, #4]
 800722a:	0849      	lsrs	r1, r1, #1
 800722c:	2000      	movs	r0, #0
 800722e:	460c      	mov	r4, r1
 8007230:	4605      	mov	r5, r0
 8007232:	eb12 0804 	adds.w	r8, r2, r4
 8007236:	eb43 0905 	adc.w	r9, r3, r5
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	469a      	mov	sl, r3
 8007242:	4693      	mov	fp, r2
 8007244:	4652      	mov	r2, sl
 8007246:	465b      	mov	r3, fp
 8007248:	4640      	mov	r0, r8
 800724a:	4649      	mov	r1, r9
 800724c:	f7f9 fa5c 	bl	8000708 <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4613      	mov	r3, r2
 8007256:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800725a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800725e:	d308      	bcc.n	8007272 <UART_SetConfig+0x79a>
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007266:	d204      	bcs.n	8007272 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e17c      	b.n	800756c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007278:	e178      	b.n	800756c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007282:	f040 80c5 	bne.w	8007410 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007286:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800728a:	2b20      	cmp	r3, #32
 800728c:	dc48      	bgt.n	8007320 <UART_SetConfig+0x848>
 800728e:	2b00      	cmp	r3, #0
 8007290:	db7b      	blt.n	800738a <UART_SetConfig+0x8b2>
 8007292:	2b20      	cmp	r3, #32
 8007294:	d879      	bhi.n	800738a <UART_SetConfig+0x8b2>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x7c4>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	08007327 	.word	0x08007327
 80072a0:	0800732f 	.word	0x0800732f
 80072a4:	0800738b 	.word	0x0800738b
 80072a8:	0800738b 	.word	0x0800738b
 80072ac:	08007337 	.word	0x08007337
 80072b0:	0800738b 	.word	0x0800738b
 80072b4:	0800738b 	.word	0x0800738b
 80072b8:	0800738b 	.word	0x0800738b
 80072bc:	08007347 	.word	0x08007347
 80072c0:	0800738b 	.word	0x0800738b
 80072c4:	0800738b 	.word	0x0800738b
 80072c8:	0800738b 	.word	0x0800738b
 80072cc:	0800738b 	.word	0x0800738b
 80072d0:	0800738b 	.word	0x0800738b
 80072d4:	0800738b 	.word	0x0800738b
 80072d8:	0800738b 	.word	0x0800738b
 80072dc:	08007357 	.word	0x08007357
 80072e0:	0800738b 	.word	0x0800738b
 80072e4:	0800738b 	.word	0x0800738b
 80072e8:	0800738b 	.word	0x0800738b
 80072ec:	0800738b 	.word	0x0800738b
 80072f0:	0800738b 	.word	0x0800738b
 80072f4:	0800738b 	.word	0x0800738b
 80072f8:	0800738b 	.word	0x0800738b
 80072fc:	0800738b 	.word	0x0800738b
 8007300:	0800738b 	.word	0x0800738b
 8007304:	0800738b 	.word	0x0800738b
 8007308:	0800738b 	.word	0x0800738b
 800730c:	0800738b 	.word	0x0800738b
 8007310:	0800738b 	.word	0x0800738b
 8007314:	0800738b 	.word	0x0800738b
 8007318:	0800738b 	.word	0x0800738b
 800731c:	0800737d 	.word	0x0800737d
 8007320:	2b40      	cmp	r3, #64	@ 0x40
 8007322:	d02e      	beq.n	8007382 <UART_SetConfig+0x8aa>
 8007324:	e031      	b.n	800738a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007326:	f7fc f953 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 800732a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800732c:	e033      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800732e:	f7fc f965 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 8007332:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007334:	e02f      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800733a:	4618      	mov	r0, r3
 800733c:	f7fd fb94 	bl	8004a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007344:	e027      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007346:	f107 0318 	add.w	r3, r7, #24
 800734a:	4618      	mov	r0, r3
 800734c:	f7fd fce0 	bl	8004d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007354:	e01f      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007356:	4b2d      	ldr	r3, [pc, #180]	@ (800740c <UART_SetConfig+0x934>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007362:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <UART_SetConfig+0x934>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	4a24      	ldr	r2, [pc, #144]	@ (8007400 <UART_SetConfig+0x928>)
 800736e:	fa22 f303 	lsr.w	r3, r2, r3
 8007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007374:	e00f      	b.n	8007396 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007376:	4b22      	ldr	r3, [pc, #136]	@ (8007400 <UART_SetConfig+0x928>)
 8007378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800737a:	e00c      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800737c:	4b21      	ldr	r3, [pc, #132]	@ (8007404 <UART_SetConfig+0x92c>)
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007380:	e009      	b.n	8007396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007388:	e005      	b.n	8007396 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 80e7 	beq.w	800756c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	4a19      	ldr	r2, [pc, #100]	@ (8007408 <UART_SetConfig+0x930>)
 80073a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80073b0:	005a      	lsls	r2, r3, #1
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	441a      	add	r2, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c6:	2b0f      	cmp	r3, #15
 80073c8:	d916      	bls.n	80073f8 <UART_SetConfig+0x920>
 80073ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073d0:	d212      	bcs.n	80073f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f023 030f 	bic.w	r3, r3, #15
 80073da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073ea:	4313      	orrs	r3, r2
 80073ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80073f4:	60da      	str	r2, [r3, #12]
 80073f6:	e0b9      	b.n	800756c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073fe:	e0b5      	b.n	800756c <UART_SetConfig+0xa94>
 8007400:	03d09000 	.word	0x03d09000
 8007404:	003d0900 	.word	0x003d0900
 8007408:	0800c18c 	.word	0x0800c18c
 800740c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007410:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007414:	2b20      	cmp	r3, #32
 8007416:	dc49      	bgt.n	80074ac <UART_SetConfig+0x9d4>
 8007418:	2b00      	cmp	r3, #0
 800741a:	db7c      	blt.n	8007516 <UART_SetConfig+0xa3e>
 800741c:	2b20      	cmp	r3, #32
 800741e:	d87a      	bhi.n	8007516 <UART_SetConfig+0xa3e>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <UART_SetConfig+0x950>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	080074b3 	.word	0x080074b3
 800742c:	080074bb 	.word	0x080074bb
 8007430:	08007517 	.word	0x08007517
 8007434:	08007517 	.word	0x08007517
 8007438:	080074c3 	.word	0x080074c3
 800743c:	08007517 	.word	0x08007517
 8007440:	08007517 	.word	0x08007517
 8007444:	08007517 	.word	0x08007517
 8007448:	080074d3 	.word	0x080074d3
 800744c:	08007517 	.word	0x08007517
 8007450:	08007517 	.word	0x08007517
 8007454:	08007517 	.word	0x08007517
 8007458:	08007517 	.word	0x08007517
 800745c:	08007517 	.word	0x08007517
 8007460:	08007517 	.word	0x08007517
 8007464:	08007517 	.word	0x08007517
 8007468:	080074e3 	.word	0x080074e3
 800746c:	08007517 	.word	0x08007517
 8007470:	08007517 	.word	0x08007517
 8007474:	08007517 	.word	0x08007517
 8007478:	08007517 	.word	0x08007517
 800747c:	08007517 	.word	0x08007517
 8007480:	08007517 	.word	0x08007517
 8007484:	08007517 	.word	0x08007517
 8007488:	08007517 	.word	0x08007517
 800748c:	08007517 	.word	0x08007517
 8007490:	08007517 	.word	0x08007517
 8007494:	08007517 	.word	0x08007517
 8007498:	08007517 	.word	0x08007517
 800749c:	08007517 	.word	0x08007517
 80074a0:	08007517 	.word	0x08007517
 80074a4:	08007517 	.word	0x08007517
 80074a8:	08007509 	.word	0x08007509
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	d02e      	beq.n	800750e <UART_SetConfig+0xa36>
 80074b0:	e031      	b.n	8007516 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074b2:	f7fc f88d 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80074b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074b8:	e033      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074ba:	f7fc f89f 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 80074be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80074c0:	e02f      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd face 	bl	8004a68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d0:	e027      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0318 	add.w	r3, r7, #24
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fd fc1a 	bl	8004d10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074e0:	e01f      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074e2:	4b2d      	ldr	r3, [pc, #180]	@ (8007598 <UART_SetConfig+0xac0>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0320 	and.w	r3, r3, #32
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d009      	beq.n	8007502 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007598 <UART_SetConfig+0xac0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	08db      	lsrs	r3, r3, #3
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	4a28      	ldr	r2, [pc, #160]	@ (800759c <UART_SetConfig+0xac4>)
 80074fa:	fa22 f303 	lsr.w	r3, r2, r3
 80074fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007500:	e00f      	b.n	8007522 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007502:	4b26      	ldr	r3, [pc, #152]	@ (800759c <UART_SetConfig+0xac4>)
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007506:	e00c      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007508:	4b25      	ldr	r3, [pc, #148]	@ (80075a0 <UART_SetConfig+0xac8>)
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750c:	e009      	b.n	8007522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800750e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007514:	e005      	b.n	8007522 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007520:	bf00      	nop
    }

    if (pclk != 0U)
 8007522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007524:	2b00      	cmp	r3, #0
 8007526:	d021      	beq.n	800756c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <UART_SetConfig+0xacc>)
 800752e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007532:	461a      	mov	r2, r3
 8007534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007536:	fbb3 f2f2 	udiv	r2, r3, r2
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	441a      	add	r2, r3
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	fbb2 f3f3 	udiv	r3, r2, r3
 800754a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800754c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754e:	2b0f      	cmp	r3, #15
 8007550:	d909      	bls.n	8007566 <UART_SetConfig+0xa8e>
 8007552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007558:	d205      	bcs.n	8007566 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800755a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800755c:	b29a      	uxth	r2, r3
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	e002      	b.n	800756c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	2201      	movs	r2, #1
 8007570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2201      	movs	r2, #1
 8007578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	2200      	movs	r2, #0
 8007580:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2200      	movs	r2, #0
 8007586:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007588:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800758c:	4618      	mov	r0, r3
 800758e:	3748      	adds	r7, #72	@ 0x48
 8007590:	46bd      	mov	sp, r7
 8007592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
 800759c:	03d09000 	.word	0x03d09000
 80075a0:	003d0900 	.word	0x003d0900
 80075a4:	0800c18c 	.word	0x0800c18c

080075a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01a      	beq.n	80076be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076a6:	d10a      	bne.n	80076be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	605a      	str	r2, [r3, #4]
  }
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b098      	sub	sp, #96	@ 0x60
 80076f0:	af02      	add	r7, sp, #8
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076fc:	f7fa fbe6 	bl	8001ecc <HAL_GetTick>
 8007700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0308 	and.w	r3, r3, #8
 800770c:	2b08      	cmp	r3, #8
 800770e:	d12f      	bne.n	8007770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007718:	2200      	movs	r2, #0
 800771a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f88e 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d022      	beq.n	8007770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007732:	e853 3f00 	ldrex	r3, [r3]
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800773a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800773e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
 800774a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800774e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e6      	bne.n	800772a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2220      	movs	r2, #32
 8007760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e063      	b.n	8007838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d149      	bne.n	8007812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007786:	2200      	movs	r2, #0
 8007788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f857 	bl	8007840 <UART_WaitOnFlagUntilTimeout>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d03c      	beq.n	8007812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	e853 3f00 	ldrex	r3, [r3]
 80077a4:	623b      	str	r3, [r7, #32]
   return(result);
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	461a      	mov	r2, r3
 80077b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80077b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e6      	bne.n	8007798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3308      	adds	r3, #8
 80077e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	69b9      	ldr	r1, [r7, #24]
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	617b      	str	r3, [r7, #20]
   return(result);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e5      	bne.n	80077ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e012      	b.n	8007838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3758      	adds	r7, #88	@ 0x58
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007850:	e04f      	b.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d04b      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785a:	f7fa fb37 	bl	8001ecc <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <UART_WaitOnFlagUntilTimeout+0x30>
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e04e      	b.n	8007912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d037      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b80      	cmp	r3, #128	@ 0x80
 8007886:	d034      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b40      	cmp	r3, #64	@ 0x40
 800788c:	d031      	beq.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0308 	and.w	r3, r3, #8
 8007898:	2b08      	cmp	r3, #8
 800789a:	d110      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2208      	movs	r2, #8
 80078a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f839 	bl	800791c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2208      	movs	r2, #8
 80078ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e029      	b.n	8007912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69db      	ldr	r3, [r3, #28]
 80078c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078cc:	d111      	bne.n	80078f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f000 f81f 	bl	800791c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e00f      	b.n	8007912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	bf0c      	ite	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	2300      	movne	r3, #0
 8007906:	b2db      	uxtb	r3, r3
 8007908:	461a      	mov	r2, r3
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	429a      	cmp	r2, r3
 800790e:	d0a0      	beq.n	8007852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
	...

0800791c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b095      	sub	sp, #84	@ 0x54
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800792c:	e853 3f00 	ldrex	r3, [r3]
 8007930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	461a      	mov	r2, r3
 8007940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007942:	643b      	str	r3, [r7, #64]	@ 0x40
 8007944:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800794a:	e841 2300 	strex	r3, r2, [r1]
 800794e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1e6      	bne.n	8007924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	61fb      	str	r3, [r7, #28]
   return(result);
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	4b1e      	ldr	r3, [pc, #120]	@ (80079e4 <UART_EndRxTransfer+0xc8>)
 800796a:	4013      	ands	r3, r2
 800796c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	3308      	adds	r3, #8
 8007974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800797c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800797e:	e841 2300 	strex	r3, r2, [r1]
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e5      	bne.n	8007956 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800798e:	2b01      	cmp	r3, #1
 8007990:	d118      	bne.n	80079c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	60bb      	str	r3, [r7, #8]
   return(result);
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f023 0310 	bic.w	r3, r3, #16
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6979      	ldr	r1, [r7, #20]
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	613b      	str	r3, [r7, #16]
   return(result);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079d8:	bf00      	nop
 80079da:	3754      	adds	r7, #84	@ 0x54
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	effffffe 	.word	0xeffffffe

080079e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_UARTEx_DisableFifoMode+0x16>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e027      	b.n	8007a4e <HAL_UARTEx_DisableFifoMode+0x66>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2224      	movs	r2, #36	@ 0x24
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e02d      	b.n	8007ace <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2224      	movs	r2, #36	@ 0x24
 8007a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0201 	bic.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	683a      	ldr	r2, [r7, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f850 	bl	8007b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007aea:	2302      	movs	r3, #2
 8007aec:	e02d      	b.n	8007b4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2224      	movs	r2, #36	@ 0x24
 8007afa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0201 	bic.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f812 	bl	8007b54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d108      	bne.n	8007b76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b74:	e031      	b.n	8007bda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b76:	2310      	movs	r3, #16
 8007b78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b7a:	2310      	movs	r3, #16
 8007b7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0e5b      	lsrs	r3, r3, #25
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	0f5b      	lsrs	r3, r3, #29
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	f003 0307 	and.w	r3, r3, #7
 8007b9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	7b3a      	ldrb	r2, [r7, #12]
 8007ba2:	4911      	ldr	r1, [pc, #68]	@ (8007be8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ba4:	5c8a      	ldrb	r2, [r1, r2]
 8007ba6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007baa:	7b3a      	ldrb	r2, [r7, #12]
 8007bac:	490f      	ldr	r1, [pc, #60]	@ (8007bec <UARTEx_SetNbDataToProcess+0x98>)
 8007bae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	7b7a      	ldrb	r2, [r7, #13]
 8007bc0:	4909      	ldr	r1, [pc, #36]	@ (8007be8 <UARTEx_SetNbDataToProcess+0x94>)
 8007bc2:	5c8a      	ldrb	r2, [r1, r2]
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bc8:	7b7a      	ldrb	r2, [r7, #13]
 8007bca:	4908      	ldr	r1, [pc, #32]	@ (8007bec <UARTEx_SetNbDataToProcess+0x98>)
 8007bcc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bda:	bf00      	nop
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	0800c1a4 	.word	0x0800c1a4
 8007bec:	0800c1ac 	.word	0x0800c1ac

08007bf0 <__cvt>:
 8007bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bf2:	ed2d 8b02 	vpush	{d8}
 8007bf6:	eeb0 8b40 	vmov.f64	d8, d0
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	4617      	mov	r7, r2
 8007bfe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007c00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c02:	ee18 2a90 	vmov	r2, s17
 8007c06:	f025 0520 	bic.w	r5, r5, #32
 8007c0a:	2a00      	cmp	r2, #0
 8007c0c:	bfb6      	itet	lt
 8007c0e:	222d      	movlt	r2, #45	@ 0x2d
 8007c10:	2200      	movge	r2, #0
 8007c12:	eeb1 8b40 	vneglt.f64	d8, d0
 8007c16:	2d46      	cmp	r5, #70	@ 0x46
 8007c18:	460c      	mov	r4, r1
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	d004      	beq.n	8007c28 <__cvt+0x38>
 8007c1e:	2d45      	cmp	r5, #69	@ 0x45
 8007c20:	d100      	bne.n	8007c24 <__cvt+0x34>
 8007c22:	3401      	adds	r4, #1
 8007c24:	2102      	movs	r1, #2
 8007c26:	e000      	b.n	8007c2a <__cvt+0x3a>
 8007c28:	2103      	movs	r1, #3
 8007c2a:	ab03      	add	r3, sp, #12
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	ab02      	add	r3, sp, #8
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	4622      	mov	r2, r4
 8007c34:	4633      	mov	r3, r6
 8007c36:	eeb0 0b48 	vmov.f64	d0, d8
 8007c3a:	f001 f885 	bl	8008d48 <_dtoa_r>
 8007c3e:	2d47      	cmp	r5, #71	@ 0x47
 8007c40:	d114      	bne.n	8007c6c <__cvt+0x7c>
 8007c42:	07fb      	lsls	r3, r7, #31
 8007c44:	d50a      	bpl.n	8007c5c <__cvt+0x6c>
 8007c46:	1902      	adds	r2, r0, r4
 8007c48:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	bf08      	it	eq
 8007c52:	9203      	streq	r2, [sp, #12]
 8007c54:	2130      	movs	r1, #48	@ 0x30
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d319      	bcc.n	8007c90 <__cvt+0xa0>
 8007c5c:	9b03      	ldr	r3, [sp, #12]
 8007c5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c60:	1a1b      	subs	r3, r3, r0
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	b005      	add	sp, #20
 8007c66:	ecbd 8b02 	vpop	{d8}
 8007c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c6c:	2d46      	cmp	r5, #70	@ 0x46
 8007c6e:	eb00 0204 	add.w	r2, r0, r4
 8007c72:	d1e9      	bne.n	8007c48 <__cvt+0x58>
 8007c74:	7803      	ldrb	r3, [r0, #0]
 8007c76:	2b30      	cmp	r3, #48	@ 0x30
 8007c78:	d107      	bne.n	8007c8a <__cvt+0x9a>
 8007c7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c82:	bf1c      	itt	ne
 8007c84:	f1c4 0401 	rsbne	r4, r4, #1
 8007c88:	6034      	strne	r4, [r6, #0]
 8007c8a:	6833      	ldr	r3, [r6, #0]
 8007c8c:	441a      	add	r2, r3
 8007c8e:	e7db      	b.n	8007c48 <__cvt+0x58>
 8007c90:	1c5c      	adds	r4, r3, #1
 8007c92:	9403      	str	r4, [sp, #12]
 8007c94:	7019      	strb	r1, [r3, #0]
 8007c96:	e7de      	b.n	8007c56 <__cvt+0x66>

08007c98 <__exponent>:
 8007c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c9a:	2900      	cmp	r1, #0
 8007c9c:	bfba      	itte	lt
 8007c9e:	4249      	neglt	r1, r1
 8007ca0:	232d      	movlt	r3, #45	@ 0x2d
 8007ca2:	232b      	movge	r3, #43	@ 0x2b
 8007ca4:	2909      	cmp	r1, #9
 8007ca6:	7002      	strb	r2, [r0, #0]
 8007ca8:	7043      	strb	r3, [r0, #1]
 8007caa:	dd29      	ble.n	8007d00 <__exponent+0x68>
 8007cac:	f10d 0307 	add.w	r3, sp, #7
 8007cb0:	461d      	mov	r5, r3
 8007cb2:	270a      	movs	r7, #10
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cba:	fb07 1416 	mls	r4, r7, r6, r1
 8007cbe:	3430      	adds	r4, #48	@ 0x30
 8007cc0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	2c63      	cmp	r4, #99	@ 0x63
 8007cc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ccc:	4631      	mov	r1, r6
 8007cce:	dcf1      	bgt.n	8007cb4 <__exponent+0x1c>
 8007cd0:	3130      	adds	r1, #48	@ 0x30
 8007cd2:	1e94      	subs	r4, r2, #2
 8007cd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007cd8:	1c41      	adds	r1, r0, #1
 8007cda:	4623      	mov	r3, r4
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	d30a      	bcc.n	8007cf6 <__exponent+0x5e>
 8007ce0:	f10d 0309 	add.w	r3, sp, #9
 8007ce4:	1a9b      	subs	r3, r3, r2
 8007ce6:	42ac      	cmp	r4, r5
 8007ce8:	bf88      	it	hi
 8007cea:	2300      	movhi	r3, #0
 8007cec:	3302      	adds	r3, #2
 8007cee:	4403      	add	r3, r0
 8007cf0:	1a18      	subs	r0, r3, r0
 8007cf2:	b003      	add	sp, #12
 8007cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007cf6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007cfa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007cfe:	e7ed      	b.n	8007cdc <__exponent+0x44>
 8007d00:	2330      	movs	r3, #48	@ 0x30
 8007d02:	3130      	adds	r1, #48	@ 0x30
 8007d04:	7083      	strb	r3, [r0, #2]
 8007d06:	70c1      	strb	r1, [r0, #3]
 8007d08:	1d03      	adds	r3, r0, #4
 8007d0a:	e7f1      	b.n	8007cf0 <__exponent+0x58>
 8007d0c:	0000      	movs	r0, r0
	...

08007d10 <_printf_float>:
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	b08d      	sub	sp, #52	@ 0x34
 8007d16:	460c      	mov	r4, r1
 8007d18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d1c:	4616      	mov	r6, r2
 8007d1e:	461f      	mov	r7, r3
 8007d20:	4605      	mov	r5, r0
 8007d22:	f000 ff0b 	bl	8008b3c <_localeconv_r>
 8007d26:	f8d0 b000 	ldr.w	fp, [r0]
 8007d2a:	4658      	mov	r0, fp
 8007d2c:	f7f8 fb28 	bl	8000380 <strlen>
 8007d30:	2300      	movs	r3, #0
 8007d32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d34:	f8d8 3000 	ldr.w	r3, [r8]
 8007d38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007d3c:	6822      	ldr	r2, [r4, #0]
 8007d3e:	9005      	str	r0, [sp, #20]
 8007d40:	3307      	adds	r3, #7
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	f103 0108 	add.w	r1, r3, #8
 8007d4a:	f8c8 1000 	str.w	r1, [r8]
 8007d4e:	ed93 0b00 	vldr	d0, [r3]
 8007d52:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007fb0 <_printf_float+0x2a0>
 8007d56:	eeb0 7bc0 	vabs.f64	d7, d0
 8007d5a:	eeb4 7b46 	vcmp.f64	d7, d6
 8007d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d62:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007d66:	dd24      	ble.n	8007db2 <_printf_float+0xa2>
 8007d68:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d70:	d502      	bpl.n	8007d78 <_printf_float+0x68>
 8007d72:	232d      	movs	r3, #45	@ 0x2d
 8007d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d78:	498f      	ldr	r1, [pc, #572]	@ (8007fb8 <_printf_float+0x2a8>)
 8007d7a:	4b90      	ldr	r3, [pc, #576]	@ (8007fbc <_printf_float+0x2ac>)
 8007d7c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007d80:	bf94      	ite	ls
 8007d82:	4688      	movls	r8, r1
 8007d84:	4698      	movhi	r8, r3
 8007d86:	f022 0204 	bic.w	r2, r2, #4
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	6123      	str	r3, [r4, #16]
 8007d8e:	6022      	str	r2, [r4, #0]
 8007d90:	f04f 0a00 	mov.w	sl, #0
 8007d94:	9700      	str	r7, [sp, #0]
 8007d96:	4633      	mov	r3, r6
 8007d98:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f9d1 	bl	8008144 <_printf_common>
 8007da2:	3001      	adds	r0, #1
 8007da4:	f040 8089 	bne.w	8007eba <_printf_float+0x1aa>
 8007da8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dac:	b00d      	add	sp, #52	@ 0x34
 8007dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db2:	eeb4 0b40 	vcmp.f64	d0, d0
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	d709      	bvc.n	8007dd0 <_printf_float+0xc0>
 8007dbc:	ee10 3a90 	vmov	r3, s1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	bfbc      	itt	lt
 8007dc4:	232d      	movlt	r3, #45	@ 0x2d
 8007dc6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007dca:	497d      	ldr	r1, [pc, #500]	@ (8007fc0 <_printf_float+0x2b0>)
 8007dcc:	4b7d      	ldr	r3, [pc, #500]	@ (8007fc4 <_printf_float+0x2b4>)
 8007dce:	e7d5      	b.n	8007d7c <_printf_float+0x6c>
 8007dd0:	6863      	ldr	r3, [r4, #4]
 8007dd2:	1c59      	adds	r1, r3, #1
 8007dd4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007dd8:	d139      	bne.n	8007e4e <_printf_float+0x13e>
 8007dda:	2306      	movs	r3, #6
 8007ddc:	6063      	str	r3, [r4, #4]
 8007dde:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007de2:	2300      	movs	r3, #0
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	ab0a      	add	r3, sp, #40	@ 0x28
 8007dea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007dee:	ab09      	add	r3, sp, #36	@ 0x24
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	6861      	ldr	r1, [r4, #4]
 8007df4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f7ff fef9 	bl	8007bf0 <__cvt>
 8007dfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e04:	4680      	mov	r8, r0
 8007e06:	d129      	bne.n	8007e5c <_printf_float+0x14c>
 8007e08:	1cc8      	adds	r0, r1, #3
 8007e0a:	db02      	blt.n	8007e12 <_printf_float+0x102>
 8007e0c:	6863      	ldr	r3, [r4, #4]
 8007e0e:	4299      	cmp	r1, r3
 8007e10:	dd41      	ble.n	8007e96 <_printf_float+0x186>
 8007e12:	f1a9 0902 	sub.w	r9, r9, #2
 8007e16:	fa5f f989 	uxtb.w	r9, r9
 8007e1a:	3901      	subs	r1, #1
 8007e1c:	464a      	mov	r2, r9
 8007e1e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e22:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e24:	f7ff ff38 	bl	8007c98 <__exponent>
 8007e28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e2a:	1813      	adds	r3, r2, r0
 8007e2c:	2a01      	cmp	r2, #1
 8007e2e:	4682      	mov	sl, r0
 8007e30:	6123      	str	r3, [r4, #16]
 8007e32:	dc02      	bgt.n	8007e3a <_printf_float+0x12a>
 8007e34:	6822      	ldr	r2, [r4, #0]
 8007e36:	07d2      	lsls	r2, r2, #31
 8007e38:	d501      	bpl.n	8007e3e <_printf_float+0x12e>
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d0a6      	beq.n	8007d94 <_printf_float+0x84>
 8007e46:	232d      	movs	r3, #45	@ 0x2d
 8007e48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e4c:	e7a2      	b.n	8007d94 <_printf_float+0x84>
 8007e4e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e52:	d1c4      	bne.n	8007dde <_printf_float+0xce>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1c2      	bne.n	8007dde <_printf_float+0xce>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e7bf      	b.n	8007ddc <_printf_float+0xcc>
 8007e5c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007e60:	d9db      	bls.n	8007e1a <_printf_float+0x10a>
 8007e62:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007e66:	d118      	bne.n	8007e9a <_printf_float+0x18a>
 8007e68:	2900      	cmp	r1, #0
 8007e6a:	6863      	ldr	r3, [r4, #4]
 8007e6c:	dd0b      	ble.n	8007e86 <_printf_float+0x176>
 8007e6e:	6121      	str	r1, [r4, #16]
 8007e70:	b913      	cbnz	r3, 8007e78 <_printf_float+0x168>
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	07d0      	lsls	r0, r2, #31
 8007e76:	d502      	bpl.n	8007e7e <_printf_float+0x16e>
 8007e78:	3301      	adds	r3, #1
 8007e7a:	440b      	add	r3, r1
 8007e7c:	6123      	str	r3, [r4, #16]
 8007e7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e80:	f04f 0a00 	mov.w	sl, #0
 8007e84:	e7db      	b.n	8007e3e <_printf_float+0x12e>
 8007e86:	b913      	cbnz	r3, 8007e8e <_printf_float+0x17e>
 8007e88:	6822      	ldr	r2, [r4, #0]
 8007e8a:	07d2      	lsls	r2, r2, #31
 8007e8c:	d501      	bpl.n	8007e92 <_printf_float+0x182>
 8007e8e:	3302      	adds	r3, #2
 8007e90:	e7f4      	b.n	8007e7c <_printf_float+0x16c>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e7f2      	b.n	8007e7c <_printf_float+0x16c>
 8007e96:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	db05      	blt.n	8007eac <_printf_float+0x19c>
 8007ea0:	6823      	ldr	r3, [r4, #0]
 8007ea2:	6121      	str	r1, [r4, #16]
 8007ea4:	07d8      	lsls	r0, r3, #31
 8007ea6:	d5ea      	bpl.n	8007e7e <_printf_float+0x16e>
 8007ea8:	1c4b      	adds	r3, r1, #1
 8007eaa:	e7e7      	b.n	8007e7c <_printf_float+0x16c>
 8007eac:	2900      	cmp	r1, #0
 8007eae:	bfd4      	ite	le
 8007eb0:	f1c1 0202 	rsble	r2, r1, #2
 8007eb4:	2201      	movgt	r2, #1
 8007eb6:	4413      	add	r3, r2
 8007eb8:	e7e0      	b.n	8007e7c <_printf_float+0x16c>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	055a      	lsls	r2, r3, #21
 8007ebe:	d407      	bmi.n	8007ed0 <_printf_float+0x1c0>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d12a      	bne.n	8007f24 <_printf_float+0x214>
 8007ece:	e76b      	b.n	8007da8 <_printf_float+0x98>
 8007ed0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007ed4:	f240 80e0 	bls.w	8008098 <_printf_float+0x388>
 8007ed8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007edc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee4:	d133      	bne.n	8007f4e <_printf_float+0x23e>
 8007ee6:	4a38      	ldr	r2, [pc, #224]	@ (8007fc8 <_printf_float+0x2b8>)
 8007ee8:	2301      	movs	r3, #1
 8007eea:	4631      	mov	r1, r6
 8007eec:	4628      	mov	r0, r5
 8007eee:	47b8      	blx	r7
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	f43f af59 	beq.w	8007da8 <_printf_float+0x98>
 8007ef6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007efa:	4543      	cmp	r3, r8
 8007efc:	db02      	blt.n	8007f04 <_printf_float+0x1f4>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	07d8      	lsls	r0, r3, #31
 8007f02:	d50f      	bpl.n	8007f24 <_printf_float+0x214>
 8007f04:	9b05      	ldr	r3, [sp, #20]
 8007f06:	465a      	mov	r2, fp
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	47b8      	blx	r7
 8007f0e:	3001      	adds	r0, #1
 8007f10:	f43f af4a 	beq.w	8007da8 <_printf_float+0x98>
 8007f14:	f04f 0900 	mov.w	r9, #0
 8007f18:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f1c:	f104 0a1a 	add.w	sl, r4, #26
 8007f20:	45c8      	cmp	r8, r9
 8007f22:	dc09      	bgt.n	8007f38 <_printf_float+0x228>
 8007f24:	6823      	ldr	r3, [r4, #0]
 8007f26:	079b      	lsls	r3, r3, #30
 8007f28:	f100 8107 	bmi.w	800813a <_printf_float+0x42a>
 8007f2c:	68e0      	ldr	r0, [r4, #12]
 8007f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f30:	4298      	cmp	r0, r3
 8007f32:	bfb8      	it	lt
 8007f34:	4618      	movlt	r0, r3
 8007f36:	e739      	b.n	8007dac <_printf_float+0x9c>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4631      	mov	r1, r6
 8007f3e:	4628      	mov	r0, r5
 8007f40:	47b8      	blx	r7
 8007f42:	3001      	adds	r0, #1
 8007f44:	f43f af30 	beq.w	8007da8 <_printf_float+0x98>
 8007f48:	f109 0901 	add.w	r9, r9, #1
 8007f4c:	e7e8      	b.n	8007f20 <_printf_float+0x210>
 8007f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	dc3b      	bgt.n	8007fcc <_printf_float+0x2bc>
 8007f54:	4a1c      	ldr	r2, [pc, #112]	@ (8007fc8 <_printf_float+0x2b8>)
 8007f56:	2301      	movs	r3, #1
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f af22 	beq.w	8007da8 <_printf_float+0x98>
 8007f64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f68:	ea59 0303 	orrs.w	r3, r9, r3
 8007f6c:	d102      	bne.n	8007f74 <_printf_float+0x264>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	07d9      	lsls	r1, r3, #31
 8007f72:	d5d7      	bpl.n	8007f24 <_printf_float+0x214>
 8007f74:	9b05      	ldr	r3, [sp, #20]
 8007f76:	465a      	mov	r2, fp
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af12 	beq.w	8007da8 <_printf_float+0x98>
 8007f84:	f04f 0a00 	mov.w	sl, #0
 8007f88:	f104 0b1a 	add.w	fp, r4, #26
 8007f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8e:	425b      	negs	r3, r3
 8007f90:	4553      	cmp	r3, sl
 8007f92:	dc01      	bgt.n	8007f98 <_printf_float+0x288>
 8007f94:	464b      	mov	r3, r9
 8007f96:	e794      	b.n	8007ec2 <_printf_float+0x1b2>
 8007f98:	2301      	movs	r3, #1
 8007f9a:	465a      	mov	r2, fp
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af00 	beq.w	8007da8 <_printf_float+0x98>
 8007fa8:	f10a 0a01 	add.w	sl, sl, #1
 8007fac:	e7ee      	b.n	8007f8c <_printf_float+0x27c>
 8007fae:	bf00      	nop
 8007fb0:	ffffffff 	.word	0xffffffff
 8007fb4:	7fefffff 	.word	0x7fefffff
 8007fb8:	0800c1b4 	.word	0x0800c1b4
 8007fbc:	0800c1b8 	.word	0x0800c1b8
 8007fc0:	0800c1bc 	.word	0x0800c1bc
 8007fc4:	0800c1c0 	.word	0x0800c1c0
 8007fc8:	0800c1c4 	.word	0x0800c1c4
 8007fcc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fd2:	4553      	cmp	r3, sl
 8007fd4:	bfa8      	it	ge
 8007fd6:	4653      	movge	r3, sl
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	4699      	mov	r9, r3
 8007fdc:	dc37      	bgt.n	800804e <_printf_float+0x33e>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9307      	str	r3, [sp, #28]
 8007fe2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fe6:	f104 021a 	add.w	r2, r4, #26
 8007fea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fec:	9907      	ldr	r1, [sp, #28]
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	eba3 0309 	sub.w	r3, r3, r9
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	dc31      	bgt.n	800805c <_printf_float+0x34c>
 8007ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ffa:	459a      	cmp	sl, r3
 8007ffc:	dc3b      	bgt.n	8008076 <_printf_float+0x366>
 8007ffe:	6823      	ldr	r3, [r4, #0]
 8008000:	07da      	lsls	r2, r3, #31
 8008002:	d438      	bmi.n	8008076 <_printf_float+0x366>
 8008004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008006:	ebaa 0903 	sub.w	r9, sl, r3
 800800a:	9b06      	ldr	r3, [sp, #24]
 800800c:	ebaa 0303 	sub.w	r3, sl, r3
 8008010:	4599      	cmp	r9, r3
 8008012:	bfa8      	it	ge
 8008014:	4699      	movge	r9, r3
 8008016:	f1b9 0f00 	cmp.w	r9, #0
 800801a:	dc34      	bgt.n	8008086 <_printf_float+0x376>
 800801c:	f04f 0800 	mov.w	r8, #0
 8008020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008024:	f104 0b1a 	add.w	fp, r4, #26
 8008028:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800802a:	ebaa 0303 	sub.w	r3, sl, r3
 800802e:	eba3 0309 	sub.w	r3, r3, r9
 8008032:	4543      	cmp	r3, r8
 8008034:	f77f af76 	ble.w	8007f24 <_printf_float+0x214>
 8008038:	2301      	movs	r3, #1
 800803a:	465a      	mov	r2, fp
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	47b8      	blx	r7
 8008042:	3001      	adds	r0, #1
 8008044:	f43f aeb0 	beq.w	8007da8 <_printf_float+0x98>
 8008048:	f108 0801 	add.w	r8, r8, #1
 800804c:	e7ec      	b.n	8008028 <_printf_float+0x318>
 800804e:	4642      	mov	r2, r8
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	d1c1      	bne.n	8007fde <_printf_float+0x2ce>
 800805a:	e6a5      	b.n	8007da8 <_printf_float+0x98>
 800805c:	2301      	movs	r3, #1
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	9206      	str	r2, [sp, #24]
 8008064:	47b8      	blx	r7
 8008066:	3001      	adds	r0, #1
 8008068:	f43f ae9e 	beq.w	8007da8 <_printf_float+0x98>
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	9a06      	ldr	r2, [sp, #24]
 8008070:	3301      	adds	r3, #1
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	e7b9      	b.n	8007fea <_printf_float+0x2da>
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	465a      	mov	r2, fp
 800807a:	4631      	mov	r1, r6
 800807c:	4628      	mov	r0, r5
 800807e:	47b8      	blx	r7
 8008080:	3001      	adds	r0, #1
 8008082:	d1bf      	bne.n	8008004 <_printf_float+0x2f4>
 8008084:	e690      	b.n	8007da8 <_printf_float+0x98>
 8008086:	9a06      	ldr	r2, [sp, #24]
 8008088:	464b      	mov	r3, r9
 800808a:	4442      	add	r2, r8
 800808c:	4631      	mov	r1, r6
 800808e:	4628      	mov	r0, r5
 8008090:	47b8      	blx	r7
 8008092:	3001      	adds	r0, #1
 8008094:	d1c2      	bne.n	800801c <_printf_float+0x30c>
 8008096:	e687      	b.n	8007da8 <_printf_float+0x98>
 8008098:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800809c:	f1b9 0f01 	cmp.w	r9, #1
 80080a0:	dc01      	bgt.n	80080a6 <_printf_float+0x396>
 80080a2:	07db      	lsls	r3, r3, #31
 80080a4:	d536      	bpl.n	8008114 <_printf_float+0x404>
 80080a6:	2301      	movs	r3, #1
 80080a8:	4642      	mov	r2, r8
 80080aa:	4631      	mov	r1, r6
 80080ac:	4628      	mov	r0, r5
 80080ae:	47b8      	blx	r7
 80080b0:	3001      	adds	r0, #1
 80080b2:	f43f ae79 	beq.w	8007da8 <_printf_float+0x98>
 80080b6:	9b05      	ldr	r3, [sp, #20]
 80080b8:	465a      	mov	r2, fp
 80080ba:	4631      	mov	r1, r6
 80080bc:	4628      	mov	r0, r5
 80080be:	47b8      	blx	r7
 80080c0:	3001      	adds	r0, #1
 80080c2:	f43f ae71 	beq.w	8007da8 <_printf_float+0x98>
 80080c6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80080ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80080d6:	d018      	beq.n	800810a <_printf_float+0x3fa>
 80080d8:	464b      	mov	r3, r9
 80080da:	f108 0201 	add.w	r2, r8, #1
 80080de:	4631      	mov	r1, r6
 80080e0:	4628      	mov	r0, r5
 80080e2:	47b8      	blx	r7
 80080e4:	3001      	adds	r0, #1
 80080e6:	d10c      	bne.n	8008102 <_printf_float+0x3f2>
 80080e8:	e65e      	b.n	8007da8 <_printf_float+0x98>
 80080ea:	2301      	movs	r3, #1
 80080ec:	465a      	mov	r2, fp
 80080ee:	4631      	mov	r1, r6
 80080f0:	4628      	mov	r0, r5
 80080f2:	47b8      	blx	r7
 80080f4:	3001      	adds	r0, #1
 80080f6:	f43f ae57 	beq.w	8007da8 <_printf_float+0x98>
 80080fa:	f108 0801 	add.w	r8, r8, #1
 80080fe:	45c8      	cmp	r8, r9
 8008100:	dbf3      	blt.n	80080ea <_printf_float+0x3da>
 8008102:	4653      	mov	r3, sl
 8008104:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008108:	e6dc      	b.n	8007ec4 <_printf_float+0x1b4>
 800810a:	f04f 0800 	mov.w	r8, #0
 800810e:	f104 0b1a 	add.w	fp, r4, #26
 8008112:	e7f4      	b.n	80080fe <_printf_float+0x3ee>
 8008114:	2301      	movs	r3, #1
 8008116:	4642      	mov	r2, r8
 8008118:	e7e1      	b.n	80080de <_printf_float+0x3ce>
 800811a:	2301      	movs	r3, #1
 800811c:	464a      	mov	r2, r9
 800811e:	4631      	mov	r1, r6
 8008120:	4628      	mov	r0, r5
 8008122:	47b8      	blx	r7
 8008124:	3001      	adds	r0, #1
 8008126:	f43f ae3f 	beq.w	8007da8 <_printf_float+0x98>
 800812a:	f108 0801 	add.w	r8, r8, #1
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008132:	1a5b      	subs	r3, r3, r1
 8008134:	4543      	cmp	r3, r8
 8008136:	dcf0      	bgt.n	800811a <_printf_float+0x40a>
 8008138:	e6f8      	b.n	8007f2c <_printf_float+0x21c>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	f104 0919 	add.w	r9, r4, #25
 8008142:	e7f4      	b.n	800812e <_printf_float+0x41e>

08008144 <_printf_common>:
 8008144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008148:	4616      	mov	r6, r2
 800814a:	4698      	mov	r8, r3
 800814c:	688a      	ldr	r2, [r1, #8]
 800814e:	690b      	ldr	r3, [r1, #16]
 8008150:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008154:	4293      	cmp	r3, r2
 8008156:	bfb8      	it	lt
 8008158:	4613      	movlt	r3, r2
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008160:	4607      	mov	r7, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b10a      	cbz	r2, 800816a <_printf_common+0x26>
 8008166:	3301      	adds	r3, #1
 8008168:	6033      	str	r3, [r6, #0]
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	0699      	lsls	r1, r3, #26
 800816e:	bf42      	ittt	mi
 8008170:	6833      	ldrmi	r3, [r6, #0]
 8008172:	3302      	addmi	r3, #2
 8008174:	6033      	strmi	r3, [r6, #0]
 8008176:	6825      	ldr	r5, [r4, #0]
 8008178:	f015 0506 	ands.w	r5, r5, #6
 800817c:	d106      	bne.n	800818c <_printf_common+0x48>
 800817e:	f104 0a19 	add.w	sl, r4, #25
 8008182:	68e3      	ldr	r3, [r4, #12]
 8008184:	6832      	ldr	r2, [r6, #0]
 8008186:	1a9b      	subs	r3, r3, r2
 8008188:	42ab      	cmp	r3, r5
 800818a:	dc26      	bgt.n	80081da <_printf_common+0x96>
 800818c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008190:	6822      	ldr	r2, [r4, #0]
 8008192:	3b00      	subs	r3, #0
 8008194:	bf18      	it	ne
 8008196:	2301      	movne	r3, #1
 8008198:	0692      	lsls	r2, r2, #26
 800819a:	d42b      	bmi.n	80081f4 <_printf_common+0xb0>
 800819c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081a0:	4641      	mov	r1, r8
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c8      	blx	r9
 80081a6:	3001      	adds	r0, #1
 80081a8:	d01e      	beq.n	80081e8 <_printf_common+0xa4>
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	f003 0306 	and.w	r3, r3, #6
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	bf02      	ittt	eq
 80081b6:	68e5      	ldreq	r5, [r4, #12]
 80081b8:	6833      	ldreq	r3, [r6, #0]
 80081ba:	1aed      	subeq	r5, r5, r3
 80081bc:	68a3      	ldr	r3, [r4, #8]
 80081be:	bf0c      	ite	eq
 80081c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081c4:	2500      	movne	r5, #0
 80081c6:	4293      	cmp	r3, r2
 80081c8:	bfc4      	itt	gt
 80081ca:	1a9b      	subgt	r3, r3, r2
 80081cc:	18ed      	addgt	r5, r5, r3
 80081ce:	2600      	movs	r6, #0
 80081d0:	341a      	adds	r4, #26
 80081d2:	42b5      	cmp	r5, r6
 80081d4:	d11a      	bne.n	800820c <_printf_common+0xc8>
 80081d6:	2000      	movs	r0, #0
 80081d8:	e008      	b.n	80081ec <_printf_common+0xa8>
 80081da:	2301      	movs	r3, #1
 80081dc:	4652      	mov	r2, sl
 80081de:	4641      	mov	r1, r8
 80081e0:	4638      	mov	r0, r7
 80081e2:	47c8      	blx	r9
 80081e4:	3001      	adds	r0, #1
 80081e6:	d103      	bne.n	80081f0 <_printf_common+0xac>
 80081e8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081f0:	3501      	adds	r5, #1
 80081f2:	e7c6      	b.n	8008182 <_printf_common+0x3e>
 80081f4:	18e1      	adds	r1, r4, r3
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	2030      	movs	r0, #48	@ 0x30
 80081fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081fe:	4422      	add	r2, r4
 8008200:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008204:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008208:	3302      	adds	r3, #2
 800820a:	e7c7      	b.n	800819c <_printf_common+0x58>
 800820c:	2301      	movs	r3, #1
 800820e:	4622      	mov	r2, r4
 8008210:	4641      	mov	r1, r8
 8008212:	4638      	mov	r0, r7
 8008214:	47c8      	blx	r9
 8008216:	3001      	adds	r0, #1
 8008218:	d0e6      	beq.n	80081e8 <_printf_common+0xa4>
 800821a:	3601      	adds	r6, #1
 800821c:	e7d9      	b.n	80081d2 <_printf_common+0x8e>
	...

08008220 <_printf_i>:
 8008220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008224:	7e0f      	ldrb	r7, [r1, #24]
 8008226:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008228:	2f78      	cmp	r7, #120	@ 0x78
 800822a:	4691      	mov	r9, r2
 800822c:	4680      	mov	r8, r0
 800822e:	460c      	mov	r4, r1
 8008230:	469a      	mov	sl, r3
 8008232:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008236:	d807      	bhi.n	8008248 <_printf_i+0x28>
 8008238:	2f62      	cmp	r7, #98	@ 0x62
 800823a:	d80a      	bhi.n	8008252 <_printf_i+0x32>
 800823c:	2f00      	cmp	r7, #0
 800823e:	f000 80d2 	beq.w	80083e6 <_printf_i+0x1c6>
 8008242:	2f58      	cmp	r7, #88	@ 0x58
 8008244:	f000 80b9 	beq.w	80083ba <_printf_i+0x19a>
 8008248:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800824c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008250:	e03a      	b.n	80082c8 <_printf_i+0xa8>
 8008252:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008256:	2b15      	cmp	r3, #21
 8008258:	d8f6      	bhi.n	8008248 <_printf_i+0x28>
 800825a:	a101      	add	r1, pc, #4	@ (adr r1, 8008260 <_printf_i+0x40>)
 800825c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008260:	080082b9 	.word	0x080082b9
 8008264:	080082cd 	.word	0x080082cd
 8008268:	08008249 	.word	0x08008249
 800826c:	08008249 	.word	0x08008249
 8008270:	08008249 	.word	0x08008249
 8008274:	08008249 	.word	0x08008249
 8008278:	080082cd 	.word	0x080082cd
 800827c:	08008249 	.word	0x08008249
 8008280:	08008249 	.word	0x08008249
 8008284:	08008249 	.word	0x08008249
 8008288:	08008249 	.word	0x08008249
 800828c:	080083cd 	.word	0x080083cd
 8008290:	080082f7 	.word	0x080082f7
 8008294:	08008387 	.word	0x08008387
 8008298:	08008249 	.word	0x08008249
 800829c:	08008249 	.word	0x08008249
 80082a0:	080083ef 	.word	0x080083ef
 80082a4:	08008249 	.word	0x08008249
 80082a8:	080082f7 	.word	0x080082f7
 80082ac:	08008249 	.word	0x08008249
 80082b0:	08008249 	.word	0x08008249
 80082b4:	0800838f 	.word	0x0800838f
 80082b8:	6833      	ldr	r3, [r6, #0]
 80082ba:	1d1a      	adds	r2, r3, #4
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6032      	str	r2, [r6, #0]
 80082c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80082c8:	2301      	movs	r3, #1
 80082ca:	e09d      	b.n	8008408 <_printf_i+0x1e8>
 80082cc:	6833      	ldr	r3, [r6, #0]
 80082ce:	6820      	ldr	r0, [r4, #0]
 80082d0:	1d19      	adds	r1, r3, #4
 80082d2:	6031      	str	r1, [r6, #0]
 80082d4:	0606      	lsls	r6, r0, #24
 80082d6:	d501      	bpl.n	80082dc <_printf_i+0xbc>
 80082d8:	681d      	ldr	r5, [r3, #0]
 80082da:	e003      	b.n	80082e4 <_printf_i+0xc4>
 80082dc:	0645      	lsls	r5, r0, #25
 80082de:	d5fb      	bpl.n	80082d8 <_printf_i+0xb8>
 80082e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80082e4:	2d00      	cmp	r5, #0
 80082e6:	da03      	bge.n	80082f0 <_printf_i+0xd0>
 80082e8:	232d      	movs	r3, #45	@ 0x2d
 80082ea:	426d      	negs	r5, r5
 80082ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082f0:	4859      	ldr	r0, [pc, #356]	@ (8008458 <_printf_i+0x238>)
 80082f2:	230a      	movs	r3, #10
 80082f4:	e011      	b.n	800831a <_printf_i+0xfa>
 80082f6:	6821      	ldr	r1, [r4, #0]
 80082f8:	6833      	ldr	r3, [r6, #0]
 80082fa:	0608      	lsls	r0, r1, #24
 80082fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008300:	d402      	bmi.n	8008308 <_printf_i+0xe8>
 8008302:	0649      	lsls	r1, r1, #25
 8008304:	bf48      	it	mi
 8008306:	b2ad      	uxthmi	r5, r5
 8008308:	2f6f      	cmp	r7, #111	@ 0x6f
 800830a:	4853      	ldr	r0, [pc, #332]	@ (8008458 <_printf_i+0x238>)
 800830c:	6033      	str	r3, [r6, #0]
 800830e:	bf14      	ite	ne
 8008310:	230a      	movne	r3, #10
 8008312:	2308      	moveq	r3, #8
 8008314:	2100      	movs	r1, #0
 8008316:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800831a:	6866      	ldr	r6, [r4, #4]
 800831c:	60a6      	str	r6, [r4, #8]
 800831e:	2e00      	cmp	r6, #0
 8008320:	bfa2      	ittt	ge
 8008322:	6821      	ldrge	r1, [r4, #0]
 8008324:	f021 0104 	bicge.w	r1, r1, #4
 8008328:	6021      	strge	r1, [r4, #0]
 800832a:	b90d      	cbnz	r5, 8008330 <_printf_i+0x110>
 800832c:	2e00      	cmp	r6, #0
 800832e:	d04b      	beq.n	80083c8 <_printf_i+0x1a8>
 8008330:	4616      	mov	r6, r2
 8008332:	fbb5 f1f3 	udiv	r1, r5, r3
 8008336:	fb03 5711 	mls	r7, r3, r1, r5
 800833a:	5dc7      	ldrb	r7, [r0, r7]
 800833c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008340:	462f      	mov	r7, r5
 8008342:	42bb      	cmp	r3, r7
 8008344:	460d      	mov	r5, r1
 8008346:	d9f4      	bls.n	8008332 <_printf_i+0x112>
 8008348:	2b08      	cmp	r3, #8
 800834a:	d10b      	bne.n	8008364 <_printf_i+0x144>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	07df      	lsls	r7, r3, #31
 8008350:	d508      	bpl.n	8008364 <_printf_i+0x144>
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	6861      	ldr	r1, [r4, #4]
 8008356:	4299      	cmp	r1, r3
 8008358:	bfde      	ittt	le
 800835a:	2330      	movle	r3, #48	@ 0x30
 800835c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008360:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008364:	1b92      	subs	r2, r2, r6
 8008366:	6122      	str	r2, [r4, #16]
 8008368:	f8cd a000 	str.w	sl, [sp]
 800836c:	464b      	mov	r3, r9
 800836e:	aa03      	add	r2, sp, #12
 8008370:	4621      	mov	r1, r4
 8008372:	4640      	mov	r0, r8
 8008374:	f7ff fee6 	bl	8008144 <_printf_common>
 8008378:	3001      	adds	r0, #1
 800837a:	d14a      	bne.n	8008412 <_printf_i+0x1f2>
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	b004      	add	sp, #16
 8008382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	f043 0320 	orr.w	r3, r3, #32
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	4833      	ldr	r0, [pc, #204]	@ (800845c <_printf_i+0x23c>)
 8008390:	2778      	movs	r7, #120	@ 0x78
 8008392:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	6831      	ldr	r1, [r6, #0]
 800839a:	061f      	lsls	r7, r3, #24
 800839c:	f851 5b04 	ldr.w	r5, [r1], #4
 80083a0:	d402      	bmi.n	80083a8 <_printf_i+0x188>
 80083a2:	065f      	lsls	r7, r3, #25
 80083a4:	bf48      	it	mi
 80083a6:	b2ad      	uxthmi	r5, r5
 80083a8:	6031      	str	r1, [r6, #0]
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	bf44      	itt	mi
 80083ae:	f043 0320 	orrmi.w	r3, r3, #32
 80083b2:	6023      	strmi	r3, [r4, #0]
 80083b4:	b11d      	cbz	r5, 80083be <_printf_i+0x19e>
 80083b6:	2310      	movs	r3, #16
 80083b8:	e7ac      	b.n	8008314 <_printf_i+0xf4>
 80083ba:	4827      	ldr	r0, [pc, #156]	@ (8008458 <_printf_i+0x238>)
 80083bc:	e7e9      	b.n	8008392 <_printf_i+0x172>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	f023 0320 	bic.w	r3, r3, #32
 80083c4:	6023      	str	r3, [r4, #0]
 80083c6:	e7f6      	b.n	80083b6 <_printf_i+0x196>
 80083c8:	4616      	mov	r6, r2
 80083ca:	e7bd      	b.n	8008348 <_printf_i+0x128>
 80083cc:	6833      	ldr	r3, [r6, #0]
 80083ce:	6825      	ldr	r5, [r4, #0]
 80083d0:	6961      	ldr	r1, [r4, #20]
 80083d2:	1d18      	adds	r0, r3, #4
 80083d4:	6030      	str	r0, [r6, #0]
 80083d6:	062e      	lsls	r6, r5, #24
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	d501      	bpl.n	80083e0 <_printf_i+0x1c0>
 80083dc:	6019      	str	r1, [r3, #0]
 80083de:	e002      	b.n	80083e6 <_printf_i+0x1c6>
 80083e0:	0668      	lsls	r0, r5, #25
 80083e2:	d5fb      	bpl.n	80083dc <_printf_i+0x1bc>
 80083e4:	8019      	strh	r1, [r3, #0]
 80083e6:	2300      	movs	r3, #0
 80083e8:	6123      	str	r3, [r4, #16]
 80083ea:	4616      	mov	r6, r2
 80083ec:	e7bc      	b.n	8008368 <_printf_i+0x148>
 80083ee:	6833      	ldr	r3, [r6, #0]
 80083f0:	1d1a      	adds	r2, r3, #4
 80083f2:	6032      	str	r2, [r6, #0]
 80083f4:	681e      	ldr	r6, [r3, #0]
 80083f6:	6862      	ldr	r2, [r4, #4]
 80083f8:	2100      	movs	r1, #0
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7f7 ff70 	bl	80002e0 <memchr>
 8008400:	b108      	cbz	r0, 8008406 <_printf_i+0x1e6>
 8008402:	1b80      	subs	r0, r0, r6
 8008404:	6060      	str	r0, [r4, #4]
 8008406:	6863      	ldr	r3, [r4, #4]
 8008408:	6123      	str	r3, [r4, #16]
 800840a:	2300      	movs	r3, #0
 800840c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008410:	e7aa      	b.n	8008368 <_printf_i+0x148>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	4632      	mov	r2, r6
 8008416:	4649      	mov	r1, r9
 8008418:	4640      	mov	r0, r8
 800841a:	47d0      	blx	sl
 800841c:	3001      	adds	r0, #1
 800841e:	d0ad      	beq.n	800837c <_printf_i+0x15c>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	079b      	lsls	r3, r3, #30
 8008424:	d413      	bmi.n	800844e <_printf_i+0x22e>
 8008426:	68e0      	ldr	r0, [r4, #12]
 8008428:	9b03      	ldr	r3, [sp, #12]
 800842a:	4298      	cmp	r0, r3
 800842c:	bfb8      	it	lt
 800842e:	4618      	movlt	r0, r3
 8008430:	e7a6      	b.n	8008380 <_printf_i+0x160>
 8008432:	2301      	movs	r3, #1
 8008434:	4632      	mov	r2, r6
 8008436:	4649      	mov	r1, r9
 8008438:	4640      	mov	r0, r8
 800843a:	47d0      	blx	sl
 800843c:	3001      	adds	r0, #1
 800843e:	d09d      	beq.n	800837c <_printf_i+0x15c>
 8008440:	3501      	adds	r5, #1
 8008442:	68e3      	ldr	r3, [r4, #12]
 8008444:	9903      	ldr	r1, [sp, #12]
 8008446:	1a5b      	subs	r3, r3, r1
 8008448:	42ab      	cmp	r3, r5
 800844a:	dcf2      	bgt.n	8008432 <_printf_i+0x212>
 800844c:	e7eb      	b.n	8008426 <_printf_i+0x206>
 800844e:	2500      	movs	r5, #0
 8008450:	f104 0619 	add.w	r6, r4, #25
 8008454:	e7f5      	b.n	8008442 <_printf_i+0x222>
 8008456:	bf00      	nop
 8008458:	0800c1c6 	.word	0x0800c1c6
 800845c:	0800c1d7 	.word	0x0800c1d7

08008460 <_scanf_float>:
 8008460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008464:	b087      	sub	sp, #28
 8008466:	4617      	mov	r7, r2
 8008468:	9303      	str	r3, [sp, #12]
 800846a:	688b      	ldr	r3, [r1, #8]
 800846c:	1e5a      	subs	r2, r3, #1
 800846e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008472:	bf81      	itttt	hi
 8008474:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008478:	eb03 0b05 	addhi.w	fp, r3, r5
 800847c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008480:	608b      	strhi	r3, [r1, #8]
 8008482:	680b      	ldr	r3, [r1, #0]
 8008484:	460a      	mov	r2, r1
 8008486:	f04f 0500 	mov.w	r5, #0
 800848a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800848e:	f842 3b1c 	str.w	r3, [r2], #28
 8008492:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008496:	4680      	mov	r8, r0
 8008498:	460c      	mov	r4, r1
 800849a:	bf98      	it	ls
 800849c:	f04f 0b00 	movls.w	fp, #0
 80084a0:	9201      	str	r2, [sp, #4]
 80084a2:	4616      	mov	r6, r2
 80084a4:	46aa      	mov	sl, r5
 80084a6:	46a9      	mov	r9, r5
 80084a8:	9502      	str	r5, [sp, #8]
 80084aa:	68a2      	ldr	r2, [r4, #8]
 80084ac:	b152      	cbz	r2, 80084c4 <_scanf_float+0x64>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80084b4:	d864      	bhi.n	8008580 <_scanf_float+0x120>
 80084b6:	2b40      	cmp	r3, #64	@ 0x40
 80084b8:	d83c      	bhi.n	8008534 <_scanf_float+0xd4>
 80084ba:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80084be:	b2c8      	uxtb	r0, r1
 80084c0:	280e      	cmp	r0, #14
 80084c2:	d93a      	bls.n	800853a <_scanf_float+0xda>
 80084c4:	f1b9 0f00 	cmp.w	r9, #0
 80084c8:	d003      	beq.n	80084d2 <_scanf_float+0x72>
 80084ca:	6823      	ldr	r3, [r4, #0]
 80084cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084d6:	f1ba 0f01 	cmp.w	sl, #1
 80084da:	f200 8117 	bhi.w	800870c <_scanf_float+0x2ac>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	429e      	cmp	r6, r3
 80084e2:	f200 8108 	bhi.w	80086f6 <_scanf_float+0x296>
 80084e6:	2001      	movs	r0, #1
 80084e8:	b007      	add	sp, #28
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80084f2:	2a0d      	cmp	r2, #13
 80084f4:	d8e6      	bhi.n	80084c4 <_scanf_float+0x64>
 80084f6:	a101      	add	r1, pc, #4	@ (adr r1, 80084fc <_scanf_float+0x9c>)
 80084f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80084fc:	08008643 	.word	0x08008643
 8008500:	080084c5 	.word	0x080084c5
 8008504:	080084c5 	.word	0x080084c5
 8008508:	080084c5 	.word	0x080084c5
 800850c:	080086a3 	.word	0x080086a3
 8008510:	0800867b 	.word	0x0800867b
 8008514:	080084c5 	.word	0x080084c5
 8008518:	080084c5 	.word	0x080084c5
 800851c:	08008651 	.word	0x08008651
 8008520:	080084c5 	.word	0x080084c5
 8008524:	080084c5 	.word	0x080084c5
 8008528:	080084c5 	.word	0x080084c5
 800852c:	080084c5 	.word	0x080084c5
 8008530:	08008609 	.word	0x08008609
 8008534:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008538:	e7db      	b.n	80084f2 <_scanf_float+0x92>
 800853a:	290e      	cmp	r1, #14
 800853c:	d8c2      	bhi.n	80084c4 <_scanf_float+0x64>
 800853e:	a001      	add	r0, pc, #4	@ (adr r0, 8008544 <_scanf_float+0xe4>)
 8008540:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008544:	080085f9 	.word	0x080085f9
 8008548:	080084c5 	.word	0x080084c5
 800854c:	080085f9 	.word	0x080085f9
 8008550:	0800868f 	.word	0x0800868f
 8008554:	080084c5 	.word	0x080084c5
 8008558:	080085a1 	.word	0x080085a1
 800855c:	080085df 	.word	0x080085df
 8008560:	080085df 	.word	0x080085df
 8008564:	080085df 	.word	0x080085df
 8008568:	080085df 	.word	0x080085df
 800856c:	080085df 	.word	0x080085df
 8008570:	080085df 	.word	0x080085df
 8008574:	080085df 	.word	0x080085df
 8008578:	080085df 	.word	0x080085df
 800857c:	080085df 	.word	0x080085df
 8008580:	2b6e      	cmp	r3, #110	@ 0x6e
 8008582:	d809      	bhi.n	8008598 <_scanf_float+0x138>
 8008584:	2b60      	cmp	r3, #96	@ 0x60
 8008586:	d8b2      	bhi.n	80084ee <_scanf_float+0x8e>
 8008588:	2b54      	cmp	r3, #84	@ 0x54
 800858a:	d07b      	beq.n	8008684 <_scanf_float+0x224>
 800858c:	2b59      	cmp	r3, #89	@ 0x59
 800858e:	d199      	bne.n	80084c4 <_scanf_float+0x64>
 8008590:	2d07      	cmp	r5, #7
 8008592:	d197      	bne.n	80084c4 <_scanf_float+0x64>
 8008594:	2508      	movs	r5, #8
 8008596:	e02c      	b.n	80085f2 <_scanf_float+0x192>
 8008598:	2b74      	cmp	r3, #116	@ 0x74
 800859a:	d073      	beq.n	8008684 <_scanf_float+0x224>
 800859c:	2b79      	cmp	r3, #121	@ 0x79
 800859e:	e7f6      	b.n	800858e <_scanf_float+0x12e>
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	05c8      	lsls	r0, r1, #23
 80085a4:	d51b      	bpl.n	80085de <_scanf_float+0x17e>
 80085a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80085aa:	6021      	str	r1, [r4, #0]
 80085ac:	f109 0901 	add.w	r9, r9, #1
 80085b0:	f1bb 0f00 	cmp.w	fp, #0
 80085b4:	d003      	beq.n	80085be <_scanf_float+0x15e>
 80085b6:	3201      	adds	r2, #1
 80085b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085bc:	60a2      	str	r2, [r4, #8]
 80085be:	68a3      	ldr	r3, [r4, #8]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	60a3      	str	r3, [r4, #8]
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	f340 8087 	ble.w	80086e4 <_scanf_float+0x284>
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	3301      	adds	r3, #1
 80085da:	603b      	str	r3, [r7, #0]
 80085dc:	e765      	b.n	80084aa <_scanf_float+0x4a>
 80085de:	eb1a 0105 	adds.w	r1, sl, r5
 80085e2:	f47f af6f 	bne.w	80084c4 <_scanf_float+0x64>
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80085ec:	6022      	str	r2, [r4, #0]
 80085ee:	460d      	mov	r5, r1
 80085f0:	468a      	mov	sl, r1
 80085f2:	f806 3b01 	strb.w	r3, [r6], #1
 80085f6:	e7e2      	b.n	80085be <_scanf_float+0x15e>
 80085f8:	6822      	ldr	r2, [r4, #0]
 80085fa:	0610      	lsls	r0, r2, #24
 80085fc:	f57f af62 	bpl.w	80084c4 <_scanf_float+0x64>
 8008600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008604:	6022      	str	r2, [r4, #0]
 8008606:	e7f4      	b.n	80085f2 <_scanf_float+0x192>
 8008608:	f1ba 0f00 	cmp.w	sl, #0
 800860c:	d10e      	bne.n	800862c <_scanf_float+0x1cc>
 800860e:	f1b9 0f00 	cmp.w	r9, #0
 8008612:	d10e      	bne.n	8008632 <_scanf_float+0x1d2>
 8008614:	6822      	ldr	r2, [r4, #0]
 8008616:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800861a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800861e:	d108      	bne.n	8008632 <_scanf_float+0x1d2>
 8008620:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008624:	6022      	str	r2, [r4, #0]
 8008626:	f04f 0a01 	mov.w	sl, #1
 800862a:	e7e2      	b.n	80085f2 <_scanf_float+0x192>
 800862c:	f1ba 0f02 	cmp.w	sl, #2
 8008630:	d055      	beq.n	80086de <_scanf_float+0x27e>
 8008632:	2d01      	cmp	r5, #1
 8008634:	d002      	beq.n	800863c <_scanf_float+0x1dc>
 8008636:	2d04      	cmp	r5, #4
 8008638:	f47f af44 	bne.w	80084c4 <_scanf_float+0x64>
 800863c:	3501      	adds	r5, #1
 800863e:	b2ed      	uxtb	r5, r5
 8008640:	e7d7      	b.n	80085f2 <_scanf_float+0x192>
 8008642:	f1ba 0f01 	cmp.w	sl, #1
 8008646:	f47f af3d 	bne.w	80084c4 <_scanf_float+0x64>
 800864a:	f04f 0a02 	mov.w	sl, #2
 800864e:	e7d0      	b.n	80085f2 <_scanf_float+0x192>
 8008650:	b97d      	cbnz	r5, 8008672 <_scanf_float+0x212>
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	f47f af38 	bne.w	80084ca <_scanf_float+0x6a>
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008660:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008664:	f040 8101 	bne.w	800886a <_scanf_float+0x40a>
 8008668:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800866c:	6022      	str	r2, [r4, #0]
 800866e:	2501      	movs	r5, #1
 8008670:	e7bf      	b.n	80085f2 <_scanf_float+0x192>
 8008672:	2d03      	cmp	r5, #3
 8008674:	d0e2      	beq.n	800863c <_scanf_float+0x1dc>
 8008676:	2d05      	cmp	r5, #5
 8008678:	e7de      	b.n	8008638 <_scanf_float+0x1d8>
 800867a:	2d02      	cmp	r5, #2
 800867c:	f47f af22 	bne.w	80084c4 <_scanf_float+0x64>
 8008680:	2503      	movs	r5, #3
 8008682:	e7b6      	b.n	80085f2 <_scanf_float+0x192>
 8008684:	2d06      	cmp	r5, #6
 8008686:	f47f af1d 	bne.w	80084c4 <_scanf_float+0x64>
 800868a:	2507      	movs	r5, #7
 800868c:	e7b1      	b.n	80085f2 <_scanf_float+0x192>
 800868e:	6822      	ldr	r2, [r4, #0]
 8008690:	0591      	lsls	r1, r2, #22
 8008692:	f57f af17 	bpl.w	80084c4 <_scanf_float+0x64>
 8008696:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800869a:	6022      	str	r2, [r4, #0]
 800869c:	f8cd 9008 	str.w	r9, [sp, #8]
 80086a0:	e7a7      	b.n	80085f2 <_scanf_float+0x192>
 80086a2:	6822      	ldr	r2, [r4, #0]
 80086a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80086a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80086ac:	d006      	beq.n	80086bc <_scanf_float+0x25c>
 80086ae:	0550      	lsls	r0, r2, #21
 80086b0:	f57f af08 	bpl.w	80084c4 <_scanf_float+0x64>
 80086b4:	f1b9 0f00 	cmp.w	r9, #0
 80086b8:	f000 80d7 	beq.w	800886a <_scanf_float+0x40a>
 80086bc:	0591      	lsls	r1, r2, #22
 80086be:	bf58      	it	pl
 80086c0:	9902      	ldrpl	r1, [sp, #8]
 80086c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086c6:	bf58      	it	pl
 80086c8:	eba9 0101 	subpl.w	r1, r9, r1
 80086cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80086d0:	bf58      	it	pl
 80086d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	f04f 0900 	mov.w	r9, #0
 80086dc:	e789      	b.n	80085f2 <_scanf_float+0x192>
 80086de:	f04f 0a03 	mov.w	sl, #3
 80086e2:	e786      	b.n	80085f2 <_scanf_float+0x192>
 80086e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80086e8:	4639      	mov	r1, r7
 80086ea:	4640      	mov	r0, r8
 80086ec:	4798      	blx	r3
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f43f aedb 	beq.w	80084aa <_scanf_float+0x4a>
 80086f4:	e6e6      	b.n	80084c4 <_scanf_float+0x64>
 80086f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80086fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80086fe:	463a      	mov	r2, r7
 8008700:	4640      	mov	r0, r8
 8008702:	4798      	blx	r3
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	3b01      	subs	r3, #1
 8008708:	6123      	str	r3, [r4, #16]
 800870a:	e6e8      	b.n	80084de <_scanf_float+0x7e>
 800870c:	1e6b      	subs	r3, r5, #1
 800870e:	2b06      	cmp	r3, #6
 8008710:	d824      	bhi.n	800875c <_scanf_float+0x2fc>
 8008712:	2d02      	cmp	r5, #2
 8008714:	d836      	bhi.n	8008784 <_scanf_float+0x324>
 8008716:	9b01      	ldr	r3, [sp, #4]
 8008718:	429e      	cmp	r6, r3
 800871a:	f67f aee4 	bls.w	80084e6 <_scanf_float+0x86>
 800871e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008722:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008726:	463a      	mov	r2, r7
 8008728:	4640      	mov	r0, r8
 800872a:	4798      	blx	r3
 800872c:	6923      	ldr	r3, [r4, #16]
 800872e:	3b01      	subs	r3, #1
 8008730:	6123      	str	r3, [r4, #16]
 8008732:	e7f0      	b.n	8008716 <_scanf_float+0x2b6>
 8008734:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008738:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800873c:	463a      	mov	r2, r7
 800873e:	4640      	mov	r0, r8
 8008740:	4798      	blx	r3
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	3b01      	subs	r3, #1
 8008746:	6123      	str	r3, [r4, #16]
 8008748:	f10a 3aff 	add.w	sl, sl, #4294967295
 800874c:	fa5f fa8a 	uxtb.w	sl, sl
 8008750:	f1ba 0f02 	cmp.w	sl, #2
 8008754:	d1ee      	bne.n	8008734 <_scanf_float+0x2d4>
 8008756:	3d03      	subs	r5, #3
 8008758:	b2ed      	uxtb	r5, r5
 800875a:	1b76      	subs	r6, r6, r5
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	05da      	lsls	r2, r3, #23
 8008760:	d530      	bpl.n	80087c4 <_scanf_float+0x364>
 8008762:	055b      	lsls	r3, r3, #21
 8008764:	d511      	bpl.n	800878a <_scanf_float+0x32a>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	429e      	cmp	r6, r3
 800876a:	f67f aebc 	bls.w	80084e6 <_scanf_float+0x86>
 800876e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008776:	463a      	mov	r2, r7
 8008778:	4640      	mov	r0, r8
 800877a:	4798      	blx	r3
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	3b01      	subs	r3, #1
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	e7f0      	b.n	8008766 <_scanf_float+0x306>
 8008784:	46aa      	mov	sl, r5
 8008786:	46b3      	mov	fp, r6
 8008788:	e7de      	b.n	8008748 <_scanf_float+0x2e8>
 800878a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	2965      	cmp	r1, #101	@ 0x65
 8008792:	f103 33ff 	add.w	r3, r3, #4294967295
 8008796:	f106 35ff 	add.w	r5, r6, #4294967295
 800879a:	6123      	str	r3, [r4, #16]
 800879c:	d00c      	beq.n	80087b8 <_scanf_float+0x358>
 800879e:	2945      	cmp	r1, #69	@ 0x45
 80087a0:	d00a      	beq.n	80087b8 <_scanf_float+0x358>
 80087a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087a6:	463a      	mov	r2, r7
 80087a8:	4640      	mov	r0, r8
 80087aa:	4798      	blx	r3
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	1eb5      	subs	r5, r6, #2
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087bc:	463a      	mov	r2, r7
 80087be:	4640      	mov	r0, r8
 80087c0:	4798      	blx	r3
 80087c2:	462e      	mov	r6, r5
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	f012 0210 	ands.w	r2, r2, #16
 80087ca:	d001      	beq.n	80087d0 <_scanf_float+0x370>
 80087cc:	2000      	movs	r0, #0
 80087ce:	e68b      	b.n	80084e8 <_scanf_float+0x88>
 80087d0:	7032      	strb	r2, [r6, #0]
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087dc:	d11a      	bne.n	8008814 <_scanf_float+0x3b4>
 80087de:	9b02      	ldr	r3, [sp, #8]
 80087e0:	454b      	cmp	r3, r9
 80087e2:	eba3 0209 	sub.w	r2, r3, r9
 80087e6:	d121      	bne.n	800882c <_scanf_float+0x3cc>
 80087e8:	9901      	ldr	r1, [sp, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	4640      	mov	r0, r8
 80087ee:	f002 fb61 	bl	800aeb4 <_strtod_r>
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	6821      	ldr	r1, [r4, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f011 0f02 	tst.w	r1, #2
 80087fc:	f103 0204 	add.w	r2, r3, #4
 8008800:	d01f      	beq.n	8008842 <_scanf_float+0x3e2>
 8008802:	9903      	ldr	r1, [sp, #12]
 8008804:	600a      	str	r2, [r1, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	ed83 0b00 	vstr	d0, [r3]
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60e3      	str	r3, [r4, #12]
 8008812:	e7db      	b.n	80087cc <_scanf_float+0x36c>
 8008814:	9b04      	ldr	r3, [sp, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0e6      	beq.n	80087e8 <_scanf_float+0x388>
 800881a:	9905      	ldr	r1, [sp, #20]
 800881c:	230a      	movs	r3, #10
 800881e:	3101      	adds	r1, #1
 8008820:	4640      	mov	r0, r8
 8008822:	f002 fbc7 	bl	800afb4 <_strtol_r>
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	9e05      	ldr	r6, [sp, #20]
 800882a:	1ac2      	subs	r2, r0, r3
 800882c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008830:	429e      	cmp	r6, r3
 8008832:	bf28      	it	cs
 8008834:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008838:	490d      	ldr	r1, [pc, #52]	@ (8008870 <_scanf_float+0x410>)
 800883a:	4630      	mov	r0, r6
 800883c:	f000 f912 	bl	8008a64 <siprintf>
 8008840:	e7d2      	b.n	80087e8 <_scanf_float+0x388>
 8008842:	f011 0f04 	tst.w	r1, #4
 8008846:	9903      	ldr	r1, [sp, #12]
 8008848:	600a      	str	r2, [r1, #0]
 800884a:	d1dc      	bne.n	8008806 <_scanf_float+0x3a6>
 800884c:	eeb4 0b40 	vcmp.f64	d0, d0
 8008850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008854:	681d      	ldr	r5, [r3, #0]
 8008856:	d705      	bvc.n	8008864 <_scanf_float+0x404>
 8008858:	4806      	ldr	r0, [pc, #24]	@ (8008874 <_scanf_float+0x414>)
 800885a:	f000 f9e7 	bl	8008c2c <nanf>
 800885e:	ed85 0a00 	vstr	s0, [r5]
 8008862:	e7d3      	b.n	800880c <_scanf_float+0x3ac>
 8008864:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008868:	e7f9      	b.n	800885e <_scanf_float+0x3fe>
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	e630      	b.n	80084d2 <_scanf_float+0x72>
 8008870:	0800c1e8 	.word	0x0800c1e8
 8008874:	0800c57d 	.word	0x0800c57d

08008878 <std>:
 8008878:	2300      	movs	r3, #0
 800887a:	b510      	push	{r4, lr}
 800887c:	4604      	mov	r4, r0
 800887e:	e9c0 3300 	strd	r3, r3, [r0]
 8008882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008886:	6083      	str	r3, [r0, #8]
 8008888:	8181      	strh	r1, [r0, #12]
 800888a:	6643      	str	r3, [r0, #100]	@ 0x64
 800888c:	81c2      	strh	r2, [r0, #14]
 800888e:	6183      	str	r3, [r0, #24]
 8008890:	4619      	mov	r1, r3
 8008892:	2208      	movs	r2, #8
 8008894:	305c      	adds	r0, #92	@ 0x5c
 8008896:	f000 f948 	bl	8008b2a <memset>
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <std+0x58>)
 800889c:	6263      	str	r3, [r4, #36]	@ 0x24
 800889e:	4b0d      	ldr	r3, [pc, #52]	@ (80088d4 <std+0x5c>)
 80088a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088a2:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <std+0x60>)
 80088a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088a6:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <std+0x64>)
 80088a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80088aa:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <std+0x68>)
 80088ac:	6224      	str	r4, [r4, #32]
 80088ae:	429c      	cmp	r4, r3
 80088b0:	d006      	beq.n	80088c0 <std+0x48>
 80088b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088b6:	4294      	cmp	r4, r2
 80088b8:	d002      	beq.n	80088c0 <std+0x48>
 80088ba:	33d0      	adds	r3, #208	@ 0xd0
 80088bc:	429c      	cmp	r4, r3
 80088be:	d105      	bne.n	80088cc <std+0x54>
 80088c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088c8:	f000 b9ac 	b.w	8008c24 <__retarget_lock_init_recursive>
 80088cc:	bd10      	pop	{r4, pc}
 80088ce:	bf00      	nop
 80088d0:	08008aa5 	.word	0x08008aa5
 80088d4:	08008ac7 	.word	0x08008ac7
 80088d8:	08008aff 	.word	0x08008aff
 80088dc:	08008b23 	.word	0x08008b23
 80088e0:	24000454 	.word	0x24000454

080088e4 <stdio_exit_handler>:
 80088e4:	4a02      	ldr	r2, [pc, #8]	@ (80088f0 <stdio_exit_handler+0xc>)
 80088e6:	4903      	ldr	r1, [pc, #12]	@ (80088f4 <stdio_exit_handler+0x10>)
 80088e8:	4803      	ldr	r0, [pc, #12]	@ (80088f8 <stdio_exit_handler+0x14>)
 80088ea:	f000 b869 	b.w	80089c0 <_fwalk_sglue>
 80088ee:	bf00      	nop
 80088f0:	24000010 	.word	0x24000010
 80088f4:	0800b371 	.word	0x0800b371
 80088f8:	24000020 	.word	0x24000020

080088fc <cleanup_stdio>:
 80088fc:	6841      	ldr	r1, [r0, #4]
 80088fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008930 <cleanup_stdio+0x34>)
 8008900:	4299      	cmp	r1, r3
 8008902:	b510      	push	{r4, lr}
 8008904:	4604      	mov	r4, r0
 8008906:	d001      	beq.n	800890c <cleanup_stdio+0x10>
 8008908:	f002 fd32 	bl	800b370 <_fflush_r>
 800890c:	68a1      	ldr	r1, [r4, #8]
 800890e:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <cleanup_stdio+0x38>)
 8008910:	4299      	cmp	r1, r3
 8008912:	d002      	beq.n	800891a <cleanup_stdio+0x1e>
 8008914:	4620      	mov	r0, r4
 8008916:	f002 fd2b 	bl	800b370 <_fflush_r>
 800891a:	68e1      	ldr	r1, [r4, #12]
 800891c:	4b06      	ldr	r3, [pc, #24]	@ (8008938 <cleanup_stdio+0x3c>)
 800891e:	4299      	cmp	r1, r3
 8008920:	d004      	beq.n	800892c <cleanup_stdio+0x30>
 8008922:	4620      	mov	r0, r4
 8008924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008928:	f002 bd22 	b.w	800b370 <_fflush_r>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop
 8008930:	24000454 	.word	0x24000454
 8008934:	240004bc 	.word	0x240004bc
 8008938:	24000524 	.word	0x24000524

0800893c <global_stdio_init.part.0>:
 800893c:	b510      	push	{r4, lr}
 800893e:	4b0b      	ldr	r3, [pc, #44]	@ (800896c <global_stdio_init.part.0+0x30>)
 8008940:	4c0b      	ldr	r4, [pc, #44]	@ (8008970 <global_stdio_init.part.0+0x34>)
 8008942:	4a0c      	ldr	r2, [pc, #48]	@ (8008974 <global_stdio_init.part.0+0x38>)
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	4620      	mov	r0, r4
 8008948:	2200      	movs	r2, #0
 800894a:	2104      	movs	r1, #4
 800894c:	f7ff ff94 	bl	8008878 <std>
 8008950:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008954:	2201      	movs	r2, #1
 8008956:	2109      	movs	r1, #9
 8008958:	f7ff ff8e 	bl	8008878 <std>
 800895c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008960:	2202      	movs	r2, #2
 8008962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008966:	2112      	movs	r1, #18
 8008968:	f7ff bf86 	b.w	8008878 <std>
 800896c:	2400058c 	.word	0x2400058c
 8008970:	24000454 	.word	0x24000454
 8008974:	080088e5 	.word	0x080088e5

08008978 <__sfp_lock_acquire>:
 8008978:	4801      	ldr	r0, [pc, #4]	@ (8008980 <__sfp_lock_acquire+0x8>)
 800897a:	f000 b954 	b.w	8008c26 <__retarget_lock_acquire_recursive>
 800897e:	bf00      	nop
 8008980:	24000595 	.word	0x24000595

08008984 <__sfp_lock_release>:
 8008984:	4801      	ldr	r0, [pc, #4]	@ (800898c <__sfp_lock_release+0x8>)
 8008986:	f000 b94f 	b.w	8008c28 <__retarget_lock_release_recursive>
 800898a:	bf00      	nop
 800898c:	24000595 	.word	0x24000595

08008990 <__sinit>:
 8008990:	b510      	push	{r4, lr}
 8008992:	4604      	mov	r4, r0
 8008994:	f7ff fff0 	bl	8008978 <__sfp_lock_acquire>
 8008998:	6a23      	ldr	r3, [r4, #32]
 800899a:	b11b      	cbz	r3, 80089a4 <__sinit+0x14>
 800899c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a0:	f7ff bff0 	b.w	8008984 <__sfp_lock_release>
 80089a4:	4b04      	ldr	r3, [pc, #16]	@ (80089b8 <__sinit+0x28>)
 80089a6:	6223      	str	r3, [r4, #32]
 80089a8:	4b04      	ldr	r3, [pc, #16]	@ (80089bc <__sinit+0x2c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1f5      	bne.n	800899c <__sinit+0xc>
 80089b0:	f7ff ffc4 	bl	800893c <global_stdio_init.part.0>
 80089b4:	e7f2      	b.n	800899c <__sinit+0xc>
 80089b6:	bf00      	nop
 80089b8:	080088fd 	.word	0x080088fd
 80089bc:	2400058c 	.word	0x2400058c

080089c0 <_fwalk_sglue>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4607      	mov	r7, r0
 80089c6:	4688      	mov	r8, r1
 80089c8:	4614      	mov	r4, r2
 80089ca:	2600      	movs	r6, #0
 80089cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089d0:	f1b9 0901 	subs.w	r9, r9, #1
 80089d4:	d505      	bpl.n	80089e2 <_fwalk_sglue+0x22>
 80089d6:	6824      	ldr	r4, [r4, #0]
 80089d8:	2c00      	cmp	r4, #0
 80089da:	d1f7      	bne.n	80089cc <_fwalk_sglue+0xc>
 80089dc:	4630      	mov	r0, r6
 80089de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e2:	89ab      	ldrh	r3, [r5, #12]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d907      	bls.n	80089f8 <_fwalk_sglue+0x38>
 80089e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089ec:	3301      	adds	r3, #1
 80089ee:	d003      	beq.n	80089f8 <_fwalk_sglue+0x38>
 80089f0:	4629      	mov	r1, r5
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c0      	blx	r8
 80089f6:	4306      	orrs	r6, r0
 80089f8:	3568      	adds	r5, #104	@ 0x68
 80089fa:	e7e9      	b.n	80089d0 <_fwalk_sglue+0x10>

080089fc <sniprintf>:
 80089fc:	b40c      	push	{r2, r3}
 80089fe:	b530      	push	{r4, r5, lr}
 8008a00:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <sniprintf+0x64>)
 8008a02:	1e0c      	subs	r4, r1, #0
 8008a04:	681d      	ldr	r5, [r3, #0]
 8008a06:	b09d      	sub	sp, #116	@ 0x74
 8008a08:	da08      	bge.n	8008a1c <sniprintf+0x20>
 8008a0a:	238b      	movs	r3, #139	@ 0x8b
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a12:	b01d      	add	sp, #116	@ 0x74
 8008a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a18:	b002      	add	sp, #8
 8008a1a:	4770      	bx	lr
 8008a1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a24:	bf14      	ite	ne
 8008a26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a2a:	4623      	moveq	r3, r4
 8008a2c:	9304      	str	r3, [sp, #16]
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a34:	9002      	str	r0, [sp, #8]
 8008a36:	9006      	str	r0, [sp, #24]
 8008a38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a3e:	ab21      	add	r3, sp, #132	@ 0x84
 8008a40:	a902      	add	r1, sp, #8
 8008a42:	4628      	mov	r0, r5
 8008a44:	9301      	str	r3, [sp, #4]
 8008a46:	f002 fb13 	bl	800b070 <_svfiprintf_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	bfbc      	itt	lt
 8008a4e:	238b      	movlt	r3, #139	@ 0x8b
 8008a50:	602b      	strlt	r3, [r5, #0]
 8008a52:	2c00      	cmp	r4, #0
 8008a54:	d0dd      	beq.n	8008a12 <sniprintf+0x16>
 8008a56:	9b02      	ldr	r3, [sp, #8]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e7d9      	b.n	8008a12 <sniprintf+0x16>
 8008a5e:	bf00      	nop
 8008a60:	2400001c 	.word	0x2400001c

08008a64 <siprintf>:
 8008a64:	b40e      	push	{r1, r2, r3}
 8008a66:	b500      	push	{lr}
 8008a68:	b09c      	sub	sp, #112	@ 0x70
 8008a6a:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a6c:	9002      	str	r0, [sp, #8]
 8008a6e:	9006      	str	r0, [sp, #24]
 8008a70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a74:	4809      	ldr	r0, [pc, #36]	@ (8008a9c <siprintf+0x38>)
 8008a76:	9107      	str	r1, [sp, #28]
 8008a78:	9104      	str	r1, [sp, #16]
 8008a7a:	4909      	ldr	r1, [pc, #36]	@ (8008aa0 <siprintf+0x3c>)
 8008a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a80:	9105      	str	r1, [sp, #20]
 8008a82:	6800      	ldr	r0, [r0, #0]
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	a902      	add	r1, sp, #8
 8008a88:	f002 faf2 	bl	800b070 <_svfiprintf_r>
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
 8008a92:	b01c      	add	sp, #112	@ 0x70
 8008a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a98:	b003      	add	sp, #12
 8008a9a:	4770      	bx	lr
 8008a9c:	2400001c 	.word	0x2400001c
 8008aa0:	ffff0208 	.word	0xffff0208

08008aa4 <__sread>:
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aac:	f000 f86c 	bl	8008b88 <_read_r>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	bfab      	itete	ge
 8008ab4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab8:	181b      	addge	r3, r3, r0
 8008aba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008abe:	bfac      	ite	ge
 8008ac0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ac2:	81a3      	strhlt	r3, [r4, #12]
 8008ac4:	bd10      	pop	{r4, pc}

08008ac6 <__swrite>:
 8008ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	461f      	mov	r7, r3
 8008acc:	898b      	ldrh	r3, [r1, #12]
 8008ace:	05db      	lsls	r3, r3, #23
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	d505      	bpl.n	8008ae4 <__swrite+0x1e>
 8008ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008adc:	2302      	movs	r3, #2
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f000 f840 	bl	8008b64 <_lseek_r>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aee:	81a3      	strh	r3, [r4, #12]
 8008af0:	4632      	mov	r2, r6
 8008af2:	463b      	mov	r3, r7
 8008af4:	4628      	mov	r0, r5
 8008af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008afa:	f000 b857 	b.w	8008bac <_write_r>

08008afe <__sseek>:
 8008afe:	b510      	push	{r4, lr}
 8008b00:	460c      	mov	r4, r1
 8008b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b06:	f000 f82d 	bl	8008b64 <_lseek_r>
 8008b0a:	1c43      	adds	r3, r0, #1
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	bf15      	itete	ne
 8008b10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b1a:	81a3      	strheq	r3, [r4, #12]
 8008b1c:	bf18      	it	ne
 8008b1e:	81a3      	strhne	r3, [r4, #12]
 8008b20:	bd10      	pop	{r4, pc}

08008b22 <__sclose>:
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 b80d 	b.w	8008b44 <_close_r>

08008b2a <memset>:
 8008b2a:	4402      	add	r2, r0
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d100      	bne.n	8008b34 <memset+0xa>
 8008b32:	4770      	bx	lr
 8008b34:	f803 1b01 	strb.w	r1, [r3], #1
 8008b38:	e7f9      	b.n	8008b2e <memset+0x4>
	...

08008b3c <_localeconv_r>:
 8008b3c:	4800      	ldr	r0, [pc, #0]	@ (8008b40 <_localeconv_r+0x4>)
 8008b3e:	4770      	bx	lr
 8008b40:	2400015c 	.word	0x2400015c

08008b44 <_close_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d06      	ldr	r5, [pc, #24]	@ (8008b60 <_close_r+0x1c>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	602b      	str	r3, [r5, #0]
 8008b50:	f7f9 f81a 	bl	8001b88 <_close>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_close_r+0x1a>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_close_r+0x1a>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	24000590 	.word	0x24000590

08008b64 <_lseek_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4d07      	ldr	r5, [pc, #28]	@ (8008b84 <_lseek_r+0x20>)
 8008b68:	4604      	mov	r4, r0
 8008b6a:	4608      	mov	r0, r1
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	2200      	movs	r2, #0
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7f9 f82f 	bl	8001bd6 <_lseek>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_lseek_r+0x1e>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_lseek_r+0x1e>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	24000590 	.word	0x24000590

08008b88 <_read_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4d07      	ldr	r5, [pc, #28]	@ (8008ba8 <_read_r+0x20>)
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	4608      	mov	r0, r1
 8008b90:	4611      	mov	r1, r2
 8008b92:	2200      	movs	r2, #0
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 ffd9 	bl	8001b4e <_read>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_read_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_read_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	24000590 	.word	0x24000590

08008bac <_write_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d07      	ldr	r5, [pc, #28]	@ (8008bcc <_write_r+0x20>)
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	602a      	str	r2, [r5, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f7f8 fd3c 	bl	8001638 <_write>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_write_r+0x1e>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_write_r+0x1e>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	24000590 	.word	0x24000590

08008bd0 <__errno>:
 8008bd0:	4b01      	ldr	r3, [pc, #4]	@ (8008bd8 <__errno+0x8>)
 8008bd2:	6818      	ldr	r0, [r3, #0]
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	2400001c 	.word	0x2400001c

08008bdc <__libc_init_array>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	4d0d      	ldr	r5, [pc, #52]	@ (8008c14 <__libc_init_array+0x38>)
 8008be0:	4c0d      	ldr	r4, [pc, #52]	@ (8008c18 <__libc_init_array+0x3c>)
 8008be2:	1b64      	subs	r4, r4, r5
 8008be4:	10a4      	asrs	r4, r4, #2
 8008be6:	2600      	movs	r6, #0
 8008be8:	42a6      	cmp	r6, r4
 8008bea:	d109      	bne.n	8008c00 <__libc_init_array+0x24>
 8008bec:	4d0b      	ldr	r5, [pc, #44]	@ (8008c1c <__libc_init_array+0x40>)
 8008bee:	4c0c      	ldr	r4, [pc, #48]	@ (8008c20 <__libc_init_array+0x44>)
 8008bf0:	f003 fab0 	bl	800c154 <_init>
 8008bf4:	1b64      	subs	r4, r4, r5
 8008bf6:	10a4      	asrs	r4, r4, #2
 8008bf8:	2600      	movs	r6, #0
 8008bfa:	42a6      	cmp	r6, r4
 8008bfc:	d105      	bne.n	8008c0a <__libc_init_array+0x2e>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c04:	4798      	blx	r3
 8008c06:	3601      	adds	r6, #1
 8008c08:	e7ee      	b.n	8008be8 <__libc_init_array+0xc>
 8008c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0e:	4798      	blx	r3
 8008c10:	3601      	adds	r6, #1
 8008c12:	e7f2      	b.n	8008bfa <__libc_init_array+0x1e>
 8008c14:	0800c5e8 	.word	0x0800c5e8
 8008c18:	0800c5e8 	.word	0x0800c5e8
 8008c1c:	0800c5e8 	.word	0x0800c5e8
 8008c20:	0800c5ec 	.word	0x0800c5ec

08008c24 <__retarget_lock_init_recursive>:
 8008c24:	4770      	bx	lr

08008c26 <__retarget_lock_acquire_recursive>:
 8008c26:	4770      	bx	lr

08008c28 <__retarget_lock_release_recursive>:
 8008c28:	4770      	bx	lr
	...

08008c2c <nanf>:
 8008c2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008c34 <nanf+0x8>
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	7fc00000 	.word	0x7fc00000

08008c38 <quorem>:
 8008c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	6903      	ldr	r3, [r0, #16]
 8008c3e:	690c      	ldr	r4, [r1, #16]
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	4607      	mov	r7, r0
 8008c44:	db7e      	blt.n	8008d44 <quorem+0x10c>
 8008c46:	3c01      	subs	r4, #1
 8008c48:	f101 0814 	add.w	r8, r1, #20
 8008c4c:	00a3      	lsls	r3, r4, #2
 8008c4e:	f100 0514 	add.w	r5, r0, #20
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c62:	3301      	adds	r3, #1
 8008c64:	429a      	cmp	r2, r3
 8008c66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c6e:	d32e      	bcc.n	8008cce <quorem+0x96>
 8008c70:	f04f 0a00 	mov.w	sl, #0
 8008c74:	46c4      	mov	ip, r8
 8008c76:	46ae      	mov	lr, r5
 8008c78:	46d3      	mov	fp, sl
 8008c7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c7e:	b298      	uxth	r0, r3
 8008c80:	fb06 a000 	mla	r0, r6, r0, sl
 8008c84:	0c02      	lsrs	r2, r0, #16
 8008c86:	0c1b      	lsrs	r3, r3, #16
 8008c88:	fb06 2303 	mla	r3, r6, r3, r2
 8008c8c:	f8de 2000 	ldr.w	r2, [lr]
 8008c90:	b280      	uxth	r0, r0
 8008c92:	b292      	uxth	r2, r2
 8008c94:	1a12      	subs	r2, r2, r0
 8008c96:	445a      	add	r2, fp
 8008c98:	f8de 0000 	ldr.w	r0, [lr]
 8008c9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ca6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008caa:	b292      	uxth	r2, r2
 8008cac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cb0:	45e1      	cmp	r9, ip
 8008cb2:	f84e 2b04 	str.w	r2, [lr], #4
 8008cb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cba:	d2de      	bcs.n	8008c7a <quorem+0x42>
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	58eb      	ldr	r3, [r5, r3]
 8008cc0:	b92b      	cbnz	r3, 8008cce <quorem+0x96>
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	3b04      	subs	r3, #4
 8008cc6:	429d      	cmp	r5, r3
 8008cc8:	461a      	mov	r2, r3
 8008cca:	d32f      	bcc.n	8008d2c <quorem+0xf4>
 8008ccc:	613c      	str	r4, [r7, #16]
 8008cce:	4638      	mov	r0, r7
 8008cd0:	f001 f954 	bl	8009f7c <__mcmp>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	db25      	blt.n	8008d24 <quorem+0xec>
 8008cd8:	4629      	mov	r1, r5
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ce0:	f8d1 c000 	ldr.w	ip, [r1]
 8008ce4:	fa1f fe82 	uxth.w	lr, r2
 8008ce8:	fa1f f38c 	uxth.w	r3, ip
 8008cec:	eba3 030e 	sub.w	r3, r3, lr
 8008cf0:	4403      	add	r3, r0
 8008cf2:	0c12      	lsrs	r2, r2, #16
 8008cf4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cf8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d02:	45c1      	cmp	r9, r8
 8008d04:	f841 3b04 	str.w	r3, [r1], #4
 8008d08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d0c:	d2e6      	bcs.n	8008cdc <quorem+0xa4>
 8008d0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d16:	b922      	cbnz	r2, 8008d22 <quorem+0xea>
 8008d18:	3b04      	subs	r3, #4
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	d30b      	bcc.n	8008d38 <quorem+0x100>
 8008d20:	613c      	str	r4, [r7, #16]
 8008d22:	3601      	adds	r6, #1
 8008d24:	4630      	mov	r0, r6
 8008d26:	b003      	add	sp, #12
 8008d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	3b04      	subs	r3, #4
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	d1cb      	bne.n	8008ccc <quorem+0x94>
 8008d34:	3c01      	subs	r4, #1
 8008d36:	e7c6      	b.n	8008cc6 <quorem+0x8e>
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	3b04      	subs	r3, #4
 8008d3c:	2a00      	cmp	r2, #0
 8008d3e:	d1ef      	bne.n	8008d20 <quorem+0xe8>
 8008d40:	3c01      	subs	r4, #1
 8008d42:	e7ea      	b.n	8008d1a <quorem+0xe2>
 8008d44:	2000      	movs	r0, #0
 8008d46:	e7ee      	b.n	8008d26 <quorem+0xee>

08008d48 <_dtoa_r>:
 8008d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	ed2d 8b02 	vpush	{d8}
 8008d50:	69c7      	ldr	r7, [r0, #28]
 8008d52:	b091      	sub	sp, #68	@ 0x44
 8008d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d58:	ec55 4b10 	vmov	r4, r5, d0
 8008d5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008d5e:	9107      	str	r1, [sp, #28]
 8008d60:	4681      	mov	r9, r0
 8008d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d64:	930d      	str	r3, [sp, #52]	@ 0x34
 8008d66:	b97f      	cbnz	r7, 8008d88 <_dtoa_r+0x40>
 8008d68:	2010      	movs	r0, #16
 8008d6a:	f000 fd8d 	bl	8009888 <malloc>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	f8c9 001c 	str.w	r0, [r9, #28]
 8008d74:	b920      	cbnz	r0, 8008d80 <_dtoa_r+0x38>
 8008d76:	4ba0      	ldr	r3, [pc, #640]	@ (8008ff8 <_dtoa_r+0x2b0>)
 8008d78:	21ef      	movs	r1, #239	@ 0xef
 8008d7a:	48a0      	ldr	r0, [pc, #640]	@ (8008ffc <_dtoa_r+0x2b4>)
 8008d7c:	f002 fb74 	bl	800b468 <__assert_func>
 8008d80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d84:	6007      	str	r7, [r0, #0]
 8008d86:	60c7      	str	r7, [r0, #12]
 8008d88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d8c:	6819      	ldr	r1, [r3, #0]
 8008d8e:	b159      	cbz	r1, 8008da8 <_dtoa_r+0x60>
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	604a      	str	r2, [r1, #4]
 8008d94:	2301      	movs	r3, #1
 8008d96:	4093      	lsls	r3, r2
 8008d98:	608b      	str	r3, [r1, #8]
 8008d9a:	4648      	mov	r0, r9
 8008d9c:	f000 fe6a 	bl	8009a74 <_Bfree>
 8008da0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	1e2b      	subs	r3, r5, #0
 8008daa:	bfbb      	ittet	lt
 8008dac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008db0:	9303      	strlt	r3, [sp, #12]
 8008db2:	2300      	movge	r3, #0
 8008db4:	2201      	movlt	r2, #1
 8008db6:	bfac      	ite	ge
 8008db8:	6033      	strge	r3, [r6, #0]
 8008dba:	6032      	strlt	r2, [r6, #0]
 8008dbc:	4b90      	ldr	r3, [pc, #576]	@ (8009000 <_dtoa_r+0x2b8>)
 8008dbe:	9e03      	ldr	r6, [sp, #12]
 8008dc0:	43b3      	bics	r3, r6
 8008dc2:	d110      	bne.n	8008de6 <_dtoa_r+0x9e>
 8008dc4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dc6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008dd0:	4323      	orrs	r3, r4
 8008dd2:	f000 84de 	beq.w	8009792 <_dtoa_r+0xa4a>
 8008dd6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008dd8:	4f8a      	ldr	r7, [pc, #552]	@ (8009004 <_dtoa_r+0x2bc>)
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 84e0 	beq.w	80097a0 <_dtoa_r+0xa58>
 8008de0:	1cfb      	adds	r3, r7, #3
 8008de2:	f000 bcdb 	b.w	800979c <_dtoa_r+0xa54>
 8008de6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008dea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df2:	d10a      	bne.n	8008e0a <_dtoa_r+0xc2>
 8008df4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008df6:	2301      	movs	r3, #1
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008dfc:	b113      	cbz	r3, 8008e04 <_dtoa_r+0xbc>
 8008dfe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008e00:	4b81      	ldr	r3, [pc, #516]	@ (8009008 <_dtoa_r+0x2c0>)
 8008e02:	6013      	str	r3, [r2, #0]
 8008e04:	4f81      	ldr	r7, [pc, #516]	@ (800900c <_dtoa_r+0x2c4>)
 8008e06:	f000 bccb 	b.w	80097a0 <_dtoa_r+0xa58>
 8008e0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8008e0c:	a90f      	add	r1, sp, #60	@ 0x3c
 8008e0e:	4648      	mov	r0, r9
 8008e10:	eeb0 0b48 	vmov.f64	d0, d8
 8008e14:	f001 f9d2 	bl	800a1bc <__d2b>
 8008e18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008e1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e1e:	9001      	str	r0, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d045      	beq.n	8008eb0 <_dtoa_r+0x168>
 8008e24:	eeb0 7b48 	vmov.f64	d7, d8
 8008e28:	ee18 1a90 	vmov	r1, s17
 8008e2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008e30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008e34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008e38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008e3c:	2500      	movs	r5, #0
 8008e3e:	ee07 1a90 	vmov	s15, r1
 8008e42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008e46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008fe0 <_dtoa_r+0x298>
 8008e4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008fe8 <_dtoa_r+0x2a0>
 8008e52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008e56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008ff0 <_dtoa_r+0x2a8>
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008e62:	eeb0 7b46 	vmov.f64	d7, d6
 8008e66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008e6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008e6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e76:	ee16 8a90 	vmov	r8, s13
 8008e7a:	d508      	bpl.n	8008e8e <_dtoa_r+0x146>
 8008e7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008e80:	eeb4 6b47 	vcmp.f64	d6, d7
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	bf18      	it	ne
 8008e8a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008e8e:	f1b8 0f16 	cmp.w	r8, #22
 8008e92:	d82b      	bhi.n	8008eec <_dtoa_r+0x1a4>
 8008e94:	495e      	ldr	r1, [pc, #376]	@ (8009010 <_dtoa_r+0x2c8>)
 8008e96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008e9a:	ed91 7b00 	vldr	d7, [r1]
 8008e9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	d501      	bpl.n	8008eac <_dtoa_r+0x164>
 8008ea8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008eac:	2100      	movs	r1, #0
 8008eae:	e01e      	b.n	8008eee <_dtoa_r+0x1a6>
 8008eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008eb8:	2920      	cmp	r1, #32
 8008eba:	bfc1      	itttt	gt
 8008ebc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008ec0:	408e      	lslgt	r6, r1
 8008ec2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008ec6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008eca:	bfd6      	itet	le
 8008ecc:	f1c1 0120 	rsble	r1, r1, #32
 8008ed0:	4331      	orrgt	r1, r6
 8008ed2:	fa04 f101 	lslle.w	r1, r4, r1
 8008ed6:	ee07 1a90 	vmov	s15, r1
 8008eda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	ee17 1a90 	vmov	r1, s15
 8008ee4:	2501      	movs	r5, #1
 8008ee6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008eea:	e7a8      	b.n	8008e3e <_dtoa_r+0xf6>
 8008eec:	2101      	movs	r1, #1
 8008eee:	1ad2      	subs	r2, r2, r3
 8008ef0:	1e53      	subs	r3, r2, #1
 8008ef2:	9306      	str	r3, [sp, #24]
 8008ef4:	bf45      	ittet	mi
 8008ef6:	f1c2 0301 	rsbmi	r3, r2, #1
 8008efa:	9305      	strmi	r3, [sp, #20]
 8008efc:	2300      	movpl	r3, #0
 8008efe:	2300      	movmi	r3, #0
 8008f00:	bf4c      	ite	mi
 8008f02:	9306      	strmi	r3, [sp, #24]
 8008f04:	9305      	strpl	r3, [sp, #20]
 8008f06:	f1b8 0f00 	cmp.w	r8, #0
 8008f0a:	910c      	str	r1, [sp, #48]	@ 0x30
 8008f0c:	db18      	blt.n	8008f40 <_dtoa_r+0x1f8>
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008f14:	4443      	add	r3, r8
 8008f16:	9306      	str	r3, [sp, #24]
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9a07      	ldr	r2, [sp, #28]
 8008f1c:	2a09      	cmp	r2, #9
 8008f1e:	d849      	bhi.n	8008fb4 <_dtoa_r+0x26c>
 8008f20:	2a05      	cmp	r2, #5
 8008f22:	bfc4      	itt	gt
 8008f24:	3a04      	subgt	r2, #4
 8008f26:	9207      	strgt	r2, [sp, #28]
 8008f28:	9a07      	ldr	r2, [sp, #28]
 8008f2a:	f1a2 0202 	sub.w	r2, r2, #2
 8008f2e:	bfcc      	ite	gt
 8008f30:	2400      	movgt	r4, #0
 8008f32:	2401      	movle	r4, #1
 8008f34:	2a03      	cmp	r2, #3
 8008f36:	d848      	bhi.n	8008fca <_dtoa_r+0x282>
 8008f38:	e8df f002 	tbb	[pc, r2]
 8008f3c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008f40:	9b05      	ldr	r3, [sp, #20]
 8008f42:	2200      	movs	r2, #0
 8008f44:	eba3 0308 	sub.w	r3, r3, r8
 8008f48:	9305      	str	r3, [sp, #20]
 8008f4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8008f4c:	f1c8 0300 	rsb	r3, r8, #0
 8008f50:	e7e3      	b.n	8008f1a <_dtoa_r+0x1d2>
 8008f52:	2200      	movs	r2, #0
 8008f54:	9208      	str	r2, [sp, #32]
 8008f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	dc39      	bgt.n	8008fd0 <_dtoa_r+0x288>
 8008f5c:	f04f 0b01 	mov.w	fp, #1
 8008f60:	46da      	mov	sl, fp
 8008f62:	465a      	mov	r2, fp
 8008f64:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008f68:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	2004      	movs	r0, #4
 8008f70:	f100 0614 	add.w	r6, r0, #20
 8008f74:	4296      	cmp	r6, r2
 8008f76:	d930      	bls.n	8008fda <_dtoa_r+0x292>
 8008f78:	6079      	str	r1, [r7, #4]
 8008f7a:	4648      	mov	r0, r9
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	f000 fd39 	bl	80099f4 <_Balloc>
 8008f82:	9b04      	ldr	r3, [sp, #16]
 8008f84:	4607      	mov	r7, r0
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d146      	bne.n	8009018 <_dtoa_r+0x2d0>
 8008f8a:	4b22      	ldr	r3, [pc, #136]	@ (8009014 <_dtoa_r+0x2cc>)
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f92:	e6f2      	b.n	8008d7a <_dtoa_r+0x32>
 8008f94:	2201      	movs	r2, #1
 8008f96:	e7dd      	b.n	8008f54 <_dtoa_r+0x20c>
 8008f98:	2200      	movs	r2, #0
 8008f9a:	9208      	str	r2, [sp, #32]
 8008f9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f9e:	eb08 0b02 	add.w	fp, r8, r2
 8008fa2:	f10b 0a01 	add.w	sl, fp, #1
 8008fa6:	4652      	mov	r2, sl
 8008fa8:	2a01      	cmp	r2, #1
 8008faa:	bfb8      	it	lt
 8008fac:	2201      	movlt	r2, #1
 8008fae:	e7db      	b.n	8008f68 <_dtoa_r+0x220>
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	e7f2      	b.n	8008f9a <_dtoa_r+0x252>
 8008fb4:	2401      	movs	r4, #1
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	46da      	mov	sl, fp
 8008fc4:	2212      	movs	r2, #18
 8008fc6:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fc8:	e7ce      	b.n	8008f68 <_dtoa_r+0x220>
 8008fca:	2201      	movs	r2, #1
 8008fcc:	9208      	str	r2, [sp, #32]
 8008fce:	e7f5      	b.n	8008fbc <_dtoa_r+0x274>
 8008fd0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008fd4:	46da      	mov	sl, fp
 8008fd6:	465a      	mov	r2, fp
 8008fd8:	e7c6      	b.n	8008f68 <_dtoa_r+0x220>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	0040      	lsls	r0, r0, #1
 8008fde:	e7c7      	b.n	8008f70 <_dtoa_r+0x228>
 8008fe0:	636f4361 	.word	0x636f4361
 8008fe4:	3fd287a7 	.word	0x3fd287a7
 8008fe8:	8b60c8b3 	.word	0x8b60c8b3
 8008fec:	3fc68a28 	.word	0x3fc68a28
 8008ff0:	509f79fb 	.word	0x509f79fb
 8008ff4:	3fd34413 	.word	0x3fd34413
 8008ff8:	0800c1fa 	.word	0x0800c1fa
 8008ffc:	0800c211 	.word	0x0800c211
 8009000:	7ff00000 	.word	0x7ff00000
 8009004:	0800c1f6 	.word	0x0800c1f6
 8009008:	0800c1c5 	.word	0x0800c1c5
 800900c:	0800c1c4 	.word	0x0800c1c4
 8009010:	0800c308 	.word	0x0800c308
 8009014:	0800c269 	.word	0x0800c269
 8009018:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800901c:	f1ba 0f0e 	cmp.w	sl, #14
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	d86f      	bhi.n	8009104 <_dtoa_r+0x3bc>
 8009024:	2c00      	cmp	r4, #0
 8009026:	d06d      	beq.n	8009104 <_dtoa_r+0x3bc>
 8009028:	f1b8 0f00 	cmp.w	r8, #0
 800902c:	f340 80c2 	ble.w	80091b4 <_dtoa_r+0x46c>
 8009030:	4aca      	ldr	r2, [pc, #808]	@ (800935c <_dtoa_r+0x614>)
 8009032:	f008 010f 	and.w	r1, r8, #15
 8009036:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800903a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800903e:	ed92 7b00 	vldr	d7, [r2]
 8009042:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009046:	f000 80a9 	beq.w	800919c <_dtoa_r+0x454>
 800904a:	4ac5      	ldr	r2, [pc, #788]	@ (8009360 <_dtoa_r+0x618>)
 800904c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009050:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009054:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009058:	f001 010f 	and.w	r1, r1, #15
 800905c:	2203      	movs	r2, #3
 800905e:	48c0      	ldr	r0, [pc, #768]	@ (8009360 <_dtoa_r+0x618>)
 8009060:	2900      	cmp	r1, #0
 8009062:	f040 809d 	bne.w	80091a0 <_dtoa_r+0x458>
 8009066:	ed9d 6b02 	vldr	d6, [sp, #8]
 800906a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800906e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009072:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009074:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009078:	2900      	cmp	r1, #0
 800907a:	f000 80c1 	beq.w	8009200 <_dtoa_r+0x4b8>
 800907e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009082:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800908a:	f140 80b9 	bpl.w	8009200 <_dtoa_r+0x4b8>
 800908e:	f1ba 0f00 	cmp.w	sl, #0
 8009092:	f000 80b5 	beq.w	8009200 <_dtoa_r+0x4b8>
 8009096:	f1bb 0f00 	cmp.w	fp, #0
 800909a:	dd31      	ble.n	8009100 <_dtoa_r+0x3b8>
 800909c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80090a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80090ac:	9104      	str	r1, [sp, #16]
 80090ae:	3201      	adds	r2, #1
 80090b0:	465c      	mov	r4, fp
 80090b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80090b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80090ba:	ee07 2a90 	vmov	s15, r2
 80090be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80090c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80090c6:	ee15 2a90 	vmov	r2, s11
 80090ca:	ec51 0b15 	vmov	r0, r1, d5
 80090ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80090d2:	2c00      	cmp	r4, #0
 80090d4:	f040 8098 	bne.w	8009208 <_dtoa_r+0x4c0>
 80090d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80090dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80090e0:	ec41 0b17 	vmov	d7, r0, r1
 80090e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ec:	f300 8261 	bgt.w	80095b2 <_dtoa_r+0x86a>
 80090f0:	eeb1 7b47 	vneg.f64	d7, d7
 80090f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80090f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fc:	f100 80f5 	bmi.w	80092ea <_dtoa_r+0x5a2>
 8009100:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009104:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009106:	2a00      	cmp	r2, #0
 8009108:	f2c0 812c 	blt.w	8009364 <_dtoa_r+0x61c>
 800910c:	f1b8 0f0e 	cmp.w	r8, #14
 8009110:	f300 8128 	bgt.w	8009364 <_dtoa_r+0x61c>
 8009114:	4b91      	ldr	r3, [pc, #580]	@ (800935c <_dtoa_r+0x614>)
 8009116:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800911a:	ed93 6b00 	vldr	d6, [r3]
 800911e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	da03      	bge.n	800912c <_dtoa_r+0x3e4>
 8009124:	f1ba 0f00 	cmp.w	sl, #0
 8009128:	f340 80d2 	ble.w	80092d0 <_dtoa_r+0x588>
 800912c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009130:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009134:	463e      	mov	r6, r7
 8009136:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800913a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800913e:	ee15 3a10 	vmov	r3, s10
 8009142:	3330      	adds	r3, #48	@ 0x30
 8009144:	f806 3b01 	strb.w	r3, [r6], #1
 8009148:	1bf3      	subs	r3, r6, r7
 800914a:	459a      	cmp	sl, r3
 800914c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009150:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009154:	f040 80f8 	bne.w	8009348 <_dtoa_r+0x600>
 8009158:	ee37 7b07 	vadd.f64	d7, d7, d7
 800915c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009164:	f300 80dd 	bgt.w	8009322 <_dtoa_r+0x5da>
 8009168:	eeb4 7b46 	vcmp.f64	d7, d6
 800916c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009170:	d104      	bne.n	800917c <_dtoa_r+0x434>
 8009172:	ee15 3a10 	vmov	r3, s10
 8009176:	07db      	lsls	r3, r3, #31
 8009178:	f100 80d3 	bmi.w	8009322 <_dtoa_r+0x5da>
 800917c:	9901      	ldr	r1, [sp, #4]
 800917e:	4648      	mov	r0, r9
 8009180:	f000 fc78 	bl	8009a74 <_Bfree>
 8009184:	2300      	movs	r3, #0
 8009186:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009188:	7033      	strb	r3, [r6, #0]
 800918a:	f108 0301 	add.w	r3, r8, #1
 800918e:	6013      	str	r3, [r2, #0]
 8009190:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8304 	beq.w	80097a0 <_dtoa_r+0xa58>
 8009198:	601e      	str	r6, [r3, #0]
 800919a:	e301      	b.n	80097a0 <_dtoa_r+0xa58>
 800919c:	2202      	movs	r2, #2
 800919e:	e75e      	b.n	800905e <_dtoa_r+0x316>
 80091a0:	07cc      	lsls	r4, r1, #31
 80091a2:	d504      	bpl.n	80091ae <_dtoa_r+0x466>
 80091a4:	ed90 6b00 	vldr	d6, [r0]
 80091a8:	3201      	adds	r2, #1
 80091aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091ae:	1049      	asrs	r1, r1, #1
 80091b0:	3008      	adds	r0, #8
 80091b2:	e755      	b.n	8009060 <_dtoa_r+0x318>
 80091b4:	d022      	beq.n	80091fc <_dtoa_r+0x4b4>
 80091b6:	f1c8 0100 	rsb	r1, r8, #0
 80091ba:	4a68      	ldr	r2, [pc, #416]	@ (800935c <_dtoa_r+0x614>)
 80091bc:	f001 000f 	and.w	r0, r1, #15
 80091c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80091c4:	ed92 7b00 	vldr	d7, [r2]
 80091c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80091cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091d0:	4863      	ldr	r0, [pc, #396]	@ (8009360 <_dtoa_r+0x618>)
 80091d2:	1109      	asrs	r1, r1, #4
 80091d4:	2400      	movs	r4, #0
 80091d6:	2202      	movs	r2, #2
 80091d8:	b929      	cbnz	r1, 80091e6 <_dtoa_r+0x49e>
 80091da:	2c00      	cmp	r4, #0
 80091dc:	f43f af49 	beq.w	8009072 <_dtoa_r+0x32a>
 80091e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80091e4:	e745      	b.n	8009072 <_dtoa_r+0x32a>
 80091e6:	07ce      	lsls	r6, r1, #31
 80091e8:	d505      	bpl.n	80091f6 <_dtoa_r+0x4ae>
 80091ea:	ed90 6b00 	vldr	d6, [r0]
 80091ee:	3201      	adds	r2, #1
 80091f0:	2401      	movs	r4, #1
 80091f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091f6:	1049      	asrs	r1, r1, #1
 80091f8:	3008      	adds	r0, #8
 80091fa:	e7ed      	b.n	80091d8 <_dtoa_r+0x490>
 80091fc:	2202      	movs	r2, #2
 80091fe:	e738      	b.n	8009072 <_dtoa_r+0x32a>
 8009200:	f8cd 8010 	str.w	r8, [sp, #16]
 8009204:	4654      	mov	r4, sl
 8009206:	e754      	b.n	80090b2 <_dtoa_r+0x36a>
 8009208:	4a54      	ldr	r2, [pc, #336]	@ (800935c <_dtoa_r+0x614>)
 800920a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800920e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009212:	9a08      	ldr	r2, [sp, #32]
 8009214:	ec41 0b17 	vmov	d7, r0, r1
 8009218:	443c      	add	r4, r7
 800921a:	b34a      	cbz	r2, 8009270 <_dtoa_r+0x528>
 800921c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009220:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009224:	463e      	mov	r6, r7
 8009226:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800922a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800922e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009232:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009236:	ee14 2a90 	vmov	r2, s9
 800923a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800923e:	3230      	adds	r2, #48	@ 0x30
 8009240:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009244:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924c:	f806 2b01 	strb.w	r2, [r6], #1
 8009250:	d438      	bmi.n	80092c4 <_dtoa_r+0x57c>
 8009252:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009256:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800925a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925e:	d462      	bmi.n	8009326 <_dtoa_r+0x5de>
 8009260:	42a6      	cmp	r6, r4
 8009262:	f43f af4d 	beq.w	8009100 <_dtoa_r+0x3b8>
 8009266:	ee27 7b03 	vmul.f64	d7, d7, d3
 800926a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800926e:	e7e0      	b.n	8009232 <_dtoa_r+0x4ea>
 8009270:	4621      	mov	r1, r4
 8009272:	463e      	mov	r6, r7
 8009274:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009278:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800927c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009280:	ee14 2a90 	vmov	r2, s9
 8009284:	3230      	adds	r2, #48	@ 0x30
 8009286:	f806 2b01 	strb.w	r2, [r6], #1
 800928a:	42a6      	cmp	r6, r4
 800928c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009290:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009294:	d119      	bne.n	80092ca <_dtoa_r+0x582>
 8009296:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800929a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800929e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80092a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a6:	dc3e      	bgt.n	8009326 <_dtoa_r+0x5de>
 80092a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80092ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	f57f af24 	bpl.w	8009100 <_dtoa_r+0x3b8>
 80092b8:	460e      	mov	r6, r1
 80092ba:	3901      	subs	r1, #1
 80092bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092c0:	2b30      	cmp	r3, #48	@ 0x30
 80092c2:	d0f9      	beq.n	80092b8 <_dtoa_r+0x570>
 80092c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80092c8:	e758      	b.n	800917c <_dtoa_r+0x434>
 80092ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80092ce:	e7d5      	b.n	800927c <_dtoa_r+0x534>
 80092d0:	d10b      	bne.n	80092ea <_dtoa_r+0x5a2>
 80092d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80092d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80092da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e6:	f2c0 8161 	blt.w	80095ac <_dtoa_r+0x864>
 80092ea:	2400      	movs	r4, #0
 80092ec:	4625      	mov	r5, r4
 80092ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f0:	43db      	mvns	r3, r3
 80092f2:	9304      	str	r3, [sp, #16]
 80092f4:	463e      	mov	r6, r7
 80092f6:	f04f 0800 	mov.w	r8, #0
 80092fa:	4621      	mov	r1, r4
 80092fc:	4648      	mov	r0, r9
 80092fe:	f000 fbb9 	bl	8009a74 <_Bfree>
 8009302:	2d00      	cmp	r5, #0
 8009304:	d0de      	beq.n	80092c4 <_dtoa_r+0x57c>
 8009306:	f1b8 0f00 	cmp.w	r8, #0
 800930a:	d005      	beq.n	8009318 <_dtoa_r+0x5d0>
 800930c:	45a8      	cmp	r8, r5
 800930e:	d003      	beq.n	8009318 <_dtoa_r+0x5d0>
 8009310:	4641      	mov	r1, r8
 8009312:	4648      	mov	r0, r9
 8009314:	f000 fbae 	bl	8009a74 <_Bfree>
 8009318:	4629      	mov	r1, r5
 800931a:	4648      	mov	r0, r9
 800931c:	f000 fbaa 	bl	8009a74 <_Bfree>
 8009320:	e7d0      	b.n	80092c4 <_dtoa_r+0x57c>
 8009322:	f8cd 8010 	str.w	r8, [sp, #16]
 8009326:	4633      	mov	r3, r6
 8009328:	461e      	mov	r6, r3
 800932a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800932e:	2a39      	cmp	r2, #57	@ 0x39
 8009330:	d106      	bne.n	8009340 <_dtoa_r+0x5f8>
 8009332:	429f      	cmp	r7, r3
 8009334:	d1f8      	bne.n	8009328 <_dtoa_r+0x5e0>
 8009336:	9a04      	ldr	r2, [sp, #16]
 8009338:	3201      	adds	r2, #1
 800933a:	9204      	str	r2, [sp, #16]
 800933c:	2230      	movs	r2, #48	@ 0x30
 800933e:	703a      	strb	r2, [r7, #0]
 8009340:	781a      	ldrb	r2, [r3, #0]
 8009342:	3201      	adds	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	e7bd      	b.n	80092c4 <_dtoa_r+0x57c>
 8009348:	ee27 7b04 	vmul.f64	d7, d7, d4
 800934c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009354:	f47f aeef 	bne.w	8009136 <_dtoa_r+0x3ee>
 8009358:	e710      	b.n	800917c <_dtoa_r+0x434>
 800935a:	bf00      	nop
 800935c:	0800c308 	.word	0x0800c308
 8009360:	0800c2e0 	.word	0x0800c2e0
 8009364:	9908      	ldr	r1, [sp, #32]
 8009366:	2900      	cmp	r1, #0
 8009368:	f000 80e3 	beq.w	8009532 <_dtoa_r+0x7ea>
 800936c:	9907      	ldr	r1, [sp, #28]
 800936e:	2901      	cmp	r1, #1
 8009370:	f300 80c8 	bgt.w	8009504 <_dtoa_r+0x7bc>
 8009374:	2d00      	cmp	r5, #0
 8009376:	f000 80c1 	beq.w	80094fc <_dtoa_r+0x7b4>
 800937a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800937e:	9e05      	ldr	r6, [sp, #20]
 8009380:	461c      	mov	r4, r3
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9b05      	ldr	r3, [sp, #20]
 8009386:	4413      	add	r3, r2
 8009388:	9305      	str	r3, [sp, #20]
 800938a:	9b06      	ldr	r3, [sp, #24]
 800938c:	2101      	movs	r1, #1
 800938e:	4413      	add	r3, r2
 8009390:	4648      	mov	r0, r9
 8009392:	9306      	str	r3, [sp, #24]
 8009394:	f000 fc6c 	bl	8009c70 <__i2b>
 8009398:	9b04      	ldr	r3, [sp, #16]
 800939a:	4605      	mov	r5, r0
 800939c:	b166      	cbz	r6, 80093b8 <_dtoa_r+0x670>
 800939e:	9a06      	ldr	r2, [sp, #24]
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	dd09      	ble.n	80093b8 <_dtoa_r+0x670>
 80093a4:	42b2      	cmp	r2, r6
 80093a6:	9905      	ldr	r1, [sp, #20]
 80093a8:	bfa8      	it	ge
 80093aa:	4632      	movge	r2, r6
 80093ac:	1a89      	subs	r1, r1, r2
 80093ae:	9105      	str	r1, [sp, #20]
 80093b0:	9906      	ldr	r1, [sp, #24]
 80093b2:	1ab6      	subs	r6, r6, r2
 80093b4:	1a8a      	subs	r2, r1, r2
 80093b6:	9206      	str	r2, [sp, #24]
 80093b8:	b1fb      	cbz	r3, 80093fa <_dtoa_r+0x6b2>
 80093ba:	9a08      	ldr	r2, [sp, #32]
 80093bc:	2a00      	cmp	r2, #0
 80093be:	f000 80bc 	beq.w	800953a <_dtoa_r+0x7f2>
 80093c2:	b19c      	cbz	r4, 80093ec <_dtoa_r+0x6a4>
 80093c4:	4629      	mov	r1, r5
 80093c6:	4622      	mov	r2, r4
 80093c8:	4648      	mov	r0, r9
 80093ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093cc:	f000 fd10 	bl	8009df0 <__pow5mult>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	4601      	mov	r1, r0
 80093d4:	4605      	mov	r5, r0
 80093d6:	4648      	mov	r0, r9
 80093d8:	f000 fc60 	bl	8009c9c <__multiply>
 80093dc:	9901      	ldr	r1, [sp, #4]
 80093de:	9004      	str	r0, [sp, #16]
 80093e0:	4648      	mov	r0, r9
 80093e2:	f000 fb47 	bl	8009a74 <_Bfree>
 80093e6:	9a04      	ldr	r2, [sp, #16]
 80093e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093ea:	9201      	str	r2, [sp, #4]
 80093ec:	1b1a      	subs	r2, r3, r4
 80093ee:	d004      	beq.n	80093fa <_dtoa_r+0x6b2>
 80093f0:	9901      	ldr	r1, [sp, #4]
 80093f2:	4648      	mov	r0, r9
 80093f4:	f000 fcfc 	bl	8009df0 <__pow5mult>
 80093f8:	9001      	str	r0, [sp, #4]
 80093fa:	2101      	movs	r1, #1
 80093fc:	4648      	mov	r0, r9
 80093fe:	f000 fc37 	bl	8009c70 <__i2b>
 8009402:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009404:	4604      	mov	r4, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 81d0 	beq.w	80097ac <_dtoa_r+0xa64>
 800940c:	461a      	mov	r2, r3
 800940e:	4601      	mov	r1, r0
 8009410:	4648      	mov	r0, r9
 8009412:	f000 fced 	bl	8009df0 <__pow5mult>
 8009416:	9b07      	ldr	r3, [sp, #28]
 8009418:	2b01      	cmp	r3, #1
 800941a:	4604      	mov	r4, r0
 800941c:	f300 8095 	bgt.w	800954a <_dtoa_r+0x802>
 8009420:	9b02      	ldr	r3, [sp, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f040 808b 	bne.w	800953e <_dtoa_r+0x7f6>
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800942e:	2a00      	cmp	r2, #0
 8009430:	f040 8087 	bne.w	8009542 <_dtoa_r+0x7fa>
 8009434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009438:	0d12      	lsrs	r2, r2, #20
 800943a:	0512      	lsls	r2, r2, #20
 800943c:	2a00      	cmp	r2, #0
 800943e:	f000 8082 	beq.w	8009546 <_dtoa_r+0x7fe>
 8009442:	9b05      	ldr	r3, [sp, #20]
 8009444:	3301      	adds	r3, #1
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	9b06      	ldr	r3, [sp, #24]
 800944a:	3301      	adds	r3, #1
 800944c:	9306      	str	r3, [sp, #24]
 800944e:	2301      	movs	r3, #1
 8009450:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 81af 	beq.w	80097b8 <_dtoa_r+0xa70>
 800945a:	6922      	ldr	r2, [r4, #16]
 800945c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009460:	6910      	ldr	r0, [r2, #16]
 8009462:	f000 fbb9 	bl	8009bd8 <__hi0bits>
 8009466:	f1c0 0020 	rsb	r0, r0, #32
 800946a:	9b06      	ldr	r3, [sp, #24]
 800946c:	4418      	add	r0, r3
 800946e:	f010 001f 	ands.w	r0, r0, #31
 8009472:	d076      	beq.n	8009562 <_dtoa_r+0x81a>
 8009474:	f1c0 0220 	rsb	r2, r0, #32
 8009478:	2a04      	cmp	r2, #4
 800947a:	dd69      	ble.n	8009550 <_dtoa_r+0x808>
 800947c:	9b05      	ldr	r3, [sp, #20]
 800947e:	f1c0 001c 	rsb	r0, r0, #28
 8009482:	4403      	add	r3, r0
 8009484:	9305      	str	r3, [sp, #20]
 8009486:	9b06      	ldr	r3, [sp, #24]
 8009488:	4406      	add	r6, r0
 800948a:	4403      	add	r3, r0
 800948c:	9306      	str	r3, [sp, #24]
 800948e:	9b05      	ldr	r3, [sp, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dd05      	ble.n	80094a0 <_dtoa_r+0x758>
 8009494:	9901      	ldr	r1, [sp, #4]
 8009496:	461a      	mov	r2, r3
 8009498:	4648      	mov	r0, r9
 800949a:	f000 fd03 	bl	8009ea4 <__lshift>
 800949e:	9001      	str	r0, [sp, #4]
 80094a0:	9b06      	ldr	r3, [sp, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dd05      	ble.n	80094b2 <_dtoa_r+0x76a>
 80094a6:	4621      	mov	r1, r4
 80094a8:	461a      	mov	r2, r3
 80094aa:	4648      	mov	r0, r9
 80094ac:	f000 fcfa 	bl	8009ea4 <__lshift>
 80094b0:	4604      	mov	r4, r0
 80094b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d056      	beq.n	8009566 <_dtoa_r+0x81e>
 80094b8:	9801      	ldr	r0, [sp, #4]
 80094ba:	4621      	mov	r1, r4
 80094bc:	f000 fd5e 	bl	8009f7c <__mcmp>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	da50      	bge.n	8009566 <_dtoa_r+0x81e>
 80094c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	9901      	ldr	r1, [sp, #4]
 80094cc:	2300      	movs	r3, #0
 80094ce:	220a      	movs	r2, #10
 80094d0:	4648      	mov	r0, r9
 80094d2:	f000 faf1 	bl	8009ab8 <__multadd>
 80094d6:	9b08      	ldr	r3, [sp, #32]
 80094d8:	9001      	str	r0, [sp, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 816e 	beq.w	80097bc <_dtoa_r+0xa74>
 80094e0:	4629      	mov	r1, r5
 80094e2:	2300      	movs	r3, #0
 80094e4:	220a      	movs	r2, #10
 80094e6:	4648      	mov	r0, r9
 80094e8:	f000 fae6 	bl	8009ab8 <__multadd>
 80094ec:	f1bb 0f00 	cmp.w	fp, #0
 80094f0:	4605      	mov	r5, r0
 80094f2:	dc64      	bgt.n	80095be <_dtoa_r+0x876>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	dc3e      	bgt.n	8009578 <_dtoa_r+0x830>
 80094fa:	e060      	b.n	80095be <_dtoa_r+0x876>
 80094fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009502:	e73c      	b.n	800937e <_dtoa_r+0x636>
 8009504:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009508:	42a3      	cmp	r3, r4
 800950a:	bfbf      	itttt	lt
 800950c:	1ae2      	sublt	r2, r4, r3
 800950e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009510:	189b      	addlt	r3, r3, r2
 8009512:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009514:	bfae      	itee	ge
 8009516:	1b1c      	subge	r4, r3, r4
 8009518:	4623      	movlt	r3, r4
 800951a:	2400      	movlt	r4, #0
 800951c:	f1ba 0f00 	cmp.w	sl, #0
 8009520:	bfb5      	itete	lt
 8009522:	9a05      	ldrlt	r2, [sp, #20]
 8009524:	9e05      	ldrge	r6, [sp, #20]
 8009526:	eba2 060a 	sublt.w	r6, r2, sl
 800952a:	4652      	movge	r2, sl
 800952c:	bfb8      	it	lt
 800952e:	2200      	movlt	r2, #0
 8009530:	e727      	b.n	8009382 <_dtoa_r+0x63a>
 8009532:	9e05      	ldr	r6, [sp, #20]
 8009534:	9d08      	ldr	r5, [sp, #32]
 8009536:	461c      	mov	r4, r3
 8009538:	e730      	b.n	800939c <_dtoa_r+0x654>
 800953a:	461a      	mov	r2, r3
 800953c:	e758      	b.n	80093f0 <_dtoa_r+0x6a8>
 800953e:	2300      	movs	r3, #0
 8009540:	e786      	b.n	8009450 <_dtoa_r+0x708>
 8009542:	9b02      	ldr	r3, [sp, #8]
 8009544:	e784      	b.n	8009450 <_dtoa_r+0x708>
 8009546:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009548:	e783      	b.n	8009452 <_dtoa_r+0x70a>
 800954a:	2300      	movs	r3, #0
 800954c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800954e:	e784      	b.n	800945a <_dtoa_r+0x712>
 8009550:	d09d      	beq.n	800948e <_dtoa_r+0x746>
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	321c      	adds	r2, #28
 8009556:	4413      	add	r3, r2
 8009558:	9305      	str	r3, [sp, #20]
 800955a:	9b06      	ldr	r3, [sp, #24]
 800955c:	4416      	add	r6, r2
 800955e:	4413      	add	r3, r2
 8009560:	e794      	b.n	800948c <_dtoa_r+0x744>
 8009562:	4602      	mov	r2, r0
 8009564:	e7f5      	b.n	8009552 <_dtoa_r+0x80a>
 8009566:	f1ba 0f00 	cmp.w	sl, #0
 800956a:	f8cd 8010 	str.w	r8, [sp, #16]
 800956e:	46d3      	mov	fp, sl
 8009570:	dc21      	bgt.n	80095b6 <_dtoa_r+0x86e>
 8009572:	9b07      	ldr	r3, [sp, #28]
 8009574:	2b02      	cmp	r3, #2
 8009576:	dd1e      	ble.n	80095b6 <_dtoa_r+0x86e>
 8009578:	f1bb 0f00 	cmp.w	fp, #0
 800957c:	f47f aeb7 	bne.w	80092ee <_dtoa_r+0x5a6>
 8009580:	4621      	mov	r1, r4
 8009582:	465b      	mov	r3, fp
 8009584:	2205      	movs	r2, #5
 8009586:	4648      	mov	r0, r9
 8009588:	f000 fa96 	bl	8009ab8 <__multadd>
 800958c:	4601      	mov	r1, r0
 800958e:	4604      	mov	r4, r0
 8009590:	9801      	ldr	r0, [sp, #4]
 8009592:	f000 fcf3 	bl	8009f7c <__mcmp>
 8009596:	2800      	cmp	r0, #0
 8009598:	f77f aea9 	ble.w	80092ee <_dtoa_r+0x5a6>
 800959c:	463e      	mov	r6, r7
 800959e:	2331      	movs	r3, #49	@ 0x31
 80095a0:	f806 3b01 	strb.w	r3, [r6], #1
 80095a4:	9b04      	ldr	r3, [sp, #16]
 80095a6:	3301      	adds	r3, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	e6a4      	b.n	80092f6 <_dtoa_r+0x5ae>
 80095ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80095b0:	4654      	mov	r4, sl
 80095b2:	4625      	mov	r5, r4
 80095b4:	e7f2      	b.n	800959c <_dtoa_r+0x854>
 80095b6:	9b08      	ldr	r3, [sp, #32]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 8103 	beq.w	80097c4 <_dtoa_r+0xa7c>
 80095be:	2e00      	cmp	r6, #0
 80095c0:	dd05      	ble.n	80095ce <_dtoa_r+0x886>
 80095c2:	4629      	mov	r1, r5
 80095c4:	4632      	mov	r2, r6
 80095c6:	4648      	mov	r0, r9
 80095c8:	f000 fc6c 	bl	8009ea4 <__lshift>
 80095cc:	4605      	mov	r5, r0
 80095ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d058      	beq.n	8009686 <_dtoa_r+0x93e>
 80095d4:	6869      	ldr	r1, [r5, #4]
 80095d6:	4648      	mov	r0, r9
 80095d8:	f000 fa0c 	bl	80099f4 <_Balloc>
 80095dc:	4606      	mov	r6, r0
 80095de:	b928      	cbnz	r0, 80095ec <_dtoa_r+0x8a4>
 80095e0:	4b82      	ldr	r3, [pc, #520]	@ (80097ec <_dtoa_r+0xaa4>)
 80095e2:	4602      	mov	r2, r0
 80095e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80095e8:	f7ff bbc7 	b.w	8008d7a <_dtoa_r+0x32>
 80095ec:	692a      	ldr	r2, [r5, #16]
 80095ee:	3202      	adds	r2, #2
 80095f0:	0092      	lsls	r2, r2, #2
 80095f2:	f105 010c 	add.w	r1, r5, #12
 80095f6:	300c      	adds	r0, #12
 80095f8:	f001 ff1e 	bl	800b438 <memcpy>
 80095fc:	2201      	movs	r2, #1
 80095fe:	4631      	mov	r1, r6
 8009600:	4648      	mov	r0, r9
 8009602:	f000 fc4f 	bl	8009ea4 <__lshift>
 8009606:	1c7b      	adds	r3, r7, #1
 8009608:	9305      	str	r3, [sp, #20]
 800960a:	eb07 030b 	add.w	r3, r7, fp
 800960e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009610:	9b02      	ldr	r3, [sp, #8]
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	46a8      	mov	r8, r5
 8009618:	9308      	str	r3, [sp, #32]
 800961a:	4605      	mov	r5, r0
 800961c:	9b05      	ldr	r3, [sp, #20]
 800961e:	9801      	ldr	r0, [sp, #4]
 8009620:	4621      	mov	r1, r4
 8009622:	f103 3bff 	add.w	fp, r3, #4294967295
 8009626:	f7ff fb07 	bl	8008c38 <quorem>
 800962a:	4641      	mov	r1, r8
 800962c:	9002      	str	r0, [sp, #8]
 800962e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009632:	9801      	ldr	r0, [sp, #4]
 8009634:	f000 fca2 	bl	8009f7c <__mcmp>
 8009638:	462a      	mov	r2, r5
 800963a:	9006      	str	r0, [sp, #24]
 800963c:	4621      	mov	r1, r4
 800963e:	4648      	mov	r0, r9
 8009640:	f000 fcb8 	bl	8009fb4 <__mdiff>
 8009644:	68c2      	ldr	r2, [r0, #12]
 8009646:	4606      	mov	r6, r0
 8009648:	b9fa      	cbnz	r2, 800968a <_dtoa_r+0x942>
 800964a:	4601      	mov	r1, r0
 800964c:	9801      	ldr	r0, [sp, #4]
 800964e:	f000 fc95 	bl	8009f7c <__mcmp>
 8009652:	4602      	mov	r2, r0
 8009654:	4631      	mov	r1, r6
 8009656:	4648      	mov	r0, r9
 8009658:	920a      	str	r2, [sp, #40]	@ 0x28
 800965a:	f000 fa0b 	bl	8009a74 <_Bfree>
 800965e:	9b07      	ldr	r3, [sp, #28]
 8009660:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009662:	9e05      	ldr	r6, [sp, #20]
 8009664:	ea43 0102 	orr.w	r1, r3, r2
 8009668:	9b08      	ldr	r3, [sp, #32]
 800966a:	4319      	orrs	r1, r3
 800966c:	d10f      	bne.n	800968e <_dtoa_r+0x946>
 800966e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009672:	d028      	beq.n	80096c6 <_dtoa_r+0x97e>
 8009674:	9b06      	ldr	r3, [sp, #24]
 8009676:	2b00      	cmp	r3, #0
 8009678:	dd02      	ble.n	8009680 <_dtoa_r+0x938>
 800967a:	9b02      	ldr	r3, [sp, #8]
 800967c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009680:	f88b a000 	strb.w	sl, [fp]
 8009684:	e639      	b.n	80092fa <_dtoa_r+0x5b2>
 8009686:	4628      	mov	r0, r5
 8009688:	e7bd      	b.n	8009606 <_dtoa_r+0x8be>
 800968a:	2201      	movs	r2, #1
 800968c:	e7e2      	b.n	8009654 <_dtoa_r+0x90c>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	db04      	blt.n	800969e <_dtoa_r+0x956>
 8009694:	9907      	ldr	r1, [sp, #28]
 8009696:	430b      	orrs	r3, r1
 8009698:	9908      	ldr	r1, [sp, #32]
 800969a:	430b      	orrs	r3, r1
 800969c:	d120      	bne.n	80096e0 <_dtoa_r+0x998>
 800969e:	2a00      	cmp	r2, #0
 80096a0:	ddee      	ble.n	8009680 <_dtoa_r+0x938>
 80096a2:	9901      	ldr	r1, [sp, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	4648      	mov	r0, r9
 80096a8:	f000 fbfc 	bl	8009ea4 <__lshift>
 80096ac:	4621      	mov	r1, r4
 80096ae:	9001      	str	r0, [sp, #4]
 80096b0:	f000 fc64 	bl	8009f7c <__mcmp>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	dc03      	bgt.n	80096c0 <_dtoa_r+0x978>
 80096b8:	d1e2      	bne.n	8009680 <_dtoa_r+0x938>
 80096ba:	f01a 0f01 	tst.w	sl, #1
 80096be:	d0df      	beq.n	8009680 <_dtoa_r+0x938>
 80096c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80096c4:	d1d9      	bne.n	800967a <_dtoa_r+0x932>
 80096c6:	2339      	movs	r3, #57	@ 0x39
 80096c8:	f88b 3000 	strb.w	r3, [fp]
 80096cc:	4633      	mov	r3, r6
 80096ce:	461e      	mov	r6, r3
 80096d0:	3b01      	subs	r3, #1
 80096d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80096d6:	2a39      	cmp	r2, #57	@ 0x39
 80096d8:	d053      	beq.n	8009782 <_dtoa_r+0xa3a>
 80096da:	3201      	adds	r2, #1
 80096dc:	701a      	strb	r2, [r3, #0]
 80096de:	e60c      	b.n	80092fa <_dtoa_r+0x5b2>
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	dd07      	ble.n	80096f4 <_dtoa_r+0x9ac>
 80096e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80096e8:	d0ed      	beq.n	80096c6 <_dtoa_r+0x97e>
 80096ea:	f10a 0301 	add.w	r3, sl, #1
 80096ee:	f88b 3000 	strb.w	r3, [fp]
 80096f2:	e602      	b.n	80092fa <_dtoa_r+0x5b2>
 80096f4:	9b05      	ldr	r3, [sp, #20]
 80096f6:	9a05      	ldr	r2, [sp, #20]
 80096f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80096fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096fe:	4293      	cmp	r3, r2
 8009700:	d029      	beq.n	8009756 <_dtoa_r+0xa0e>
 8009702:	9901      	ldr	r1, [sp, #4]
 8009704:	2300      	movs	r3, #0
 8009706:	220a      	movs	r2, #10
 8009708:	4648      	mov	r0, r9
 800970a:	f000 f9d5 	bl	8009ab8 <__multadd>
 800970e:	45a8      	cmp	r8, r5
 8009710:	9001      	str	r0, [sp, #4]
 8009712:	f04f 0300 	mov.w	r3, #0
 8009716:	f04f 020a 	mov.w	r2, #10
 800971a:	4641      	mov	r1, r8
 800971c:	4648      	mov	r0, r9
 800971e:	d107      	bne.n	8009730 <_dtoa_r+0x9e8>
 8009720:	f000 f9ca 	bl	8009ab8 <__multadd>
 8009724:	4680      	mov	r8, r0
 8009726:	4605      	mov	r5, r0
 8009728:	9b05      	ldr	r3, [sp, #20]
 800972a:	3301      	adds	r3, #1
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	e775      	b.n	800961c <_dtoa_r+0x8d4>
 8009730:	f000 f9c2 	bl	8009ab8 <__multadd>
 8009734:	4629      	mov	r1, r5
 8009736:	4680      	mov	r8, r0
 8009738:	2300      	movs	r3, #0
 800973a:	220a      	movs	r2, #10
 800973c:	4648      	mov	r0, r9
 800973e:	f000 f9bb 	bl	8009ab8 <__multadd>
 8009742:	4605      	mov	r5, r0
 8009744:	e7f0      	b.n	8009728 <_dtoa_r+0x9e0>
 8009746:	f1bb 0f00 	cmp.w	fp, #0
 800974a:	bfcc      	ite	gt
 800974c:	465e      	movgt	r6, fp
 800974e:	2601      	movle	r6, #1
 8009750:	443e      	add	r6, r7
 8009752:	f04f 0800 	mov.w	r8, #0
 8009756:	9901      	ldr	r1, [sp, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	4648      	mov	r0, r9
 800975c:	f000 fba2 	bl	8009ea4 <__lshift>
 8009760:	4621      	mov	r1, r4
 8009762:	9001      	str	r0, [sp, #4]
 8009764:	f000 fc0a 	bl	8009f7c <__mcmp>
 8009768:	2800      	cmp	r0, #0
 800976a:	dcaf      	bgt.n	80096cc <_dtoa_r+0x984>
 800976c:	d102      	bne.n	8009774 <_dtoa_r+0xa2c>
 800976e:	f01a 0f01 	tst.w	sl, #1
 8009772:	d1ab      	bne.n	80096cc <_dtoa_r+0x984>
 8009774:	4633      	mov	r3, r6
 8009776:	461e      	mov	r6, r3
 8009778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800977c:	2a30      	cmp	r2, #48	@ 0x30
 800977e:	d0fa      	beq.n	8009776 <_dtoa_r+0xa2e>
 8009780:	e5bb      	b.n	80092fa <_dtoa_r+0x5b2>
 8009782:	429f      	cmp	r7, r3
 8009784:	d1a3      	bne.n	80096ce <_dtoa_r+0x986>
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	3301      	adds	r3, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	2331      	movs	r3, #49	@ 0x31
 800978e:	703b      	strb	r3, [r7, #0]
 8009790:	e5b3      	b.n	80092fa <_dtoa_r+0x5b2>
 8009792:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009794:	4f16      	ldr	r7, [pc, #88]	@ (80097f0 <_dtoa_r+0xaa8>)
 8009796:	b11b      	cbz	r3, 80097a0 <_dtoa_r+0xa58>
 8009798:	f107 0308 	add.w	r3, r7, #8
 800979c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4638      	mov	r0, r7
 80097a2:	b011      	add	sp, #68	@ 0x44
 80097a4:	ecbd 8b02 	vpop	{d8}
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	f77f ae36 	ble.w	8009420 <_dtoa_r+0x6d8>
 80097b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097b8:	2001      	movs	r0, #1
 80097ba:	e656      	b.n	800946a <_dtoa_r+0x722>
 80097bc:	f1bb 0f00 	cmp.w	fp, #0
 80097c0:	f77f aed7 	ble.w	8009572 <_dtoa_r+0x82a>
 80097c4:	463e      	mov	r6, r7
 80097c6:	9801      	ldr	r0, [sp, #4]
 80097c8:	4621      	mov	r1, r4
 80097ca:	f7ff fa35 	bl	8008c38 <quorem>
 80097ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80097d2:	f806 ab01 	strb.w	sl, [r6], #1
 80097d6:	1bf2      	subs	r2, r6, r7
 80097d8:	4593      	cmp	fp, r2
 80097da:	ddb4      	ble.n	8009746 <_dtoa_r+0x9fe>
 80097dc:	9901      	ldr	r1, [sp, #4]
 80097de:	2300      	movs	r3, #0
 80097e0:	220a      	movs	r2, #10
 80097e2:	4648      	mov	r0, r9
 80097e4:	f000 f968 	bl	8009ab8 <__multadd>
 80097e8:	9001      	str	r0, [sp, #4]
 80097ea:	e7ec      	b.n	80097c6 <_dtoa_r+0xa7e>
 80097ec:	0800c269 	.word	0x0800c269
 80097f0:	0800c1ed 	.word	0x0800c1ed

080097f4 <_free_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4605      	mov	r5, r0
 80097f8:	2900      	cmp	r1, #0
 80097fa:	d041      	beq.n	8009880 <_free_r+0x8c>
 80097fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009800:	1f0c      	subs	r4, r1, #4
 8009802:	2b00      	cmp	r3, #0
 8009804:	bfb8      	it	lt
 8009806:	18e4      	addlt	r4, r4, r3
 8009808:	f000 f8e8 	bl	80099dc <__malloc_lock>
 800980c:	4a1d      	ldr	r2, [pc, #116]	@ (8009884 <_free_r+0x90>)
 800980e:	6813      	ldr	r3, [r2, #0]
 8009810:	b933      	cbnz	r3, 8009820 <_free_r+0x2c>
 8009812:	6063      	str	r3, [r4, #4]
 8009814:	6014      	str	r4, [r2, #0]
 8009816:	4628      	mov	r0, r5
 8009818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800981c:	f000 b8e4 	b.w	80099e8 <__malloc_unlock>
 8009820:	42a3      	cmp	r3, r4
 8009822:	d908      	bls.n	8009836 <_free_r+0x42>
 8009824:	6820      	ldr	r0, [r4, #0]
 8009826:	1821      	adds	r1, r4, r0
 8009828:	428b      	cmp	r3, r1
 800982a:	bf01      	itttt	eq
 800982c:	6819      	ldreq	r1, [r3, #0]
 800982e:	685b      	ldreq	r3, [r3, #4]
 8009830:	1809      	addeq	r1, r1, r0
 8009832:	6021      	streq	r1, [r4, #0]
 8009834:	e7ed      	b.n	8009812 <_free_r+0x1e>
 8009836:	461a      	mov	r2, r3
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	b10b      	cbz	r3, 8009840 <_free_r+0x4c>
 800983c:	42a3      	cmp	r3, r4
 800983e:	d9fa      	bls.n	8009836 <_free_r+0x42>
 8009840:	6811      	ldr	r1, [r2, #0]
 8009842:	1850      	adds	r0, r2, r1
 8009844:	42a0      	cmp	r0, r4
 8009846:	d10b      	bne.n	8009860 <_free_r+0x6c>
 8009848:	6820      	ldr	r0, [r4, #0]
 800984a:	4401      	add	r1, r0
 800984c:	1850      	adds	r0, r2, r1
 800984e:	4283      	cmp	r3, r0
 8009850:	6011      	str	r1, [r2, #0]
 8009852:	d1e0      	bne.n	8009816 <_free_r+0x22>
 8009854:	6818      	ldr	r0, [r3, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	6053      	str	r3, [r2, #4]
 800985a:	4408      	add	r0, r1
 800985c:	6010      	str	r0, [r2, #0]
 800985e:	e7da      	b.n	8009816 <_free_r+0x22>
 8009860:	d902      	bls.n	8009868 <_free_r+0x74>
 8009862:	230c      	movs	r3, #12
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	e7d6      	b.n	8009816 <_free_r+0x22>
 8009868:	6820      	ldr	r0, [r4, #0]
 800986a:	1821      	adds	r1, r4, r0
 800986c:	428b      	cmp	r3, r1
 800986e:	bf04      	itt	eq
 8009870:	6819      	ldreq	r1, [r3, #0]
 8009872:	685b      	ldreq	r3, [r3, #4]
 8009874:	6063      	str	r3, [r4, #4]
 8009876:	bf04      	itt	eq
 8009878:	1809      	addeq	r1, r1, r0
 800987a:	6021      	streq	r1, [r4, #0]
 800987c:	6054      	str	r4, [r2, #4]
 800987e:	e7ca      	b.n	8009816 <_free_r+0x22>
 8009880:	bd38      	pop	{r3, r4, r5, pc}
 8009882:	bf00      	nop
 8009884:	2400059c 	.word	0x2400059c

08009888 <malloc>:
 8009888:	4b02      	ldr	r3, [pc, #8]	@ (8009894 <malloc+0xc>)
 800988a:	4601      	mov	r1, r0
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	f000 b825 	b.w	80098dc <_malloc_r>
 8009892:	bf00      	nop
 8009894:	2400001c 	.word	0x2400001c

08009898 <sbrk_aligned>:
 8009898:	b570      	push	{r4, r5, r6, lr}
 800989a:	4e0f      	ldr	r6, [pc, #60]	@ (80098d8 <sbrk_aligned+0x40>)
 800989c:	460c      	mov	r4, r1
 800989e:	6831      	ldr	r1, [r6, #0]
 80098a0:	4605      	mov	r5, r0
 80098a2:	b911      	cbnz	r1, 80098aa <sbrk_aligned+0x12>
 80098a4:	f001 fdb8 	bl	800b418 <_sbrk_r>
 80098a8:	6030      	str	r0, [r6, #0]
 80098aa:	4621      	mov	r1, r4
 80098ac:	4628      	mov	r0, r5
 80098ae:	f001 fdb3 	bl	800b418 <_sbrk_r>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	d103      	bne.n	80098be <sbrk_aligned+0x26>
 80098b6:	f04f 34ff 	mov.w	r4, #4294967295
 80098ba:	4620      	mov	r0, r4
 80098bc:	bd70      	pop	{r4, r5, r6, pc}
 80098be:	1cc4      	adds	r4, r0, #3
 80098c0:	f024 0403 	bic.w	r4, r4, #3
 80098c4:	42a0      	cmp	r0, r4
 80098c6:	d0f8      	beq.n	80098ba <sbrk_aligned+0x22>
 80098c8:	1a21      	subs	r1, r4, r0
 80098ca:	4628      	mov	r0, r5
 80098cc:	f001 fda4 	bl	800b418 <_sbrk_r>
 80098d0:	3001      	adds	r0, #1
 80098d2:	d1f2      	bne.n	80098ba <sbrk_aligned+0x22>
 80098d4:	e7ef      	b.n	80098b6 <sbrk_aligned+0x1e>
 80098d6:	bf00      	nop
 80098d8:	24000598 	.word	0x24000598

080098dc <_malloc_r>:
 80098dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e0:	1ccd      	adds	r5, r1, #3
 80098e2:	f025 0503 	bic.w	r5, r5, #3
 80098e6:	3508      	adds	r5, #8
 80098e8:	2d0c      	cmp	r5, #12
 80098ea:	bf38      	it	cc
 80098ec:	250c      	movcc	r5, #12
 80098ee:	2d00      	cmp	r5, #0
 80098f0:	4606      	mov	r6, r0
 80098f2:	db01      	blt.n	80098f8 <_malloc_r+0x1c>
 80098f4:	42a9      	cmp	r1, r5
 80098f6:	d904      	bls.n	8009902 <_malloc_r+0x26>
 80098f8:	230c      	movs	r3, #12
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	2000      	movs	r0, #0
 80098fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099d8 <_malloc_r+0xfc>
 8009906:	f000 f869 	bl	80099dc <__malloc_lock>
 800990a:	f8d8 3000 	ldr.w	r3, [r8]
 800990e:	461c      	mov	r4, r3
 8009910:	bb44      	cbnz	r4, 8009964 <_malloc_r+0x88>
 8009912:	4629      	mov	r1, r5
 8009914:	4630      	mov	r0, r6
 8009916:	f7ff ffbf 	bl	8009898 <sbrk_aligned>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	4604      	mov	r4, r0
 800991e:	d158      	bne.n	80099d2 <_malloc_r+0xf6>
 8009920:	f8d8 4000 	ldr.w	r4, [r8]
 8009924:	4627      	mov	r7, r4
 8009926:	2f00      	cmp	r7, #0
 8009928:	d143      	bne.n	80099b2 <_malloc_r+0xd6>
 800992a:	2c00      	cmp	r4, #0
 800992c:	d04b      	beq.n	80099c6 <_malloc_r+0xea>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	4639      	mov	r1, r7
 8009932:	4630      	mov	r0, r6
 8009934:	eb04 0903 	add.w	r9, r4, r3
 8009938:	f001 fd6e 	bl	800b418 <_sbrk_r>
 800993c:	4581      	cmp	r9, r0
 800993e:	d142      	bne.n	80099c6 <_malloc_r+0xea>
 8009940:	6821      	ldr	r1, [r4, #0]
 8009942:	1a6d      	subs	r5, r5, r1
 8009944:	4629      	mov	r1, r5
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ffa6 	bl	8009898 <sbrk_aligned>
 800994c:	3001      	adds	r0, #1
 800994e:	d03a      	beq.n	80099c6 <_malloc_r+0xea>
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	442b      	add	r3, r5
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	f8d8 3000 	ldr.w	r3, [r8]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	bb62      	cbnz	r2, 80099b8 <_malloc_r+0xdc>
 800995e:	f8c8 7000 	str.w	r7, [r8]
 8009962:	e00f      	b.n	8009984 <_malloc_r+0xa8>
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	1b52      	subs	r2, r2, r5
 8009968:	d420      	bmi.n	80099ac <_malloc_r+0xd0>
 800996a:	2a0b      	cmp	r2, #11
 800996c:	d917      	bls.n	800999e <_malloc_r+0xc2>
 800996e:	1961      	adds	r1, r4, r5
 8009970:	42a3      	cmp	r3, r4
 8009972:	6025      	str	r5, [r4, #0]
 8009974:	bf18      	it	ne
 8009976:	6059      	strne	r1, [r3, #4]
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	bf08      	it	eq
 800997c:	f8c8 1000 	streq.w	r1, [r8]
 8009980:	5162      	str	r2, [r4, r5]
 8009982:	604b      	str	r3, [r1, #4]
 8009984:	4630      	mov	r0, r6
 8009986:	f000 f82f 	bl	80099e8 <__malloc_unlock>
 800998a:	f104 000b 	add.w	r0, r4, #11
 800998e:	1d23      	adds	r3, r4, #4
 8009990:	f020 0007 	bic.w	r0, r0, #7
 8009994:	1ac2      	subs	r2, r0, r3
 8009996:	bf1c      	itt	ne
 8009998:	1a1b      	subne	r3, r3, r0
 800999a:	50a3      	strne	r3, [r4, r2]
 800999c:	e7af      	b.n	80098fe <_malloc_r+0x22>
 800999e:	6862      	ldr	r2, [r4, #4]
 80099a0:	42a3      	cmp	r3, r4
 80099a2:	bf0c      	ite	eq
 80099a4:	f8c8 2000 	streq.w	r2, [r8]
 80099a8:	605a      	strne	r2, [r3, #4]
 80099aa:	e7eb      	b.n	8009984 <_malloc_r+0xa8>
 80099ac:	4623      	mov	r3, r4
 80099ae:	6864      	ldr	r4, [r4, #4]
 80099b0:	e7ae      	b.n	8009910 <_malloc_r+0x34>
 80099b2:	463c      	mov	r4, r7
 80099b4:	687f      	ldr	r7, [r7, #4]
 80099b6:	e7b6      	b.n	8009926 <_malloc_r+0x4a>
 80099b8:	461a      	mov	r2, r3
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	42a3      	cmp	r3, r4
 80099be:	d1fb      	bne.n	80099b8 <_malloc_r+0xdc>
 80099c0:	2300      	movs	r3, #0
 80099c2:	6053      	str	r3, [r2, #4]
 80099c4:	e7de      	b.n	8009984 <_malloc_r+0xa8>
 80099c6:	230c      	movs	r3, #12
 80099c8:	6033      	str	r3, [r6, #0]
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f80c 	bl	80099e8 <__malloc_unlock>
 80099d0:	e794      	b.n	80098fc <_malloc_r+0x20>
 80099d2:	6005      	str	r5, [r0, #0]
 80099d4:	e7d6      	b.n	8009984 <_malloc_r+0xa8>
 80099d6:	bf00      	nop
 80099d8:	2400059c 	.word	0x2400059c

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	@ (80099e4 <__malloc_lock+0x8>)
 80099de:	f7ff b922 	b.w	8008c26 <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	24000594 	.word	0x24000594

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	@ (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f7ff b91d 	b.w	8008c28 <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	24000594 	.word	0x24000594

080099f4 <_Balloc>:
 80099f4:	b570      	push	{r4, r5, r6, lr}
 80099f6:	69c6      	ldr	r6, [r0, #28]
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	b976      	cbnz	r6, 8009a1c <_Balloc+0x28>
 80099fe:	2010      	movs	r0, #16
 8009a00:	f7ff ff42 	bl	8009888 <malloc>
 8009a04:	4602      	mov	r2, r0
 8009a06:	61e0      	str	r0, [r4, #28]
 8009a08:	b920      	cbnz	r0, 8009a14 <_Balloc+0x20>
 8009a0a:	4b18      	ldr	r3, [pc, #96]	@ (8009a6c <_Balloc+0x78>)
 8009a0c:	4818      	ldr	r0, [pc, #96]	@ (8009a70 <_Balloc+0x7c>)
 8009a0e:	216b      	movs	r1, #107	@ 0x6b
 8009a10:	f001 fd2a 	bl	800b468 <__assert_func>
 8009a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a18:	6006      	str	r6, [r0, #0]
 8009a1a:	60c6      	str	r6, [r0, #12]
 8009a1c:	69e6      	ldr	r6, [r4, #28]
 8009a1e:	68f3      	ldr	r3, [r6, #12]
 8009a20:	b183      	cbz	r3, 8009a44 <_Balloc+0x50>
 8009a22:	69e3      	ldr	r3, [r4, #28]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a2a:	b9b8      	cbnz	r0, 8009a5c <_Balloc+0x68>
 8009a2c:	2101      	movs	r1, #1
 8009a2e:	fa01 f605 	lsl.w	r6, r1, r5
 8009a32:	1d72      	adds	r2, r6, #5
 8009a34:	0092      	lsls	r2, r2, #2
 8009a36:	4620      	mov	r0, r4
 8009a38:	f001 fd34 	bl	800b4a4 <_calloc_r>
 8009a3c:	b160      	cbz	r0, 8009a58 <_Balloc+0x64>
 8009a3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a42:	e00e      	b.n	8009a62 <_Balloc+0x6e>
 8009a44:	2221      	movs	r2, #33	@ 0x21
 8009a46:	2104      	movs	r1, #4
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f001 fd2b 	bl	800b4a4 <_calloc_r>
 8009a4e:	69e3      	ldr	r3, [r4, #28]
 8009a50:	60f0      	str	r0, [r6, #12]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e4      	bne.n	8009a22 <_Balloc+0x2e>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	6802      	ldr	r2, [r0, #0]
 8009a5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a62:	2300      	movs	r3, #0
 8009a64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a68:	e7f7      	b.n	8009a5a <_Balloc+0x66>
 8009a6a:	bf00      	nop
 8009a6c:	0800c1fa 	.word	0x0800c1fa
 8009a70:	0800c27a 	.word	0x0800c27a

08009a74 <_Bfree>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	69c6      	ldr	r6, [r0, #28]
 8009a78:	4605      	mov	r5, r0
 8009a7a:	460c      	mov	r4, r1
 8009a7c:	b976      	cbnz	r6, 8009a9c <_Bfree+0x28>
 8009a7e:	2010      	movs	r0, #16
 8009a80:	f7ff ff02 	bl	8009888 <malloc>
 8009a84:	4602      	mov	r2, r0
 8009a86:	61e8      	str	r0, [r5, #28]
 8009a88:	b920      	cbnz	r0, 8009a94 <_Bfree+0x20>
 8009a8a:	4b09      	ldr	r3, [pc, #36]	@ (8009ab0 <_Bfree+0x3c>)
 8009a8c:	4809      	ldr	r0, [pc, #36]	@ (8009ab4 <_Bfree+0x40>)
 8009a8e:	218f      	movs	r1, #143	@ 0x8f
 8009a90:	f001 fcea 	bl	800b468 <__assert_func>
 8009a94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a98:	6006      	str	r6, [r0, #0]
 8009a9a:	60c6      	str	r6, [r0, #12]
 8009a9c:	b13c      	cbz	r4, 8009aae <_Bfree+0x3a>
 8009a9e:	69eb      	ldr	r3, [r5, #28]
 8009aa0:	6862      	ldr	r2, [r4, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009aa8:	6021      	str	r1, [r4, #0]
 8009aaa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	0800c1fa 	.word	0x0800c1fa
 8009ab4:	0800c27a 	.word	0x0800c27a

08009ab8 <__multadd>:
 8009ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009abc:	690d      	ldr	r5, [r1, #16]
 8009abe:	4607      	mov	r7, r0
 8009ac0:	460c      	mov	r4, r1
 8009ac2:	461e      	mov	r6, r3
 8009ac4:	f101 0c14 	add.w	ip, r1, #20
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f8dc 3000 	ldr.w	r3, [ip]
 8009ace:	b299      	uxth	r1, r3
 8009ad0:	fb02 6101 	mla	r1, r2, r1, r6
 8009ad4:	0c1e      	lsrs	r6, r3, #16
 8009ad6:	0c0b      	lsrs	r3, r1, #16
 8009ad8:	fb02 3306 	mla	r3, r2, r6, r3
 8009adc:	b289      	uxth	r1, r1
 8009ade:	3001      	adds	r0, #1
 8009ae0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ae4:	4285      	cmp	r5, r0
 8009ae6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aee:	dcec      	bgt.n	8009aca <__multadd+0x12>
 8009af0:	b30e      	cbz	r6, 8009b36 <__multadd+0x7e>
 8009af2:	68a3      	ldr	r3, [r4, #8]
 8009af4:	42ab      	cmp	r3, r5
 8009af6:	dc19      	bgt.n	8009b2c <__multadd+0x74>
 8009af8:	6861      	ldr	r1, [r4, #4]
 8009afa:	4638      	mov	r0, r7
 8009afc:	3101      	adds	r1, #1
 8009afe:	f7ff ff79 	bl	80099f4 <_Balloc>
 8009b02:	4680      	mov	r8, r0
 8009b04:	b928      	cbnz	r0, 8009b12 <__multadd+0x5a>
 8009b06:	4602      	mov	r2, r0
 8009b08:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <__multadd+0x84>)
 8009b0a:	480d      	ldr	r0, [pc, #52]	@ (8009b40 <__multadd+0x88>)
 8009b0c:	21ba      	movs	r1, #186	@ 0xba
 8009b0e:	f001 fcab 	bl	800b468 <__assert_func>
 8009b12:	6922      	ldr	r2, [r4, #16]
 8009b14:	3202      	adds	r2, #2
 8009b16:	f104 010c 	add.w	r1, r4, #12
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	300c      	adds	r0, #12
 8009b1e:	f001 fc8b 	bl	800b438 <memcpy>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4638      	mov	r0, r7
 8009b26:	f7ff ffa5 	bl	8009a74 <_Bfree>
 8009b2a:	4644      	mov	r4, r8
 8009b2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b30:	3501      	adds	r5, #1
 8009b32:	615e      	str	r6, [r3, #20]
 8009b34:	6125      	str	r5, [r4, #16]
 8009b36:	4620      	mov	r0, r4
 8009b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b3c:	0800c269 	.word	0x0800c269
 8009b40:	0800c27a 	.word	0x0800c27a

08009b44 <__s2b>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	460c      	mov	r4, r1
 8009b4a:	4615      	mov	r5, r2
 8009b4c:	461f      	mov	r7, r3
 8009b4e:	2209      	movs	r2, #9
 8009b50:	3308      	adds	r3, #8
 8009b52:	4606      	mov	r6, r0
 8009b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b58:	2100      	movs	r1, #0
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	db09      	blt.n	8009b74 <__s2b+0x30>
 8009b60:	4630      	mov	r0, r6
 8009b62:	f7ff ff47 	bl	80099f4 <_Balloc>
 8009b66:	b940      	cbnz	r0, 8009b7a <__s2b+0x36>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	4b19      	ldr	r3, [pc, #100]	@ (8009bd0 <__s2b+0x8c>)
 8009b6c:	4819      	ldr	r0, [pc, #100]	@ (8009bd4 <__s2b+0x90>)
 8009b6e:	21d3      	movs	r1, #211	@ 0xd3
 8009b70:	f001 fc7a 	bl	800b468 <__assert_func>
 8009b74:	0052      	lsls	r2, r2, #1
 8009b76:	3101      	adds	r1, #1
 8009b78:	e7f0      	b.n	8009b5c <__s2b+0x18>
 8009b7a:	9b08      	ldr	r3, [sp, #32]
 8009b7c:	6143      	str	r3, [r0, #20]
 8009b7e:	2d09      	cmp	r5, #9
 8009b80:	f04f 0301 	mov.w	r3, #1
 8009b84:	6103      	str	r3, [r0, #16]
 8009b86:	dd16      	ble.n	8009bb6 <__s2b+0x72>
 8009b88:	f104 0909 	add.w	r9, r4, #9
 8009b8c:	46c8      	mov	r8, r9
 8009b8e:	442c      	add	r4, r5
 8009b90:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b94:	4601      	mov	r1, r0
 8009b96:	3b30      	subs	r3, #48	@ 0x30
 8009b98:	220a      	movs	r2, #10
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ff8c 	bl	8009ab8 <__multadd>
 8009ba0:	45a0      	cmp	r8, r4
 8009ba2:	d1f5      	bne.n	8009b90 <__s2b+0x4c>
 8009ba4:	f1a5 0408 	sub.w	r4, r5, #8
 8009ba8:	444c      	add	r4, r9
 8009baa:	1b2d      	subs	r5, r5, r4
 8009bac:	1963      	adds	r3, r4, r5
 8009bae:	42bb      	cmp	r3, r7
 8009bb0:	db04      	blt.n	8009bbc <__s2b+0x78>
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	340a      	adds	r4, #10
 8009bb8:	2509      	movs	r5, #9
 8009bba:	e7f6      	b.n	8009baa <__s2b+0x66>
 8009bbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bc0:	4601      	mov	r1, r0
 8009bc2:	3b30      	subs	r3, #48	@ 0x30
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ff76 	bl	8009ab8 <__multadd>
 8009bcc:	e7ee      	b.n	8009bac <__s2b+0x68>
 8009bce:	bf00      	nop
 8009bd0:	0800c269 	.word	0x0800c269
 8009bd4:	0800c27a 	.word	0x0800c27a

08009bd8 <__hi0bits>:
 8009bd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bdc:	4603      	mov	r3, r0
 8009bde:	bf36      	itet	cc
 8009be0:	0403      	lslcc	r3, r0, #16
 8009be2:	2000      	movcs	r0, #0
 8009be4:	2010      	movcc	r0, #16
 8009be6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bea:	bf3c      	itt	cc
 8009bec:	021b      	lslcc	r3, r3, #8
 8009bee:	3008      	addcc	r0, #8
 8009bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bf4:	bf3c      	itt	cc
 8009bf6:	011b      	lslcc	r3, r3, #4
 8009bf8:	3004      	addcc	r0, #4
 8009bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bfe:	bf3c      	itt	cc
 8009c00:	009b      	lslcc	r3, r3, #2
 8009c02:	3002      	addcc	r0, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	db05      	blt.n	8009c14 <__hi0bits+0x3c>
 8009c08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c0c:	f100 0001 	add.w	r0, r0, #1
 8009c10:	bf08      	it	eq
 8009c12:	2020      	moveq	r0, #32
 8009c14:	4770      	bx	lr

08009c16 <__lo0bits>:
 8009c16:	6803      	ldr	r3, [r0, #0]
 8009c18:	4602      	mov	r2, r0
 8009c1a:	f013 0007 	ands.w	r0, r3, #7
 8009c1e:	d00b      	beq.n	8009c38 <__lo0bits+0x22>
 8009c20:	07d9      	lsls	r1, r3, #31
 8009c22:	d421      	bmi.n	8009c68 <__lo0bits+0x52>
 8009c24:	0798      	lsls	r0, r3, #30
 8009c26:	bf49      	itett	mi
 8009c28:	085b      	lsrmi	r3, r3, #1
 8009c2a:	089b      	lsrpl	r3, r3, #2
 8009c2c:	2001      	movmi	r0, #1
 8009c2e:	6013      	strmi	r3, [r2, #0]
 8009c30:	bf5c      	itt	pl
 8009c32:	6013      	strpl	r3, [r2, #0]
 8009c34:	2002      	movpl	r0, #2
 8009c36:	4770      	bx	lr
 8009c38:	b299      	uxth	r1, r3
 8009c3a:	b909      	cbnz	r1, 8009c40 <__lo0bits+0x2a>
 8009c3c:	0c1b      	lsrs	r3, r3, #16
 8009c3e:	2010      	movs	r0, #16
 8009c40:	b2d9      	uxtb	r1, r3
 8009c42:	b909      	cbnz	r1, 8009c48 <__lo0bits+0x32>
 8009c44:	3008      	adds	r0, #8
 8009c46:	0a1b      	lsrs	r3, r3, #8
 8009c48:	0719      	lsls	r1, r3, #28
 8009c4a:	bf04      	itt	eq
 8009c4c:	091b      	lsreq	r3, r3, #4
 8009c4e:	3004      	addeq	r0, #4
 8009c50:	0799      	lsls	r1, r3, #30
 8009c52:	bf04      	itt	eq
 8009c54:	089b      	lsreq	r3, r3, #2
 8009c56:	3002      	addeq	r0, #2
 8009c58:	07d9      	lsls	r1, r3, #31
 8009c5a:	d403      	bmi.n	8009c64 <__lo0bits+0x4e>
 8009c5c:	085b      	lsrs	r3, r3, #1
 8009c5e:	f100 0001 	add.w	r0, r0, #1
 8009c62:	d003      	beq.n	8009c6c <__lo0bits+0x56>
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	4770      	bx	lr
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr
 8009c6c:	2020      	movs	r0, #32
 8009c6e:	4770      	bx	lr

08009c70 <__i2b>:
 8009c70:	b510      	push	{r4, lr}
 8009c72:	460c      	mov	r4, r1
 8009c74:	2101      	movs	r1, #1
 8009c76:	f7ff febd 	bl	80099f4 <_Balloc>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <__i2b+0x1a>
 8009c7e:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <__i2b+0x24>)
 8009c80:	4805      	ldr	r0, [pc, #20]	@ (8009c98 <__i2b+0x28>)
 8009c82:	f240 1145 	movw	r1, #325	@ 0x145
 8009c86:	f001 fbef 	bl	800b468 <__assert_func>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	6144      	str	r4, [r0, #20]
 8009c8e:	6103      	str	r3, [r0, #16]
 8009c90:	bd10      	pop	{r4, pc}
 8009c92:	bf00      	nop
 8009c94:	0800c269 	.word	0x0800c269
 8009c98:	0800c27a 	.word	0x0800c27a

08009c9c <__multiply>:
 8009c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	4614      	mov	r4, r2
 8009ca2:	690a      	ldr	r2, [r1, #16]
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	bfa8      	it	ge
 8009caa:	4623      	movge	r3, r4
 8009cac:	460f      	mov	r7, r1
 8009cae:	bfa4      	itt	ge
 8009cb0:	460c      	movge	r4, r1
 8009cb2:	461f      	movge	r7, r3
 8009cb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009cb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009cbc:	68a3      	ldr	r3, [r4, #8]
 8009cbe:	6861      	ldr	r1, [r4, #4]
 8009cc0:	eb0a 0609 	add.w	r6, sl, r9
 8009cc4:	42b3      	cmp	r3, r6
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	bfb8      	it	lt
 8009cca:	3101      	addlt	r1, #1
 8009ccc:	f7ff fe92 	bl	80099f4 <_Balloc>
 8009cd0:	b930      	cbnz	r0, 8009ce0 <__multiply+0x44>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	4b44      	ldr	r3, [pc, #272]	@ (8009de8 <__multiply+0x14c>)
 8009cd6:	4845      	ldr	r0, [pc, #276]	@ (8009dec <__multiply+0x150>)
 8009cd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009cdc:	f001 fbc4 	bl	800b468 <__assert_func>
 8009ce0:	f100 0514 	add.w	r5, r0, #20
 8009ce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ce8:	462b      	mov	r3, r5
 8009cea:	2200      	movs	r2, #0
 8009cec:	4543      	cmp	r3, r8
 8009cee:	d321      	bcc.n	8009d34 <__multiply+0x98>
 8009cf0:	f107 0114 	add.w	r1, r7, #20
 8009cf4:	f104 0214 	add.w	r2, r4, #20
 8009cf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009cfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d00:	9302      	str	r3, [sp, #8]
 8009d02:	1b13      	subs	r3, r2, r4
 8009d04:	3b15      	subs	r3, #21
 8009d06:	f023 0303 	bic.w	r3, r3, #3
 8009d0a:	3304      	adds	r3, #4
 8009d0c:	f104 0715 	add.w	r7, r4, #21
 8009d10:	42ba      	cmp	r2, r7
 8009d12:	bf38      	it	cc
 8009d14:	2304      	movcc	r3, #4
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	9b02      	ldr	r3, [sp, #8]
 8009d1a:	9103      	str	r1, [sp, #12]
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	d80c      	bhi.n	8009d3a <__multiply+0x9e>
 8009d20:	2e00      	cmp	r6, #0
 8009d22:	dd03      	ble.n	8009d2c <__multiply+0x90>
 8009d24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d05b      	beq.n	8009de4 <__multiply+0x148>
 8009d2c:	6106      	str	r6, [r0, #16]
 8009d2e:	b005      	add	sp, #20
 8009d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d34:	f843 2b04 	str.w	r2, [r3], #4
 8009d38:	e7d8      	b.n	8009cec <__multiply+0x50>
 8009d3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d3e:	f1ba 0f00 	cmp.w	sl, #0
 8009d42:	d024      	beq.n	8009d8e <__multiply+0xf2>
 8009d44:	f104 0e14 	add.w	lr, r4, #20
 8009d48:	46a9      	mov	r9, r5
 8009d4a:	f04f 0c00 	mov.w	ip, #0
 8009d4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d52:	f8d9 3000 	ldr.w	r3, [r9]
 8009d56:	fa1f fb87 	uxth.w	fp, r7
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d64:	f8d9 7000 	ldr.w	r7, [r9]
 8009d68:	4463      	add	r3, ip
 8009d6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d7c:	4572      	cmp	r2, lr
 8009d7e:	f849 3b04 	str.w	r3, [r9], #4
 8009d82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d86:	d8e2      	bhi.n	8009d4e <__multiply+0xb2>
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	f845 c003 	str.w	ip, [r5, r3]
 8009d8e:	9b03      	ldr	r3, [sp, #12]
 8009d90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d94:	3104      	adds	r1, #4
 8009d96:	f1b9 0f00 	cmp.w	r9, #0
 8009d9a:	d021      	beq.n	8009de0 <__multiply+0x144>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	f104 0c14 	add.w	ip, r4, #20
 8009da2:	46ae      	mov	lr, r5
 8009da4:	f04f 0a00 	mov.w	sl, #0
 8009da8:	f8bc b000 	ldrh.w	fp, [ip]
 8009dac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009db0:	fb09 770b 	mla	r7, r9, fp, r7
 8009db4:	4457      	add	r7, sl
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dbc:	f84e 3b04 	str.w	r3, [lr], #4
 8009dc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009dc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dc8:	f8be 3000 	ldrh.w	r3, [lr]
 8009dcc:	fb09 330a 	mla	r3, r9, sl, r3
 8009dd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009dd4:	4562      	cmp	r2, ip
 8009dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dda:	d8e5      	bhi.n	8009da8 <__multiply+0x10c>
 8009ddc:	9f01      	ldr	r7, [sp, #4]
 8009dde:	51eb      	str	r3, [r5, r7]
 8009de0:	3504      	adds	r5, #4
 8009de2:	e799      	b.n	8009d18 <__multiply+0x7c>
 8009de4:	3e01      	subs	r6, #1
 8009de6:	e79b      	b.n	8009d20 <__multiply+0x84>
 8009de8:	0800c269 	.word	0x0800c269
 8009dec:	0800c27a 	.word	0x0800c27a

08009df0 <__pow5mult>:
 8009df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	4615      	mov	r5, r2
 8009df6:	f012 0203 	ands.w	r2, r2, #3
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	460e      	mov	r6, r1
 8009dfe:	d007      	beq.n	8009e10 <__pow5mult+0x20>
 8009e00:	4c25      	ldr	r4, [pc, #148]	@ (8009e98 <__pow5mult+0xa8>)
 8009e02:	3a01      	subs	r2, #1
 8009e04:	2300      	movs	r3, #0
 8009e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e0a:	f7ff fe55 	bl	8009ab8 <__multadd>
 8009e0e:	4606      	mov	r6, r0
 8009e10:	10ad      	asrs	r5, r5, #2
 8009e12:	d03d      	beq.n	8009e90 <__pow5mult+0xa0>
 8009e14:	69fc      	ldr	r4, [r7, #28]
 8009e16:	b97c      	cbnz	r4, 8009e38 <__pow5mult+0x48>
 8009e18:	2010      	movs	r0, #16
 8009e1a:	f7ff fd35 	bl	8009888 <malloc>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	61f8      	str	r0, [r7, #28]
 8009e22:	b928      	cbnz	r0, 8009e30 <__pow5mult+0x40>
 8009e24:	4b1d      	ldr	r3, [pc, #116]	@ (8009e9c <__pow5mult+0xac>)
 8009e26:	481e      	ldr	r0, [pc, #120]	@ (8009ea0 <__pow5mult+0xb0>)
 8009e28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e2c:	f001 fb1c 	bl	800b468 <__assert_func>
 8009e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e34:	6004      	str	r4, [r0, #0]
 8009e36:	60c4      	str	r4, [r0, #12]
 8009e38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e40:	b94c      	cbnz	r4, 8009e56 <__pow5mult+0x66>
 8009e42:	f240 2171 	movw	r1, #625	@ 0x271
 8009e46:	4638      	mov	r0, r7
 8009e48:	f7ff ff12 	bl	8009c70 <__i2b>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e52:	4604      	mov	r4, r0
 8009e54:	6003      	str	r3, [r0, #0]
 8009e56:	f04f 0900 	mov.w	r9, #0
 8009e5a:	07eb      	lsls	r3, r5, #31
 8009e5c:	d50a      	bpl.n	8009e74 <__pow5mult+0x84>
 8009e5e:	4631      	mov	r1, r6
 8009e60:	4622      	mov	r2, r4
 8009e62:	4638      	mov	r0, r7
 8009e64:	f7ff ff1a 	bl	8009c9c <__multiply>
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4680      	mov	r8, r0
 8009e6c:	4638      	mov	r0, r7
 8009e6e:	f7ff fe01 	bl	8009a74 <_Bfree>
 8009e72:	4646      	mov	r6, r8
 8009e74:	106d      	asrs	r5, r5, #1
 8009e76:	d00b      	beq.n	8009e90 <__pow5mult+0xa0>
 8009e78:	6820      	ldr	r0, [r4, #0]
 8009e7a:	b938      	cbnz	r0, 8009e8c <__pow5mult+0x9c>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff ff0b 	bl	8009c9c <__multiply>
 8009e86:	6020      	str	r0, [r4, #0]
 8009e88:	f8c0 9000 	str.w	r9, [r0]
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	e7e4      	b.n	8009e5a <__pow5mult+0x6a>
 8009e90:	4630      	mov	r0, r6
 8009e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e96:	bf00      	nop
 8009e98:	0800c2d4 	.word	0x0800c2d4
 8009e9c:	0800c1fa 	.word	0x0800c1fa
 8009ea0:	0800c27a 	.word	0x0800c27a

08009ea4 <__lshift>:
 8009ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	6849      	ldr	r1, [r1, #4]
 8009eac:	6923      	ldr	r3, [r4, #16]
 8009eae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009eb2:	68a3      	ldr	r3, [r4, #8]
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	4691      	mov	r9, r2
 8009eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ebc:	f108 0601 	add.w	r6, r8, #1
 8009ec0:	42b3      	cmp	r3, r6
 8009ec2:	db0b      	blt.n	8009edc <__lshift+0x38>
 8009ec4:	4638      	mov	r0, r7
 8009ec6:	f7ff fd95 	bl	80099f4 <_Balloc>
 8009eca:	4605      	mov	r5, r0
 8009ecc:	b948      	cbnz	r0, 8009ee2 <__lshift+0x3e>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	4b28      	ldr	r3, [pc, #160]	@ (8009f74 <__lshift+0xd0>)
 8009ed2:	4829      	ldr	r0, [pc, #164]	@ (8009f78 <__lshift+0xd4>)
 8009ed4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ed8:	f001 fac6 	bl	800b468 <__assert_func>
 8009edc:	3101      	adds	r1, #1
 8009ede:	005b      	lsls	r3, r3, #1
 8009ee0:	e7ee      	b.n	8009ec0 <__lshift+0x1c>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	f100 0114 	add.w	r1, r0, #20
 8009ee8:	f100 0210 	add.w	r2, r0, #16
 8009eec:	4618      	mov	r0, r3
 8009eee:	4553      	cmp	r3, sl
 8009ef0:	db33      	blt.n	8009f5a <__lshift+0xb6>
 8009ef2:	6920      	ldr	r0, [r4, #16]
 8009ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ef8:	f104 0314 	add.w	r3, r4, #20
 8009efc:	f019 091f 	ands.w	r9, r9, #31
 8009f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f08:	d02b      	beq.n	8009f62 <__lshift+0xbe>
 8009f0a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f0e:	468a      	mov	sl, r1
 8009f10:	2200      	movs	r2, #0
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	fa00 f009 	lsl.w	r0, r0, r9
 8009f18:	4310      	orrs	r0, r2
 8009f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f22:	459c      	cmp	ip, r3
 8009f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f28:	d8f3      	bhi.n	8009f12 <__lshift+0x6e>
 8009f2a:	ebac 0304 	sub.w	r3, ip, r4
 8009f2e:	3b15      	subs	r3, #21
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	3304      	adds	r3, #4
 8009f36:	f104 0015 	add.w	r0, r4, #21
 8009f3a:	4584      	cmp	ip, r0
 8009f3c:	bf38      	it	cc
 8009f3e:	2304      	movcc	r3, #4
 8009f40:	50ca      	str	r2, [r1, r3]
 8009f42:	b10a      	cbz	r2, 8009f48 <__lshift+0xa4>
 8009f44:	f108 0602 	add.w	r6, r8, #2
 8009f48:	3e01      	subs	r6, #1
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	612e      	str	r6, [r5, #16]
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f7ff fd90 	bl	8009a74 <_Bfree>
 8009f54:	4628      	mov	r0, r5
 8009f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f5e:	3301      	adds	r3, #1
 8009f60:	e7c5      	b.n	8009eee <__lshift+0x4a>
 8009f62:	3904      	subs	r1, #4
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f6c:	459c      	cmp	ip, r3
 8009f6e:	d8f9      	bhi.n	8009f64 <__lshift+0xc0>
 8009f70:	e7ea      	b.n	8009f48 <__lshift+0xa4>
 8009f72:	bf00      	nop
 8009f74:	0800c269 	.word	0x0800c269
 8009f78:	0800c27a 	.word	0x0800c27a

08009f7c <__mcmp>:
 8009f7c:	690a      	ldr	r2, [r1, #16]
 8009f7e:	4603      	mov	r3, r0
 8009f80:	6900      	ldr	r0, [r0, #16]
 8009f82:	1a80      	subs	r0, r0, r2
 8009f84:	b530      	push	{r4, r5, lr}
 8009f86:	d10e      	bne.n	8009fa6 <__mcmp+0x2a>
 8009f88:	3314      	adds	r3, #20
 8009f8a:	3114      	adds	r1, #20
 8009f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f9c:	4295      	cmp	r5, r2
 8009f9e:	d003      	beq.n	8009fa8 <__mcmp+0x2c>
 8009fa0:	d205      	bcs.n	8009fae <__mcmp+0x32>
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	bd30      	pop	{r4, r5, pc}
 8009fa8:	42a3      	cmp	r3, r4
 8009faa:	d3f3      	bcc.n	8009f94 <__mcmp+0x18>
 8009fac:	e7fb      	b.n	8009fa6 <__mcmp+0x2a>
 8009fae:	2001      	movs	r0, #1
 8009fb0:	e7f9      	b.n	8009fa6 <__mcmp+0x2a>
	...

08009fb4 <__mdiff>:
 8009fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4689      	mov	r9, r1
 8009fba:	4606      	mov	r6, r0
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4648      	mov	r0, r9
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	f7ff ffdb 	bl	8009f7c <__mcmp>
 8009fc6:	1e05      	subs	r5, r0, #0
 8009fc8:	d112      	bne.n	8009ff0 <__mdiff+0x3c>
 8009fca:	4629      	mov	r1, r5
 8009fcc:	4630      	mov	r0, r6
 8009fce:	f7ff fd11 	bl	80099f4 <_Balloc>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	b928      	cbnz	r0, 8009fe2 <__mdiff+0x2e>
 8009fd6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0d4 <__mdiff+0x120>)
 8009fd8:	f240 2137 	movw	r1, #567	@ 0x237
 8009fdc:	483e      	ldr	r0, [pc, #248]	@ (800a0d8 <__mdiff+0x124>)
 8009fde:	f001 fa43 	bl	800b468 <__assert_func>
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fe8:	4610      	mov	r0, r2
 8009fea:	b003      	add	sp, #12
 8009fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff0:	bfbc      	itt	lt
 8009ff2:	464b      	movlt	r3, r9
 8009ff4:	46a1      	movlt	r9, r4
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ffc:	bfba      	itte	lt
 8009ffe:	461c      	movlt	r4, r3
 800a000:	2501      	movlt	r5, #1
 800a002:	2500      	movge	r5, #0
 800a004:	f7ff fcf6 	bl	80099f4 <_Balloc>
 800a008:	4602      	mov	r2, r0
 800a00a:	b918      	cbnz	r0, 800a014 <__mdiff+0x60>
 800a00c:	4b31      	ldr	r3, [pc, #196]	@ (800a0d4 <__mdiff+0x120>)
 800a00e:	f240 2145 	movw	r1, #581	@ 0x245
 800a012:	e7e3      	b.n	8009fdc <__mdiff+0x28>
 800a014:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a018:	6926      	ldr	r6, [r4, #16]
 800a01a:	60c5      	str	r5, [r0, #12]
 800a01c:	f109 0310 	add.w	r3, r9, #16
 800a020:	f109 0514 	add.w	r5, r9, #20
 800a024:	f104 0e14 	add.w	lr, r4, #20
 800a028:	f100 0b14 	add.w	fp, r0, #20
 800a02c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a030:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a034:	9301      	str	r3, [sp, #4]
 800a036:	46d9      	mov	r9, fp
 800a038:	f04f 0c00 	mov.w	ip, #0
 800a03c:	9b01      	ldr	r3, [sp, #4]
 800a03e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a042:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	fa1f f38a 	uxth.w	r3, sl
 800a04c:	4619      	mov	r1, r3
 800a04e:	b283      	uxth	r3, r0
 800a050:	1acb      	subs	r3, r1, r3
 800a052:	0c00      	lsrs	r0, r0, #16
 800a054:	4463      	add	r3, ip
 800a056:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a05a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a05e:	b29b      	uxth	r3, r3
 800a060:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a064:	4576      	cmp	r6, lr
 800a066:	f849 3b04 	str.w	r3, [r9], #4
 800a06a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a06e:	d8e5      	bhi.n	800a03c <__mdiff+0x88>
 800a070:	1b33      	subs	r3, r6, r4
 800a072:	3b15      	subs	r3, #21
 800a074:	f023 0303 	bic.w	r3, r3, #3
 800a078:	3415      	adds	r4, #21
 800a07a:	3304      	adds	r3, #4
 800a07c:	42a6      	cmp	r6, r4
 800a07e:	bf38      	it	cc
 800a080:	2304      	movcc	r3, #4
 800a082:	441d      	add	r5, r3
 800a084:	445b      	add	r3, fp
 800a086:	461e      	mov	r6, r3
 800a088:	462c      	mov	r4, r5
 800a08a:	4544      	cmp	r4, r8
 800a08c:	d30e      	bcc.n	800a0ac <__mdiff+0xf8>
 800a08e:	f108 0103 	add.w	r1, r8, #3
 800a092:	1b49      	subs	r1, r1, r5
 800a094:	f021 0103 	bic.w	r1, r1, #3
 800a098:	3d03      	subs	r5, #3
 800a09a:	45a8      	cmp	r8, r5
 800a09c:	bf38      	it	cc
 800a09e:	2100      	movcc	r1, #0
 800a0a0:	440b      	add	r3, r1
 800a0a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0a6:	b191      	cbz	r1, 800a0ce <__mdiff+0x11a>
 800a0a8:	6117      	str	r7, [r2, #16]
 800a0aa:	e79d      	b.n	8009fe8 <__mdiff+0x34>
 800a0ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800a0b0:	46e6      	mov	lr, ip
 800a0b2:	0c08      	lsrs	r0, r1, #16
 800a0b4:	fa1c fc81 	uxtah	ip, ip, r1
 800a0b8:	4471      	add	r1, lr
 800a0ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0be:	b289      	uxth	r1, r1
 800a0c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0c4:	f846 1b04 	str.w	r1, [r6], #4
 800a0c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0cc:	e7dd      	b.n	800a08a <__mdiff+0xd6>
 800a0ce:	3f01      	subs	r7, #1
 800a0d0:	e7e7      	b.n	800a0a2 <__mdiff+0xee>
 800a0d2:	bf00      	nop
 800a0d4:	0800c269 	.word	0x0800c269
 800a0d8:	0800c27a 	.word	0x0800c27a

0800a0dc <__ulp>:
 800a0dc:	b082      	sub	sp, #8
 800a0de:	ed8d 0b00 	vstr	d0, [sp]
 800a0e2:	9a01      	ldr	r2, [sp, #4]
 800a0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a124 <__ulp+0x48>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dc08      	bgt.n	800a102 <__ulp+0x26>
 800a0f0:	425b      	negs	r3, r3
 800a0f2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0f6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0fa:	da04      	bge.n	800a106 <__ulp+0x2a>
 800a0fc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a100:	4113      	asrs	r3, r2
 800a102:	2200      	movs	r2, #0
 800a104:	e008      	b.n	800a118 <__ulp+0x3c>
 800a106:	f1a2 0314 	sub.w	r3, r2, #20
 800a10a:	2b1e      	cmp	r3, #30
 800a10c:	bfda      	itte	le
 800a10e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a112:	40da      	lsrle	r2, r3
 800a114:	2201      	movgt	r2, #1
 800a116:	2300      	movs	r3, #0
 800a118:	4619      	mov	r1, r3
 800a11a:	4610      	mov	r0, r2
 800a11c:	ec41 0b10 	vmov	d0, r0, r1
 800a120:	b002      	add	sp, #8
 800a122:	4770      	bx	lr
 800a124:	7ff00000 	.word	0x7ff00000

0800a128 <__b2d>:
 800a128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a12c:	6906      	ldr	r6, [r0, #16]
 800a12e:	f100 0814 	add.w	r8, r0, #20
 800a132:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a136:	1f37      	subs	r7, r6, #4
 800a138:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7ff fd4b 	bl	8009bd8 <__hi0bits>
 800a142:	f1c0 0320 	rsb	r3, r0, #32
 800a146:	280a      	cmp	r0, #10
 800a148:	600b      	str	r3, [r1, #0]
 800a14a:	491b      	ldr	r1, [pc, #108]	@ (800a1b8 <__b2d+0x90>)
 800a14c:	dc15      	bgt.n	800a17a <__b2d+0x52>
 800a14e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a152:	fa22 f30c 	lsr.w	r3, r2, ip
 800a156:	45b8      	cmp	r8, r7
 800a158:	ea43 0501 	orr.w	r5, r3, r1
 800a15c:	bf34      	ite	cc
 800a15e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a162:	2300      	movcs	r3, #0
 800a164:	3015      	adds	r0, #21
 800a166:	fa02 f000 	lsl.w	r0, r2, r0
 800a16a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a16e:	4303      	orrs	r3, r0
 800a170:	461c      	mov	r4, r3
 800a172:	ec45 4b10 	vmov	d0, r4, r5
 800a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a17a:	45b8      	cmp	r8, r7
 800a17c:	bf3a      	itte	cc
 800a17e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a182:	f1a6 0708 	subcc.w	r7, r6, #8
 800a186:	2300      	movcs	r3, #0
 800a188:	380b      	subs	r0, #11
 800a18a:	d012      	beq.n	800a1b2 <__b2d+0x8a>
 800a18c:	f1c0 0120 	rsb	r1, r0, #32
 800a190:	fa23 f401 	lsr.w	r4, r3, r1
 800a194:	4082      	lsls	r2, r0
 800a196:	4322      	orrs	r2, r4
 800a198:	4547      	cmp	r7, r8
 800a19a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a19e:	bf8c      	ite	hi
 800a1a0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a1a4:	2200      	movls	r2, #0
 800a1a6:	4083      	lsls	r3, r0
 800a1a8:	40ca      	lsrs	r2, r1
 800a1aa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	e7de      	b.n	800a170 <__b2d+0x48>
 800a1b2:	ea42 0501 	orr.w	r5, r2, r1
 800a1b6:	e7db      	b.n	800a170 <__b2d+0x48>
 800a1b8:	3ff00000 	.word	0x3ff00000

0800a1bc <__d2b>:
 800a1bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	460f      	mov	r7, r1
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	ec59 8b10 	vmov	r8, r9, d0
 800a1c8:	4616      	mov	r6, r2
 800a1ca:	f7ff fc13 	bl	80099f4 <_Balloc>
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	b930      	cbnz	r0, 800a1e0 <__d2b+0x24>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	4b23      	ldr	r3, [pc, #140]	@ (800a264 <__d2b+0xa8>)
 800a1d6:	4824      	ldr	r0, [pc, #144]	@ (800a268 <__d2b+0xac>)
 800a1d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1dc:	f001 f944 	bl	800b468 <__assert_func>
 800a1e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1e8:	b10d      	cbz	r5, 800a1ee <__d2b+0x32>
 800a1ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1ee:	9301      	str	r3, [sp, #4]
 800a1f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a1f4:	d023      	beq.n	800a23e <__d2b+0x82>
 800a1f6:	4668      	mov	r0, sp
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	f7ff fd0c 	bl	8009c16 <__lo0bits>
 800a1fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a202:	b1d0      	cbz	r0, 800a23a <__d2b+0x7e>
 800a204:	f1c0 0320 	rsb	r3, r0, #32
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	430b      	orrs	r3, r1
 800a20e:	40c2      	lsrs	r2, r0
 800a210:	6163      	str	r3, [r4, #20]
 800a212:	9201      	str	r2, [sp, #4]
 800a214:	9b01      	ldr	r3, [sp, #4]
 800a216:	61a3      	str	r3, [r4, #24]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bf0c      	ite	eq
 800a21c:	2201      	moveq	r2, #1
 800a21e:	2202      	movne	r2, #2
 800a220:	6122      	str	r2, [r4, #16]
 800a222:	b1a5      	cbz	r5, 800a24e <__d2b+0x92>
 800a224:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a228:	4405      	add	r5, r0
 800a22a:	603d      	str	r5, [r7, #0]
 800a22c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a230:	6030      	str	r0, [r6, #0]
 800a232:	4620      	mov	r0, r4
 800a234:	b003      	add	sp, #12
 800a236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a23a:	6161      	str	r1, [r4, #20]
 800a23c:	e7ea      	b.n	800a214 <__d2b+0x58>
 800a23e:	a801      	add	r0, sp, #4
 800a240:	f7ff fce9 	bl	8009c16 <__lo0bits>
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	6163      	str	r3, [r4, #20]
 800a248:	3020      	adds	r0, #32
 800a24a:	2201      	movs	r2, #1
 800a24c:	e7e8      	b.n	800a220 <__d2b+0x64>
 800a24e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a252:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a256:	6038      	str	r0, [r7, #0]
 800a258:	6918      	ldr	r0, [r3, #16]
 800a25a:	f7ff fcbd 	bl	8009bd8 <__hi0bits>
 800a25e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a262:	e7e5      	b.n	800a230 <__d2b+0x74>
 800a264:	0800c269 	.word	0x0800c269
 800a268:	0800c27a 	.word	0x0800c27a

0800a26c <__ratio>:
 800a26c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a270:	4688      	mov	r8, r1
 800a272:	4669      	mov	r1, sp
 800a274:	4681      	mov	r9, r0
 800a276:	f7ff ff57 	bl	800a128 <__b2d>
 800a27a:	a901      	add	r1, sp, #4
 800a27c:	4640      	mov	r0, r8
 800a27e:	ec55 4b10 	vmov	r4, r5, d0
 800a282:	f7ff ff51 	bl	800a128 <__b2d>
 800a286:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a28a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a294:	1a5b      	subs	r3, r3, r1
 800a296:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a29a:	ec57 6b10 	vmov	r6, r7, d0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	bfd6      	itet	le
 800a2a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2a6:	462a      	movgt	r2, r5
 800a2a8:	463a      	movle	r2, r7
 800a2aa:	46ab      	mov	fp, r5
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	bfce      	itee	gt
 800a2b0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a2b4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a2b8:	ee00 3a90 	vmovle	s1, r3
 800a2bc:	ec4b ab17 	vmov	d7, sl, fp
 800a2c0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a2c4:	b003      	add	sp, #12
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2ca <__copybits>:
 800a2ca:	3901      	subs	r1, #1
 800a2cc:	b570      	push	{r4, r5, r6, lr}
 800a2ce:	1149      	asrs	r1, r1, #5
 800a2d0:	6914      	ldr	r4, [r2, #16]
 800a2d2:	3101      	adds	r1, #1
 800a2d4:	f102 0314 	add.w	r3, r2, #20
 800a2d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2e0:	1f05      	subs	r5, r0, #4
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	d30c      	bcc.n	800a300 <__copybits+0x36>
 800a2e6:	1aa3      	subs	r3, r4, r2
 800a2e8:	3b11      	subs	r3, #17
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	3211      	adds	r2, #17
 800a2f0:	42a2      	cmp	r2, r4
 800a2f2:	bf88      	it	hi
 800a2f4:	2300      	movhi	r3, #0
 800a2f6:	4418      	add	r0, r3
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4288      	cmp	r0, r1
 800a2fc:	d305      	bcc.n	800a30a <__copybits+0x40>
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	f853 6b04 	ldr.w	r6, [r3], #4
 800a304:	f845 6f04 	str.w	r6, [r5, #4]!
 800a308:	e7eb      	b.n	800a2e2 <__copybits+0x18>
 800a30a:	f840 3b04 	str.w	r3, [r0], #4
 800a30e:	e7f4      	b.n	800a2fa <__copybits+0x30>

0800a310 <__any_on>:
 800a310:	f100 0214 	add.w	r2, r0, #20
 800a314:	6900      	ldr	r0, [r0, #16]
 800a316:	114b      	asrs	r3, r1, #5
 800a318:	4298      	cmp	r0, r3
 800a31a:	b510      	push	{r4, lr}
 800a31c:	db11      	blt.n	800a342 <__any_on+0x32>
 800a31e:	dd0a      	ble.n	800a336 <__any_on+0x26>
 800a320:	f011 011f 	ands.w	r1, r1, #31
 800a324:	d007      	beq.n	800a336 <__any_on+0x26>
 800a326:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a32a:	fa24 f001 	lsr.w	r0, r4, r1
 800a32e:	fa00 f101 	lsl.w	r1, r0, r1
 800a332:	428c      	cmp	r4, r1
 800a334:	d10b      	bne.n	800a34e <__any_on+0x3e>
 800a336:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d803      	bhi.n	800a346 <__any_on+0x36>
 800a33e:	2000      	movs	r0, #0
 800a340:	bd10      	pop	{r4, pc}
 800a342:	4603      	mov	r3, r0
 800a344:	e7f7      	b.n	800a336 <__any_on+0x26>
 800a346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a34a:	2900      	cmp	r1, #0
 800a34c:	d0f5      	beq.n	800a33a <__any_on+0x2a>
 800a34e:	2001      	movs	r0, #1
 800a350:	e7f6      	b.n	800a340 <__any_on+0x30>

0800a352 <sulp>:
 800a352:	b570      	push	{r4, r5, r6, lr}
 800a354:	4604      	mov	r4, r0
 800a356:	460d      	mov	r5, r1
 800a358:	4616      	mov	r6, r2
 800a35a:	ec45 4b10 	vmov	d0, r4, r5
 800a35e:	f7ff febd 	bl	800a0dc <__ulp>
 800a362:	b17e      	cbz	r6, 800a384 <sulp+0x32>
 800a364:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dd09      	ble.n	800a384 <sulp+0x32>
 800a370:	051b      	lsls	r3, r3, #20
 800a372:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a376:	2000      	movs	r0, #0
 800a378:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a37c:	ec41 0b17 	vmov	d7, r0, r1
 800a380:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a384:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a388 <_strtod_l>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	ed2d 8b0a 	vpush	{d8-d12}
 800a390:	b097      	sub	sp, #92	@ 0x5c
 800a392:	4688      	mov	r8, r1
 800a394:	920e      	str	r2, [sp, #56]	@ 0x38
 800a396:	2200      	movs	r2, #0
 800a398:	9212      	str	r2, [sp, #72]	@ 0x48
 800a39a:	9005      	str	r0, [sp, #20]
 800a39c:	f04f 0a00 	mov.w	sl, #0
 800a3a0:	f04f 0b00 	mov.w	fp, #0
 800a3a4:	460a      	mov	r2, r1
 800a3a6:	9211      	str	r2, [sp, #68]	@ 0x44
 800a3a8:	7811      	ldrb	r1, [r2, #0]
 800a3aa:	292b      	cmp	r1, #43	@ 0x2b
 800a3ac:	d04c      	beq.n	800a448 <_strtod_l+0xc0>
 800a3ae:	d839      	bhi.n	800a424 <_strtod_l+0x9c>
 800a3b0:	290d      	cmp	r1, #13
 800a3b2:	d833      	bhi.n	800a41c <_strtod_l+0x94>
 800a3b4:	2908      	cmp	r1, #8
 800a3b6:	d833      	bhi.n	800a420 <_strtod_l+0x98>
 800a3b8:	2900      	cmp	r1, #0
 800a3ba:	d03c      	beq.n	800a436 <_strtod_l+0xae>
 800a3bc:	2200      	movs	r2, #0
 800a3be:	9208      	str	r2, [sp, #32]
 800a3c0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a3c2:	782a      	ldrb	r2, [r5, #0]
 800a3c4:	2a30      	cmp	r2, #48	@ 0x30
 800a3c6:	f040 80b5 	bne.w	800a534 <_strtod_l+0x1ac>
 800a3ca:	786a      	ldrb	r2, [r5, #1]
 800a3cc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a3d0:	2a58      	cmp	r2, #88	@ 0x58
 800a3d2:	d170      	bne.n	800a4b6 <_strtod_l+0x12e>
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	9b08      	ldr	r3, [sp, #32]
 800a3d8:	9301      	str	r3, [sp, #4]
 800a3da:	ab12      	add	r3, sp, #72	@ 0x48
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	4a8b      	ldr	r2, [pc, #556]	@ (800a60c <_strtod_l+0x284>)
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	ab13      	add	r3, sp, #76	@ 0x4c
 800a3e4:	a911      	add	r1, sp, #68	@ 0x44
 800a3e6:	f001 f8d9 	bl	800b59c <__gethex>
 800a3ea:	f010 060f 	ands.w	r6, r0, #15
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	d005      	beq.n	800a3fe <_strtod_l+0x76>
 800a3f2:	2e06      	cmp	r6, #6
 800a3f4:	d12a      	bne.n	800a44c <_strtod_l+0xc4>
 800a3f6:	3501      	adds	r5, #1
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9511      	str	r5, [sp, #68]	@ 0x44
 800a3fc:	9308      	str	r3, [sp, #32]
 800a3fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	f040 852f 	bne.w	800ae64 <_strtod_l+0xadc>
 800a406:	9b08      	ldr	r3, [sp, #32]
 800a408:	ec4b ab10 	vmov	d0, sl, fp
 800a40c:	b1cb      	cbz	r3, 800a442 <_strtod_l+0xba>
 800a40e:	eeb1 0b40 	vneg.f64	d0, d0
 800a412:	b017      	add	sp, #92	@ 0x5c
 800a414:	ecbd 8b0a 	vpop	{d8-d12}
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41c:	2920      	cmp	r1, #32
 800a41e:	d1cd      	bne.n	800a3bc <_strtod_l+0x34>
 800a420:	3201      	adds	r2, #1
 800a422:	e7c0      	b.n	800a3a6 <_strtod_l+0x1e>
 800a424:	292d      	cmp	r1, #45	@ 0x2d
 800a426:	d1c9      	bne.n	800a3bc <_strtod_l+0x34>
 800a428:	2101      	movs	r1, #1
 800a42a:	9108      	str	r1, [sp, #32]
 800a42c:	1c51      	adds	r1, r2, #1
 800a42e:	9111      	str	r1, [sp, #68]	@ 0x44
 800a430:	7852      	ldrb	r2, [r2, #1]
 800a432:	2a00      	cmp	r2, #0
 800a434:	d1c4      	bne.n	800a3c0 <_strtod_l+0x38>
 800a436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a438:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f040 850f 	bne.w	800ae60 <_strtod_l+0xad8>
 800a442:	ec4b ab10 	vmov	d0, sl, fp
 800a446:	e7e4      	b.n	800a412 <_strtod_l+0x8a>
 800a448:	2100      	movs	r1, #0
 800a44a:	e7ee      	b.n	800a42a <_strtod_l+0xa2>
 800a44c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a44e:	b13a      	cbz	r2, 800a460 <_strtod_l+0xd8>
 800a450:	2135      	movs	r1, #53	@ 0x35
 800a452:	a814      	add	r0, sp, #80	@ 0x50
 800a454:	f7ff ff39 	bl	800a2ca <__copybits>
 800a458:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a45a:	9805      	ldr	r0, [sp, #20]
 800a45c:	f7ff fb0a 	bl	8009a74 <_Bfree>
 800a460:	1e73      	subs	r3, r6, #1
 800a462:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a464:	2b04      	cmp	r3, #4
 800a466:	d806      	bhi.n	800a476 <_strtod_l+0xee>
 800a468:	e8df f003 	tbb	[pc, r3]
 800a46c:	201d0314 	.word	0x201d0314
 800a470:	14          	.byte	0x14
 800a471:	00          	.byte	0x00
 800a472:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a476:	05e3      	lsls	r3, r4, #23
 800a478:	bf48      	it	mi
 800a47a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a47e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a482:	0d1b      	lsrs	r3, r3, #20
 800a484:	051b      	lsls	r3, r3, #20
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1b9      	bne.n	800a3fe <_strtod_l+0x76>
 800a48a:	f7fe fba1 	bl	8008bd0 <__errno>
 800a48e:	2322      	movs	r3, #34	@ 0x22
 800a490:	6003      	str	r3, [r0, #0]
 800a492:	e7b4      	b.n	800a3fe <_strtod_l+0x76>
 800a494:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a498:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a49c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a4a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a4a4:	e7e7      	b.n	800a476 <_strtod_l+0xee>
 800a4a6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a614 <_strtod_l+0x28c>
 800a4aa:	e7e4      	b.n	800a476 <_strtod_l+0xee>
 800a4ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a4b0:	f04f 3aff 	mov.w	sl, #4294967295
 800a4b4:	e7df      	b.n	800a476 <_strtod_l+0xee>
 800a4b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	9211      	str	r2, [sp, #68]	@ 0x44
 800a4bc:	785b      	ldrb	r3, [r3, #1]
 800a4be:	2b30      	cmp	r3, #48	@ 0x30
 800a4c0:	d0f9      	beq.n	800a4b6 <_strtod_l+0x12e>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d09b      	beq.n	800a3fe <_strtod_l+0x76>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	2600      	movs	r6, #0
 800a4ca:	9307      	str	r3, [sp, #28]
 800a4cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4d0:	46b1      	mov	r9, r6
 800a4d2:	4635      	mov	r5, r6
 800a4d4:	220a      	movs	r2, #10
 800a4d6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a4d8:	7804      	ldrb	r4, [r0, #0]
 800a4da:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a4de:	b2d9      	uxtb	r1, r3
 800a4e0:	2909      	cmp	r1, #9
 800a4e2:	d929      	bls.n	800a538 <_strtod_l+0x1b0>
 800a4e4:	494a      	ldr	r1, [pc, #296]	@ (800a610 <_strtod_l+0x288>)
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f000 ff84 	bl	800b3f4 <strncmp>
 800a4ec:	b378      	cbz	r0, 800a54e <_strtod_l+0x1c6>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	4607      	mov	r7, r0
 800a4f6:	9006      	str	r0, [sp, #24]
 800a4f8:	2a65      	cmp	r2, #101	@ 0x65
 800a4fa:	d001      	beq.n	800a500 <_strtod_l+0x178>
 800a4fc:	2a45      	cmp	r2, #69	@ 0x45
 800a4fe:	d117      	bne.n	800a530 <_strtod_l+0x1a8>
 800a500:	b91b      	cbnz	r3, 800a50a <_strtod_l+0x182>
 800a502:	9b07      	ldr	r3, [sp, #28]
 800a504:	4303      	orrs	r3, r0
 800a506:	d096      	beq.n	800a436 <_strtod_l+0xae>
 800a508:	2300      	movs	r3, #0
 800a50a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a50e:	f108 0201 	add.w	r2, r8, #1
 800a512:	9211      	str	r2, [sp, #68]	@ 0x44
 800a514:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a518:	2a2b      	cmp	r2, #43	@ 0x2b
 800a51a:	d06b      	beq.n	800a5f4 <_strtod_l+0x26c>
 800a51c:	2a2d      	cmp	r2, #45	@ 0x2d
 800a51e:	d071      	beq.n	800a604 <_strtod_l+0x27c>
 800a520:	f04f 0e00 	mov.w	lr, #0
 800a524:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a528:	2c09      	cmp	r4, #9
 800a52a:	d979      	bls.n	800a620 <_strtod_l+0x298>
 800a52c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a530:	2400      	movs	r4, #0
 800a532:	e094      	b.n	800a65e <_strtod_l+0x2d6>
 800a534:	2300      	movs	r3, #0
 800a536:	e7c7      	b.n	800a4c8 <_strtod_l+0x140>
 800a538:	2d08      	cmp	r5, #8
 800a53a:	f100 0001 	add.w	r0, r0, #1
 800a53e:	bfd4      	ite	le
 800a540:	fb02 3909 	mlale	r9, r2, r9, r3
 800a544:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a548:	3501      	adds	r5, #1
 800a54a:	9011      	str	r0, [sp, #68]	@ 0x44
 800a54c:	e7c3      	b.n	800a4d6 <_strtod_l+0x14e>
 800a54e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	9211      	str	r2, [sp, #68]	@ 0x44
 800a554:	785a      	ldrb	r2, [r3, #1]
 800a556:	b375      	cbz	r5, 800a5b6 <_strtod_l+0x22e>
 800a558:	4607      	mov	r7, r0
 800a55a:	462b      	mov	r3, r5
 800a55c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a560:	2909      	cmp	r1, #9
 800a562:	d913      	bls.n	800a58c <_strtod_l+0x204>
 800a564:	2101      	movs	r1, #1
 800a566:	9106      	str	r1, [sp, #24]
 800a568:	e7c6      	b.n	800a4f8 <_strtod_l+0x170>
 800a56a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a570:	785a      	ldrb	r2, [r3, #1]
 800a572:	3001      	adds	r0, #1
 800a574:	2a30      	cmp	r2, #48	@ 0x30
 800a576:	d0f8      	beq.n	800a56a <_strtod_l+0x1e2>
 800a578:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a57c:	2b08      	cmp	r3, #8
 800a57e:	f200 8476 	bhi.w	800ae6e <_strtod_l+0xae6>
 800a582:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a584:	930a      	str	r3, [sp, #40]	@ 0x28
 800a586:	4607      	mov	r7, r0
 800a588:	2000      	movs	r0, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	3a30      	subs	r2, #48	@ 0x30
 800a58e:	f100 0101 	add.w	r1, r0, #1
 800a592:	d023      	beq.n	800a5dc <_strtod_l+0x254>
 800a594:	440f      	add	r7, r1
 800a596:	eb00 0c03 	add.w	ip, r0, r3
 800a59a:	4619      	mov	r1, r3
 800a59c:	240a      	movs	r4, #10
 800a59e:	4561      	cmp	r1, ip
 800a5a0:	d10b      	bne.n	800a5ba <_strtod_l+0x232>
 800a5a2:	1c5c      	adds	r4, r3, #1
 800a5a4:	4403      	add	r3, r0
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	4404      	add	r4, r0
 800a5aa:	dc11      	bgt.n	800a5d0 <_strtod_l+0x248>
 800a5ac:	230a      	movs	r3, #10
 800a5ae:	fb03 2909 	mla	r9, r3, r9, r2
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	e013      	b.n	800a5de <_strtod_l+0x256>
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	e7dc      	b.n	800a574 <_strtod_l+0x1ec>
 800a5ba:	2908      	cmp	r1, #8
 800a5bc:	f101 0101 	add.w	r1, r1, #1
 800a5c0:	dc02      	bgt.n	800a5c8 <_strtod_l+0x240>
 800a5c2:	fb04 f909 	mul.w	r9, r4, r9
 800a5c6:	e7ea      	b.n	800a59e <_strtod_l+0x216>
 800a5c8:	2910      	cmp	r1, #16
 800a5ca:	bfd8      	it	le
 800a5cc:	4366      	mulle	r6, r4
 800a5ce:	e7e6      	b.n	800a59e <_strtod_l+0x216>
 800a5d0:	2b0f      	cmp	r3, #15
 800a5d2:	dcee      	bgt.n	800a5b2 <_strtod_l+0x22a>
 800a5d4:	230a      	movs	r3, #10
 800a5d6:	fb03 2606 	mla	r6, r3, r6, r2
 800a5da:	e7ea      	b.n	800a5b2 <_strtod_l+0x22a>
 800a5dc:	461c      	mov	r4, r3
 800a5de:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5e0:	1c5a      	adds	r2, r3, #1
 800a5e2:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5e4:	785a      	ldrb	r2, [r3, #1]
 800a5e6:	4608      	mov	r0, r1
 800a5e8:	4623      	mov	r3, r4
 800a5ea:	e7b7      	b.n	800a55c <_strtod_l+0x1d4>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	2700      	movs	r7, #0
 800a5f0:	9306      	str	r3, [sp, #24]
 800a5f2:	e786      	b.n	800a502 <_strtod_l+0x17a>
 800a5f4:	f04f 0e00 	mov.w	lr, #0
 800a5f8:	f108 0202 	add.w	r2, r8, #2
 800a5fc:	9211      	str	r2, [sp, #68]	@ 0x44
 800a5fe:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a602:	e78f      	b.n	800a524 <_strtod_l+0x19c>
 800a604:	f04f 0e01 	mov.w	lr, #1
 800a608:	e7f6      	b.n	800a5f8 <_strtod_l+0x270>
 800a60a:	bf00      	nop
 800a60c:	0800c3e8 	.word	0x0800c3e8
 800a610:	0800c3d0 	.word	0x0800c3d0
 800a614:	7ff00000 	.word	0x7ff00000
 800a618:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a61a:	1c54      	adds	r4, r2, #1
 800a61c:	9411      	str	r4, [sp, #68]	@ 0x44
 800a61e:	7852      	ldrb	r2, [r2, #1]
 800a620:	2a30      	cmp	r2, #48	@ 0x30
 800a622:	d0f9      	beq.n	800a618 <_strtod_l+0x290>
 800a624:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a628:	2c08      	cmp	r4, #8
 800a62a:	d881      	bhi.n	800a530 <_strtod_l+0x1a8>
 800a62c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a630:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a632:	9209      	str	r2, [sp, #36]	@ 0x24
 800a634:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a636:	1c51      	adds	r1, r2, #1
 800a638:	9111      	str	r1, [sp, #68]	@ 0x44
 800a63a:	7852      	ldrb	r2, [r2, #1]
 800a63c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a640:	2c09      	cmp	r4, #9
 800a642:	d938      	bls.n	800a6b6 <_strtod_l+0x32e>
 800a644:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a646:	1b0c      	subs	r4, r1, r4
 800a648:	2c08      	cmp	r4, #8
 800a64a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a64e:	dc02      	bgt.n	800a656 <_strtod_l+0x2ce>
 800a650:	4564      	cmp	r4, ip
 800a652:	bfa8      	it	ge
 800a654:	4664      	movge	r4, ip
 800a656:	f1be 0f00 	cmp.w	lr, #0
 800a65a:	d000      	beq.n	800a65e <_strtod_l+0x2d6>
 800a65c:	4264      	negs	r4, r4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d14e      	bne.n	800a700 <_strtod_l+0x378>
 800a662:	9b07      	ldr	r3, [sp, #28]
 800a664:	4318      	orrs	r0, r3
 800a666:	f47f aeca 	bne.w	800a3fe <_strtod_l+0x76>
 800a66a:	9b06      	ldr	r3, [sp, #24]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f47f aee2 	bne.w	800a436 <_strtod_l+0xae>
 800a672:	2a69      	cmp	r2, #105	@ 0x69
 800a674:	d027      	beq.n	800a6c6 <_strtod_l+0x33e>
 800a676:	dc24      	bgt.n	800a6c2 <_strtod_l+0x33a>
 800a678:	2a49      	cmp	r2, #73	@ 0x49
 800a67a:	d024      	beq.n	800a6c6 <_strtod_l+0x33e>
 800a67c:	2a4e      	cmp	r2, #78	@ 0x4e
 800a67e:	f47f aeda 	bne.w	800a436 <_strtod_l+0xae>
 800a682:	4997      	ldr	r1, [pc, #604]	@ (800a8e0 <_strtod_l+0x558>)
 800a684:	a811      	add	r0, sp, #68	@ 0x44
 800a686:	f001 f9ab 	bl	800b9e0 <__match>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	f43f aed3 	beq.w	800a436 <_strtod_l+0xae>
 800a690:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b28      	cmp	r3, #40	@ 0x28
 800a696:	d12d      	bne.n	800a6f4 <_strtod_l+0x36c>
 800a698:	4992      	ldr	r1, [pc, #584]	@ (800a8e4 <_strtod_l+0x55c>)
 800a69a:	aa14      	add	r2, sp, #80	@ 0x50
 800a69c:	a811      	add	r0, sp, #68	@ 0x44
 800a69e:	f001 f9b3 	bl	800ba08 <__hexnan>
 800a6a2:	2805      	cmp	r0, #5
 800a6a4:	d126      	bne.n	800a6f4 <_strtod_l+0x36c>
 800a6a6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a6a8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a6ac:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a6b0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a6b4:	e6a3      	b.n	800a3fe <_strtod_l+0x76>
 800a6b6:	240a      	movs	r4, #10
 800a6b8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a6bc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a6c0:	e7b8      	b.n	800a634 <_strtod_l+0x2ac>
 800a6c2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a6c4:	e7db      	b.n	800a67e <_strtod_l+0x2f6>
 800a6c6:	4988      	ldr	r1, [pc, #544]	@ (800a8e8 <_strtod_l+0x560>)
 800a6c8:	a811      	add	r0, sp, #68	@ 0x44
 800a6ca:	f001 f989 	bl	800b9e0 <__match>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	f43f aeb1 	beq.w	800a436 <_strtod_l+0xae>
 800a6d4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6d6:	4985      	ldr	r1, [pc, #532]	@ (800a8ec <_strtod_l+0x564>)
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	a811      	add	r0, sp, #68	@ 0x44
 800a6dc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6de:	f001 f97f 	bl	800b9e0 <__match>
 800a6e2:	b910      	cbnz	r0, 800a6ea <_strtod_l+0x362>
 800a6e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6ea:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a900 <_strtod_l+0x578>
 800a6ee:	f04f 0a00 	mov.w	sl, #0
 800a6f2:	e684      	b.n	800a3fe <_strtod_l+0x76>
 800a6f4:	487e      	ldr	r0, [pc, #504]	@ (800a8f0 <_strtod_l+0x568>)
 800a6f6:	f000 feaf 	bl	800b458 <nan>
 800a6fa:	ec5b ab10 	vmov	sl, fp, d0
 800a6fe:	e67e      	b.n	800a3fe <_strtod_l+0x76>
 800a700:	ee07 9a90 	vmov	s15, r9
 800a704:	1be2      	subs	r2, r4, r7
 800a706:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	bf08      	it	eq
 800a70e:	461d      	moveq	r5, r3
 800a710:	2b10      	cmp	r3, #16
 800a712:	9209      	str	r2, [sp, #36]	@ 0x24
 800a714:	461a      	mov	r2, r3
 800a716:	bfa8      	it	ge
 800a718:	2210      	movge	r2, #16
 800a71a:	2b09      	cmp	r3, #9
 800a71c:	ec5b ab17 	vmov	sl, fp, d7
 800a720:	dc15      	bgt.n	800a74e <_strtod_l+0x3c6>
 800a722:	1be1      	subs	r1, r4, r7
 800a724:	2900      	cmp	r1, #0
 800a726:	f43f ae6a 	beq.w	800a3fe <_strtod_l+0x76>
 800a72a:	eba4 0107 	sub.w	r1, r4, r7
 800a72e:	dd72      	ble.n	800a816 <_strtod_l+0x48e>
 800a730:	2916      	cmp	r1, #22
 800a732:	dc59      	bgt.n	800a7e8 <_strtod_l+0x460>
 800a734:	4b6f      	ldr	r3, [pc, #444]	@ (800a8f4 <_strtod_l+0x56c>)
 800a736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a73c:	ed93 7b00 	vldr	d7, [r3]
 800a740:	ec4b ab16 	vmov	d6, sl, fp
 800a744:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a748:	ec5b ab17 	vmov	sl, fp, d7
 800a74c:	e657      	b.n	800a3fe <_strtod_l+0x76>
 800a74e:	4969      	ldr	r1, [pc, #420]	@ (800a8f4 <_strtod_l+0x56c>)
 800a750:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a754:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a758:	ee06 6a90 	vmov	s13, r6
 800a75c:	2b0f      	cmp	r3, #15
 800a75e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a762:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a766:	ec5b ab16 	vmov	sl, fp, d6
 800a76a:	ddda      	ble.n	800a722 <_strtod_l+0x39a>
 800a76c:	1a9a      	subs	r2, r3, r2
 800a76e:	1be1      	subs	r1, r4, r7
 800a770:	440a      	add	r2, r1
 800a772:	2a00      	cmp	r2, #0
 800a774:	f340 8094 	ble.w	800a8a0 <_strtod_l+0x518>
 800a778:	f012 000f 	ands.w	r0, r2, #15
 800a77c:	d00a      	beq.n	800a794 <_strtod_l+0x40c>
 800a77e:	495d      	ldr	r1, [pc, #372]	@ (800a8f4 <_strtod_l+0x56c>)
 800a780:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a784:	ed91 7b00 	vldr	d7, [r1]
 800a788:	ec4b ab16 	vmov	d6, sl, fp
 800a78c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a790:	ec5b ab17 	vmov	sl, fp, d7
 800a794:	f032 020f 	bics.w	r2, r2, #15
 800a798:	d073      	beq.n	800a882 <_strtod_l+0x4fa>
 800a79a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a79e:	dd47      	ble.n	800a830 <_strtod_l+0x4a8>
 800a7a0:	2400      	movs	r4, #0
 800a7a2:	4625      	mov	r5, r4
 800a7a4:	9407      	str	r4, [sp, #28]
 800a7a6:	4626      	mov	r6, r4
 800a7a8:	9a05      	ldr	r2, [sp, #20]
 800a7aa:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a900 <_strtod_l+0x578>
 800a7ae:	2322      	movs	r3, #34	@ 0x22
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	f04f 0a00 	mov.w	sl, #0
 800a7b6:	9b07      	ldr	r3, [sp, #28]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f43f ae20 	beq.w	800a3fe <_strtod_l+0x76>
 800a7be:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a7c0:	9805      	ldr	r0, [sp, #20]
 800a7c2:	f7ff f957 	bl	8009a74 <_Bfree>
 800a7c6:	9805      	ldr	r0, [sp, #20]
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	f7ff f953 	bl	8009a74 <_Bfree>
 800a7ce:	9805      	ldr	r0, [sp, #20]
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7ff f94f 	bl	8009a74 <_Bfree>
 800a7d6:	9907      	ldr	r1, [sp, #28]
 800a7d8:	9805      	ldr	r0, [sp, #20]
 800a7da:	f7ff f94b 	bl	8009a74 <_Bfree>
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	4621      	mov	r1, r4
 800a7e2:	f7ff f947 	bl	8009a74 <_Bfree>
 800a7e6:	e60a      	b.n	800a3fe <_strtod_l+0x76>
 800a7e8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a7ec:	1be0      	subs	r0, r4, r7
 800a7ee:	4281      	cmp	r1, r0
 800a7f0:	dbbc      	blt.n	800a76c <_strtod_l+0x3e4>
 800a7f2:	4a40      	ldr	r2, [pc, #256]	@ (800a8f4 <_strtod_l+0x56c>)
 800a7f4:	f1c3 030f 	rsb	r3, r3, #15
 800a7f8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a7fc:	ed91 7b00 	vldr	d7, [r1]
 800a800:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a802:	ec4b ab16 	vmov	d6, sl, fp
 800a806:	1acb      	subs	r3, r1, r3
 800a808:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a80c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a810:	ed92 6b00 	vldr	d6, [r2]
 800a814:	e796      	b.n	800a744 <_strtod_l+0x3bc>
 800a816:	3116      	adds	r1, #22
 800a818:	dba8      	blt.n	800a76c <_strtod_l+0x3e4>
 800a81a:	4b36      	ldr	r3, [pc, #216]	@ (800a8f4 <_strtod_l+0x56c>)
 800a81c:	1b3c      	subs	r4, r7, r4
 800a81e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a822:	ed94 7b00 	vldr	d7, [r4]
 800a826:	ec4b ab16 	vmov	d6, sl, fp
 800a82a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a82e:	e78b      	b.n	800a748 <_strtod_l+0x3c0>
 800a830:	2000      	movs	r0, #0
 800a832:	ec4b ab17 	vmov	d7, sl, fp
 800a836:	4e30      	ldr	r6, [pc, #192]	@ (800a8f8 <_strtod_l+0x570>)
 800a838:	1112      	asrs	r2, r2, #4
 800a83a:	4601      	mov	r1, r0
 800a83c:	2a01      	cmp	r2, #1
 800a83e:	dc23      	bgt.n	800a888 <_strtod_l+0x500>
 800a840:	b108      	cbz	r0, 800a846 <_strtod_l+0x4be>
 800a842:	ec5b ab17 	vmov	sl, fp, d7
 800a846:	4a2c      	ldr	r2, [pc, #176]	@ (800a8f8 <_strtod_l+0x570>)
 800a848:	482c      	ldr	r0, [pc, #176]	@ (800a8fc <_strtod_l+0x574>)
 800a84a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a84e:	ed92 7b00 	vldr	d7, [r2]
 800a852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a856:	ec4b ab16 	vmov	d6, sl, fp
 800a85a:	4a29      	ldr	r2, [pc, #164]	@ (800a900 <_strtod_l+0x578>)
 800a85c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a860:	ee17 1a90 	vmov	r1, s15
 800a864:	400a      	ands	r2, r1
 800a866:	4282      	cmp	r2, r0
 800a868:	ec5b ab17 	vmov	sl, fp, d7
 800a86c:	d898      	bhi.n	800a7a0 <_strtod_l+0x418>
 800a86e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a872:	4282      	cmp	r2, r0
 800a874:	bf86      	itte	hi
 800a876:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a904 <_strtod_l+0x57c>
 800a87a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a87e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a882:	2200      	movs	r2, #0
 800a884:	9206      	str	r2, [sp, #24]
 800a886:	e076      	b.n	800a976 <_strtod_l+0x5ee>
 800a888:	f012 0f01 	tst.w	r2, #1
 800a88c:	d004      	beq.n	800a898 <_strtod_l+0x510>
 800a88e:	ed96 6b00 	vldr	d6, [r6]
 800a892:	2001      	movs	r0, #1
 800a894:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a898:	3101      	adds	r1, #1
 800a89a:	1052      	asrs	r2, r2, #1
 800a89c:	3608      	adds	r6, #8
 800a89e:	e7cd      	b.n	800a83c <_strtod_l+0x4b4>
 800a8a0:	d0ef      	beq.n	800a882 <_strtod_l+0x4fa>
 800a8a2:	4252      	negs	r2, r2
 800a8a4:	f012 000f 	ands.w	r0, r2, #15
 800a8a8:	d00a      	beq.n	800a8c0 <_strtod_l+0x538>
 800a8aa:	4912      	ldr	r1, [pc, #72]	@ (800a8f4 <_strtod_l+0x56c>)
 800a8ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a8b0:	ed91 7b00 	vldr	d7, [r1]
 800a8b4:	ec4b ab16 	vmov	d6, sl, fp
 800a8b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a8bc:	ec5b ab17 	vmov	sl, fp, d7
 800a8c0:	1112      	asrs	r2, r2, #4
 800a8c2:	d0de      	beq.n	800a882 <_strtod_l+0x4fa>
 800a8c4:	2a1f      	cmp	r2, #31
 800a8c6:	dd1f      	ble.n	800a908 <_strtod_l+0x580>
 800a8c8:	2400      	movs	r4, #0
 800a8ca:	4625      	mov	r5, r4
 800a8cc:	9407      	str	r4, [sp, #28]
 800a8ce:	4626      	mov	r6, r4
 800a8d0:	9a05      	ldr	r2, [sp, #20]
 800a8d2:	2322      	movs	r3, #34	@ 0x22
 800a8d4:	f04f 0a00 	mov.w	sl, #0
 800a8d8:	f04f 0b00 	mov.w	fp, #0
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	e76a      	b.n	800a7b6 <_strtod_l+0x42e>
 800a8e0:	0800c1c1 	.word	0x0800c1c1
 800a8e4:	0800c3d4 	.word	0x0800c3d4
 800a8e8:	0800c1b9 	.word	0x0800c1b9
 800a8ec:	0800c1f0 	.word	0x0800c1f0
 800a8f0:	0800c57d 	.word	0x0800c57d
 800a8f4:	0800c308 	.word	0x0800c308
 800a8f8:	0800c2e0 	.word	0x0800c2e0
 800a8fc:	7ca00000 	.word	0x7ca00000
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	7fefffff 	.word	0x7fefffff
 800a908:	f012 0110 	ands.w	r1, r2, #16
 800a90c:	bf18      	it	ne
 800a90e:	216a      	movne	r1, #106	@ 0x6a
 800a910:	9106      	str	r1, [sp, #24]
 800a912:	ec4b ab17 	vmov	d7, sl, fp
 800a916:	49b0      	ldr	r1, [pc, #704]	@ (800abd8 <_strtod_l+0x850>)
 800a918:	2000      	movs	r0, #0
 800a91a:	07d6      	lsls	r6, r2, #31
 800a91c:	d504      	bpl.n	800a928 <_strtod_l+0x5a0>
 800a91e:	ed91 6b00 	vldr	d6, [r1]
 800a922:	2001      	movs	r0, #1
 800a924:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a928:	1052      	asrs	r2, r2, #1
 800a92a:	f101 0108 	add.w	r1, r1, #8
 800a92e:	d1f4      	bne.n	800a91a <_strtod_l+0x592>
 800a930:	b108      	cbz	r0, 800a936 <_strtod_l+0x5ae>
 800a932:	ec5b ab17 	vmov	sl, fp, d7
 800a936:	9a06      	ldr	r2, [sp, #24]
 800a938:	b1b2      	cbz	r2, 800a968 <_strtod_l+0x5e0>
 800a93a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a93e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a942:	2a00      	cmp	r2, #0
 800a944:	4658      	mov	r0, fp
 800a946:	dd0f      	ble.n	800a968 <_strtod_l+0x5e0>
 800a948:	2a1f      	cmp	r2, #31
 800a94a:	dd55      	ble.n	800a9f8 <_strtod_l+0x670>
 800a94c:	2a34      	cmp	r2, #52	@ 0x34
 800a94e:	bfde      	ittt	le
 800a950:	f04f 32ff 	movle.w	r2, #4294967295
 800a954:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a958:	408a      	lslle	r2, r1
 800a95a:	f04f 0a00 	mov.w	sl, #0
 800a95e:	bfcc      	ite	gt
 800a960:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a964:	ea02 0b00 	andle.w	fp, r2, r0
 800a968:	ec4b ab17 	vmov	d7, sl, fp
 800a96c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a974:	d0a8      	beq.n	800a8c8 <_strtod_l+0x540>
 800a976:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a978:	9805      	ldr	r0, [sp, #20]
 800a97a:	f8cd 9000 	str.w	r9, [sp]
 800a97e:	462a      	mov	r2, r5
 800a980:	f7ff f8e0 	bl	8009b44 <__s2b>
 800a984:	9007      	str	r0, [sp, #28]
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f af0a 	beq.w	800a7a0 <_strtod_l+0x418>
 800a98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98e:	1b3f      	subs	r7, r7, r4
 800a990:	2b00      	cmp	r3, #0
 800a992:	bfb4      	ite	lt
 800a994:	463b      	movlt	r3, r7
 800a996:	2300      	movge	r3, #0
 800a998:	930a      	str	r3, [sp, #40]	@ 0x28
 800a99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800abc8 <_strtod_l+0x840>
 800a9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a9a4:	2400      	movs	r4, #0
 800a9a6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a9a8:	4625      	mov	r5, r4
 800a9aa:	9b07      	ldr	r3, [sp, #28]
 800a9ac:	9805      	ldr	r0, [sp, #20]
 800a9ae:	6859      	ldr	r1, [r3, #4]
 800a9b0:	f7ff f820 	bl	80099f4 <_Balloc>
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aef6 	beq.w	800a7a8 <_strtod_l+0x420>
 800a9bc:	9b07      	ldr	r3, [sp, #28]
 800a9be:	691a      	ldr	r2, [r3, #16]
 800a9c0:	ec4b ab19 	vmov	d9, sl, fp
 800a9c4:	3202      	adds	r2, #2
 800a9c6:	f103 010c 	add.w	r1, r3, #12
 800a9ca:	0092      	lsls	r2, r2, #2
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	f000 fd33 	bl	800b438 <memcpy>
 800a9d2:	eeb0 0b49 	vmov.f64	d0, d9
 800a9d6:	9805      	ldr	r0, [sp, #20]
 800a9d8:	aa14      	add	r2, sp, #80	@ 0x50
 800a9da:	a913      	add	r1, sp, #76	@ 0x4c
 800a9dc:	f7ff fbee 	bl	800a1bc <__d2b>
 800a9e0:	9012      	str	r0, [sp, #72]	@ 0x48
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f43f aee0 	beq.w	800a7a8 <_strtod_l+0x420>
 800a9e8:	9805      	ldr	r0, [sp, #20]
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	f7ff f940 	bl	8009c70 <__i2b>
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	b940      	cbnz	r0, 800aa06 <_strtod_l+0x67e>
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	e6d7      	b.n	800a7a8 <_strtod_l+0x420>
 800a9f8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9fc:	fa01 f202 	lsl.w	r2, r1, r2
 800aa00:	ea02 0a0a 	and.w	sl, r2, sl
 800aa04:	e7b0      	b.n	800a968 <_strtod_l+0x5e0>
 800aa06:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800aa08:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800aa0a:	2f00      	cmp	r7, #0
 800aa0c:	bfab      	itete	ge
 800aa0e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800aa10:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800aa12:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800aa16:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800aa1a:	bfac      	ite	ge
 800aa1c:	eb07 0903 	addge.w	r9, r7, r3
 800aa20:	eba3 0807 	sublt.w	r8, r3, r7
 800aa24:	9b06      	ldr	r3, [sp, #24]
 800aa26:	1aff      	subs	r7, r7, r3
 800aa28:	4417      	add	r7, r2
 800aa2a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800aa2e:	4a6b      	ldr	r2, [pc, #428]	@ (800abdc <_strtod_l+0x854>)
 800aa30:	3f01      	subs	r7, #1
 800aa32:	4297      	cmp	r7, r2
 800aa34:	da51      	bge.n	800aada <_strtod_l+0x752>
 800aa36:	1bd1      	subs	r1, r2, r7
 800aa38:	291f      	cmp	r1, #31
 800aa3a:	eba3 0301 	sub.w	r3, r3, r1
 800aa3e:	f04f 0201 	mov.w	r2, #1
 800aa42:	dc3e      	bgt.n	800aac2 <_strtod_l+0x73a>
 800aa44:	408a      	lsls	r2, r1
 800aa46:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa48:	2200      	movs	r2, #0
 800aa4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aa4c:	eb09 0703 	add.w	r7, r9, r3
 800aa50:	4498      	add	r8, r3
 800aa52:	9b06      	ldr	r3, [sp, #24]
 800aa54:	45b9      	cmp	r9, r7
 800aa56:	4498      	add	r8, r3
 800aa58:	464b      	mov	r3, r9
 800aa5a:	bfa8      	it	ge
 800aa5c:	463b      	movge	r3, r7
 800aa5e:	4543      	cmp	r3, r8
 800aa60:	bfa8      	it	ge
 800aa62:	4643      	movge	r3, r8
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bfc2      	ittt	gt
 800aa68:	1aff      	subgt	r7, r7, r3
 800aa6a:	eba8 0803 	subgt.w	r8, r8, r3
 800aa6e:	eba9 0903 	subgt.w	r9, r9, r3
 800aa72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd16      	ble.n	800aaa6 <_strtod_l+0x71e>
 800aa78:	4629      	mov	r1, r5
 800aa7a:	9805      	ldr	r0, [sp, #20]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f7ff f9b7 	bl	8009df0 <__pow5mult>
 800aa82:	4605      	mov	r5, r0
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d0b5      	beq.n	800a9f4 <_strtod_l+0x66c>
 800aa88:	4601      	mov	r1, r0
 800aa8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	f7ff f905 	bl	8009c9c <__multiply>
 800aa92:	900f      	str	r0, [sp, #60]	@ 0x3c
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f43f ae87 	beq.w	800a7a8 <_strtod_l+0x420>
 800aa9a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa9c:	9805      	ldr	r0, [sp, #20]
 800aa9e:	f7fe ffe9 	bl	8009a74 <_Bfree>
 800aaa2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaa4:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaa6:	2f00      	cmp	r7, #0
 800aaa8:	dc1b      	bgt.n	800aae2 <_strtod_l+0x75a>
 800aaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	dd21      	ble.n	800aaf4 <_strtod_l+0x76c>
 800aab0:	4631      	mov	r1, r6
 800aab2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	f7ff f99b 	bl	8009df0 <__pow5mult>
 800aaba:	4606      	mov	r6, r0
 800aabc:	b9d0      	cbnz	r0, 800aaf4 <_strtod_l+0x76c>
 800aabe:	2600      	movs	r6, #0
 800aac0:	e672      	b.n	800a7a8 <_strtod_l+0x420>
 800aac2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800aac6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800aaca:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800aace:	37e2      	adds	r7, #226	@ 0xe2
 800aad0:	fa02 f107 	lsl.w	r1, r2, r7
 800aad4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aad6:	920c      	str	r2, [sp, #48]	@ 0x30
 800aad8:	e7b8      	b.n	800aa4c <_strtod_l+0x6c4>
 800aada:	2200      	movs	r2, #0
 800aadc:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aade:	2201      	movs	r2, #1
 800aae0:	e7f9      	b.n	800aad6 <_strtod_l+0x74e>
 800aae2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aae4:	9805      	ldr	r0, [sp, #20]
 800aae6:	463a      	mov	r2, r7
 800aae8:	f7ff f9dc 	bl	8009ea4 <__lshift>
 800aaec:	9012      	str	r0, [sp, #72]	@ 0x48
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1db      	bne.n	800aaaa <_strtod_l+0x722>
 800aaf2:	e659      	b.n	800a7a8 <_strtod_l+0x420>
 800aaf4:	f1b8 0f00 	cmp.w	r8, #0
 800aaf8:	dd07      	ble.n	800ab0a <_strtod_l+0x782>
 800aafa:	4631      	mov	r1, r6
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	4642      	mov	r2, r8
 800ab00:	f7ff f9d0 	bl	8009ea4 <__lshift>
 800ab04:	4606      	mov	r6, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	d0d9      	beq.n	800aabe <_strtod_l+0x736>
 800ab0a:	f1b9 0f00 	cmp.w	r9, #0
 800ab0e:	dd08      	ble.n	800ab22 <_strtod_l+0x79a>
 800ab10:	4629      	mov	r1, r5
 800ab12:	9805      	ldr	r0, [sp, #20]
 800ab14:	464a      	mov	r2, r9
 800ab16:	f7ff f9c5 	bl	8009ea4 <__lshift>
 800ab1a:	4605      	mov	r5, r0
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	f43f ae43 	beq.w	800a7a8 <_strtod_l+0x420>
 800ab22:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ab24:	9805      	ldr	r0, [sp, #20]
 800ab26:	4632      	mov	r2, r6
 800ab28:	f7ff fa44 	bl	8009fb4 <__mdiff>
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f43f ae3a 	beq.w	800a7a8 <_strtod_l+0x420>
 800ab34:	2300      	movs	r3, #0
 800ab36:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ab3a:	60c3      	str	r3, [r0, #12]
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	f7ff fa1d 	bl	8009f7c <__mcmp>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	da4e      	bge.n	800abe4 <_strtod_l+0x85c>
 800ab46:	ea58 080a 	orrs.w	r8, r8, sl
 800ab4a:	d174      	bne.n	800ac36 <_strtod_l+0x8ae>
 800ab4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d170      	bne.n	800ac36 <_strtod_l+0x8ae>
 800ab54:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab58:	0d1b      	lsrs	r3, r3, #20
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab60:	d969      	bls.n	800ac36 <_strtod_l+0x8ae>
 800ab62:	6963      	ldr	r3, [r4, #20]
 800ab64:	b913      	cbnz	r3, 800ab6c <_strtod_l+0x7e4>
 800ab66:	6923      	ldr	r3, [r4, #16]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	dd64      	ble.n	800ac36 <_strtod_l+0x8ae>
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	2201      	movs	r2, #1
 800ab70:	9805      	ldr	r0, [sp, #20]
 800ab72:	f7ff f997 	bl	8009ea4 <__lshift>
 800ab76:	4629      	mov	r1, r5
 800ab78:	4604      	mov	r4, r0
 800ab7a:	f7ff f9ff 	bl	8009f7c <__mcmp>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	dd59      	ble.n	800ac36 <_strtod_l+0x8ae>
 800ab82:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab86:	9a06      	ldr	r2, [sp, #24]
 800ab88:	0d1b      	lsrs	r3, r3, #20
 800ab8a:	051b      	lsls	r3, r3, #20
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	d070      	beq.n	800ac72 <_strtod_l+0x8ea>
 800ab90:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab94:	d86d      	bhi.n	800ac72 <_strtod_l+0x8ea>
 800ab96:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab9a:	f67f ae99 	bls.w	800a8d0 <_strtod_l+0x548>
 800ab9e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800abd0 <_strtod_l+0x848>
 800aba2:	ec4b ab16 	vmov	d6, sl, fp
 800aba6:	4b0e      	ldr	r3, [pc, #56]	@ (800abe0 <_strtod_l+0x858>)
 800aba8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800abac:	ee17 2a90 	vmov	r2, s15
 800abb0:	4013      	ands	r3, r2
 800abb2:	ec5b ab17 	vmov	sl, fp, d7
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f47f ae01 	bne.w	800a7be <_strtod_l+0x436>
 800abbc:	9a05      	ldr	r2, [sp, #20]
 800abbe:	2322      	movs	r3, #34	@ 0x22
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	e5fc      	b.n	800a7be <_strtod_l+0x436>
 800abc4:	f3af 8000 	nop.w
 800abc8:	ffc00000 	.word	0xffc00000
 800abcc:	41dfffff 	.word	0x41dfffff
 800abd0:	00000000 	.word	0x00000000
 800abd4:	39500000 	.word	0x39500000
 800abd8:	0800c400 	.word	0x0800c400
 800abdc:	fffffc02 	.word	0xfffffc02
 800abe0:	7ff00000 	.word	0x7ff00000
 800abe4:	46d9      	mov	r9, fp
 800abe6:	d15d      	bne.n	800aca4 <_strtod_l+0x91c>
 800abe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abec:	f1b8 0f00 	cmp.w	r8, #0
 800abf0:	d02a      	beq.n	800ac48 <_strtod_l+0x8c0>
 800abf2:	4aab      	ldr	r2, [pc, #684]	@ (800aea0 <_strtod_l+0xb18>)
 800abf4:	4293      	cmp	r3, r2
 800abf6:	d12a      	bne.n	800ac4e <_strtod_l+0x8c6>
 800abf8:	9b06      	ldr	r3, [sp, #24]
 800abfa:	4652      	mov	r2, sl
 800abfc:	b1fb      	cbz	r3, 800ac3e <_strtod_l+0x8b6>
 800abfe:	4ba9      	ldr	r3, [pc, #676]	@ (800aea4 <_strtod_l+0xb1c>)
 800ac00:	ea0b 0303 	and.w	r3, fp, r3
 800ac04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ac08:	f04f 31ff 	mov.w	r1, #4294967295
 800ac0c:	d81a      	bhi.n	800ac44 <_strtod_l+0x8bc>
 800ac0e:	0d1b      	lsrs	r3, r3, #20
 800ac10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac14:	fa01 f303 	lsl.w	r3, r1, r3
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d118      	bne.n	800ac4e <_strtod_l+0x8c6>
 800ac1c:	4ba2      	ldr	r3, [pc, #648]	@ (800aea8 <_strtod_l+0xb20>)
 800ac1e:	4599      	cmp	r9, r3
 800ac20:	d102      	bne.n	800ac28 <_strtod_l+0x8a0>
 800ac22:	3201      	adds	r2, #1
 800ac24:	f43f adc0 	beq.w	800a7a8 <_strtod_l+0x420>
 800ac28:	4b9e      	ldr	r3, [pc, #632]	@ (800aea4 <_strtod_l+0xb1c>)
 800ac2a:	ea09 0303 	and.w	r3, r9, r3
 800ac2e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ac32:	f04f 0a00 	mov.w	sl, #0
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1b0      	bne.n	800ab9e <_strtod_l+0x816>
 800ac3c:	e5bf      	b.n	800a7be <_strtod_l+0x436>
 800ac3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac42:	e7e9      	b.n	800ac18 <_strtod_l+0x890>
 800ac44:	460b      	mov	r3, r1
 800ac46:	e7e7      	b.n	800ac18 <_strtod_l+0x890>
 800ac48:	ea53 030a 	orrs.w	r3, r3, sl
 800ac4c:	d099      	beq.n	800ab82 <_strtod_l+0x7fa>
 800ac4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac50:	b1c3      	cbz	r3, 800ac84 <_strtod_l+0x8fc>
 800ac52:	ea13 0f09 	tst.w	r3, r9
 800ac56:	d0ee      	beq.n	800ac36 <_strtod_l+0x8ae>
 800ac58:	9a06      	ldr	r2, [sp, #24]
 800ac5a:	4650      	mov	r0, sl
 800ac5c:	4659      	mov	r1, fp
 800ac5e:	f1b8 0f00 	cmp.w	r8, #0
 800ac62:	d013      	beq.n	800ac8c <_strtod_l+0x904>
 800ac64:	f7ff fb75 	bl	800a352 <sulp>
 800ac68:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ac6c:	ec5b ab17 	vmov	sl, fp, d7
 800ac70:	e7e1      	b.n	800ac36 <_strtod_l+0x8ae>
 800ac72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac7e:	f04f 3aff 	mov.w	sl, #4294967295
 800ac82:	e7d8      	b.n	800ac36 <_strtod_l+0x8ae>
 800ac84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac86:	ea13 0f0a 	tst.w	r3, sl
 800ac8a:	e7e4      	b.n	800ac56 <_strtod_l+0x8ce>
 800ac8c:	f7ff fb61 	bl	800a352 <sulp>
 800ac90:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ac94:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ac98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9c:	ec5b ab10 	vmov	sl, fp, d0
 800aca0:	d1c9      	bne.n	800ac36 <_strtod_l+0x8ae>
 800aca2:	e615      	b.n	800a8d0 <_strtod_l+0x548>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4620      	mov	r0, r4
 800aca8:	f7ff fae0 	bl	800a26c <__ratio>
 800acac:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800acb0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acb8:	d85d      	bhi.n	800ad76 <_strtod_l+0x9ee>
 800acba:	f1b8 0f00 	cmp.w	r8, #0
 800acbe:	d164      	bne.n	800ad8a <_strtod_l+0xa02>
 800acc0:	f1ba 0f00 	cmp.w	sl, #0
 800acc4:	d14b      	bne.n	800ad5e <_strtod_l+0x9d6>
 800acc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acca:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d160      	bne.n	800ad94 <_strtod_l+0xa0c>
 800acd2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800acd6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800acda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acde:	d401      	bmi.n	800ace4 <_strtod_l+0x95c>
 800ace0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ace4:	eeb1 ab48 	vneg.f64	d10, d8
 800ace8:	486e      	ldr	r0, [pc, #440]	@ (800aea4 <_strtod_l+0xb1c>)
 800acea:	4970      	ldr	r1, [pc, #448]	@ (800aeac <_strtod_l+0xb24>)
 800acec:	ea09 0700 	and.w	r7, r9, r0
 800acf0:	428f      	cmp	r7, r1
 800acf2:	ec53 2b1a 	vmov	r2, r3, d10
 800acf6:	d17d      	bne.n	800adf4 <_strtod_l+0xa6c>
 800acf8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800acfc:	ec4b ab1c 	vmov	d12, sl, fp
 800ad00:	eeb0 0b4c 	vmov.f64	d0, d12
 800ad04:	f7ff f9ea 	bl	800a0dc <__ulp>
 800ad08:	4866      	ldr	r0, [pc, #408]	@ (800aea4 <_strtod_l+0xb1c>)
 800ad0a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ad0e:	ee1c 3a90 	vmov	r3, s25
 800ad12:	4a67      	ldr	r2, [pc, #412]	@ (800aeb0 <_strtod_l+0xb28>)
 800ad14:	ea03 0100 	and.w	r1, r3, r0
 800ad18:	4291      	cmp	r1, r2
 800ad1a:	ec5b ab1c 	vmov	sl, fp, d12
 800ad1e:	d93c      	bls.n	800ad9a <_strtod_l+0xa12>
 800ad20:	ee19 2a90 	vmov	r2, s19
 800ad24:	4b60      	ldr	r3, [pc, #384]	@ (800aea8 <_strtod_l+0xb20>)
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d104      	bne.n	800ad34 <_strtod_l+0x9ac>
 800ad2a:	ee19 3a10 	vmov	r3, s18
 800ad2e:	3301      	adds	r3, #1
 800ad30:	f43f ad3a 	beq.w	800a7a8 <_strtod_l+0x420>
 800ad34:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800aea8 <_strtod_l+0xb20>
 800ad38:	f04f 3aff 	mov.w	sl, #4294967295
 800ad3c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ad3e:	9805      	ldr	r0, [sp, #20]
 800ad40:	f7fe fe98 	bl	8009a74 <_Bfree>
 800ad44:	9805      	ldr	r0, [sp, #20]
 800ad46:	4631      	mov	r1, r6
 800ad48:	f7fe fe94 	bl	8009a74 <_Bfree>
 800ad4c:	9805      	ldr	r0, [sp, #20]
 800ad4e:	4629      	mov	r1, r5
 800ad50:	f7fe fe90 	bl	8009a74 <_Bfree>
 800ad54:	9805      	ldr	r0, [sp, #20]
 800ad56:	4621      	mov	r1, r4
 800ad58:	f7fe fe8c 	bl	8009a74 <_Bfree>
 800ad5c:	e625      	b.n	800a9aa <_strtod_l+0x622>
 800ad5e:	f1ba 0f01 	cmp.w	sl, #1
 800ad62:	d103      	bne.n	800ad6c <_strtod_l+0x9e4>
 800ad64:	f1bb 0f00 	cmp.w	fp, #0
 800ad68:	f43f adb2 	beq.w	800a8d0 <_strtod_l+0x548>
 800ad6c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ad70:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ad74:	e7b8      	b.n	800ace8 <_strtod_l+0x960>
 800ad76:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ad7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ad7e:	f1b8 0f00 	cmp.w	r8, #0
 800ad82:	d0af      	beq.n	800ace4 <_strtod_l+0x95c>
 800ad84:	eeb0 ab48 	vmov.f64	d10, d8
 800ad88:	e7ae      	b.n	800ace8 <_strtod_l+0x960>
 800ad8a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ad8e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ad92:	e7a9      	b.n	800ace8 <_strtod_l+0x960>
 800ad94:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ad98:	e7a6      	b.n	800ace8 <_strtod_l+0x960>
 800ad9a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	46d9      	mov	r9, fp
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1ca      	bne.n	800ad3c <_strtod_l+0x9b4>
 800ada6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adaa:	0d1b      	lsrs	r3, r3, #20
 800adac:	051b      	lsls	r3, r3, #20
 800adae:	429f      	cmp	r7, r3
 800adb0:	d1c4      	bne.n	800ad3c <_strtod_l+0x9b4>
 800adb2:	ec51 0b18 	vmov	r0, r1, d8
 800adb6:	f7f5 fcbf 	bl	8000738 <__aeabi_d2lz>
 800adba:	f7f5 fc77 	bl	80006ac <__aeabi_l2d>
 800adbe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800adc2:	ec41 0b17 	vmov	d7, r0, r1
 800adc6:	ea49 090a 	orr.w	r9, r9, sl
 800adca:	ea59 0908 	orrs.w	r9, r9, r8
 800adce:	ee38 8b47 	vsub.f64	d8, d8, d7
 800add2:	d03c      	beq.n	800ae4e <_strtod_l+0xac6>
 800add4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ae88 <_strtod_l+0xb00>
 800add8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800addc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade0:	f53f aced 	bmi.w	800a7be <_strtod_l+0x436>
 800ade4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ae90 <_strtod_l+0xb08>
 800ade8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800adec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adf0:	dda4      	ble.n	800ad3c <_strtod_l+0x9b4>
 800adf2:	e4e4      	b.n	800a7be <_strtod_l+0x436>
 800adf4:	9906      	ldr	r1, [sp, #24]
 800adf6:	b1e1      	cbz	r1, 800ae32 <_strtod_l+0xaaa>
 800adf8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800adfc:	d819      	bhi.n	800ae32 <_strtod_l+0xaaa>
 800adfe:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ae02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae06:	d811      	bhi.n	800ae2c <_strtod_l+0xaa4>
 800ae08:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ae0c:	ee18 3a10 	vmov	r3, s16
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	bf38      	it	cc
 800ae14:	2301      	movcc	r3, #1
 800ae16:	ee08 3a10 	vmov	s16, r3
 800ae1a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ae1e:	f1b8 0f00 	cmp.w	r8, #0
 800ae22:	d111      	bne.n	800ae48 <_strtod_l+0xac0>
 800ae24:	eeb1 7b48 	vneg.f64	d7, d8
 800ae28:	ec53 2b17 	vmov	r2, r3, d7
 800ae2c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ae30:	1bcb      	subs	r3, r1, r7
 800ae32:	eeb0 0b49 	vmov.f64	d0, d9
 800ae36:	ec43 2b1a 	vmov	d10, r2, r3
 800ae3a:	f7ff f94f 	bl	800a0dc <__ulp>
 800ae3e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ae42:	ec5b ab19 	vmov	sl, fp, d9
 800ae46:	e7aa      	b.n	800ad9e <_strtod_l+0xa16>
 800ae48:	eeb0 7b48 	vmov.f64	d7, d8
 800ae4c:	e7ec      	b.n	800ae28 <_strtod_l+0xaa0>
 800ae4e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ae98 <_strtod_l+0xb10>
 800ae52:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ae56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae5a:	f57f af6f 	bpl.w	800ad3c <_strtod_l+0x9b4>
 800ae5e:	e4ae      	b.n	800a7be <_strtod_l+0x436>
 800ae60:	2300      	movs	r3, #0
 800ae62:	9308      	str	r3, [sp, #32]
 800ae64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae68:	6013      	str	r3, [r2, #0]
 800ae6a:	f7ff bacc 	b.w	800a406 <_strtod_l+0x7e>
 800ae6e:	2a65      	cmp	r2, #101	@ 0x65
 800ae70:	f43f abbc 	beq.w	800a5ec <_strtod_l+0x264>
 800ae74:	2a45      	cmp	r2, #69	@ 0x45
 800ae76:	f43f abb9 	beq.w	800a5ec <_strtod_l+0x264>
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	9306      	str	r3, [sp, #24]
 800ae7e:	f7ff bbf0 	b.w	800a662 <_strtod_l+0x2da>
 800ae82:	bf00      	nop
 800ae84:	f3af 8000 	nop.w
 800ae88:	94a03595 	.word	0x94a03595
 800ae8c:	3fdfffff 	.word	0x3fdfffff
 800ae90:	35afe535 	.word	0x35afe535
 800ae94:	3fe00000 	.word	0x3fe00000
 800ae98:	94a03595 	.word	0x94a03595
 800ae9c:	3fcfffff 	.word	0x3fcfffff
 800aea0:	000fffff 	.word	0x000fffff
 800aea4:	7ff00000 	.word	0x7ff00000
 800aea8:	7fefffff 	.word	0x7fefffff
 800aeac:	7fe00000 	.word	0x7fe00000
 800aeb0:	7c9fffff 	.word	0x7c9fffff

0800aeb4 <_strtod_r>:
 800aeb4:	4b01      	ldr	r3, [pc, #4]	@ (800aebc <_strtod_r+0x8>)
 800aeb6:	f7ff ba67 	b.w	800a388 <_strtod_l>
 800aeba:	bf00      	nop
 800aebc:	2400006c 	.word	0x2400006c

0800aec0 <_strtol_l.constprop.0>:
 800aec0:	2b24      	cmp	r3, #36	@ 0x24
 800aec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec6:	4686      	mov	lr, r0
 800aec8:	4690      	mov	r8, r2
 800aeca:	d801      	bhi.n	800aed0 <_strtol_l.constprop.0+0x10>
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d106      	bne.n	800aede <_strtol_l.constprop.0+0x1e>
 800aed0:	f7fd fe7e 	bl	8008bd0 <__errno>
 800aed4:	2316      	movs	r3, #22
 800aed6:	6003      	str	r3, [r0, #0]
 800aed8:	2000      	movs	r0, #0
 800aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aede:	4834      	ldr	r0, [pc, #208]	@ (800afb0 <_strtol_l.constprop.0+0xf0>)
 800aee0:	460d      	mov	r5, r1
 800aee2:	462a      	mov	r2, r5
 800aee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aee8:	5d06      	ldrb	r6, [r0, r4]
 800aeea:	f016 0608 	ands.w	r6, r6, #8
 800aeee:	d1f8      	bne.n	800aee2 <_strtol_l.constprop.0+0x22>
 800aef0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aef2:	d12d      	bne.n	800af50 <_strtol_l.constprop.0+0x90>
 800aef4:	782c      	ldrb	r4, [r5, #0]
 800aef6:	2601      	movs	r6, #1
 800aef8:	1c95      	adds	r5, r2, #2
 800aefa:	f033 0210 	bics.w	r2, r3, #16
 800aefe:	d109      	bne.n	800af14 <_strtol_l.constprop.0+0x54>
 800af00:	2c30      	cmp	r4, #48	@ 0x30
 800af02:	d12a      	bne.n	800af5a <_strtol_l.constprop.0+0x9a>
 800af04:	782a      	ldrb	r2, [r5, #0]
 800af06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800af0a:	2a58      	cmp	r2, #88	@ 0x58
 800af0c:	d125      	bne.n	800af5a <_strtol_l.constprop.0+0x9a>
 800af0e:	786c      	ldrb	r4, [r5, #1]
 800af10:	2310      	movs	r3, #16
 800af12:	3502      	adds	r5, #2
 800af14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800af18:	f10c 3cff 	add.w	ip, ip, #4294967295
 800af1c:	2200      	movs	r2, #0
 800af1e:	fbbc f9f3 	udiv	r9, ip, r3
 800af22:	4610      	mov	r0, r2
 800af24:	fb03 ca19 	mls	sl, r3, r9, ip
 800af28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800af2c:	2f09      	cmp	r7, #9
 800af2e:	d81b      	bhi.n	800af68 <_strtol_l.constprop.0+0xa8>
 800af30:	463c      	mov	r4, r7
 800af32:	42a3      	cmp	r3, r4
 800af34:	dd27      	ble.n	800af86 <_strtol_l.constprop.0+0xc6>
 800af36:	1c57      	adds	r7, r2, #1
 800af38:	d007      	beq.n	800af4a <_strtol_l.constprop.0+0x8a>
 800af3a:	4581      	cmp	r9, r0
 800af3c:	d320      	bcc.n	800af80 <_strtol_l.constprop.0+0xc0>
 800af3e:	d101      	bne.n	800af44 <_strtol_l.constprop.0+0x84>
 800af40:	45a2      	cmp	sl, r4
 800af42:	db1d      	blt.n	800af80 <_strtol_l.constprop.0+0xc0>
 800af44:	fb00 4003 	mla	r0, r0, r3, r4
 800af48:	2201      	movs	r2, #1
 800af4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af4e:	e7eb      	b.n	800af28 <_strtol_l.constprop.0+0x68>
 800af50:	2c2b      	cmp	r4, #43	@ 0x2b
 800af52:	bf04      	itt	eq
 800af54:	782c      	ldrbeq	r4, [r5, #0]
 800af56:	1c95      	addeq	r5, r2, #2
 800af58:	e7cf      	b.n	800aefa <_strtol_l.constprop.0+0x3a>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d1da      	bne.n	800af14 <_strtol_l.constprop.0+0x54>
 800af5e:	2c30      	cmp	r4, #48	@ 0x30
 800af60:	bf0c      	ite	eq
 800af62:	2308      	moveq	r3, #8
 800af64:	230a      	movne	r3, #10
 800af66:	e7d5      	b.n	800af14 <_strtol_l.constprop.0+0x54>
 800af68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800af6c:	2f19      	cmp	r7, #25
 800af6e:	d801      	bhi.n	800af74 <_strtol_l.constprop.0+0xb4>
 800af70:	3c37      	subs	r4, #55	@ 0x37
 800af72:	e7de      	b.n	800af32 <_strtol_l.constprop.0+0x72>
 800af74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800af78:	2f19      	cmp	r7, #25
 800af7a:	d804      	bhi.n	800af86 <_strtol_l.constprop.0+0xc6>
 800af7c:	3c57      	subs	r4, #87	@ 0x57
 800af7e:	e7d8      	b.n	800af32 <_strtol_l.constprop.0+0x72>
 800af80:	f04f 32ff 	mov.w	r2, #4294967295
 800af84:	e7e1      	b.n	800af4a <_strtol_l.constprop.0+0x8a>
 800af86:	1c53      	adds	r3, r2, #1
 800af88:	d108      	bne.n	800af9c <_strtol_l.constprop.0+0xdc>
 800af8a:	2322      	movs	r3, #34	@ 0x22
 800af8c:	f8ce 3000 	str.w	r3, [lr]
 800af90:	4660      	mov	r0, ip
 800af92:	f1b8 0f00 	cmp.w	r8, #0
 800af96:	d0a0      	beq.n	800aeda <_strtol_l.constprop.0+0x1a>
 800af98:	1e69      	subs	r1, r5, #1
 800af9a:	e006      	b.n	800afaa <_strtol_l.constprop.0+0xea>
 800af9c:	b106      	cbz	r6, 800afa0 <_strtol_l.constprop.0+0xe0>
 800af9e:	4240      	negs	r0, r0
 800afa0:	f1b8 0f00 	cmp.w	r8, #0
 800afa4:	d099      	beq.n	800aeda <_strtol_l.constprop.0+0x1a>
 800afa6:	2a00      	cmp	r2, #0
 800afa8:	d1f6      	bne.n	800af98 <_strtol_l.constprop.0+0xd8>
 800afaa:	f8c8 1000 	str.w	r1, [r8]
 800afae:	e794      	b.n	800aeda <_strtol_l.constprop.0+0x1a>
 800afb0:	0800c429 	.word	0x0800c429

0800afb4 <_strtol_r>:
 800afb4:	f7ff bf84 	b.w	800aec0 <_strtol_l.constprop.0>

0800afb8 <__ssputs_r>:
 800afb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	688e      	ldr	r6, [r1, #8]
 800afbe:	461f      	mov	r7, r3
 800afc0:	42be      	cmp	r6, r7
 800afc2:	680b      	ldr	r3, [r1, #0]
 800afc4:	4682      	mov	sl, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	4690      	mov	r8, r2
 800afca:	d82d      	bhi.n	800b028 <__ssputs_r+0x70>
 800afcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afd4:	d026      	beq.n	800b024 <__ssputs_r+0x6c>
 800afd6:	6965      	ldr	r5, [r4, #20]
 800afd8:	6909      	ldr	r1, [r1, #16]
 800afda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afde:	eba3 0901 	sub.w	r9, r3, r1
 800afe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afe6:	1c7b      	adds	r3, r7, #1
 800afe8:	444b      	add	r3, r9
 800afea:	106d      	asrs	r5, r5, #1
 800afec:	429d      	cmp	r5, r3
 800afee:	bf38      	it	cc
 800aff0:	461d      	movcc	r5, r3
 800aff2:	0553      	lsls	r3, r2, #21
 800aff4:	d527      	bpl.n	800b046 <__ssputs_r+0x8e>
 800aff6:	4629      	mov	r1, r5
 800aff8:	f7fe fc70 	bl	80098dc <_malloc_r>
 800affc:	4606      	mov	r6, r0
 800affe:	b360      	cbz	r0, 800b05a <__ssputs_r+0xa2>
 800b000:	6921      	ldr	r1, [r4, #16]
 800b002:	464a      	mov	r2, r9
 800b004:	f000 fa18 	bl	800b438 <memcpy>
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b012:	81a3      	strh	r3, [r4, #12]
 800b014:	6126      	str	r6, [r4, #16]
 800b016:	6165      	str	r5, [r4, #20]
 800b018:	444e      	add	r6, r9
 800b01a:	eba5 0509 	sub.w	r5, r5, r9
 800b01e:	6026      	str	r6, [r4, #0]
 800b020:	60a5      	str	r5, [r4, #8]
 800b022:	463e      	mov	r6, r7
 800b024:	42be      	cmp	r6, r7
 800b026:	d900      	bls.n	800b02a <__ssputs_r+0x72>
 800b028:	463e      	mov	r6, r7
 800b02a:	6820      	ldr	r0, [r4, #0]
 800b02c:	4632      	mov	r2, r6
 800b02e:	4641      	mov	r1, r8
 800b030:	f000 f9c6 	bl	800b3c0 <memmove>
 800b034:	68a3      	ldr	r3, [r4, #8]
 800b036:	1b9b      	subs	r3, r3, r6
 800b038:	60a3      	str	r3, [r4, #8]
 800b03a:	6823      	ldr	r3, [r4, #0]
 800b03c:	4433      	add	r3, r6
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	2000      	movs	r0, #0
 800b042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b046:	462a      	mov	r2, r5
 800b048:	f000 fd8b 	bl	800bb62 <_realloc_r>
 800b04c:	4606      	mov	r6, r0
 800b04e:	2800      	cmp	r0, #0
 800b050:	d1e0      	bne.n	800b014 <__ssputs_r+0x5c>
 800b052:	6921      	ldr	r1, [r4, #16]
 800b054:	4650      	mov	r0, sl
 800b056:	f7fe fbcd 	bl	80097f4 <_free_r>
 800b05a:	230c      	movs	r3, #12
 800b05c:	f8ca 3000 	str.w	r3, [sl]
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	f04f 30ff 	mov.w	r0, #4294967295
 800b06c:	e7e9      	b.n	800b042 <__ssputs_r+0x8a>
	...

0800b070 <_svfiprintf_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	4698      	mov	r8, r3
 800b076:	898b      	ldrh	r3, [r1, #12]
 800b078:	061b      	lsls	r3, r3, #24
 800b07a:	b09d      	sub	sp, #116	@ 0x74
 800b07c:	4607      	mov	r7, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	4614      	mov	r4, r2
 800b082:	d510      	bpl.n	800b0a6 <_svfiprintf_r+0x36>
 800b084:	690b      	ldr	r3, [r1, #16]
 800b086:	b973      	cbnz	r3, 800b0a6 <_svfiprintf_r+0x36>
 800b088:	2140      	movs	r1, #64	@ 0x40
 800b08a:	f7fe fc27 	bl	80098dc <_malloc_r>
 800b08e:	6028      	str	r0, [r5, #0]
 800b090:	6128      	str	r0, [r5, #16]
 800b092:	b930      	cbnz	r0, 800b0a2 <_svfiprintf_r+0x32>
 800b094:	230c      	movs	r3, #12
 800b096:	603b      	str	r3, [r7, #0]
 800b098:	f04f 30ff 	mov.w	r0, #4294967295
 800b09c:	b01d      	add	sp, #116	@ 0x74
 800b09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a2:	2340      	movs	r3, #64	@ 0x40
 800b0a4:	616b      	str	r3, [r5, #20]
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0aa:	2320      	movs	r3, #32
 800b0ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b4:	2330      	movs	r3, #48	@ 0x30
 800b0b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b254 <_svfiprintf_r+0x1e4>
 800b0ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0be:	f04f 0901 	mov.w	r9, #1
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	469a      	mov	sl, r3
 800b0c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ca:	b10a      	cbz	r2, 800b0d0 <_svfiprintf_r+0x60>
 800b0cc:	2a25      	cmp	r2, #37	@ 0x25
 800b0ce:	d1f9      	bne.n	800b0c4 <_svfiprintf_r+0x54>
 800b0d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d4:	d00b      	beq.n	800b0ee <_svfiprintf_r+0x7e>
 800b0d6:	465b      	mov	r3, fp
 800b0d8:	4622      	mov	r2, r4
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f7ff ff6b 	bl	800afb8 <__ssputs_r>
 800b0e2:	3001      	adds	r0, #1
 800b0e4:	f000 80a7 	beq.w	800b236 <_svfiprintf_r+0x1c6>
 800b0e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0ea:	445a      	add	r2, fp
 800b0ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 809f 	beq.w	800b236 <_svfiprintf_r+0x1c6>
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b102:	f10a 0a01 	add.w	sl, sl, #1
 800b106:	9304      	str	r3, [sp, #16]
 800b108:	9307      	str	r3, [sp, #28]
 800b10a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b10e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b110:	4654      	mov	r4, sl
 800b112:	2205      	movs	r2, #5
 800b114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b118:	484e      	ldr	r0, [pc, #312]	@ (800b254 <_svfiprintf_r+0x1e4>)
 800b11a:	f7f5 f8e1 	bl	80002e0 <memchr>
 800b11e:	9a04      	ldr	r2, [sp, #16]
 800b120:	b9d8      	cbnz	r0, 800b15a <_svfiprintf_r+0xea>
 800b122:	06d0      	lsls	r0, r2, #27
 800b124:	bf44      	itt	mi
 800b126:	2320      	movmi	r3, #32
 800b128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b12c:	0711      	lsls	r1, r2, #28
 800b12e:	bf44      	itt	mi
 800b130:	232b      	movmi	r3, #43	@ 0x2b
 800b132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b136:	f89a 3000 	ldrb.w	r3, [sl]
 800b13a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b13c:	d015      	beq.n	800b16a <_svfiprintf_r+0xfa>
 800b13e:	9a07      	ldr	r2, [sp, #28]
 800b140:	4654      	mov	r4, sl
 800b142:	2000      	movs	r0, #0
 800b144:	f04f 0c0a 	mov.w	ip, #10
 800b148:	4621      	mov	r1, r4
 800b14a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b14e:	3b30      	subs	r3, #48	@ 0x30
 800b150:	2b09      	cmp	r3, #9
 800b152:	d94b      	bls.n	800b1ec <_svfiprintf_r+0x17c>
 800b154:	b1b0      	cbz	r0, 800b184 <_svfiprintf_r+0x114>
 800b156:	9207      	str	r2, [sp, #28]
 800b158:	e014      	b.n	800b184 <_svfiprintf_r+0x114>
 800b15a:	eba0 0308 	sub.w	r3, r0, r8
 800b15e:	fa09 f303 	lsl.w	r3, r9, r3
 800b162:	4313      	orrs	r3, r2
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	46a2      	mov	sl, r4
 800b168:	e7d2      	b.n	800b110 <_svfiprintf_r+0xa0>
 800b16a:	9b03      	ldr	r3, [sp, #12]
 800b16c:	1d19      	adds	r1, r3, #4
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	9103      	str	r1, [sp, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	bfbb      	ittet	lt
 800b176:	425b      	neglt	r3, r3
 800b178:	f042 0202 	orrlt.w	r2, r2, #2
 800b17c:	9307      	strge	r3, [sp, #28]
 800b17e:	9307      	strlt	r3, [sp, #28]
 800b180:	bfb8      	it	lt
 800b182:	9204      	strlt	r2, [sp, #16]
 800b184:	7823      	ldrb	r3, [r4, #0]
 800b186:	2b2e      	cmp	r3, #46	@ 0x2e
 800b188:	d10a      	bne.n	800b1a0 <_svfiprintf_r+0x130>
 800b18a:	7863      	ldrb	r3, [r4, #1]
 800b18c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b18e:	d132      	bne.n	800b1f6 <_svfiprintf_r+0x186>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	1d1a      	adds	r2, r3, #4
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	9203      	str	r2, [sp, #12]
 800b198:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b19c:	3402      	adds	r4, #2
 800b19e:	9305      	str	r3, [sp, #20]
 800b1a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b264 <_svfiprintf_r+0x1f4>
 800b1a4:	7821      	ldrb	r1, [r4, #0]
 800b1a6:	2203      	movs	r2, #3
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f7f5 f899 	bl	80002e0 <memchr>
 800b1ae:	b138      	cbz	r0, 800b1c0 <_svfiprintf_r+0x150>
 800b1b0:	9b04      	ldr	r3, [sp, #16]
 800b1b2:	eba0 000a 	sub.w	r0, r0, sl
 800b1b6:	2240      	movs	r2, #64	@ 0x40
 800b1b8:	4082      	lsls	r2, r0
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	3401      	adds	r4, #1
 800b1be:	9304      	str	r3, [sp, #16]
 800b1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c4:	4824      	ldr	r0, [pc, #144]	@ (800b258 <_svfiprintf_r+0x1e8>)
 800b1c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1ca:	2206      	movs	r2, #6
 800b1cc:	f7f5 f888 	bl	80002e0 <memchr>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d036      	beq.n	800b242 <_svfiprintf_r+0x1d2>
 800b1d4:	4b21      	ldr	r3, [pc, #132]	@ (800b25c <_svfiprintf_r+0x1ec>)
 800b1d6:	bb1b      	cbnz	r3, 800b220 <_svfiprintf_r+0x1b0>
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	3307      	adds	r3, #7
 800b1dc:	f023 0307 	bic.w	r3, r3, #7
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	9303      	str	r3, [sp, #12]
 800b1e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1e6:	4433      	add	r3, r6
 800b1e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1ea:	e76a      	b.n	800b0c2 <_svfiprintf_r+0x52>
 800b1ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f0:	460c      	mov	r4, r1
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e7a8      	b.n	800b148 <_svfiprintf_r+0xd8>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	3401      	adds	r4, #1
 800b1fa:	9305      	str	r3, [sp, #20]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f04f 0c0a 	mov.w	ip, #10
 800b202:	4620      	mov	r0, r4
 800b204:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b208:	3a30      	subs	r2, #48	@ 0x30
 800b20a:	2a09      	cmp	r2, #9
 800b20c:	d903      	bls.n	800b216 <_svfiprintf_r+0x1a6>
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d0c6      	beq.n	800b1a0 <_svfiprintf_r+0x130>
 800b212:	9105      	str	r1, [sp, #20]
 800b214:	e7c4      	b.n	800b1a0 <_svfiprintf_r+0x130>
 800b216:	fb0c 2101 	mla	r1, ip, r1, r2
 800b21a:	4604      	mov	r4, r0
 800b21c:	2301      	movs	r3, #1
 800b21e:	e7f0      	b.n	800b202 <_svfiprintf_r+0x192>
 800b220:	ab03      	add	r3, sp, #12
 800b222:	9300      	str	r3, [sp, #0]
 800b224:	462a      	mov	r2, r5
 800b226:	4b0e      	ldr	r3, [pc, #56]	@ (800b260 <_svfiprintf_r+0x1f0>)
 800b228:	a904      	add	r1, sp, #16
 800b22a:	4638      	mov	r0, r7
 800b22c:	f7fc fd70 	bl	8007d10 <_printf_float>
 800b230:	1c42      	adds	r2, r0, #1
 800b232:	4606      	mov	r6, r0
 800b234:	d1d6      	bne.n	800b1e4 <_svfiprintf_r+0x174>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	065b      	lsls	r3, r3, #25
 800b23a:	f53f af2d 	bmi.w	800b098 <_svfiprintf_r+0x28>
 800b23e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b240:	e72c      	b.n	800b09c <_svfiprintf_r+0x2c>
 800b242:	ab03      	add	r3, sp, #12
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	462a      	mov	r2, r5
 800b248:	4b05      	ldr	r3, [pc, #20]	@ (800b260 <_svfiprintf_r+0x1f0>)
 800b24a:	a904      	add	r1, sp, #16
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7fc ffe7 	bl	8008220 <_printf_i>
 800b252:	e7ed      	b.n	800b230 <_svfiprintf_r+0x1c0>
 800b254:	0800c529 	.word	0x0800c529
 800b258:	0800c533 	.word	0x0800c533
 800b25c:	08007d11 	.word	0x08007d11
 800b260:	0800afb9 	.word	0x0800afb9
 800b264:	0800c52f 	.word	0x0800c52f

0800b268 <__sflush_r>:
 800b268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	0716      	lsls	r6, r2, #28
 800b272:	4605      	mov	r5, r0
 800b274:	460c      	mov	r4, r1
 800b276:	d454      	bmi.n	800b322 <__sflush_r+0xba>
 800b278:	684b      	ldr	r3, [r1, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc02      	bgt.n	800b284 <__sflush_r+0x1c>
 800b27e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	dd48      	ble.n	800b316 <__sflush_r+0xae>
 800b284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b286:	2e00      	cmp	r6, #0
 800b288:	d045      	beq.n	800b316 <__sflush_r+0xae>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b290:	682f      	ldr	r7, [r5, #0]
 800b292:	6a21      	ldr	r1, [r4, #32]
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	d030      	beq.n	800b2fa <__sflush_r+0x92>
 800b298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	0759      	lsls	r1, r3, #29
 800b29e:	d505      	bpl.n	800b2ac <__sflush_r+0x44>
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	1ad2      	subs	r2, r2, r3
 800b2a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2a6:	b10b      	cbz	r3, 800b2ac <__sflush_r+0x44>
 800b2a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2b0:	6a21      	ldr	r1, [r4, #32]
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b0      	blx	r6
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	d106      	bne.n	800b2ca <__sflush_r+0x62>
 800b2bc:	6829      	ldr	r1, [r5, #0]
 800b2be:	291d      	cmp	r1, #29
 800b2c0:	d82b      	bhi.n	800b31a <__sflush_r+0xb2>
 800b2c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b36c <__sflush_r+0x104>)
 800b2c4:	410a      	asrs	r2, r1
 800b2c6:	07d6      	lsls	r6, r2, #31
 800b2c8:	d427      	bmi.n	800b31a <__sflush_r+0xb2>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	6062      	str	r2, [r4, #4]
 800b2ce:	04d9      	lsls	r1, r3, #19
 800b2d0:	6922      	ldr	r2, [r4, #16]
 800b2d2:	6022      	str	r2, [r4, #0]
 800b2d4:	d504      	bpl.n	800b2e0 <__sflush_r+0x78>
 800b2d6:	1c42      	adds	r2, r0, #1
 800b2d8:	d101      	bne.n	800b2de <__sflush_r+0x76>
 800b2da:	682b      	ldr	r3, [r5, #0]
 800b2dc:	b903      	cbnz	r3, 800b2e0 <__sflush_r+0x78>
 800b2de:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2e2:	602f      	str	r7, [r5, #0]
 800b2e4:	b1b9      	cbz	r1, 800b316 <__sflush_r+0xae>
 800b2e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d002      	beq.n	800b2f4 <__sflush_r+0x8c>
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7fe fa80 	bl	80097f4 <_free_r>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2f8:	e00d      	b.n	800b316 <__sflush_r+0xae>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b0      	blx	r6
 800b300:	4602      	mov	r2, r0
 800b302:	1c50      	adds	r0, r2, #1
 800b304:	d1c9      	bne.n	800b29a <__sflush_r+0x32>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0c6      	beq.n	800b29a <__sflush_r+0x32>
 800b30c:	2b1d      	cmp	r3, #29
 800b30e:	d001      	beq.n	800b314 <__sflush_r+0xac>
 800b310:	2b16      	cmp	r3, #22
 800b312:	d11e      	bne.n	800b352 <__sflush_r+0xea>
 800b314:	602f      	str	r7, [r5, #0]
 800b316:	2000      	movs	r0, #0
 800b318:	e022      	b.n	800b360 <__sflush_r+0xf8>
 800b31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b31e:	b21b      	sxth	r3, r3
 800b320:	e01b      	b.n	800b35a <__sflush_r+0xf2>
 800b322:	690f      	ldr	r7, [r1, #16]
 800b324:	2f00      	cmp	r7, #0
 800b326:	d0f6      	beq.n	800b316 <__sflush_r+0xae>
 800b328:	0793      	lsls	r3, r2, #30
 800b32a:	680e      	ldr	r6, [r1, #0]
 800b32c:	bf08      	it	eq
 800b32e:	694b      	ldreq	r3, [r1, #20]
 800b330:	600f      	str	r7, [r1, #0]
 800b332:	bf18      	it	ne
 800b334:	2300      	movne	r3, #0
 800b336:	eba6 0807 	sub.w	r8, r6, r7
 800b33a:	608b      	str	r3, [r1, #8]
 800b33c:	f1b8 0f00 	cmp.w	r8, #0
 800b340:	dde9      	ble.n	800b316 <__sflush_r+0xae>
 800b342:	6a21      	ldr	r1, [r4, #32]
 800b344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b346:	4643      	mov	r3, r8
 800b348:	463a      	mov	r2, r7
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b0      	blx	r6
 800b34e:	2800      	cmp	r0, #0
 800b350:	dc08      	bgt.n	800b364 <__sflush_r+0xfc>
 800b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b364:	4407      	add	r7, r0
 800b366:	eba8 0800 	sub.w	r8, r8, r0
 800b36a:	e7e7      	b.n	800b33c <__sflush_r+0xd4>
 800b36c:	dfbffffe 	.word	0xdfbffffe

0800b370 <_fflush_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	690b      	ldr	r3, [r1, #16]
 800b374:	4605      	mov	r5, r0
 800b376:	460c      	mov	r4, r1
 800b378:	b913      	cbnz	r3, 800b380 <_fflush_r+0x10>
 800b37a:	2500      	movs	r5, #0
 800b37c:	4628      	mov	r0, r5
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	b118      	cbz	r0, 800b38a <_fflush_r+0x1a>
 800b382:	6a03      	ldr	r3, [r0, #32]
 800b384:	b90b      	cbnz	r3, 800b38a <_fflush_r+0x1a>
 800b386:	f7fd fb03 	bl	8008990 <__sinit>
 800b38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0f3      	beq.n	800b37a <_fflush_r+0xa>
 800b392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b394:	07d0      	lsls	r0, r2, #31
 800b396:	d404      	bmi.n	800b3a2 <_fflush_r+0x32>
 800b398:	0599      	lsls	r1, r3, #22
 800b39a:	d402      	bmi.n	800b3a2 <_fflush_r+0x32>
 800b39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b39e:	f7fd fc42 	bl	8008c26 <__retarget_lock_acquire_recursive>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	f7ff ff5f 	bl	800b268 <__sflush_r>
 800b3aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3ac:	07da      	lsls	r2, r3, #31
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	d4e4      	bmi.n	800b37c <_fflush_r+0xc>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	059b      	lsls	r3, r3, #22
 800b3b6:	d4e1      	bmi.n	800b37c <_fflush_r+0xc>
 800b3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ba:	f7fd fc35 	bl	8008c28 <__retarget_lock_release_recursive>
 800b3be:	e7dd      	b.n	800b37c <_fflush_r+0xc>

0800b3c0 <memmove>:
 800b3c0:	4288      	cmp	r0, r1
 800b3c2:	b510      	push	{r4, lr}
 800b3c4:	eb01 0402 	add.w	r4, r1, r2
 800b3c8:	d902      	bls.n	800b3d0 <memmove+0x10>
 800b3ca:	4284      	cmp	r4, r0
 800b3cc:	4623      	mov	r3, r4
 800b3ce:	d807      	bhi.n	800b3e0 <memmove+0x20>
 800b3d0:	1e43      	subs	r3, r0, #1
 800b3d2:	42a1      	cmp	r1, r4
 800b3d4:	d008      	beq.n	800b3e8 <memmove+0x28>
 800b3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3de:	e7f8      	b.n	800b3d2 <memmove+0x12>
 800b3e0:	4402      	add	r2, r0
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	428a      	cmp	r2, r1
 800b3e6:	d100      	bne.n	800b3ea <memmove+0x2a>
 800b3e8:	bd10      	pop	{r4, pc}
 800b3ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b3f2:	e7f7      	b.n	800b3e4 <memmove+0x24>

0800b3f4 <strncmp>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	b16a      	cbz	r2, 800b414 <strncmp+0x20>
 800b3f8:	3901      	subs	r1, #1
 800b3fa:	1884      	adds	r4, r0, r2
 800b3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b400:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b404:	429a      	cmp	r2, r3
 800b406:	d103      	bne.n	800b410 <strncmp+0x1c>
 800b408:	42a0      	cmp	r0, r4
 800b40a:	d001      	beq.n	800b410 <strncmp+0x1c>
 800b40c:	2a00      	cmp	r2, #0
 800b40e:	d1f5      	bne.n	800b3fc <strncmp+0x8>
 800b410:	1ad0      	subs	r0, r2, r3
 800b412:	bd10      	pop	{r4, pc}
 800b414:	4610      	mov	r0, r2
 800b416:	e7fc      	b.n	800b412 <strncmp+0x1e>

0800b418 <_sbrk_r>:
 800b418:	b538      	push	{r3, r4, r5, lr}
 800b41a:	4d06      	ldr	r5, [pc, #24]	@ (800b434 <_sbrk_r+0x1c>)
 800b41c:	2300      	movs	r3, #0
 800b41e:	4604      	mov	r4, r0
 800b420:	4608      	mov	r0, r1
 800b422:	602b      	str	r3, [r5, #0]
 800b424:	f7f6 fbe4 	bl	8001bf0 <_sbrk>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d102      	bne.n	800b432 <_sbrk_r+0x1a>
 800b42c:	682b      	ldr	r3, [r5, #0]
 800b42e:	b103      	cbz	r3, 800b432 <_sbrk_r+0x1a>
 800b430:	6023      	str	r3, [r4, #0]
 800b432:	bd38      	pop	{r3, r4, r5, pc}
 800b434:	24000590 	.word	0x24000590

0800b438 <memcpy>:
 800b438:	440a      	add	r2, r1
 800b43a:	4291      	cmp	r1, r2
 800b43c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b440:	d100      	bne.n	800b444 <memcpy+0xc>
 800b442:	4770      	bx	lr
 800b444:	b510      	push	{r4, lr}
 800b446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b44a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b44e:	4291      	cmp	r1, r2
 800b450:	d1f9      	bne.n	800b446 <memcpy+0xe>
 800b452:	bd10      	pop	{r4, pc}
 800b454:	0000      	movs	r0, r0
	...

0800b458 <nan>:
 800b458:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b460 <nan+0x8>
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	00000000 	.word	0x00000000
 800b464:	7ff80000 	.word	0x7ff80000

0800b468 <__assert_func>:
 800b468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b46a:	4614      	mov	r4, r2
 800b46c:	461a      	mov	r2, r3
 800b46e:	4b09      	ldr	r3, [pc, #36]	@ (800b494 <__assert_func+0x2c>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4605      	mov	r5, r0
 800b474:	68d8      	ldr	r0, [r3, #12]
 800b476:	b954      	cbnz	r4, 800b48e <__assert_func+0x26>
 800b478:	4b07      	ldr	r3, [pc, #28]	@ (800b498 <__assert_func+0x30>)
 800b47a:	461c      	mov	r4, r3
 800b47c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b480:	9100      	str	r1, [sp, #0]
 800b482:	462b      	mov	r3, r5
 800b484:	4905      	ldr	r1, [pc, #20]	@ (800b49c <__assert_func+0x34>)
 800b486:	f000 fba7 	bl	800bbd8 <fiprintf>
 800b48a:	f000 fbb7 	bl	800bbfc <abort>
 800b48e:	4b04      	ldr	r3, [pc, #16]	@ (800b4a0 <__assert_func+0x38>)
 800b490:	e7f4      	b.n	800b47c <__assert_func+0x14>
 800b492:	bf00      	nop
 800b494:	2400001c 	.word	0x2400001c
 800b498:	0800c57d 	.word	0x0800c57d
 800b49c:	0800c54f 	.word	0x0800c54f
 800b4a0:	0800c542 	.word	0x0800c542

0800b4a4 <_calloc_r>:
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	fba1 5402 	umull	r5, r4, r1, r2
 800b4aa:	b93c      	cbnz	r4, 800b4bc <_calloc_r+0x18>
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f7fe fa15 	bl	80098dc <_malloc_r>
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	b928      	cbnz	r0, 800b4c2 <_calloc_r+0x1e>
 800b4b6:	2600      	movs	r6, #0
 800b4b8:	4630      	mov	r0, r6
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	220c      	movs	r2, #12
 800b4be:	6002      	str	r2, [r0, #0]
 800b4c0:	e7f9      	b.n	800b4b6 <_calloc_r+0x12>
 800b4c2:	462a      	mov	r2, r5
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f7fd fb30 	bl	8008b2a <memset>
 800b4ca:	e7f5      	b.n	800b4b8 <_calloc_r+0x14>

0800b4cc <rshift>:
 800b4cc:	6903      	ldr	r3, [r0, #16]
 800b4ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4da:	f100 0414 	add.w	r4, r0, #20
 800b4de:	dd45      	ble.n	800b56c <rshift+0xa0>
 800b4e0:	f011 011f 	ands.w	r1, r1, #31
 800b4e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4ec:	d10c      	bne.n	800b508 <rshift+0x3c>
 800b4ee:	f100 0710 	add.w	r7, r0, #16
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	42b1      	cmp	r1, r6
 800b4f6:	d334      	bcc.n	800b562 <rshift+0x96>
 800b4f8:	1a9b      	subs	r3, r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	1eea      	subs	r2, r5, #3
 800b4fe:	4296      	cmp	r6, r2
 800b500:	bf38      	it	cc
 800b502:	2300      	movcc	r3, #0
 800b504:	4423      	add	r3, r4
 800b506:	e015      	b.n	800b534 <rshift+0x68>
 800b508:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b50c:	f1c1 0820 	rsb	r8, r1, #32
 800b510:	40cf      	lsrs	r7, r1
 800b512:	f105 0e04 	add.w	lr, r5, #4
 800b516:	46a1      	mov	r9, r4
 800b518:	4576      	cmp	r6, lr
 800b51a:	46f4      	mov	ip, lr
 800b51c:	d815      	bhi.n	800b54a <rshift+0x7e>
 800b51e:	1a9a      	subs	r2, r3, r2
 800b520:	0092      	lsls	r2, r2, #2
 800b522:	3a04      	subs	r2, #4
 800b524:	3501      	adds	r5, #1
 800b526:	42ae      	cmp	r6, r5
 800b528:	bf38      	it	cc
 800b52a:	2200      	movcc	r2, #0
 800b52c:	18a3      	adds	r3, r4, r2
 800b52e:	50a7      	str	r7, [r4, r2]
 800b530:	b107      	cbz	r7, 800b534 <rshift+0x68>
 800b532:	3304      	adds	r3, #4
 800b534:	1b1a      	subs	r2, r3, r4
 800b536:	42a3      	cmp	r3, r4
 800b538:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b53c:	bf08      	it	eq
 800b53e:	2300      	moveq	r3, #0
 800b540:	6102      	str	r2, [r0, #16]
 800b542:	bf08      	it	eq
 800b544:	6143      	streq	r3, [r0, #20]
 800b546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b54a:	f8dc c000 	ldr.w	ip, [ip]
 800b54e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b552:	ea4c 0707 	orr.w	r7, ip, r7
 800b556:	f849 7b04 	str.w	r7, [r9], #4
 800b55a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b55e:	40cf      	lsrs	r7, r1
 800b560:	e7da      	b.n	800b518 <rshift+0x4c>
 800b562:	f851 cb04 	ldr.w	ip, [r1], #4
 800b566:	f847 cf04 	str.w	ip, [r7, #4]!
 800b56a:	e7c3      	b.n	800b4f4 <rshift+0x28>
 800b56c:	4623      	mov	r3, r4
 800b56e:	e7e1      	b.n	800b534 <rshift+0x68>

0800b570 <__hexdig_fun>:
 800b570:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b574:	2b09      	cmp	r3, #9
 800b576:	d802      	bhi.n	800b57e <__hexdig_fun+0xe>
 800b578:	3820      	subs	r0, #32
 800b57a:	b2c0      	uxtb	r0, r0
 800b57c:	4770      	bx	lr
 800b57e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b582:	2b05      	cmp	r3, #5
 800b584:	d801      	bhi.n	800b58a <__hexdig_fun+0x1a>
 800b586:	3847      	subs	r0, #71	@ 0x47
 800b588:	e7f7      	b.n	800b57a <__hexdig_fun+0xa>
 800b58a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b58e:	2b05      	cmp	r3, #5
 800b590:	d801      	bhi.n	800b596 <__hexdig_fun+0x26>
 800b592:	3827      	subs	r0, #39	@ 0x27
 800b594:	e7f1      	b.n	800b57a <__hexdig_fun+0xa>
 800b596:	2000      	movs	r0, #0
 800b598:	4770      	bx	lr
	...

0800b59c <__gethex>:
 800b59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a0:	b085      	sub	sp, #20
 800b5a2:	468a      	mov	sl, r1
 800b5a4:	9302      	str	r3, [sp, #8]
 800b5a6:	680b      	ldr	r3, [r1, #0]
 800b5a8:	9001      	str	r0, [sp, #4]
 800b5aa:	4690      	mov	r8, r2
 800b5ac:	1c9c      	adds	r4, r3, #2
 800b5ae:	46a1      	mov	r9, r4
 800b5b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b5b4:	2830      	cmp	r0, #48	@ 0x30
 800b5b6:	d0fa      	beq.n	800b5ae <__gethex+0x12>
 800b5b8:	eba9 0303 	sub.w	r3, r9, r3
 800b5bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800b5c0:	f7ff ffd6 	bl	800b570 <__hexdig_fun>
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	d168      	bne.n	800b69c <__gethex+0x100>
 800b5ca:	49a0      	ldr	r1, [pc, #640]	@ (800b84c <__gethex+0x2b0>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f7ff ff10 	bl	800b3f4 <strncmp>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d167      	bne.n	800b6aa <__gethex+0x10e>
 800b5da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b5de:	4626      	mov	r6, r4
 800b5e0:	f7ff ffc6 	bl	800b570 <__hexdig_fun>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d062      	beq.n	800b6ae <__gethex+0x112>
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	7818      	ldrb	r0, [r3, #0]
 800b5ec:	2830      	cmp	r0, #48	@ 0x30
 800b5ee:	4699      	mov	r9, r3
 800b5f0:	f103 0301 	add.w	r3, r3, #1
 800b5f4:	d0f9      	beq.n	800b5ea <__gethex+0x4e>
 800b5f6:	f7ff ffbb 	bl	800b570 <__hexdig_fun>
 800b5fa:	fab0 f580 	clz	r5, r0
 800b5fe:	096d      	lsrs	r5, r5, #5
 800b600:	f04f 0b01 	mov.w	fp, #1
 800b604:	464a      	mov	r2, r9
 800b606:	4616      	mov	r6, r2
 800b608:	3201      	adds	r2, #1
 800b60a:	7830      	ldrb	r0, [r6, #0]
 800b60c:	f7ff ffb0 	bl	800b570 <__hexdig_fun>
 800b610:	2800      	cmp	r0, #0
 800b612:	d1f8      	bne.n	800b606 <__gethex+0x6a>
 800b614:	498d      	ldr	r1, [pc, #564]	@ (800b84c <__gethex+0x2b0>)
 800b616:	2201      	movs	r2, #1
 800b618:	4630      	mov	r0, r6
 800b61a:	f7ff feeb 	bl	800b3f4 <strncmp>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d13f      	bne.n	800b6a2 <__gethex+0x106>
 800b622:	b944      	cbnz	r4, 800b636 <__gethex+0x9a>
 800b624:	1c74      	adds	r4, r6, #1
 800b626:	4622      	mov	r2, r4
 800b628:	4616      	mov	r6, r2
 800b62a:	3201      	adds	r2, #1
 800b62c:	7830      	ldrb	r0, [r6, #0]
 800b62e:	f7ff ff9f 	bl	800b570 <__hexdig_fun>
 800b632:	2800      	cmp	r0, #0
 800b634:	d1f8      	bne.n	800b628 <__gethex+0x8c>
 800b636:	1ba4      	subs	r4, r4, r6
 800b638:	00a7      	lsls	r7, r4, #2
 800b63a:	7833      	ldrb	r3, [r6, #0]
 800b63c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b640:	2b50      	cmp	r3, #80	@ 0x50
 800b642:	d13e      	bne.n	800b6c2 <__gethex+0x126>
 800b644:	7873      	ldrb	r3, [r6, #1]
 800b646:	2b2b      	cmp	r3, #43	@ 0x2b
 800b648:	d033      	beq.n	800b6b2 <__gethex+0x116>
 800b64a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b64c:	d034      	beq.n	800b6b8 <__gethex+0x11c>
 800b64e:	1c71      	adds	r1, r6, #1
 800b650:	2400      	movs	r4, #0
 800b652:	7808      	ldrb	r0, [r1, #0]
 800b654:	f7ff ff8c 	bl	800b570 <__hexdig_fun>
 800b658:	1e43      	subs	r3, r0, #1
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b18      	cmp	r3, #24
 800b65e:	d830      	bhi.n	800b6c2 <__gethex+0x126>
 800b660:	f1a0 0210 	sub.w	r2, r0, #16
 800b664:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b668:	f7ff ff82 	bl	800b570 <__hexdig_fun>
 800b66c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b670:	fa5f fc8c 	uxtb.w	ip, ip
 800b674:	f1bc 0f18 	cmp.w	ip, #24
 800b678:	f04f 030a 	mov.w	r3, #10
 800b67c:	d91e      	bls.n	800b6bc <__gethex+0x120>
 800b67e:	b104      	cbz	r4, 800b682 <__gethex+0xe6>
 800b680:	4252      	negs	r2, r2
 800b682:	4417      	add	r7, r2
 800b684:	f8ca 1000 	str.w	r1, [sl]
 800b688:	b1ed      	cbz	r5, 800b6c6 <__gethex+0x12a>
 800b68a:	f1bb 0f00 	cmp.w	fp, #0
 800b68e:	bf0c      	ite	eq
 800b690:	2506      	moveq	r5, #6
 800b692:	2500      	movne	r5, #0
 800b694:	4628      	mov	r0, r5
 800b696:	b005      	add	sp, #20
 800b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69c:	2500      	movs	r5, #0
 800b69e:	462c      	mov	r4, r5
 800b6a0:	e7b0      	b.n	800b604 <__gethex+0x68>
 800b6a2:	2c00      	cmp	r4, #0
 800b6a4:	d1c7      	bne.n	800b636 <__gethex+0x9a>
 800b6a6:	4627      	mov	r7, r4
 800b6a8:	e7c7      	b.n	800b63a <__gethex+0x9e>
 800b6aa:	464e      	mov	r6, r9
 800b6ac:	462f      	mov	r7, r5
 800b6ae:	2501      	movs	r5, #1
 800b6b0:	e7c3      	b.n	800b63a <__gethex+0x9e>
 800b6b2:	2400      	movs	r4, #0
 800b6b4:	1cb1      	adds	r1, r6, #2
 800b6b6:	e7cc      	b.n	800b652 <__gethex+0xb6>
 800b6b8:	2401      	movs	r4, #1
 800b6ba:	e7fb      	b.n	800b6b4 <__gethex+0x118>
 800b6bc:	fb03 0002 	mla	r0, r3, r2, r0
 800b6c0:	e7ce      	b.n	800b660 <__gethex+0xc4>
 800b6c2:	4631      	mov	r1, r6
 800b6c4:	e7de      	b.n	800b684 <__gethex+0xe8>
 800b6c6:	eba6 0309 	sub.w	r3, r6, r9
 800b6ca:	3b01      	subs	r3, #1
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	2b07      	cmp	r3, #7
 800b6d0:	dc0a      	bgt.n	800b6e8 <__gethex+0x14c>
 800b6d2:	9801      	ldr	r0, [sp, #4]
 800b6d4:	f7fe f98e 	bl	80099f4 <_Balloc>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	b940      	cbnz	r0, 800b6ee <__gethex+0x152>
 800b6dc:	4b5c      	ldr	r3, [pc, #368]	@ (800b850 <__gethex+0x2b4>)
 800b6de:	4602      	mov	r2, r0
 800b6e0:	21e4      	movs	r1, #228	@ 0xe4
 800b6e2:	485c      	ldr	r0, [pc, #368]	@ (800b854 <__gethex+0x2b8>)
 800b6e4:	f7ff fec0 	bl	800b468 <__assert_func>
 800b6e8:	3101      	adds	r1, #1
 800b6ea:	105b      	asrs	r3, r3, #1
 800b6ec:	e7ef      	b.n	800b6ce <__gethex+0x132>
 800b6ee:	f100 0a14 	add.w	sl, r0, #20
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	4655      	mov	r5, sl
 800b6f6:	469b      	mov	fp, r3
 800b6f8:	45b1      	cmp	r9, r6
 800b6fa:	d337      	bcc.n	800b76c <__gethex+0x1d0>
 800b6fc:	f845 bb04 	str.w	fp, [r5], #4
 800b700:	eba5 050a 	sub.w	r5, r5, sl
 800b704:	10ad      	asrs	r5, r5, #2
 800b706:	6125      	str	r5, [r4, #16]
 800b708:	4658      	mov	r0, fp
 800b70a:	f7fe fa65 	bl	8009bd8 <__hi0bits>
 800b70e:	016d      	lsls	r5, r5, #5
 800b710:	f8d8 6000 	ldr.w	r6, [r8]
 800b714:	1a2d      	subs	r5, r5, r0
 800b716:	42b5      	cmp	r5, r6
 800b718:	dd54      	ble.n	800b7c4 <__gethex+0x228>
 800b71a:	1bad      	subs	r5, r5, r6
 800b71c:	4629      	mov	r1, r5
 800b71e:	4620      	mov	r0, r4
 800b720:	f7fe fdf6 	bl	800a310 <__any_on>
 800b724:	4681      	mov	r9, r0
 800b726:	b178      	cbz	r0, 800b748 <__gethex+0x1ac>
 800b728:	1e6b      	subs	r3, r5, #1
 800b72a:	1159      	asrs	r1, r3, #5
 800b72c:	f003 021f 	and.w	r2, r3, #31
 800b730:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b734:	f04f 0901 	mov.w	r9, #1
 800b738:	fa09 f202 	lsl.w	r2, r9, r2
 800b73c:	420a      	tst	r2, r1
 800b73e:	d003      	beq.n	800b748 <__gethex+0x1ac>
 800b740:	454b      	cmp	r3, r9
 800b742:	dc36      	bgt.n	800b7b2 <__gethex+0x216>
 800b744:	f04f 0902 	mov.w	r9, #2
 800b748:	4629      	mov	r1, r5
 800b74a:	4620      	mov	r0, r4
 800b74c:	f7ff febe 	bl	800b4cc <rshift>
 800b750:	442f      	add	r7, r5
 800b752:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b756:	42bb      	cmp	r3, r7
 800b758:	da42      	bge.n	800b7e0 <__gethex+0x244>
 800b75a:	9801      	ldr	r0, [sp, #4]
 800b75c:	4621      	mov	r1, r4
 800b75e:	f7fe f989 	bl	8009a74 <_Bfree>
 800b762:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b764:	2300      	movs	r3, #0
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	25a3      	movs	r5, #163	@ 0xa3
 800b76a:	e793      	b.n	800b694 <__gethex+0xf8>
 800b76c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b770:	2a2e      	cmp	r2, #46	@ 0x2e
 800b772:	d012      	beq.n	800b79a <__gethex+0x1fe>
 800b774:	2b20      	cmp	r3, #32
 800b776:	d104      	bne.n	800b782 <__gethex+0x1e6>
 800b778:	f845 bb04 	str.w	fp, [r5], #4
 800b77c:	f04f 0b00 	mov.w	fp, #0
 800b780:	465b      	mov	r3, fp
 800b782:	7830      	ldrb	r0, [r6, #0]
 800b784:	9303      	str	r3, [sp, #12]
 800b786:	f7ff fef3 	bl	800b570 <__hexdig_fun>
 800b78a:	9b03      	ldr	r3, [sp, #12]
 800b78c:	f000 000f 	and.w	r0, r0, #15
 800b790:	4098      	lsls	r0, r3
 800b792:	ea4b 0b00 	orr.w	fp, fp, r0
 800b796:	3304      	adds	r3, #4
 800b798:	e7ae      	b.n	800b6f8 <__gethex+0x15c>
 800b79a:	45b1      	cmp	r9, r6
 800b79c:	d8ea      	bhi.n	800b774 <__gethex+0x1d8>
 800b79e:	492b      	ldr	r1, [pc, #172]	@ (800b84c <__gethex+0x2b0>)
 800b7a0:	9303      	str	r3, [sp, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	f7ff fe25 	bl	800b3f4 <strncmp>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d1e1      	bne.n	800b774 <__gethex+0x1d8>
 800b7b0:	e7a2      	b.n	800b6f8 <__gethex+0x15c>
 800b7b2:	1ea9      	subs	r1, r5, #2
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f7fe fdab 	bl	800a310 <__any_on>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d0c2      	beq.n	800b744 <__gethex+0x1a8>
 800b7be:	f04f 0903 	mov.w	r9, #3
 800b7c2:	e7c1      	b.n	800b748 <__gethex+0x1ac>
 800b7c4:	da09      	bge.n	800b7da <__gethex+0x23e>
 800b7c6:	1b75      	subs	r5, r6, r5
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	9801      	ldr	r0, [sp, #4]
 800b7cc:	462a      	mov	r2, r5
 800b7ce:	f7fe fb69 	bl	8009ea4 <__lshift>
 800b7d2:	1b7f      	subs	r7, r7, r5
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	f100 0a14 	add.w	sl, r0, #20
 800b7da:	f04f 0900 	mov.w	r9, #0
 800b7de:	e7b8      	b.n	800b752 <__gethex+0x1b6>
 800b7e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b7e4:	42bd      	cmp	r5, r7
 800b7e6:	dd6f      	ble.n	800b8c8 <__gethex+0x32c>
 800b7e8:	1bed      	subs	r5, r5, r7
 800b7ea:	42ae      	cmp	r6, r5
 800b7ec:	dc34      	bgt.n	800b858 <__gethex+0x2bc>
 800b7ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d022      	beq.n	800b83c <__gethex+0x2a0>
 800b7f6:	2b03      	cmp	r3, #3
 800b7f8:	d024      	beq.n	800b844 <__gethex+0x2a8>
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d115      	bne.n	800b82a <__gethex+0x28e>
 800b7fe:	42ae      	cmp	r6, r5
 800b800:	d113      	bne.n	800b82a <__gethex+0x28e>
 800b802:	2e01      	cmp	r6, #1
 800b804:	d10b      	bne.n	800b81e <__gethex+0x282>
 800b806:	9a02      	ldr	r2, [sp, #8]
 800b808:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b80c:	6013      	str	r3, [r2, #0]
 800b80e:	2301      	movs	r3, #1
 800b810:	6123      	str	r3, [r4, #16]
 800b812:	f8ca 3000 	str.w	r3, [sl]
 800b816:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b818:	2562      	movs	r5, #98	@ 0x62
 800b81a:	601c      	str	r4, [r3, #0]
 800b81c:	e73a      	b.n	800b694 <__gethex+0xf8>
 800b81e:	1e71      	subs	r1, r6, #1
 800b820:	4620      	mov	r0, r4
 800b822:	f7fe fd75 	bl	800a310 <__any_on>
 800b826:	2800      	cmp	r0, #0
 800b828:	d1ed      	bne.n	800b806 <__gethex+0x26a>
 800b82a:	9801      	ldr	r0, [sp, #4]
 800b82c:	4621      	mov	r1, r4
 800b82e:	f7fe f921 	bl	8009a74 <_Bfree>
 800b832:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b834:	2300      	movs	r3, #0
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	2550      	movs	r5, #80	@ 0x50
 800b83a:	e72b      	b.n	800b694 <__gethex+0xf8>
 800b83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1f3      	bne.n	800b82a <__gethex+0x28e>
 800b842:	e7e0      	b.n	800b806 <__gethex+0x26a>
 800b844:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1dd      	bne.n	800b806 <__gethex+0x26a>
 800b84a:	e7ee      	b.n	800b82a <__gethex+0x28e>
 800b84c:	0800c3d0 	.word	0x0800c3d0
 800b850:	0800c269 	.word	0x0800c269
 800b854:	0800c57e 	.word	0x0800c57e
 800b858:	1e6f      	subs	r7, r5, #1
 800b85a:	f1b9 0f00 	cmp.w	r9, #0
 800b85e:	d130      	bne.n	800b8c2 <__gethex+0x326>
 800b860:	b127      	cbz	r7, 800b86c <__gethex+0x2d0>
 800b862:	4639      	mov	r1, r7
 800b864:	4620      	mov	r0, r4
 800b866:	f7fe fd53 	bl	800a310 <__any_on>
 800b86a:	4681      	mov	r9, r0
 800b86c:	117a      	asrs	r2, r7, #5
 800b86e:	2301      	movs	r3, #1
 800b870:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b874:	f007 071f 	and.w	r7, r7, #31
 800b878:	40bb      	lsls	r3, r7
 800b87a:	4213      	tst	r3, r2
 800b87c:	4629      	mov	r1, r5
 800b87e:	4620      	mov	r0, r4
 800b880:	bf18      	it	ne
 800b882:	f049 0902 	orrne.w	r9, r9, #2
 800b886:	f7ff fe21 	bl	800b4cc <rshift>
 800b88a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b88e:	1b76      	subs	r6, r6, r5
 800b890:	2502      	movs	r5, #2
 800b892:	f1b9 0f00 	cmp.w	r9, #0
 800b896:	d047      	beq.n	800b928 <__gethex+0x38c>
 800b898:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d015      	beq.n	800b8cc <__gethex+0x330>
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d017      	beq.n	800b8d4 <__gethex+0x338>
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d109      	bne.n	800b8bc <__gethex+0x320>
 800b8a8:	f019 0f02 	tst.w	r9, #2
 800b8ac:	d006      	beq.n	800b8bc <__gethex+0x320>
 800b8ae:	f8da 3000 	ldr.w	r3, [sl]
 800b8b2:	ea49 0903 	orr.w	r9, r9, r3
 800b8b6:	f019 0f01 	tst.w	r9, #1
 800b8ba:	d10e      	bne.n	800b8da <__gethex+0x33e>
 800b8bc:	f045 0510 	orr.w	r5, r5, #16
 800b8c0:	e032      	b.n	800b928 <__gethex+0x38c>
 800b8c2:	f04f 0901 	mov.w	r9, #1
 800b8c6:	e7d1      	b.n	800b86c <__gethex+0x2d0>
 800b8c8:	2501      	movs	r5, #1
 800b8ca:	e7e2      	b.n	800b892 <__gethex+0x2f6>
 800b8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8ce:	f1c3 0301 	rsb	r3, r3, #1
 800b8d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d0f0      	beq.n	800b8bc <__gethex+0x320>
 800b8da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b8de:	f104 0314 	add.w	r3, r4, #20
 800b8e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b8e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b8ea:	f04f 0c00 	mov.w	ip, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b8f8:	d01b      	beq.n	800b932 <__gethex+0x396>
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	6002      	str	r2, [r0, #0]
 800b8fe:	2d02      	cmp	r5, #2
 800b900:	f104 0314 	add.w	r3, r4, #20
 800b904:	d13c      	bne.n	800b980 <__gethex+0x3e4>
 800b906:	f8d8 2000 	ldr.w	r2, [r8]
 800b90a:	3a01      	subs	r2, #1
 800b90c:	42b2      	cmp	r2, r6
 800b90e:	d109      	bne.n	800b924 <__gethex+0x388>
 800b910:	1171      	asrs	r1, r6, #5
 800b912:	2201      	movs	r2, #1
 800b914:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b918:	f006 061f 	and.w	r6, r6, #31
 800b91c:	fa02 f606 	lsl.w	r6, r2, r6
 800b920:	421e      	tst	r6, r3
 800b922:	d13a      	bne.n	800b99a <__gethex+0x3fe>
 800b924:	f045 0520 	orr.w	r5, r5, #32
 800b928:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b92a:	601c      	str	r4, [r3, #0]
 800b92c:	9b02      	ldr	r3, [sp, #8]
 800b92e:	601f      	str	r7, [r3, #0]
 800b930:	e6b0      	b.n	800b694 <__gethex+0xf8>
 800b932:	4299      	cmp	r1, r3
 800b934:	f843 cc04 	str.w	ip, [r3, #-4]
 800b938:	d8d9      	bhi.n	800b8ee <__gethex+0x352>
 800b93a:	68a3      	ldr	r3, [r4, #8]
 800b93c:	459b      	cmp	fp, r3
 800b93e:	db17      	blt.n	800b970 <__gethex+0x3d4>
 800b940:	6861      	ldr	r1, [r4, #4]
 800b942:	9801      	ldr	r0, [sp, #4]
 800b944:	3101      	adds	r1, #1
 800b946:	f7fe f855 	bl	80099f4 <_Balloc>
 800b94a:	4681      	mov	r9, r0
 800b94c:	b918      	cbnz	r0, 800b956 <__gethex+0x3ba>
 800b94e:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b8 <__gethex+0x41c>)
 800b950:	4602      	mov	r2, r0
 800b952:	2184      	movs	r1, #132	@ 0x84
 800b954:	e6c5      	b.n	800b6e2 <__gethex+0x146>
 800b956:	6922      	ldr	r2, [r4, #16]
 800b958:	3202      	adds	r2, #2
 800b95a:	f104 010c 	add.w	r1, r4, #12
 800b95e:	0092      	lsls	r2, r2, #2
 800b960:	300c      	adds	r0, #12
 800b962:	f7ff fd69 	bl	800b438 <memcpy>
 800b966:	4621      	mov	r1, r4
 800b968:	9801      	ldr	r0, [sp, #4]
 800b96a:	f7fe f883 	bl	8009a74 <_Bfree>
 800b96e:	464c      	mov	r4, r9
 800b970:	6923      	ldr	r3, [r4, #16]
 800b972:	1c5a      	adds	r2, r3, #1
 800b974:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b978:	6122      	str	r2, [r4, #16]
 800b97a:	2201      	movs	r2, #1
 800b97c:	615a      	str	r2, [r3, #20]
 800b97e:	e7be      	b.n	800b8fe <__gethex+0x362>
 800b980:	6922      	ldr	r2, [r4, #16]
 800b982:	455a      	cmp	r2, fp
 800b984:	dd0b      	ble.n	800b99e <__gethex+0x402>
 800b986:	2101      	movs	r1, #1
 800b988:	4620      	mov	r0, r4
 800b98a:	f7ff fd9f 	bl	800b4cc <rshift>
 800b98e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b992:	3701      	adds	r7, #1
 800b994:	42bb      	cmp	r3, r7
 800b996:	f6ff aee0 	blt.w	800b75a <__gethex+0x1be>
 800b99a:	2501      	movs	r5, #1
 800b99c:	e7c2      	b.n	800b924 <__gethex+0x388>
 800b99e:	f016 061f 	ands.w	r6, r6, #31
 800b9a2:	d0fa      	beq.n	800b99a <__gethex+0x3fe>
 800b9a4:	4453      	add	r3, sl
 800b9a6:	f1c6 0620 	rsb	r6, r6, #32
 800b9aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b9ae:	f7fe f913 	bl	8009bd8 <__hi0bits>
 800b9b2:	42b0      	cmp	r0, r6
 800b9b4:	dbe7      	blt.n	800b986 <__gethex+0x3ea>
 800b9b6:	e7f0      	b.n	800b99a <__gethex+0x3fe>
 800b9b8:	0800c269 	.word	0x0800c269

0800b9bc <L_shift>:
 800b9bc:	f1c2 0208 	rsb	r2, r2, #8
 800b9c0:	0092      	lsls	r2, r2, #2
 800b9c2:	b570      	push	{r4, r5, r6, lr}
 800b9c4:	f1c2 0620 	rsb	r6, r2, #32
 800b9c8:	6843      	ldr	r3, [r0, #4]
 800b9ca:	6804      	ldr	r4, [r0, #0]
 800b9cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b9d0:	432c      	orrs	r4, r5
 800b9d2:	40d3      	lsrs	r3, r2
 800b9d4:	6004      	str	r4, [r0, #0]
 800b9d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b9da:	4288      	cmp	r0, r1
 800b9dc:	d3f4      	bcc.n	800b9c8 <L_shift+0xc>
 800b9de:	bd70      	pop	{r4, r5, r6, pc}

0800b9e0 <__match>:
 800b9e0:	b530      	push	{r4, r5, lr}
 800b9e2:	6803      	ldr	r3, [r0, #0]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ea:	b914      	cbnz	r4, 800b9f2 <__match+0x12>
 800b9ec:	6003      	str	r3, [r0, #0]
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	bd30      	pop	{r4, r5, pc}
 800b9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b9fa:	2d19      	cmp	r5, #25
 800b9fc:	bf98      	it	ls
 800b9fe:	3220      	addls	r2, #32
 800ba00:	42a2      	cmp	r2, r4
 800ba02:	d0f0      	beq.n	800b9e6 <__match+0x6>
 800ba04:	2000      	movs	r0, #0
 800ba06:	e7f3      	b.n	800b9f0 <__match+0x10>

0800ba08 <__hexnan>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	680b      	ldr	r3, [r1, #0]
 800ba0e:	6801      	ldr	r1, [r0, #0]
 800ba10:	115e      	asrs	r6, r3, #5
 800ba12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba16:	f013 031f 	ands.w	r3, r3, #31
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	bf18      	it	ne
 800ba1e:	3604      	addne	r6, #4
 800ba20:	2500      	movs	r5, #0
 800ba22:	1f37      	subs	r7, r6, #4
 800ba24:	4682      	mov	sl, r0
 800ba26:	4690      	mov	r8, r2
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba2e:	46b9      	mov	r9, r7
 800ba30:	463c      	mov	r4, r7
 800ba32:	9502      	str	r5, [sp, #8]
 800ba34:	46ab      	mov	fp, r5
 800ba36:	784a      	ldrb	r2, [r1, #1]
 800ba38:	1c4b      	adds	r3, r1, #1
 800ba3a:	9303      	str	r3, [sp, #12]
 800ba3c:	b342      	cbz	r2, 800ba90 <__hexnan+0x88>
 800ba3e:	4610      	mov	r0, r2
 800ba40:	9105      	str	r1, [sp, #20]
 800ba42:	9204      	str	r2, [sp, #16]
 800ba44:	f7ff fd94 	bl	800b570 <__hexdig_fun>
 800ba48:	2800      	cmp	r0, #0
 800ba4a:	d151      	bne.n	800baf0 <__hexnan+0xe8>
 800ba4c:	9a04      	ldr	r2, [sp, #16]
 800ba4e:	9905      	ldr	r1, [sp, #20]
 800ba50:	2a20      	cmp	r2, #32
 800ba52:	d818      	bhi.n	800ba86 <__hexnan+0x7e>
 800ba54:	9b02      	ldr	r3, [sp, #8]
 800ba56:	459b      	cmp	fp, r3
 800ba58:	dd13      	ble.n	800ba82 <__hexnan+0x7a>
 800ba5a:	454c      	cmp	r4, r9
 800ba5c:	d206      	bcs.n	800ba6c <__hexnan+0x64>
 800ba5e:	2d07      	cmp	r5, #7
 800ba60:	dc04      	bgt.n	800ba6c <__hexnan+0x64>
 800ba62:	462a      	mov	r2, r5
 800ba64:	4649      	mov	r1, r9
 800ba66:	4620      	mov	r0, r4
 800ba68:	f7ff ffa8 	bl	800b9bc <L_shift>
 800ba6c:	4544      	cmp	r4, r8
 800ba6e:	d952      	bls.n	800bb16 <__hexnan+0x10e>
 800ba70:	2300      	movs	r3, #0
 800ba72:	f1a4 0904 	sub.w	r9, r4, #4
 800ba76:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba7a:	f8cd b008 	str.w	fp, [sp, #8]
 800ba7e:	464c      	mov	r4, r9
 800ba80:	461d      	mov	r5, r3
 800ba82:	9903      	ldr	r1, [sp, #12]
 800ba84:	e7d7      	b.n	800ba36 <__hexnan+0x2e>
 800ba86:	2a29      	cmp	r2, #41	@ 0x29
 800ba88:	d157      	bne.n	800bb3a <__hexnan+0x132>
 800ba8a:	3102      	adds	r1, #2
 800ba8c:	f8ca 1000 	str.w	r1, [sl]
 800ba90:	f1bb 0f00 	cmp.w	fp, #0
 800ba94:	d051      	beq.n	800bb3a <__hexnan+0x132>
 800ba96:	454c      	cmp	r4, r9
 800ba98:	d206      	bcs.n	800baa8 <__hexnan+0xa0>
 800ba9a:	2d07      	cmp	r5, #7
 800ba9c:	dc04      	bgt.n	800baa8 <__hexnan+0xa0>
 800ba9e:	462a      	mov	r2, r5
 800baa0:	4649      	mov	r1, r9
 800baa2:	4620      	mov	r0, r4
 800baa4:	f7ff ff8a 	bl	800b9bc <L_shift>
 800baa8:	4544      	cmp	r4, r8
 800baaa:	d936      	bls.n	800bb1a <__hexnan+0x112>
 800baac:	f1a8 0204 	sub.w	r2, r8, #4
 800bab0:	4623      	mov	r3, r4
 800bab2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bab6:	f842 1f04 	str.w	r1, [r2, #4]!
 800baba:	429f      	cmp	r7, r3
 800babc:	d2f9      	bcs.n	800bab2 <__hexnan+0xaa>
 800babe:	1b3b      	subs	r3, r7, r4
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	3304      	adds	r3, #4
 800bac6:	3401      	adds	r4, #1
 800bac8:	3e03      	subs	r6, #3
 800baca:	42b4      	cmp	r4, r6
 800bacc:	bf88      	it	hi
 800bace:	2304      	movhi	r3, #4
 800bad0:	4443      	add	r3, r8
 800bad2:	2200      	movs	r2, #0
 800bad4:	f843 2b04 	str.w	r2, [r3], #4
 800bad8:	429f      	cmp	r7, r3
 800bada:	d2fb      	bcs.n	800bad4 <__hexnan+0xcc>
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	b91b      	cbnz	r3, 800bae8 <__hexnan+0xe0>
 800bae0:	4547      	cmp	r7, r8
 800bae2:	d128      	bne.n	800bb36 <__hexnan+0x12e>
 800bae4:	2301      	movs	r3, #1
 800bae6:	603b      	str	r3, [r7, #0]
 800bae8:	2005      	movs	r0, #5
 800baea:	b007      	add	sp, #28
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf0:	3501      	adds	r5, #1
 800baf2:	2d08      	cmp	r5, #8
 800baf4:	f10b 0b01 	add.w	fp, fp, #1
 800baf8:	dd06      	ble.n	800bb08 <__hexnan+0x100>
 800bafa:	4544      	cmp	r4, r8
 800bafc:	d9c1      	bls.n	800ba82 <__hexnan+0x7a>
 800bafe:	2300      	movs	r3, #0
 800bb00:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb04:	2501      	movs	r5, #1
 800bb06:	3c04      	subs	r4, #4
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	f000 000f 	and.w	r0, r0, #15
 800bb0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb12:	6020      	str	r0, [r4, #0]
 800bb14:	e7b5      	b.n	800ba82 <__hexnan+0x7a>
 800bb16:	2508      	movs	r5, #8
 800bb18:	e7b3      	b.n	800ba82 <__hexnan+0x7a>
 800bb1a:	9b01      	ldr	r3, [sp, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d0dd      	beq.n	800badc <__hexnan+0xd4>
 800bb20:	f1c3 0320 	rsb	r3, r3, #32
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	40da      	lsrs	r2, r3
 800bb2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb2e:	4013      	ands	r3, r2
 800bb30:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb34:	e7d2      	b.n	800badc <__hexnan+0xd4>
 800bb36:	3f04      	subs	r7, #4
 800bb38:	e7d0      	b.n	800badc <__hexnan+0xd4>
 800bb3a:	2004      	movs	r0, #4
 800bb3c:	e7d5      	b.n	800baea <__hexnan+0xe2>

0800bb3e <__ascii_mbtowc>:
 800bb3e:	b082      	sub	sp, #8
 800bb40:	b901      	cbnz	r1, 800bb44 <__ascii_mbtowc+0x6>
 800bb42:	a901      	add	r1, sp, #4
 800bb44:	b142      	cbz	r2, 800bb58 <__ascii_mbtowc+0x1a>
 800bb46:	b14b      	cbz	r3, 800bb5c <__ascii_mbtowc+0x1e>
 800bb48:	7813      	ldrb	r3, [r2, #0]
 800bb4a:	600b      	str	r3, [r1, #0]
 800bb4c:	7812      	ldrb	r2, [r2, #0]
 800bb4e:	1e10      	subs	r0, r2, #0
 800bb50:	bf18      	it	ne
 800bb52:	2001      	movne	r0, #1
 800bb54:	b002      	add	sp, #8
 800bb56:	4770      	bx	lr
 800bb58:	4610      	mov	r0, r2
 800bb5a:	e7fb      	b.n	800bb54 <__ascii_mbtowc+0x16>
 800bb5c:	f06f 0001 	mvn.w	r0, #1
 800bb60:	e7f8      	b.n	800bb54 <__ascii_mbtowc+0x16>

0800bb62 <_realloc_r>:
 800bb62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb66:	4680      	mov	r8, r0
 800bb68:	4615      	mov	r5, r2
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	b921      	cbnz	r1, 800bb78 <_realloc_r+0x16>
 800bb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb72:	4611      	mov	r1, r2
 800bb74:	f7fd beb2 	b.w	80098dc <_malloc_r>
 800bb78:	b92a      	cbnz	r2, 800bb86 <_realloc_r+0x24>
 800bb7a:	f7fd fe3b 	bl	80097f4 <_free_r>
 800bb7e:	2400      	movs	r4, #0
 800bb80:	4620      	mov	r0, r4
 800bb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb86:	f000 f840 	bl	800bc0a <_malloc_usable_size_r>
 800bb8a:	4285      	cmp	r5, r0
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	d802      	bhi.n	800bb96 <_realloc_r+0x34>
 800bb90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb94:	d8f4      	bhi.n	800bb80 <_realloc_r+0x1e>
 800bb96:	4629      	mov	r1, r5
 800bb98:	4640      	mov	r0, r8
 800bb9a:	f7fd fe9f 	bl	80098dc <_malloc_r>
 800bb9e:	4607      	mov	r7, r0
 800bba0:	2800      	cmp	r0, #0
 800bba2:	d0ec      	beq.n	800bb7e <_realloc_r+0x1c>
 800bba4:	42b5      	cmp	r5, r6
 800bba6:	462a      	mov	r2, r5
 800bba8:	4621      	mov	r1, r4
 800bbaa:	bf28      	it	cs
 800bbac:	4632      	movcs	r2, r6
 800bbae:	f7ff fc43 	bl	800b438 <memcpy>
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	f7fd fe1d 	bl	80097f4 <_free_r>
 800bbba:	463c      	mov	r4, r7
 800bbbc:	e7e0      	b.n	800bb80 <_realloc_r+0x1e>

0800bbbe <__ascii_wctomb>:
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	b141      	cbz	r1, 800bbd6 <__ascii_wctomb+0x18>
 800bbc4:	2aff      	cmp	r2, #255	@ 0xff
 800bbc6:	d904      	bls.n	800bbd2 <__ascii_wctomb+0x14>
 800bbc8:	228a      	movs	r2, #138	@ 0x8a
 800bbca:	601a      	str	r2, [r3, #0]
 800bbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd0:	4770      	bx	lr
 800bbd2:	700a      	strb	r2, [r1, #0]
 800bbd4:	2001      	movs	r0, #1
 800bbd6:	4770      	bx	lr

0800bbd8 <fiprintf>:
 800bbd8:	b40e      	push	{r1, r2, r3}
 800bbda:	b503      	push	{r0, r1, lr}
 800bbdc:	4601      	mov	r1, r0
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	4805      	ldr	r0, [pc, #20]	@ (800bbf8 <fiprintf+0x20>)
 800bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f000 f83f 	bl	800bc6c <_vfiprintf_r>
 800bbee:	b002      	add	sp, #8
 800bbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf4:	b003      	add	sp, #12
 800bbf6:	4770      	bx	lr
 800bbf8:	2400001c 	.word	0x2400001c

0800bbfc <abort>:
 800bbfc:	b508      	push	{r3, lr}
 800bbfe:	2006      	movs	r0, #6
 800bc00:	f000 fa08 	bl	800c014 <raise>
 800bc04:	2001      	movs	r0, #1
 800bc06:	f7f5 ff97 	bl	8001b38 <_exit>

0800bc0a <_malloc_usable_size_r>:
 800bc0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0e:	1f18      	subs	r0, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	bfbc      	itt	lt
 800bc14:	580b      	ldrlt	r3, [r1, r0]
 800bc16:	18c0      	addlt	r0, r0, r3
 800bc18:	4770      	bx	lr

0800bc1a <__sfputc_r>:
 800bc1a:	6893      	ldr	r3, [r2, #8]
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	b410      	push	{r4}
 800bc22:	6093      	str	r3, [r2, #8]
 800bc24:	da08      	bge.n	800bc38 <__sfputc_r+0x1e>
 800bc26:	6994      	ldr	r4, [r2, #24]
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	db01      	blt.n	800bc30 <__sfputc_r+0x16>
 800bc2c:	290a      	cmp	r1, #10
 800bc2e:	d103      	bne.n	800bc38 <__sfputc_r+0x1e>
 800bc30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc34:	f000 b932 	b.w	800be9c <__swbuf_r>
 800bc38:	6813      	ldr	r3, [r2, #0]
 800bc3a:	1c58      	adds	r0, r3, #1
 800bc3c:	6010      	str	r0, [r2, #0]
 800bc3e:	7019      	strb	r1, [r3, #0]
 800bc40:	4608      	mov	r0, r1
 800bc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <__sfputs_r>:
 800bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	4614      	mov	r4, r2
 800bc50:	18d5      	adds	r5, r2, r3
 800bc52:	42ac      	cmp	r4, r5
 800bc54:	d101      	bne.n	800bc5a <__sfputs_r+0x12>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e007      	b.n	800bc6a <__sfputs_r+0x22>
 800bc5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5e:	463a      	mov	r2, r7
 800bc60:	4630      	mov	r0, r6
 800bc62:	f7ff ffda 	bl	800bc1a <__sfputc_r>
 800bc66:	1c43      	adds	r3, r0, #1
 800bc68:	d1f3      	bne.n	800bc52 <__sfputs_r+0xa>
 800bc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc6c <_vfiprintf_r>:
 800bc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc70:	460d      	mov	r5, r1
 800bc72:	b09d      	sub	sp, #116	@ 0x74
 800bc74:	4614      	mov	r4, r2
 800bc76:	4698      	mov	r8, r3
 800bc78:	4606      	mov	r6, r0
 800bc7a:	b118      	cbz	r0, 800bc84 <_vfiprintf_r+0x18>
 800bc7c:	6a03      	ldr	r3, [r0, #32]
 800bc7e:	b90b      	cbnz	r3, 800bc84 <_vfiprintf_r+0x18>
 800bc80:	f7fc fe86 	bl	8008990 <__sinit>
 800bc84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc86:	07d9      	lsls	r1, r3, #31
 800bc88:	d405      	bmi.n	800bc96 <_vfiprintf_r+0x2a>
 800bc8a:	89ab      	ldrh	r3, [r5, #12]
 800bc8c:	059a      	lsls	r2, r3, #22
 800bc8e:	d402      	bmi.n	800bc96 <_vfiprintf_r+0x2a>
 800bc90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc92:	f7fc ffc8 	bl	8008c26 <__retarget_lock_acquire_recursive>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	071b      	lsls	r3, r3, #28
 800bc9a:	d501      	bpl.n	800bca0 <_vfiprintf_r+0x34>
 800bc9c:	692b      	ldr	r3, [r5, #16]
 800bc9e:	b99b      	cbnz	r3, 800bcc8 <_vfiprintf_r+0x5c>
 800bca0:	4629      	mov	r1, r5
 800bca2:	4630      	mov	r0, r6
 800bca4:	f000 f938 	bl	800bf18 <__swsetup_r>
 800bca8:	b170      	cbz	r0, 800bcc8 <_vfiprintf_r+0x5c>
 800bcaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcac:	07dc      	lsls	r4, r3, #31
 800bcae:	d504      	bpl.n	800bcba <_vfiprintf_r+0x4e>
 800bcb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb4:	b01d      	add	sp, #116	@ 0x74
 800bcb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	0598      	lsls	r0, r3, #22
 800bcbe:	d4f7      	bmi.n	800bcb0 <_vfiprintf_r+0x44>
 800bcc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcc2:	f7fc ffb1 	bl	8008c28 <__retarget_lock_release_recursive>
 800bcc6:	e7f3      	b.n	800bcb0 <_vfiprintf_r+0x44>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	9309      	str	r3, [sp, #36]	@ 0x24
 800bccc:	2320      	movs	r3, #32
 800bcce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcd6:	2330      	movs	r3, #48	@ 0x30
 800bcd8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be88 <_vfiprintf_r+0x21c>
 800bcdc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bce0:	f04f 0901 	mov.w	r9, #1
 800bce4:	4623      	mov	r3, r4
 800bce6:	469a      	mov	sl, r3
 800bce8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcec:	b10a      	cbz	r2, 800bcf2 <_vfiprintf_r+0x86>
 800bcee:	2a25      	cmp	r2, #37	@ 0x25
 800bcf0:	d1f9      	bne.n	800bce6 <_vfiprintf_r+0x7a>
 800bcf2:	ebba 0b04 	subs.w	fp, sl, r4
 800bcf6:	d00b      	beq.n	800bd10 <_vfiprintf_r+0xa4>
 800bcf8:	465b      	mov	r3, fp
 800bcfa:	4622      	mov	r2, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f7ff ffa2 	bl	800bc48 <__sfputs_r>
 800bd04:	3001      	adds	r0, #1
 800bd06:	f000 80a7 	beq.w	800be58 <_vfiprintf_r+0x1ec>
 800bd0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd0c:	445a      	add	r2, fp
 800bd0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd10:	f89a 3000 	ldrb.w	r3, [sl]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 809f 	beq.w	800be58 <_vfiprintf_r+0x1ec>
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd24:	f10a 0a01 	add.w	sl, sl, #1
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	9307      	str	r3, [sp, #28]
 800bd2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd30:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd32:	4654      	mov	r4, sl
 800bd34:	2205      	movs	r2, #5
 800bd36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3a:	4853      	ldr	r0, [pc, #332]	@ (800be88 <_vfiprintf_r+0x21c>)
 800bd3c:	f7f4 fad0 	bl	80002e0 <memchr>
 800bd40:	9a04      	ldr	r2, [sp, #16]
 800bd42:	b9d8      	cbnz	r0, 800bd7c <_vfiprintf_r+0x110>
 800bd44:	06d1      	lsls	r1, r2, #27
 800bd46:	bf44      	itt	mi
 800bd48:	2320      	movmi	r3, #32
 800bd4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd4e:	0713      	lsls	r3, r2, #28
 800bd50:	bf44      	itt	mi
 800bd52:	232b      	movmi	r3, #43	@ 0x2b
 800bd54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd58:	f89a 3000 	ldrb.w	r3, [sl]
 800bd5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd5e:	d015      	beq.n	800bd8c <_vfiprintf_r+0x120>
 800bd60:	9a07      	ldr	r2, [sp, #28]
 800bd62:	4654      	mov	r4, sl
 800bd64:	2000      	movs	r0, #0
 800bd66:	f04f 0c0a 	mov.w	ip, #10
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd70:	3b30      	subs	r3, #48	@ 0x30
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	d94b      	bls.n	800be0e <_vfiprintf_r+0x1a2>
 800bd76:	b1b0      	cbz	r0, 800bda6 <_vfiprintf_r+0x13a>
 800bd78:	9207      	str	r2, [sp, #28]
 800bd7a:	e014      	b.n	800bda6 <_vfiprintf_r+0x13a>
 800bd7c:	eba0 0308 	sub.w	r3, r0, r8
 800bd80:	fa09 f303 	lsl.w	r3, r9, r3
 800bd84:	4313      	orrs	r3, r2
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	46a2      	mov	sl, r4
 800bd8a:	e7d2      	b.n	800bd32 <_vfiprintf_r+0xc6>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1d19      	adds	r1, r3, #4
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	9103      	str	r1, [sp, #12]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	bfbb      	ittet	lt
 800bd98:	425b      	neglt	r3, r3
 800bd9a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd9e:	9307      	strge	r3, [sp, #28]
 800bda0:	9307      	strlt	r3, [sp, #28]
 800bda2:	bfb8      	it	lt
 800bda4:	9204      	strlt	r2, [sp, #16]
 800bda6:	7823      	ldrb	r3, [r4, #0]
 800bda8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdaa:	d10a      	bne.n	800bdc2 <_vfiprintf_r+0x156>
 800bdac:	7863      	ldrb	r3, [r4, #1]
 800bdae:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdb0:	d132      	bne.n	800be18 <_vfiprintf_r+0x1ac>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	1d1a      	adds	r2, r3, #4
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	9203      	str	r2, [sp, #12]
 800bdba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdbe:	3402      	adds	r4, #2
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be98 <_vfiprintf_r+0x22c>
 800bdc6:	7821      	ldrb	r1, [r4, #0]
 800bdc8:	2203      	movs	r2, #3
 800bdca:	4650      	mov	r0, sl
 800bdcc:	f7f4 fa88 	bl	80002e0 <memchr>
 800bdd0:	b138      	cbz	r0, 800bde2 <_vfiprintf_r+0x176>
 800bdd2:	9b04      	ldr	r3, [sp, #16]
 800bdd4:	eba0 000a 	sub.w	r0, r0, sl
 800bdd8:	2240      	movs	r2, #64	@ 0x40
 800bdda:	4082      	lsls	r2, r0
 800bddc:	4313      	orrs	r3, r2
 800bdde:	3401      	adds	r4, #1
 800bde0:	9304      	str	r3, [sp, #16]
 800bde2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde6:	4829      	ldr	r0, [pc, #164]	@ (800be8c <_vfiprintf_r+0x220>)
 800bde8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdec:	2206      	movs	r2, #6
 800bdee:	f7f4 fa77 	bl	80002e0 <memchr>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d03f      	beq.n	800be76 <_vfiprintf_r+0x20a>
 800bdf6:	4b26      	ldr	r3, [pc, #152]	@ (800be90 <_vfiprintf_r+0x224>)
 800bdf8:	bb1b      	cbnz	r3, 800be42 <_vfiprintf_r+0x1d6>
 800bdfa:	9b03      	ldr	r3, [sp, #12]
 800bdfc:	3307      	adds	r3, #7
 800bdfe:	f023 0307 	bic.w	r3, r3, #7
 800be02:	3308      	adds	r3, #8
 800be04:	9303      	str	r3, [sp, #12]
 800be06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be08:	443b      	add	r3, r7
 800be0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be0c:	e76a      	b.n	800bce4 <_vfiprintf_r+0x78>
 800be0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be12:	460c      	mov	r4, r1
 800be14:	2001      	movs	r0, #1
 800be16:	e7a8      	b.n	800bd6a <_vfiprintf_r+0xfe>
 800be18:	2300      	movs	r3, #0
 800be1a:	3401      	adds	r4, #1
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	4619      	mov	r1, r3
 800be20:	f04f 0c0a 	mov.w	ip, #10
 800be24:	4620      	mov	r0, r4
 800be26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be2a:	3a30      	subs	r2, #48	@ 0x30
 800be2c:	2a09      	cmp	r2, #9
 800be2e:	d903      	bls.n	800be38 <_vfiprintf_r+0x1cc>
 800be30:	2b00      	cmp	r3, #0
 800be32:	d0c6      	beq.n	800bdc2 <_vfiprintf_r+0x156>
 800be34:	9105      	str	r1, [sp, #20]
 800be36:	e7c4      	b.n	800bdc2 <_vfiprintf_r+0x156>
 800be38:	fb0c 2101 	mla	r1, ip, r1, r2
 800be3c:	4604      	mov	r4, r0
 800be3e:	2301      	movs	r3, #1
 800be40:	e7f0      	b.n	800be24 <_vfiprintf_r+0x1b8>
 800be42:	ab03      	add	r3, sp, #12
 800be44:	9300      	str	r3, [sp, #0]
 800be46:	462a      	mov	r2, r5
 800be48:	4b12      	ldr	r3, [pc, #72]	@ (800be94 <_vfiprintf_r+0x228>)
 800be4a:	a904      	add	r1, sp, #16
 800be4c:	4630      	mov	r0, r6
 800be4e:	f7fb ff5f 	bl	8007d10 <_printf_float>
 800be52:	4607      	mov	r7, r0
 800be54:	1c78      	adds	r0, r7, #1
 800be56:	d1d6      	bne.n	800be06 <_vfiprintf_r+0x19a>
 800be58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be5a:	07d9      	lsls	r1, r3, #31
 800be5c:	d405      	bmi.n	800be6a <_vfiprintf_r+0x1fe>
 800be5e:	89ab      	ldrh	r3, [r5, #12]
 800be60:	059a      	lsls	r2, r3, #22
 800be62:	d402      	bmi.n	800be6a <_vfiprintf_r+0x1fe>
 800be64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be66:	f7fc fedf 	bl	8008c28 <__retarget_lock_release_recursive>
 800be6a:	89ab      	ldrh	r3, [r5, #12]
 800be6c:	065b      	lsls	r3, r3, #25
 800be6e:	f53f af1f 	bmi.w	800bcb0 <_vfiprintf_r+0x44>
 800be72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be74:	e71e      	b.n	800bcb4 <_vfiprintf_r+0x48>
 800be76:	ab03      	add	r3, sp, #12
 800be78:	9300      	str	r3, [sp, #0]
 800be7a:	462a      	mov	r2, r5
 800be7c:	4b05      	ldr	r3, [pc, #20]	@ (800be94 <_vfiprintf_r+0x228>)
 800be7e:	a904      	add	r1, sp, #16
 800be80:	4630      	mov	r0, r6
 800be82:	f7fc f9cd 	bl	8008220 <_printf_i>
 800be86:	e7e4      	b.n	800be52 <_vfiprintf_r+0x1e6>
 800be88:	0800c529 	.word	0x0800c529
 800be8c:	0800c533 	.word	0x0800c533
 800be90:	08007d11 	.word	0x08007d11
 800be94:	0800bc49 	.word	0x0800bc49
 800be98:	0800c52f 	.word	0x0800c52f

0800be9c <__swbuf_r>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	460e      	mov	r6, r1
 800bea0:	4614      	mov	r4, r2
 800bea2:	4605      	mov	r5, r0
 800bea4:	b118      	cbz	r0, 800beae <__swbuf_r+0x12>
 800bea6:	6a03      	ldr	r3, [r0, #32]
 800bea8:	b90b      	cbnz	r3, 800beae <__swbuf_r+0x12>
 800beaa:	f7fc fd71 	bl	8008990 <__sinit>
 800beae:	69a3      	ldr	r3, [r4, #24]
 800beb0:	60a3      	str	r3, [r4, #8]
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	071a      	lsls	r2, r3, #28
 800beb6:	d501      	bpl.n	800bebc <__swbuf_r+0x20>
 800beb8:	6923      	ldr	r3, [r4, #16]
 800beba:	b943      	cbnz	r3, 800bece <__swbuf_r+0x32>
 800bebc:	4621      	mov	r1, r4
 800bebe:	4628      	mov	r0, r5
 800bec0:	f000 f82a 	bl	800bf18 <__swsetup_r>
 800bec4:	b118      	cbz	r0, 800bece <__swbuf_r+0x32>
 800bec6:	f04f 37ff 	mov.w	r7, #4294967295
 800beca:	4638      	mov	r0, r7
 800becc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	6922      	ldr	r2, [r4, #16]
 800bed2:	1a98      	subs	r0, r3, r2
 800bed4:	6963      	ldr	r3, [r4, #20]
 800bed6:	b2f6      	uxtb	r6, r6
 800bed8:	4283      	cmp	r3, r0
 800beda:	4637      	mov	r7, r6
 800bedc:	dc05      	bgt.n	800beea <__swbuf_r+0x4e>
 800bede:	4621      	mov	r1, r4
 800bee0:	4628      	mov	r0, r5
 800bee2:	f7ff fa45 	bl	800b370 <_fflush_r>
 800bee6:	2800      	cmp	r0, #0
 800bee8:	d1ed      	bne.n	800bec6 <__swbuf_r+0x2a>
 800beea:	68a3      	ldr	r3, [r4, #8]
 800beec:	3b01      	subs	r3, #1
 800beee:	60a3      	str	r3, [r4, #8]
 800bef0:	6823      	ldr	r3, [r4, #0]
 800bef2:	1c5a      	adds	r2, r3, #1
 800bef4:	6022      	str	r2, [r4, #0]
 800bef6:	701e      	strb	r6, [r3, #0]
 800bef8:	6962      	ldr	r2, [r4, #20]
 800befa:	1c43      	adds	r3, r0, #1
 800befc:	429a      	cmp	r2, r3
 800befe:	d004      	beq.n	800bf0a <__swbuf_r+0x6e>
 800bf00:	89a3      	ldrh	r3, [r4, #12]
 800bf02:	07db      	lsls	r3, r3, #31
 800bf04:	d5e1      	bpl.n	800beca <__swbuf_r+0x2e>
 800bf06:	2e0a      	cmp	r6, #10
 800bf08:	d1df      	bne.n	800beca <__swbuf_r+0x2e>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7ff fa2f 	bl	800b370 <_fflush_r>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d0d9      	beq.n	800beca <__swbuf_r+0x2e>
 800bf16:	e7d6      	b.n	800bec6 <__swbuf_r+0x2a>

0800bf18 <__swsetup_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4b29      	ldr	r3, [pc, #164]	@ (800bfc0 <__swsetup_r+0xa8>)
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	6818      	ldr	r0, [r3, #0]
 800bf20:	460c      	mov	r4, r1
 800bf22:	b118      	cbz	r0, 800bf2c <__swsetup_r+0x14>
 800bf24:	6a03      	ldr	r3, [r0, #32]
 800bf26:	b90b      	cbnz	r3, 800bf2c <__swsetup_r+0x14>
 800bf28:	f7fc fd32 	bl	8008990 <__sinit>
 800bf2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf30:	0719      	lsls	r1, r3, #28
 800bf32:	d422      	bmi.n	800bf7a <__swsetup_r+0x62>
 800bf34:	06da      	lsls	r2, r3, #27
 800bf36:	d407      	bmi.n	800bf48 <__swsetup_r+0x30>
 800bf38:	2209      	movs	r2, #9
 800bf3a:	602a      	str	r2, [r5, #0]
 800bf3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf40:	81a3      	strh	r3, [r4, #12]
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295
 800bf46:	e033      	b.n	800bfb0 <__swsetup_r+0x98>
 800bf48:	0758      	lsls	r0, r3, #29
 800bf4a:	d512      	bpl.n	800bf72 <__swsetup_r+0x5a>
 800bf4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf4e:	b141      	cbz	r1, 800bf62 <__swsetup_r+0x4a>
 800bf50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf54:	4299      	cmp	r1, r3
 800bf56:	d002      	beq.n	800bf5e <__swsetup_r+0x46>
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f7fd fc4b 	bl	80097f4 <_free_r>
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	6063      	str	r3, [r4, #4]
 800bf6e:	6923      	ldr	r3, [r4, #16]
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	89a3      	ldrh	r3, [r4, #12]
 800bf74:	f043 0308 	orr.w	r3, r3, #8
 800bf78:	81a3      	strh	r3, [r4, #12]
 800bf7a:	6923      	ldr	r3, [r4, #16]
 800bf7c:	b94b      	cbnz	r3, 800bf92 <__swsetup_r+0x7a>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf88:	d003      	beq.n	800bf92 <__swsetup_r+0x7a>
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f000 f883 	bl	800c098 <__smakebuf_r>
 800bf92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf96:	f013 0201 	ands.w	r2, r3, #1
 800bf9a:	d00a      	beq.n	800bfb2 <__swsetup_r+0x9a>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	60a2      	str	r2, [r4, #8]
 800bfa0:	6962      	ldr	r2, [r4, #20]
 800bfa2:	4252      	negs	r2, r2
 800bfa4:	61a2      	str	r2, [r4, #24]
 800bfa6:	6922      	ldr	r2, [r4, #16]
 800bfa8:	b942      	cbnz	r2, 800bfbc <__swsetup_r+0xa4>
 800bfaa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bfae:	d1c5      	bne.n	800bf3c <__swsetup_r+0x24>
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	0799      	lsls	r1, r3, #30
 800bfb4:	bf58      	it	pl
 800bfb6:	6962      	ldrpl	r2, [r4, #20]
 800bfb8:	60a2      	str	r2, [r4, #8]
 800bfba:	e7f4      	b.n	800bfa6 <__swsetup_r+0x8e>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e7f7      	b.n	800bfb0 <__swsetup_r+0x98>
 800bfc0:	2400001c 	.word	0x2400001c

0800bfc4 <_raise_r>:
 800bfc4:	291f      	cmp	r1, #31
 800bfc6:	b538      	push	{r3, r4, r5, lr}
 800bfc8:	4605      	mov	r5, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	d904      	bls.n	800bfd8 <_raise_r+0x14>
 800bfce:	2316      	movs	r3, #22
 800bfd0:	6003      	str	r3, [r0, #0]
 800bfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfda:	b112      	cbz	r2, 800bfe2 <_raise_r+0x1e>
 800bfdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfe0:	b94b      	cbnz	r3, 800bff6 <_raise_r+0x32>
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	f000 f830 	bl	800c048 <_getpid_r>
 800bfe8:	4622      	mov	r2, r4
 800bfea:	4601      	mov	r1, r0
 800bfec:	4628      	mov	r0, r5
 800bfee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bff2:	f000 b817 	b.w	800c024 <_kill_r>
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d00a      	beq.n	800c010 <_raise_r+0x4c>
 800bffa:	1c59      	adds	r1, r3, #1
 800bffc:	d103      	bne.n	800c006 <_raise_r+0x42>
 800bffe:	2316      	movs	r3, #22
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	2001      	movs	r0, #1
 800c004:	e7e7      	b.n	800bfd6 <_raise_r+0x12>
 800c006:	2100      	movs	r1, #0
 800c008:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c00c:	4620      	mov	r0, r4
 800c00e:	4798      	blx	r3
 800c010:	2000      	movs	r0, #0
 800c012:	e7e0      	b.n	800bfd6 <_raise_r+0x12>

0800c014 <raise>:
 800c014:	4b02      	ldr	r3, [pc, #8]	@ (800c020 <raise+0xc>)
 800c016:	4601      	mov	r1, r0
 800c018:	6818      	ldr	r0, [r3, #0]
 800c01a:	f7ff bfd3 	b.w	800bfc4 <_raise_r>
 800c01e:	bf00      	nop
 800c020:	2400001c 	.word	0x2400001c

0800c024 <_kill_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d07      	ldr	r5, [pc, #28]	@ (800c044 <_kill_r+0x20>)
 800c028:	2300      	movs	r3, #0
 800c02a:	4604      	mov	r4, r0
 800c02c:	4608      	mov	r0, r1
 800c02e:	4611      	mov	r1, r2
 800c030:	602b      	str	r3, [r5, #0]
 800c032:	f7f5 fd71 	bl	8001b18 <_kill>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d102      	bne.n	800c040 <_kill_r+0x1c>
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	b103      	cbz	r3, 800c040 <_kill_r+0x1c>
 800c03e:	6023      	str	r3, [r4, #0]
 800c040:	bd38      	pop	{r3, r4, r5, pc}
 800c042:	bf00      	nop
 800c044:	24000590 	.word	0x24000590

0800c048 <_getpid_r>:
 800c048:	f7f5 bd5e 	b.w	8001b08 <_getpid>

0800c04c <__swhatbuf_r>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	460c      	mov	r4, r1
 800c050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c054:	2900      	cmp	r1, #0
 800c056:	b096      	sub	sp, #88	@ 0x58
 800c058:	4615      	mov	r5, r2
 800c05a:	461e      	mov	r6, r3
 800c05c:	da0d      	bge.n	800c07a <__swhatbuf_r+0x2e>
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c064:	f04f 0100 	mov.w	r1, #0
 800c068:	bf14      	ite	ne
 800c06a:	2340      	movne	r3, #64	@ 0x40
 800c06c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c070:	2000      	movs	r0, #0
 800c072:	6031      	str	r1, [r6, #0]
 800c074:	602b      	str	r3, [r5, #0]
 800c076:	b016      	add	sp, #88	@ 0x58
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	466a      	mov	r2, sp
 800c07c:	f000 f848 	bl	800c110 <_fstat_r>
 800c080:	2800      	cmp	r0, #0
 800c082:	dbec      	blt.n	800c05e <__swhatbuf_r+0x12>
 800c084:	9901      	ldr	r1, [sp, #4]
 800c086:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c08a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c08e:	4259      	negs	r1, r3
 800c090:	4159      	adcs	r1, r3
 800c092:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c096:	e7eb      	b.n	800c070 <__swhatbuf_r+0x24>

0800c098 <__smakebuf_r>:
 800c098:	898b      	ldrh	r3, [r1, #12]
 800c09a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c09c:	079d      	lsls	r5, r3, #30
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	d507      	bpl.n	800c0b4 <__smakebuf_r+0x1c>
 800c0a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0a8:	6023      	str	r3, [r4, #0]
 800c0aa:	6123      	str	r3, [r4, #16]
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	6163      	str	r3, [r4, #20]
 800c0b0:	b003      	add	sp, #12
 800c0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b4:	ab01      	add	r3, sp, #4
 800c0b6:	466a      	mov	r2, sp
 800c0b8:	f7ff ffc8 	bl	800c04c <__swhatbuf_r>
 800c0bc:	9f00      	ldr	r7, [sp, #0]
 800c0be:	4605      	mov	r5, r0
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	f7fd fc0a 	bl	80098dc <_malloc_r>
 800c0c8:	b948      	cbnz	r0, 800c0de <__smakebuf_r+0x46>
 800c0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ce:	059a      	lsls	r2, r3, #22
 800c0d0:	d4ee      	bmi.n	800c0b0 <__smakebuf_r+0x18>
 800c0d2:	f023 0303 	bic.w	r3, r3, #3
 800c0d6:	f043 0302 	orr.w	r3, r3, #2
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	e7e2      	b.n	800c0a4 <__smakebuf_r+0xc>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	6020      	str	r0, [r4, #0]
 800c0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e6:	81a3      	strh	r3, [r4, #12]
 800c0e8:	9b01      	ldr	r3, [sp, #4]
 800c0ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c0ee:	b15b      	cbz	r3, 800c108 <__smakebuf_r+0x70>
 800c0f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 f81d 	bl	800c134 <_isatty_r>
 800c0fa:	b128      	cbz	r0, 800c108 <__smakebuf_r+0x70>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f023 0303 	bic.w	r3, r3, #3
 800c102:	f043 0301 	orr.w	r3, r3, #1
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	431d      	orrs	r5, r3
 800c10c:	81a5      	strh	r5, [r4, #12]
 800c10e:	e7cf      	b.n	800c0b0 <__smakebuf_r+0x18>

0800c110 <_fstat_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4d07      	ldr	r5, [pc, #28]	@ (800c130 <_fstat_r+0x20>)
 800c114:	2300      	movs	r3, #0
 800c116:	4604      	mov	r4, r0
 800c118:	4608      	mov	r0, r1
 800c11a:	4611      	mov	r1, r2
 800c11c:	602b      	str	r3, [r5, #0]
 800c11e:	f7f5 fd3f 	bl	8001ba0 <_fstat>
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	d102      	bne.n	800c12c <_fstat_r+0x1c>
 800c126:	682b      	ldr	r3, [r5, #0]
 800c128:	b103      	cbz	r3, 800c12c <_fstat_r+0x1c>
 800c12a:	6023      	str	r3, [r4, #0]
 800c12c:	bd38      	pop	{r3, r4, r5, pc}
 800c12e:	bf00      	nop
 800c130:	24000590 	.word	0x24000590

0800c134 <_isatty_r>:
 800c134:	b538      	push	{r3, r4, r5, lr}
 800c136:	4d06      	ldr	r5, [pc, #24]	@ (800c150 <_isatty_r+0x1c>)
 800c138:	2300      	movs	r3, #0
 800c13a:	4604      	mov	r4, r0
 800c13c:	4608      	mov	r0, r1
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	f7f5 fd3e 	bl	8001bc0 <_isatty>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d102      	bne.n	800c14e <_isatty_r+0x1a>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	b103      	cbz	r3, 800c14e <_isatty_r+0x1a>
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	24000590 	.word	0x24000590

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
