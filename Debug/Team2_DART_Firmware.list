
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c120  0800c120  0000d120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c5d0  0800c5d0  0000d5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5dc  0800c5dc  0000d5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000278  24000000  0800c5e0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  24000278  0800c858  0000e278  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400058c  0800c858  0000e58c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017de1  00000000  00000000  0000e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b5e  00000000  00000000  00026087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001280  00000000  00000000  00028be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e6d  00000000  00000000  00029e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038826  00000000  00000000  0002acd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001846a  00000000  00000000  000634fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00168513  00000000  00000000  0007b965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e3e78  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006384  00000000  00000000  001e3ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000077  00000000  00000000  001ea240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000278 	.word	0x24000278
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c104 	.word	0x0800c104

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400027c 	.word	0x2400027c
 80002dc:	0800c104 	.word	0x0800c104

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a90:	e000      	b.n	8000a94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a94:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a9e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	@ 0x50
 8000abc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000abe:	f000 fa8f 	bl	8000fe0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f001 f84b 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f877 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 f9e3 	bl	8000e94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 f995 	bl	8000dfc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ad2:	f000 f8ed 	bl	8000cb0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ad6:	f000 f943 	bl	8000d60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8000ada:	482f      	ldr	r0, [pc, #188]	@ (8000b98 <main+0xe0>)
 8000adc:	f005 f93e 	bl	8005d5c <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2224      	movs	r2, #36	@ 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fecd 	bl	800888a <memset>
  mpu9250_setup();
 8000af0:	f000 fb00 	bl	80010f4 <mpu9250_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //USE timer_flag TO READ SENSOR DATA ON INTERRUPT
	  if(timer_flag)
 8000af4:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <main+0xe4>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d0fa      	beq.n	8000af4 <main+0x3c>
	  {
		  timer_flag = 0;	//reset timer flag
 8000afe:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <main+0xe4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]

		  mpu9250_getRawAngle();
 8000b04:	f000 fb08 	bl	8001118 <mpu9250_getRawAngle>

		  double dt = get_dt();
 8000b08:	f000 fa0a 	bl	8000f20 <get_dt>
 8000b0c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

		  double pitch_angle = kalman_getAngle(&KalmanPitch, imu_angles.pitch, imu_processed_data.gyro_y, dt);
 8000b10:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <main+0xe8>)
 8000b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <main+0xec>)
 8000b1c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b20:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b24:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8000b28:	eeb0 1b46 	vmov.f64	d1, d6
 8000b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b30:	481d      	ldr	r0, [pc, #116]	@ (8000ba8 <main+0xf0>)
 8000b32:	f000 fc47 	bl	80013c4 <kalman_getAngle>
 8000b36:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
		  double roll_angle = kalman_getAngle(&KalmanRoll, imu_angles.roll, imu_processed_data.gyro_x, dt);
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <main+0xe8>)
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <main+0xec>)
 8000b46:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b4a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b4e:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8000b52:	eeb0 1b46 	vmov.f64	d1, d6
 8000b56:	eeb0 0b47 	vmov.f64	d0, d7
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <main+0xf4>)
 8000b5c:	f000 fc32 	bl	80013c4 <kalman_getAngle>
 8000b60:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

		  //send data through UART
		  snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", pitch_angle, roll_angle);
 8000b64:	4638      	mov	r0, r7
 8000b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b72:	e9cd 2300 	strd	r2, r3, [sp]
 8000b76:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb0 <main+0xf8>)
 8000b78:	2128      	movs	r1, #40	@ 0x28
 8000b7a:	f007 fdef 	bl	800875c <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fbfd 	bl	8000380 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	4808      	ldr	r0, [pc, #32]	@ (8000bb4 <main+0xfc>)
 8000b92:	f005 fdc3 	bl	800671c <HAL_UART_Transmit>
	  if(timer_flag)
 8000b96:	e7ad      	b.n	8000af4 <main+0x3c>
 8000b98:	2400031c 	.word	0x2400031c
 8000b9c:	24000408 	.word	0x24000408
 8000ba0:	24000430 	.word	0x24000430
 8000ba4:	24000418 	.word	0x24000418
 8000ba8:	24000000 	.word	0x24000000
 8000bac:	24000050 	.word	0x24000050
 8000bb0:	0800c120 	.word	0x0800c120
 8000bb4:	24000368 	.word	0x24000368

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09c      	sub	sp, #112	@ 0x70
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc2:	224c      	movs	r2, #76	@ 0x4c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f007 fe5f 	bl	800888a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2220      	movs	r2, #32
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f007 fe59 	bl	800888a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f001 fbaf 	bl	800233c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b31      	ldr	r3, [pc, #196]	@ (8000ca8 <SystemClock_Config+0xf0>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000be6:	4a30      	ldr	r2, [pc, #192]	@ (8000ca8 <SystemClock_Config+0xf0>)
 8000be8:	f023 0301 	bic.w	r3, r3, #1
 8000bec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bee:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca8 <SystemClock_Config+0xf0>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <SystemClock_Config+0xf4>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c00:	4a2a      	ldr	r2, [pc, #168]	@ (8000cac <SystemClock_Config+0xf4>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <SystemClock_Config+0xf4>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c14:	bf00      	nop
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <SystemClock_Config+0xf4>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c22:	d1f8      	bne.n	8000c16 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2340      	movs	r3, #64	@ 0x40
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c50:	2302      	movs	r3, #2
 8000c52:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 fba7 	bl	80023b0 <HAL_RCC_OscConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c68:	f000 f9e6 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6c:	233f      	movs	r3, #63	@ 0x3f
 8000c6e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c70:	2303      	movs	r3, #3
 8000c72:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c80:	2340      	movs	r3, #64	@ 0x40
 8000c82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2101      	movs	r1, #1
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 ffe7 	bl	8002c64 <HAL_RCC_ClockConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000c9c:	f000 f9cc 	bl	8001038 <Error_Handler>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3770      	adds	r7, #112	@ 0x70
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	58000400 	.word	0x58000400
 8000cac:	58024800 	.word	0x58024800

08000cb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb4:	4b28      	ldr	r3, [pc, #160]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cb6:	4a29      	ldr	r2, [pc, #164]	@ (8000d5c <MX_SPI1_Init+0xac>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cba:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cc2:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc8:	4b23      	ldr	r3, [pc, #140]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cca:	2207      	movs	r2, #7
 8000ccc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cce:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cd6:	4b20      	ldr	r3, [pc, #128]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000ce0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cee:	4b1a      	ldr	r3, [pc, #104]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfa:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d00:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d0e:	4b12      	ldr	r3, [pc, #72]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_SPI1_Init+0xa8>)
 8000d46:	f004 f945 	bl	8004fd4 <HAL_SPI_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000d50:	f000 f972 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	24000294 	.word	0x24000294
 8000d5c:	40013000 	.word	0x40013000

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000d88:	f240 321f 	movw	r2, #799	@ 0x31f
 8000d8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d94:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000d96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da8:	4813      	ldr	r0, [pc, #76]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000daa:	f004 ff80 	bl	8005cae <HAL_TIM_Base_Init>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000db4:	f000 f940 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0310 	add.w	r3, r7, #16
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000dc6:	f005 f949 	bl	800605c <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dd0:	f000 f932 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_TIM2_Init+0x98>)
 8000de2:	f005 fb9f 	bl	8006524 <HAL_TIMEx_MasterConfigSynchronization>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000dec:	f000 f924 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2400031c 	.word	0x2400031c

08000dfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e00:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e02:	4a23      	ldr	r2, [pc, #140]	@ (8000e90 <MX_USART2_UART_Init+0x94>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e06:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e46:	f005 fc19 	bl	800667c <HAL_UART_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e50:	f000 f8f2 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e58:	f006 fcaf 	bl	80077ba <HAL_UARTEx_SetTxFifoThreshold>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e62:	f000 f8e9 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4808      	ldr	r0, [pc, #32]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e6a:	f006 fce4 	bl	8007836 <HAL_UARTEx_SetRxFifoThreshold>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e74:	f000 f8e0 	bl	8001038 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	@ (8000e8c <MX_USART2_UART_Init+0x90>)
 8000e7a:	f006 fc65 	bl	8007748 <HAL_UARTEx_DisableFifoMode>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f000 f8d8 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	24000368 	.word	0x24000368
 8000e90:	40004400 	.word	0x40004400

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb0:	4a18      	ldr	r2, [pc, #96]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f14 <MX_GPIO_Init+0x80>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2120      	movs	r1, #32
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <MX_GPIO_Init+0x84>)
 8000eec:	f001 fa0c 	bl	8002308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ef0:	2320      	movs	r3, #32
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	4619      	mov	r1, r3
 8000f06:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <MX_GPIO_Init+0x84>)
 8000f08:	f001 f84e 	bl	8001fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020000 	.word	0x58020000
 8000f1c:	00000000 	.word	0x00000000

08000f20 <get_dt>:

/* USER CODE BEGIN 4 */
double get_dt()
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
    double current_time = HAL_GetTick() / 1000.0;  // Get time in seconds
 8000f26:	f000 fe9f 	bl	8001c68 <HAL_GetTick>
 8000f2a:	ee07 0a90 	vmov	s15, r0
 8000f2e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f32:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000f70 <get_dt+0x50>
 8000f36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f3a:	ed87 7b02 	vstr	d7, [r7, #8]
    double dt = current_time - previous_time;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <get_dt+0x58>)
 8000f40:	ed93 7b00 	vldr	d7, [r3]
 8000f44:	ed97 6b02 	vldr	d6, [r7, #8]
 8000f48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f4c:	ed87 7b00 	vstr	d7, [r7]
    previous_time = current_time;  // Update for the next call
 8000f50:	4909      	ldr	r1, [pc, #36]	@ (8000f78 <get_dt+0x58>)
 8000f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f56:	e9c1 2300 	strd	r2, r3, [r1]
    return dt;
 8000f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f62:	eeb0 0b47 	vmov.f64	d0, d7
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	f3af 8000 	nop.w
 8000f70:	00000000 	.word	0x00000000
 8000f74:	408f4000 	.word	0x408f4000
 8000f78:	24000400 	.word	0x24000400

08000f7c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d102      	bne.n	8000f92 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
	}
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	2400031c 	.word	0x2400031c
 8000fa4:	24000408 	.word	0x24000408

08000fa8 <_write>:
int _write(int file, char *ptr, int len)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	e009      	b.n	8000fce <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fd50 	bl	8000a68 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dbf1      	blt.n	8000fba <_write+0x12>
	}
	return len;
 8000fd6:	687b      	ldr	r3, [r7, #4]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ff2:	f000 ff61 	bl	8001eb8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001002:	231f      	movs	r3, #31
 8001004:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001006:	2387      	movs	r3, #135	@ 0x87
 8001008:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800100a:	2300      	movs	r3, #0
 800100c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800100e:	2300      	movs	r3, #0
 8001010:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001012:	2301      	movs	r3, #1
 8001014:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001016:	2301      	movs	r3, #1
 8001018:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001022:	463b      	mov	r3, r7
 8001024:	4618      	mov	r0, r3
 8001026:	f000 ff7f 	bl	8001f28 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800102a:	2004      	movs	r0, #4
 800102c:	f000 ff5c 	bl	8001ee8 <HAL_MPU_Enable>

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <mpu9250_write_reg>:
		.R_measure = 0.03f
};


void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2120      	movs	r1, #32
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <mpu9250_write_reg+0x44>)
 800105a:	f001 f955 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 800105e:	1df9      	adds	r1, r7, #7
 8001060:	2364      	movs	r3, #100	@ 0x64
 8001062:	2201      	movs	r2, #1
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <mpu9250_write_reg+0x48>)
 8001066:	f004 f8d9 	bl	800521c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 800106a:	1db9      	adds	r1, r7, #6
 800106c:	2364      	movs	r3, #100	@ 0x64
 800106e:	2201      	movs	r2, #1
 8001070:	4806      	ldr	r0, [pc, #24]	@ (800108c <mpu9250_write_reg+0x48>)
 8001072:	f004 f8d3 	bl	800521c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2120      	movs	r1, #32
 800107a:	4803      	ldr	r0, [pc, #12]	@ (8001088 <mpu9250_write_reg+0x44>)
 800107c:	f001 f944 	bl	8002308 <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	58020000 	.word	0x58020000
 800108c:	24000294 	.word	0x24000294

08001090 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2120      	movs	r1, #32
 80010ae:	480f      	ldr	r0, [pc, #60]	@ (80010ec <mpu9250_read_reg+0x5c>)
 80010b0:	f001 f92a 	bl	8002308 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80010b4:	f107 010e 	add.w	r1, r7, #14
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	2201      	movs	r2, #1
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <mpu9250_read_reg+0x60>)
 80010be:	f004 f8ad 	bl	800521c <HAL_SPI_Transmit>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	2364      	movs	r3, #100	@ 0x64
 80010cc:	6839      	ldr	r1, [r7, #0]
 80010ce:	4808      	ldr	r0, [pc, #32]	@ (80010f0 <mpu9250_read_reg+0x60>)
 80010d0:	f004 fa92 	bl	80055f8 <HAL_SPI_Receive>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2120      	movs	r1, #32
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <mpu9250_read_reg+0x5c>)
 80010de:	f001 f913 	bl	8002308 <HAL_GPIO_WritePin>
}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	58020000 	.word	0x58020000
 80010f0:	24000294 	.word	0x24000294

080010f4 <mpu9250_setup>:

void mpu9250_setup()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 80010f8:	2105      	movs	r1, #5
 80010fa:	201a      	movs	r0, #26
 80010fc:	f7ff ffa2 	bl	8001044 <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001100:	2110      	movs	r1, #16
 8001102:	201c      	movs	r0, #28
 8001104:	f7ff ff9e 	bl	8001044 <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001108:	2108      	movs	r1, #8
 800110a:	201b      	movs	r0, #27
 800110c:	f7ff ff9a 	bl	8001044 <mpu9250_write_reg>

	//maybe ensure all IMU struct values are set to 0
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0000      	movs	r0, r0
	...

08001118 <mpu9250_getRawAngle>:


void mpu9250_getRawAngle()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	ed2d 8b02 	vpush	{d8}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8001122:	463b      	mov	r3, r7
 8001124:	2206      	movs	r2, #6
 8001126:	4619      	mov	r1, r3
 8001128:	203b      	movs	r0, #59	@ 0x3b
 800112a:	f7ff ffb1 	bl	8001090 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 800112e:	783b      	ldrb	r3, [r7, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b9e      	ldr	r3, [pc, #632]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 800113e:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001140:	78bb      	ldrb	r3, [r7, #2]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	78fb      	ldrb	r3, [r7, #3]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	4b9a      	ldr	r3, [pc, #616]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001150:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001152:	793b      	ldrb	r3, [r7, #4]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b95      	ldr	r3, [pc, #596]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001162:	809a      	strh	r2, [r3, #4]

	  imu_processed_data.accel_x = (float)imu_raw_data.accel_x/4096.0;
 8001164:	4b94      	ldr	r3, [pc, #592]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b21b      	sxth	r3, r3
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001176:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 80013a0 <mpu9250_getRawAngle+0x288>
 800117a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001182:	4b8e      	ldr	r3, [pc, #568]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001184:	edc3 7a00 	vstr	s15, [r3]
	  imu_processed_data.accel_y = (float)imu_raw_data.accel_y/4096.0;
 8001188:	4b8b      	ldr	r3, [pc, #556]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 800118a:	885b      	ldrh	r3, [r3, #2]
 800118c:	b21b      	sxth	r3, r3
 800118e:	ee07 3a90 	vmov	s15, r3
 8001192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001196:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800119a:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 80013a0 <mpu9250_getRawAngle+0x288>
 800119e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a6:	4b85      	ldr	r3, [pc, #532]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80011a8:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_processed_data.accel_z = (float)imu_raw_data.accel_z/4096.0;
 80011ac:	4b82      	ldr	r3, [pc, #520]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 80011ae:	889b      	ldrh	r3, [r3, #4]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011be:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 80013a0 <mpu9250_getRawAngle+0x288>
 80011c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ca:	4b7c      	ldr	r3, [pc, #496]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80011cc:	edc3 7a02 	vstr	s15, [r3, #8]
	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0
 80011d0:	4b7a      	ldr	r3, [pc, #488]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80011d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011de:	4b77      	ldr	r3, [pc, #476]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80011e0:	edc3 7a02 	vstr	s15, [r3, #8]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80011e4:	463b      	mov	r3, r7
 80011e6:	2206      	movs	r2, #6
 80011e8:	4619      	mov	r1, r3
 80011ea:	2043      	movs	r0, #67	@ 0x43
 80011ec:	f7ff ff50 	bl	8001090 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 80011f0:	783b      	ldrb	r3, [r7, #0]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	787b      	ldrb	r3, [r7, #1]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001200:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001202:	78bb      	ldrb	r3, [r7, #2]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b69      	ldr	r3, [pc, #420]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001212:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	797b      	ldrb	r3, [r7, #5]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b65      	ldr	r3, [pc, #404]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001224:	815a      	strh	r2, [r3, #10]

	  imu_processed_data.gyro_x = (float)imu_raw_data.gyro_x/65.5;
 8001226:	4b64      	ldr	r3, [pc, #400]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001228:	88db      	ldrh	r3, [r3, #6]
 800122a:	b21b      	sxth	r3, r3
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001234:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001238:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 80013a8 <mpu9250_getRawAngle+0x290>
 800123c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001240:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001244:	4b5d      	ldr	r3, [pc, #372]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001246:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y = (float)imu_raw_data.gyro_y/65.5;
 800124a:	4b5b      	ldr	r3, [pc, #364]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 800124c:	891b      	ldrh	r3, [r3, #8]
 800124e:	b21b      	sxth	r3, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800125c:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 80013a8 <mpu9250_getRawAngle+0x290>
 8001260:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001264:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001268:	4b54      	ldr	r3, [pc, #336]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 800126a:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z = (float)imu_raw_data.gyro_z/65.5;
 800126e:	4b52      	ldr	r3, [pc, #328]	@ (80013b8 <mpu9250_getRawAngle+0x2a0>)
 8001270:	895b      	ldrh	r3, [r3, #10]
 8001272:	b21b      	sxth	r3, r3
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001280:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80013a8 <mpu9250_getRawAngle+0x290>
 8001284:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001288:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800128c:	4b4b      	ldr	r3, [pc, #300]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 800128e:	edc3 7a05 	vstr	s15, [r3, #20]
	  imu_processed_data.gyro_x -= 4;	//offset GyroX to be around 0
 8001292:	4b4a      	ldr	r3, [pc, #296]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001294:	edd3 7a03 	vldr	s15, [r3, #12]
 8001298:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800129c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012a0:	4b46      	ldr	r3, [pc, #280]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012a2:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y += 20;	//offset GyroY to be around 0
 80012a6:	4b45      	ldr	r3, [pc, #276]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80012ac:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80012b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b4:	4b41      	ldr	r3, [pc, #260]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012b6:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z += 5;	//offset GyroZ to be around 0
 80012ba:	4b40      	ldr	r3, [pc, #256]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80012c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012c8:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012ca:	edc3 7a05 	vstr	s15, [r3, #20]

	  imu_angles.roll=atan(imu_processed_data.accel_y/sqrt((imu_processed_data.accel_x*imu_processed_data.accel_x)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 80012ce:	4b3b      	ldr	r3, [pc, #236]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012d8:	4b38      	ldr	r3, [pc, #224]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012da:	ed93 7a00 	vldr	s14, [r3]
 80012de:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012e0:	edd3 7a00 	vldr	s15, [r3]
 80012e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012e8:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80012ee:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 80012f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001300:	eeb0 0b47 	vmov.f64	d0, d7
 8001304:	f00a fdd8 	bl	800beb8 <sqrt>
 8001308:	eeb0 6b40 	vmov.f64	d6, d0
 800130c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001310:	eeb0 0b47 	vmov.f64	d0, d7
 8001314:	f00a fdf0 	bl	800bef8 <atan>
 8001318:	eeb0 6b40 	vmov.f64	d6, d0
 800131c:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 80013b0 <mpu9250_getRawAngle+0x298>
 8001320:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001324:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <mpu9250_getRawAngle+0x2a8>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.pitch=-atan(imu_processed_data.accel_x/sqrt((imu_processed_data.accel_y*imu_processed_data.accel_y)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 800132e:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001338:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 800133a:	ed93 7a01 	vldr	s14, [r3, #4]
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001340:	edd3 7a01 	vldr	s15, [r3, #4]
 8001344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001348:	4b1c      	ldr	r3, [pc, #112]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 800134a:	edd3 6a02 	vldr	s13, [r3, #8]
 800134e:	4b1b      	ldr	r3, [pc, #108]	@ (80013bc <mpu9250_getRawAngle+0x2a4>)
 8001350:	edd3 7a02 	vldr	s15, [r3, #8]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001360:	eeb0 0b47 	vmov.f64	d0, d7
 8001364:	f00a fda8 	bl	800beb8 <sqrt>
 8001368:	eeb0 6b40 	vmov.f64	d6, d0
 800136c:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001370:	eeb0 0b47 	vmov.f64	d0, d7
 8001374:	f00a fdc0 	bl	800bef8 <atan>
 8001378:	eeb0 7b40 	vmov.f64	d7, d0
 800137c:	eeb1 6b47 	vneg.f64	d6, d7
 8001380:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80013b0 <mpu9250_getRawAngle+0x298>
 8001384:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001388:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <mpu9250_getRawAngle+0x2a8>)
 800138e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	ecbd 8b02 	vpop	{d8}
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40b00000 	.word	0x40b00000
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40506000 	.word	0x40506000
 80013b0:	80fa7e3f 	.word	0x80fa7e3f
 80013b4:	3f91dfde 	.word	0x3f91dfde
 80013b8:	2400040c 	.word	0x2400040c
 80013bc:	24000418 	.word	0x24000418
 80013c0:	24000430 	.word	0x24000430

080013c4 <kalman_getAngle>:

double kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b097      	sub	sp, #92	@ 0x5c
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	61f8      	str	r0, [r7, #28]
 80013cc:	ed87 0b04 	vstr	d0, [r7, #16]
 80013d0:	ed87 1b02 	vstr	d1, [r7, #8]
 80013d4:	ed87 2b00 	vstr	d2, [r7]
	//Step 1: State Prediction
	double rate = newRate - Kalman->bias;	//newRate is the newest gyro measurement
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	ed93 7b02 	vldr	d7, [r3, #8]
 80013de:	ed97 6b02 	vldr	d6, [r7, #8]
 80013e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013e6:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	Kalman->angle += dt * rate;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	ed93 6b00 	vldr	d6, [r3]
 80013f0:	ed97 5b00 	vldr	d5, [r7]
 80013f4:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80013f8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	ed83 7b00 	vstr	d7, [r3]

	//Step 2: Covariance Prediction
	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[1][0] - Kalman->P[0][1] + Kalman->Q_angle);
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	ed93 6b06 	vldr	d6, [r3, #24]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001412:	ed97 7b00 	vldr	d7, [r7]
 8001416:	ee25 5b07 	vmul.f64	d5, d5, d7
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001420:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	ed93 7b08 	vldr	d7, [r3, #32]
 800142a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001434:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001438:	ed97 7b00 	vldr	d7, [r7]
 800143c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001440:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	ed93 6b08 	vldr	d6, [r3, #32]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001456:	ed97 7b00 	vldr	d7, [r7]
 800145a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800145e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001474:	ed97 7b00 	vldr	d7, [r7]
 8001478:	ee25 7b07 	vmul.f64	d7, d5, d7
 800147c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8001492:	ed97 7b00 	vldr	d7, [r7]
 8001496:	ee25 7b07 	vmul.f64	d7, d5, d7
 800149a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	//Step 3: Innovation (calculate angle difference)
	double y = newAngle - Kalman->angle;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	ed93 7b00 	vldr	d7, [r3]
 80014aa:	ed97 6b04 	vldr	d6, [r7, #16]
 80014ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014b2:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	//Step 4: Innovation covariance	(estimate error)
	double S = Kalman->P[0][0] + Kalman->R_measure;
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	ed93 6b06 	vldr	d6, [r3, #24]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80014c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014c6:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

	//Step 5: Kalman Gain
	double K[2];	//2x1 vector
	K[0] = Kalman->P[0][0] / S;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	ed93 5b06 	vldr	d5, [r3, #24]
 80014d0:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 80014d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014d8:	ed87 7b08 	vstr	d7, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 80014e2:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 80014e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014ea:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28

	//Step 6: Update Angle
	Kalman->angle += K[0] * y;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	ed93 6b00 	vldr	d6, [r3]
 80014f4:	ed97 5b08 	vldr	d5, [r7, #32]
 80014f8:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 80014fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001500:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	ed83 7b00 	vstr	d7, [r3]
	Kalman->bias += K[1] * y;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	ed93 6b02 	vldr	d6, [r3, #8]
 8001510:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001514:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001518:	ee25 7b07 	vmul.f64	d7, d5, d7
 800151c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	ed83 7b02 	vstr	d7, [r3, #8]

	//Step 7: Update Covariance
	double P00_temp = Kalman->P[0][0];
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = Kalman->P[0][1];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001536:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	ed93 6b06 	vldr	d6, [r3, #24]
 8001540:	ed97 5b08 	vldr	d5, [r7, #32]
 8001544:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001548:	ee25 7b07 	vmul.f64	d7, d5, d7
 800154c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	ed93 6b08 	vldr	d6, [r3, #32]
 800155c:	ed97 5b08 	vldr	d5, [r7, #32]
 8001560:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001564:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001568:	ee36 7b47 	vsub.f64	d7, d6, d7
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= K[1] * P00_temp;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001578:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 800157c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001580:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001584:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] -= K[1] * P01_temp;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001594:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001598:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800159c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	return Kalman->angle;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80015b4:	eeb0 0b47 	vmov.f64	d0, d7
 80015b8:	375c      	adds	r7, #92	@ 0x5c
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_MspInit+0x30>)
 80015cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015d0:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_MspInit+0x30>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_MspInit+0x30>)
 80015dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58024400 	.word	0x58024400

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0bc      	sub	sp, #240	@ 0xf0
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	22c0      	movs	r2, #192	@ 0xc0
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f007 f936 	bl	800888a <memset>
  if(hspi->Instance==SPI1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a38      	ldr	r2, [pc, #224]	@ (8001704 <HAL_SPI_MspInit+0x10c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d168      	bne.n	80016fa <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001634:	2300      	movs	r3, #0
 8001636:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001638:	f107 0318 	add.w	r3, r7, #24
 800163c:	4618      	mov	r0, r3
 800163e:	f001 fe9d 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001648:	f7ff fcf6 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164c:	4b2e      	ldr	r3, [pc, #184]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800164e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001652:	4a2d      	ldr	r2, [pc, #180]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 8001654:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001658:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800165c:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800165e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001662:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b27      	ldr	r3, [pc, #156]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001670:	4a25      	ldr	r2, [pc, #148]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800167a:	4b23      	ldr	r3, [pc, #140]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800167c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800168e:	4a1e      	ldr	r2, [pc, #120]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001698:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <HAL_SPI_MspInit+0x110>)
 800169a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016be:	2305      	movs	r3, #5
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016c8:	4619      	mov	r1, r3
 80016ca:	4810      	ldr	r0, [pc, #64]	@ (800170c <HAL_SPI_MspInit+0x114>)
 80016cc:	f000 fc6c 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016d0:	2318      	movs	r3, #24
 80016d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016e8:	2305      	movs	r3, #5
 80016ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016f2:	4619      	mov	r1, r3
 80016f4:	4806      	ldr	r0, [pc, #24]	@ (8001710 <HAL_SPI_MspInit+0x118>)
 80016f6:	f000 fc57 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80016fa:	bf00      	nop
 80016fc:	37f0      	adds	r7, #240	@ 0xf0
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40013000 	.word	0x40013000
 8001708:	58024400 	.word	0x58024400
 800170c:	58020000 	.word	0x58020000
 8001710:	58020400 	.word	0x58020400

08001714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001724:	d116      	bne.n	8001754 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800172c:	4a0b      	ldr	r2, [pc, #44]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_TIM_Base_MspInit+0x48>)
 8001738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	201c      	movs	r0, #28
 800174a:	f000 fb80 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174e:	201c      	movs	r0, #28
 8001750:	f000 fb97 	bl	8001e82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	58024400 	.word	0x58024400

08001760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0ba      	sub	sp, #232	@ 0xe8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	22c0      	movs	r2, #192	@ 0xc0
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f007 f882 	bl	800888a <memset>
  if(huart->Instance==USART2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a26      	ldr	r2, [pc, #152]	@ (8001824 <HAL_UART_MspInit+0xc4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d145      	bne.n	800181c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001790:	f04f 0202 	mov.w	r2, #2
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a2:	f107 0310 	add.w	r3, r7, #16
 80017a6:	4618      	mov	r0, r3
 80017a8:	f001 fde8 	bl	800337c <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017b2:	f7ff fc41 	bl	8001038 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017c6:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <HAL_UART_MspInit+0xc8>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017f2:	230c      	movs	r3, #12
 80017f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800180a:	2307      	movs	r3, #7
 800180c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <HAL_UART_MspInit+0xcc>)
 8001818:	f000 fbc6 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800181c:	bf00      	nop
 800181e:	37e8      	adds	r7, #232	@ 0xe8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40004400 	.word	0x40004400
 8001828:	58024400 	.word	0x58024400
 800182c:	58020000 	.word	0x58020000

08001830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <NMI_Handler+0x4>

08001838 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <HardFault_Handler+0x4>

08001840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <MemManage_Handler+0x4>

08001848 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <UsageFault_Handler+0x4>

08001858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001886:	f000 f9db 	bl	8001c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001894:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM2_IRQHandler+0x10>)
 8001896:	f004 fad9 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	2400031c 	.word	0x2400031c

080018a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return 1;
 80018a8:	2301      	movs	r3, #1
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_kill>:

int _kill(int pid, int sig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018be:	f007 f837 	bl	8008930 <__errno>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2216      	movs	r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
  return -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_exit>:

void _exit (int status)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ffe7 	bl	80018b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e6:	bf00      	nop
 80018e8:	e7fd      	b.n	80018e6 <_exit+0x12>

080018ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e00a      	b.n	8001912 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018fc:	f3af 8000 	nop.w
 8001900:	4601      	mov	r1, r0
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	60ba      	str	r2, [r7, #8]
 8001908:	b2ca      	uxtb	r2, r1
 800190a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbf0      	blt.n	80018fc <_read+0x12>
  }

  return len;
 800191a:	687b      	ldr	r3, [r7, #4]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800194c:	605a      	str	r2, [r3, #4]
  return 0;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_isatty>:

int _isatty(int file)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001964:	2301      	movs	r3, #1
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f006 ffb8 	bl	8008930 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	24080000 	.word	0x24080000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	24000438 	.word	0x24000438
 80019f4:	24000590 	.word	0x24000590

080019f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019fc:	4b37      	ldr	r3, [pc, #220]	@ (8001adc <SystemInit+0xe4>)
 80019fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a02:	4a36      	ldr	r2, [pc, #216]	@ (8001adc <SystemInit+0xe4>)
 8001a04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0c:	4b34      	ldr	r3, [pc, #208]	@ (8001ae0 <SystemInit+0xe8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d807      	bhi.n	8001a28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a18:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <SystemInit+0xe8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae0 <SystemInit+0xe8>)
 8001a22:	f043 0307 	orr.w	r3, r3, #7
 8001a26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ae4 <SystemInit+0xec>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae4 <SystemInit+0xec>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae4 <SystemInit+0xec>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae4 <SystemInit+0xec>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4929      	ldr	r1, [pc, #164]	@ (8001ae4 <SystemInit+0xec>)
 8001a40:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <SystemInit+0xf0>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a46:	4b26      	ldr	r3, [pc, #152]	@ (8001ae0 <SystemInit+0xe8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a52:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <SystemInit+0xe8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 030f 	bic.w	r3, r3, #15
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <SystemInit+0xe8>)
 8001a5c:	f043 0307 	orr.w	r3, r3, #7
 8001a60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a62:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <SystemInit+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae4 <SystemInit+0xec>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <SystemInit+0xec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae4 <SystemInit+0xec>)
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <SystemInit+0xf4>)
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <SystemInit+0xec>)
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001af0 <SystemInit+0xf8>)
 8001a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a80:	4b18      	ldr	r3, [pc, #96]	@ (8001ae4 <SystemInit+0xec>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <SystemInit+0xfc>)
 8001a84:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a86:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <SystemInit+0xec>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <SystemInit+0xec>)
 8001a8e:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <SystemInit+0xfc>)
 8001a90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a92:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <SystemInit+0xec>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <SystemInit+0xec>)
 8001a9a:	4a16      	ldr	r2, [pc, #88]	@ (8001af4 <SystemInit+0xfc>)
 8001a9c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <SystemInit+0xec>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <SystemInit+0xec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <SystemInit+0xec>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <SystemInit+0xec>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <SystemInit+0x100>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <SystemInit+0x104>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ac2:	d202      	bcs.n	8001aca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <SystemInit+0x108>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <SystemInit+0x10c>)
 8001acc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ad0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	52002000 	.word	0x52002000
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001aec:	02020200 	.word	0x02020200
 8001af0:	01ff0000 	.word	0x01ff0000
 8001af4:	01010280 	.word	0x01010280
 8001af8:	5c001000 	.word	0x5c001000
 8001afc:	ffff0000 	.word	0xffff0000
 8001b00:	51008108 	.word	0x51008108
 8001b04:	52004000 	.word	0x52004000

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b0c:	f7ff ff74 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	@ (8001b44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	@ (8001b48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	@ (8001b50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f006 ff01 	bl	800893c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7fe ffbd 	bl	8000ab8 <main>
  bx  lr
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b48:	24000278 	.word	0x24000278
  ldr r2, =_sidata
 8001b4c:	0800c5e0 	.word	0x0800c5e0
  ldr r2, =_sbss
 8001b50:	24000278 	.word	0x24000278
  ldr r4, =_ebss
 8001b54:	2400058c 	.word	0x2400058c

08001b58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC3_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b62:	2003      	movs	r0, #3
 8001b64:	f000 f968 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b68:	f001 fa32 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_Init+0x68>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	4913      	ldr	r1, [pc, #76]	@ (8001bc8 <HAL_Init+0x6c>)
 8001b7a:	5ccb      	ldrb	r3, [r1, r3]
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
 8001b84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <HAL_Init+0x68>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc8 <HAL_Init+0x6c>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <HAL_Init+0x70>)
 8001b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd0 <HAL_Init+0x74>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba6:	200f      	movs	r0, #15
 8001ba8:	f000 f814 	bl	8001bd4 <HAL_InitTick>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e002      	b.n	8001bbc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb6:	f7ff fd05 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	0800c12c 	.word	0x0800c12c
 8001bcc:	240000a4 	.word	0x240000a4
 8001bd0:	240000a0 	.word	0x240000a0

08001bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bdc:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_InitTick+0x60>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e021      	b.n	8001c2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001be8:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <HAL_InitTick+0x64>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f94d 	bl	8001e9e <HAL_SYSTICK_Config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e00e      	b.n	8001c2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b0f      	cmp	r3, #15
 8001c12:	d80a      	bhi.n	8001c2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c14:	2200      	movs	r2, #0
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1c:	f000 f917 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c20:	4a06      	ldr	r2, [pc, #24]	@ (8001c3c <HAL_InitTick+0x68>)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	240000ac 	.word	0x240000ac
 8001c38:	240000a0 	.word	0x240000a0
 8001c3c:	240000a8 	.word	0x240000a8

08001c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c44:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x20>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4413      	add	r3, r2
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_IncTick+0x24>)
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	240000ac 	.word	0x240000ac
 8001c64:	2400043c 	.word	0x2400043c

08001c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_GetTick+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	2400043c 	.word	0x2400043c

08001c80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_GetREVID+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	0c1b      	lsrs	r3, r3, #16
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	5c001000 	.word	0x5c001000

08001c98 <__NVIC_SetPriorityGrouping>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc0:	4b06      	ldr	r3, [pc, #24]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00
 8001cdc:	05fa0000 	.word	0x05fa0000

08001ce0 <__NVIC_GetPriorityGrouping>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	88fb      	ldrh	r3, [r7, #6]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff40 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff90 	bl	8001d8c <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5f 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff33 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa4 	bl	8001df4 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ebc:	f3bf 8f5f 	dmb	sy
}
 8001ec0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_MPU_Disable+0x28>)
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	4a06      	ldr	r2, [pc, #24]	@ (8001ee0 <HAL_MPU_Disable+0x28>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ecc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <HAL_MPU_Disable+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00
 8001ee4:	e000ed90 	.word	0xe000ed90

08001ee8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <HAL_MPU_Enable+0x38>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_MPU_Enable+0x3c>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_MPU_Enable+0x3c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f06:	f3bf 8f4f 	dsb	sy
}
 8001f0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f0c:	f3bf 8f6f 	isb	sy
}
 8001f10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed90 	.word	0xe000ed90
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	785a      	ldrb	r2, [r3, #1]
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f36:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f38:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	@ (8001fa4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f3e:	f023 0301 	bic.w	r3, r3, #1
 8001f42:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f44:	4a17      	ldr	r2, [pc, #92]	@ (8001fa4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7b1b      	ldrb	r3, [r3, #12]
 8001f50:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7adb      	ldrb	r3, [r3, #11]
 8001f56:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f58:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7a9b      	ldrb	r3, [r3, #10]
 8001f5e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f60:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	7b5b      	ldrb	r3, [r3, #13]
 8001f66:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f68:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7b9b      	ldrb	r3, [r3, #14]
 8001f6e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f70:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7bdb      	ldrb	r3, [r3, #15]
 8001f76:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f78:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7a5b      	ldrb	r3, [r3, #9]
 8001f7e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f80:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a1b      	ldrb	r3, [r3, #8]
 8001f86:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f88:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	7812      	ldrb	r2, [r2, #0]
 8001f8e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f92:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f94:	6113      	str	r3, [r2, #16]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000ed90 	.word	0xe000ed90

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	@ 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fb6:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_GPIO_Init+0x234>)
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fba:	e194      	b.n	80022e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8186 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x44>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	69b9      	ldr	r1, [r7, #24]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80e0 	beq.w	80022e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002120:	4b2f      	ldr	r3, [pc, #188]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002126:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002128:	f043 0302 	orr.w	r3, r3, #2
 800212c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <HAL_GPIO_Init+0x238>)
 8002132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a29      	ldr	r2, [pc, #164]	@ (80021e4 <HAL_GPIO_Init+0x23c>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_GPIO_Init+0x240>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d052      	beq.n	8002210 <HAL_GPIO_Init+0x268>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_GPIO_Init+0x244>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x22e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1e      	ldr	r2, [pc, #120]	@ (80021f0 <HAL_GPIO_Init+0x248>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x22a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_GPIO_Init+0x24c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x226>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1c      	ldr	r2, [pc, #112]	@ (80021f8 <HAL_GPIO_Init+0x250>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x222>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a1b      	ldr	r2, [pc, #108]	@ (80021fc <HAL_GPIO_Init+0x254>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x21e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1a      	ldr	r2, [pc, #104]	@ (8002200 <HAL_GPIO_Init+0x258>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x21a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_GPIO_Init+0x25c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x216>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a18      	ldr	r2, [pc, #96]	@ (8002208 <HAL_GPIO_Init+0x260>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x212>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_GPIO_Init+0x264>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x20e>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e02d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e02b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e029      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021be:	2307      	movs	r3, #7
 80021c0:	e027      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e025      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e023      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e021      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e01f      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e01d      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e01b      	b.n	8002212 <HAL_GPIO_Init+0x26a>
 80021da:	bf00      	nop
 80021dc:	58000080 	.word	0x58000080
 80021e0:	58024400 	.word	0x58024400
 80021e4:	58000400 	.word	0x58000400
 80021e8:	58020000 	.word	0x58020000
 80021ec:	58020400 	.word	0x58020400
 80021f0:	58020800 	.word	0x58020800
 80021f4:	58020c00 	.word	0x58020c00
 80021f8:	58021000 	.word	0x58021000
 80021fc:	58021400 	.word	0x58021400
 8002200:	58021800 	.word	0x58021800
 8002204:	58021c00 	.word	0x58021c00
 8002208:	58022000 	.word	0x58022000
 800220c:	58022400 	.word	0x58022400
 8002210:	2300      	movs	r3, #0
 8002212:	69fa      	ldr	r2, [r7, #28]
 8002214:	f002 0203 	and.w	r2, r2, #3
 8002218:	0092      	lsls	r2, r2, #2
 800221a:	4093      	lsls	r3, r2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002222:	4938      	ldr	r1, [pc, #224]	@ (8002304 <HAL_GPIO_Init+0x35c>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	43db      	mvns	r3, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4013      	ands	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	43db      	mvns	r3, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4013      	ands	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f ae63 	bne.w	8001fbc <HAL_GPIO_Init+0x14>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	3724      	adds	r7, #36	@ 0x24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	58000400 	.word	0x58000400

08002308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
 8002314:	4613      	mov	r3, r2
 8002316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002318:	787b      	ldrb	r3, [r7, #1]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231e:	887a      	ldrh	r2, [r7, #2]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002324:	e003      	b.n	800232e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002326:	887b      	ldrh	r3, [r7, #2]
 8002328:	041a      	lsls	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	619a      	str	r2, [r3, #24]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
	...

0800233c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d00a      	beq.n	8002366 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e01f      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e01d      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	490f      	ldr	r1, [pc, #60]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4313      	orrs	r3, r2
 8002374:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002376:	f7ff fc77 	bl	8001c68 <HAL_GetTick>
 800237a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800237c:	e009      	b.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800237e:	f7ff fc73 	bl	8001c68 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238c:	d901      	bls.n	8002392 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e007      	b.n	80023a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_PWREx_ConfigSupply+0x70>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800239a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239e:	d1ee      	bne.n	800237e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024800 	.word	0x58024800

080023b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	@ 0x30
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 bc48 	b.w	8002c54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8088 	beq.w	80024e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d2:	4b99      	ldr	r3, [pc, #612]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023dc:	4b96      	ldr	r3, [pc, #600]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d007      	beq.n	80023f8 <HAL_RCC_OscConfig+0x48>
 80023e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ea:	2b18      	cmp	r3, #24
 80023ec:	d111      	bne.n	8002412 <HAL_RCC_OscConfig+0x62>
 80023ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d06d      	beq.n	80024e0 <HAL_RCC_OscConfig+0x130>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d169      	bne.n	80024e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f000 bc21 	b.w	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x7a>
 800241c:	4b86      	ldr	r3, [pc, #536]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a85      	ldr	r2, [pc, #532]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e02e      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCC_OscConfig+0x9c>
 8002432:	4b81      	ldr	r3, [pc, #516]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a80      	ldr	r2, [pc, #512]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7d      	ldr	r2, [pc, #500]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0xc0>
 8002456:	4b78      	ldr	r3, [pc, #480]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a77      	ldr	r2, [pc, #476]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b75      	ldr	r3, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a74      	ldr	r2, [pc, #464]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xd8>
 8002470:	4b71      	ldr	r3, [pc, #452]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a70      	ldr	r2, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b6e      	ldr	r3, [pc, #440]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6d      	ldr	r2, [pc, #436]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fbea 	bl	8001c68 <HAL_GetTick>
 8002494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fbe6 	bl	8001c68 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e3d4      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024aa:	4b63      	ldr	r3, [pc, #396]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xe8>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff fbd6 	bl	8001c68 <HAL_GetTick>
 80024bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff fbd2 	bl	8001c68 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	@ 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e3c0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024d2:	4b59      	ldr	r3, [pc, #356]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x110>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80ca 	beq.w	8002684 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80024fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_RCC_OscConfig+0x166>
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	2b18      	cmp	r3, #24
 800250a:	d156      	bne.n	80025ba <HAL_RCC_OscConfig+0x20a>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d151      	bne.n	80025ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002516:	4b48      	ldr	r3, [pc, #288]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x17e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e392      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800252e:	4b42      	ldr	r3, [pc, #264]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0219 	bic.w	r2, r3, #25
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	493f      	ldr	r1, [pc, #252]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff fb92 	bl	8001c68 <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7ff fb8e 	bl	8001c68 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e37c      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	f7ff fb8b 	bl	8001c80 <HAL_GetREVID>
 800256a:	4603      	mov	r3, r0
 800256c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002570:	4293      	cmp	r3, r2
 8002572:	d817      	bhi.n	80025a4 <HAL_RCC_OscConfig+0x1f4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b40      	cmp	r3, #64	@ 0x40
 800257a:	d108      	bne.n	800258e <HAL_RCC_OscConfig+0x1de>
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002584:	4a2c      	ldr	r2, [pc, #176]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800258c:	e07a      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	031b      	lsls	r3, r3, #12
 800259c:	4926      	ldr	r1, [pc, #152]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a2:	e06f      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a4:	4b24      	ldr	r3, [pc, #144]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	4921      	ldr	r1, [pc, #132]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	e064      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d047      	beq.n	8002652 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0219 	bic.w	r2, r3, #25
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	491a      	ldr	r1, [pc, #104]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7ff fb48 	bl	8001c68 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7ff fb44 	bl	8001c68 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e332      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	f7ff fb41 	bl	8001c80 <HAL_GetREVID>
 80025fe:	4603      	mov	r3, r0
 8002600:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002604:	4293      	cmp	r3, r2
 8002606:	d819      	bhi.n	800263c <HAL_RCC_OscConfig+0x28c>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b40      	cmp	r3, #64	@ 0x40
 800260e:	d108      	bne.n	8002622 <HAL_RCC_OscConfig+0x272>
 8002610:	4b09      	ldr	r3, [pc, #36]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002618:	4a07      	ldr	r2, [pc, #28]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 800261a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800261e:	6053      	str	r3, [r2, #4]
 8002620:	e030      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
 8002622:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	031b      	lsls	r3, r3, #12
 8002630:	4901      	ldr	r1, [pc, #4]	@ (8002638 <HAL_RCC_OscConfig+0x288>)
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
 8002636:	e025      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
 8002638:	58024400 	.word	0x58024400
 800263c:	4b9a      	ldr	r3, [pc, #616]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	061b      	lsls	r3, r3, #24
 800264a:	4997      	ldr	r1, [pc, #604]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e018      	b.n	8002684 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b95      	ldr	r3, [pc, #596]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a94      	ldr	r2, [pc, #592]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002658:	f023 0301 	bic.w	r3, r3, #1
 800265c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265e:	f7ff fb03 	bl	8001c68 <HAL_GetTick>
 8002662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff faff 	bl	8001c68 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e2ed      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002678:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a9 	beq.w	80027e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b85      	ldr	r3, [pc, #532]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800269a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800269c:	4b82      	ldr	r3, [pc, #520]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d007      	beq.n	80026b8 <HAL_RCC_OscConfig+0x308>
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b18      	cmp	r3, #24
 80026ac:	d13a      	bne.n	8002724 <HAL_RCC_OscConfig+0x374>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d135      	bne.n	8002724 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b8:	4b7b      	ldr	r3, [pc, #492]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x320>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	2b80      	cmp	r3, #128	@ 0x80
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e2c1      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026d0:	f7ff fad6 	bl	8001c80 <HAL_GetREVID>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026da:	4293      	cmp	r3, r2
 80026dc:	d817      	bhi.n	800270e <HAL_RCC_OscConfig+0x35e>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d108      	bne.n	80026f8 <HAL_RCC_OscConfig+0x348>
 80026e6:	4b70      	ldr	r3, [pc, #448]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026ee:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026f6:	e075      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f8:	4b6b      	ldr	r3, [pc, #428]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	069b      	lsls	r3, r3, #26
 8002706:	4968      	ldr	r1, [pc, #416]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800270c:	e06a      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270e:	4b66      	ldr	r3, [pc, #408]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	4962      	ldr	r1, [pc, #392]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	4313      	orrs	r3, r2
 8002720:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002722:	e05f      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d042      	beq.n	80027b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a5d      	ldr	r2, [pc, #372]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7ff fa96 	bl	8001c68 <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002740:	f7ff fa92 	bl	8001c68 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e280      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002752:	4b55      	ldr	r3, [pc, #340]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800275e:	f7ff fa8f 	bl	8001c80 <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d817      	bhi.n	800279c <HAL_RCC_OscConfig+0x3ec>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	2b20      	cmp	r3, #32
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x3d6>
 8002774:	4b4c      	ldr	r3, [pc, #304]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800277c:	4a4a      	ldr	r2, [pc, #296]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002782:	6053      	str	r3, [r2, #4]
 8002784:	e02e      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
 8002786:	4b48      	ldr	r3, [pc, #288]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	4944      	ldr	r1, [pc, #272]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	e023      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
 800279c:	4b42      	ldr	r3, [pc, #264]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	061b      	lsls	r3, r3, #24
 80027aa:	493f      	ldr	r1, [pc, #252]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60cb      	str	r3, [r1, #12]
 80027b0:	e018      	b.n	80027e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027b2:	4b3d      	ldr	r3, [pc, #244]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a3c      	ldr	r2, [pc, #240]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027be:	f7ff fa53 	bl	8001c68 <HAL_GetTick>
 80027c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027c6:	f7ff fa4f 	bl	8001c68 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e23d      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d8:	4b33      	ldr	r3, [pc, #204]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d036      	beq.n	800285e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d019      	beq.n	800282c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4a2a      	ldr	r2, [pc, #168]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7ff fa30 	bl	8001c68 <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280c:	f7ff fa2c 	bl	8001c68 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e21a      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800281e:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCC_OscConfig+0x45c>
 800282a:	e018      	b.n	800285e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282c:	4b1e      	ldr	r3, [pc, #120]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002830:	4a1d      	ldr	r2, [pc, #116]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7ff fa16 	bl	8001c68 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7ff fa12 	bl	8001c68 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e200      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b00      	cmp	r3, #0
 8002868:	d039      	beq.n	80028de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01c      	beq.n	80028ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002872:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800287c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800287e:	f7ff f9f3 	bl	8001c68 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002886:	f7ff f9ef 	bl	8001c68 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e1dd      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x4d6>
 80028a4:	e01b      	b.n	80028de <HAL_RCC_OscConfig+0x52e>
 80028a6:	bf00      	nop
 80028a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ac:	4b9b      	ldr	r3, [pc, #620]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a9a      	ldr	r2, [pc, #616]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b8:	f7ff f9d6 	bl	8001c68 <HAL_GetTick>
 80028bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c0:	f7ff f9d2 	bl	8001c68 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1c0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d2:	4b92      	ldr	r3, [pc, #584]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	f000 8081 	beq.w	80029ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028ec:	4b8c      	ldr	r3, [pc, #560]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a8b      	ldr	r2, [pc, #556]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f8:	f7ff f9b6 	bl	8001c68 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7ff f9b2 	bl	8001c68 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b64      	cmp	r3, #100	@ 0x64
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1a0      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	4b83      	ldr	r3, [pc, #524]	@ (8002b20 <HAL_RCC_OscConfig+0x770>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x584>
 8002926:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	@ 0x70
 8002932:	e02d      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x5a6>
 800293c:	4b77      	ldr	r3, [pc, #476]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a76      	ldr	r2, [pc, #472]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
 8002948:	4b74      	ldr	r3, [pc, #464]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800294c:	4a73      	ldr	r2, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800294e:	f023 0304 	bic.w	r3, r3, #4
 8002952:	6713      	str	r3, [r2, #112]	@ 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c8>
 800295e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	@ 0x70
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	@ 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x5e0>
 8002978:	4b68      	ldr	r3, [pc, #416]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297c:	4a67      	ldr	r2, [pc, #412]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	@ 0x70
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002988:	4a64      	ldr	r2, [pc, #400]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7ff f966 	bl	8001c68 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7ff f962 	bl	8001c68 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e14e      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b6:	4b59      	ldr	r3, [pc, #356]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x5f0>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7ff f950 	bl	8001c68 <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7ff f94c 	bl	8001c68 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e138      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 812d 	beq.w	8002c52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f8:	4b48      	ldr	r3, [pc, #288]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a00:	2b18      	cmp	r3, #24
 8002a02:	f000 80bd 	beq.w	8002b80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 809e 	bne.w	8002b4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a10:	4b42      	ldr	r3, [pc, #264]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a41      	ldr	r2, [pc, #260]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7ff f924 	bl	8001c68 <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a24:	f7ff f920 	bl	8001c68 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e10e      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a36:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a42:	4b36      	ldr	r3, [pc, #216]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a46:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_RCC_OscConfig+0x774>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	430a      	orrs	r2, r1
 8002a56:	4931      	ldr	r1, [pc, #196]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	3b01      	subs	r3, #1
 8002a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	025b      	lsls	r3, r3, #9
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	3b01      	subs	r3, #1
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a84:	3b01      	subs	r3, #1
 8002a86:	061b      	lsls	r3, r3, #24
 8002a88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a8c:	4923      	ldr	r1, [pc, #140]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a92:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa2:	4b21      	ldr	r3, [pc, #132]	@ (8002b28 <HAL_RCC_OscConfig+0x778>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002aaa:	00d2      	lsls	r2, r2, #3
 8002aac:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	f023 020c 	bic.w	r2, r3, #12
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4917      	ldr	r1, [pc, #92]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ac4:	4b15      	ldr	r3, [pc, #84]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	f023 0202 	bic.w	r2, r3, #2
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad0:	4912      	ldr	r1, [pc, #72]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	4a07      	ldr	r2, [pc, #28]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b06:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a04      	ldr	r2, [pc, #16]	@ (8002b1c <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b12:	f7ff f8a9 	bl	8001c68 <HAL_GetTick>
 8002b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b18:	e011      	b.n	8002b3e <HAL_RCC_OscConfig+0x78e>
 8002b1a:	bf00      	nop
 8002b1c:	58024400 	.word	0x58024400
 8002b20:	58024800 	.word	0x58024800
 8002b24:	fffffc0c 	.word	0xfffffc0c
 8002b28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7ff f89c 	bl	8001c68 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e08a      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x77c>
 8002b4a:	e082      	b.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4c:	4b43      	ldr	r3, [pc, #268]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a42      	ldr	r2, [pc, #264]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7ff f886 	bl	8001c68 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f882 	bl	8001c68 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e070      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x7b0>
 8002b7e:	e068      	b.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b80:	4b36      	ldr	r3, [pc, #216]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b86:	4b35      	ldr	r3, [pc, #212]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d031      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d12a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d122      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	0a5b      	lsrs	r3, r3, #9
 8002bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d111      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d108      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0e1b      	lsrs	r3, r3, #24
 8002bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e02b      	b.n	8002c54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bfc:	4b17      	ldr	r3, [pc, #92]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c00:	08db      	lsrs	r3, r3, #3
 8002c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d01f      	beq.n	8002c52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c12:	4b12      	ldr	r3, [pc, #72]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c1e:	f7ff f823 	bl	8001c68 <HAL_GetTick>
 8002c22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c24:	bf00      	nop
 8002c26:	f7ff f81f 	bl	8001c68 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d0f9      	beq.n	8002c26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c36:	4b0a      	ldr	r3, [pc, #40]	@ (8002c60 <HAL_RCC_OscConfig+0x8b0>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c3e:	00d2      	lsls	r2, r2, #3
 8002c40:	4906      	ldr	r1, [pc, #24]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c46:	4b05      	ldr	r3, [pc, #20]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_RCC_OscConfig+0x8ac>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3730      	adds	r7, #48	@ 0x30
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	ffff0007 	.word	0xffff0007

08002c64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e19c      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b8a      	ldr	r3, [pc, #552]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b87      	ldr	r3, [pc, #540]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 020f 	bic.w	r2, r3, #15
 8002c8e:	4985      	ldr	r1, [pc, #532]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b83      	ldr	r3, [pc, #524]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e184      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d010      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d908      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cc4:	4b78      	ldr	r3, [pc, #480]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	4975      	ldr	r1, [pc, #468]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	4b70      	ldr	r3, [pc, #448]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d908      	bls.n	8002d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	496a      	ldr	r1, [pc, #424]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0310 	and.w	r3, r3, #16
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699a      	ldr	r2, [r3, #24]
 8002d14:	4b64      	ldr	r3, [pc, #400]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d908      	bls.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d20:	4b61      	ldr	r3, [pc, #388]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	495e      	ldr	r1, [pc, #376]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0320 	and.w	r3, r3, #32
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	4b59      	ldr	r3, [pc, #356]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d908      	bls.n	8002d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d4e:	4b56      	ldr	r3, [pc, #344]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	4953      	ldr	r1, [pc, #332]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f023 020f 	bic.w	r2, r3, #15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4947      	ldr	r1, [pc, #284]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d055      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	4940      	ldr	r1, [pc, #256]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002db4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d121      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0f6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d115      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0ea      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002de4:	4b30      	ldr	r3, [pc, #192]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0de      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d6      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4925      	ldr	r1, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e16:	f7fe ff27 	bl	8001c68 <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1e:	f7fe ff23 	bl	8001c68 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0be      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d1eb      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	490e      	ldr	r1, [pc, #56]	@ (8002ea8 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d214      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 020f 	bic.w	r2, r3, #15
 8002e8a:	4906      	ldr	r1, [pc, #24]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e92:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <HAL_RCC_ClockConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e086      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x34e>
 8002ea4:	52002000 	.word	0x52002000
 8002ea8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d208      	bcs.n	8002eda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	4939      	ldr	r1, [pc, #228]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d010      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	4b34      	ldr	r3, [pc, #208]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d208      	bcs.n	8002f08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ef6:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	492e      	ldr	r1, [pc, #184]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699a      	ldr	r2, [r3, #24]
 8002f18:	4b28      	ldr	r3, [pc, #160]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	69db      	ldr	r3, [r3, #28]
 8002f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d208      	bcs.n	8002f36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	4922      	ldr	r1, [pc, #136]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d208      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	4917      	ldr	r1, [pc, #92]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f64:	f000 f834 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	4912      	ldr	r1, [pc, #72]	@ (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_RCC_ClockConfig+0x358>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc0 <HAL_RCC_ClockConfig+0x35c>)
 8002f8c:	5cd3      	ldrb	r3, [r2, r3]
 8002f8e:	f003 031f 	and.w	r3, r3, #31
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <HAL_RCC_ClockConfig+0x360>)
 8002f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc8 <HAL_RCC_ClockConfig+0x364>)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fcc <HAL_RCC_ClockConfig+0x368>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fe14 	bl	8001bd4 <HAL_InitTick>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3718      	adds	r7, #24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	0800c12c 	.word	0x0800c12c
 8002fc4:	240000a4 	.word	0x240000a4
 8002fc8:	240000a0 	.word	0x240000a0
 8002fcc:	240000a8 	.word	0x240000a8

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fde:	2b18      	cmp	r3, #24
 8002fe0:	f200 8155 	bhi.w	800328e <HAL_RCC_GetSysClockFreq+0x2be>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <HAL_RCC_GetSysClockFreq+0x1c>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003051 	.word	0x08003051
 8002ff0:	0800328f 	.word	0x0800328f
 8002ff4:	0800328f 	.word	0x0800328f
 8002ff8:	0800328f 	.word	0x0800328f
 8002ffc:	0800328f 	.word	0x0800328f
 8003000:	0800328f 	.word	0x0800328f
 8003004:	0800328f 	.word	0x0800328f
 8003008:	0800328f 	.word	0x0800328f
 800300c:	08003077 	.word	0x08003077
 8003010:	0800328f 	.word	0x0800328f
 8003014:	0800328f 	.word	0x0800328f
 8003018:	0800328f 	.word	0x0800328f
 800301c:	0800328f 	.word	0x0800328f
 8003020:	0800328f 	.word	0x0800328f
 8003024:	0800328f 	.word	0x0800328f
 8003028:	0800328f 	.word	0x0800328f
 800302c:	0800307d 	.word	0x0800307d
 8003030:	0800328f 	.word	0x0800328f
 8003034:	0800328f 	.word	0x0800328f
 8003038:	0800328f 	.word	0x0800328f
 800303c:	0800328f 	.word	0x0800328f
 8003040:	0800328f 	.word	0x0800328f
 8003044:	0800328f 	.word	0x0800328f
 8003048:	0800328f 	.word	0x0800328f
 800304c:	08003083 	.word	0x08003083
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003050:	4b94      	ldr	r3, [pc, #592]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d009      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800305c:	4b91      	ldr	r3, [pc, #580]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	4a90      	ldr	r2, [pc, #576]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800306e:	e111      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003070:	4b8d      	ldr	r3, [pc, #564]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003072:	61bb      	str	r3, [r7, #24]
      break;
 8003074:	e10e      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003076:	4b8d      	ldr	r3, [pc, #564]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003078:	61bb      	str	r3, [r7, #24]
      break;
 800307a:	e10b      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800307c:	4b8c      	ldr	r3, [pc, #560]	@ (80032b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800307e:	61bb      	str	r3, [r7, #24]
      break;
 8003080:	e108      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003082:	4b88      	ldr	r3, [pc, #544]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800308c:	4b85      	ldr	r3, [pc, #532]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003096:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003098:	4b82      	ldr	r3, [pc, #520]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030a2:	4b80      	ldr	r3, [pc, #512]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	fb02 f303 	mul.w	r3, r2, r3
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80e1 	beq.w	8003288 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	f000 8083 	beq.w	80031d4 <HAL_RCC_GetSysClockFreq+0x204>
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f200 80a1 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x248>
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x114>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d056      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030e2:	e099      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030e4:	4b6f      	ldr	r3, [pc, #444]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030f0:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	4a6b      	ldr	r2, [pc, #428]	@ (80032a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003100:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311a:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312a:	ed97 6a02 	vldr	s12, [r7, #8]
 800312e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003146:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800314a:	e087      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003156:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315e:	4b51      	ldr	r3, [pc, #324]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003172:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318e:	e065      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a2:	4b40      	ldr	r3, [pc, #256]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031d2:	e043      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b2f      	ldr	r3, [pc, #188]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003216:	e021      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800325a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800325c:	4b11      	ldr	r3, [pc, #68]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	0a5b      	lsrs	r3, r3, #9
 8003262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003266:	3301      	adds	r3, #1
 8003268:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003274:	edd7 6a07 	vldr	s13, [r7, #28]
 8003278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003280:	ee17 3a90 	vmov	r3, s15
 8003284:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003286:	e005      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
      break;
 800328c:	e002      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003290:	61bb      	str	r3, [r7, #24]
      break;
 8003292:	bf00      	nop
  }

  return sysclockfreq;
 8003294:	69bb      	ldr	r3, [r7, #24]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3724      	adds	r7, #36	@ 0x24
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	58024400 	.word	0x58024400
 80032a8:	03d09000 	.word	0x03d09000
 80032ac:	003d0900 	.word	0x003d0900
 80032b0:	017d7840 	.word	0x017d7840
 80032b4:	46000000 	.word	0x46000000
 80032b8:	4c742400 	.word	0x4c742400
 80032bc:	4a742400 	.word	0x4a742400
 80032c0:	4bbebc20 	.word	0x4bbebc20

080032c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032ca:	f7ff fe81 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 80032ce:	4602      	mov	r2, r0
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	0a1b      	lsrs	r3, r3, #8
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	490f      	ldr	r1, [pc, #60]	@ (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032dc:	5ccb      	ldrb	r3, [r1, r3]
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	fa22 f303 	lsr.w	r3, r2, r3
 80032e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x50>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	4a09      	ldr	r2, [pc, #36]	@ (8003318 <HAL_RCC_GetHCLKFreq+0x54>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 8003300:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003302:	4a07      	ldr	r2, [pc, #28]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <HAL_RCC_GetHCLKFreq+0x58>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58024400 	.word	0x58024400
 8003318:	0800c12c 	.word	0x0800c12c
 800331c:	240000a4 	.word	0x240000a4
 8003320:	240000a0 	.word	0x240000a0

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003328:	f7ff ffcc 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4904      	ldr	r1, [pc, #16]	@ (800334c <HAL_RCC_GetPCLK1Freq+0x28>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	0800c12c 	.word	0x0800c12c

08003350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003354:	f7ff ffb6 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	0a1b      	lsrs	r3, r3, #8
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	0800c12c 	.word	0x0800c12c

0800337c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b0ca      	sub	sp, #296	@ 0x128
 8003382:	af00      	add	r7, sp, #0
 8003384:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea54 0305 	orrs.w	r3, r4, r5
 80033a6:	d049      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b2:	d02f      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b8:	d828      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033be:	d01a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c4:	d822      	bhi.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d007      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033d0:	e01c      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d2:	4bb8      	ldr	r3, [pc, #736]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	4ab7      	ldr	r2, [pc, #732]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033de:	e01a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e4:	3308      	adds	r3, #8
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 fc8f 	bl	8004d0c <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f4:	e00f      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3328      	adds	r3, #40	@ 0x28
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f001 fd36 	bl	8004e70 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10a      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800341e:	4ba5      	ldr	r3, [pc, #660]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800342c:	4aa1      	ldr	r2, [pc, #644]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800342e:	430b      	orrs	r3, r1
 8003430:	6513      	str	r3, [r2, #80]	@ 0x50
 8003432:	e003      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003448:	f04f 0900 	mov.w	r9, #0
 800344c:	ea58 0309 	orrs.w	r3, r8, r9
 8003450:	d047      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	2b04      	cmp	r3, #4
 800345a:	d82a      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003479 	.word	0x08003479
 8003468:	08003487 	.word	0x08003487
 800346c:	0800349d 	.word	0x0800349d
 8003470:	080034bb 	.word	0x080034bb
 8003474:	080034bb 	.word	0x080034bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003478:	4b8e      	ldr	r3, [pc, #568]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347c:	4a8d      	ldr	r2, [pc, #564]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003484:	e01a      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	3308      	adds	r3, #8
 800348c:	2100      	movs	r1, #0
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fc3c 	bl	8004d0c <RCCEx_PLL2_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349a:	e00f      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	3328      	adds	r3, #40	@ 0x28
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fce3 	bl	8004e70 <RCCEx_PLL3_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e004      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b8:	e000      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c4:	4b7b      	ldr	r3, [pc, #492]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c8:	f023 0107 	bic.w	r1, r3, #7
 80034cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	4a78      	ldr	r2, [pc, #480]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034ee:	f04f 0b00 	mov.w	fp, #0
 80034f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80034f6:	d04c      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003502:	d030      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003508:	d829      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800350a:	2bc0      	cmp	r3, #192	@ 0xc0
 800350c:	d02d      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800350e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003510:	d825      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003512:	2b80      	cmp	r3, #128	@ 0x80
 8003514:	d018      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d821      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800351e:	2b40      	cmp	r3, #64	@ 0x40
 8003520:	d007      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003522:	e01c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b63      	ldr	r3, [pc, #396]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a62      	ldr	r2, [pc, #392]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	3308      	adds	r3, #8
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fbe6 	bl	8004d0c <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fc8d 	bl	8004e70 <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800356a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003574:	4b4f      	ldr	r3, [pc, #316]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003578:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003582:	4a4c      	ldr	r2, [pc, #304]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	430b      	orrs	r3, r1
 8003586:	6513      	str	r3, [r2, #80]	@ 0x50
 8003588:	e003      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800359e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d053      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035be:	d035      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035c4:	d82e      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035ca:	d031      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035d0:	d828      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035d6:	d01a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035dc:	d822      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80035e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035e6:	d007      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035e8:	e01c      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ea:	4b32      	ldr	r3, [pc, #200]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035f6:	e01c      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fc:	3308      	adds	r3, #8
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fb83 	bl	8004d0c <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	3328      	adds	r3, #40	@ 0x28
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fc2a 	bl	8004e70 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003622:	e006      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800362a:	e002      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10b      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800364a:	4a1a      	ldr	r2, [pc, #104]	@ (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003670:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003674:	460b      	mov	r3, r1
 8003676:	4313      	orrs	r3, r2
 8003678:	d056      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003686:	d038      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800368c:	d831      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800368e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003692:	d034      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003698:	d82b      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800369a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800369e:	d01d      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a4:	d825      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d006      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036b0:	e01f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b2:	bf00      	nop
 80036b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b8:	4ba2      	ldr	r3, [pc, #648]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036bc:	4aa1      	ldr	r2, [pc, #644]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c4:	e01c      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ca:	3308      	adds	r3, #8
 80036cc:	2100      	movs	r1, #0
 80036ce:	4618      	mov	r0, r3
 80036d0:	f001 fb1c 	bl	8004d0c <RCCEx_PLL2_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036da:	e011      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	3328      	adds	r3, #40	@ 0x28
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f001 fbc3 	bl	8004e70 <RCCEx_PLL3_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f0:	e006      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f8:	e002      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036fa:	bf00      	nop
 80036fc:	e000      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10b      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003708:	4b8e      	ldr	r3, [pc, #568]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003718:	4a8a      	ldr	r2, [pc, #552]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800371a:	430b      	orrs	r3, r1
 800371c:	6593      	str	r3, [r2, #88]	@ 0x58
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003730:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003738:	2300      	movs	r3, #0
 800373a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800373e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003742:	460b      	mov	r3, r1
 8003744:	4313      	orrs	r3, r2
 8003746:	d03a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	2b30      	cmp	r3, #48	@ 0x30
 8003750:	d01f      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003752:	2b30      	cmp	r3, #48	@ 0x30
 8003754:	d819      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003756:	2b20      	cmp	r3, #32
 8003758:	d00c      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800375a:	2b20      	cmp	r3, #32
 800375c:	d815      	bhi.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d019      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003762:	2b10      	cmp	r3, #16
 8003764:	d111      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003766:	4b77      	ldr	r3, [pc, #476]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	4a76      	ldr	r2, [pc, #472]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003778:	3308      	adds	r3, #8
 800377a:	2102      	movs	r1, #2
 800377c:	4618      	mov	r0, r3
 800377e:	f001 fac5 	bl	8004d0c <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003788:	e006      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003790:	e002      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037a0:	4b68      	ldr	r3, [pc, #416]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ae:	4a65      	ldr	r2, [pc, #404]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80037d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d051      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037e8:	d035      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037ee:	d82e      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037f4:	d031      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037fa:	d828      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003800:	d01a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003806:	d822      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a4a      	ldr	r2, [pc, #296]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fa6e 	bl	8004d0c <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	3328      	adds	r3, #40	@ 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fb15 	bl	8004e70 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003864:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003872:	4a34      	ldr	r2, [pc, #208]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800388e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d056      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ac:	d033      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b2:	d82c      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038b8:	d02f      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038be:	d826      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038c4:	d02b      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038ca:	d820      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d0:	d012      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d6:	d81a      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d115      	bne.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3308      	adds	r3, #8
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fa0e 	bl	8004d0c <RCCEx_PLL2_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038f6:	e015      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	3328      	adds	r3, #40	@ 0x28
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 fab5 	bl	8004e70 <RCCEx_PLL3_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003914:	e006      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003916:	bf00      	nop
 8003918:	e004      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800391a:	bf00      	nop
 800391c:	e002      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800391e:	bf00      	nop
 8003920:	e000      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10d      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800392c:	4b05      	ldr	r3, [pc, #20]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800393a:	4a02      	ldr	r2, [pc, #8]	@ (8003944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800394c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800395c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003960:	2300      	movs	r3, #0
 8003962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003966:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800396a:	460b      	mov	r3, r1
 800396c:	4313      	orrs	r3, r2
 800396e:	d055      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800397c:	d033      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800397e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003982:	d82c      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003988:	d02f      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398e:	d826      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003994:	d02b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800399a:	d820      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a0:	d012      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039a6:	d81a      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d022      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039b0:	d115      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	3308      	adds	r3, #8
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f9a6 	bl	8004d0c <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039c6:	e015      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	3328      	adds	r3, #40	@ 0x28
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fa4d 	bl	8004e70 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039fc:	4ba3      	ldr	r3, [pc, #652]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a0c:	4a9f      	ldr	r2, [pc, #636]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a12:	e003      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a36:	460b      	mov	r3, r1
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	d037      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a46:	d00e      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4c:	d816      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a56:	d111      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4b8c      	ldr	r3, [pc, #560]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5c:	4a8b      	ldr	r2, [pc, #556]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a64:	e00f      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6a:	3308      	adds	r3, #8
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 f94c 	bl	8004d0c <RCCEx_PLL2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a7a:	e004      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a82:	e000      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10a      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa2:	e003      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003abc:	2300      	movs	r3, #0
 8003abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ac2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	d039      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d81c      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8003adc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b19 	.word	0x08003b19
 8003ae0:	08003aed 	.word	0x08003aed
 8003ae4:	08003afb 	.word	0x08003afb
 8003ae8:	08003b19 	.word	0x08003b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aec:	4b67      	ldr	r3, [pc, #412]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af0:	4a66      	ldr	r2, [pc, #408]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003af8:	e00f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3308      	adds	r3, #8
 8003b00:	2102      	movs	r1, #2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f902 	bl	8004d0c <RCCEx_PLL2_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b22:	4b5a      	ldr	r3, [pc, #360]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b26:	f023 0103 	bic.w	r1, r3, #3
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b30:	4a56      	ldr	r2, [pc, #344]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f000 809f 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b62:	4b4b      	ldr	r3, [pc, #300]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a4a      	ldr	r2, [pc, #296]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b6e:	f7fe f87b 	bl	8001c68 <HAL_GetTick>
 8003b72:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b76:	e00b      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fe f876 	bl	8001c68 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b64      	cmp	r3, #100	@ 0x64
 8003b86:	d903      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b8e:	e005      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b90:	4b3f      	ldr	r3, [pc, #252]	@ (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d179      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bb0:	4053      	eors	r3, r2
 8003bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d015      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bba:	4b34      	ldr	r3, [pc, #208]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b31      	ldr	r3, [pc, #196]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bca:	4a30      	ldr	r2, [pc, #192]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bde:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bf2:	d118      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe f838 	bl	8001c68 <HAL_GetTick>
 8003bf8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bfc:	e00d      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7fe f833 	bl	8001c68 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c08:	1ad2      	subs	r2, r2, r3
 8003c0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d903      	bls.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c18:	e005      	b.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0eb      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d129      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3e:	d10e      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c40:	4b12      	ldr	r3, [pc, #72]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c50:	091a      	lsrs	r2, r3, #4
 8003c52:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	4a0d      	ldr	r2, [pc, #52]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6113      	str	r3, [r2, #16]
 8003c5c:	e005      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c68:	6113      	str	r3, [r2, #16]
 8003c6a:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c80:	e00e      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c8a:	e009      	b.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c8c:	58024400 	.word	0x58024400
 8003c90:	58024800 	.word	0x58024800
 8003c94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca8:	f002 0301 	and.w	r3, r2, #1
 8003cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003cb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f000 8089 	beq.w	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cc8:	2b28      	cmp	r3, #40	@ 0x28
 8003cca:	d86b      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003dad 	.word	0x08003dad
 8003cd8:	08003da5 	.word	0x08003da5
 8003cdc:	08003da5 	.word	0x08003da5
 8003ce0:	08003da5 	.word	0x08003da5
 8003ce4:	08003da5 	.word	0x08003da5
 8003ce8:	08003da5 	.word	0x08003da5
 8003cec:	08003da5 	.word	0x08003da5
 8003cf0:	08003da5 	.word	0x08003da5
 8003cf4:	08003d79 	.word	0x08003d79
 8003cf8:	08003da5 	.word	0x08003da5
 8003cfc:	08003da5 	.word	0x08003da5
 8003d00:	08003da5 	.word	0x08003da5
 8003d04:	08003da5 	.word	0x08003da5
 8003d08:	08003da5 	.word	0x08003da5
 8003d0c:	08003da5 	.word	0x08003da5
 8003d10:	08003da5 	.word	0x08003da5
 8003d14:	08003d8f 	.word	0x08003d8f
 8003d18:	08003da5 	.word	0x08003da5
 8003d1c:	08003da5 	.word	0x08003da5
 8003d20:	08003da5 	.word	0x08003da5
 8003d24:	08003da5 	.word	0x08003da5
 8003d28:	08003da5 	.word	0x08003da5
 8003d2c:	08003da5 	.word	0x08003da5
 8003d30:	08003da5 	.word	0x08003da5
 8003d34:	08003dad 	.word	0x08003dad
 8003d38:	08003da5 	.word	0x08003da5
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003da5 	.word	0x08003da5
 8003d44:	08003da5 	.word	0x08003da5
 8003d48:	08003da5 	.word	0x08003da5
 8003d4c:	08003da5 	.word	0x08003da5
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003da5 	.word	0x08003da5
 8003d5c:	08003da5 	.word	0x08003da5
 8003d60:	08003da5 	.word	0x08003da5
 8003d64:	08003da5 	.word	0x08003da5
 8003d68:	08003da5 	.word	0x08003da5
 8003d6c:	08003da5 	.word	0x08003da5
 8003d70:	08003da5 	.word	0x08003da5
 8003d74:	08003dad 	.word	0x08003dad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	2101      	movs	r1, #1
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 ffc3 	bl	8004d0c <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e00f      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	3328      	adds	r3, #40	@ 0x28
 8003d94:	2101      	movs	r1, #1
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f86a 	bl	8004e70 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da2:	e004      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003daa:	e000      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003db6:	4bbf      	ldr	r3, [pc, #764]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc4:	4abb      	ldr	r2, [pc, #748]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ddc:	f002 0302 	and.w	r3, r2, #2
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003dea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d041      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfa:	2b05      	cmp	r3, #5
 8003dfc:	d824      	bhi.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e33 	.word	0x08003e33
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	3308      	adds	r3, #8
 8003e22:	2101      	movs	r1, #1
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 ff71 	bl	8004d0c <RCCEx_PLL2_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e30:	e00f      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e36:	3328      	adds	r3, #40	@ 0x28
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 f818 	bl	8004e70 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e46:	e004      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4e:	e000      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10a      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e5a:	4b96      	ldr	r3, [pc, #600]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f023 0107 	bic.w	r1, r3, #7
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e68:	4a92      	ldr	r2, [pc, #584]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e6e:	e003      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f002 0304 	and.w	r3, r2, #4
 8003e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4313      	orrs	r3, r2
 8003e96:	d044      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea0:	2b05      	cmp	r3, #5
 8003ea2:	d825      	bhi.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ef9 	.word	0x08003ef9
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003edb 	.word	0x08003edb
 8003eb8:	08003ef9 	.word	0x08003ef9
 8003ebc:	08003ef9 	.word	0x08003ef9
 8003ec0:	08003ef9 	.word	0x08003ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	3308      	adds	r3, #8
 8003eca:	2101      	movs	r1, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 ff1d 	bl	8004d0c <RCCEx_PLL2_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ed8:	e00f      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	3328      	adds	r3, #40	@ 0x28
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 ffc4 	bl	8004e70 <RCCEx_PLL3_Config>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003eee:	e004      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ef6:	e000      	b.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f02:	4b6c      	ldr	r3, [pc, #432]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f06:	f023 0107 	bic.w	r1, r3, #7
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f12:	4a68      	ldr	r2, [pc, #416]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f14:	430b      	orrs	r3, r1
 8003f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f18:	e003      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2a:	f002 0320 	and.w	r3, r2, #32
 8003f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	d055      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f4e:	d033      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f54:	d82c      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5a:	d02f      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d826      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f66:	d02b      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f6c:	d820      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f72:	d012      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f78:	d81a      	bhi.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d022      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f82:	d115      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	3308      	adds	r3, #8
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 febd 	bl	8004d0c <RCCEx_PLL2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f98:	e015      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	3328      	adds	r3, #40	@ 0x28
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 ff64 	bl	8004e70 <RCCEx_PLL3_Config>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb6:	e006      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fb8:	bf00      	nop
 8003fba:	e004      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e000      	b.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10b      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fce:	4b39      	ldr	r3, [pc, #228]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fde:	4a35      	ldr	r2, [pc, #212]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe4:	e003      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004004:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004008:	460b      	mov	r3, r1
 800400a:	4313      	orrs	r3, r2
 800400c:	d058      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004016:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800401a:	d033      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800401c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004020:	d82c      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004026:	d02f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800402c:	d826      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800402e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004032:	d02b      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004038:	d820      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403e:	d012      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004044:	d81a      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d022      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404e:	d115      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004054:	3308      	adds	r3, #8
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fe57 	bl	8004d0c <RCCEx_PLL2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004064:	e015      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	3328      	adds	r3, #40	@ 0x28
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fefe 	bl	8004e70 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800407a:	e00a      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10e      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800409a:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040aa:	4a02      	ldr	r2, [pc, #8]	@ (80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040da:	460b      	mov	r3, r1
 80040dc:	4313      	orrs	r3, r2
 80040de:	d055      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040ec:	d033      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040f2:	d82c      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040f8:	d02f      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fe:	d826      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004100:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004104:	d02b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004106:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800410a:	d820      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800410c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004110:	d012      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004116:	d81a      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004120:	d115      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	3308      	adds	r3, #8
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fdee 	bl	8004d0c <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004136:	e015      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2102      	movs	r1, #2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fe95 	bl	8004e70 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800414c:	e00a      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004156:	bf00      	nop
 8004158:	e004      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800415a:	bf00      	nop
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800416c:	4ba1      	ldr	r3, [pc, #644]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800416e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004170:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800417c:	4a9d      	ldr	r2, [pc, #628]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6593      	str	r3, [r2, #88]	@ 0x58
 8004182:	e003      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	f002 0308 	and.w	r3, r2, #8
 8004198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041a6:	460b      	mov	r3, r1
 80041a8:	4313      	orrs	r3, r2
 80041aa:	d01e      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2102      	movs	r1, #2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fe54 	bl	8004e70 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041d4:	4b87      	ldr	r3, [pc, #540]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e4:	4a83      	ldr	r2, [pc, #524]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f2:	f002 0310 	and.w	r3, r2, #16
 80041f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041fa:	2300      	movs	r3, #0
 80041fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004200:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004204:	460b      	mov	r3, r1
 8004206:	4313      	orrs	r3, r2
 8004208:	d01e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004216:	d10c      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	3328      	adds	r3, #40	@ 0x28
 800421e:	2102      	movs	r1, #2
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fe25 	bl	8004e70 <RCCEx_PLL3_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004232:	4b70      	ldr	r3, [pc, #448]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004242:	4a6c      	ldr	r2, [pc, #432]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004258:	2300      	movs	r3, #0
 800425a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800425e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d03e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004274:	d022      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800427a:	d81b      	bhi.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004284:	d00b      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004286:	e015      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	3308      	adds	r3, #8
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd3b 	bl	8004d0c <RCCEx_PLL2_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800429c:	e00f      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	3328      	adds	r3, #40	@ 0x28
 80042a4:	2102      	movs	r1, #2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fde2 	bl	8004e70 <RCCEx_PLL3_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b2:	e004      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c6:	4b4b      	ldr	r3, [pc, #300]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042d6:	4a47      	ldr	r2, [pc, #284]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6593      	str	r3, [r2, #88]	@ 0x58
 80042dc:	e003      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f4:	2300      	movs	r3, #0
 80042f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d03b      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800430e:	d01f      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004314:	d818      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800431c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004320:	d007      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004322:	e011      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4b33      	ldr	r3, [pc, #204]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004328:	4a32      	ldr	r2, [pc, #200]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004330:	e00f      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fd98 	bl	8004e70 <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10b      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800435a:	4b26      	ldr	r3, [pc, #152]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	4a22      	ldr	r2, [pc, #136]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800436c:	430b      	orrs	r3, r1
 800436e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004370:	e003      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004386:	673b      	str	r3, [r7, #112]	@ 0x70
 8004388:	2300      	movs	r3, #0
 800438a:	677b      	str	r3, [r7, #116]	@ 0x74
 800438c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d034      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d007      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043a6:	e011      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043a8:	4b12      	ldr	r3, [pc, #72]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ac:	4a11      	ldr	r2, [pc, #68]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043b4:	e00e      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	3308      	adds	r3, #8
 80043bc:	2102      	movs	r1, #2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fca4 	bl	8004d0c <RCCEx_PLL2_Config>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043dc:	4b05      	ldr	r3, [pc, #20]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	4a02      	ldr	r2, [pc, #8]	@ (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043f0:	e006      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004408:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800440c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800440e:	2300      	movs	r3, #0
 8004410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004412:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004416:	460b      	mov	r3, r1
 8004418:	4313      	orrs	r3, r2
 800441a:	d00c      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fd23 	bl	8004e70 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004442:	663b      	str	r3, [r7, #96]	@ 0x60
 8004444:	2300      	movs	r3, #0
 8004446:	667b      	str	r3, [r7, #100]	@ 0x64
 8004448:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800444c:	460b      	mov	r3, r1
 800444e:	4313      	orrs	r3, r2
 8004450:	d038      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800445e:	d018      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004464:	d811      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800446a:	d014      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d80b      	bhi.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447a:	d106      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800447c:	4bc3      	ldr	r3, [pc, #780]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004480:	4ac2      	ldr	r2, [pc, #776]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004488:	e008      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004490:	e004      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004492:	bf00      	nop
 8004494:	e002      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004496:	bf00      	nop
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800449a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044a4:	4bb9      	ldr	r3, [pc, #740]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044b4:	4ab5      	ldr	r2, [pc, #724]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ba:	e003      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	d009      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044e0:	4baa      	ldr	r3, [pc, #680]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	4aa7      	ldr	r2, [pc, #668]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004500:	653b      	str	r3, [r7, #80]	@ 0x50
 8004502:	2300      	movs	r3, #0
 8004504:	657b      	str	r3, [r7, #84]	@ 0x54
 8004506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800450a:	460b      	mov	r3, r1
 800450c:	4313      	orrs	r3, r2
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004510:	4b9e      	ldr	r3, [pc, #632]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004520:	4a9a      	ldr	r2, [pc, #616]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004522:	430b      	orrs	r3, r1
 8004524:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004532:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004534:	2300      	movs	r3, #0
 8004536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004538:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800453c:	460b      	mov	r3, r1
 800453e:	4313      	orrs	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004542:	4b92      	ldr	r3, [pc, #584]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004546:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004550:	4a8e      	ldr	r2, [pc, #568]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004552:	430b      	orrs	r3, r1
 8004554:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004562:	643b      	str	r3, [r7, #64]	@ 0x40
 8004564:	2300      	movs	r3, #0
 8004566:	647b      	str	r3, [r7, #68]	@ 0x44
 8004568:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004572:	4b86      	ldr	r3, [pc, #536]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	4a85      	ldr	r2, [pc, #532]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800457c:	6113      	str	r3, [r2, #16]
 800457e:	4b83      	ldr	r3, [pc, #524]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800458a:	4a80      	ldr	r2, [pc, #512]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458c:	430b      	orrs	r3, r1
 800458e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004598:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800459c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800459e:	2300      	movs	r3, #0
 80045a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	d009      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045ac:	4b77      	ldr	r3, [pc, #476]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	4a74      	ldr	r2, [pc, #464]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ce:	2300      	movs	r3, #0
 80045d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045dc:	4b6b      	ldr	r3, [pc, #428]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ec:	4a67      	ldr	r2, [pc, #412]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fa:	2100      	movs	r1, #0
 80045fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004604:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d011      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800460e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004612:	3308      	adds	r3, #8
 8004614:	2100      	movs	r1, #0
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fb78 	bl	8004d0c <RCCEx_PLL2_Config>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800462e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	2100      	movs	r1, #0
 800463c:	6239      	str	r1, [r7, #32]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
 8004644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004648:	460b      	mov	r3, r1
 800464a:	4313      	orrs	r3, r2
 800464c:	d011      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	3308      	adds	r3, #8
 8004654:	2101      	movs	r1, #1
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fb58 	bl	8004d0c <RCCEx_PLL2_Config>
 800465c:	4603      	mov	r3, r0
 800465e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800466e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	2100      	movs	r1, #0
 800467c:	61b9      	str	r1, [r7, #24]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	61fb      	str	r3, [r7, #28]
 8004684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	d011      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	3308      	adds	r3, #8
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fb38 	bl	8004d0c <RCCEx_PLL2_Config>
 800469c:	4603      	mov	r3, r0
 800469e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	2100      	movs	r1, #0
 80046bc:	6139      	str	r1, [r7, #16]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d011      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	3328      	adds	r3, #40	@ 0x28
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fbca 	bl	8004e70 <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	2100      	movs	r1, #0
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004708:	460b      	mov	r3, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	d011      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	3328      	adds	r3, #40	@ 0x28
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fbaa 	bl	8004e70 <RCCEx_PLL3_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	2100      	movs	r1, #0
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d011      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	3328      	adds	r3, #40	@ 0x28
 8004754:	2102      	movs	r1, #2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb8a 	bl	8004e70 <RCCEx_PLL3_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004772:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
}
 8004780:	4618      	mov	r0, r3
 8004782:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004786:	46bd      	mov	sp, r7
 8004788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478c:	58024400 	.word	0x58024400

08004790 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004794:	f7fe fd96 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	58024400 	.word	0x58024400
 80047b8:	0800c12c 	.word	0x0800c12c

080047bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	@ 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047c4:	4ba1      	ldr	r3, [pc, #644]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0303 	and.w	r3, r3, #3
 80047cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047ce:	4b9f      	ldr	r3, [pc, #636]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	0b1b      	lsrs	r3, r3, #12
 80047d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047da:	4b9c      	ldr	r3, [pc, #624]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047e6:	4b99      	ldr	r3, [pc, #612]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	08db      	lsrs	r3, r3, #3
 80047ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8111 	beq.w	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	2b02      	cmp	r3, #2
 800480e:	f000 8083 	beq.w	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b02      	cmp	r3, #2
 8004816:	f200 80a1 	bhi.w	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d056      	beq.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004826:	e099      	b.n	800495c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004828:	4b88      	ldr	r3, [pc, #544]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02d      	beq.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004834:	4b85      	ldr	r3, [pc, #532]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	08db      	lsrs	r3, r3, #3
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	4a84      	ldr	r2, [pc, #528]	@ (8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
 8004844:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	ee07 3a90 	vmov	s15, r3
 800484c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b7b      	ldr	r3, [pc, #492]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800488e:	e087      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d2:	e065      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b59      	ldr	r3, [pc, #356]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004916:	e043      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	ee07 3a90 	vmov	s15, r3
 800491e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004922:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492a:	4b48      	ldr	r3, [pc, #288]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	ed97 6a03 	vldr	s12, [r7, #12]
 800493e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495a:	e021      	b.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800496a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496e:	4b37      	ldr	r3, [pc, #220]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004982:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800499e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049a0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	0a5b      	lsrs	r3, r3, #9
 80049a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80049be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049c6:	ee17 2a90 	vmov	r2, s15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049ce:	4b1f      	ldr	r3, [pc, #124]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f4:	ee17 2a90 	vmov	r2, s15
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	0e1b      	lsrs	r3, r3, #24
 8004a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a22:	ee17 2a90 	vmov	r2, s15
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a2a:	e008      	b.n	8004a3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	609a      	str	r2, [r3, #8]
}
 8004a3e:	bf00      	nop
 8004a40:	3724      	adds	r7, #36	@ 0x24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	58024400 	.word	0x58024400
 8004a50:	03d09000 	.word	0x03d09000
 8004a54:	46000000 	.word	0x46000000
 8004a58:	4c742400 	.word	0x4c742400
 8004a5c:	4a742400 	.word	0x4a742400
 8004a60:	4bbebc20 	.word	0x4bbebc20

08004a64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	@ 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a6c:	4ba1      	ldr	r3, [pc, #644]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a76:	4b9f      	ldr	r3, [pc, #636]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7a:	0d1b      	lsrs	r3, r3, #20
 8004a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a82:	4b9c      	ldr	r3, [pc, #624]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	0a1b      	lsrs	r3, r3, #8
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a8e:	4b99      	ldr	r3, [pc, #612]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a92:	08db      	lsrs	r3, r3, #3
 8004a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8111 	beq.w	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	f000 8083 	beq.w	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	f200 80a1 	bhi.w	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d056      	beq.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ace:	e099      	b.n	8004c04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad0:	4b88      	ldr	r3, [pc, #544]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d02d      	beq.n	8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004adc:	4b85      	ldr	r3, [pc, #532]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	08db      	lsrs	r3, r3, #3
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	4a84      	ldr	r2, [pc, #528]	@ (8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b7b      	ldr	r3, [pc, #492]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b36:	e087      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	e065      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8e:	4b59      	ldr	r3, [pc, #356]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bbe:	e043      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd2:	4b48      	ldr	r3, [pc, #288]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bda:	ee07 3a90 	vmov	s15, r3
 8004bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c02:	e021      	b.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c16:	4b37      	ldr	r3, [pc, #220]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1e:	ee07 3a90 	vmov	s15, r3
 8004c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c48:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	0a5b      	lsrs	r3, r3, #9
 8004c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c52:	ee07 3a90 	vmov	s15, r3
 8004c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6e:	ee17 2a90 	vmov	r2, s15
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c76:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c90:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c9c:	ee17 2a90 	vmov	r2, s15
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca8:	0e1b      	lsrs	r3, r3, #24
 8004caa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cca:	ee17 2a90 	vmov	r2, s15
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
}
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	03d09000 	.word	0x03d09000
 8004cfc:	46000000 	.word	0x46000000
 8004d00:	4c742400 	.word	0x4c742400
 8004d04:	4a742400 	.word	0x4a742400
 8004d08:	4bbebc20 	.word	0x4bbebc20

08004d0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d1a:	4b53      	ldr	r3, [pc, #332]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d101      	bne.n	8004d2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e099      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d36:	f7fc ff97 	bl	8001c68 <HAL_GetTick>
 8004d3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d3e:	f7fc ff93 	bl	8001c68 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e086      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d50:	4b45      	ldr	r3, [pc, #276]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f0      	bne.n	8004d3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d5c:	4b42      	ldr	r3, [pc, #264]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	031b      	lsls	r3, r3, #12
 8004d6a:	493f      	ldr	r1, [pc, #252]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	025b      	lsls	r3, r3, #9
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	061b      	lsls	r3, r3, #24
 8004d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004da0:	4931      	ldr	r1, [pc, #196]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004da6:	4b30      	ldr	r3, [pc, #192]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	492d      	ldr	r1, [pc, #180]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004db8:	4b2b      	ldr	r3, [pc, #172]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f023 0220 	bic.w	r2, r3, #32
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	4928      	ldr	r1, [pc, #160]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dca:	4b27      	ldr	r3, [pc, #156]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	4a26      	ldr	r2, [pc, #152]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dd6:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dda:	4b24      	ldr	r3, [pc, #144]	@ (8004e6c <RCCEx_PLL2_Config+0x160>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	69d2      	ldr	r2, [r2, #28]
 8004de2:	00d2      	lsls	r2, r2, #3
 8004de4:	4920      	ldr	r1, [pc, #128]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dea:	4b1f      	ldr	r3, [pc, #124]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004df0:	f043 0310 	orr.w	r3, r3, #16
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4a19      	ldr	r2, [pc, #100]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e08:	e00f      	b.n	8004e2a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e10:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e14:	4a14      	ldr	r2, [pc, #80]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e1c:	e005      	b.n	8004e2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a11      	ldr	r2, [pc, #68]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e30:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e36:	f7fc ff17 	bl	8001c68 <HAL_GetTick>
 8004e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e3c:	e008      	b.n	8004e50 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e3e:	f7fc ff13 	bl	8001c68 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e006      	b.n	8004e5e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e50:	4b05      	ldr	r3, [pc, #20]	@ (8004e68 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58024400 	.word	0x58024400
 8004e6c:	ffff0007 	.word	0xffff0007

08004e70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d101      	bne.n	8004e8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e099      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4e      	ldr	r2, [pc, #312]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fee5 	bl	8001c68 <HAL_GetTick>
 8004e9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ea2:	f7fc fee1 	bl	8001c68 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e086      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004eb4:	4b45      	ldr	r3, [pc, #276]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ec0:	4b42      	ldr	r3, [pc, #264]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	051b      	lsls	r3, r3, #20
 8004ece:	493f      	ldr	r1, [pc, #252]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f04:	4931      	ldr	r1, [pc, #196]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f0a:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	492d      	ldr	r1, [pc, #180]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4928      	ldr	r1, [pc, #160]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <RCCEx_PLL3_Config+0x160>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69d2      	ldr	r2, [r2, #28]
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	4920      	ldr	r1, [pc, #128]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f66:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f6c:	e00f      	b.n	8004f8e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e005      	b.n	8004f8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004f94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fe65 	bl	8001c68 <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fa2:	f7fc fe61 	bl	8001c68 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	ffff0007 	.word	0xffff0007

08004fd4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e10f      	b.n	8005206 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a87      	ldr	r2, [pc, #540]	@ (8005210 <HAL_SPI_Init+0x23c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00f      	beq.n	8005016 <HAL_SPI_Init+0x42>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a86      	ldr	r2, [pc, #536]	@ (8005214 <HAL_SPI_Init+0x240>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00a      	beq.n	8005016 <HAL_SPI_Init+0x42>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a84      	ldr	r2, [pc, #528]	@ (8005218 <HAL_SPI_Init+0x244>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d005      	beq.n	8005016 <HAL_SPI_Init+0x42>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b0f      	cmp	r3, #15
 8005010:	d901      	bls.n	8005016 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0f7      	b.n	8005206 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fe2e 	bl	8005c78 <SPI_GetPacketSize>
 800501c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7b      	ldr	r2, [pc, #492]	@ (8005210 <HAL_SPI_Init+0x23c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00c      	beq.n	8005042 <HAL_SPI_Init+0x6e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a79      	ldr	r2, [pc, #484]	@ (8005214 <HAL_SPI_Init+0x240>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d007      	beq.n	8005042 <HAL_SPI_Init+0x6e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a78      	ldr	r2, [pc, #480]	@ (8005218 <HAL_SPI_Init+0x244>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d002      	beq.n	8005042 <HAL_SPI_Init+0x6e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b08      	cmp	r3, #8
 8005040:	d811      	bhi.n	8005066 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005046:	4a72      	ldr	r2, [pc, #456]	@ (8005210 <HAL_SPI_Init+0x23c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d009      	beq.n	8005060 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a70      	ldr	r2, [pc, #448]	@ (8005214 <HAL_SPI_Init+0x240>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d004      	beq.n	8005060 <HAL_SPI_Init+0x8c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a6f      	ldr	r2, [pc, #444]	@ (8005218 <HAL_SPI_Init+0x244>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d104      	bne.n	800506a <HAL_SPI_Init+0x96>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b10      	cmp	r3, #16
 8005064:	d901      	bls.n	800506a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e0cd      	b.n	8005206 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc faba 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 0201 	bic.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80050a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80050b0:	d119      	bne.n	80050e6 <HAL_SPI_Init+0x112>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050ba:	d103      	bne.n	80050c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050d4:	d107      	bne.n	80050e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00f      	beq.n	8005112 <HAL_SPI_Init+0x13e>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d90b      	bls.n	8005112 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	e007      	b.n	8005122 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005120:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69da      	ldr	r2, [r3, #28]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512a:	431a      	orrs	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005134:	ea42 0103 	orr.w	r1, r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514c:	431a      	orrs	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	ea42 0103 	orr.w	r1, r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d113      	bne.n	80051c2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80051c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40013000 	.word	0x40013000
 8005214:	40003800 	.word	0x40003800
 8005218:	40003c00 	.word	0x40003c00

0800521c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b088      	sub	sp, #32
 8005220:	af02      	add	r7, sp, #8
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	4613      	mov	r3, r2
 800522a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3320      	adds	r3, #32
 8005232:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005234:	f7fc fd18 	bl	8001c68 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	e1d1      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d002      	beq.n	8005256 <HAL_SPI_Transmit+0x3a>
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e1c9      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SPI_Transmit+0x4c>
 8005264:	2302      	movs	r3, #2
 8005266:	e1c2      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2203      	movs	r2, #3
 8005274:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	88fa      	ldrh	r2, [r7, #6]
 800528a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80052c0:	d108      	bne.n	80052d4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e009      	b.n	80052e8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80052e6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4b96      	ldr	r3, [pc, #600]	@ (8005548 <HAL_SPI_Transmit+0x32c>)
 80052f0:	4013      	ands	r3, r2
 80052f2:	88f9      	ldrh	r1, [r7, #6]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	430b      	orrs	r3, r1
 80052fa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005314:	d107      	bne.n	8005326 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005324:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d947      	bls.n	80053be <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800532e:	e03f      	b.n	80053b0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d114      	bne.n	8005368 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534e:	1d1a      	adds	r2, r3, #4
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005366:	e023      	b.n	80053b0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005368:	f7fc fc7e 	bl	8001c68 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d803      	bhi.n	8005380 <HAL_SPI_Transmit+0x164>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537e:	d102      	bne.n	8005386 <HAL_SPI_Transmit+0x16a>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fba8 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005392:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e11e      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1b9      	bne.n	8005330 <HAL_SPI_Transmit+0x114>
 80053bc:	e0f1      	b.n	80055a2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	f240 80e6 	bls.w	8005594 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80053c8:	e05d      	b.n	8005486 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d132      	bne.n	800543e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d918      	bls.n	8005416 <HAL_SPI_Transmit+0x1fa>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d014      	beq.n	8005416 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b02      	subs	r3, #2
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005414:	e037      	b.n	8005486 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800543c:	e023      	b.n	8005486 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543e:	f7fc fc13 	bl	8001c68 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d803      	bhi.n	8005456 <HAL_SPI_Transmit+0x23a>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x240>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d114      	bne.n	8005486 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fb3d 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005468:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0b3      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d19b      	bne.n	80053ca <HAL_SPI_Transmit+0x1ae>
 8005492:	e086      	b.n	80055a2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d154      	bne.n	800554c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d918      	bls.n	80054e0 <HAL_SPI_Transmit+0x2c4>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054b2:	2b40      	cmp	r3, #64	@ 0x40
 80054b4:	d914      	bls.n	80054e0 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	3b04      	subs	r3, #4
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80054de:	e059      	b.n	8005594 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d917      	bls.n	800551c <HAL_SPI_Transmit+0x300>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f8:	881a      	ldrh	r2, [r3, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005502:	1c9a      	adds	r2, r3, #2
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b02      	subs	r3, #2
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800551a:	e03b      	b.n	8005594 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3320      	adds	r3, #32
 8005526:	7812      	ldrb	r2, [r2, #0]
 8005528:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005546:	e025      	b.n	8005594 <HAL_SPI_Transmit+0x378>
 8005548:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800554c:	f7fc fb8c 	bl	8001c68 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	683a      	ldr	r2, [r7, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d803      	bhi.n	8005564 <HAL_SPI_Transmit+0x348>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005562:	d102      	bne.n	800556a <HAL_SPI_Transmit+0x34e>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d114      	bne.n	8005594 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fab6 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005576:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e02c      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	f47f af79 	bne.w	8005494 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2200      	movs	r2, #0
 80055aa:	2108      	movs	r1, #8
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 fb35 	bl	8005c1c <SPI_WaitOnFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055be:	f043 0220 	orr.w	r2, r3, #32
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fa87 	bl	8005adc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d001      	beq.n	80055ec <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80055ec:	2300      	movs	r3, #0
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop

080055f8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b088      	sub	sp, #32
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	b29b      	uxth	r3, r3
 8005610:	3301      	adds	r3, #1
 8005612:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3330      	adds	r3, #48	@ 0x30
 800561a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800561c:	f7fc fb24 	bl	8001c68 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	d001      	beq.n	8005632 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800562e:	2302      	movs	r3, #2
 8005630:	e250      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_SPI_Receive+0x46>
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e248      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_SPI_Receive+0x58>
 800564c:	2302      	movs	r3, #2
 800564e:	e241      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2204      	movs	r2, #4
 800565c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80056a8:	d108      	bne.n	80056bc <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e009      	b.n	80056d0 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80056ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	4b95      	ldr	r3, [pc, #596]	@ (800592c <HAL_SPI_Receive+0x334>)
 80056d8:	4013      	ands	r3, r2
 80056da:	88f9      	ldrh	r1, [r7, #6]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	6812      	ldr	r2, [r2, #0]
 80056e0:	430b      	orrs	r3, r1
 80056e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fc:	d107      	bne.n	800570e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800570c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b0f      	cmp	r3, #15
 8005714:	d96c      	bls.n	80057f0 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005716:	e064      	b.n	80057e2 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d114      	bne.n	8005758 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005736:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005738:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800573e:	1d1a      	adds	r2, r3, #4
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005756:	e044      	b.n	80057e2 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800575e:	b29b      	uxth	r3, r3
 8005760:	8bfa      	ldrh	r2, [r7, #30]
 8005762:	429a      	cmp	r2, r3
 8005764:	d919      	bls.n	800579a <HAL_SPI_Receive+0x1a2>
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d014      	beq.n	800579a <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005778:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800577a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005780:	1d1a      	adds	r2, r3, #4
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29a      	uxth	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005798:	e023      	b.n	80057e2 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579a:	f7fc fa65 	bl	8001c68 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d803      	bhi.n	80057b2 <HAL_SPI_Receive+0x1ba>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Receive+0x1c0>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d114      	bne.n	80057e2 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f98f 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e178      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d194      	bne.n	8005718 <HAL_SPI_Receive+0x120>
 80057ee:	e15e      	b.n	8005aae <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b07      	cmp	r3, #7
 80057f6:	f240 8153 	bls.w	8005aa0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80057fa:	e08f      	b.n	800591c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d114      	bne.n	800583c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	b292      	uxth	r2, r2
 800581c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800583a:	e06f      	b.n	800591c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005842:	b29b      	uxth	r3, r3
 8005844:	8bfa      	ldrh	r2, [r7, #30]
 8005846:	429a      	cmp	r2, r3
 8005848:	d924      	bls.n	8005894 <HAL_SPI_Receive+0x29c>
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01f      	beq.n	8005894 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	8812      	ldrh	r2, [r2, #0]
 800585c:	b292      	uxth	r2, r2
 800585e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005864:	1c9a      	adds	r2, r3, #2
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800586e:	69ba      	ldr	r2, [r7, #24]
 8005870:	8812      	ldrh	r2, [r2, #0]
 8005872:	b292      	uxth	r2, r2
 8005874:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005886:	b29b      	uxth	r3, r3
 8005888:	3b02      	subs	r3, #2
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005892:	e043      	b.n	800591c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800589a:	b29b      	uxth	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d119      	bne.n	80058d4 <HAL_SPI_Receive+0x2dc>
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d014      	beq.n	80058d4 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	8812      	ldrh	r2, [r2, #0]
 80058b2:	b292      	uxth	r2, r2
 80058b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80058d2:	e023      	b.n	800591c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d4:	f7fc f9c8 	bl	8001c68 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d803      	bhi.n	80058ec <HAL_SPI_Receive+0x2f4>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Receive+0x2fa>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d114      	bne.n	800591c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 f8f2 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058fe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e0db      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f af69 	bne.w	80057fc <HAL_SPI_Receive+0x204>
 800592a:	e0c0      	b.n	8005aae <HAL_SPI_Receive+0x4b6>
 800592c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d117      	bne.n	8005976 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005974:	e094      	b.n	8005aa0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800597c:	b29b      	uxth	r3, r3
 800597e:	8bfa      	ldrh	r2, [r7, #30]
 8005980:	429a      	cmp	r2, r3
 8005982:	d946      	bls.n	8005a12 <HAL_SPI_Receive+0x41a>
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d041      	beq.n	8005a12 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059d2:	7812      	ldrb	r2, [r2, #0]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ee:	7812      	ldrb	r2, [r2, #0]
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	3b04      	subs	r3, #4
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a10:	e046      	b.n	8005aa0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d81c      	bhi.n	8005a58 <HAL_SPI_Receive+0x460>
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d017      	beq.n	8005a58 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a56:	e023      	b.n	8005aa0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a58:	f7fc f906 	bl	8001c68 <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d803      	bhi.n	8005a70 <HAL_SPI_Receive+0x478>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a6e:	d102      	bne.n	8005a76 <HAL_SPI_Receive+0x47e>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d114      	bne.n	8005aa0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 f830 	bl	8005adc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a82:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e019      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af41 	bne.w	8005930 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f814 	bl	8005adc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
  }
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0208 	orr.w	r2, r2, #8
 8005afa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0210 	orr.w	r2, r2, #16
 8005b0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0201 	bic.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6919      	ldr	r1, [r3, #16]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4b3c      	ldr	r3, [pc, #240]	@ (8005c18 <SPI_CloseTransfer+0x13c>)
 8005b28:	400b      	ands	r3, r1
 8005b2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005b3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d014      	beq.n	8005b72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00f      	beq.n	8005b72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b58:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699a      	ldr	r2, [r3, #24]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0220 	orr.w	r2, r2, #32
 8005b70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d014      	beq.n	8005ba8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00f      	beq.n	8005ba8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b8e:	f043 0204 	orr.w	r2, r3, #4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ba6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00f      	beq.n	8005bd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bb8:	f043 0201 	orr.w	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699a      	ldr	r2, [r3, #24]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00f      	beq.n	8005bfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005be2:	f043 0208 	orr.w	r2, r3, #8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005c0c:	bf00      	nop
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	fffffc90 	.word	0xfffffc90

08005c1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c2c:	e010      	b.n	8005c50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fc f81b 	bl	8001c68 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d803      	bhi.n	8005c46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c44:	d102      	bne.n	8005c4c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00f      	b.n	8005c70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d0df      	beq.n	8005c2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c84:	095b      	lsrs	r3, r3, #5
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	3307      	adds	r3, #7
 8005c96:	08db      	lsrs	r3, r3, #3
 8005c98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e049      	b.n	8005d54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fb fd1d 	bl	8001714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f000 fad5 	bl	800629c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d001      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e054      	b.n	8005e1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a26      	ldr	r2, [pc, #152]	@ (8005e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d9e:	d01d      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a22      	ldr	r2, [pc, #136]	@ (8005e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a21      	ldr	r2, [pc, #132]	@ (8005e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8005e3c <HAL_TIM_Base_Start_IT+0xe0>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8005e40 <HAL_TIM_Base_Start_IT+0xe4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e44 <HAL_TIM_Base_Start_IT+0xe8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d115      	bne.n	8005e08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <HAL_TIM_Base_Start_IT+0xec>)
 8005de4:	4013      	ands	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d015      	beq.n	8005e1a <HAL_TIM_Base_Start_IT+0xbe>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005df4:	d011      	beq.n	8005e1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	e008      	b.n	8005e1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e000      	b.n	8005e1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40001800 	.word	0x40001800
 8005e44:	40014000 	.word	0x40014000
 8005e48:	00010007 	.word	0x00010007

08005e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f9e2 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9d4 	bl	800624c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9e5 	bl	8006274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0204 	mvn.w	r2, #4
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9bc 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f9ae 	bl	800624c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f9bf 	bl	8006274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0208 	mvn.w	r2, #8
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f996 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f988 	bl	800624c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f999 	bl	8006274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f970 	bl	8006260 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f962 	bl	800624c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f973 	bl	8006274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0201 	mvn.w	r2, #1
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fa ffe2 	bl	8000f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d104      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00c      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d007      	beq.n	8005fe6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fb37 	bl	8006654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fb2f 	bl	8006668 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00c      	beq.n	800602e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601a:	2b00      	cmp	r3, #0
 800601c:	d007      	beq.n	800602e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f92d 	bl	8006288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00c      	beq.n	8006052 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0220 	mvn.w	r2, #32
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 faf7 	bl	8006640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIM_ConfigClockSource+0x1c>
 8006074:	2302      	movs	r3, #2
 8006076:	e0dc      	b.n	8006232 <HAL_TIM_ConfigClockSource+0x1d6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	4b6a      	ldr	r3, [pc, #424]	@ (800623c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006094:	4013      	ands	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800609e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a64      	ldr	r2, [pc, #400]	@ (8006240 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	f000 80a9 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 80060b4:	4a62      	ldr	r2, [pc, #392]	@ (8006240 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	f200 80ae 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 80060bc:	4a61      	ldr	r2, [pc, #388]	@ (8006244 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f000 80a1 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 80060c4:	4a5f      	ldr	r2, [pc, #380]	@ (8006244 <HAL_TIM_ConfigClockSource+0x1e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f200 80a6 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 80060cc:	4a5e      	ldr	r2, [pc, #376]	@ (8006248 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	f000 8099 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 80060d4:	4a5c      	ldr	r2, [pc, #368]	@ (8006248 <HAL_TIM_ConfigClockSource+0x1ec>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	f200 809e 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 80060dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e0:	f000 8091 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 80060e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80060e8:	f200 8096 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 80060ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f0:	f000 8089 	beq.w	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 80060f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060f8:	f200 808e 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 80060fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006100:	d03e      	beq.n	8006180 <HAL_TIM_ConfigClockSource+0x124>
 8006102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006106:	f200 8087 	bhi.w	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 800610a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610e:	f000 8086 	beq.w	800621e <HAL_TIM_ConfigClockSource+0x1c2>
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006116:	d87f      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006118:	2b70      	cmp	r3, #112	@ 0x70
 800611a:	d01a      	beq.n	8006152 <HAL_TIM_ConfigClockSource+0xf6>
 800611c:	2b70      	cmp	r3, #112	@ 0x70
 800611e:	d87b      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006120:	2b60      	cmp	r3, #96	@ 0x60
 8006122:	d050      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x16a>
 8006124:	2b60      	cmp	r3, #96	@ 0x60
 8006126:	d877      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006128:	2b50      	cmp	r3, #80	@ 0x50
 800612a:	d03c      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x14a>
 800612c:	2b50      	cmp	r3, #80	@ 0x50
 800612e:	d873      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006130:	2b40      	cmp	r3, #64	@ 0x40
 8006132:	d058      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006134:	2b40      	cmp	r3, #64	@ 0x40
 8006136:	d86f      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006138:	2b30      	cmp	r3, #48	@ 0x30
 800613a:	d064      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 800613c:	2b30      	cmp	r3, #48	@ 0x30
 800613e:	d86b      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006140:	2b20      	cmp	r3, #32
 8006142:	d060      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d867      	bhi.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d05c      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 800614c:	2b10      	cmp	r3, #16
 800614e:	d05a      	beq.n	8006206 <HAL_TIM_ConfigClockSource+0x1aa>
 8006150:	e062      	b.n	8006218 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	f000 f9bf 	bl	80064e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	609a      	str	r2, [r3, #8]
      break;
 800617e:	e04f      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006190:	f000 f9a8 	bl	80064e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061a2:	609a      	str	r2, [r3, #8]
      break;
 80061a4:	e03c      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 f918 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2150      	movs	r1, #80	@ 0x50
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f972 	bl	80064a8 <TIM_ITRx_SetConfig>
      break;
 80061c4:	e02c      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d2:	461a      	mov	r2, r3
 80061d4:	f000 f937 	bl	8006446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2160      	movs	r1, #96	@ 0x60
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 f962 	bl	80064a8 <TIM_ITRx_SetConfig>
      break;
 80061e4:	e01c      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	461a      	mov	r2, r3
 80061f4:	f000 f8f8 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2140      	movs	r1, #64	@ 0x40
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f952 	bl	80064a8 <TIM_ITRx_SetConfig>
      break;
 8006204:	e00c      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f000 f949 	bl	80064a8 <TIM_ITRx_SetConfig>
      break;
 8006216:	e003      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      break;
 800621c:	e000      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800621e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006230:	7bfb      	ldrb	r3, [r7, #15]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	ffceff88 	.word	0xffceff88
 8006240:	00100040 	.word	0x00100040
 8006244:	00100030 	.word	0x00100030
 8006248:	00100020 	.word	0x00100020

0800624c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a46      	ldr	r2, [pc, #280]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ba:	d00f      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a43      	ldr	r2, [pc, #268]	@ (80063cc <TIM_Base_SetConfig+0x130>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00b      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a42      	ldr	r2, [pc, #264]	@ (80063d0 <TIM_Base_SetConfig+0x134>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d007      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a41      	ldr	r2, [pc, #260]	@ (80063d4 <TIM_Base_SetConfig+0x138>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d003      	beq.n	80062dc <TIM_Base_SetConfig+0x40>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a40      	ldr	r2, [pc, #256]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d108      	bne.n	80062ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a32      	ldr	r2, [pc, #200]	@ (80063cc <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a31      	ldr	r2, [pc, #196]	@ (80063d0 <TIM_Base_SetConfig+0x134>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a30      	ldr	r2, [pc, #192]	@ (80063d4 <TIM_Base_SetConfig+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a2f      	ldr	r2, [pc, #188]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a2e      	ldr	r2, [pc, #184]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a2d      	ldr	r2, [pc, #180]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0x9a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a2c      	ldr	r2, [pc, #176]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <TIM_Base_SetConfig+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <TIM_Base_SetConfig+0x13c>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00b      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a17      	ldr	r2, [pc, #92]	@ (80063dc <TIM_Base_SetConfig+0x140>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <TIM_Base_SetConfig+0x144>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_Base_SetConfig+0xf8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <TIM_Base_SetConfig+0x148>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d103      	bne.n	800639c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d105      	bne.n	80063ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	611a      	str	r2, [r3, #16]
  }
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40000400 	.word	0x40000400
 80063d0:	40000800 	.word	0x40000800
 80063d4:	40000c00 	.word	0x40000c00
 80063d8:	40010400 	.word	0x40010400
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40014400 	.word	0x40014400
 80063e4:	40014800 	.word	0x40014800

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006446:	b480      	push	{r7}
 8006448:	b087      	sub	sp, #28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f023 0210 	bic.w	r2, r3, #16
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <TIM_ITRx_SetConfig+0x38>)
 80064bc:	4013      	ands	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	f043 0307 	orr.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	609a      	str	r2, [r3, #8]
}
 80064d2:	bf00      	nop
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	ffcfff8f 	.word	0xffcfff8f

080064e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	021a      	lsls	r2, r3, #8
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	431a      	orrs	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4313      	orrs	r3, r2
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006538:	2302      	movs	r3, #2
 800653a:	e06d      	b.n	8006618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a30      	ldr	r2, [pc, #192]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a2f      	ldr	r2, [pc, #188]	@ (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d108      	bne.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a20      	ldr	r2, [pc, #128]	@ (8006624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d022      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ae:	d01d      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	@ (800662c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d018      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1c      	ldr	r2, [pc, #112]	@ (8006630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00e      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d009      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a16      	ldr	r2, [pc, #88]	@ (8006638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d004      	beq.n	80065ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a15      	ldr	r2, [pc, #84]	@ (800663c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d10c      	bne.n	8006606 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40000c00 	.word	0x40000c00
 8006638:	40001800 	.word	0x40001800
 800663c:	40014000 	.word	0x40014000

08006640 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e042      	b.n	8006714 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fb f85d 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2224      	movs	r2, #36	@ 0x24
 80066aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 0201 	bic.w	r2, r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fe1e 	bl	8007308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f8b3 	bl	8006838 <UART_SetConfig>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e01b      	b.n	8006714 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80066ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80066fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fe9d 	bl	800744c <UART_CheckIdleState>
 8006712:	4603      	mov	r3, r0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	@ 0x28
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	4613      	mov	r3, r2
 800672a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006732:	2b20      	cmp	r3, #32
 8006734:	d17b      	bne.n	800682e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_UART_Transmit+0x26>
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e074      	b.n	8006830 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2221      	movs	r2, #33	@ 0x21
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006756:	f7fb fa87 	bl	8001c68 <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006774:	d108      	bne.n	8006788 <HAL_UART_Transmit+0x6c>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e003      	b.n	8006790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006790:	e030      	b.n	80067f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2200      	movs	r2, #0
 800679a:	2180      	movs	r1, #128	@ 0x80
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 feff 	bl	80075a0 <UART_WaitOnFlagUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2220      	movs	r2, #32
 80067ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e03d      	b.n	8006830 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	3302      	adds	r3, #2
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e007      	b.n	80067e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1c8      	bne.n	8006792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	2140      	movs	r1, #64	@ 0x40
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fec8 	bl	80075a0 <UART_WaitOnFlagUntilTimeout>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e006      	b.n	8006830 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800682a:	2300      	movs	r3, #0
 800682c:	e000      	b.n	8006830 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800682e:	2302      	movs	r3, #2
  }
}
 8006830:	4618      	mov	r0, r3
 8006832:	3720      	adds	r7, #32
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800683c:	b092      	sub	sp, #72	@ 0x48
 800683e:	af00      	add	r7, sp, #0
 8006840:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	689a      	ldr	r2, [r3, #8]
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	431a      	orrs	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	431a      	orrs	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	4313      	orrs	r3, r2
 800685e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	4bbe      	ldr	r3, [pc, #760]	@ (8006b60 <UART_SetConfig+0x328>)
 8006868:	4013      	ands	r3, r2
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006870:	430b      	orrs	r3, r1
 8006872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	68da      	ldr	r2, [r3, #12]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4ab3      	ldr	r2, [pc, #716]	@ (8006b64 <UART_SetConfig+0x32c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d004      	beq.n	80068a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068a0:	4313      	orrs	r3, r2
 80068a2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	4baf      	ldr	r3, [pc, #700]	@ (8006b68 <UART_SetConfig+0x330>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	6812      	ldr	r2, [r2, #0]
 80068b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068be:	f023 010f 	bic.w	r1, r3, #15
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4aa6      	ldr	r2, [pc, #664]	@ (8006b6c <UART_SetConfig+0x334>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d177      	bne.n	80069c8 <UART_SetConfig+0x190>
 80068d8:	4ba5      	ldr	r3, [pc, #660]	@ (8006b70 <UART_SetConfig+0x338>)
 80068da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068e0:	2b28      	cmp	r3, #40	@ 0x28
 80068e2:	d86d      	bhi.n	80069c0 <UART_SetConfig+0x188>
 80068e4:	a201      	add	r2, pc, #4	@ (adr r2, 80068ec <UART_SetConfig+0xb4>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	08006991 	.word	0x08006991
 80068f0:	080069c1 	.word	0x080069c1
 80068f4:	080069c1 	.word	0x080069c1
 80068f8:	080069c1 	.word	0x080069c1
 80068fc:	080069c1 	.word	0x080069c1
 8006900:	080069c1 	.word	0x080069c1
 8006904:	080069c1 	.word	0x080069c1
 8006908:	080069c1 	.word	0x080069c1
 800690c:	08006999 	.word	0x08006999
 8006910:	080069c1 	.word	0x080069c1
 8006914:	080069c1 	.word	0x080069c1
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069c1 	.word	0x080069c1
 8006920:	080069c1 	.word	0x080069c1
 8006924:	080069c1 	.word	0x080069c1
 8006928:	080069c1 	.word	0x080069c1
 800692c:	080069a1 	.word	0x080069a1
 8006930:	080069c1 	.word	0x080069c1
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069c1 	.word	0x080069c1
 800693c:	080069c1 	.word	0x080069c1
 8006940:	080069c1 	.word	0x080069c1
 8006944:	080069c1 	.word	0x080069c1
 8006948:	080069c1 	.word	0x080069c1
 800694c:	080069a9 	.word	0x080069a9
 8006950:	080069c1 	.word	0x080069c1
 8006954:	080069c1 	.word	0x080069c1
 8006958:	080069c1 	.word	0x080069c1
 800695c:	080069c1 	.word	0x080069c1
 8006960:	080069c1 	.word	0x080069c1
 8006964:	080069c1 	.word	0x080069c1
 8006968:	080069c1 	.word	0x080069c1
 800696c:	080069b1 	.word	0x080069b1
 8006970:	080069c1 	.word	0x080069c1
 8006974:	080069c1 	.word	0x080069c1
 8006978:	080069c1 	.word	0x080069c1
 800697c:	080069c1 	.word	0x080069c1
 8006980:	080069c1 	.word	0x080069c1
 8006984:	080069c1 	.word	0x080069c1
 8006988:	080069c1 	.word	0x080069c1
 800698c:	080069b9 	.word	0x080069b9
 8006990:	2301      	movs	r3, #1
 8006992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006996:	e222      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800699e:	e21e      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069a6:	e21a      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ae:	e216      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069b0:	2320      	movs	r3, #32
 80069b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069b6:	e212      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069b8:	2340      	movs	r3, #64	@ 0x40
 80069ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069be:	e20e      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069c0:	2380      	movs	r3, #128	@ 0x80
 80069c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069c6:	e20a      	b.n	8006dde <UART_SetConfig+0x5a6>
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a69      	ldr	r2, [pc, #420]	@ (8006b74 <UART_SetConfig+0x33c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d130      	bne.n	8006a34 <UART_SetConfig+0x1fc>
 80069d2:	4b67      	ldr	r3, [pc, #412]	@ (8006b70 <UART_SetConfig+0x338>)
 80069d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b05      	cmp	r3, #5
 80069dc:	d826      	bhi.n	8006a2c <UART_SetConfig+0x1f4>
 80069de:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <UART_SetConfig+0x1ac>)
 80069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e4:	080069fd 	.word	0x080069fd
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	08006a0d 	.word	0x08006a0d
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a02:	e1ec      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0a:	e1e8      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a12:	e1e4      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a1a:	e1e0      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a22:	e1dc      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a24:	2340      	movs	r3, #64	@ 0x40
 8006a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a2a:	e1d8      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a2c:	2380      	movs	r3, #128	@ 0x80
 8006a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a32:	e1d4      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a4f      	ldr	r2, [pc, #316]	@ (8006b78 <UART_SetConfig+0x340>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d130      	bne.n	8006aa0 <UART_SetConfig+0x268>
 8006a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b70 <UART_SetConfig+0x338>)
 8006a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	2b05      	cmp	r3, #5
 8006a48:	d826      	bhi.n	8006a98 <UART_SetConfig+0x260>
 8006a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a50 <UART_SetConfig+0x218>)
 8006a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a50:	08006a69 	.word	0x08006a69
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a79 	.word	0x08006a79
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6e:	e1b6      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a70:	2304      	movs	r3, #4
 8006a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a76:	e1b2      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a78:	2308      	movs	r3, #8
 8006a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7e:	e1ae      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a80:	2310      	movs	r3, #16
 8006a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a86:	e1aa      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a88:	2320      	movs	r3, #32
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a8e:	e1a6      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a90:	2340      	movs	r3, #64	@ 0x40
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a96:	e1a2      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006a98:	2380      	movs	r3, #128	@ 0x80
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a9e:	e19e      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a35      	ldr	r2, [pc, #212]	@ (8006b7c <UART_SetConfig+0x344>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d130      	bne.n	8006b0c <UART_SetConfig+0x2d4>
 8006aaa:	4b31      	ldr	r3, [pc, #196]	@ (8006b70 <UART_SetConfig+0x338>)
 8006aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aae:	f003 0307 	and.w	r3, r3, #7
 8006ab2:	2b05      	cmp	r3, #5
 8006ab4:	d826      	bhi.n	8006b04 <UART_SetConfig+0x2cc>
 8006ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8006abc <UART_SetConfig+0x284>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ad5 	.word	0x08006ad5
 8006ac0:	08006add 	.word	0x08006add
 8006ac4:	08006ae5 	.word	0x08006ae5
 8006ac8:	08006aed 	.word	0x08006aed
 8006acc:	08006af5 	.word	0x08006af5
 8006ad0:	08006afd 	.word	0x08006afd
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ada:	e180      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae2:	e17c      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aea:	e178      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006af2:	e174      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006af4:	2320      	movs	r3, #32
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006afa:	e170      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006afc:	2340      	movs	r3, #64	@ 0x40
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b02:	e16c      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b0a:	e168      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1b      	ldr	r2, [pc, #108]	@ (8006b80 <UART_SetConfig+0x348>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d142      	bne.n	8006b9c <UART_SetConfig+0x364>
 8006b16:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <UART_SetConfig+0x338>)
 8006b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	2b05      	cmp	r3, #5
 8006b20:	d838      	bhi.n	8006b94 <UART_SetConfig+0x35c>
 8006b22:	a201      	add	r2, pc, #4	@ (adr r2, 8006b28 <UART_SetConfig+0x2f0>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b41 	.word	0x08006b41
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b51 	.word	0x08006b51
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b85 	.word	0x08006b85
 8006b3c:	08006b8d 	.word	0x08006b8d
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b46:	e14a      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4e:	e146      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b56:	e142      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5e:	e13e      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b60:	cfff69f3 	.word	0xcfff69f3
 8006b64:	58000c00 	.word	0x58000c00
 8006b68:	11fff4ff 	.word	0x11fff4ff
 8006b6c:	40011000 	.word	0x40011000
 8006b70:	58024400 	.word	0x58024400
 8006b74:	40004400 	.word	0x40004400
 8006b78:	40004800 	.word	0x40004800
 8006b7c:	40004c00 	.word	0x40004c00
 8006b80:	40005000 	.word	0x40005000
 8006b84:	2320      	movs	r3, #32
 8006b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8a:	e128      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b8c:	2340      	movs	r3, #64	@ 0x40
 8006b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b92:	e124      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b94:	2380      	movs	r3, #128	@ 0x80
 8006b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9a:	e120      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4acb      	ldr	r2, [pc, #812]	@ (8006ed0 <UART_SetConfig+0x698>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d176      	bne.n	8006c94 <UART_SetConfig+0x45c>
 8006ba6:	4bcb      	ldr	r3, [pc, #812]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006baa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bae:	2b28      	cmp	r3, #40	@ 0x28
 8006bb0:	d86c      	bhi.n	8006c8c <UART_SetConfig+0x454>
 8006bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bb8 <UART_SetConfig+0x380>)
 8006bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb8:	08006c5d 	.word	0x08006c5d
 8006bbc:	08006c8d 	.word	0x08006c8d
 8006bc0:	08006c8d 	.word	0x08006c8d
 8006bc4:	08006c8d 	.word	0x08006c8d
 8006bc8:	08006c8d 	.word	0x08006c8d
 8006bcc:	08006c8d 	.word	0x08006c8d
 8006bd0:	08006c8d 	.word	0x08006c8d
 8006bd4:	08006c8d 	.word	0x08006c8d
 8006bd8:	08006c65 	.word	0x08006c65
 8006bdc:	08006c8d 	.word	0x08006c8d
 8006be0:	08006c8d 	.word	0x08006c8d
 8006be4:	08006c8d 	.word	0x08006c8d
 8006be8:	08006c8d 	.word	0x08006c8d
 8006bec:	08006c8d 	.word	0x08006c8d
 8006bf0:	08006c8d 	.word	0x08006c8d
 8006bf4:	08006c8d 	.word	0x08006c8d
 8006bf8:	08006c6d 	.word	0x08006c6d
 8006bfc:	08006c8d 	.word	0x08006c8d
 8006c00:	08006c8d 	.word	0x08006c8d
 8006c04:	08006c8d 	.word	0x08006c8d
 8006c08:	08006c8d 	.word	0x08006c8d
 8006c0c:	08006c8d 	.word	0x08006c8d
 8006c10:	08006c8d 	.word	0x08006c8d
 8006c14:	08006c8d 	.word	0x08006c8d
 8006c18:	08006c75 	.word	0x08006c75
 8006c1c:	08006c8d 	.word	0x08006c8d
 8006c20:	08006c8d 	.word	0x08006c8d
 8006c24:	08006c8d 	.word	0x08006c8d
 8006c28:	08006c8d 	.word	0x08006c8d
 8006c2c:	08006c8d 	.word	0x08006c8d
 8006c30:	08006c8d 	.word	0x08006c8d
 8006c34:	08006c8d 	.word	0x08006c8d
 8006c38:	08006c7d 	.word	0x08006c7d
 8006c3c:	08006c8d 	.word	0x08006c8d
 8006c40:	08006c8d 	.word	0x08006c8d
 8006c44:	08006c8d 	.word	0x08006c8d
 8006c48:	08006c8d 	.word	0x08006c8d
 8006c4c:	08006c8d 	.word	0x08006c8d
 8006c50:	08006c8d 	.word	0x08006c8d
 8006c54:	08006c8d 	.word	0x08006c8d
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c62:	e0bc      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6a:	e0b8      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c72:	e0b4      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7a:	e0b0      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c82:	e0ac      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c84:	2340      	movs	r3, #64	@ 0x40
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8a:	e0a8      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c8c:	2380      	movs	r3, #128	@ 0x80
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c92:	e0a4      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a8f      	ldr	r2, [pc, #572]	@ (8006ed8 <UART_SetConfig+0x6a0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d130      	bne.n	8006d00 <UART_SetConfig+0x4c8>
 8006c9e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d826      	bhi.n	8006cf8 <UART_SetConfig+0x4c0>
 8006caa:	a201      	add	r2, pc, #4	@ (adr r2, 8006cb0 <UART_SetConfig+0x478>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cc9 	.word	0x08006cc9
 8006cb4:	08006cd1 	.word	0x08006cd1
 8006cb8:	08006cd9 	.word	0x08006cd9
 8006cbc:	08006ce1 	.word	0x08006ce1
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006cf1 	.word	0x08006cf1
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cce:	e086      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006cd0:	2304      	movs	r3, #4
 8006cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd6:	e082      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006cd8:	2308      	movs	r3, #8
 8006cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cde:	e07e      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce6:	e07a      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006ce8:	2320      	movs	r3, #32
 8006cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cee:	e076      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006cf0:	2340      	movs	r3, #64	@ 0x40
 8006cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cf6:	e072      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006cf8:	2380      	movs	r3, #128	@ 0x80
 8006cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cfe:	e06e      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a75      	ldr	r2, [pc, #468]	@ (8006edc <UART_SetConfig+0x6a4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d130      	bne.n	8006d6c <UART_SetConfig+0x534>
 8006d0a:	4b72      	ldr	r3, [pc, #456]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	2b05      	cmp	r3, #5
 8006d14:	d826      	bhi.n	8006d64 <UART_SetConfig+0x52c>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <UART_SetConfig+0x4e4>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d35 	.word	0x08006d35
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	08006d45 	.word	0x08006d45
 8006d28:	08006d4d 	.word	0x08006d4d
 8006d2c:	08006d55 	.word	0x08006d55
 8006d30:	08006d5d 	.word	0x08006d5d
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3a:	e050      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d3c:	2304      	movs	r3, #4
 8006d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d42:	e04c      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d44:	2308      	movs	r3, #8
 8006d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4a:	e048      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d52:	e044      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d54:	2320      	movs	r3, #32
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d5a:	e040      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d5c:	2340      	movs	r3, #64	@ 0x40
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d62:	e03c      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d64:	2380      	movs	r3, #128	@ 0x80
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d6a:	e038      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee0 <UART_SetConfig+0x6a8>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d130      	bne.n	8006dd8 <UART_SetConfig+0x5a0>
 8006d76:	4b57      	ldr	r3, [pc, #348]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b05      	cmp	r3, #5
 8006d80:	d826      	bhi.n	8006dd0 <UART_SetConfig+0x598>
 8006d82:	a201      	add	r2, pc, #4	@ (adr r2, 8006d88 <UART_SetConfig+0x550>)
 8006d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006db1 	.word	0x08006db1
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dc1 	.word	0x08006dc1
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da6:	e01a      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dae:	e016      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db6:	e012      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dbe:	e00e      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dc6:	e00a      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006dc8:	2340      	movs	r3, #64	@ 0x40
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dce:	e006      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006dd0:	2380      	movs	r3, #128	@ 0x80
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dd6:	e002      	b.n	8006dde <UART_SetConfig+0x5a6>
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <UART_SetConfig+0x6a8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	f040 80f8 	bne.w	8006fda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	dc46      	bgt.n	8006e80 <UART_SetConfig+0x648>
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	f2c0 8082 	blt.w	8006efc <UART_SetConfig+0x6c4>
 8006df8:	3b02      	subs	r3, #2
 8006dfa:	2b1e      	cmp	r3, #30
 8006dfc:	d87e      	bhi.n	8006efc <UART_SetConfig+0x6c4>
 8006dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8006e04 <UART_SetConfig+0x5cc>)
 8006e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e04:	08006e87 	.word	0x08006e87
 8006e08:	08006efd 	.word	0x08006efd
 8006e0c:	08006e8f 	.word	0x08006e8f
 8006e10:	08006efd 	.word	0x08006efd
 8006e14:	08006efd 	.word	0x08006efd
 8006e18:	08006efd 	.word	0x08006efd
 8006e1c:	08006e9f 	.word	0x08006e9f
 8006e20:	08006efd 	.word	0x08006efd
 8006e24:	08006efd 	.word	0x08006efd
 8006e28:	08006efd 	.word	0x08006efd
 8006e2c:	08006efd 	.word	0x08006efd
 8006e30:	08006efd 	.word	0x08006efd
 8006e34:	08006efd 	.word	0x08006efd
 8006e38:	08006efd 	.word	0x08006efd
 8006e3c:	08006eaf 	.word	0x08006eaf
 8006e40:	08006efd 	.word	0x08006efd
 8006e44:	08006efd 	.word	0x08006efd
 8006e48:	08006efd 	.word	0x08006efd
 8006e4c:	08006efd 	.word	0x08006efd
 8006e50:	08006efd 	.word	0x08006efd
 8006e54:	08006efd 	.word	0x08006efd
 8006e58:	08006efd 	.word	0x08006efd
 8006e5c:	08006efd 	.word	0x08006efd
 8006e60:	08006efd 	.word	0x08006efd
 8006e64:	08006efd 	.word	0x08006efd
 8006e68:	08006efd 	.word	0x08006efd
 8006e6c:	08006efd 	.word	0x08006efd
 8006e70:	08006efd 	.word	0x08006efd
 8006e74:	08006efd 	.word	0x08006efd
 8006e78:	08006efd 	.word	0x08006efd
 8006e7c:	08006eef 	.word	0x08006eef
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	d037      	beq.n	8006ef4 <UART_SetConfig+0x6bc>
 8006e84:	e03a      	b.n	8006efc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006e86:	f7fd fc83 	bl	8004790 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e8c:	e03c      	b.n	8006f08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7fd fc92 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e9c:	e034      	b.n	8006f08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e9e:	f107 0318 	add.w	r3, r7, #24
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fd fdde 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eac:	e02c      	b.n	8006f08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eae:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d016      	beq.n	8006ee8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eba:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <UART_SetConfig+0x69c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	4a07      	ldr	r2, [pc, #28]	@ (8006ee4 <UART_SetConfig+0x6ac>)
 8006ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ecc:	e01c      	b.n	8006f08 <UART_SetConfig+0x6d0>
 8006ece:	bf00      	nop
 8006ed0:	40011400 	.word	0x40011400
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	40007800 	.word	0x40007800
 8006edc:	40007c00 	.word	0x40007c00
 8006ee0:	58000c00 	.word	0x58000c00
 8006ee4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8007160 <UART_SetConfig+0x928>)
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e00c      	b.n	8006f08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006eee:	4b9d      	ldr	r3, [pc, #628]	@ (8007164 <UART_SetConfig+0x92c>)
 8006ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ef2:	e009      	b.n	8006f08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ef4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efa:	e005      	b.n	8006f08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 81de 	beq.w	80072cc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	4a94      	ldr	r2, [pc, #592]	@ (8007168 <UART_SetConfig+0x930>)
 8006f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f22:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d305      	bcc.n	8006f40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d903      	bls.n	8006f48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f46:	e1c1      	b.n	80072cc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
 8006f4e:	60fa      	str	r2, [r7, #12]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	4a84      	ldr	r2, [pc, #528]	@ (8007168 <UART_SetConfig+0x930>)
 8006f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	603b      	str	r3, [r7, #0]
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f6a:	f7f9 fbcd 	bl	8000708 <__aeabi_uldivmod>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4610      	mov	r0, r2
 8006f74:	4619      	mov	r1, r3
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	020b      	lsls	r3, r1, #8
 8006f80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f84:	0202      	lsls	r2, r0, #8
 8006f86:	6979      	ldr	r1, [r7, #20]
 8006f88:	6849      	ldr	r1, [r1, #4]
 8006f8a:	0849      	lsrs	r1, r1, #1
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	4605      	mov	r5, r0
 8006f92:	eb12 0804 	adds.w	r8, r2, r4
 8006f96:	eb43 0905 	adc.w	r9, r3, r5
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	469a      	mov	sl, r3
 8006fa2:	4693      	mov	fp, r2
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	465b      	mov	r3, fp
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4649      	mov	r1, r9
 8006fac:	f7f9 fbac 	bl	8000708 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fbe:	d308      	bcc.n	8006fd2 <UART_SetConfig+0x79a>
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc6:	d204      	bcs.n	8006fd2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fce:	60da      	str	r2, [r3, #12]
 8006fd0:	e17c      	b.n	80072cc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006fd8:	e178      	b.n	80072cc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	69db      	ldr	r3, [r3, #28]
 8006fde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe2:	f040 80c5 	bne.w	8007170 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006fe6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	dc48      	bgt.n	8007080 <UART_SetConfig+0x848>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	db7b      	blt.n	80070ea <UART_SetConfig+0x8b2>
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d879      	bhi.n	80070ea <UART_SetConfig+0x8b2>
 8006ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ffc <UART_SetConfig+0x7c4>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007087 	.word	0x08007087
 8007000:	0800708f 	.word	0x0800708f
 8007004:	080070eb 	.word	0x080070eb
 8007008:	080070eb 	.word	0x080070eb
 800700c:	08007097 	.word	0x08007097
 8007010:	080070eb 	.word	0x080070eb
 8007014:	080070eb 	.word	0x080070eb
 8007018:	080070eb 	.word	0x080070eb
 800701c:	080070a7 	.word	0x080070a7
 8007020:	080070eb 	.word	0x080070eb
 8007024:	080070eb 	.word	0x080070eb
 8007028:	080070eb 	.word	0x080070eb
 800702c:	080070eb 	.word	0x080070eb
 8007030:	080070eb 	.word	0x080070eb
 8007034:	080070eb 	.word	0x080070eb
 8007038:	080070eb 	.word	0x080070eb
 800703c:	080070b7 	.word	0x080070b7
 8007040:	080070eb 	.word	0x080070eb
 8007044:	080070eb 	.word	0x080070eb
 8007048:	080070eb 	.word	0x080070eb
 800704c:	080070eb 	.word	0x080070eb
 8007050:	080070eb 	.word	0x080070eb
 8007054:	080070eb 	.word	0x080070eb
 8007058:	080070eb 	.word	0x080070eb
 800705c:	080070eb 	.word	0x080070eb
 8007060:	080070eb 	.word	0x080070eb
 8007064:	080070eb 	.word	0x080070eb
 8007068:	080070eb 	.word	0x080070eb
 800706c:	080070eb 	.word	0x080070eb
 8007070:	080070eb 	.word	0x080070eb
 8007074:	080070eb 	.word	0x080070eb
 8007078:	080070eb 	.word	0x080070eb
 800707c:	080070dd 	.word	0x080070dd
 8007080:	2b40      	cmp	r3, #64	@ 0x40
 8007082:	d02e      	beq.n	80070e2 <UART_SetConfig+0x8aa>
 8007084:	e031      	b.n	80070ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007086:	f7fc f94d 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 800708a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800708c:	e033      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800708e:	f7fc f95f 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 8007092:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007094:	e02f      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800709a:	4618      	mov	r0, r3
 800709c:	f7fd fb8e 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070a4:	e027      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a6:	f107 0318 	add.w	r3, r7, #24
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fd fcda 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b4:	e01f      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070b6:	4b2d      	ldr	r3, [pc, #180]	@ (800716c <UART_SetConfig+0x934>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0320 	and.w	r3, r3, #32
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070c2:	4b2a      	ldr	r3, [pc, #168]	@ (800716c <UART_SetConfig+0x934>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	08db      	lsrs	r3, r3, #3
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	4a24      	ldr	r2, [pc, #144]	@ (8007160 <UART_SetConfig+0x928>)
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80070d4:	e00f      	b.n	80070f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80070d6:	4b22      	ldr	r3, [pc, #136]	@ (8007160 <UART_SetConfig+0x928>)
 80070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070da:	e00c      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80070dc:	4b21      	ldr	r3, [pc, #132]	@ (8007164 <UART_SetConfig+0x92c>)
 80070de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e0:	e009      	b.n	80070f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070e8:	e005      	b.n	80070f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80070f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80e7 	beq.w	80072cc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	4a19      	ldr	r2, [pc, #100]	@ (8007168 <UART_SetConfig+0x930>)
 8007104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007108:	461a      	mov	r2, r3
 800710a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800710c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007110:	005a      	lsls	r2, r3, #1
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	085b      	lsrs	r3, r3, #1
 8007118:	441a      	add	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d916      	bls.n	8007158 <UART_SetConfig+0x920>
 800712a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007130:	d212      	bcs.n	8007158 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	b29b      	uxth	r3, r3
 8007136:	f023 030f 	bic.w	r3, r3, #15
 800713a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	085b      	lsrs	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	b29a      	uxth	r2, r3
 8007148:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800714a:	4313      	orrs	r3, r2
 800714c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	e0b9      	b.n	80072cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800715e:	e0b5      	b.n	80072cc <UART_SetConfig+0xa94>
 8007160:	03d09000 	.word	0x03d09000
 8007164:	003d0900 	.word	0x003d0900
 8007168:	0800c13c 	.word	0x0800c13c
 800716c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007170:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007174:	2b20      	cmp	r3, #32
 8007176:	dc49      	bgt.n	800720c <UART_SetConfig+0x9d4>
 8007178:	2b00      	cmp	r3, #0
 800717a:	db7c      	blt.n	8007276 <UART_SetConfig+0xa3e>
 800717c:	2b20      	cmp	r3, #32
 800717e:	d87a      	bhi.n	8007276 <UART_SetConfig+0xa3e>
 8007180:	a201      	add	r2, pc, #4	@ (adr r2, 8007188 <UART_SetConfig+0x950>)
 8007182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007186:	bf00      	nop
 8007188:	08007213 	.word	0x08007213
 800718c:	0800721b 	.word	0x0800721b
 8007190:	08007277 	.word	0x08007277
 8007194:	08007277 	.word	0x08007277
 8007198:	08007223 	.word	0x08007223
 800719c:	08007277 	.word	0x08007277
 80071a0:	08007277 	.word	0x08007277
 80071a4:	08007277 	.word	0x08007277
 80071a8:	08007233 	.word	0x08007233
 80071ac:	08007277 	.word	0x08007277
 80071b0:	08007277 	.word	0x08007277
 80071b4:	08007277 	.word	0x08007277
 80071b8:	08007277 	.word	0x08007277
 80071bc:	08007277 	.word	0x08007277
 80071c0:	08007277 	.word	0x08007277
 80071c4:	08007277 	.word	0x08007277
 80071c8:	08007243 	.word	0x08007243
 80071cc:	08007277 	.word	0x08007277
 80071d0:	08007277 	.word	0x08007277
 80071d4:	08007277 	.word	0x08007277
 80071d8:	08007277 	.word	0x08007277
 80071dc:	08007277 	.word	0x08007277
 80071e0:	08007277 	.word	0x08007277
 80071e4:	08007277 	.word	0x08007277
 80071e8:	08007277 	.word	0x08007277
 80071ec:	08007277 	.word	0x08007277
 80071f0:	08007277 	.word	0x08007277
 80071f4:	08007277 	.word	0x08007277
 80071f8:	08007277 	.word	0x08007277
 80071fc:	08007277 	.word	0x08007277
 8007200:	08007277 	.word	0x08007277
 8007204:	08007277 	.word	0x08007277
 8007208:	08007269 	.word	0x08007269
 800720c:	2b40      	cmp	r3, #64	@ 0x40
 800720e:	d02e      	beq.n	800726e <UART_SetConfig+0xa36>
 8007210:	e031      	b.n	8007276 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fc f887 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8007216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007218:	e033      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800721a:	f7fc f899 	bl	8003350 <HAL_RCC_GetPCLK2Freq>
 800721e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007220:	e02f      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fd fac8 	bl	80047bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007230:	e027      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fd fc14 	bl	8004a64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007240:	e01f      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007242:	4b2d      	ldr	r3, [pc, #180]	@ (80072f8 <UART_SetConfig+0xac0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d009      	beq.n	8007262 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <UART_SetConfig+0xac0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	08db      	lsrs	r3, r3, #3
 8007254:	f003 0303 	and.w	r3, r3, #3
 8007258:	4a28      	ldr	r2, [pc, #160]	@ (80072fc <UART_SetConfig+0xac4>)
 800725a:	fa22 f303 	lsr.w	r3, r2, r3
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007260:	e00f      	b.n	8007282 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <UART_SetConfig+0xac4>)
 8007264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007266:	e00c      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007268:	4b25      	ldr	r3, [pc, #148]	@ (8007300 <UART_SetConfig+0xac8>)
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007280:	bf00      	nop
    }

    if (pclk != 0U)
 8007282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d021      	beq.n	80072cc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <UART_SetConfig+0xacc>)
 800728e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007292:	461a      	mov	r2, r3
 8007294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007296:	fbb3 f2f2 	udiv	r2, r3, r2
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	441a      	add	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d909      	bls.n	80072c6 <UART_SetConfig+0xa8e>
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b8:	d205      	bcs.n	80072c6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072bc:	b29a      	uxth	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	e002      	b.n	80072cc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2200      	movs	r2, #0
 80072e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072e8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3748      	adds	r7, #72	@ 0x48
 80072f0:	46bd      	mov	sp, r7
 80072f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072f6:	bf00      	nop
 80072f8:	58024400 	.word	0x58024400
 80072fc:	03d09000 	.word	0x03d09000
 8007300:	003d0900 	.word	0x003d0900
 8007304:	0800c13c 	.word	0x0800c13c

08007308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	f003 0308 	and.w	r3, r3, #8
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00a      	beq.n	8007332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00a      	beq.n	8007376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00a      	beq.n	80073ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01a      	beq.n	800741e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007406:	d10a      	bne.n	800741e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b098      	sub	sp, #96	@ 0x60
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800745c:	f7fa fc04 	bl	8001c68 <HAL_GetTick>
 8007460:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0308 	and.w	r3, r3, #8
 800746c:	2b08      	cmp	r3, #8
 800746e:	d12f      	bne.n	80074d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f88e 	bl	80075a0 <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d022      	beq.n	80074d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007492:	e853 3f00 	ldrex	r3, [r3]
 8007496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800749e:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e6      	bne.n	800748a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e063      	b.n	8007598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d149      	bne.n	8007572 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e6:	2200      	movs	r2, #0
 80074e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 f857 	bl	80075a0 <UART_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d03c      	beq.n	8007572 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	623b      	str	r3, [r7, #32]
   return(result);
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800750c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007516:	633b      	str	r3, [r7, #48]	@ 0x30
 8007518:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800751c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e6      	bne.n	80074f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	60fb      	str	r3, [r7, #12]
   return(result);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3308      	adds	r3, #8
 8007548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800754a:	61fa      	str	r2, [r7, #28]
 800754c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	69b9      	ldr	r1, [r7, #24]
 8007550:	69fa      	ldr	r2, [r7, #28]
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	617b      	str	r3, [r7, #20]
   return(result);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e012      	b.n	8007598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3758      	adds	r7, #88	@ 0x58
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	603b      	str	r3, [r7, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b0:	e04f      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d04b      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ba:	f7fa fb55 	bl	8001c68 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d302      	bcc.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e04e      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d037      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b80      	cmp	r3, #128	@ 0x80
 80075e6:	d034      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b40      	cmp	r3, #64	@ 0x40
 80075ec:	d031      	beq.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b08      	cmp	r3, #8
 80075fa:	d110      	bne.n	800761e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2208      	movs	r2, #8
 8007602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 f839 	bl	800767c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2208      	movs	r2, #8
 800760e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e029      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800762c:	d111      	bne.n	8007652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f81f 	bl	800767c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e00f      	b.n	8007672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4013      	ands	r3, r2
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	429a      	cmp	r2, r3
 8007660:	bf0c      	ite	eq
 8007662:	2301      	moveq	r3, #1
 8007664:	2300      	movne	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	429a      	cmp	r2, r3
 800766e:	d0a0      	beq.n	80075b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b095      	sub	sp, #84	@ 0x54
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007744 <UART_EndRxTransfer+0xc8>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	3308      	adds	r3, #8
 80076d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e5      	bne.n	80076b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d118      	bne.n	8007724 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f023 0310 	bic.w	r3, r3, #16
 8007706:	647b      	str	r3, [r7, #68]	@ 0x44
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007710:	61bb      	str	r3, [r7, #24]
 8007712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007714:	6979      	ldr	r1, [r7, #20]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	e841 2300 	strex	r3, r2, [r1]
 800771c:	613b      	str	r3, [r7, #16]
   return(result);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e6      	bne.n	80076f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007738:	bf00      	nop
 800773a:	3754      	adds	r7, #84	@ 0x54
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	effffffe 	.word	0xeffffffe

08007748 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_UARTEx_DisableFifoMode+0x16>
 800775a:	2302      	movs	r3, #2
 800775c:	e027      	b.n	80077ae <HAL_UARTEx_DisableFifoMode+0x66>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2224      	movs	r2, #36	@ 0x24
 800776a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 0201 	bic.w	r2, r2, #1
 8007784:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800778c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3714      	adds	r7, #20
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
 80077c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e02d      	b.n	800782e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2224      	movs	r2, #36	@ 0x24
 80077de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0201 	bic.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	683a      	ldr	r2, [r7, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f850 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800784a:	2302      	movs	r3, #2
 800784c:	e02d      	b.n	80078aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2224      	movs	r2, #36	@ 0x24
 800785a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	430a      	orrs	r2, r1
 8007888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f812 	bl	80078b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d108      	bne.n	80078d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80078d4:	e031      	b.n	800793a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80078d6:	2310      	movs	r3, #16
 80078d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80078da:	2310      	movs	r3, #16
 80078dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	0e5b      	lsrs	r3, r3, #25
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	0f5b      	lsrs	r3, r3, #29
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078fe:	7bbb      	ldrb	r3, [r7, #14]
 8007900:	7b3a      	ldrb	r2, [r7, #12]
 8007902:	4911      	ldr	r1, [pc, #68]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007904:	5c8a      	ldrb	r2, [r1, r2]
 8007906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800790a:	7b3a      	ldrb	r2, [r7, #12]
 800790c:	490f      	ldr	r1, [pc, #60]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800790e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007910:	fb93 f3f2 	sdiv	r3, r3, r2
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	7b7a      	ldrb	r2, [r7, #13]
 8007920:	4909      	ldr	r1, [pc, #36]	@ (8007948 <UARTEx_SetNbDataToProcess+0x94>)
 8007922:	5c8a      	ldrb	r2, [r1, r2]
 8007924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007928:	7b7a      	ldrb	r2, [r7, #13]
 800792a:	4908      	ldr	r1, [pc, #32]	@ (800794c <UARTEx_SetNbDataToProcess+0x98>)
 800792c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800792e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	0800c154 	.word	0x0800c154
 800794c:	0800c15c 	.word	0x0800c15c

08007950 <__cvt>:
 8007950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007952:	ed2d 8b02 	vpush	{d8}
 8007956:	eeb0 8b40 	vmov.f64	d8, d0
 800795a:	b085      	sub	sp, #20
 800795c:	4617      	mov	r7, r2
 800795e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007960:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007962:	ee18 2a90 	vmov	r2, s17
 8007966:	f025 0520 	bic.w	r5, r5, #32
 800796a:	2a00      	cmp	r2, #0
 800796c:	bfb6      	itet	lt
 800796e:	222d      	movlt	r2, #45	@ 0x2d
 8007970:	2200      	movge	r2, #0
 8007972:	eeb1 8b40 	vneglt.f64	d8, d0
 8007976:	2d46      	cmp	r5, #70	@ 0x46
 8007978:	460c      	mov	r4, r1
 800797a:	701a      	strb	r2, [r3, #0]
 800797c:	d004      	beq.n	8007988 <__cvt+0x38>
 800797e:	2d45      	cmp	r5, #69	@ 0x45
 8007980:	d100      	bne.n	8007984 <__cvt+0x34>
 8007982:	3401      	adds	r4, #1
 8007984:	2102      	movs	r1, #2
 8007986:	e000      	b.n	800798a <__cvt+0x3a>
 8007988:	2103      	movs	r1, #3
 800798a:	ab03      	add	r3, sp, #12
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	ab02      	add	r3, sp, #8
 8007990:	9300      	str	r3, [sp, #0]
 8007992:	4622      	mov	r2, r4
 8007994:	4633      	mov	r3, r6
 8007996:	eeb0 0b48 	vmov.f64	d0, d8
 800799a:	f001 f885 	bl	8008aa8 <_dtoa_r>
 800799e:	2d47      	cmp	r5, #71	@ 0x47
 80079a0:	d114      	bne.n	80079cc <__cvt+0x7c>
 80079a2:	07fb      	lsls	r3, r7, #31
 80079a4:	d50a      	bpl.n	80079bc <__cvt+0x6c>
 80079a6:	1902      	adds	r2, r0, r4
 80079a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079b0:	bf08      	it	eq
 80079b2:	9203      	streq	r2, [sp, #12]
 80079b4:	2130      	movs	r1, #48	@ 0x30
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d319      	bcc.n	80079f0 <__cvt+0xa0>
 80079bc:	9b03      	ldr	r3, [sp, #12]
 80079be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079c0:	1a1b      	subs	r3, r3, r0
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	b005      	add	sp, #20
 80079c6:	ecbd 8b02 	vpop	{d8}
 80079ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079cc:	2d46      	cmp	r5, #70	@ 0x46
 80079ce:	eb00 0204 	add.w	r2, r0, r4
 80079d2:	d1e9      	bne.n	80079a8 <__cvt+0x58>
 80079d4:	7803      	ldrb	r3, [r0, #0]
 80079d6:	2b30      	cmp	r3, #48	@ 0x30
 80079d8:	d107      	bne.n	80079ea <__cvt+0x9a>
 80079da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e2:	bf1c      	itt	ne
 80079e4:	f1c4 0401 	rsbne	r4, r4, #1
 80079e8:	6034      	strne	r4, [r6, #0]
 80079ea:	6833      	ldr	r3, [r6, #0]
 80079ec:	441a      	add	r2, r3
 80079ee:	e7db      	b.n	80079a8 <__cvt+0x58>
 80079f0:	1c5c      	adds	r4, r3, #1
 80079f2:	9403      	str	r4, [sp, #12]
 80079f4:	7019      	strb	r1, [r3, #0]
 80079f6:	e7de      	b.n	80079b6 <__cvt+0x66>

080079f8 <__exponent>:
 80079f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079fa:	2900      	cmp	r1, #0
 80079fc:	bfba      	itte	lt
 80079fe:	4249      	neglt	r1, r1
 8007a00:	232d      	movlt	r3, #45	@ 0x2d
 8007a02:	232b      	movge	r3, #43	@ 0x2b
 8007a04:	2909      	cmp	r1, #9
 8007a06:	7002      	strb	r2, [r0, #0]
 8007a08:	7043      	strb	r3, [r0, #1]
 8007a0a:	dd29      	ble.n	8007a60 <__exponent+0x68>
 8007a0c:	f10d 0307 	add.w	r3, sp, #7
 8007a10:	461d      	mov	r5, r3
 8007a12:	270a      	movs	r7, #10
 8007a14:	461a      	mov	r2, r3
 8007a16:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a1a:	fb07 1416 	mls	r4, r7, r6, r1
 8007a1e:	3430      	adds	r4, #48	@ 0x30
 8007a20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a24:	460c      	mov	r4, r1
 8007a26:	2c63      	cmp	r4, #99	@ 0x63
 8007a28:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	dcf1      	bgt.n	8007a14 <__exponent+0x1c>
 8007a30:	3130      	adds	r1, #48	@ 0x30
 8007a32:	1e94      	subs	r4, r2, #2
 8007a34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a38:	1c41      	adds	r1, r0, #1
 8007a3a:	4623      	mov	r3, r4
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	d30a      	bcc.n	8007a56 <__exponent+0x5e>
 8007a40:	f10d 0309 	add.w	r3, sp, #9
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	42ac      	cmp	r4, r5
 8007a48:	bf88      	it	hi
 8007a4a:	2300      	movhi	r3, #0
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	4403      	add	r3, r0
 8007a50:	1a18      	subs	r0, r3, r0
 8007a52:	b003      	add	sp, #12
 8007a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a5e:	e7ed      	b.n	8007a3c <__exponent+0x44>
 8007a60:	2330      	movs	r3, #48	@ 0x30
 8007a62:	3130      	adds	r1, #48	@ 0x30
 8007a64:	7083      	strb	r3, [r0, #2]
 8007a66:	70c1      	strb	r1, [r0, #3]
 8007a68:	1d03      	adds	r3, r0, #4
 8007a6a:	e7f1      	b.n	8007a50 <__exponent+0x58>
 8007a6c:	0000      	movs	r0, r0
	...

08007a70 <_printf_float>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	b08d      	sub	sp, #52	@ 0x34
 8007a76:	460c      	mov	r4, r1
 8007a78:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a7c:	4616      	mov	r6, r2
 8007a7e:	461f      	mov	r7, r3
 8007a80:	4605      	mov	r5, r0
 8007a82:	f000 ff0b 	bl	800889c <_localeconv_r>
 8007a86:	f8d0 b000 	ldr.w	fp, [r0]
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f7f8 fc78 	bl	8000380 <strlen>
 8007a90:	2300      	movs	r3, #0
 8007a92:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a94:	f8d8 3000 	ldr.w	r3, [r8]
 8007a98:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007a9c:	6822      	ldr	r2, [r4, #0]
 8007a9e:	9005      	str	r0, [sp, #20]
 8007aa0:	3307      	adds	r3, #7
 8007aa2:	f023 0307 	bic.w	r3, r3, #7
 8007aa6:	f103 0108 	add.w	r1, r3, #8
 8007aaa:	f8c8 1000 	str.w	r1, [r8]
 8007aae:	ed93 0b00 	vldr	d0, [r3]
 8007ab2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007d10 <_printf_float+0x2a0>
 8007ab6:	eeb0 7bc0 	vabs.f64	d7, d0
 8007aba:	eeb4 7b46 	vcmp.f64	d7, d6
 8007abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007ac6:	dd24      	ble.n	8007b12 <_printf_float+0xa2>
 8007ac8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	d502      	bpl.n	8007ad8 <_printf_float+0x68>
 8007ad2:	232d      	movs	r3, #45	@ 0x2d
 8007ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	498f      	ldr	r1, [pc, #572]	@ (8007d18 <_printf_float+0x2a8>)
 8007ada:	4b90      	ldr	r3, [pc, #576]	@ (8007d1c <_printf_float+0x2ac>)
 8007adc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007ae0:	bf94      	ite	ls
 8007ae2:	4688      	movls	r8, r1
 8007ae4:	4698      	movhi	r8, r3
 8007ae6:	f022 0204 	bic.w	r2, r2, #4
 8007aea:	2303      	movs	r3, #3
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	9700      	str	r7, [sp, #0]
 8007af6:	4633      	mov	r3, r6
 8007af8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007afa:	4621      	mov	r1, r4
 8007afc:	4628      	mov	r0, r5
 8007afe:	f000 f9d1 	bl	8007ea4 <_printf_common>
 8007b02:	3001      	adds	r0, #1
 8007b04:	f040 8089 	bne.w	8007c1a <_printf_float+0x1aa>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	b00d      	add	sp, #52	@ 0x34
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1a:	d709      	bvc.n	8007b30 <_printf_float+0xc0>
 8007b1c:	ee10 3a90 	vmov	r3, s1
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	bfbc      	itt	lt
 8007b24:	232d      	movlt	r3, #45	@ 0x2d
 8007b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b2a:	497d      	ldr	r1, [pc, #500]	@ (8007d20 <_printf_float+0x2b0>)
 8007b2c:	4b7d      	ldr	r3, [pc, #500]	@ (8007d24 <_printf_float+0x2b4>)
 8007b2e:	e7d5      	b.n	8007adc <_printf_float+0x6c>
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	1c59      	adds	r1, r3, #1
 8007b34:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007b38:	d139      	bne.n	8007bae <_printf_float+0x13e>
 8007b3a:	2306      	movs	r3, #6
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b42:	2300      	movs	r3, #0
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007b4e:	ab09      	add	r3, sp, #36	@ 0x24
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	6861      	ldr	r1, [r4, #4]
 8007b54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fef9 	bl	8007950 <__cvt>
 8007b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007b62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b64:	4680      	mov	r8, r0
 8007b66:	d129      	bne.n	8007bbc <_printf_float+0x14c>
 8007b68:	1cc8      	adds	r0, r1, #3
 8007b6a:	db02      	blt.n	8007b72 <_printf_float+0x102>
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	4299      	cmp	r1, r3
 8007b70:	dd41      	ble.n	8007bf6 <_printf_float+0x186>
 8007b72:	f1a9 0902 	sub.w	r9, r9, #2
 8007b76:	fa5f f989 	uxtb.w	r9, r9
 8007b7a:	3901      	subs	r1, #1
 8007b7c:	464a      	mov	r2, r9
 8007b7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b82:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b84:	f7ff ff38 	bl	80079f8 <__exponent>
 8007b88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b8a:	1813      	adds	r3, r2, r0
 8007b8c:	2a01      	cmp	r2, #1
 8007b8e:	4682      	mov	sl, r0
 8007b90:	6123      	str	r3, [r4, #16]
 8007b92:	dc02      	bgt.n	8007b9a <_printf_float+0x12a>
 8007b94:	6822      	ldr	r2, [r4, #0]
 8007b96:	07d2      	lsls	r2, r2, #31
 8007b98:	d501      	bpl.n	8007b9e <_printf_float+0x12e>
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0a6      	beq.n	8007af4 <_printf_float+0x84>
 8007ba6:	232d      	movs	r3, #45	@ 0x2d
 8007ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bac:	e7a2      	b.n	8007af4 <_printf_float+0x84>
 8007bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bb2:	d1c4      	bne.n	8007b3e <_printf_float+0xce>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1c2      	bne.n	8007b3e <_printf_float+0xce>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e7bf      	b.n	8007b3c <_printf_float+0xcc>
 8007bbc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007bc0:	d9db      	bls.n	8007b7a <_printf_float+0x10a>
 8007bc2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007bc6:	d118      	bne.n	8007bfa <_printf_float+0x18a>
 8007bc8:	2900      	cmp	r1, #0
 8007bca:	6863      	ldr	r3, [r4, #4]
 8007bcc:	dd0b      	ble.n	8007be6 <_printf_float+0x176>
 8007bce:	6121      	str	r1, [r4, #16]
 8007bd0:	b913      	cbnz	r3, 8007bd8 <_printf_float+0x168>
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	07d0      	lsls	r0, r2, #31
 8007bd6:	d502      	bpl.n	8007bde <_printf_float+0x16e>
 8007bd8:	3301      	adds	r3, #1
 8007bda:	440b      	add	r3, r1
 8007bdc:	6123      	str	r3, [r4, #16]
 8007bde:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	e7db      	b.n	8007b9e <_printf_float+0x12e>
 8007be6:	b913      	cbnz	r3, 8007bee <_printf_float+0x17e>
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	07d2      	lsls	r2, r2, #31
 8007bec:	d501      	bpl.n	8007bf2 <_printf_float+0x182>
 8007bee:	3302      	adds	r3, #2
 8007bf0:	e7f4      	b.n	8007bdc <_printf_float+0x16c>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e7f2      	b.n	8007bdc <_printf_float+0x16c>
 8007bf6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007bfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bfc:	4299      	cmp	r1, r3
 8007bfe:	db05      	blt.n	8007c0c <_printf_float+0x19c>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	6121      	str	r1, [r4, #16]
 8007c04:	07d8      	lsls	r0, r3, #31
 8007c06:	d5ea      	bpl.n	8007bde <_printf_float+0x16e>
 8007c08:	1c4b      	adds	r3, r1, #1
 8007c0a:	e7e7      	b.n	8007bdc <_printf_float+0x16c>
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfd4      	ite	le
 8007c10:	f1c1 0202 	rsble	r2, r1, #2
 8007c14:	2201      	movgt	r2, #1
 8007c16:	4413      	add	r3, r2
 8007c18:	e7e0      	b.n	8007bdc <_printf_float+0x16c>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	055a      	lsls	r2, r3, #21
 8007c1e:	d407      	bmi.n	8007c30 <_printf_float+0x1c0>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	4642      	mov	r2, r8
 8007c24:	4631      	mov	r1, r6
 8007c26:	4628      	mov	r0, r5
 8007c28:	47b8      	blx	r7
 8007c2a:	3001      	adds	r0, #1
 8007c2c:	d12a      	bne.n	8007c84 <_printf_float+0x214>
 8007c2e:	e76b      	b.n	8007b08 <_printf_float+0x98>
 8007c30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007c34:	f240 80e0 	bls.w	8007df8 <_printf_float+0x388>
 8007c38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007c3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c44:	d133      	bne.n	8007cae <_printf_float+0x23e>
 8007c46:	4a38      	ldr	r2, [pc, #224]	@ (8007d28 <_printf_float+0x2b8>)
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f af59 	beq.w	8007b08 <_printf_float+0x98>
 8007c56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c5a:	4543      	cmp	r3, r8
 8007c5c:	db02      	blt.n	8007c64 <_printf_float+0x1f4>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	07d8      	lsls	r0, r3, #31
 8007c62:	d50f      	bpl.n	8007c84 <_printf_float+0x214>
 8007c64:	9b05      	ldr	r3, [sp, #20]
 8007c66:	465a      	mov	r2, fp
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af4a 	beq.w	8007b08 <_printf_float+0x98>
 8007c74:	f04f 0900 	mov.w	r9, #0
 8007c78:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c7c:	f104 0a1a 	add.w	sl, r4, #26
 8007c80:	45c8      	cmp	r8, r9
 8007c82:	dc09      	bgt.n	8007c98 <_printf_float+0x228>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	f100 8107 	bmi.w	8007e9a <_printf_float+0x42a>
 8007c8c:	68e0      	ldr	r0, [r4, #12]
 8007c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c90:	4298      	cmp	r0, r3
 8007c92:	bfb8      	it	lt
 8007c94:	4618      	movlt	r0, r3
 8007c96:	e739      	b.n	8007b0c <_printf_float+0x9c>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4652      	mov	r2, sl
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	f43f af30 	beq.w	8007b08 <_printf_float+0x98>
 8007ca8:	f109 0901 	add.w	r9, r9, #1
 8007cac:	e7e8      	b.n	8007c80 <_printf_float+0x210>
 8007cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dc3b      	bgt.n	8007d2c <_printf_float+0x2bc>
 8007cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d28 <_printf_float+0x2b8>)
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af22 	beq.w	8007b08 <_printf_float+0x98>
 8007cc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007cc8:	ea59 0303 	orrs.w	r3, r9, r3
 8007ccc:	d102      	bne.n	8007cd4 <_printf_float+0x264>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	07d9      	lsls	r1, r3, #31
 8007cd2:	d5d7      	bpl.n	8007c84 <_printf_float+0x214>
 8007cd4:	9b05      	ldr	r3, [sp, #20]
 8007cd6:	465a      	mov	r2, fp
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	f43f af12 	beq.w	8007b08 <_printf_float+0x98>
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	f104 0b1a 	add.w	fp, r4, #26
 8007cec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cee:	425b      	negs	r3, r3
 8007cf0:	4553      	cmp	r3, sl
 8007cf2:	dc01      	bgt.n	8007cf8 <_printf_float+0x288>
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	e794      	b.n	8007c22 <_printf_float+0x1b2>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	465a      	mov	r2, fp
 8007cfc:	4631      	mov	r1, r6
 8007cfe:	4628      	mov	r0, r5
 8007d00:	47b8      	blx	r7
 8007d02:	3001      	adds	r0, #1
 8007d04:	f43f af00 	beq.w	8007b08 <_printf_float+0x98>
 8007d08:	f10a 0a01 	add.w	sl, sl, #1
 8007d0c:	e7ee      	b.n	8007cec <_printf_float+0x27c>
 8007d0e:	bf00      	nop
 8007d10:	ffffffff 	.word	0xffffffff
 8007d14:	7fefffff 	.word	0x7fefffff
 8007d18:	0800c164 	.word	0x0800c164
 8007d1c:	0800c168 	.word	0x0800c168
 8007d20:	0800c16c 	.word	0x0800c16c
 8007d24:	0800c170 	.word	0x0800c170
 8007d28:	0800c174 	.word	0x0800c174
 8007d2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d32:	4553      	cmp	r3, sl
 8007d34:	bfa8      	it	ge
 8007d36:	4653      	movge	r3, sl
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	4699      	mov	r9, r3
 8007d3c:	dc37      	bgt.n	8007dae <_printf_float+0x33e>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	9307      	str	r3, [sp, #28]
 8007d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d46:	f104 021a 	add.w	r2, r4, #26
 8007d4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d4c:	9907      	ldr	r1, [sp, #28]
 8007d4e:	9306      	str	r3, [sp, #24]
 8007d50:	eba3 0309 	sub.w	r3, r3, r9
 8007d54:	428b      	cmp	r3, r1
 8007d56:	dc31      	bgt.n	8007dbc <_printf_float+0x34c>
 8007d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5a:	459a      	cmp	sl, r3
 8007d5c:	dc3b      	bgt.n	8007dd6 <_printf_float+0x366>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	07da      	lsls	r2, r3, #31
 8007d62:	d438      	bmi.n	8007dd6 <_printf_float+0x366>
 8007d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d66:	ebaa 0903 	sub.w	r9, sl, r3
 8007d6a:	9b06      	ldr	r3, [sp, #24]
 8007d6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d70:	4599      	cmp	r9, r3
 8007d72:	bfa8      	it	ge
 8007d74:	4699      	movge	r9, r3
 8007d76:	f1b9 0f00 	cmp.w	r9, #0
 8007d7a:	dc34      	bgt.n	8007de6 <_printf_float+0x376>
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d84:	f104 0b1a 	add.w	fp, r4, #26
 8007d88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d8a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d8e:	eba3 0309 	sub.w	r3, r3, r9
 8007d92:	4543      	cmp	r3, r8
 8007d94:	f77f af76 	ble.w	8007c84 <_printf_float+0x214>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	465a      	mov	r2, fp
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f aeb0 	beq.w	8007b08 <_printf_float+0x98>
 8007da8:	f108 0801 	add.w	r8, r8, #1
 8007dac:	e7ec      	b.n	8007d88 <_printf_float+0x318>
 8007dae:	4642      	mov	r2, r8
 8007db0:	4631      	mov	r1, r6
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1c1      	bne.n	8007d3e <_printf_float+0x2ce>
 8007dba:	e6a5      	b.n	8007b08 <_printf_float+0x98>
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	9206      	str	r2, [sp, #24]
 8007dc4:	47b8      	blx	r7
 8007dc6:	3001      	adds	r0, #1
 8007dc8:	f43f ae9e 	beq.w	8007b08 <_printf_float+0x98>
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	9a06      	ldr	r2, [sp, #24]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	e7b9      	b.n	8007d4a <_printf_float+0x2da>
 8007dd6:	9b05      	ldr	r3, [sp, #20]
 8007dd8:	465a      	mov	r2, fp
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	d1bf      	bne.n	8007d64 <_printf_float+0x2f4>
 8007de4:	e690      	b.n	8007b08 <_printf_float+0x98>
 8007de6:	9a06      	ldr	r2, [sp, #24]
 8007de8:	464b      	mov	r3, r9
 8007dea:	4442      	add	r2, r8
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1c2      	bne.n	8007d7c <_printf_float+0x30c>
 8007df6:	e687      	b.n	8007b08 <_printf_float+0x98>
 8007df8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007dfc:	f1b9 0f01 	cmp.w	r9, #1
 8007e00:	dc01      	bgt.n	8007e06 <_printf_float+0x396>
 8007e02:	07db      	lsls	r3, r3, #31
 8007e04:	d536      	bpl.n	8007e74 <_printf_float+0x404>
 8007e06:	2301      	movs	r3, #1
 8007e08:	4642      	mov	r2, r8
 8007e0a:	4631      	mov	r1, r6
 8007e0c:	4628      	mov	r0, r5
 8007e0e:	47b8      	blx	r7
 8007e10:	3001      	adds	r0, #1
 8007e12:	f43f ae79 	beq.w	8007b08 <_printf_float+0x98>
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	465a      	mov	r2, fp
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f ae71 	beq.w	8007b08 <_printf_float+0x98>
 8007e26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e36:	d018      	beq.n	8007e6a <_printf_float+0x3fa>
 8007e38:	464b      	mov	r3, r9
 8007e3a:	f108 0201 	add.w	r2, r8, #1
 8007e3e:	4631      	mov	r1, r6
 8007e40:	4628      	mov	r0, r5
 8007e42:	47b8      	blx	r7
 8007e44:	3001      	adds	r0, #1
 8007e46:	d10c      	bne.n	8007e62 <_printf_float+0x3f2>
 8007e48:	e65e      	b.n	8007b08 <_printf_float+0x98>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	465a      	mov	r2, fp
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae57 	beq.w	8007b08 <_printf_float+0x98>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	45c8      	cmp	r8, r9
 8007e60:	dbf3      	blt.n	8007e4a <_printf_float+0x3da>
 8007e62:	4653      	mov	r3, sl
 8007e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e68:	e6dc      	b.n	8007c24 <_printf_float+0x1b4>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0b1a 	add.w	fp, r4, #26
 8007e72:	e7f4      	b.n	8007e5e <_printf_float+0x3ee>
 8007e74:	2301      	movs	r3, #1
 8007e76:	4642      	mov	r2, r8
 8007e78:	e7e1      	b.n	8007e3e <_printf_float+0x3ce>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	464a      	mov	r2, r9
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae3f 	beq.w	8007b08 <_printf_float+0x98>
 8007e8a:	f108 0801 	add.w	r8, r8, #1
 8007e8e:	68e3      	ldr	r3, [r4, #12]
 8007e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	4543      	cmp	r3, r8
 8007e96:	dcf0      	bgt.n	8007e7a <_printf_float+0x40a>
 8007e98:	e6f8      	b.n	8007c8c <_printf_float+0x21c>
 8007e9a:	f04f 0800 	mov.w	r8, #0
 8007e9e:	f104 0919 	add.w	r9, r4, #25
 8007ea2:	e7f4      	b.n	8007e8e <_printf_float+0x41e>

08007ea4 <_printf_common>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	4616      	mov	r6, r2
 8007eaa:	4698      	mov	r8, r3
 8007eac:	688a      	ldr	r2, [r1, #8]
 8007eae:	690b      	ldr	r3, [r1, #16]
 8007eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	bfb8      	it	lt
 8007eb8:	4613      	movlt	r3, r2
 8007eba:	6033      	str	r3, [r6, #0]
 8007ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ec0:	4607      	mov	r7, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	b10a      	cbz	r2, 8007eca <_printf_common+0x26>
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	6033      	str	r3, [r6, #0]
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	0699      	lsls	r1, r3, #26
 8007ece:	bf42      	ittt	mi
 8007ed0:	6833      	ldrmi	r3, [r6, #0]
 8007ed2:	3302      	addmi	r3, #2
 8007ed4:	6033      	strmi	r3, [r6, #0]
 8007ed6:	6825      	ldr	r5, [r4, #0]
 8007ed8:	f015 0506 	ands.w	r5, r5, #6
 8007edc:	d106      	bne.n	8007eec <_printf_common+0x48>
 8007ede:	f104 0a19 	add.w	sl, r4, #25
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	6832      	ldr	r2, [r6, #0]
 8007ee6:	1a9b      	subs	r3, r3, r2
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dc26      	bgt.n	8007f3a <_printf_common+0x96>
 8007eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ef0:	6822      	ldr	r2, [r4, #0]
 8007ef2:	3b00      	subs	r3, #0
 8007ef4:	bf18      	it	ne
 8007ef6:	2301      	movne	r3, #1
 8007ef8:	0692      	lsls	r2, r2, #26
 8007efa:	d42b      	bmi.n	8007f54 <_printf_common+0xb0>
 8007efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f00:	4641      	mov	r1, r8
 8007f02:	4638      	mov	r0, r7
 8007f04:	47c8      	blx	r9
 8007f06:	3001      	adds	r0, #1
 8007f08:	d01e      	beq.n	8007f48 <_printf_common+0xa4>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	6922      	ldr	r2, [r4, #16]
 8007f0e:	f003 0306 	and.w	r3, r3, #6
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	bf02      	ittt	eq
 8007f16:	68e5      	ldreq	r5, [r4, #12]
 8007f18:	6833      	ldreq	r3, [r6, #0]
 8007f1a:	1aed      	subeq	r5, r5, r3
 8007f1c:	68a3      	ldr	r3, [r4, #8]
 8007f1e:	bf0c      	ite	eq
 8007f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f24:	2500      	movne	r5, #0
 8007f26:	4293      	cmp	r3, r2
 8007f28:	bfc4      	itt	gt
 8007f2a:	1a9b      	subgt	r3, r3, r2
 8007f2c:	18ed      	addgt	r5, r5, r3
 8007f2e:	2600      	movs	r6, #0
 8007f30:	341a      	adds	r4, #26
 8007f32:	42b5      	cmp	r5, r6
 8007f34:	d11a      	bne.n	8007f6c <_printf_common+0xc8>
 8007f36:	2000      	movs	r0, #0
 8007f38:	e008      	b.n	8007f4c <_printf_common+0xa8>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	4641      	mov	r1, r8
 8007f40:	4638      	mov	r0, r7
 8007f42:	47c8      	blx	r9
 8007f44:	3001      	adds	r0, #1
 8007f46:	d103      	bne.n	8007f50 <_printf_common+0xac>
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	e7c6      	b.n	8007ee2 <_printf_common+0x3e>
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	1c5a      	adds	r2, r3, #1
 8007f58:	2030      	movs	r0, #48	@ 0x30
 8007f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f5e:	4422      	add	r2, r4
 8007f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f68:	3302      	adds	r3, #2
 8007f6a:	e7c7      	b.n	8007efc <_printf_common+0x58>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4641      	mov	r1, r8
 8007f72:	4638      	mov	r0, r7
 8007f74:	47c8      	blx	r9
 8007f76:	3001      	adds	r0, #1
 8007f78:	d0e6      	beq.n	8007f48 <_printf_common+0xa4>
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7d9      	b.n	8007f32 <_printf_common+0x8e>
	...

08007f80 <_printf_i>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	7e0f      	ldrb	r7, [r1, #24]
 8007f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f88:	2f78      	cmp	r7, #120	@ 0x78
 8007f8a:	4691      	mov	r9, r2
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	469a      	mov	sl, r3
 8007f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f96:	d807      	bhi.n	8007fa8 <_printf_i+0x28>
 8007f98:	2f62      	cmp	r7, #98	@ 0x62
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x32>
 8007f9c:	2f00      	cmp	r7, #0
 8007f9e:	f000 80d2 	beq.w	8008146 <_printf_i+0x1c6>
 8007fa2:	2f58      	cmp	r7, #88	@ 0x58
 8007fa4:	f000 80b9 	beq.w	800811a <_printf_i+0x19a>
 8007fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fb0:	e03a      	b.n	8008028 <_printf_i+0xa8>
 8007fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fb6:	2b15      	cmp	r3, #21
 8007fb8:	d8f6      	bhi.n	8007fa8 <_printf_i+0x28>
 8007fba:	a101      	add	r1, pc, #4	@ (adr r1, 8007fc0 <_printf_i+0x40>)
 8007fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fc0:	08008019 	.word	0x08008019
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	08007fa9 	.word	0x08007fa9
 8007fcc:	08007fa9 	.word	0x08007fa9
 8007fd0:	08007fa9 	.word	0x08007fa9
 8007fd4:	08007fa9 	.word	0x08007fa9
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08007fa9 	.word	0x08007fa9
 8007fe0:	08007fa9 	.word	0x08007fa9
 8007fe4:	08007fa9 	.word	0x08007fa9
 8007fe8:	08007fa9 	.word	0x08007fa9
 8007fec:	0800812d 	.word	0x0800812d
 8007ff0:	08008057 	.word	0x08008057
 8007ff4:	080080e7 	.word	0x080080e7
 8007ff8:	08007fa9 	.word	0x08007fa9
 8007ffc:	08007fa9 	.word	0x08007fa9
 8008000:	0800814f 	.word	0x0800814f
 8008004:	08007fa9 	.word	0x08007fa9
 8008008:	08008057 	.word	0x08008057
 800800c:	08007fa9 	.word	0x08007fa9
 8008010:	08007fa9 	.word	0x08007fa9
 8008014:	080080ef 	.word	0x080080ef
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	1d1a      	adds	r2, r3, #4
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6032      	str	r2, [r6, #0]
 8008020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008028:	2301      	movs	r3, #1
 800802a:	e09d      	b.n	8008168 <_printf_i+0x1e8>
 800802c:	6833      	ldr	r3, [r6, #0]
 800802e:	6820      	ldr	r0, [r4, #0]
 8008030:	1d19      	adds	r1, r3, #4
 8008032:	6031      	str	r1, [r6, #0]
 8008034:	0606      	lsls	r6, r0, #24
 8008036:	d501      	bpl.n	800803c <_printf_i+0xbc>
 8008038:	681d      	ldr	r5, [r3, #0]
 800803a:	e003      	b.n	8008044 <_printf_i+0xc4>
 800803c:	0645      	lsls	r5, r0, #25
 800803e:	d5fb      	bpl.n	8008038 <_printf_i+0xb8>
 8008040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008044:	2d00      	cmp	r5, #0
 8008046:	da03      	bge.n	8008050 <_printf_i+0xd0>
 8008048:	232d      	movs	r3, #45	@ 0x2d
 800804a:	426d      	negs	r5, r5
 800804c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008050:	4859      	ldr	r0, [pc, #356]	@ (80081b8 <_printf_i+0x238>)
 8008052:	230a      	movs	r3, #10
 8008054:	e011      	b.n	800807a <_printf_i+0xfa>
 8008056:	6821      	ldr	r1, [r4, #0]
 8008058:	6833      	ldr	r3, [r6, #0]
 800805a:	0608      	lsls	r0, r1, #24
 800805c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008060:	d402      	bmi.n	8008068 <_printf_i+0xe8>
 8008062:	0649      	lsls	r1, r1, #25
 8008064:	bf48      	it	mi
 8008066:	b2ad      	uxthmi	r5, r5
 8008068:	2f6f      	cmp	r7, #111	@ 0x6f
 800806a:	4853      	ldr	r0, [pc, #332]	@ (80081b8 <_printf_i+0x238>)
 800806c:	6033      	str	r3, [r6, #0]
 800806e:	bf14      	ite	ne
 8008070:	230a      	movne	r3, #10
 8008072:	2308      	moveq	r3, #8
 8008074:	2100      	movs	r1, #0
 8008076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800807a:	6866      	ldr	r6, [r4, #4]
 800807c:	60a6      	str	r6, [r4, #8]
 800807e:	2e00      	cmp	r6, #0
 8008080:	bfa2      	ittt	ge
 8008082:	6821      	ldrge	r1, [r4, #0]
 8008084:	f021 0104 	bicge.w	r1, r1, #4
 8008088:	6021      	strge	r1, [r4, #0]
 800808a:	b90d      	cbnz	r5, 8008090 <_printf_i+0x110>
 800808c:	2e00      	cmp	r6, #0
 800808e:	d04b      	beq.n	8008128 <_printf_i+0x1a8>
 8008090:	4616      	mov	r6, r2
 8008092:	fbb5 f1f3 	udiv	r1, r5, r3
 8008096:	fb03 5711 	mls	r7, r3, r1, r5
 800809a:	5dc7      	ldrb	r7, [r0, r7]
 800809c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080a0:	462f      	mov	r7, r5
 80080a2:	42bb      	cmp	r3, r7
 80080a4:	460d      	mov	r5, r1
 80080a6:	d9f4      	bls.n	8008092 <_printf_i+0x112>
 80080a8:	2b08      	cmp	r3, #8
 80080aa:	d10b      	bne.n	80080c4 <_printf_i+0x144>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07df      	lsls	r7, r3, #31
 80080b0:	d508      	bpl.n	80080c4 <_printf_i+0x144>
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6861      	ldr	r1, [r4, #4]
 80080b6:	4299      	cmp	r1, r3
 80080b8:	bfde      	ittt	le
 80080ba:	2330      	movle	r3, #48	@ 0x30
 80080bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080c4:	1b92      	subs	r2, r2, r6
 80080c6:	6122      	str	r2, [r4, #16]
 80080c8:	f8cd a000 	str.w	sl, [sp]
 80080cc:	464b      	mov	r3, r9
 80080ce:	aa03      	add	r2, sp, #12
 80080d0:	4621      	mov	r1, r4
 80080d2:	4640      	mov	r0, r8
 80080d4:	f7ff fee6 	bl	8007ea4 <_printf_common>
 80080d8:	3001      	adds	r0, #1
 80080da:	d14a      	bne.n	8008172 <_printf_i+0x1f2>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	b004      	add	sp, #16
 80080e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	f043 0320 	orr.w	r3, r3, #32
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	4833      	ldr	r0, [pc, #204]	@ (80081bc <_printf_i+0x23c>)
 80080f0:	2778      	movs	r7, #120	@ 0x78
 80080f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	6831      	ldr	r1, [r6, #0]
 80080fa:	061f      	lsls	r7, r3, #24
 80080fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008100:	d402      	bmi.n	8008108 <_printf_i+0x188>
 8008102:	065f      	lsls	r7, r3, #25
 8008104:	bf48      	it	mi
 8008106:	b2ad      	uxthmi	r5, r5
 8008108:	6031      	str	r1, [r6, #0]
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	bf44      	itt	mi
 800810e:	f043 0320 	orrmi.w	r3, r3, #32
 8008112:	6023      	strmi	r3, [r4, #0]
 8008114:	b11d      	cbz	r5, 800811e <_printf_i+0x19e>
 8008116:	2310      	movs	r3, #16
 8008118:	e7ac      	b.n	8008074 <_printf_i+0xf4>
 800811a:	4827      	ldr	r0, [pc, #156]	@ (80081b8 <_printf_i+0x238>)
 800811c:	e7e9      	b.n	80080f2 <_printf_i+0x172>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	e7f6      	b.n	8008116 <_printf_i+0x196>
 8008128:	4616      	mov	r6, r2
 800812a:	e7bd      	b.n	80080a8 <_printf_i+0x128>
 800812c:	6833      	ldr	r3, [r6, #0]
 800812e:	6825      	ldr	r5, [r4, #0]
 8008130:	6961      	ldr	r1, [r4, #20]
 8008132:	1d18      	adds	r0, r3, #4
 8008134:	6030      	str	r0, [r6, #0]
 8008136:	062e      	lsls	r6, r5, #24
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	d501      	bpl.n	8008140 <_printf_i+0x1c0>
 800813c:	6019      	str	r1, [r3, #0]
 800813e:	e002      	b.n	8008146 <_printf_i+0x1c6>
 8008140:	0668      	lsls	r0, r5, #25
 8008142:	d5fb      	bpl.n	800813c <_printf_i+0x1bc>
 8008144:	8019      	strh	r1, [r3, #0]
 8008146:	2300      	movs	r3, #0
 8008148:	6123      	str	r3, [r4, #16]
 800814a:	4616      	mov	r6, r2
 800814c:	e7bc      	b.n	80080c8 <_printf_i+0x148>
 800814e:	6833      	ldr	r3, [r6, #0]
 8008150:	1d1a      	adds	r2, r3, #4
 8008152:	6032      	str	r2, [r6, #0]
 8008154:	681e      	ldr	r6, [r3, #0]
 8008156:	6862      	ldr	r2, [r4, #4]
 8008158:	2100      	movs	r1, #0
 800815a:	4630      	mov	r0, r6
 800815c:	f7f8 f8c0 	bl	80002e0 <memchr>
 8008160:	b108      	cbz	r0, 8008166 <_printf_i+0x1e6>
 8008162:	1b80      	subs	r0, r0, r6
 8008164:	6060      	str	r0, [r4, #4]
 8008166:	6863      	ldr	r3, [r4, #4]
 8008168:	6123      	str	r3, [r4, #16]
 800816a:	2300      	movs	r3, #0
 800816c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008170:	e7aa      	b.n	80080c8 <_printf_i+0x148>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	4632      	mov	r2, r6
 8008176:	4649      	mov	r1, r9
 8008178:	4640      	mov	r0, r8
 800817a:	47d0      	blx	sl
 800817c:	3001      	adds	r0, #1
 800817e:	d0ad      	beq.n	80080dc <_printf_i+0x15c>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	079b      	lsls	r3, r3, #30
 8008184:	d413      	bmi.n	80081ae <_printf_i+0x22e>
 8008186:	68e0      	ldr	r0, [r4, #12]
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	4298      	cmp	r0, r3
 800818c:	bfb8      	it	lt
 800818e:	4618      	movlt	r0, r3
 8008190:	e7a6      	b.n	80080e0 <_printf_i+0x160>
 8008192:	2301      	movs	r3, #1
 8008194:	4632      	mov	r2, r6
 8008196:	4649      	mov	r1, r9
 8008198:	4640      	mov	r0, r8
 800819a:	47d0      	blx	sl
 800819c:	3001      	adds	r0, #1
 800819e:	d09d      	beq.n	80080dc <_printf_i+0x15c>
 80081a0:	3501      	adds	r5, #1
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	9903      	ldr	r1, [sp, #12]
 80081a6:	1a5b      	subs	r3, r3, r1
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dcf2      	bgt.n	8008192 <_printf_i+0x212>
 80081ac:	e7eb      	b.n	8008186 <_printf_i+0x206>
 80081ae:	2500      	movs	r5, #0
 80081b0:	f104 0619 	add.w	r6, r4, #25
 80081b4:	e7f5      	b.n	80081a2 <_printf_i+0x222>
 80081b6:	bf00      	nop
 80081b8:	0800c176 	.word	0x0800c176
 80081bc:	0800c187 	.word	0x0800c187

080081c0 <_scanf_float>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b087      	sub	sp, #28
 80081c6:	4617      	mov	r7, r2
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	688b      	ldr	r3, [r1, #8]
 80081cc:	1e5a      	subs	r2, r3, #1
 80081ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80081d2:	bf81      	itttt	hi
 80081d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80081d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80081dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081e0:	608b      	strhi	r3, [r1, #8]
 80081e2:	680b      	ldr	r3, [r1, #0]
 80081e4:	460a      	mov	r2, r1
 80081e6:	f04f 0500 	mov.w	r5, #0
 80081ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081ee:	f842 3b1c 	str.w	r3, [r2], #28
 80081f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081f6:	4680      	mov	r8, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	bf98      	it	ls
 80081fc:	f04f 0b00 	movls.w	fp, #0
 8008200:	9201      	str	r2, [sp, #4]
 8008202:	4616      	mov	r6, r2
 8008204:	46aa      	mov	sl, r5
 8008206:	46a9      	mov	r9, r5
 8008208:	9502      	str	r5, [sp, #8]
 800820a:	68a2      	ldr	r2, [r4, #8]
 800820c:	b152      	cbz	r2, 8008224 <_scanf_float+0x64>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b4e      	cmp	r3, #78	@ 0x4e
 8008214:	d864      	bhi.n	80082e0 <_scanf_float+0x120>
 8008216:	2b40      	cmp	r3, #64	@ 0x40
 8008218:	d83c      	bhi.n	8008294 <_scanf_float+0xd4>
 800821a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800821e:	b2c8      	uxtb	r0, r1
 8008220:	280e      	cmp	r0, #14
 8008222:	d93a      	bls.n	800829a <_scanf_float+0xda>
 8008224:	f1b9 0f00 	cmp.w	r9, #0
 8008228:	d003      	beq.n	8008232 <_scanf_float+0x72>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008230:	6023      	str	r3, [r4, #0]
 8008232:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008236:	f1ba 0f01 	cmp.w	sl, #1
 800823a:	f200 8117 	bhi.w	800846c <_scanf_float+0x2ac>
 800823e:	9b01      	ldr	r3, [sp, #4]
 8008240:	429e      	cmp	r6, r3
 8008242:	f200 8108 	bhi.w	8008456 <_scanf_float+0x296>
 8008246:	2001      	movs	r0, #1
 8008248:	b007      	add	sp, #28
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008252:	2a0d      	cmp	r2, #13
 8008254:	d8e6      	bhi.n	8008224 <_scanf_float+0x64>
 8008256:	a101      	add	r1, pc, #4	@ (adr r1, 800825c <_scanf_float+0x9c>)
 8008258:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800825c:	080083a3 	.word	0x080083a3
 8008260:	08008225 	.word	0x08008225
 8008264:	08008225 	.word	0x08008225
 8008268:	08008225 	.word	0x08008225
 800826c:	08008403 	.word	0x08008403
 8008270:	080083db 	.word	0x080083db
 8008274:	08008225 	.word	0x08008225
 8008278:	08008225 	.word	0x08008225
 800827c:	080083b1 	.word	0x080083b1
 8008280:	08008225 	.word	0x08008225
 8008284:	08008225 	.word	0x08008225
 8008288:	08008225 	.word	0x08008225
 800828c:	08008225 	.word	0x08008225
 8008290:	08008369 	.word	0x08008369
 8008294:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008298:	e7db      	b.n	8008252 <_scanf_float+0x92>
 800829a:	290e      	cmp	r1, #14
 800829c:	d8c2      	bhi.n	8008224 <_scanf_float+0x64>
 800829e:	a001      	add	r0, pc, #4	@ (adr r0, 80082a4 <_scanf_float+0xe4>)
 80082a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082a4:	08008359 	.word	0x08008359
 80082a8:	08008225 	.word	0x08008225
 80082ac:	08008359 	.word	0x08008359
 80082b0:	080083ef 	.word	0x080083ef
 80082b4:	08008225 	.word	0x08008225
 80082b8:	08008301 	.word	0x08008301
 80082bc:	0800833f 	.word	0x0800833f
 80082c0:	0800833f 	.word	0x0800833f
 80082c4:	0800833f 	.word	0x0800833f
 80082c8:	0800833f 	.word	0x0800833f
 80082cc:	0800833f 	.word	0x0800833f
 80082d0:	0800833f 	.word	0x0800833f
 80082d4:	0800833f 	.word	0x0800833f
 80082d8:	0800833f 	.word	0x0800833f
 80082dc:	0800833f 	.word	0x0800833f
 80082e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80082e2:	d809      	bhi.n	80082f8 <_scanf_float+0x138>
 80082e4:	2b60      	cmp	r3, #96	@ 0x60
 80082e6:	d8b2      	bhi.n	800824e <_scanf_float+0x8e>
 80082e8:	2b54      	cmp	r3, #84	@ 0x54
 80082ea:	d07b      	beq.n	80083e4 <_scanf_float+0x224>
 80082ec:	2b59      	cmp	r3, #89	@ 0x59
 80082ee:	d199      	bne.n	8008224 <_scanf_float+0x64>
 80082f0:	2d07      	cmp	r5, #7
 80082f2:	d197      	bne.n	8008224 <_scanf_float+0x64>
 80082f4:	2508      	movs	r5, #8
 80082f6:	e02c      	b.n	8008352 <_scanf_float+0x192>
 80082f8:	2b74      	cmp	r3, #116	@ 0x74
 80082fa:	d073      	beq.n	80083e4 <_scanf_float+0x224>
 80082fc:	2b79      	cmp	r3, #121	@ 0x79
 80082fe:	e7f6      	b.n	80082ee <_scanf_float+0x12e>
 8008300:	6821      	ldr	r1, [r4, #0]
 8008302:	05c8      	lsls	r0, r1, #23
 8008304:	d51b      	bpl.n	800833e <_scanf_float+0x17e>
 8008306:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800830a:	6021      	str	r1, [r4, #0]
 800830c:	f109 0901 	add.w	r9, r9, #1
 8008310:	f1bb 0f00 	cmp.w	fp, #0
 8008314:	d003      	beq.n	800831e <_scanf_float+0x15e>
 8008316:	3201      	adds	r2, #1
 8008318:	f10b 3bff 	add.w	fp, fp, #4294967295
 800831c:	60a2      	str	r2, [r4, #8]
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	3b01      	subs	r3, #1
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	6923      	ldr	r3, [r4, #16]
 8008326:	3301      	adds	r3, #1
 8008328:	6123      	str	r3, [r4, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	3b01      	subs	r3, #1
 800832e:	2b00      	cmp	r3, #0
 8008330:	607b      	str	r3, [r7, #4]
 8008332:	f340 8087 	ble.w	8008444 <_scanf_float+0x284>
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	3301      	adds	r3, #1
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	e765      	b.n	800820a <_scanf_float+0x4a>
 800833e:	eb1a 0105 	adds.w	r1, sl, r5
 8008342:	f47f af6f 	bne.w	8008224 <_scanf_float+0x64>
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800834c:	6022      	str	r2, [r4, #0]
 800834e:	460d      	mov	r5, r1
 8008350:	468a      	mov	sl, r1
 8008352:	f806 3b01 	strb.w	r3, [r6], #1
 8008356:	e7e2      	b.n	800831e <_scanf_float+0x15e>
 8008358:	6822      	ldr	r2, [r4, #0]
 800835a:	0610      	lsls	r0, r2, #24
 800835c:	f57f af62 	bpl.w	8008224 <_scanf_float+0x64>
 8008360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008364:	6022      	str	r2, [r4, #0]
 8008366:	e7f4      	b.n	8008352 <_scanf_float+0x192>
 8008368:	f1ba 0f00 	cmp.w	sl, #0
 800836c:	d10e      	bne.n	800838c <_scanf_float+0x1cc>
 800836e:	f1b9 0f00 	cmp.w	r9, #0
 8008372:	d10e      	bne.n	8008392 <_scanf_float+0x1d2>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800837a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800837e:	d108      	bne.n	8008392 <_scanf_float+0x1d2>
 8008380:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008384:	6022      	str	r2, [r4, #0]
 8008386:	f04f 0a01 	mov.w	sl, #1
 800838a:	e7e2      	b.n	8008352 <_scanf_float+0x192>
 800838c:	f1ba 0f02 	cmp.w	sl, #2
 8008390:	d055      	beq.n	800843e <_scanf_float+0x27e>
 8008392:	2d01      	cmp	r5, #1
 8008394:	d002      	beq.n	800839c <_scanf_float+0x1dc>
 8008396:	2d04      	cmp	r5, #4
 8008398:	f47f af44 	bne.w	8008224 <_scanf_float+0x64>
 800839c:	3501      	adds	r5, #1
 800839e:	b2ed      	uxtb	r5, r5
 80083a0:	e7d7      	b.n	8008352 <_scanf_float+0x192>
 80083a2:	f1ba 0f01 	cmp.w	sl, #1
 80083a6:	f47f af3d 	bne.w	8008224 <_scanf_float+0x64>
 80083aa:	f04f 0a02 	mov.w	sl, #2
 80083ae:	e7d0      	b.n	8008352 <_scanf_float+0x192>
 80083b0:	b97d      	cbnz	r5, 80083d2 <_scanf_float+0x212>
 80083b2:	f1b9 0f00 	cmp.w	r9, #0
 80083b6:	f47f af38 	bne.w	800822a <_scanf_float+0x6a>
 80083ba:	6822      	ldr	r2, [r4, #0]
 80083bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083c4:	f040 8101 	bne.w	80085ca <_scanf_float+0x40a>
 80083c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	2501      	movs	r5, #1
 80083d0:	e7bf      	b.n	8008352 <_scanf_float+0x192>
 80083d2:	2d03      	cmp	r5, #3
 80083d4:	d0e2      	beq.n	800839c <_scanf_float+0x1dc>
 80083d6:	2d05      	cmp	r5, #5
 80083d8:	e7de      	b.n	8008398 <_scanf_float+0x1d8>
 80083da:	2d02      	cmp	r5, #2
 80083dc:	f47f af22 	bne.w	8008224 <_scanf_float+0x64>
 80083e0:	2503      	movs	r5, #3
 80083e2:	e7b6      	b.n	8008352 <_scanf_float+0x192>
 80083e4:	2d06      	cmp	r5, #6
 80083e6:	f47f af1d 	bne.w	8008224 <_scanf_float+0x64>
 80083ea:	2507      	movs	r5, #7
 80083ec:	e7b1      	b.n	8008352 <_scanf_float+0x192>
 80083ee:	6822      	ldr	r2, [r4, #0]
 80083f0:	0591      	lsls	r1, r2, #22
 80083f2:	f57f af17 	bpl.w	8008224 <_scanf_float+0x64>
 80083f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083fa:	6022      	str	r2, [r4, #0]
 80083fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008400:	e7a7      	b.n	8008352 <_scanf_float+0x192>
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008408:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800840c:	d006      	beq.n	800841c <_scanf_float+0x25c>
 800840e:	0550      	lsls	r0, r2, #21
 8008410:	f57f af08 	bpl.w	8008224 <_scanf_float+0x64>
 8008414:	f1b9 0f00 	cmp.w	r9, #0
 8008418:	f000 80d7 	beq.w	80085ca <_scanf_float+0x40a>
 800841c:	0591      	lsls	r1, r2, #22
 800841e:	bf58      	it	pl
 8008420:	9902      	ldrpl	r1, [sp, #8]
 8008422:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008426:	bf58      	it	pl
 8008428:	eba9 0101 	subpl.w	r1, r9, r1
 800842c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008430:	bf58      	it	pl
 8008432:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	f04f 0900 	mov.w	r9, #0
 800843c:	e789      	b.n	8008352 <_scanf_float+0x192>
 800843e:	f04f 0a03 	mov.w	sl, #3
 8008442:	e786      	b.n	8008352 <_scanf_float+0x192>
 8008444:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008448:	4639      	mov	r1, r7
 800844a:	4640      	mov	r0, r8
 800844c:	4798      	blx	r3
 800844e:	2800      	cmp	r0, #0
 8008450:	f43f aedb 	beq.w	800820a <_scanf_float+0x4a>
 8008454:	e6e6      	b.n	8008224 <_scanf_float+0x64>
 8008456:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800845a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800845e:	463a      	mov	r2, r7
 8008460:	4640      	mov	r0, r8
 8008462:	4798      	blx	r3
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	3b01      	subs	r3, #1
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	e6e8      	b.n	800823e <_scanf_float+0x7e>
 800846c:	1e6b      	subs	r3, r5, #1
 800846e:	2b06      	cmp	r3, #6
 8008470:	d824      	bhi.n	80084bc <_scanf_float+0x2fc>
 8008472:	2d02      	cmp	r5, #2
 8008474:	d836      	bhi.n	80084e4 <_scanf_float+0x324>
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	429e      	cmp	r6, r3
 800847a:	f67f aee4 	bls.w	8008246 <_scanf_float+0x86>
 800847e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008482:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008486:	463a      	mov	r2, r7
 8008488:	4640      	mov	r0, r8
 800848a:	4798      	blx	r3
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	3b01      	subs	r3, #1
 8008490:	6123      	str	r3, [r4, #16]
 8008492:	e7f0      	b.n	8008476 <_scanf_float+0x2b6>
 8008494:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008498:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800849c:	463a      	mov	r2, r7
 800849e:	4640      	mov	r0, r8
 80084a0:	4798      	blx	r3
 80084a2:	6923      	ldr	r3, [r4, #16]
 80084a4:	3b01      	subs	r3, #1
 80084a6:	6123      	str	r3, [r4, #16]
 80084a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084ac:	fa5f fa8a 	uxtb.w	sl, sl
 80084b0:	f1ba 0f02 	cmp.w	sl, #2
 80084b4:	d1ee      	bne.n	8008494 <_scanf_float+0x2d4>
 80084b6:	3d03      	subs	r5, #3
 80084b8:	b2ed      	uxtb	r5, r5
 80084ba:	1b76      	subs	r6, r6, r5
 80084bc:	6823      	ldr	r3, [r4, #0]
 80084be:	05da      	lsls	r2, r3, #23
 80084c0:	d530      	bpl.n	8008524 <_scanf_float+0x364>
 80084c2:	055b      	lsls	r3, r3, #21
 80084c4:	d511      	bpl.n	80084ea <_scanf_float+0x32a>
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	429e      	cmp	r6, r3
 80084ca:	f67f aebc 	bls.w	8008246 <_scanf_float+0x86>
 80084ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084d6:	463a      	mov	r2, r7
 80084d8:	4640      	mov	r0, r8
 80084da:	4798      	blx	r3
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	3b01      	subs	r3, #1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	e7f0      	b.n	80084c6 <_scanf_float+0x306>
 80084e4:	46aa      	mov	sl, r5
 80084e6:	46b3      	mov	fp, r6
 80084e8:	e7de      	b.n	80084a8 <_scanf_float+0x2e8>
 80084ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084ee:	6923      	ldr	r3, [r4, #16]
 80084f0:	2965      	cmp	r1, #101	@ 0x65
 80084f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	d00c      	beq.n	8008518 <_scanf_float+0x358>
 80084fe:	2945      	cmp	r1, #69	@ 0x45
 8008500:	d00a      	beq.n	8008518 <_scanf_float+0x358>
 8008502:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008506:	463a      	mov	r2, r7
 8008508:	4640      	mov	r0, r8
 800850a:	4798      	blx	r3
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008512:	3b01      	subs	r3, #1
 8008514:	1eb5      	subs	r5, r6, #2
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800851c:	463a      	mov	r2, r7
 800851e:	4640      	mov	r0, r8
 8008520:	4798      	blx	r3
 8008522:	462e      	mov	r6, r5
 8008524:	6822      	ldr	r2, [r4, #0]
 8008526:	f012 0210 	ands.w	r2, r2, #16
 800852a:	d001      	beq.n	8008530 <_scanf_float+0x370>
 800852c:	2000      	movs	r0, #0
 800852e:	e68b      	b.n	8008248 <_scanf_float+0x88>
 8008530:	7032      	strb	r2, [r6, #0]
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008538:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800853c:	d11a      	bne.n	8008574 <_scanf_float+0x3b4>
 800853e:	9b02      	ldr	r3, [sp, #8]
 8008540:	454b      	cmp	r3, r9
 8008542:	eba3 0209 	sub.w	r2, r3, r9
 8008546:	d121      	bne.n	800858c <_scanf_float+0x3cc>
 8008548:	9901      	ldr	r1, [sp, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	4640      	mov	r0, r8
 800854e:	f002 fb61 	bl	800ac14 <_strtod_r>
 8008552:	9b03      	ldr	r3, [sp, #12]
 8008554:	6821      	ldr	r1, [r4, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f011 0f02 	tst.w	r1, #2
 800855c:	f103 0204 	add.w	r2, r3, #4
 8008560:	d01f      	beq.n	80085a2 <_scanf_float+0x3e2>
 8008562:	9903      	ldr	r1, [sp, #12]
 8008564:	600a      	str	r2, [r1, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	ed83 0b00 	vstr	d0, [r3]
 800856c:	68e3      	ldr	r3, [r4, #12]
 800856e:	3301      	adds	r3, #1
 8008570:	60e3      	str	r3, [r4, #12]
 8008572:	e7db      	b.n	800852c <_scanf_float+0x36c>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d0e6      	beq.n	8008548 <_scanf_float+0x388>
 800857a:	9905      	ldr	r1, [sp, #20]
 800857c:	230a      	movs	r3, #10
 800857e:	3101      	adds	r1, #1
 8008580:	4640      	mov	r0, r8
 8008582:	f002 fbc7 	bl	800ad14 <_strtol_r>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	9e05      	ldr	r6, [sp, #20]
 800858a:	1ac2      	subs	r2, r0, r3
 800858c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008590:	429e      	cmp	r6, r3
 8008592:	bf28      	it	cs
 8008594:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008598:	490d      	ldr	r1, [pc, #52]	@ (80085d0 <_scanf_float+0x410>)
 800859a:	4630      	mov	r0, r6
 800859c:	f000 f912 	bl	80087c4 <siprintf>
 80085a0:	e7d2      	b.n	8008548 <_scanf_float+0x388>
 80085a2:	f011 0f04 	tst.w	r1, #4
 80085a6:	9903      	ldr	r1, [sp, #12]
 80085a8:	600a      	str	r2, [r1, #0]
 80085aa:	d1dc      	bne.n	8008566 <_scanf_float+0x3a6>
 80085ac:	eeb4 0b40 	vcmp.f64	d0, d0
 80085b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b4:	681d      	ldr	r5, [r3, #0]
 80085b6:	d705      	bvc.n	80085c4 <_scanf_float+0x404>
 80085b8:	4806      	ldr	r0, [pc, #24]	@ (80085d4 <_scanf_float+0x414>)
 80085ba:	f000 f9e7 	bl	800898c <nanf>
 80085be:	ed85 0a00 	vstr	s0, [r5]
 80085c2:	e7d3      	b.n	800856c <_scanf_float+0x3ac>
 80085c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80085c8:	e7f9      	b.n	80085be <_scanf_float+0x3fe>
 80085ca:	f04f 0900 	mov.w	r9, #0
 80085ce:	e630      	b.n	8008232 <_scanf_float+0x72>
 80085d0:	0800c198 	.word	0x0800c198
 80085d4:	0800c52d 	.word	0x0800c52d

080085d8 <std>:
 80085d8:	2300      	movs	r3, #0
 80085da:	b510      	push	{r4, lr}
 80085dc:	4604      	mov	r4, r0
 80085de:	e9c0 3300 	strd	r3, r3, [r0]
 80085e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085e6:	6083      	str	r3, [r0, #8]
 80085e8:	8181      	strh	r1, [r0, #12]
 80085ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80085ec:	81c2      	strh	r2, [r0, #14]
 80085ee:	6183      	str	r3, [r0, #24]
 80085f0:	4619      	mov	r1, r3
 80085f2:	2208      	movs	r2, #8
 80085f4:	305c      	adds	r0, #92	@ 0x5c
 80085f6:	f000 f948 	bl	800888a <memset>
 80085fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008630 <std+0x58>)
 80085fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80085fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <std+0x5c>)
 8008600:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008602:	4b0d      	ldr	r3, [pc, #52]	@ (8008638 <std+0x60>)
 8008604:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008606:	4b0d      	ldr	r3, [pc, #52]	@ (800863c <std+0x64>)
 8008608:	6323      	str	r3, [r4, #48]	@ 0x30
 800860a:	4b0d      	ldr	r3, [pc, #52]	@ (8008640 <std+0x68>)
 800860c:	6224      	str	r4, [r4, #32]
 800860e:	429c      	cmp	r4, r3
 8008610:	d006      	beq.n	8008620 <std+0x48>
 8008612:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008616:	4294      	cmp	r4, r2
 8008618:	d002      	beq.n	8008620 <std+0x48>
 800861a:	33d0      	adds	r3, #208	@ 0xd0
 800861c:	429c      	cmp	r4, r3
 800861e:	d105      	bne.n	800862c <std+0x54>
 8008620:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008628:	f000 b9ac 	b.w	8008984 <__retarget_lock_init_recursive>
 800862c:	bd10      	pop	{r4, pc}
 800862e:	bf00      	nop
 8008630:	08008805 	.word	0x08008805
 8008634:	08008827 	.word	0x08008827
 8008638:	0800885f 	.word	0x0800885f
 800863c:	08008883 	.word	0x08008883
 8008640:	24000440 	.word	0x24000440

08008644 <stdio_exit_handler>:
 8008644:	4a02      	ldr	r2, [pc, #8]	@ (8008650 <stdio_exit_handler+0xc>)
 8008646:	4903      	ldr	r1, [pc, #12]	@ (8008654 <stdio_exit_handler+0x10>)
 8008648:	4803      	ldr	r0, [pc, #12]	@ (8008658 <stdio_exit_handler+0x14>)
 800864a:	f000 b869 	b.w	8008720 <_fwalk_sglue>
 800864e:	bf00      	nop
 8008650:	240000b0 	.word	0x240000b0
 8008654:	0800b0d1 	.word	0x0800b0d1
 8008658:	240000c0 	.word	0x240000c0

0800865c <cleanup_stdio>:
 800865c:	6841      	ldr	r1, [r0, #4]
 800865e:	4b0c      	ldr	r3, [pc, #48]	@ (8008690 <cleanup_stdio+0x34>)
 8008660:	4299      	cmp	r1, r3
 8008662:	b510      	push	{r4, lr}
 8008664:	4604      	mov	r4, r0
 8008666:	d001      	beq.n	800866c <cleanup_stdio+0x10>
 8008668:	f002 fd32 	bl	800b0d0 <_fflush_r>
 800866c:	68a1      	ldr	r1, [r4, #8]
 800866e:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <cleanup_stdio+0x38>)
 8008670:	4299      	cmp	r1, r3
 8008672:	d002      	beq.n	800867a <cleanup_stdio+0x1e>
 8008674:	4620      	mov	r0, r4
 8008676:	f002 fd2b 	bl	800b0d0 <_fflush_r>
 800867a:	68e1      	ldr	r1, [r4, #12]
 800867c:	4b06      	ldr	r3, [pc, #24]	@ (8008698 <cleanup_stdio+0x3c>)
 800867e:	4299      	cmp	r1, r3
 8008680:	d004      	beq.n	800868c <cleanup_stdio+0x30>
 8008682:	4620      	mov	r0, r4
 8008684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008688:	f002 bd22 	b.w	800b0d0 <_fflush_r>
 800868c:	bd10      	pop	{r4, pc}
 800868e:	bf00      	nop
 8008690:	24000440 	.word	0x24000440
 8008694:	240004a8 	.word	0x240004a8
 8008698:	24000510 	.word	0x24000510

0800869c <global_stdio_init.part.0>:
 800869c:	b510      	push	{r4, lr}
 800869e:	4b0b      	ldr	r3, [pc, #44]	@ (80086cc <global_stdio_init.part.0+0x30>)
 80086a0:	4c0b      	ldr	r4, [pc, #44]	@ (80086d0 <global_stdio_init.part.0+0x34>)
 80086a2:	4a0c      	ldr	r2, [pc, #48]	@ (80086d4 <global_stdio_init.part.0+0x38>)
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	4620      	mov	r0, r4
 80086a8:	2200      	movs	r2, #0
 80086aa:	2104      	movs	r1, #4
 80086ac:	f7ff ff94 	bl	80085d8 <std>
 80086b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80086b4:	2201      	movs	r2, #1
 80086b6:	2109      	movs	r1, #9
 80086b8:	f7ff ff8e 	bl	80085d8 <std>
 80086bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80086c0:	2202      	movs	r2, #2
 80086c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c6:	2112      	movs	r1, #18
 80086c8:	f7ff bf86 	b.w	80085d8 <std>
 80086cc:	24000578 	.word	0x24000578
 80086d0:	24000440 	.word	0x24000440
 80086d4:	08008645 	.word	0x08008645

080086d8 <__sfp_lock_acquire>:
 80086d8:	4801      	ldr	r0, [pc, #4]	@ (80086e0 <__sfp_lock_acquire+0x8>)
 80086da:	f000 b954 	b.w	8008986 <__retarget_lock_acquire_recursive>
 80086de:	bf00      	nop
 80086e0:	24000581 	.word	0x24000581

080086e4 <__sfp_lock_release>:
 80086e4:	4801      	ldr	r0, [pc, #4]	@ (80086ec <__sfp_lock_release+0x8>)
 80086e6:	f000 b94f 	b.w	8008988 <__retarget_lock_release_recursive>
 80086ea:	bf00      	nop
 80086ec:	24000581 	.word	0x24000581

080086f0 <__sinit>:
 80086f0:	b510      	push	{r4, lr}
 80086f2:	4604      	mov	r4, r0
 80086f4:	f7ff fff0 	bl	80086d8 <__sfp_lock_acquire>
 80086f8:	6a23      	ldr	r3, [r4, #32]
 80086fa:	b11b      	cbz	r3, 8008704 <__sinit+0x14>
 80086fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008700:	f7ff bff0 	b.w	80086e4 <__sfp_lock_release>
 8008704:	4b04      	ldr	r3, [pc, #16]	@ (8008718 <__sinit+0x28>)
 8008706:	6223      	str	r3, [r4, #32]
 8008708:	4b04      	ldr	r3, [pc, #16]	@ (800871c <__sinit+0x2c>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1f5      	bne.n	80086fc <__sinit+0xc>
 8008710:	f7ff ffc4 	bl	800869c <global_stdio_init.part.0>
 8008714:	e7f2      	b.n	80086fc <__sinit+0xc>
 8008716:	bf00      	nop
 8008718:	0800865d 	.word	0x0800865d
 800871c:	24000578 	.word	0x24000578

08008720 <_fwalk_sglue>:
 8008720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008724:	4607      	mov	r7, r0
 8008726:	4688      	mov	r8, r1
 8008728:	4614      	mov	r4, r2
 800872a:	2600      	movs	r6, #0
 800872c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008730:	f1b9 0901 	subs.w	r9, r9, #1
 8008734:	d505      	bpl.n	8008742 <_fwalk_sglue+0x22>
 8008736:	6824      	ldr	r4, [r4, #0]
 8008738:	2c00      	cmp	r4, #0
 800873a:	d1f7      	bne.n	800872c <_fwalk_sglue+0xc>
 800873c:	4630      	mov	r0, r6
 800873e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008742:	89ab      	ldrh	r3, [r5, #12]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d907      	bls.n	8008758 <_fwalk_sglue+0x38>
 8008748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800874c:	3301      	adds	r3, #1
 800874e:	d003      	beq.n	8008758 <_fwalk_sglue+0x38>
 8008750:	4629      	mov	r1, r5
 8008752:	4638      	mov	r0, r7
 8008754:	47c0      	blx	r8
 8008756:	4306      	orrs	r6, r0
 8008758:	3568      	adds	r5, #104	@ 0x68
 800875a:	e7e9      	b.n	8008730 <_fwalk_sglue+0x10>

0800875c <sniprintf>:
 800875c:	b40c      	push	{r2, r3}
 800875e:	b530      	push	{r4, r5, lr}
 8008760:	4b17      	ldr	r3, [pc, #92]	@ (80087c0 <sniprintf+0x64>)
 8008762:	1e0c      	subs	r4, r1, #0
 8008764:	681d      	ldr	r5, [r3, #0]
 8008766:	b09d      	sub	sp, #116	@ 0x74
 8008768:	da08      	bge.n	800877c <sniprintf+0x20>
 800876a:	238b      	movs	r3, #139	@ 0x8b
 800876c:	602b      	str	r3, [r5, #0]
 800876e:	f04f 30ff 	mov.w	r0, #4294967295
 8008772:	b01d      	add	sp, #116	@ 0x74
 8008774:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008778:	b002      	add	sp, #8
 800877a:	4770      	bx	lr
 800877c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008780:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008784:	bf14      	ite	ne
 8008786:	f104 33ff 	addne.w	r3, r4, #4294967295
 800878a:	4623      	moveq	r3, r4
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	9307      	str	r3, [sp, #28]
 8008790:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008794:	9002      	str	r0, [sp, #8]
 8008796:	9006      	str	r0, [sp, #24]
 8008798:	f8ad 3016 	strh.w	r3, [sp, #22]
 800879c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800879e:	ab21      	add	r3, sp, #132	@ 0x84
 80087a0:	a902      	add	r1, sp, #8
 80087a2:	4628      	mov	r0, r5
 80087a4:	9301      	str	r3, [sp, #4]
 80087a6:	f002 fb13 	bl	800add0 <_svfiprintf_r>
 80087aa:	1c43      	adds	r3, r0, #1
 80087ac:	bfbc      	itt	lt
 80087ae:	238b      	movlt	r3, #139	@ 0x8b
 80087b0:	602b      	strlt	r3, [r5, #0]
 80087b2:	2c00      	cmp	r4, #0
 80087b4:	d0dd      	beq.n	8008772 <sniprintf+0x16>
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	e7d9      	b.n	8008772 <sniprintf+0x16>
 80087be:	bf00      	nop
 80087c0:	240000bc 	.word	0x240000bc

080087c4 <siprintf>:
 80087c4:	b40e      	push	{r1, r2, r3}
 80087c6:	b500      	push	{lr}
 80087c8:	b09c      	sub	sp, #112	@ 0x70
 80087ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80087cc:	9002      	str	r0, [sp, #8]
 80087ce:	9006      	str	r0, [sp, #24]
 80087d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087d4:	4809      	ldr	r0, [pc, #36]	@ (80087fc <siprintf+0x38>)
 80087d6:	9107      	str	r1, [sp, #28]
 80087d8:	9104      	str	r1, [sp, #16]
 80087da:	4909      	ldr	r1, [pc, #36]	@ (8008800 <siprintf+0x3c>)
 80087dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e0:	9105      	str	r1, [sp, #20]
 80087e2:	6800      	ldr	r0, [r0, #0]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	a902      	add	r1, sp, #8
 80087e8:	f002 faf2 	bl	800add0 <_svfiprintf_r>
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	2200      	movs	r2, #0
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	b01c      	add	sp, #112	@ 0x70
 80087f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f8:	b003      	add	sp, #12
 80087fa:	4770      	bx	lr
 80087fc:	240000bc 	.word	0x240000bc
 8008800:	ffff0208 	.word	0xffff0208

08008804 <__sread>:
 8008804:	b510      	push	{r4, lr}
 8008806:	460c      	mov	r4, r1
 8008808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880c:	f000 f86c 	bl	80088e8 <_read_r>
 8008810:	2800      	cmp	r0, #0
 8008812:	bfab      	itete	ge
 8008814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008816:	89a3      	ldrhlt	r3, [r4, #12]
 8008818:	181b      	addge	r3, r3, r0
 800881a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800881e:	bfac      	ite	ge
 8008820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008822:	81a3      	strhlt	r3, [r4, #12]
 8008824:	bd10      	pop	{r4, pc}

08008826 <__swrite>:
 8008826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882a:	461f      	mov	r7, r3
 800882c:	898b      	ldrh	r3, [r1, #12]
 800882e:	05db      	lsls	r3, r3, #23
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	4616      	mov	r6, r2
 8008836:	d505      	bpl.n	8008844 <__swrite+0x1e>
 8008838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883c:	2302      	movs	r3, #2
 800883e:	2200      	movs	r2, #0
 8008840:	f000 f840 	bl	80088c4 <_lseek_r>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800884a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800884e:	81a3      	strh	r3, [r4, #12]
 8008850:	4632      	mov	r2, r6
 8008852:	463b      	mov	r3, r7
 8008854:	4628      	mov	r0, r5
 8008856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800885a:	f000 b857 	b.w	800890c <_write_r>

0800885e <__sseek>:
 800885e:	b510      	push	{r4, lr}
 8008860:	460c      	mov	r4, r1
 8008862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008866:	f000 f82d 	bl	80088c4 <_lseek_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	bf15      	itete	ne
 8008870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800887a:	81a3      	strheq	r3, [r4, #12]
 800887c:	bf18      	it	ne
 800887e:	81a3      	strhne	r3, [r4, #12]
 8008880:	bd10      	pop	{r4, pc}

08008882 <__sclose>:
 8008882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008886:	f000 b80d 	b.w	80088a4 <_close_r>

0800888a <memset>:
 800888a:	4402      	add	r2, r0
 800888c:	4603      	mov	r3, r0
 800888e:	4293      	cmp	r3, r2
 8008890:	d100      	bne.n	8008894 <memset+0xa>
 8008892:	4770      	bx	lr
 8008894:	f803 1b01 	strb.w	r1, [r3], #1
 8008898:	e7f9      	b.n	800888e <memset+0x4>
	...

0800889c <_localeconv_r>:
 800889c:	4800      	ldr	r0, [pc, #0]	@ (80088a0 <_localeconv_r+0x4>)
 800889e:	4770      	bx	lr
 80088a0:	240001fc 	.word	0x240001fc

080088a4 <_close_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d06      	ldr	r5, [pc, #24]	@ (80088c0 <_close_r+0x1c>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7f9 f838 	bl	8001924 <_close>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_close_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_close_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2400057c 	.word	0x2400057c

080088c4 <_lseek_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d07      	ldr	r5, [pc, #28]	@ (80088e4 <_lseek_r+0x20>)
 80088c8:	4604      	mov	r4, r0
 80088ca:	4608      	mov	r0, r1
 80088cc:	4611      	mov	r1, r2
 80088ce:	2200      	movs	r2, #0
 80088d0:	602a      	str	r2, [r5, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	f7f9 f84d 	bl	8001972 <_lseek>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	d102      	bne.n	80088e2 <_lseek_r+0x1e>
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	b103      	cbz	r3, 80088e2 <_lseek_r+0x1e>
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	bd38      	pop	{r3, r4, r5, pc}
 80088e4:	2400057c 	.word	0x2400057c

080088e8 <_read_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4d07      	ldr	r5, [pc, #28]	@ (8008908 <_read_r+0x20>)
 80088ec:	4604      	mov	r4, r0
 80088ee:	4608      	mov	r0, r1
 80088f0:	4611      	mov	r1, r2
 80088f2:	2200      	movs	r2, #0
 80088f4:	602a      	str	r2, [r5, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f7f8 fff7 	bl	80018ea <_read>
 80088fc:	1c43      	adds	r3, r0, #1
 80088fe:	d102      	bne.n	8008906 <_read_r+0x1e>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	b103      	cbz	r3, 8008906 <_read_r+0x1e>
 8008904:	6023      	str	r3, [r4, #0]
 8008906:	bd38      	pop	{r3, r4, r5, pc}
 8008908:	2400057c 	.word	0x2400057c

0800890c <_write_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	@ (800892c <_write_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f8 fb44 	bl	8000fa8 <_write>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_write_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_write_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	2400057c 	.word	0x2400057c

08008930 <__errno>:
 8008930:	4b01      	ldr	r3, [pc, #4]	@ (8008938 <__errno+0x8>)
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	240000bc 	.word	0x240000bc

0800893c <__libc_init_array>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4d0d      	ldr	r5, [pc, #52]	@ (8008974 <__libc_init_array+0x38>)
 8008940:	4c0d      	ldr	r4, [pc, #52]	@ (8008978 <__libc_init_array+0x3c>)
 8008942:	1b64      	subs	r4, r4, r5
 8008944:	10a4      	asrs	r4, r4, #2
 8008946:	2600      	movs	r6, #0
 8008948:	42a6      	cmp	r6, r4
 800894a:	d109      	bne.n	8008960 <__libc_init_array+0x24>
 800894c:	4d0b      	ldr	r5, [pc, #44]	@ (800897c <__libc_init_array+0x40>)
 800894e:	4c0c      	ldr	r4, [pc, #48]	@ (8008980 <__libc_init_array+0x44>)
 8008950:	f003 fbd8 	bl	800c104 <_init>
 8008954:	1b64      	subs	r4, r4, r5
 8008956:	10a4      	asrs	r4, r4, #2
 8008958:	2600      	movs	r6, #0
 800895a:	42a6      	cmp	r6, r4
 800895c:	d105      	bne.n	800896a <__libc_init_array+0x2e>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	f855 3b04 	ldr.w	r3, [r5], #4
 8008964:	4798      	blx	r3
 8008966:	3601      	adds	r6, #1
 8008968:	e7ee      	b.n	8008948 <__libc_init_array+0xc>
 800896a:	f855 3b04 	ldr.w	r3, [r5], #4
 800896e:	4798      	blx	r3
 8008970:	3601      	adds	r6, #1
 8008972:	e7f2      	b.n	800895a <__libc_init_array+0x1e>
 8008974:	0800c5d8 	.word	0x0800c5d8
 8008978:	0800c5d8 	.word	0x0800c5d8
 800897c:	0800c5d8 	.word	0x0800c5d8
 8008980:	0800c5dc 	.word	0x0800c5dc

08008984 <__retarget_lock_init_recursive>:
 8008984:	4770      	bx	lr

08008986 <__retarget_lock_acquire_recursive>:
 8008986:	4770      	bx	lr

08008988 <__retarget_lock_release_recursive>:
 8008988:	4770      	bx	lr
	...

0800898c <nanf>:
 800898c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008994 <nanf+0x8>
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	7fc00000 	.word	0x7fc00000

08008998 <quorem>:
 8008998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	6903      	ldr	r3, [r0, #16]
 800899e:	690c      	ldr	r4, [r1, #16]
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	4607      	mov	r7, r0
 80089a4:	db7e      	blt.n	8008aa4 <quorem+0x10c>
 80089a6:	3c01      	subs	r4, #1
 80089a8:	f101 0814 	add.w	r8, r1, #20
 80089ac:	00a3      	lsls	r3, r4, #2
 80089ae:	f100 0514 	add.w	r5, r0, #20
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089b8:	9301      	str	r3, [sp, #4]
 80089ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089c2:	3301      	adds	r3, #1
 80089c4:	429a      	cmp	r2, r3
 80089c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80089ce:	d32e      	bcc.n	8008a2e <quorem+0x96>
 80089d0:	f04f 0a00 	mov.w	sl, #0
 80089d4:	46c4      	mov	ip, r8
 80089d6:	46ae      	mov	lr, r5
 80089d8:	46d3      	mov	fp, sl
 80089da:	f85c 3b04 	ldr.w	r3, [ip], #4
 80089de:	b298      	uxth	r0, r3
 80089e0:	fb06 a000 	mla	r0, r6, r0, sl
 80089e4:	0c02      	lsrs	r2, r0, #16
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	fb06 2303 	mla	r3, r6, r3, r2
 80089ec:	f8de 2000 	ldr.w	r2, [lr]
 80089f0:	b280      	uxth	r0, r0
 80089f2:	b292      	uxth	r2, r2
 80089f4:	1a12      	subs	r2, r2, r0
 80089f6:	445a      	add	r2, fp
 80089f8:	f8de 0000 	ldr.w	r0, [lr]
 80089fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a0a:	b292      	uxth	r2, r2
 8008a0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a10:	45e1      	cmp	r9, ip
 8008a12:	f84e 2b04 	str.w	r2, [lr], #4
 8008a16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a1a:	d2de      	bcs.n	80089da <quorem+0x42>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	58eb      	ldr	r3, [r5, r3]
 8008a20:	b92b      	cbnz	r3, 8008a2e <quorem+0x96>
 8008a22:	9b01      	ldr	r3, [sp, #4]
 8008a24:	3b04      	subs	r3, #4
 8008a26:	429d      	cmp	r5, r3
 8008a28:	461a      	mov	r2, r3
 8008a2a:	d32f      	bcc.n	8008a8c <quorem+0xf4>
 8008a2c:	613c      	str	r4, [r7, #16]
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f001 f954 	bl	8009cdc <__mcmp>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	db25      	blt.n	8008a84 <quorem+0xec>
 8008a38:	4629      	mov	r1, r5
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a40:	f8d1 c000 	ldr.w	ip, [r1]
 8008a44:	fa1f fe82 	uxth.w	lr, r2
 8008a48:	fa1f f38c 	uxth.w	r3, ip
 8008a4c:	eba3 030e 	sub.w	r3, r3, lr
 8008a50:	4403      	add	r3, r0
 8008a52:	0c12      	lsrs	r2, r2, #16
 8008a54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008a58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a62:	45c1      	cmp	r9, r8
 8008a64:	f841 3b04 	str.w	r3, [r1], #4
 8008a68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008a6c:	d2e6      	bcs.n	8008a3c <quorem+0xa4>
 8008a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a76:	b922      	cbnz	r2, 8008a82 <quorem+0xea>
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	d30b      	bcc.n	8008a98 <quorem+0x100>
 8008a80:	613c      	str	r4, [r7, #16]
 8008a82:	3601      	adds	r6, #1
 8008a84:	4630      	mov	r0, r6
 8008a86:	b003      	add	sp, #12
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	3b04      	subs	r3, #4
 8008a90:	2a00      	cmp	r2, #0
 8008a92:	d1cb      	bne.n	8008a2c <quorem+0x94>
 8008a94:	3c01      	subs	r4, #1
 8008a96:	e7c6      	b.n	8008a26 <quorem+0x8e>
 8008a98:	6812      	ldr	r2, [r2, #0]
 8008a9a:	3b04      	subs	r3, #4
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d1ef      	bne.n	8008a80 <quorem+0xe8>
 8008aa0:	3c01      	subs	r4, #1
 8008aa2:	e7ea      	b.n	8008a7a <quorem+0xe2>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e7ee      	b.n	8008a86 <quorem+0xee>

08008aa8 <_dtoa_r>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ed2d 8b02 	vpush	{d8}
 8008ab0:	69c7      	ldr	r7, [r0, #28]
 8008ab2:	b091      	sub	sp, #68	@ 0x44
 8008ab4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008ab8:	ec55 4b10 	vmov	r4, r5, d0
 8008abc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008abe:	9107      	str	r1, [sp, #28]
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ac4:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ac6:	b97f      	cbnz	r7, 8008ae8 <_dtoa_r+0x40>
 8008ac8:	2010      	movs	r0, #16
 8008aca:	f000 fd8d 	bl	80095e8 <malloc>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	f8c9 001c 	str.w	r0, [r9, #28]
 8008ad4:	b920      	cbnz	r0, 8008ae0 <_dtoa_r+0x38>
 8008ad6:	4ba0      	ldr	r3, [pc, #640]	@ (8008d58 <_dtoa_r+0x2b0>)
 8008ad8:	21ef      	movs	r1, #239	@ 0xef
 8008ada:	48a0      	ldr	r0, [pc, #640]	@ (8008d5c <_dtoa_r+0x2b4>)
 8008adc:	f002 fb74 	bl	800b1c8 <__assert_func>
 8008ae0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ae4:	6007      	str	r7, [r0, #0]
 8008ae6:	60c7      	str	r7, [r0, #12]
 8008ae8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008aec:	6819      	ldr	r1, [r3, #0]
 8008aee:	b159      	cbz	r1, 8008b08 <_dtoa_r+0x60>
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	604a      	str	r2, [r1, #4]
 8008af4:	2301      	movs	r3, #1
 8008af6:	4093      	lsls	r3, r2
 8008af8:	608b      	str	r3, [r1, #8]
 8008afa:	4648      	mov	r0, r9
 8008afc:	f000 fe6a 	bl	80097d4 <_Bfree>
 8008b00:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b04:	2200      	movs	r2, #0
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	1e2b      	subs	r3, r5, #0
 8008b0a:	bfbb      	ittet	lt
 8008b0c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b10:	9303      	strlt	r3, [sp, #12]
 8008b12:	2300      	movge	r3, #0
 8008b14:	2201      	movlt	r2, #1
 8008b16:	bfac      	ite	ge
 8008b18:	6033      	strge	r3, [r6, #0]
 8008b1a:	6032      	strlt	r2, [r6, #0]
 8008b1c:	4b90      	ldr	r3, [pc, #576]	@ (8008d60 <_dtoa_r+0x2b8>)
 8008b1e:	9e03      	ldr	r6, [sp, #12]
 8008b20:	43b3      	bics	r3, r6
 8008b22:	d110      	bne.n	8008b46 <_dtoa_r+0x9e>
 8008b24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b26:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008b30:	4323      	orrs	r3, r4
 8008b32:	f000 84de 	beq.w	80094f2 <_dtoa_r+0xa4a>
 8008b36:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b38:	4f8a      	ldr	r7, [pc, #552]	@ (8008d64 <_dtoa_r+0x2bc>)
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f000 84e0 	beq.w	8009500 <_dtoa_r+0xa58>
 8008b40:	1cfb      	adds	r3, r7, #3
 8008b42:	f000 bcdb 	b.w	80094fc <_dtoa_r+0xa54>
 8008b46:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008b4a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b52:	d10a      	bne.n	8008b6a <_dtoa_r+0xc2>
 8008b54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b56:	2301      	movs	r3, #1
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b5c:	b113      	cbz	r3, 8008b64 <_dtoa_r+0xbc>
 8008b5e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008b60:	4b81      	ldr	r3, [pc, #516]	@ (8008d68 <_dtoa_r+0x2c0>)
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	4f81      	ldr	r7, [pc, #516]	@ (8008d6c <_dtoa_r+0x2c4>)
 8008b66:	f000 bccb 	b.w	8009500 <_dtoa_r+0xa58>
 8008b6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8008b6c:	a90f      	add	r1, sp, #60	@ 0x3c
 8008b6e:	4648      	mov	r0, r9
 8008b70:	eeb0 0b48 	vmov.f64	d0, d8
 8008b74:	f001 f9d2 	bl	8009f1c <__d2b>
 8008b78:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008b7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b7e:	9001      	str	r0, [sp, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d045      	beq.n	8008c10 <_dtoa_r+0x168>
 8008b84:	eeb0 7b48 	vmov.f64	d7, d8
 8008b88:	ee18 1a90 	vmov	r1, s17
 8008b8c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008b90:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008b94:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008b98:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008b9c:	2500      	movs	r5, #0
 8008b9e:	ee07 1a90 	vmov	s15, r1
 8008ba2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008ba6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008d40 <_dtoa_r+0x298>
 8008baa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bae:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008d48 <_dtoa_r+0x2a0>
 8008bb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008bb6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008d50 <_dtoa_r+0x2a8>
 8008bba:	ee07 3a90 	vmov	s15, r3
 8008bbe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008bc2:	eeb0 7b46 	vmov.f64	d7, d6
 8008bc6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008bca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008bce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	ee16 8a90 	vmov	r8, s13
 8008bda:	d508      	bpl.n	8008bee <_dtoa_r+0x146>
 8008bdc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008be0:	eeb4 6b47 	vcmp.f64	d6, d7
 8008be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be8:	bf18      	it	ne
 8008bea:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008bee:	f1b8 0f16 	cmp.w	r8, #22
 8008bf2:	d82b      	bhi.n	8008c4c <_dtoa_r+0x1a4>
 8008bf4:	495e      	ldr	r1, [pc, #376]	@ (8008d70 <_dtoa_r+0x2c8>)
 8008bf6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008bfa:	ed91 7b00 	vldr	d7, [r1]
 8008bfe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c06:	d501      	bpl.n	8008c0c <_dtoa_r+0x164>
 8008c08:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c0c:	2100      	movs	r1, #0
 8008c0e:	e01e      	b.n	8008c4e <_dtoa_r+0x1a6>
 8008c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c12:	4413      	add	r3, r2
 8008c14:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008c18:	2920      	cmp	r1, #32
 8008c1a:	bfc1      	itttt	gt
 8008c1c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008c20:	408e      	lslgt	r6, r1
 8008c22:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008c26:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008c2a:	bfd6      	itet	le
 8008c2c:	f1c1 0120 	rsble	r1, r1, #32
 8008c30:	4331      	orrgt	r1, r6
 8008c32:	fa04 f101 	lslle.w	r1, r4, r1
 8008c36:	ee07 1a90 	vmov	s15, r1
 8008c3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	ee17 1a90 	vmov	r1, s15
 8008c44:	2501      	movs	r5, #1
 8008c46:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008c4a:	e7a8      	b.n	8008b9e <_dtoa_r+0xf6>
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	1e53      	subs	r3, r2, #1
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	bf45      	ittet	mi
 8008c56:	f1c2 0301 	rsbmi	r3, r2, #1
 8008c5a:	9305      	strmi	r3, [sp, #20]
 8008c5c:	2300      	movpl	r3, #0
 8008c5e:	2300      	movmi	r3, #0
 8008c60:	bf4c      	ite	mi
 8008c62:	9306      	strmi	r3, [sp, #24]
 8008c64:	9305      	strpl	r3, [sp, #20]
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	910c      	str	r1, [sp, #48]	@ 0x30
 8008c6c:	db18      	blt.n	8008ca0 <_dtoa_r+0x1f8>
 8008c6e:	9b06      	ldr	r3, [sp, #24]
 8008c70:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008c74:	4443      	add	r3, r8
 8008c76:	9306      	str	r3, [sp, #24]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	9a07      	ldr	r2, [sp, #28]
 8008c7c:	2a09      	cmp	r2, #9
 8008c7e:	d849      	bhi.n	8008d14 <_dtoa_r+0x26c>
 8008c80:	2a05      	cmp	r2, #5
 8008c82:	bfc4      	itt	gt
 8008c84:	3a04      	subgt	r2, #4
 8008c86:	9207      	strgt	r2, [sp, #28]
 8008c88:	9a07      	ldr	r2, [sp, #28]
 8008c8a:	f1a2 0202 	sub.w	r2, r2, #2
 8008c8e:	bfcc      	ite	gt
 8008c90:	2400      	movgt	r4, #0
 8008c92:	2401      	movle	r4, #1
 8008c94:	2a03      	cmp	r2, #3
 8008c96:	d848      	bhi.n	8008d2a <_dtoa_r+0x282>
 8008c98:	e8df f002 	tbb	[pc, r2]
 8008c9c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008ca0:	9b05      	ldr	r3, [sp, #20]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	eba3 0308 	sub.w	r3, r3, r8
 8008ca8:	9305      	str	r3, [sp, #20]
 8008caa:	920a      	str	r2, [sp, #40]	@ 0x28
 8008cac:	f1c8 0300 	rsb	r3, r8, #0
 8008cb0:	e7e3      	b.n	8008c7a <_dtoa_r+0x1d2>
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	9208      	str	r2, [sp, #32]
 8008cb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cb8:	2a00      	cmp	r2, #0
 8008cba:	dc39      	bgt.n	8008d30 <_dtoa_r+0x288>
 8008cbc:	f04f 0b01 	mov.w	fp, #1
 8008cc0:	46da      	mov	sl, fp
 8008cc2:	465a      	mov	r2, fp
 8008cc4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008cc8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008ccc:	2100      	movs	r1, #0
 8008cce:	2004      	movs	r0, #4
 8008cd0:	f100 0614 	add.w	r6, r0, #20
 8008cd4:	4296      	cmp	r6, r2
 8008cd6:	d930      	bls.n	8008d3a <_dtoa_r+0x292>
 8008cd8:	6079      	str	r1, [r7, #4]
 8008cda:	4648      	mov	r0, r9
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	f000 fd39 	bl	8009754 <_Balloc>
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	4607      	mov	r7, r0
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d146      	bne.n	8008d78 <_dtoa_r+0x2d0>
 8008cea:	4b22      	ldr	r3, [pc, #136]	@ (8008d74 <_dtoa_r+0x2cc>)
 8008cec:	4602      	mov	r2, r0
 8008cee:	f240 11af 	movw	r1, #431	@ 0x1af
 8008cf2:	e6f2      	b.n	8008ada <_dtoa_r+0x32>
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	e7dd      	b.n	8008cb4 <_dtoa_r+0x20c>
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	9208      	str	r2, [sp, #32]
 8008cfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cfe:	eb08 0b02 	add.w	fp, r8, r2
 8008d02:	f10b 0a01 	add.w	sl, fp, #1
 8008d06:	4652      	mov	r2, sl
 8008d08:	2a01      	cmp	r2, #1
 8008d0a:	bfb8      	it	lt
 8008d0c:	2201      	movlt	r2, #1
 8008d0e:	e7db      	b.n	8008cc8 <_dtoa_r+0x220>
 8008d10:	2201      	movs	r2, #1
 8008d12:	e7f2      	b.n	8008cfa <_dtoa_r+0x252>
 8008d14:	2401      	movs	r4, #1
 8008d16:	2200      	movs	r2, #0
 8008d18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008d1c:	f04f 3bff 	mov.w	fp, #4294967295
 8008d20:	2100      	movs	r1, #0
 8008d22:	46da      	mov	sl, fp
 8008d24:	2212      	movs	r2, #18
 8008d26:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d28:	e7ce      	b.n	8008cc8 <_dtoa_r+0x220>
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	9208      	str	r2, [sp, #32]
 8008d2e:	e7f5      	b.n	8008d1c <_dtoa_r+0x274>
 8008d30:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008d34:	46da      	mov	sl, fp
 8008d36:	465a      	mov	r2, fp
 8008d38:	e7c6      	b.n	8008cc8 <_dtoa_r+0x220>
 8008d3a:	3101      	adds	r1, #1
 8008d3c:	0040      	lsls	r0, r0, #1
 8008d3e:	e7c7      	b.n	8008cd0 <_dtoa_r+0x228>
 8008d40:	636f4361 	.word	0x636f4361
 8008d44:	3fd287a7 	.word	0x3fd287a7
 8008d48:	8b60c8b3 	.word	0x8b60c8b3
 8008d4c:	3fc68a28 	.word	0x3fc68a28
 8008d50:	509f79fb 	.word	0x509f79fb
 8008d54:	3fd34413 	.word	0x3fd34413
 8008d58:	0800c1aa 	.word	0x0800c1aa
 8008d5c:	0800c1c1 	.word	0x0800c1c1
 8008d60:	7ff00000 	.word	0x7ff00000
 8008d64:	0800c1a6 	.word	0x0800c1a6
 8008d68:	0800c175 	.word	0x0800c175
 8008d6c:	0800c174 	.word	0x0800c174
 8008d70:	0800c2b8 	.word	0x0800c2b8
 8008d74:	0800c219 	.word	0x0800c219
 8008d78:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008d7c:	f1ba 0f0e 	cmp.w	sl, #14
 8008d80:	6010      	str	r0, [r2, #0]
 8008d82:	d86f      	bhi.n	8008e64 <_dtoa_r+0x3bc>
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	d06d      	beq.n	8008e64 <_dtoa_r+0x3bc>
 8008d88:	f1b8 0f00 	cmp.w	r8, #0
 8008d8c:	f340 80c2 	ble.w	8008f14 <_dtoa_r+0x46c>
 8008d90:	4aca      	ldr	r2, [pc, #808]	@ (80090bc <_dtoa_r+0x614>)
 8008d92:	f008 010f 	and.w	r1, r8, #15
 8008d96:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008d9a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008d9e:	ed92 7b00 	vldr	d7, [r2]
 8008da2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008da6:	f000 80a9 	beq.w	8008efc <_dtoa_r+0x454>
 8008daa:	4ac5      	ldr	r2, [pc, #788]	@ (80090c0 <_dtoa_r+0x618>)
 8008dac:	ed92 6b08 	vldr	d6, [r2, #32]
 8008db0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008db4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008db8:	f001 010f 	and.w	r1, r1, #15
 8008dbc:	2203      	movs	r2, #3
 8008dbe:	48c0      	ldr	r0, [pc, #768]	@ (80090c0 <_dtoa_r+0x618>)
 8008dc0:	2900      	cmp	r1, #0
 8008dc2:	f040 809d 	bne.w	8008f00 <_dtoa_r+0x458>
 8008dc6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008dca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008dce:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008dd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dd8:	2900      	cmp	r1, #0
 8008dda:	f000 80c1 	beq.w	8008f60 <_dtoa_r+0x4b8>
 8008dde:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008de2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dea:	f140 80b9 	bpl.w	8008f60 <_dtoa_r+0x4b8>
 8008dee:	f1ba 0f00 	cmp.w	sl, #0
 8008df2:	f000 80b5 	beq.w	8008f60 <_dtoa_r+0x4b8>
 8008df6:	f1bb 0f00 	cmp.w	fp, #0
 8008dfa:	dd31      	ble.n	8008e60 <_dtoa_r+0x3b8>
 8008dfc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008e00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e08:	f108 31ff 	add.w	r1, r8, #4294967295
 8008e0c:	9104      	str	r1, [sp, #16]
 8008e0e:	3201      	adds	r2, #1
 8008e10:	465c      	mov	r4, fp
 8008e12:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008e16:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008e1a:	ee07 2a90 	vmov	s15, r2
 8008e1e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e22:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008e26:	ee15 2a90 	vmov	r2, s11
 8008e2a:	ec51 0b15 	vmov	r0, r1, d5
 8008e2e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008e32:	2c00      	cmp	r4, #0
 8008e34:	f040 8098 	bne.w	8008f68 <_dtoa_r+0x4c0>
 8008e38:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008e3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008e40:	ec41 0b17 	vmov	d7, r0, r1
 8008e44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4c:	f300 8261 	bgt.w	8009312 <_dtoa_r+0x86a>
 8008e50:	eeb1 7b47 	vneg.f64	d7, d7
 8008e54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5c:	f100 80f5 	bmi.w	800904a <_dtoa_r+0x5a2>
 8008e60:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	f2c0 812c 	blt.w	80090c4 <_dtoa_r+0x61c>
 8008e6c:	f1b8 0f0e 	cmp.w	r8, #14
 8008e70:	f300 8128 	bgt.w	80090c4 <_dtoa_r+0x61c>
 8008e74:	4b91      	ldr	r3, [pc, #580]	@ (80090bc <_dtoa_r+0x614>)
 8008e76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008e7a:	ed93 6b00 	vldr	d6, [r3]
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	da03      	bge.n	8008e8c <_dtoa_r+0x3e4>
 8008e84:	f1ba 0f00 	cmp.w	sl, #0
 8008e88:	f340 80d2 	ble.w	8009030 <_dtoa_r+0x588>
 8008e8c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e94:	463e      	mov	r6, r7
 8008e96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008e9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008e9e:	ee15 3a10 	vmov	r3, s10
 8008ea2:	3330      	adds	r3, #48	@ 0x30
 8008ea4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ea8:	1bf3      	subs	r3, r6, r7
 8008eaa:	459a      	cmp	sl, r3
 8008eac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008eb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008eb4:	f040 80f8 	bne.w	80090a8 <_dtoa_r+0x600>
 8008eb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008ebc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec4:	f300 80dd 	bgt.w	8009082 <_dtoa_r+0x5da>
 8008ec8:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed0:	d104      	bne.n	8008edc <_dtoa_r+0x434>
 8008ed2:	ee15 3a10 	vmov	r3, s10
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	f100 80d3 	bmi.w	8009082 <_dtoa_r+0x5da>
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f000 fc78 	bl	80097d4 <_Bfree>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ee8:	7033      	strb	r3, [r6, #0]
 8008eea:	f108 0301 	add.w	r3, r8, #1
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 8304 	beq.w	8009500 <_dtoa_r+0xa58>
 8008ef8:	601e      	str	r6, [r3, #0]
 8008efa:	e301      	b.n	8009500 <_dtoa_r+0xa58>
 8008efc:	2202      	movs	r2, #2
 8008efe:	e75e      	b.n	8008dbe <_dtoa_r+0x316>
 8008f00:	07cc      	lsls	r4, r1, #31
 8008f02:	d504      	bpl.n	8008f0e <_dtoa_r+0x466>
 8008f04:	ed90 6b00 	vldr	d6, [r0]
 8008f08:	3201      	adds	r2, #1
 8008f0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f0e:	1049      	asrs	r1, r1, #1
 8008f10:	3008      	adds	r0, #8
 8008f12:	e755      	b.n	8008dc0 <_dtoa_r+0x318>
 8008f14:	d022      	beq.n	8008f5c <_dtoa_r+0x4b4>
 8008f16:	f1c8 0100 	rsb	r1, r8, #0
 8008f1a:	4a68      	ldr	r2, [pc, #416]	@ (80090bc <_dtoa_r+0x614>)
 8008f1c:	f001 000f 	and.w	r0, r1, #15
 8008f20:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008f24:	ed92 7b00 	vldr	d7, [r2]
 8008f28:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f30:	4863      	ldr	r0, [pc, #396]	@ (80090c0 <_dtoa_r+0x618>)
 8008f32:	1109      	asrs	r1, r1, #4
 8008f34:	2400      	movs	r4, #0
 8008f36:	2202      	movs	r2, #2
 8008f38:	b929      	cbnz	r1, 8008f46 <_dtoa_r+0x49e>
 8008f3a:	2c00      	cmp	r4, #0
 8008f3c:	f43f af49 	beq.w	8008dd2 <_dtoa_r+0x32a>
 8008f40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f44:	e745      	b.n	8008dd2 <_dtoa_r+0x32a>
 8008f46:	07ce      	lsls	r6, r1, #31
 8008f48:	d505      	bpl.n	8008f56 <_dtoa_r+0x4ae>
 8008f4a:	ed90 6b00 	vldr	d6, [r0]
 8008f4e:	3201      	adds	r2, #1
 8008f50:	2401      	movs	r4, #1
 8008f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f56:	1049      	asrs	r1, r1, #1
 8008f58:	3008      	adds	r0, #8
 8008f5a:	e7ed      	b.n	8008f38 <_dtoa_r+0x490>
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	e738      	b.n	8008dd2 <_dtoa_r+0x32a>
 8008f60:	f8cd 8010 	str.w	r8, [sp, #16]
 8008f64:	4654      	mov	r4, sl
 8008f66:	e754      	b.n	8008e12 <_dtoa_r+0x36a>
 8008f68:	4a54      	ldr	r2, [pc, #336]	@ (80090bc <_dtoa_r+0x614>)
 8008f6a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008f6e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008f72:	9a08      	ldr	r2, [sp, #32]
 8008f74:	ec41 0b17 	vmov	d7, r0, r1
 8008f78:	443c      	add	r4, r7
 8008f7a:	b34a      	cbz	r2, 8008fd0 <_dtoa_r+0x528>
 8008f7c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008f80:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008f84:	463e      	mov	r6, r7
 8008f86:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008f8a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008f8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008f92:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008f96:	ee14 2a90 	vmov	r2, s9
 8008f9a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008f9e:	3230      	adds	r2, #48	@ 0x30
 8008fa0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008fa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	f806 2b01 	strb.w	r2, [r6], #1
 8008fb0:	d438      	bmi.n	8009024 <_dtoa_r+0x57c>
 8008fb2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008fb6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbe:	d462      	bmi.n	8009086 <_dtoa_r+0x5de>
 8008fc0:	42a6      	cmp	r6, r4
 8008fc2:	f43f af4d 	beq.w	8008e60 <_dtoa_r+0x3b8>
 8008fc6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008fca:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008fce:	e7e0      	b.n	8008f92 <_dtoa_r+0x4ea>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	463e      	mov	r6, r7
 8008fd4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008fd8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008fdc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008fe0:	ee14 2a90 	vmov	r2, s9
 8008fe4:	3230      	adds	r2, #48	@ 0x30
 8008fe6:	f806 2b01 	strb.w	r2, [r6], #1
 8008fea:	42a6      	cmp	r6, r4
 8008fec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008ff0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ff4:	d119      	bne.n	800902a <_dtoa_r+0x582>
 8008ff6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008ffa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008ffe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009006:	dc3e      	bgt.n	8009086 <_dtoa_r+0x5de>
 8009008:	ee35 5b47 	vsub.f64	d5, d5, d7
 800900c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009014:	f57f af24 	bpl.w	8008e60 <_dtoa_r+0x3b8>
 8009018:	460e      	mov	r6, r1
 800901a:	3901      	subs	r1, #1
 800901c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009020:	2b30      	cmp	r3, #48	@ 0x30
 8009022:	d0f9      	beq.n	8009018 <_dtoa_r+0x570>
 8009024:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009028:	e758      	b.n	8008edc <_dtoa_r+0x434>
 800902a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800902e:	e7d5      	b.n	8008fdc <_dtoa_r+0x534>
 8009030:	d10b      	bne.n	800904a <_dtoa_r+0x5a2>
 8009032:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009036:	ee26 6b07 	vmul.f64	d6, d6, d7
 800903a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800903e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009046:	f2c0 8161 	blt.w	800930c <_dtoa_r+0x864>
 800904a:	2400      	movs	r4, #0
 800904c:	4625      	mov	r5, r4
 800904e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009050:	43db      	mvns	r3, r3
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	463e      	mov	r6, r7
 8009056:	f04f 0800 	mov.w	r8, #0
 800905a:	4621      	mov	r1, r4
 800905c:	4648      	mov	r0, r9
 800905e:	f000 fbb9 	bl	80097d4 <_Bfree>
 8009062:	2d00      	cmp	r5, #0
 8009064:	d0de      	beq.n	8009024 <_dtoa_r+0x57c>
 8009066:	f1b8 0f00 	cmp.w	r8, #0
 800906a:	d005      	beq.n	8009078 <_dtoa_r+0x5d0>
 800906c:	45a8      	cmp	r8, r5
 800906e:	d003      	beq.n	8009078 <_dtoa_r+0x5d0>
 8009070:	4641      	mov	r1, r8
 8009072:	4648      	mov	r0, r9
 8009074:	f000 fbae 	bl	80097d4 <_Bfree>
 8009078:	4629      	mov	r1, r5
 800907a:	4648      	mov	r0, r9
 800907c:	f000 fbaa 	bl	80097d4 <_Bfree>
 8009080:	e7d0      	b.n	8009024 <_dtoa_r+0x57c>
 8009082:	f8cd 8010 	str.w	r8, [sp, #16]
 8009086:	4633      	mov	r3, r6
 8009088:	461e      	mov	r6, r3
 800908a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800908e:	2a39      	cmp	r2, #57	@ 0x39
 8009090:	d106      	bne.n	80090a0 <_dtoa_r+0x5f8>
 8009092:	429f      	cmp	r7, r3
 8009094:	d1f8      	bne.n	8009088 <_dtoa_r+0x5e0>
 8009096:	9a04      	ldr	r2, [sp, #16]
 8009098:	3201      	adds	r2, #1
 800909a:	9204      	str	r2, [sp, #16]
 800909c:	2230      	movs	r2, #48	@ 0x30
 800909e:	703a      	strb	r2, [r7, #0]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	3201      	adds	r2, #1
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e7bd      	b.n	8009024 <_dtoa_r+0x57c>
 80090a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80090ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	f47f aeef 	bne.w	8008e96 <_dtoa_r+0x3ee>
 80090b8:	e710      	b.n	8008edc <_dtoa_r+0x434>
 80090ba:	bf00      	nop
 80090bc:	0800c2b8 	.word	0x0800c2b8
 80090c0:	0800c290 	.word	0x0800c290
 80090c4:	9908      	ldr	r1, [sp, #32]
 80090c6:	2900      	cmp	r1, #0
 80090c8:	f000 80e3 	beq.w	8009292 <_dtoa_r+0x7ea>
 80090cc:	9907      	ldr	r1, [sp, #28]
 80090ce:	2901      	cmp	r1, #1
 80090d0:	f300 80c8 	bgt.w	8009264 <_dtoa_r+0x7bc>
 80090d4:	2d00      	cmp	r5, #0
 80090d6:	f000 80c1 	beq.w	800925c <_dtoa_r+0x7b4>
 80090da:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090de:	9e05      	ldr	r6, [sp, #20]
 80090e0:	461c      	mov	r4, r3
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9b05      	ldr	r3, [sp, #20]
 80090e6:	4413      	add	r3, r2
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	9b06      	ldr	r3, [sp, #24]
 80090ec:	2101      	movs	r1, #1
 80090ee:	4413      	add	r3, r2
 80090f0:	4648      	mov	r0, r9
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	f000 fc6c 	bl	80099d0 <__i2b>
 80090f8:	9b04      	ldr	r3, [sp, #16]
 80090fa:	4605      	mov	r5, r0
 80090fc:	b166      	cbz	r6, 8009118 <_dtoa_r+0x670>
 80090fe:	9a06      	ldr	r2, [sp, #24]
 8009100:	2a00      	cmp	r2, #0
 8009102:	dd09      	ble.n	8009118 <_dtoa_r+0x670>
 8009104:	42b2      	cmp	r2, r6
 8009106:	9905      	ldr	r1, [sp, #20]
 8009108:	bfa8      	it	ge
 800910a:	4632      	movge	r2, r6
 800910c:	1a89      	subs	r1, r1, r2
 800910e:	9105      	str	r1, [sp, #20]
 8009110:	9906      	ldr	r1, [sp, #24]
 8009112:	1ab6      	subs	r6, r6, r2
 8009114:	1a8a      	subs	r2, r1, r2
 8009116:	9206      	str	r2, [sp, #24]
 8009118:	b1fb      	cbz	r3, 800915a <_dtoa_r+0x6b2>
 800911a:	9a08      	ldr	r2, [sp, #32]
 800911c:	2a00      	cmp	r2, #0
 800911e:	f000 80bc 	beq.w	800929a <_dtoa_r+0x7f2>
 8009122:	b19c      	cbz	r4, 800914c <_dtoa_r+0x6a4>
 8009124:	4629      	mov	r1, r5
 8009126:	4622      	mov	r2, r4
 8009128:	4648      	mov	r0, r9
 800912a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800912c:	f000 fd10 	bl	8009b50 <__pow5mult>
 8009130:	9a01      	ldr	r2, [sp, #4]
 8009132:	4601      	mov	r1, r0
 8009134:	4605      	mov	r5, r0
 8009136:	4648      	mov	r0, r9
 8009138:	f000 fc60 	bl	80099fc <__multiply>
 800913c:	9901      	ldr	r1, [sp, #4]
 800913e:	9004      	str	r0, [sp, #16]
 8009140:	4648      	mov	r0, r9
 8009142:	f000 fb47 	bl	80097d4 <_Bfree>
 8009146:	9a04      	ldr	r2, [sp, #16]
 8009148:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800914a:	9201      	str	r2, [sp, #4]
 800914c:	1b1a      	subs	r2, r3, r4
 800914e:	d004      	beq.n	800915a <_dtoa_r+0x6b2>
 8009150:	9901      	ldr	r1, [sp, #4]
 8009152:	4648      	mov	r0, r9
 8009154:	f000 fcfc 	bl	8009b50 <__pow5mult>
 8009158:	9001      	str	r0, [sp, #4]
 800915a:	2101      	movs	r1, #1
 800915c:	4648      	mov	r0, r9
 800915e:	f000 fc37 	bl	80099d0 <__i2b>
 8009162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009164:	4604      	mov	r4, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 81d0 	beq.w	800950c <_dtoa_r+0xa64>
 800916c:	461a      	mov	r2, r3
 800916e:	4601      	mov	r1, r0
 8009170:	4648      	mov	r0, r9
 8009172:	f000 fced 	bl	8009b50 <__pow5mult>
 8009176:	9b07      	ldr	r3, [sp, #28]
 8009178:	2b01      	cmp	r3, #1
 800917a:	4604      	mov	r4, r0
 800917c:	f300 8095 	bgt.w	80092aa <_dtoa_r+0x802>
 8009180:	9b02      	ldr	r3, [sp, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 808b 	bne.w	800929e <_dtoa_r+0x7f6>
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800918e:	2a00      	cmp	r2, #0
 8009190:	f040 8087 	bne.w	80092a2 <_dtoa_r+0x7fa>
 8009194:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009198:	0d12      	lsrs	r2, r2, #20
 800919a:	0512      	lsls	r2, r2, #20
 800919c:	2a00      	cmp	r2, #0
 800919e:	f000 8082 	beq.w	80092a6 <_dtoa_r+0x7fe>
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	3301      	adds	r3, #1
 80091a6:	9305      	str	r3, [sp, #20]
 80091a8:	9b06      	ldr	r3, [sp, #24]
 80091aa:	3301      	adds	r3, #1
 80091ac:	9306      	str	r3, [sp, #24]
 80091ae:	2301      	movs	r3, #1
 80091b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 81af 	beq.w	8009518 <_dtoa_r+0xa70>
 80091ba:	6922      	ldr	r2, [r4, #16]
 80091bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80091c0:	6910      	ldr	r0, [r2, #16]
 80091c2:	f000 fbb9 	bl	8009938 <__hi0bits>
 80091c6:	f1c0 0020 	rsb	r0, r0, #32
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	4418      	add	r0, r3
 80091ce:	f010 001f 	ands.w	r0, r0, #31
 80091d2:	d076      	beq.n	80092c2 <_dtoa_r+0x81a>
 80091d4:	f1c0 0220 	rsb	r2, r0, #32
 80091d8:	2a04      	cmp	r2, #4
 80091da:	dd69      	ble.n	80092b0 <_dtoa_r+0x808>
 80091dc:	9b05      	ldr	r3, [sp, #20]
 80091de:	f1c0 001c 	rsb	r0, r0, #28
 80091e2:	4403      	add	r3, r0
 80091e4:	9305      	str	r3, [sp, #20]
 80091e6:	9b06      	ldr	r3, [sp, #24]
 80091e8:	4406      	add	r6, r0
 80091ea:	4403      	add	r3, r0
 80091ec:	9306      	str	r3, [sp, #24]
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dd05      	ble.n	8009200 <_dtoa_r+0x758>
 80091f4:	9901      	ldr	r1, [sp, #4]
 80091f6:	461a      	mov	r2, r3
 80091f8:	4648      	mov	r0, r9
 80091fa:	f000 fd03 	bl	8009c04 <__lshift>
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	9b06      	ldr	r3, [sp, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	dd05      	ble.n	8009212 <_dtoa_r+0x76a>
 8009206:	4621      	mov	r1, r4
 8009208:	461a      	mov	r2, r3
 800920a:	4648      	mov	r0, r9
 800920c:	f000 fcfa 	bl	8009c04 <__lshift>
 8009210:	4604      	mov	r4, r0
 8009212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009214:	2b00      	cmp	r3, #0
 8009216:	d056      	beq.n	80092c6 <_dtoa_r+0x81e>
 8009218:	9801      	ldr	r0, [sp, #4]
 800921a:	4621      	mov	r1, r4
 800921c:	f000 fd5e 	bl	8009cdc <__mcmp>
 8009220:	2800      	cmp	r0, #0
 8009222:	da50      	bge.n	80092c6 <_dtoa_r+0x81e>
 8009224:	f108 33ff 	add.w	r3, r8, #4294967295
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	9901      	ldr	r1, [sp, #4]
 800922c:	2300      	movs	r3, #0
 800922e:	220a      	movs	r2, #10
 8009230:	4648      	mov	r0, r9
 8009232:	f000 faf1 	bl	8009818 <__multadd>
 8009236:	9b08      	ldr	r3, [sp, #32]
 8009238:	9001      	str	r0, [sp, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 816e 	beq.w	800951c <_dtoa_r+0xa74>
 8009240:	4629      	mov	r1, r5
 8009242:	2300      	movs	r3, #0
 8009244:	220a      	movs	r2, #10
 8009246:	4648      	mov	r0, r9
 8009248:	f000 fae6 	bl	8009818 <__multadd>
 800924c:	f1bb 0f00 	cmp.w	fp, #0
 8009250:	4605      	mov	r5, r0
 8009252:	dc64      	bgt.n	800931e <_dtoa_r+0x876>
 8009254:	9b07      	ldr	r3, [sp, #28]
 8009256:	2b02      	cmp	r3, #2
 8009258:	dc3e      	bgt.n	80092d8 <_dtoa_r+0x830>
 800925a:	e060      	b.n	800931e <_dtoa_r+0x876>
 800925c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800925e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009262:	e73c      	b.n	80090de <_dtoa_r+0x636>
 8009264:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009268:	42a3      	cmp	r3, r4
 800926a:	bfbf      	itttt	lt
 800926c:	1ae2      	sublt	r2, r4, r3
 800926e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009270:	189b      	addlt	r3, r3, r2
 8009272:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009274:	bfae      	itee	ge
 8009276:	1b1c      	subge	r4, r3, r4
 8009278:	4623      	movlt	r3, r4
 800927a:	2400      	movlt	r4, #0
 800927c:	f1ba 0f00 	cmp.w	sl, #0
 8009280:	bfb5      	itete	lt
 8009282:	9a05      	ldrlt	r2, [sp, #20]
 8009284:	9e05      	ldrge	r6, [sp, #20]
 8009286:	eba2 060a 	sublt.w	r6, r2, sl
 800928a:	4652      	movge	r2, sl
 800928c:	bfb8      	it	lt
 800928e:	2200      	movlt	r2, #0
 8009290:	e727      	b.n	80090e2 <_dtoa_r+0x63a>
 8009292:	9e05      	ldr	r6, [sp, #20]
 8009294:	9d08      	ldr	r5, [sp, #32]
 8009296:	461c      	mov	r4, r3
 8009298:	e730      	b.n	80090fc <_dtoa_r+0x654>
 800929a:	461a      	mov	r2, r3
 800929c:	e758      	b.n	8009150 <_dtoa_r+0x6a8>
 800929e:	2300      	movs	r3, #0
 80092a0:	e786      	b.n	80091b0 <_dtoa_r+0x708>
 80092a2:	9b02      	ldr	r3, [sp, #8]
 80092a4:	e784      	b.n	80091b0 <_dtoa_r+0x708>
 80092a6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80092a8:	e783      	b.n	80091b2 <_dtoa_r+0x70a>
 80092aa:	2300      	movs	r3, #0
 80092ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ae:	e784      	b.n	80091ba <_dtoa_r+0x712>
 80092b0:	d09d      	beq.n	80091ee <_dtoa_r+0x746>
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	321c      	adds	r2, #28
 80092b6:	4413      	add	r3, r2
 80092b8:	9305      	str	r3, [sp, #20]
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	4416      	add	r6, r2
 80092be:	4413      	add	r3, r2
 80092c0:	e794      	b.n	80091ec <_dtoa_r+0x744>
 80092c2:	4602      	mov	r2, r0
 80092c4:	e7f5      	b.n	80092b2 <_dtoa_r+0x80a>
 80092c6:	f1ba 0f00 	cmp.w	sl, #0
 80092ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80092ce:	46d3      	mov	fp, sl
 80092d0:	dc21      	bgt.n	8009316 <_dtoa_r+0x86e>
 80092d2:	9b07      	ldr	r3, [sp, #28]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	dd1e      	ble.n	8009316 <_dtoa_r+0x86e>
 80092d8:	f1bb 0f00 	cmp.w	fp, #0
 80092dc:	f47f aeb7 	bne.w	800904e <_dtoa_r+0x5a6>
 80092e0:	4621      	mov	r1, r4
 80092e2:	465b      	mov	r3, fp
 80092e4:	2205      	movs	r2, #5
 80092e6:	4648      	mov	r0, r9
 80092e8:	f000 fa96 	bl	8009818 <__multadd>
 80092ec:	4601      	mov	r1, r0
 80092ee:	4604      	mov	r4, r0
 80092f0:	9801      	ldr	r0, [sp, #4]
 80092f2:	f000 fcf3 	bl	8009cdc <__mcmp>
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f77f aea9 	ble.w	800904e <_dtoa_r+0x5a6>
 80092fc:	463e      	mov	r6, r7
 80092fe:	2331      	movs	r3, #49	@ 0x31
 8009300:	f806 3b01 	strb.w	r3, [r6], #1
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	3301      	adds	r3, #1
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	e6a4      	b.n	8009056 <_dtoa_r+0x5ae>
 800930c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009310:	4654      	mov	r4, sl
 8009312:	4625      	mov	r5, r4
 8009314:	e7f2      	b.n	80092fc <_dtoa_r+0x854>
 8009316:	9b08      	ldr	r3, [sp, #32]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f000 8103 	beq.w	8009524 <_dtoa_r+0xa7c>
 800931e:	2e00      	cmp	r6, #0
 8009320:	dd05      	ble.n	800932e <_dtoa_r+0x886>
 8009322:	4629      	mov	r1, r5
 8009324:	4632      	mov	r2, r6
 8009326:	4648      	mov	r0, r9
 8009328:	f000 fc6c 	bl	8009c04 <__lshift>
 800932c:	4605      	mov	r5, r0
 800932e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009330:	2b00      	cmp	r3, #0
 8009332:	d058      	beq.n	80093e6 <_dtoa_r+0x93e>
 8009334:	6869      	ldr	r1, [r5, #4]
 8009336:	4648      	mov	r0, r9
 8009338:	f000 fa0c 	bl	8009754 <_Balloc>
 800933c:	4606      	mov	r6, r0
 800933e:	b928      	cbnz	r0, 800934c <_dtoa_r+0x8a4>
 8009340:	4b82      	ldr	r3, [pc, #520]	@ (800954c <_dtoa_r+0xaa4>)
 8009342:	4602      	mov	r2, r0
 8009344:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009348:	f7ff bbc7 	b.w	8008ada <_dtoa_r+0x32>
 800934c:	692a      	ldr	r2, [r5, #16]
 800934e:	3202      	adds	r2, #2
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	f105 010c 	add.w	r1, r5, #12
 8009356:	300c      	adds	r0, #12
 8009358:	f001 ff1e 	bl	800b198 <memcpy>
 800935c:	2201      	movs	r2, #1
 800935e:	4631      	mov	r1, r6
 8009360:	4648      	mov	r0, r9
 8009362:	f000 fc4f 	bl	8009c04 <__lshift>
 8009366:	1c7b      	adds	r3, r7, #1
 8009368:	9305      	str	r3, [sp, #20]
 800936a:	eb07 030b 	add.w	r3, r7, fp
 800936e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009370:	9b02      	ldr	r3, [sp, #8]
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	46a8      	mov	r8, r5
 8009378:	9308      	str	r3, [sp, #32]
 800937a:	4605      	mov	r5, r0
 800937c:	9b05      	ldr	r3, [sp, #20]
 800937e:	9801      	ldr	r0, [sp, #4]
 8009380:	4621      	mov	r1, r4
 8009382:	f103 3bff 	add.w	fp, r3, #4294967295
 8009386:	f7ff fb07 	bl	8008998 <quorem>
 800938a:	4641      	mov	r1, r8
 800938c:	9002      	str	r0, [sp, #8]
 800938e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009392:	9801      	ldr	r0, [sp, #4]
 8009394:	f000 fca2 	bl	8009cdc <__mcmp>
 8009398:	462a      	mov	r2, r5
 800939a:	9006      	str	r0, [sp, #24]
 800939c:	4621      	mov	r1, r4
 800939e:	4648      	mov	r0, r9
 80093a0:	f000 fcb8 	bl	8009d14 <__mdiff>
 80093a4:	68c2      	ldr	r2, [r0, #12]
 80093a6:	4606      	mov	r6, r0
 80093a8:	b9fa      	cbnz	r2, 80093ea <_dtoa_r+0x942>
 80093aa:	4601      	mov	r1, r0
 80093ac:	9801      	ldr	r0, [sp, #4]
 80093ae:	f000 fc95 	bl	8009cdc <__mcmp>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4631      	mov	r1, r6
 80093b6:	4648      	mov	r0, r9
 80093b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80093ba:	f000 fa0b 	bl	80097d4 <_Bfree>
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093c2:	9e05      	ldr	r6, [sp, #20]
 80093c4:	ea43 0102 	orr.w	r1, r3, r2
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	4319      	orrs	r1, r3
 80093cc:	d10f      	bne.n	80093ee <_dtoa_r+0x946>
 80093ce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80093d2:	d028      	beq.n	8009426 <_dtoa_r+0x97e>
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	dd02      	ble.n	80093e0 <_dtoa_r+0x938>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80093e0:	f88b a000 	strb.w	sl, [fp]
 80093e4:	e639      	b.n	800905a <_dtoa_r+0x5b2>
 80093e6:	4628      	mov	r0, r5
 80093e8:	e7bd      	b.n	8009366 <_dtoa_r+0x8be>
 80093ea:	2201      	movs	r2, #1
 80093ec:	e7e2      	b.n	80093b4 <_dtoa_r+0x90c>
 80093ee:	9b06      	ldr	r3, [sp, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	db04      	blt.n	80093fe <_dtoa_r+0x956>
 80093f4:	9907      	ldr	r1, [sp, #28]
 80093f6:	430b      	orrs	r3, r1
 80093f8:	9908      	ldr	r1, [sp, #32]
 80093fa:	430b      	orrs	r3, r1
 80093fc:	d120      	bne.n	8009440 <_dtoa_r+0x998>
 80093fe:	2a00      	cmp	r2, #0
 8009400:	ddee      	ble.n	80093e0 <_dtoa_r+0x938>
 8009402:	9901      	ldr	r1, [sp, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	4648      	mov	r0, r9
 8009408:	f000 fbfc 	bl	8009c04 <__lshift>
 800940c:	4621      	mov	r1, r4
 800940e:	9001      	str	r0, [sp, #4]
 8009410:	f000 fc64 	bl	8009cdc <__mcmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	dc03      	bgt.n	8009420 <_dtoa_r+0x978>
 8009418:	d1e2      	bne.n	80093e0 <_dtoa_r+0x938>
 800941a:	f01a 0f01 	tst.w	sl, #1
 800941e:	d0df      	beq.n	80093e0 <_dtoa_r+0x938>
 8009420:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009424:	d1d9      	bne.n	80093da <_dtoa_r+0x932>
 8009426:	2339      	movs	r3, #57	@ 0x39
 8009428:	f88b 3000 	strb.w	r3, [fp]
 800942c:	4633      	mov	r3, r6
 800942e:	461e      	mov	r6, r3
 8009430:	3b01      	subs	r3, #1
 8009432:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009436:	2a39      	cmp	r2, #57	@ 0x39
 8009438:	d053      	beq.n	80094e2 <_dtoa_r+0xa3a>
 800943a:	3201      	adds	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
 800943e:	e60c      	b.n	800905a <_dtoa_r+0x5b2>
 8009440:	2a00      	cmp	r2, #0
 8009442:	dd07      	ble.n	8009454 <_dtoa_r+0x9ac>
 8009444:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009448:	d0ed      	beq.n	8009426 <_dtoa_r+0x97e>
 800944a:	f10a 0301 	add.w	r3, sl, #1
 800944e:	f88b 3000 	strb.w	r3, [fp]
 8009452:	e602      	b.n	800905a <_dtoa_r+0x5b2>
 8009454:	9b05      	ldr	r3, [sp, #20]
 8009456:	9a05      	ldr	r2, [sp, #20]
 8009458:	f803 ac01 	strb.w	sl, [r3, #-1]
 800945c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800945e:	4293      	cmp	r3, r2
 8009460:	d029      	beq.n	80094b6 <_dtoa_r+0xa0e>
 8009462:	9901      	ldr	r1, [sp, #4]
 8009464:	2300      	movs	r3, #0
 8009466:	220a      	movs	r2, #10
 8009468:	4648      	mov	r0, r9
 800946a:	f000 f9d5 	bl	8009818 <__multadd>
 800946e:	45a8      	cmp	r8, r5
 8009470:	9001      	str	r0, [sp, #4]
 8009472:	f04f 0300 	mov.w	r3, #0
 8009476:	f04f 020a 	mov.w	r2, #10
 800947a:	4641      	mov	r1, r8
 800947c:	4648      	mov	r0, r9
 800947e:	d107      	bne.n	8009490 <_dtoa_r+0x9e8>
 8009480:	f000 f9ca 	bl	8009818 <__multadd>
 8009484:	4680      	mov	r8, r0
 8009486:	4605      	mov	r5, r0
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	3301      	adds	r3, #1
 800948c:	9305      	str	r3, [sp, #20]
 800948e:	e775      	b.n	800937c <_dtoa_r+0x8d4>
 8009490:	f000 f9c2 	bl	8009818 <__multadd>
 8009494:	4629      	mov	r1, r5
 8009496:	4680      	mov	r8, r0
 8009498:	2300      	movs	r3, #0
 800949a:	220a      	movs	r2, #10
 800949c:	4648      	mov	r0, r9
 800949e:	f000 f9bb 	bl	8009818 <__multadd>
 80094a2:	4605      	mov	r5, r0
 80094a4:	e7f0      	b.n	8009488 <_dtoa_r+0x9e0>
 80094a6:	f1bb 0f00 	cmp.w	fp, #0
 80094aa:	bfcc      	ite	gt
 80094ac:	465e      	movgt	r6, fp
 80094ae:	2601      	movle	r6, #1
 80094b0:	443e      	add	r6, r7
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	9901      	ldr	r1, [sp, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	4648      	mov	r0, r9
 80094bc:	f000 fba2 	bl	8009c04 <__lshift>
 80094c0:	4621      	mov	r1, r4
 80094c2:	9001      	str	r0, [sp, #4]
 80094c4:	f000 fc0a 	bl	8009cdc <__mcmp>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	dcaf      	bgt.n	800942c <_dtoa_r+0x984>
 80094cc:	d102      	bne.n	80094d4 <_dtoa_r+0xa2c>
 80094ce:	f01a 0f01 	tst.w	sl, #1
 80094d2:	d1ab      	bne.n	800942c <_dtoa_r+0x984>
 80094d4:	4633      	mov	r3, r6
 80094d6:	461e      	mov	r6, r3
 80094d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094dc:	2a30      	cmp	r2, #48	@ 0x30
 80094de:	d0fa      	beq.n	80094d6 <_dtoa_r+0xa2e>
 80094e0:	e5bb      	b.n	800905a <_dtoa_r+0x5b2>
 80094e2:	429f      	cmp	r7, r3
 80094e4:	d1a3      	bne.n	800942e <_dtoa_r+0x986>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	2331      	movs	r3, #49	@ 0x31
 80094ee:	703b      	strb	r3, [r7, #0]
 80094f0:	e5b3      	b.n	800905a <_dtoa_r+0x5b2>
 80094f2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094f4:	4f16      	ldr	r7, [pc, #88]	@ (8009550 <_dtoa_r+0xaa8>)
 80094f6:	b11b      	cbz	r3, 8009500 <_dtoa_r+0xa58>
 80094f8:	f107 0308 	add.w	r3, r7, #8
 80094fc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	4638      	mov	r0, r7
 8009502:	b011      	add	sp, #68	@ 0x44
 8009504:	ecbd 8b02 	vpop	{d8}
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	9b07      	ldr	r3, [sp, #28]
 800950e:	2b01      	cmp	r3, #1
 8009510:	f77f ae36 	ble.w	8009180 <_dtoa_r+0x6d8>
 8009514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009518:	2001      	movs	r0, #1
 800951a:	e656      	b.n	80091ca <_dtoa_r+0x722>
 800951c:	f1bb 0f00 	cmp.w	fp, #0
 8009520:	f77f aed7 	ble.w	80092d2 <_dtoa_r+0x82a>
 8009524:	463e      	mov	r6, r7
 8009526:	9801      	ldr	r0, [sp, #4]
 8009528:	4621      	mov	r1, r4
 800952a:	f7ff fa35 	bl	8008998 <quorem>
 800952e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009532:	f806 ab01 	strb.w	sl, [r6], #1
 8009536:	1bf2      	subs	r2, r6, r7
 8009538:	4593      	cmp	fp, r2
 800953a:	ddb4      	ble.n	80094a6 <_dtoa_r+0x9fe>
 800953c:	9901      	ldr	r1, [sp, #4]
 800953e:	2300      	movs	r3, #0
 8009540:	220a      	movs	r2, #10
 8009542:	4648      	mov	r0, r9
 8009544:	f000 f968 	bl	8009818 <__multadd>
 8009548:	9001      	str	r0, [sp, #4]
 800954a:	e7ec      	b.n	8009526 <_dtoa_r+0xa7e>
 800954c:	0800c219 	.word	0x0800c219
 8009550:	0800c19d 	.word	0x0800c19d

08009554 <_free_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4605      	mov	r5, r0
 8009558:	2900      	cmp	r1, #0
 800955a:	d041      	beq.n	80095e0 <_free_r+0x8c>
 800955c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009560:	1f0c      	subs	r4, r1, #4
 8009562:	2b00      	cmp	r3, #0
 8009564:	bfb8      	it	lt
 8009566:	18e4      	addlt	r4, r4, r3
 8009568:	f000 f8e8 	bl	800973c <__malloc_lock>
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <_free_r+0x90>)
 800956e:	6813      	ldr	r3, [r2, #0]
 8009570:	b933      	cbnz	r3, 8009580 <_free_r+0x2c>
 8009572:	6063      	str	r3, [r4, #4]
 8009574:	6014      	str	r4, [r2, #0]
 8009576:	4628      	mov	r0, r5
 8009578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800957c:	f000 b8e4 	b.w	8009748 <__malloc_unlock>
 8009580:	42a3      	cmp	r3, r4
 8009582:	d908      	bls.n	8009596 <_free_r+0x42>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	1821      	adds	r1, r4, r0
 8009588:	428b      	cmp	r3, r1
 800958a:	bf01      	itttt	eq
 800958c:	6819      	ldreq	r1, [r3, #0]
 800958e:	685b      	ldreq	r3, [r3, #4]
 8009590:	1809      	addeq	r1, r1, r0
 8009592:	6021      	streq	r1, [r4, #0]
 8009594:	e7ed      	b.n	8009572 <_free_r+0x1e>
 8009596:	461a      	mov	r2, r3
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	b10b      	cbz	r3, 80095a0 <_free_r+0x4c>
 800959c:	42a3      	cmp	r3, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x42>
 80095a0:	6811      	ldr	r1, [r2, #0]
 80095a2:	1850      	adds	r0, r2, r1
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x6c>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	4401      	add	r1, r0
 80095ac:	1850      	adds	r0, r2, r1
 80095ae:	4283      	cmp	r3, r0
 80095b0:	6011      	str	r1, [r2, #0]
 80095b2:	d1e0      	bne.n	8009576 <_free_r+0x22>
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	6053      	str	r3, [r2, #4]
 80095ba:	4408      	add	r0, r1
 80095bc:	6010      	str	r0, [r2, #0]
 80095be:	e7da      	b.n	8009576 <_free_r+0x22>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x74>
 80095c2:	230c      	movs	r3, #12
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	e7d6      	b.n	8009576 <_free_r+0x22>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	1821      	adds	r1, r4, r0
 80095cc:	428b      	cmp	r3, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6819      	ldreq	r1, [r3, #0]
 80095d2:	685b      	ldreq	r3, [r3, #4]
 80095d4:	6063      	str	r3, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1809      	addeq	r1, r1, r0
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	6054      	str	r4, [r2, #4]
 80095de:	e7ca      	b.n	8009576 <_free_r+0x22>
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	bf00      	nop
 80095e4:	24000588 	.word	0x24000588

080095e8 <malloc>:
 80095e8:	4b02      	ldr	r3, [pc, #8]	@ (80095f4 <malloc+0xc>)
 80095ea:	4601      	mov	r1, r0
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	f000 b825 	b.w	800963c <_malloc_r>
 80095f2:	bf00      	nop
 80095f4:	240000bc 	.word	0x240000bc

080095f8 <sbrk_aligned>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4e0f      	ldr	r6, [pc, #60]	@ (8009638 <sbrk_aligned+0x40>)
 80095fc:	460c      	mov	r4, r1
 80095fe:	6831      	ldr	r1, [r6, #0]
 8009600:	4605      	mov	r5, r0
 8009602:	b911      	cbnz	r1, 800960a <sbrk_aligned+0x12>
 8009604:	f001 fdb8 	bl	800b178 <_sbrk_r>
 8009608:	6030      	str	r0, [r6, #0]
 800960a:	4621      	mov	r1, r4
 800960c:	4628      	mov	r0, r5
 800960e:	f001 fdb3 	bl	800b178 <_sbrk_r>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d103      	bne.n	800961e <sbrk_aligned+0x26>
 8009616:	f04f 34ff 	mov.w	r4, #4294967295
 800961a:	4620      	mov	r0, r4
 800961c:	bd70      	pop	{r4, r5, r6, pc}
 800961e:	1cc4      	adds	r4, r0, #3
 8009620:	f024 0403 	bic.w	r4, r4, #3
 8009624:	42a0      	cmp	r0, r4
 8009626:	d0f8      	beq.n	800961a <sbrk_aligned+0x22>
 8009628:	1a21      	subs	r1, r4, r0
 800962a:	4628      	mov	r0, r5
 800962c:	f001 fda4 	bl	800b178 <_sbrk_r>
 8009630:	3001      	adds	r0, #1
 8009632:	d1f2      	bne.n	800961a <sbrk_aligned+0x22>
 8009634:	e7ef      	b.n	8009616 <sbrk_aligned+0x1e>
 8009636:	bf00      	nop
 8009638:	24000584 	.word	0x24000584

0800963c <_malloc_r>:
 800963c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009640:	1ccd      	adds	r5, r1, #3
 8009642:	f025 0503 	bic.w	r5, r5, #3
 8009646:	3508      	adds	r5, #8
 8009648:	2d0c      	cmp	r5, #12
 800964a:	bf38      	it	cc
 800964c:	250c      	movcc	r5, #12
 800964e:	2d00      	cmp	r5, #0
 8009650:	4606      	mov	r6, r0
 8009652:	db01      	blt.n	8009658 <_malloc_r+0x1c>
 8009654:	42a9      	cmp	r1, r5
 8009656:	d904      	bls.n	8009662 <_malloc_r+0x26>
 8009658:	230c      	movs	r3, #12
 800965a:	6033      	str	r3, [r6, #0]
 800965c:	2000      	movs	r0, #0
 800965e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009662:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009738 <_malloc_r+0xfc>
 8009666:	f000 f869 	bl	800973c <__malloc_lock>
 800966a:	f8d8 3000 	ldr.w	r3, [r8]
 800966e:	461c      	mov	r4, r3
 8009670:	bb44      	cbnz	r4, 80096c4 <_malloc_r+0x88>
 8009672:	4629      	mov	r1, r5
 8009674:	4630      	mov	r0, r6
 8009676:	f7ff ffbf 	bl	80095f8 <sbrk_aligned>
 800967a:	1c43      	adds	r3, r0, #1
 800967c:	4604      	mov	r4, r0
 800967e:	d158      	bne.n	8009732 <_malloc_r+0xf6>
 8009680:	f8d8 4000 	ldr.w	r4, [r8]
 8009684:	4627      	mov	r7, r4
 8009686:	2f00      	cmp	r7, #0
 8009688:	d143      	bne.n	8009712 <_malloc_r+0xd6>
 800968a:	2c00      	cmp	r4, #0
 800968c:	d04b      	beq.n	8009726 <_malloc_r+0xea>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	4639      	mov	r1, r7
 8009692:	4630      	mov	r0, r6
 8009694:	eb04 0903 	add.w	r9, r4, r3
 8009698:	f001 fd6e 	bl	800b178 <_sbrk_r>
 800969c:	4581      	cmp	r9, r0
 800969e:	d142      	bne.n	8009726 <_malloc_r+0xea>
 80096a0:	6821      	ldr	r1, [r4, #0]
 80096a2:	1a6d      	subs	r5, r5, r1
 80096a4:	4629      	mov	r1, r5
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ffa6 	bl	80095f8 <sbrk_aligned>
 80096ac:	3001      	adds	r0, #1
 80096ae:	d03a      	beq.n	8009726 <_malloc_r+0xea>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	442b      	add	r3, r5
 80096b4:	6023      	str	r3, [r4, #0]
 80096b6:	f8d8 3000 	ldr.w	r3, [r8]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	bb62      	cbnz	r2, 8009718 <_malloc_r+0xdc>
 80096be:	f8c8 7000 	str.w	r7, [r8]
 80096c2:	e00f      	b.n	80096e4 <_malloc_r+0xa8>
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	1b52      	subs	r2, r2, r5
 80096c8:	d420      	bmi.n	800970c <_malloc_r+0xd0>
 80096ca:	2a0b      	cmp	r2, #11
 80096cc:	d917      	bls.n	80096fe <_malloc_r+0xc2>
 80096ce:	1961      	adds	r1, r4, r5
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	6025      	str	r5, [r4, #0]
 80096d4:	bf18      	it	ne
 80096d6:	6059      	strne	r1, [r3, #4]
 80096d8:	6863      	ldr	r3, [r4, #4]
 80096da:	bf08      	it	eq
 80096dc:	f8c8 1000 	streq.w	r1, [r8]
 80096e0:	5162      	str	r2, [r4, r5]
 80096e2:	604b      	str	r3, [r1, #4]
 80096e4:	4630      	mov	r0, r6
 80096e6:	f000 f82f 	bl	8009748 <__malloc_unlock>
 80096ea:	f104 000b 	add.w	r0, r4, #11
 80096ee:	1d23      	adds	r3, r4, #4
 80096f0:	f020 0007 	bic.w	r0, r0, #7
 80096f4:	1ac2      	subs	r2, r0, r3
 80096f6:	bf1c      	itt	ne
 80096f8:	1a1b      	subne	r3, r3, r0
 80096fa:	50a3      	strne	r3, [r4, r2]
 80096fc:	e7af      	b.n	800965e <_malloc_r+0x22>
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	42a3      	cmp	r3, r4
 8009702:	bf0c      	ite	eq
 8009704:	f8c8 2000 	streq.w	r2, [r8]
 8009708:	605a      	strne	r2, [r3, #4]
 800970a:	e7eb      	b.n	80096e4 <_malloc_r+0xa8>
 800970c:	4623      	mov	r3, r4
 800970e:	6864      	ldr	r4, [r4, #4]
 8009710:	e7ae      	b.n	8009670 <_malloc_r+0x34>
 8009712:	463c      	mov	r4, r7
 8009714:	687f      	ldr	r7, [r7, #4]
 8009716:	e7b6      	b.n	8009686 <_malloc_r+0x4a>
 8009718:	461a      	mov	r2, r3
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	42a3      	cmp	r3, r4
 800971e:	d1fb      	bne.n	8009718 <_malloc_r+0xdc>
 8009720:	2300      	movs	r3, #0
 8009722:	6053      	str	r3, [r2, #4]
 8009724:	e7de      	b.n	80096e4 <_malloc_r+0xa8>
 8009726:	230c      	movs	r3, #12
 8009728:	6033      	str	r3, [r6, #0]
 800972a:	4630      	mov	r0, r6
 800972c:	f000 f80c 	bl	8009748 <__malloc_unlock>
 8009730:	e794      	b.n	800965c <_malloc_r+0x20>
 8009732:	6005      	str	r5, [r0, #0]
 8009734:	e7d6      	b.n	80096e4 <_malloc_r+0xa8>
 8009736:	bf00      	nop
 8009738:	24000588 	.word	0x24000588

0800973c <__malloc_lock>:
 800973c:	4801      	ldr	r0, [pc, #4]	@ (8009744 <__malloc_lock+0x8>)
 800973e:	f7ff b922 	b.w	8008986 <__retarget_lock_acquire_recursive>
 8009742:	bf00      	nop
 8009744:	24000580 	.word	0x24000580

08009748 <__malloc_unlock>:
 8009748:	4801      	ldr	r0, [pc, #4]	@ (8009750 <__malloc_unlock+0x8>)
 800974a:	f7ff b91d 	b.w	8008988 <__retarget_lock_release_recursive>
 800974e:	bf00      	nop
 8009750:	24000580 	.word	0x24000580

08009754 <_Balloc>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	69c6      	ldr	r6, [r0, #28]
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	b976      	cbnz	r6, 800977c <_Balloc+0x28>
 800975e:	2010      	movs	r0, #16
 8009760:	f7ff ff42 	bl	80095e8 <malloc>
 8009764:	4602      	mov	r2, r0
 8009766:	61e0      	str	r0, [r4, #28]
 8009768:	b920      	cbnz	r0, 8009774 <_Balloc+0x20>
 800976a:	4b18      	ldr	r3, [pc, #96]	@ (80097cc <_Balloc+0x78>)
 800976c:	4818      	ldr	r0, [pc, #96]	@ (80097d0 <_Balloc+0x7c>)
 800976e:	216b      	movs	r1, #107	@ 0x6b
 8009770:	f001 fd2a 	bl	800b1c8 <__assert_func>
 8009774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009778:	6006      	str	r6, [r0, #0]
 800977a:	60c6      	str	r6, [r0, #12]
 800977c:	69e6      	ldr	r6, [r4, #28]
 800977e:	68f3      	ldr	r3, [r6, #12]
 8009780:	b183      	cbz	r3, 80097a4 <_Balloc+0x50>
 8009782:	69e3      	ldr	r3, [r4, #28]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800978a:	b9b8      	cbnz	r0, 80097bc <_Balloc+0x68>
 800978c:	2101      	movs	r1, #1
 800978e:	fa01 f605 	lsl.w	r6, r1, r5
 8009792:	1d72      	adds	r2, r6, #5
 8009794:	0092      	lsls	r2, r2, #2
 8009796:	4620      	mov	r0, r4
 8009798:	f001 fd34 	bl	800b204 <_calloc_r>
 800979c:	b160      	cbz	r0, 80097b8 <_Balloc+0x64>
 800979e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097a2:	e00e      	b.n	80097c2 <_Balloc+0x6e>
 80097a4:	2221      	movs	r2, #33	@ 0x21
 80097a6:	2104      	movs	r1, #4
 80097a8:	4620      	mov	r0, r4
 80097aa:	f001 fd2b 	bl	800b204 <_calloc_r>
 80097ae:	69e3      	ldr	r3, [r4, #28]
 80097b0:	60f0      	str	r0, [r6, #12]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e4      	bne.n	8009782 <_Balloc+0x2e>
 80097b8:	2000      	movs	r0, #0
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	6802      	ldr	r2, [r0, #0]
 80097be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097c2:	2300      	movs	r3, #0
 80097c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097c8:	e7f7      	b.n	80097ba <_Balloc+0x66>
 80097ca:	bf00      	nop
 80097cc:	0800c1aa 	.word	0x0800c1aa
 80097d0:	0800c22a 	.word	0x0800c22a

080097d4 <_Bfree>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	69c6      	ldr	r6, [r0, #28]
 80097d8:	4605      	mov	r5, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	b976      	cbnz	r6, 80097fc <_Bfree+0x28>
 80097de:	2010      	movs	r0, #16
 80097e0:	f7ff ff02 	bl	80095e8 <malloc>
 80097e4:	4602      	mov	r2, r0
 80097e6:	61e8      	str	r0, [r5, #28]
 80097e8:	b920      	cbnz	r0, 80097f4 <_Bfree+0x20>
 80097ea:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <_Bfree+0x3c>)
 80097ec:	4809      	ldr	r0, [pc, #36]	@ (8009814 <_Bfree+0x40>)
 80097ee:	218f      	movs	r1, #143	@ 0x8f
 80097f0:	f001 fcea 	bl	800b1c8 <__assert_func>
 80097f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f8:	6006      	str	r6, [r0, #0]
 80097fa:	60c6      	str	r6, [r0, #12]
 80097fc:	b13c      	cbz	r4, 800980e <_Bfree+0x3a>
 80097fe:	69eb      	ldr	r3, [r5, #28]
 8009800:	6862      	ldr	r2, [r4, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009808:	6021      	str	r1, [r4, #0]
 800980a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	0800c1aa 	.word	0x0800c1aa
 8009814:	0800c22a 	.word	0x0800c22a

08009818 <__multadd>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	690d      	ldr	r5, [r1, #16]
 800981e:	4607      	mov	r7, r0
 8009820:	460c      	mov	r4, r1
 8009822:	461e      	mov	r6, r3
 8009824:	f101 0c14 	add.w	ip, r1, #20
 8009828:	2000      	movs	r0, #0
 800982a:	f8dc 3000 	ldr.w	r3, [ip]
 800982e:	b299      	uxth	r1, r3
 8009830:	fb02 6101 	mla	r1, r2, r1, r6
 8009834:	0c1e      	lsrs	r6, r3, #16
 8009836:	0c0b      	lsrs	r3, r1, #16
 8009838:	fb02 3306 	mla	r3, r2, r6, r3
 800983c:	b289      	uxth	r1, r1
 800983e:	3001      	adds	r0, #1
 8009840:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009844:	4285      	cmp	r5, r0
 8009846:	f84c 1b04 	str.w	r1, [ip], #4
 800984a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800984e:	dcec      	bgt.n	800982a <__multadd+0x12>
 8009850:	b30e      	cbz	r6, 8009896 <__multadd+0x7e>
 8009852:	68a3      	ldr	r3, [r4, #8]
 8009854:	42ab      	cmp	r3, r5
 8009856:	dc19      	bgt.n	800988c <__multadd+0x74>
 8009858:	6861      	ldr	r1, [r4, #4]
 800985a:	4638      	mov	r0, r7
 800985c:	3101      	adds	r1, #1
 800985e:	f7ff ff79 	bl	8009754 <_Balloc>
 8009862:	4680      	mov	r8, r0
 8009864:	b928      	cbnz	r0, 8009872 <__multadd+0x5a>
 8009866:	4602      	mov	r2, r0
 8009868:	4b0c      	ldr	r3, [pc, #48]	@ (800989c <__multadd+0x84>)
 800986a:	480d      	ldr	r0, [pc, #52]	@ (80098a0 <__multadd+0x88>)
 800986c:	21ba      	movs	r1, #186	@ 0xba
 800986e:	f001 fcab 	bl	800b1c8 <__assert_func>
 8009872:	6922      	ldr	r2, [r4, #16]
 8009874:	3202      	adds	r2, #2
 8009876:	f104 010c 	add.w	r1, r4, #12
 800987a:	0092      	lsls	r2, r2, #2
 800987c:	300c      	adds	r0, #12
 800987e:	f001 fc8b 	bl	800b198 <memcpy>
 8009882:	4621      	mov	r1, r4
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff ffa5 	bl	80097d4 <_Bfree>
 800988a:	4644      	mov	r4, r8
 800988c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009890:	3501      	adds	r5, #1
 8009892:	615e      	str	r6, [r3, #20]
 8009894:	6125      	str	r5, [r4, #16]
 8009896:	4620      	mov	r0, r4
 8009898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800989c:	0800c219 	.word	0x0800c219
 80098a0:	0800c22a 	.word	0x0800c22a

080098a4 <__s2b>:
 80098a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098a8:	460c      	mov	r4, r1
 80098aa:	4615      	mov	r5, r2
 80098ac:	461f      	mov	r7, r3
 80098ae:	2209      	movs	r2, #9
 80098b0:	3308      	adds	r3, #8
 80098b2:	4606      	mov	r6, r0
 80098b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b8:	2100      	movs	r1, #0
 80098ba:	2201      	movs	r2, #1
 80098bc:	429a      	cmp	r2, r3
 80098be:	db09      	blt.n	80098d4 <__s2b+0x30>
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7ff ff47 	bl	8009754 <_Balloc>
 80098c6:	b940      	cbnz	r0, 80098da <__s2b+0x36>
 80098c8:	4602      	mov	r2, r0
 80098ca:	4b19      	ldr	r3, [pc, #100]	@ (8009930 <__s2b+0x8c>)
 80098cc:	4819      	ldr	r0, [pc, #100]	@ (8009934 <__s2b+0x90>)
 80098ce:	21d3      	movs	r1, #211	@ 0xd3
 80098d0:	f001 fc7a 	bl	800b1c8 <__assert_func>
 80098d4:	0052      	lsls	r2, r2, #1
 80098d6:	3101      	adds	r1, #1
 80098d8:	e7f0      	b.n	80098bc <__s2b+0x18>
 80098da:	9b08      	ldr	r3, [sp, #32]
 80098dc:	6143      	str	r3, [r0, #20]
 80098de:	2d09      	cmp	r5, #9
 80098e0:	f04f 0301 	mov.w	r3, #1
 80098e4:	6103      	str	r3, [r0, #16]
 80098e6:	dd16      	ble.n	8009916 <__s2b+0x72>
 80098e8:	f104 0909 	add.w	r9, r4, #9
 80098ec:	46c8      	mov	r8, r9
 80098ee:	442c      	add	r4, r5
 80098f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098f4:	4601      	mov	r1, r0
 80098f6:	3b30      	subs	r3, #48	@ 0x30
 80098f8:	220a      	movs	r2, #10
 80098fa:	4630      	mov	r0, r6
 80098fc:	f7ff ff8c 	bl	8009818 <__multadd>
 8009900:	45a0      	cmp	r8, r4
 8009902:	d1f5      	bne.n	80098f0 <__s2b+0x4c>
 8009904:	f1a5 0408 	sub.w	r4, r5, #8
 8009908:	444c      	add	r4, r9
 800990a:	1b2d      	subs	r5, r5, r4
 800990c:	1963      	adds	r3, r4, r5
 800990e:	42bb      	cmp	r3, r7
 8009910:	db04      	blt.n	800991c <__s2b+0x78>
 8009912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009916:	340a      	adds	r4, #10
 8009918:	2509      	movs	r5, #9
 800991a:	e7f6      	b.n	800990a <__s2b+0x66>
 800991c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009920:	4601      	mov	r1, r0
 8009922:	3b30      	subs	r3, #48	@ 0x30
 8009924:	220a      	movs	r2, #10
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ff76 	bl	8009818 <__multadd>
 800992c:	e7ee      	b.n	800990c <__s2b+0x68>
 800992e:	bf00      	nop
 8009930:	0800c219 	.word	0x0800c219
 8009934:	0800c22a 	.word	0x0800c22a

08009938 <__hi0bits>:
 8009938:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800993c:	4603      	mov	r3, r0
 800993e:	bf36      	itet	cc
 8009940:	0403      	lslcc	r3, r0, #16
 8009942:	2000      	movcs	r0, #0
 8009944:	2010      	movcc	r0, #16
 8009946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800994a:	bf3c      	itt	cc
 800994c:	021b      	lslcc	r3, r3, #8
 800994e:	3008      	addcc	r0, #8
 8009950:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009954:	bf3c      	itt	cc
 8009956:	011b      	lslcc	r3, r3, #4
 8009958:	3004      	addcc	r0, #4
 800995a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800995e:	bf3c      	itt	cc
 8009960:	009b      	lslcc	r3, r3, #2
 8009962:	3002      	addcc	r0, #2
 8009964:	2b00      	cmp	r3, #0
 8009966:	db05      	blt.n	8009974 <__hi0bits+0x3c>
 8009968:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800996c:	f100 0001 	add.w	r0, r0, #1
 8009970:	bf08      	it	eq
 8009972:	2020      	moveq	r0, #32
 8009974:	4770      	bx	lr

08009976 <__lo0bits>:
 8009976:	6803      	ldr	r3, [r0, #0]
 8009978:	4602      	mov	r2, r0
 800997a:	f013 0007 	ands.w	r0, r3, #7
 800997e:	d00b      	beq.n	8009998 <__lo0bits+0x22>
 8009980:	07d9      	lsls	r1, r3, #31
 8009982:	d421      	bmi.n	80099c8 <__lo0bits+0x52>
 8009984:	0798      	lsls	r0, r3, #30
 8009986:	bf49      	itett	mi
 8009988:	085b      	lsrmi	r3, r3, #1
 800998a:	089b      	lsrpl	r3, r3, #2
 800998c:	2001      	movmi	r0, #1
 800998e:	6013      	strmi	r3, [r2, #0]
 8009990:	bf5c      	itt	pl
 8009992:	6013      	strpl	r3, [r2, #0]
 8009994:	2002      	movpl	r0, #2
 8009996:	4770      	bx	lr
 8009998:	b299      	uxth	r1, r3
 800999a:	b909      	cbnz	r1, 80099a0 <__lo0bits+0x2a>
 800999c:	0c1b      	lsrs	r3, r3, #16
 800999e:	2010      	movs	r0, #16
 80099a0:	b2d9      	uxtb	r1, r3
 80099a2:	b909      	cbnz	r1, 80099a8 <__lo0bits+0x32>
 80099a4:	3008      	adds	r0, #8
 80099a6:	0a1b      	lsrs	r3, r3, #8
 80099a8:	0719      	lsls	r1, r3, #28
 80099aa:	bf04      	itt	eq
 80099ac:	091b      	lsreq	r3, r3, #4
 80099ae:	3004      	addeq	r0, #4
 80099b0:	0799      	lsls	r1, r3, #30
 80099b2:	bf04      	itt	eq
 80099b4:	089b      	lsreq	r3, r3, #2
 80099b6:	3002      	addeq	r0, #2
 80099b8:	07d9      	lsls	r1, r3, #31
 80099ba:	d403      	bmi.n	80099c4 <__lo0bits+0x4e>
 80099bc:	085b      	lsrs	r3, r3, #1
 80099be:	f100 0001 	add.w	r0, r0, #1
 80099c2:	d003      	beq.n	80099cc <__lo0bits+0x56>
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	4770      	bx	lr
 80099c8:	2000      	movs	r0, #0
 80099ca:	4770      	bx	lr
 80099cc:	2020      	movs	r0, #32
 80099ce:	4770      	bx	lr

080099d0 <__i2b>:
 80099d0:	b510      	push	{r4, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	2101      	movs	r1, #1
 80099d6:	f7ff febd 	bl	8009754 <_Balloc>
 80099da:	4602      	mov	r2, r0
 80099dc:	b928      	cbnz	r0, 80099ea <__i2b+0x1a>
 80099de:	4b05      	ldr	r3, [pc, #20]	@ (80099f4 <__i2b+0x24>)
 80099e0:	4805      	ldr	r0, [pc, #20]	@ (80099f8 <__i2b+0x28>)
 80099e2:	f240 1145 	movw	r1, #325	@ 0x145
 80099e6:	f001 fbef 	bl	800b1c8 <__assert_func>
 80099ea:	2301      	movs	r3, #1
 80099ec:	6144      	str	r4, [r0, #20]
 80099ee:	6103      	str	r3, [r0, #16]
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	bf00      	nop
 80099f4:	0800c219 	.word	0x0800c219
 80099f8:	0800c22a 	.word	0x0800c22a

080099fc <__multiply>:
 80099fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a00:	4614      	mov	r4, r2
 8009a02:	690a      	ldr	r2, [r1, #16]
 8009a04:	6923      	ldr	r3, [r4, #16]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	bfa8      	it	ge
 8009a0a:	4623      	movge	r3, r4
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	bfa4      	itt	ge
 8009a10:	460c      	movge	r4, r1
 8009a12:	461f      	movge	r7, r3
 8009a14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a1c:	68a3      	ldr	r3, [r4, #8]
 8009a1e:	6861      	ldr	r1, [r4, #4]
 8009a20:	eb0a 0609 	add.w	r6, sl, r9
 8009a24:	42b3      	cmp	r3, r6
 8009a26:	b085      	sub	sp, #20
 8009a28:	bfb8      	it	lt
 8009a2a:	3101      	addlt	r1, #1
 8009a2c:	f7ff fe92 	bl	8009754 <_Balloc>
 8009a30:	b930      	cbnz	r0, 8009a40 <__multiply+0x44>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4b44      	ldr	r3, [pc, #272]	@ (8009b48 <__multiply+0x14c>)
 8009a36:	4845      	ldr	r0, [pc, #276]	@ (8009b4c <__multiply+0x150>)
 8009a38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a3c:	f001 fbc4 	bl	800b1c8 <__assert_func>
 8009a40:	f100 0514 	add.w	r5, r0, #20
 8009a44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a48:	462b      	mov	r3, r5
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	4543      	cmp	r3, r8
 8009a4e:	d321      	bcc.n	8009a94 <__multiply+0x98>
 8009a50:	f107 0114 	add.w	r1, r7, #20
 8009a54:	f104 0214 	add.w	r2, r4, #20
 8009a58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009a5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009a60:	9302      	str	r3, [sp, #8]
 8009a62:	1b13      	subs	r3, r2, r4
 8009a64:	3b15      	subs	r3, #21
 8009a66:	f023 0303 	bic.w	r3, r3, #3
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	f104 0715 	add.w	r7, r4, #21
 8009a70:	42ba      	cmp	r2, r7
 8009a72:	bf38      	it	cc
 8009a74:	2304      	movcc	r3, #4
 8009a76:	9301      	str	r3, [sp, #4]
 8009a78:	9b02      	ldr	r3, [sp, #8]
 8009a7a:	9103      	str	r1, [sp, #12]
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	d80c      	bhi.n	8009a9a <__multiply+0x9e>
 8009a80:	2e00      	cmp	r6, #0
 8009a82:	dd03      	ble.n	8009a8c <__multiply+0x90>
 8009a84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d05b      	beq.n	8009b44 <__multiply+0x148>
 8009a8c:	6106      	str	r6, [r0, #16]
 8009a8e:	b005      	add	sp, #20
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a94:	f843 2b04 	str.w	r2, [r3], #4
 8009a98:	e7d8      	b.n	8009a4c <__multiply+0x50>
 8009a9a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a9e:	f1ba 0f00 	cmp.w	sl, #0
 8009aa2:	d024      	beq.n	8009aee <__multiply+0xf2>
 8009aa4:	f104 0e14 	add.w	lr, r4, #20
 8009aa8:	46a9      	mov	r9, r5
 8009aaa:	f04f 0c00 	mov.w	ip, #0
 8009aae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009ab2:	f8d9 3000 	ldr.w	r3, [r9]
 8009ab6:	fa1f fb87 	uxth.w	fp, r7
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009ac0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009ac4:	f8d9 7000 	ldr.w	r7, [r9]
 8009ac8:	4463      	add	r3, ip
 8009aca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ace:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ad2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009adc:	4572      	cmp	r2, lr
 8009ade:	f849 3b04 	str.w	r3, [r9], #4
 8009ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ae6:	d8e2      	bhi.n	8009aae <__multiply+0xb2>
 8009ae8:	9b01      	ldr	r3, [sp, #4]
 8009aea:	f845 c003 	str.w	ip, [r5, r3]
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009af4:	3104      	adds	r1, #4
 8009af6:	f1b9 0f00 	cmp.w	r9, #0
 8009afa:	d021      	beq.n	8009b40 <__multiply+0x144>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	f104 0c14 	add.w	ip, r4, #20
 8009b02:	46ae      	mov	lr, r5
 8009b04:	f04f 0a00 	mov.w	sl, #0
 8009b08:	f8bc b000 	ldrh.w	fp, [ip]
 8009b0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b10:	fb09 770b 	mla	r7, r9, fp, r7
 8009b14:	4457      	add	r7, sl
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b1c:	f84e 3b04 	str.w	r3, [lr], #4
 8009b20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b28:	f8be 3000 	ldrh.w	r3, [lr]
 8009b2c:	fb09 330a 	mla	r3, r9, sl, r3
 8009b30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b34:	4562      	cmp	r2, ip
 8009b36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b3a:	d8e5      	bhi.n	8009b08 <__multiply+0x10c>
 8009b3c:	9f01      	ldr	r7, [sp, #4]
 8009b3e:	51eb      	str	r3, [r5, r7]
 8009b40:	3504      	adds	r5, #4
 8009b42:	e799      	b.n	8009a78 <__multiply+0x7c>
 8009b44:	3e01      	subs	r6, #1
 8009b46:	e79b      	b.n	8009a80 <__multiply+0x84>
 8009b48:	0800c219 	.word	0x0800c219
 8009b4c:	0800c22a 	.word	0x0800c22a

08009b50 <__pow5mult>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4615      	mov	r5, r2
 8009b56:	f012 0203 	ands.w	r2, r2, #3
 8009b5a:	4607      	mov	r7, r0
 8009b5c:	460e      	mov	r6, r1
 8009b5e:	d007      	beq.n	8009b70 <__pow5mult+0x20>
 8009b60:	4c25      	ldr	r4, [pc, #148]	@ (8009bf8 <__pow5mult+0xa8>)
 8009b62:	3a01      	subs	r2, #1
 8009b64:	2300      	movs	r3, #0
 8009b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b6a:	f7ff fe55 	bl	8009818 <__multadd>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	10ad      	asrs	r5, r5, #2
 8009b72:	d03d      	beq.n	8009bf0 <__pow5mult+0xa0>
 8009b74:	69fc      	ldr	r4, [r7, #28]
 8009b76:	b97c      	cbnz	r4, 8009b98 <__pow5mult+0x48>
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f7ff fd35 	bl	80095e8 <malloc>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	61f8      	str	r0, [r7, #28]
 8009b82:	b928      	cbnz	r0, 8009b90 <__pow5mult+0x40>
 8009b84:	4b1d      	ldr	r3, [pc, #116]	@ (8009bfc <__pow5mult+0xac>)
 8009b86:	481e      	ldr	r0, [pc, #120]	@ (8009c00 <__pow5mult+0xb0>)
 8009b88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b8c:	f001 fb1c 	bl	800b1c8 <__assert_func>
 8009b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b94:	6004      	str	r4, [r0, #0]
 8009b96:	60c4      	str	r4, [r0, #12]
 8009b98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba0:	b94c      	cbnz	r4, 8009bb6 <__pow5mult+0x66>
 8009ba2:	f240 2171 	movw	r1, #625	@ 0x271
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f7ff ff12 	bl	80099d0 <__i2b>
 8009bac:	2300      	movs	r3, #0
 8009bae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	f04f 0900 	mov.w	r9, #0
 8009bba:	07eb      	lsls	r3, r5, #31
 8009bbc:	d50a      	bpl.n	8009bd4 <__pow5mult+0x84>
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7ff ff1a 	bl	80099fc <__multiply>
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4638      	mov	r0, r7
 8009bce:	f7ff fe01 	bl	80097d4 <_Bfree>
 8009bd2:	4646      	mov	r6, r8
 8009bd4:	106d      	asrs	r5, r5, #1
 8009bd6:	d00b      	beq.n	8009bf0 <__pow5mult+0xa0>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	b938      	cbnz	r0, 8009bec <__pow5mult+0x9c>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4621      	mov	r1, r4
 8009be0:	4638      	mov	r0, r7
 8009be2:	f7ff ff0b 	bl	80099fc <__multiply>
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	f8c0 9000 	str.w	r9, [r0]
 8009bec:	4604      	mov	r4, r0
 8009bee:	e7e4      	b.n	8009bba <__pow5mult+0x6a>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800c284 	.word	0x0800c284
 8009bfc:	0800c1aa 	.word	0x0800c1aa
 8009c00:	0800c22a 	.word	0x0800c22a

08009c04 <__lshift>:
 8009c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	6849      	ldr	r1, [r1, #4]
 8009c0c:	6923      	ldr	r3, [r4, #16]
 8009c0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c12:	68a3      	ldr	r3, [r4, #8]
 8009c14:	4607      	mov	r7, r0
 8009c16:	4691      	mov	r9, r2
 8009c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c1c:	f108 0601 	add.w	r6, r8, #1
 8009c20:	42b3      	cmp	r3, r6
 8009c22:	db0b      	blt.n	8009c3c <__lshift+0x38>
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7ff fd95 	bl	8009754 <_Balloc>
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	b948      	cbnz	r0, 8009c42 <__lshift+0x3e>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	4b28      	ldr	r3, [pc, #160]	@ (8009cd4 <__lshift+0xd0>)
 8009c32:	4829      	ldr	r0, [pc, #164]	@ (8009cd8 <__lshift+0xd4>)
 8009c34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c38:	f001 fac6 	bl	800b1c8 <__assert_func>
 8009c3c:	3101      	adds	r1, #1
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	e7ee      	b.n	8009c20 <__lshift+0x1c>
 8009c42:	2300      	movs	r3, #0
 8009c44:	f100 0114 	add.w	r1, r0, #20
 8009c48:	f100 0210 	add.w	r2, r0, #16
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	4553      	cmp	r3, sl
 8009c50:	db33      	blt.n	8009cba <__lshift+0xb6>
 8009c52:	6920      	ldr	r0, [r4, #16]
 8009c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c58:	f104 0314 	add.w	r3, r4, #20
 8009c5c:	f019 091f 	ands.w	r9, r9, #31
 8009c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c68:	d02b      	beq.n	8009cc2 <__lshift+0xbe>
 8009c6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009c6e:	468a      	mov	sl, r1
 8009c70:	2200      	movs	r2, #0
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	fa00 f009 	lsl.w	r0, r0, r9
 8009c78:	4310      	orrs	r0, r2
 8009c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c82:	459c      	cmp	ip, r3
 8009c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c88:	d8f3      	bhi.n	8009c72 <__lshift+0x6e>
 8009c8a:	ebac 0304 	sub.w	r3, ip, r4
 8009c8e:	3b15      	subs	r3, #21
 8009c90:	f023 0303 	bic.w	r3, r3, #3
 8009c94:	3304      	adds	r3, #4
 8009c96:	f104 0015 	add.w	r0, r4, #21
 8009c9a:	4584      	cmp	ip, r0
 8009c9c:	bf38      	it	cc
 8009c9e:	2304      	movcc	r3, #4
 8009ca0:	50ca      	str	r2, [r1, r3]
 8009ca2:	b10a      	cbz	r2, 8009ca8 <__lshift+0xa4>
 8009ca4:	f108 0602 	add.w	r6, r8, #2
 8009ca8:	3e01      	subs	r6, #1
 8009caa:	4638      	mov	r0, r7
 8009cac:	612e      	str	r6, [r5, #16]
 8009cae:	4621      	mov	r1, r4
 8009cb0:	f7ff fd90 	bl	80097d4 <_Bfree>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	e7c5      	b.n	8009c4e <__lshift+0x4a>
 8009cc2:	3904      	subs	r1, #4
 8009cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ccc:	459c      	cmp	ip, r3
 8009cce:	d8f9      	bhi.n	8009cc4 <__lshift+0xc0>
 8009cd0:	e7ea      	b.n	8009ca8 <__lshift+0xa4>
 8009cd2:	bf00      	nop
 8009cd4:	0800c219 	.word	0x0800c219
 8009cd8:	0800c22a 	.word	0x0800c22a

08009cdc <__mcmp>:
 8009cdc:	690a      	ldr	r2, [r1, #16]
 8009cde:	4603      	mov	r3, r0
 8009ce0:	6900      	ldr	r0, [r0, #16]
 8009ce2:	1a80      	subs	r0, r0, r2
 8009ce4:	b530      	push	{r4, r5, lr}
 8009ce6:	d10e      	bne.n	8009d06 <__mcmp+0x2a>
 8009ce8:	3314      	adds	r3, #20
 8009cea:	3114      	adds	r1, #20
 8009cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cfc:	4295      	cmp	r5, r2
 8009cfe:	d003      	beq.n	8009d08 <__mcmp+0x2c>
 8009d00:	d205      	bcs.n	8009d0e <__mcmp+0x32>
 8009d02:	f04f 30ff 	mov.w	r0, #4294967295
 8009d06:	bd30      	pop	{r4, r5, pc}
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	d3f3      	bcc.n	8009cf4 <__mcmp+0x18>
 8009d0c:	e7fb      	b.n	8009d06 <__mcmp+0x2a>
 8009d0e:	2001      	movs	r0, #1
 8009d10:	e7f9      	b.n	8009d06 <__mcmp+0x2a>
	...

08009d14 <__mdiff>:
 8009d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	4689      	mov	r9, r1
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4648      	mov	r0, r9
 8009d20:	4614      	mov	r4, r2
 8009d22:	f7ff ffdb 	bl	8009cdc <__mcmp>
 8009d26:	1e05      	subs	r5, r0, #0
 8009d28:	d112      	bne.n	8009d50 <__mdiff+0x3c>
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff fd11 	bl	8009754 <_Balloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	b928      	cbnz	r0, 8009d42 <__mdiff+0x2e>
 8009d36:	4b3f      	ldr	r3, [pc, #252]	@ (8009e34 <__mdiff+0x120>)
 8009d38:	f240 2137 	movw	r1, #567	@ 0x237
 8009d3c:	483e      	ldr	r0, [pc, #248]	@ (8009e38 <__mdiff+0x124>)
 8009d3e:	f001 fa43 	bl	800b1c8 <__assert_func>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	b003      	add	sp, #12
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	bfbc      	itt	lt
 8009d52:	464b      	movlt	r3, r9
 8009d54:	46a1      	movlt	r9, r4
 8009d56:	4630      	mov	r0, r6
 8009d58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009d5c:	bfba      	itte	lt
 8009d5e:	461c      	movlt	r4, r3
 8009d60:	2501      	movlt	r5, #1
 8009d62:	2500      	movge	r5, #0
 8009d64:	f7ff fcf6 	bl	8009754 <_Balloc>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	b918      	cbnz	r0, 8009d74 <__mdiff+0x60>
 8009d6c:	4b31      	ldr	r3, [pc, #196]	@ (8009e34 <__mdiff+0x120>)
 8009d6e:	f240 2145 	movw	r1, #581	@ 0x245
 8009d72:	e7e3      	b.n	8009d3c <__mdiff+0x28>
 8009d74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d78:	6926      	ldr	r6, [r4, #16]
 8009d7a:	60c5      	str	r5, [r0, #12]
 8009d7c:	f109 0310 	add.w	r3, r9, #16
 8009d80:	f109 0514 	add.w	r5, r9, #20
 8009d84:	f104 0e14 	add.w	lr, r4, #20
 8009d88:	f100 0b14 	add.w	fp, r0, #20
 8009d8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	46d9      	mov	r9, fp
 8009d98:	f04f 0c00 	mov.w	ip, #0
 8009d9c:	9b01      	ldr	r3, [sp, #4]
 8009d9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009da2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	fa1f f38a 	uxth.w	r3, sl
 8009dac:	4619      	mov	r1, r3
 8009dae:	b283      	uxth	r3, r0
 8009db0:	1acb      	subs	r3, r1, r3
 8009db2:	0c00      	lsrs	r0, r0, #16
 8009db4:	4463      	add	r3, ip
 8009db6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009dba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009dc4:	4576      	cmp	r6, lr
 8009dc6:	f849 3b04 	str.w	r3, [r9], #4
 8009dca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dce:	d8e5      	bhi.n	8009d9c <__mdiff+0x88>
 8009dd0:	1b33      	subs	r3, r6, r4
 8009dd2:	3b15      	subs	r3, #21
 8009dd4:	f023 0303 	bic.w	r3, r3, #3
 8009dd8:	3415      	adds	r4, #21
 8009dda:	3304      	adds	r3, #4
 8009ddc:	42a6      	cmp	r6, r4
 8009dde:	bf38      	it	cc
 8009de0:	2304      	movcc	r3, #4
 8009de2:	441d      	add	r5, r3
 8009de4:	445b      	add	r3, fp
 8009de6:	461e      	mov	r6, r3
 8009de8:	462c      	mov	r4, r5
 8009dea:	4544      	cmp	r4, r8
 8009dec:	d30e      	bcc.n	8009e0c <__mdiff+0xf8>
 8009dee:	f108 0103 	add.w	r1, r8, #3
 8009df2:	1b49      	subs	r1, r1, r5
 8009df4:	f021 0103 	bic.w	r1, r1, #3
 8009df8:	3d03      	subs	r5, #3
 8009dfa:	45a8      	cmp	r8, r5
 8009dfc:	bf38      	it	cc
 8009dfe:	2100      	movcc	r1, #0
 8009e00:	440b      	add	r3, r1
 8009e02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e06:	b191      	cbz	r1, 8009e2e <__mdiff+0x11a>
 8009e08:	6117      	str	r7, [r2, #16]
 8009e0a:	e79d      	b.n	8009d48 <__mdiff+0x34>
 8009e0c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e10:	46e6      	mov	lr, ip
 8009e12:	0c08      	lsrs	r0, r1, #16
 8009e14:	fa1c fc81 	uxtah	ip, ip, r1
 8009e18:	4471      	add	r1, lr
 8009e1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e24:	f846 1b04 	str.w	r1, [r6], #4
 8009e28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e2c:	e7dd      	b.n	8009dea <__mdiff+0xd6>
 8009e2e:	3f01      	subs	r7, #1
 8009e30:	e7e7      	b.n	8009e02 <__mdiff+0xee>
 8009e32:	bf00      	nop
 8009e34:	0800c219 	.word	0x0800c219
 8009e38:	0800c22a 	.word	0x0800c22a

08009e3c <__ulp>:
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	ed8d 0b00 	vstr	d0, [sp]
 8009e42:	9a01      	ldr	r2, [sp, #4]
 8009e44:	4b0f      	ldr	r3, [pc, #60]	@ (8009e84 <__ulp+0x48>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dc08      	bgt.n	8009e62 <__ulp+0x26>
 8009e50:	425b      	negs	r3, r3
 8009e52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009e56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e5a:	da04      	bge.n	8009e66 <__ulp+0x2a>
 8009e5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009e60:	4113      	asrs	r3, r2
 8009e62:	2200      	movs	r2, #0
 8009e64:	e008      	b.n	8009e78 <__ulp+0x3c>
 8009e66:	f1a2 0314 	sub.w	r3, r2, #20
 8009e6a:	2b1e      	cmp	r3, #30
 8009e6c:	bfda      	itte	le
 8009e6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e72:	40da      	lsrle	r2, r3
 8009e74:	2201      	movgt	r2, #1
 8009e76:	2300      	movs	r3, #0
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4610      	mov	r0, r2
 8009e7c:	ec41 0b10 	vmov	d0, r0, r1
 8009e80:	b002      	add	sp, #8
 8009e82:	4770      	bx	lr
 8009e84:	7ff00000 	.word	0x7ff00000

08009e88 <__b2d>:
 8009e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e8c:	6906      	ldr	r6, [r0, #16]
 8009e8e:	f100 0814 	add.w	r8, r0, #20
 8009e92:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e96:	1f37      	subs	r7, r6, #4
 8009e98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	f7ff fd4b 	bl	8009938 <__hi0bits>
 8009ea2:	f1c0 0320 	rsb	r3, r0, #32
 8009ea6:	280a      	cmp	r0, #10
 8009ea8:	600b      	str	r3, [r1, #0]
 8009eaa:	491b      	ldr	r1, [pc, #108]	@ (8009f18 <__b2d+0x90>)
 8009eac:	dc15      	bgt.n	8009eda <__b2d+0x52>
 8009eae:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eb2:	fa22 f30c 	lsr.w	r3, r2, ip
 8009eb6:	45b8      	cmp	r8, r7
 8009eb8:	ea43 0501 	orr.w	r5, r3, r1
 8009ebc:	bf34      	ite	cc
 8009ebe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ec2:	2300      	movcs	r3, #0
 8009ec4:	3015      	adds	r0, #21
 8009ec6:	fa02 f000 	lsl.w	r0, r2, r0
 8009eca:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ece:	4303      	orrs	r3, r0
 8009ed0:	461c      	mov	r4, r3
 8009ed2:	ec45 4b10 	vmov	d0, r4, r5
 8009ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eda:	45b8      	cmp	r8, r7
 8009edc:	bf3a      	itte	cc
 8009ede:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ee2:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ee6:	2300      	movcs	r3, #0
 8009ee8:	380b      	subs	r0, #11
 8009eea:	d012      	beq.n	8009f12 <__b2d+0x8a>
 8009eec:	f1c0 0120 	rsb	r1, r0, #32
 8009ef0:	fa23 f401 	lsr.w	r4, r3, r1
 8009ef4:	4082      	lsls	r2, r0
 8009ef6:	4322      	orrs	r2, r4
 8009ef8:	4547      	cmp	r7, r8
 8009efa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009efe:	bf8c      	ite	hi
 8009f00:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f04:	2200      	movls	r2, #0
 8009f06:	4083      	lsls	r3, r0
 8009f08:	40ca      	lsrs	r2, r1
 8009f0a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	e7de      	b.n	8009ed0 <__b2d+0x48>
 8009f12:	ea42 0501 	orr.w	r5, r2, r1
 8009f16:	e7db      	b.n	8009ed0 <__b2d+0x48>
 8009f18:	3ff00000 	.word	0x3ff00000

08009f1c <__d2b>:
 8009f1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f20:	460f      	mov	r7, r1
 8009f22:	2101      	movs	r1, #1
 8009f24:	ec59 8b10 	vmov	r8, r9, d0
 8009f28:	4616      	mov	r6, r2
 8009f2a:	f7ff fc13 	bl	8009754 <_Balloc>
 8009f2e:	4604      	mov	r4, r0
 8009f30:	b930      	cbnz	r0, 8009f40 <__d2b+0x24>
 8009f32:	4602      	mov	r2, r0
 8009f34:	4b23      	ldr	r3, [pc, #140]	@ (8009fc4 <__d2b+0xa8>)
 8009f36:	4824      	ldr	r0, [pc, #144]	@ (8009fc8 <__d2b+0xac>)
 8009f38:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f3c:	f001 f944 	bl	800b1c8 <__assert_func>
 8009f40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f48:	b10d      	cbz	r5, 8009f4e <__d2b+0x32>
 8009f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f4e:	9301      	str	r3, [sp, #4]
 8009f50:	f1b8 0300 	subs.w	r3, r8, #0
 8009f54:	d023      	beq.n	8009f9e <__d2b+0x82>
 8009f56:	4668      	mov	r0, sp
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	f7ff fd0c 	bl	8009976 <__lo0bits>
 8009f5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f62:	b1d0      	cbz	r0, 8009f9a <__d2b+0x7e>
 8009f64:	f1c0 0320 	rsb	r3, r0, #32
 8009f68:	fa02 f303 	lsl.w	r3, r2, r3
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	40c2      	lsrs	r2, r0
 8009f70:	6163      	str	r3, [r4, #20]
 8009f72:	9201      	str	r2, [sp, #4]
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	61a3      	str	r3, [r4, #24]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bf0c      	ite	eq
 8009f7c:	2201      	moveq	r2, #1
 8009f7e:	2202      	movne	r2, #2
 8009f80:	6122      	str	r2, [r4, #16]
 8009f82:	b1a5      	cbz	r5, 8009fae <__d2b+0x92>
 8009f84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f88:	4405      	add	r5, r0
 8009f8a:	603d      	str	r5, [r7, #0]
 8009f8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f90:	6030      	str	r0, [r6, #0]
 8009f92:	4620      	mov	r0, r4
 8009f94:	b003      	add	sp, #12
 8009f96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f9a:	6161      	str	r1, [r4, #20]
 8009f9c:	e7ea      	b.n	8009f74 <__d2b+0x58>
 8009f9e:	a801      	add	r0, sp, #4
 8009fa0:	f7ff fce9 	bl	8009976 <__lo0bits>
 8009fa4:	9b01      	ldr	r3, [sp, #4]
 8009fa6:	6163      	str	r3, [r4, #20]
 8009fa8:	3020      	adds	r0, #32
 8009faa:	2201      	movs	r2, #1
 8009fac:	e7e8      	b.n	8009f80 <__d2b+0x64>
 8009fae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009fb6:	6038      	str	r0, [r7, #0]
 8009fb8:	6918      	ldr	r0, [r3, #16]
 8009fba:	f7ff fcbd 	bl	8009938 <__hi0bits>
 8009fbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fc2:	e7e5      	b.n	8009f90 <__d2b+0x74>
 8009fc4:	0800c219 	.word	0x0800c219
 8009fc8:	0800c22a 	.word	0x0800c22a

08009fcc <__ratio>:
 8009fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	4688      	mov	r8, r1
 8009fd2:	4669      	mov	r1, sp
 8009fd4:	4681      	mov	r9, r0
 8009fd6:	f7ff ff57 	bl	8009e88 <__b2d>
 8009fda:	a901      	add	r1, sp, #4
 8009fdc:	4640      	mov	r0, r8
 8009fde:	ec55 4b10 	vmov	r4, r5, d0
 8009fe2:	f7ff ff51 	bl	8009e88 <__b2d>
 8009fe6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009fea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8009ff4:	1a5b      	subs	r3, r3, r1
 8009ff6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8009ffa:	ec57 6b10 	vmov	r6, r7, d0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	bfd6      	itet	le
 800a002:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a006:	462a      	movgt	r2, r5
 800a008:	463a      	movle	r2, r7
 800a00a:	46ab      	mov	fp, r5
 800a00c:	46a2      	mov	sl, r4
 800a00e:	bfce      	itee	gt
 800a010:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a014:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a018:	ee00 3a90 	vmovle	s1, r3
 800a01c:	ec4b ab17 	vmov	d7, sl, fp
 800a020:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a024:	b003      	add	sp, #12
 800a026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a02a <__copybits>:
 800a02a:	3901      	subs	r1, #1
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	1149      	asrs	r1, r1, #5
 800a030:	6914      	ldr	r4, [r2, #16]
 800a032:	3101      	adds	r1, #1
 800a034:	f102 0314 	add.w	r3, r2, #20
 800a038:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a03c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a040:	1f05      	subs	r5, r0, #4
 800a042:	42a3      	cmp	r3, r4
 800a044:	d30c      	bcc.n	800a060 <__copybits+0x36>
 800a046:	1aa3      	subs	r3, r4, r2
 800a048:	3b11      	subs	r3, #17
 800a04a:	f023 0303 	bic.w	r3, r3, #3
 800a04e:	3211      	adds	r2, #17
 800a050:	42a2      	cmp	r2, r4
 800a052:	bf88      	it	hi
 800a054:	2300      	movhi	r3, #0
 800a056:	4418      	add	r0, r3
 800a058:	2300      	movs	r3, #0
 800a05a:	4288      	cmp	r0, r1
 800a05c:	d305      	bcc.n	800a06a <__copybits+0x40>
 800a05e:	bd70      	pop	{r4, r5, r6, pc}
 800a060:	f853 6b04 	ldr.w	r6, [r3], #4
 800a064:	f845 6f04 	str.w	r6, [r5, #4]!
 800a068:	e7eb      	b.n	800a042 <__copybits+0x18>
 800a06a:	f840 3b04 	str.w	r3, [r0], #4
 800a06e:	e7f4      	b.n	800a05a <__copybits+0x30>

0800a070 <__any_on>:
 800a070:	f100 0214 	add.w	r2, r0, #20
 800a074:	6900      	ldr	r0, [r0, #16]
 800a076:	114b      	asrs	r3, r1, #5
 800a078:	4298      	cmp	r0, r3
 800a07a:	b510      	push	{r4, lr}
 800a07c:	db11      	blt.n	800a0a2 <__any_on+0x32>
 800a07e:	dd0a      	ble.n	800a096 <__any_on+0x26>
 800a080:	f011 011f 	ands.w	r1, r1, #31
 800a084:	d007      	beq.n	800a096 <__any_on+0x26>
 800a086:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a08a:	fa24 f001 	lsr.w	r0, r4, r1
 800a08e:	fa00 f101 	lsl.w	r1, r0, r1
 800a092:	428c      	cmp	r4, r1
 800a094:	d10b      	bne.n	800a0ae <__any_on+0x3e>
 800a096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d803      	bhi.n	800a0a6 <__any_on+0x36>
 800a09e:	2000      	movs	r0, #0
 800a0a0:	bd10      	pop	{r4, pc}
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	e7f7      	b.n	800a096 <__any_on+0x26>
 800a0a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0aa:	2900      	cmp	r1, #0
 800a0ac:	d0f5      	beq.n	800a09a <__any_on+0x2a>
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e7f6      	b.n	800a0a0 <__any_on+0x30>

0800a0b2 <sulp>:
 800a0b2:	b570      	push	{r4, r5, r6, lr}
 800a0b4:	4604      	mov	r4, r0
 800a0b6:	460d      	mov	r5, r1
 800a0b8:	4616      	mov	r6, r2
 800a0ba:	ec45 4b10 	vmov	d0, r4, r5
 800a0be:	f7ff febd 	bl	8009e3c <__ulp>
 800a0c2:	b17e      	cbz	r6, 800a0e4 <sulp+0x32>
 800a0c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dd09      	ble.n	800a0e4 <sulp+0x32>
 800a0d0:	051b      	lsls	r3, r3, #20
 800a0d2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a0d6:	2000      	movs	r0, #0
 800a0d8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a0dc:	ec41 0b17 	vmov	d7, r0, r1
 800a0e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a0e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a0e8 <_strtod_l>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	ed2d 8b0a 	vpush	{d8-d12}
 800a0f0:	b097      	sub	sp, #92	@ 0x5c
 800a0f2:	4688      	mov	r8, r1
 800a0f4:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	9212      	str	r2, [sp, #72]	@ 0x48
 800a0fa:	9005      	str	r0, [sp, #20]
 800a0fc:	f04f 0a00 	mov.w	sl, #0
 800a100:	f04f 0b00 	mov.w	fp, #0
 800a104:	460a      	mov	r2, r1
 800a106:	9211      	str	r2, [sp, #68]	@ 0x44
 800a108:	7811      	ldrb	r1, [r2, #0]
 800a10a:	292b      	cmp	r1, #43	@ 0x2b
 800a10c:	d04c      	beq.n	800a1a8 <_strtod_l+0xc0>
 800a10e:	d839      	bhi.n	800a184 <_strtod_l+0x9c>
 800a110:	290d      	cmp	r1, #13
 800a112:	d833      	bhi.n	800a17c <_strtod_l+0x94>
 800a114:	2908      	cmp	r1, #8
 800a116:	d833      	bhi.n	800a180 <_strtod_l+0x98>
 800a118:	2900      	cmp	r1, #0
 800a11a:	d03c      	beq.n	800a196 <_strtod_l+0xae>
 800a11c:	2200      	movs	r2, #0
 800a11e:	9208      	str	r2, [sp, #32]
 800a120:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a122:	782a      	ldrb	r2, [r5, #0]
 800a124:	2a30      	cmp	r2, #48	@ 0x30
 800a126:	f040 80b5 	bne.w	800a294 <_strtod_l+0x1ac>
 800a12a:	786a      	ldrb	r2, [r5, #1]
 800a12c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a130:	2a58      	cmp	r2, #88	@ 0x58
 800a132:	d170      	bne.n	800a216 <_strtod_l+0x12e>
 800a134:	9302      	str	r3, [sp, #8]
 800a136:	9b08      	ldr	r3, [sp, #32]
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	ab12      	add	r3, sp, #72	@ 0x48
 800a13c:	9300      	str	r3, [sp, #0]
 800a13e:	4a8b      	ldr	r2, [pc, #556]	@ (800a36c <_strtod_l+0x284>)
 800a140:	9805      	ldr	r0, [sp, #20]
 800a142:	ab13      	add	r3, sp, #76	@ 0x4c
 800a144:	a911      	add	r1, sp, #68	@ 0x44
 800a146:	f001 f8d9 	bl	800b2fc <__gethex>
 800a14a:	f010 060f 	ands.w	r6, r0, #15
 800a14e:	4604      	mov	r4, r0
 800a150:	d005      	beq.n	800a15e <_strtod_l+0x76>
 800a152:	2e06      	cmp	r6, #6
 800a154:	d12a      	bne.n	800a1ac <_strtod_l+0xc4>
 800a156:	3501      	adds	r5, #1
 800a158:	2300      	movs	r3, #0
 800a15a:	9511      	str	r5, [sp, #68]	@ 0x44
 800a15c:	9308      	str	r3, [sp, #32]
 800a15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a160:	2b00      	cmp	r3, #0
 800a162:	f040 852f 	bne.w	800abc4 <_strtod_l+0xadc>
 800a166:	9b08      	ldr	r3, [sp, #32]
 800a168:	ec4b ab10 	vmov	d0, sl, fp
 800a16c:	b1cb      	cbz	r3, 800a1a2 <_strtod_l+0xba>
 800a16e:	eeb1 0b40 	vneg.f64	d0, d0
 800a172:	b017      	add	sp, #92	@ 0x5c
 800a174:	ecbd 8b0a 	vpop	{d8-d12}
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	2920      	cmp	r1, #32
 800a17e:	d1cd      	bne.n	800a11c <_strtod_l+0x34>
 800a180:	3201      	adds	r2, #1
 800a182:	e7c0      	b.n	800a106 <_strtod_l+0x1e>
 800a184:	292d      	cmp	r1, #45	@ 0x2d
 800a186:	d1c9      	bne.n	800a11c <_strtod_l+0x34>
 800a188:	2101      	movs	r1, #1
 800a18a:	9108      	str	r1, [sp, #32]
 800a18c:	1c51      	adds	r1, r2, #1
 800a18e:	9111      	str	r1, [sp, #68]	@ 0x44
 800a190:	7852      	ldrb	r2, [r2, #1]
 800a192:	2a00      	cmp	r2, #0
 800a194:	d1c4      	bne.n	800a120 <_strtod_l+0x38>
 800a196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a198:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f040 850f 	bne.w	800abc0 <_strtod_l+0xad8>
 800a1a2:	ec4b ab10 	vmov	d0, sl, fp
 800a1a6:	e7e4      	b.n	800a172 <_strtod_l+0x8a>
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	e7ee      	b.n	800a18a <_strtod_l+0xa2>
 800a1ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1ae:	b13a      	cbz	r2, 800a1c0 <_strtod_l+0xd8>
 800a1b0:	2135      	movs	r1, #53	@ 0x35
 800a1b2:	a814      	add	r0, sp, #80	@ 0x50
 800a1b4:	f7ff ff39 	bl	800a02a <__copybits>
 800a1b8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a1ba:	9805      	ldr	r0, [sp, #20]
 800a1bc:	f7ff fb0a 	bl	80097d4 <_Bfree>
 800a1c0:	1e73      	subs	r3, r6, #1
 800a1c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	d806      	bhi.n	800a1d6 <_strtod_l+0xee>
 800a1c8:	e8df f003 	tbb	[pc, r3]
 800a1cc:	201d0314 	.word	0x201d0314
 800a1d0:	14          	.byte	0x14
 800a1d1:	00          	.byte	0x00
 800a1d2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a1d6:	05e3      	lsls	r3, r4, #23
 800a1d8:	bf48      	it	mi
 800a1da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a1de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1e2:	0d1b      	lsrs	r3, r3, #20
 800a1e4:	051b      	lsls	r3, r3, #20
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1b9      	bne.n	800a15e <_strtod_l+0x76>
 800a1ea:	f7fe fba1 	bl	8008930 <__errno>
 800a1ee:	2322      	movs	r3, #34	@ 0x22
 800a1f0:	6003      	str	r3, [r0, #0]
 800a1f2:	e7b4      	b.n	800a15e <_strtod_l+0x76>
 800a1f4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a1f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a1fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a200:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a204:	e7e7      	b.n	800a1d6 <_strtod_l+0xee>
 800a206:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a374 <_strtod_l+0x28c>
 800a20a:	e7e4      	b.n	800a1d6 <_strtod_l+0xee>
 800a20c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a210:	f04f 3aff 	mov.w	sl, #4294967295
 800a214:	e7df      	b.n	800a1d6 <_strtod_l+0xee>
 800a216:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a218:	1c5a      	adds	r2, r3, #1
 800a21a:	9211      	str	r2, [sp, #68]	@ 0x44
 800a21c:	785b      	ldrb	r3, [r3, #1]
 800a21e:	2b30      	cmp	r3, #48	@ 0x30
 800a220:	d0f9      	beq.n	800a216 <_strtod_l+0x12e>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d09b      	beq.n	800a15e <_strtod_l+0x76>
 800a226:	2301      	movs	r3, #1
 800a228:	2600      	movs	r6, #0
 800a22a:	9307      	str	r3, [sp, #28]
 800a22c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a22e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a230:	46b1      	mov	r9, r6
 800a232:	4635      	mov	r5, r6
 800a234:	220a      	movs	r2, #10
 800a236:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a238:	7804      	ldrb	r4, [r0, #0]
 800a23a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a23e:	b2d9      	uxtb	r1, r3
 800a240:	2909      	cmp	r1, #9
 800a242:	d929      	bls.n	800a298 <_strtod_l+0x1b0>
 800a244:	494a      	ldr	r1, [pc, #296]	@ (800a370 <_strtod_l+0x288>)
 800a246:	2201      	movs	r2, #1
 800a248:	f000 ff84 	bl	800b154 <strncmp>
 800a24c:	b378      	cbz	r0, 800a2ae <_strtod_l+0x1c6>
 800a24e:	2000      	movs	r0, #0
 800a250:	4622      	mov	r2, r4
 800a252:	462b      	mov	r3, r5
 800a254:	4607      	mov	r7, r0
 800a256:	9006      	str	r0, [sp, #24]
 800a258:	2a65      	cmp	r2, #101	@ 0x65
 800a25a:	d001      	beq.n	800a260 <_strtod_l+0x178>
 800a25c:	2a45      	cmp	r2, #69	@ 0x45
 800a25e:	d117      	bne.n	800a290 <_strtod_l+0x1a8>
 800a260:	b91b      	cbnz	r3, 800a26a <_strtod_l+0x182>
 800a262:	9b07      	ldr	r3, [sp, #28]
 800a264:	4303      	orrs	r3, r0
 800a266:	d096      	beq.n	800a196 <_strtod_l+0xae>
 800a268:	2300      	movs	r3, #0
 800a26a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a26e:	f108 0201 	add.w	r2, r8, #1
 800a272:	9211      	str	r2, [sp, #68]	@ 0x44
 800a274:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a278:	2a2b      	cmp	r2, #43	@ 0x2b
 800a27a:	d06b      	beq.n	800a354 <_strtod_l+0x26c>
 800a27c:	2a2d      	cmp	r2, #45	@ 0x2d
 800a27e:	d071      	beq.n	800a364 <_strtod_l+0x27c>
 800a280:	f04f 0e00 	mov.w	lr, #0
 800a284:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a288:	2c09      	cmp	r4, #9
 800a28a:	d979      	bls.n	800a380 <_strtod_l+0x298>
 800a28c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a290:	2400      	movs	r4, #0
 800a292:	e094      	b.n	800a3be <_strtod_l+0x2d6>
 800a294:	2300      	movs	r3, #0
 800a296:	e7c7      	b.n	800a228 <_strtod_l+0x140>
 800a298:	2d08      	cmp	r5, #8
 800a29a:	f100 0001 	add.w	r0, r0, #1
 800a29e:	bfd4      	ite	le
 800a2a0:	fb02 3909 	mlale	r9, r2, r9, r3
 800a2a4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	9011      	str	r0, [sp, #68]	@ 0x44
 800a2ac:	e7c3      	b.n	800a236 <_strtod_l+0x14e>
 800a2ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	9211      	str	r2, [sp, #68]	@ 0x44
 800a2b4:	785a      	ldrb	r2, [r3, #1]
 800a2b6:	b375      	cbz	r5, 800a316 <_strtod_l+0x22e>
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	462b      	mov	r3, r5
 800a2bc:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a2c0:	2909      	cmp	r1, #9
 800a2c2:	d913      	bls.n	800a2ec <_strtod_l+0x204>
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	9106      	str	r1, [sp, #24]
 800a2c8:	e7c6      	b.n	800a258 <_strtod_l+0x170>
 800a2ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	9211      	str	r2, [sp, #68]	@ 0x44
 800a2d0:	785a      	ldrb	r2, [r3, #1]
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	2a30      	cmp	r2, #48	@ 0x30
 800a2d6:	d0f8      	beq.n	800a2ca <_strtod_l+0x1e2>
 800a2d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a2dc:	2b08      	cmp	r3, #8
 800a2de:	f200 8476 	bhi.w	800abce <_strtod_l+0xae6>
 800a2e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	2000      	movs	r0, #0
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	3a30      	subs	r2, #48	@ 0x30
 800a2ee:	f100 0101 	add.w	r1, r0, #1
 800a2f2:	d023      	beq.n	800a33c <_strtod_l+0x254>
 800a2f4:	440f      	add	r7, r1
 800a2f6:	eb00 0c03 	add.w	ip, r0, r3
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	240a      	movs	r4, #10
 800a2fe:	4561      	cmp	r1, ip
 800a300:	d10b      	bne.n	800a31a <_strtod_l+0x232>
 800a302:	1c5c      	adds	r4, r3, #1
 800a304:	4403      	add	r3, r0
 800a306:	2b08      	cmp	r3, #8
 800a308:	4404      	add	r4, r0
 800a30a:	dc11      	bgt.n	800a330 <_strtod_l+0x248>
 800a30c:	230a      	movs	r3, #10
 800a30e:	fb03 2909 	mla	r9, r3, r9, r2
 800a312:	2100      	movs	r1, #0
 800a314:	e013      	b.n	800a33e <_strtod_l+0x256>
 800a316:	4628      	mov	r0, r5
 800a318:	e7dc      	b.n	800a2d4 <_strtod_l+0x1ec>
 800a31a:	2908      	cmp	r1, #8
 800a31c:	f101 0101 	add.w	r1, r1, #1
 800a320:	dc02      	bgt.n	800a328 <_strtod_l+0x240>
 800a322:	fb04 f909 	mul.w	r9, r4, r9
 800a326:	e7ea      	b.n	800a2fe <_strtod_l+0x216>
 800a328:	2910      	cmp	r1, #16
 800a32a:	bfd8      	it	le
 800a32c:	4366      	mulle	r6, r4
 800a32e:	e7e6      	b.n	800a2fe <_strtod_l+0x216>
 800a330:	2b0f      	cmp	r3, #15
 800a332:	dcee      	bgt.n	800a312 <_strtod_l+0x22a>
 800a334:	230a      	movs	r3, #10
 800a336:	fb03 2606 	mla	r6, r3, r6, r2
 800a33a:	e7ea      	b.n	800a312 <_strtod_l+0x22a>
 800a33c:	461c      	mov	r4, r3
 800a33e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	9211      	str	r2, [sp, #68]	@ 0x44
 800a344:	785a      	ldrb	r2, [r3, #1]
 800a346:	4608      	mov	r0, r1
 800a348:	4623      	mov	r3, r4
 800a34a:	e7b7      	b.n	800a2bc <_strtod_l+0x1d4>
 800a34c:	2301      	movs	r3, #1
 800a34e:	2700      	movs	r7, #0
 800a350:	9306      	str	r3, [sp, #24]
 800a352:	e786      	b.n	800a262 <_strtod_l+0x17a>
 800a354:	f04f 0e00 	mov.w	lr, #0
 800a358:	f108 0202 	add.w	r2, r8, #2
 800a35c:	9211      	str	r2, [sp, #68]	@ 0x44
 800a35e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a362:	e78f      	b.n	800a284 <_strtod_l+0x19c>
 800a364:	f04f 0e01 	mov.w	lr, #1
 800a368:	e7f6      	b.n	800a358 <_strtod_l+0x270>
 800a36a:	bf00      	nop
 800a36c:	0800c398 	.word	0x0800c398
 800a370:	0800c380 	.word	0x0800c380
 800a374:	7ff00000 	.word	0x7ff00000
 800a378:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a37a:	1c54      	adds	r4, r2, #1
 800a37c:	9411      	str	r4, [sp, #68]	@ 0x44
 800a37e:	7852      	ldrb	r2, [r2, #1]
 800a380:	2a30      	cmp	r2, #48	@ 0x30
 800a382:	d0f9      	beq.n	800a378 <_strtod_l+0x290>
 800a384:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a388:	2c08      	cmp	r4, #8
 800a38a:	d881      	bhi.n	800a290 <_strtod_l+0x1a8>
 800a38c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a390:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a392:	9209      	str	r2, [sp, #36]	@ 0x24
 800a394:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a396:	1c51      	adds	r1, r2, #1
 800a398:	9111      	str	r1, [sp, #68]	@ 0x44
 800a39a:	7852      	ldrb	r2, [r2, #1]
 800a39c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a3a0:	2c09      	cmp	r4, #9
 800a3a2:	d938      	bls.n	800a416 <_strtod_l+0x32e>
 800a3a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a3a6:	1b0c      	subs	r4, r1, r4
 800a3a8:	2c08      	cmp	r4, #8
 800a3aa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a3ae:	dc02      	bgt.n	800a3b6 <_strtod_l+0x2ce>
 800a3b0:	4564      	cmp	r4, ip
 800a3b2:	bfa8      	it	ge
 800a3b4:	4664      	movge	r4, ip
 800a3b6:	f1be 0f00 	cmp.w	lr, #0
 800a3ba:	d000      	beq.n	800a3be <_strtod_l+0x2d6>
 800a3bc:	4264      	negs	r4, r4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d14e      	bne.n	800a460 <_strtod_l+0x378>
 800a3c2:	9b07      	ldr	r3, [sp, #28]
 800a3c4:	4318      	orrs	r0, r3
 800a3c6:	f47f aeca 	bne.w	800a15e <_strtod_l+0x76>
 800a3ca:	9b06      	ldr	r3, [sp, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f47f aee2 	bne.w	800a196 <_strtod_l+0xae>
 800a3d2:	2a69      	cmp	r2, #105	@ 0x69
 800a3d4:	d027      	beq.n	800a426 <_strtod_l+0x33e>
 800a3d6:	dc24      	bgt.n	800a422 <_strtod_l+0x33a>
 800a3d8:	2a49      	cmp	r2, #73	@ 0x49
 800a3da:	d024      	beq.n	800a426 <_strtod_l+0x33e>
 800a3dc:	2a4e      	cmp	r2, #78	@ 0x4e
 800a3de:	f47f aeda 	bne.w	800a196 <_strtod_l+0xae>
 800a3e2:	4997      	ldr	r1, [pc, #604]	@ (800a640 <_strtod_l+0x558>)
 800a3e4:	a811      	add	r0, sp, #68	@ 0x44
 800a3e6:	f001 f9ab 	bl	800b740 <__match>
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	f43f aed3 	beq.w	800a196 <_strtod_l+0xae>
 800a3f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b28      	cmp	r3, #40	@ 0x28
 800a3f6:	d12d      	bne.n	800a454 <_strtod_l+0x36c>
 800a3f8:	4992      	ldr	r1, [pc, #584]	@ (800a644 <_strtod_l+0x55c>)
 800a3fa:	aa14      	add	r2, sp, #80	@ 0x50
 800a3fc:	a811      	add	r0, sp, #68	@ 0x44
 800a3fe:	f001 f9b3 	bl	800b768 <__hexnan>
 800a402:	2805      	cmp	r0, #5
 800a404:	d126      	bne.n	800a454 <_strtod_l+0x36c>
 800a406:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a408:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a40c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a410:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a414:	e6a3      	b.n	800a15e <_strtod_l+0x76>
 800a416:	240a      	movs	r4, #10
 800a418:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a41c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a420:	e7b8      	b.n	800a394 <_strtod_l+0x2ac>
 800a422:	2a6e      	cmp	r2, #110	@ 0x6e
 800a424:	e7db      	b.n	800a3de <_strtod_l+0x2f6>
 800a426:	4988      	ldr	r1, [pc, #544]	@ (800a648 <_strtod_l+0x560>)
 800a428:	a811      	add	r0, sp, #68	@ 0x44
 800a42a:	f001 f989 	bl	800b740 <__match>
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f aeb1 	beq.w	800a196 <_strtod_l+0xae>
 800a434:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a436:	4985      	ldr	r1, [pc, #532]	@ (800a64c <_strtod_l+0x564>)
 800a438:	3b01      	subs	r3, #1
 800a43a:	a811      	add	r0, sp, #68	@ 0x44
 800a43c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a43e:	f001 f97f 	bl	800b740 <__match>
 800a442:	b910      	cbnz	r0, 800a44a <_strtod_l+0x362>
 800a444:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a446:	3301      	adds	r3, #1
 800a448:	9311      	str	r3, [sp, #68]	@ 0x44
 800a44a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a660 <_strtod_l+0x578>
 800a44e:	f04f 0a00 	mov.w	sl, #0
 800a452:	e684      	b.n	800a15e <_strtod_l+0x76>
 800a454:	487e      	ldr	r0, [pc, #504]	@ (800a650 <_strtod_l+0x568>)
 800a456:	f000 feaf 	bl	800b1b8 <nan>
 800a45a:	ec5b ab10 	vmov	sl, fp, d0
 800a45e:	e67e      	b.n	800a15e <_strtod_l+0x76>
 800a460:	ee07 9a90 	vmov	s15, r9
 800a464:	1be2      	subs	r2, r4, r7
 800a466:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a46a:	2d00      	cmp	r5, #0
 800a46c:	bf08      	it	eq
 800a46e:	461d      	moveq	r5, r3
 800a470:	2b10      	cmp	r3, #16
 800a472:	9209      	str	r2, [sp, #36]	@ 0x24
 800a474:	461a      	mov	r2, r3
 800a476:	bfa8      	it	ge
 800a478:	2210      	movge	r2, #16
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	ec5b ab17 	vmov	sl, fp, d7
 800a480:	dc15      	bgt.n	800a4ae <_strtod_l+0x3c6>
 800a482:	1be1      	subs	r1, r4, r7
 800a484:	2900      	cmp	r1, #0
 800a486:	f43f ae6a 	beq.w	800a15e <_strtod_l+0x76>
 800a48a:	eba4 0107 	sub.w	r1, r4, r7
 800a48e:	dd72      	ble.n	800a576 <_strtod_l+0x48e>
 800a490:	2916      	cmp	r1, #22
 800a492:	dc59      	bgt.n	800a548 <_strtod_l+0x460>
 800a494:	4b6f      	ldr	r3, [pc, #444]	@ (800a654 <_strtod_l+0x56c>)
 800a496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a49c:	ed93 7b00 	vldr	d7, [r3]
 800a4a0:	ec4b ab16 	vmov	d6, sl, fp
 800a4a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4a8:	ec5b ab17 	vmov	sl, fp, d7
 800a4ac:	e657      	b.n	800a15e <_strtod_l+0x76>
 800a4ae:	4969      	ldr	r1, [pc, #420]	@ (800a654 <_strtod_l+0x56c>)
 800a4b0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a4b4:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a4b8:	ee06 6a90 	vmov	s13, r6
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a4c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a4c6:	ec5b ab16 	vmov	sl, fp, d6
 800a4ca:	ddda      	ble.n	800a482 <_strtod_l+0x39a>
 800a4cc:	1a9a      	subs	r2, r3, r2
 800a4ce:	1be1      	subs	r1, r4, r7
 800a4d0:	440a      	add	r2, r1
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	f340 8094 	ble.w	800a600 <_strtod_l+0x518>
 800a4d8:	f012 000f 	ands.w	r0, r2, #15
 800a4dc:	d00a      	beq.n	800a4f4 <_strtod_l+0x40c>
 800a4de:	495d      	ldr	r1, [pc, #372]	@ (800a654 <_strtod_l+0x56c>)
 800a4e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a4e4:	ed91 7b00 	vldr	d7, [r1]
 800a4e8:	ec4b ab16 	vmov	d6, sl, fp
 800a4ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4f0:	ec5b ab17 	vmov	sl, fp, d7
 800a4f4:	f032 020f 	bics.w	r2, r2, #15
 800a4f8:	d073      	beq.n	800a5e2 <_strtod_l+0x4fa>
 800a4fa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a4fe:	dd47      	ble.n	800a590 <_strtod_l+0x4a8>
 800a500:	2400      	movs	r4, #0
 800a502:	4625      	mov	r5, r4
 800a504:	9407      	str	r4, [sp, #28]
 800a506:	4626      	mov	r6, r4
 800a508:	9a05      	ldr	r2, [sp, #20]
 800a50a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a660 <_strtod_l+0x578>
 800a50e:	2322      	movs	r3, #34	@ 0x22
 800a510:	6013      	str	r3, [r2, #0]
 800a512:	f04f 0a00 	mov.w	sl, #0
 800a516:	9b07      	ldr	r3, [sp, #28]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f43f ae20 	beq.w	800a15e <_strtod_l+0x76>
 800a51e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a520:	9805      	ldr	r0, [sp, #20]
 800a522:	f7ff f957 	bl	80097d4 <_Bfree>
 800a526:	9805      	ldr	r0, [sp, #20]
 800a528:	4631      	mov	r1, r6
 800a52a:	f7ff f953 	bl	80097d4 <_Bfree>
 800a52e:	9805      	ldr	r0, [sp, #20]
 800a530:	4629      	mov	r1, r5
 800a532:	f7ff f94f 	bl	80097d4 <_Bfree>
 800a536:	9907      	ldr	r1, [sp, #28]
 800a538:	9805      	ldr	r0, [sp, #20]
 800a53a:	f7ff f94b 	bl	80097d4 <_Bfree>
 800a53e:	9805      	ldr	r0, [sp, #20]
 800a540:	4621      	mov	r1, r4
 800a542:	f7ff f947 	bl	80097d4 <_Bfree>
 800a546:	e60a      	b.n	800a15e <_strtod_l+0x76>
 800a548:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a54c:	1be0      	subs	r0, r4, r7
 800a54e:	4281      	cmp	r1, r0
 800a550:	dbbc      	blt.n	800a4cc <_strtod_l+0x3e4>
 800a552:	4a40      	ldr	r2, [pc, #256]	@ (800a654 <_strtod_l+0x56c>)
 800a554:	f1c3 030f 	rsb	r3, r3, #15
 800a558:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a55c:	ed91 7b00 	vldr	d7, [r1]
 800a560:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a562:	ec4b ab16 	vmov	d6, sl, fp
 800a566:	1acb      	subs	r3, r1, r3
 800a568:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a56c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a570:	ed92 6b00 	vldr	d6, [r2]
 800a574:	e796      	b.n	800a4a4 <_strtod_l+0x3bc>
 800a576:	3116      	adds	r1, #22
 800a578:	dba8      	blt.n	800a4cc <_strtod_l+0x3e4>
 800a57a:	4b36      	ldr	r3, [pc, #216]	@ (800a654 <_strtod_l+0x56c>)
 800a57c:	1b3c      	subs	r4, r7, r4
 800a57e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a582:	ed94 7b00 	vldr	d7, [r4]
 800a586:	ec4b ab16 	vmov	d6, sl, fp
 800a58a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a58e:	e78b      	b.n	800a4a8 <_strtod_l+0x3c0>
 800a590:	2000      	movs	r0, #0
 800a592:	ec4b ab17 	vmov	d7, sl, fp
 800a596:	4e30      	ldr	r6, [pc, #192]	@ (800a658 <_strtod_l+0x570>)
 800a598:	1112      	asrs	r2, r2, #4
 800a59a:	4601      	mov	r1, r0
 800a59c:	2a01      	cmp	r2, #1
 800a59e:	dc23      	bgt.n	800a5e8 <_strtod_l+0x500>
 800a5a0:	b108      	cbz	r0, 800a5a6 <_strtod_l+0x4be>
 800a5a2:	ec5b ab17 	vmov	sl, fp, d7
 800a5a6:	4a2c      	ldr	r2, [pc, #176]	@ (800a658 <_strtod_l+0x570>)
 800a5a8:	482c      	ldr	r0, [pc, #176]	@ (800a65c <_strtod_l+0x574>)
 800a5aa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a5ae:	ed92 7b00 	vldr	d7, [r2]
 800a5b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a5b6:	ec4b ab16 	vmov	d6, sl, fp
 800a5ba:	4a29      	ldr	r2, [pc, #164]	@ (800a660 <_strtod_l+0x578>)
 800a5bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5c0:	ee17 1a90 	vmov	r1, s15
 800a5c4:	400a      	ands	r2, r1
 800a5c6:	4282      	cmp	r2, r0
 800a5c8:	ec5b ab17 	vmov	sl, fp, d7
 800a5cc:	d898      	bhi.n	800a500 <_strtod_l+0x418>
 800a5ce:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a5d2:	4282      	cmp	r2, r0
 800a5d4:	bf86      	itte	hi
 800a5d6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a664 <_strtod_l+0x57c>
 800a5da:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5de:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	9206      	str	r2, [sp, #24]
 800a5e6:	e076      	b.n	800a6d6 <_strtod_l+0x5ee>
 800a5e8:	f012 0f01 	tst.w	r2, #1
 800a5ec:	d004      	beq.n	800a5f8 <_strtod_l+0x510>
 800a5ee:	ed96 6b00 	vldr	d6, [r6]
 800a5f2:	2001      	movs	r0, #1
 800a5f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5f8:	3101      	adds	r1, #1
 800a5fa:	1052      	asrs	r2, r2, #1
 800a5fc:	3608      	adds	r6, #8
 800a5fe:	e7cd      	b.n	800a59c <_strtod_l+0x4b4>
 800a600:	d0ef      	beq.n	800a5e2 <_strtod_l+0x4fa>
 800a602:	4252      	negs	r2, r2
 800a604:	f012 000f 	ands.w	r0, r2, #15
 800a608:	d00a      	beq.n	800a620 <_strtod_l+0x538>
 800a60a:	4912      	ldr	r1, [pc, #72]	@ (800a654 <_strtod_l+0x56c>)
 800a60c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a610:	ed91 7b00 	vldr	d7, [r1]
 800a614:	ec4b ab16 	vmov	d6, sl, fp
 800a618:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a61c:	ec5b ab17 	vmov	sl, fp, d7
 800a620:	1112      	asrs	r2, r2, #4
 800a622:	d0de      	beq.n	800a5e2 <_strtod_l+0x4fa>
 800a624:	2a1f      	cmp	r2, #31
 800a626:	dd1f      	ble.n	800a668 <_strtod_l+0x580>
 800a628:	2400      	movs	r4, #0
 800a62a:	4625      	mov	r5, r4
 800a62c:	9407      	str	r4, [sp, #28]
 800a62e:	4626      	mov	r6, r4
 800a630:	9a05      	ldr	r2, [sp, #20]
 800a632:	2322      	movs	r3, #34	@ 0x22
 800a634:	f04f 0a00 	mov.w	sl, #0
 800a638:	f04f 0b00 	mov.w	fp, #0
 800a63c:	6013      	str	r3, [r2, #0]
 800a63e:	e76a      	b.n	800a516 <_strtod_l+0x42e>
 800a640:	0800c171 	.word	0x0800c171
 800a644:	0800c384 	.word	0x0800c384
 800a648:	0800c169 	.word	0x0800c169
 800a64c:	0800c1a0 	.word	0x0800c1a0
 800a650:	0800c52d 	.word	0x0800c52d
 800a654:	0800c2b8 	.word	0x0800c2b8
 800a658:	0800c290 	.word	0x0800c290
 800a65c:	7ca00000 	.word	0x7ca00000
 800a660:	7ff00000 	.word	0x7ff00000
 800a664:	7fefffff 	.word	0x7fefffff
 800a668:	f012 0110 	ands.w	r1, r2, #16
 800a66c:	bf18      	it	ne
 800a66e:	216a      	movne	r1, #106	@ 0x6a
 800a670:	9106      	str	r1, [sp, #24]
 800a672:	ec4b ab17 	vmov	d7, sl, fp
 800a676:	49b0      	ldr	r1, [pc, #704]	@ (800a938 <_strtod_l+0x850>)
 800a678:	2000      	movs	r0, #0
 800a67a:	07d6      	lsls	r6, r2, #31
 800a67c:	d504      	bpl.n	800a688 <_strtod_l+0x5a0>
 800a67e:	ed91 6b00 	vldr	d6, [r1]
 800a682:	2001      	movs	r0, #1
 800a684:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a688:	1052      	asrs	r2, r2, #1
 800a68a:	f101 0108 	add.w	r1, r1, #8
 800a68e:	d1f4      	bne.n	800a67a <_strtod_l+0x592>
 800a690:	b108      	cbz	r0, 800a696 <_strtod_l+0x5ae>
 800a692:	ec5b ab17 	vmov	sl, fp, d7
 800a696:	9a06      	ldr	r2, [sp, #24]
 800a698:	b1b2      	cbz	r2, 800a6c8 <_strtod_l+0x5e0>
 800a69a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a69e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	4658      	mov	r0, fp
 800a6a6:	dd0f      	ble.n	800a6c8 <_strtod_l+0x5e0>
 800a6a8:	2a1f      	cmp	r2, #31
 800a6aa:	dd55      	ble.n	800a758 <_strtod_l+0x670>
 800a6ac:	2a34      	cmp	r2, #52	@ 0x34
 800a6ae:	bfde      	ittt	le
 800a6b0:	f04f 32ff 	movle.w	r2, #4294967295
 800a6b4:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a6b8:	408a      	lslle	r2, r1
 800a6ba:	f04f 0a00 	mov.w	sl, #0
 800a6be:	bfcc      	ite	gt
 800a6c0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a6c4:	ea02 0b00 	andle.w	fp, r2, r0
 800a6c8:	ec4b ab17 	vmov	d7, sl, fp
 800a6cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d4:	d0a8      	beq.n	800a628 <_strtod_l+0x540>
 800a6d6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6d8:	9805      	ldr	r0, [sp, #20]
 800a6da:	f8cd 9000 	str.w	r9, [sp]
 800a6de:	462a      	mov	r2, r5
 800a6e0:	f7ff f8e0 	bl	80098a4 <__s2b>
 800a6e4:	9007      	str	r0, [sp, #28]
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	f43f af0a 	beq.w	800a500 <_strtod_l+0x418>
 800a6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ee:	1b3f      	subs	r7, r7, r4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfb4      	ite	lt
 800a6f4:	463b      	movlt	r3, r7
 800a6f6:	2300      	movge	r3, #0
 800a6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800a928 <_strtod_l+0x840>
 800a700:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a704:	2400      	movs	r4, #0
 800a706:	930d      	str	r3, [sp, #52]	@ 0x34
 800a708:	4625      	mov	r5, r4
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	9805      	ldr	r0, [sp, #20]
 800a70e:	6859      	ldr	r1, [r3, #4]
 800a710:	f7ff f820 	bl	8009754 <_Balloc>
 800a714:	4606      	mov	r6, r0
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f aef6 	beq.w	800a508 <_strtod_l+0x420>
 800a71c:	9b07      	ldr	r3, [sp, #28]
 800a71e:	691a      	ldr	r2, [r3, #16]
 800a720:	ec4b ab19 	vmov	d9, sl, fp
 800a724:	3202      	adds	r2, #2
 800a726:	f103 010c 	add.w	r1, r3, #12
 800a72a:	0092      	lsls	r2, r2, #2
 800a72c:	300c      	adds	r0, #12
 800a72e:	f000 fd33 	bl	800b198 <memcpy>
 800a732:	eeb0 0b49 	vmov.f64	d0, d9
 800a736:	9805      	ldr	r0, [sp, #20]
 800a738:	aa14      	add	r2, sp, #80	@ 0x50
 800a73a:	a913      	add	r1, sp, #76	@ 0x4c
 800a73c:	f7ff fbee 	bl	8009f1c <__d2b>
 800a740:	9012      	str	r0, [sp, #72]	@ 0x48
 800a742:	2800      	cmp	r0, #0
 800a744:	f43f aee0 	beq.w	800a508 <_strtod_l+0x420>
 800a748:	9805      	ldr	r0, [sp, #20]
 800a74a:	2101      	movs	r1, #1
 800a74c:	f7ff f940 	bl	80099d0 <__i2b>
 800a750:	4605      	mov	r5, r0
 800a752:	b940      	cbnz	r0, 800a766 <_strtod_l+0x67e>
 800a754:	2500      	movs	r5, #0
 800a756:	e6d7      	b.n	800a508 <_strtod_l+0x420>
 800a758:	f04f 31ff 	mov.w	r1, #4294967295
 800a75c:	fa01 f202 	lsl.w	r2, r1, r2
 800a760:	ea02 0a0a 	and.w	sl, r2, sl
 800a764:	e7b0      	b.n	800a6c8 <_strtod_l+0x5e0>
 800a766:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a768:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a76a:	2f00      	cmp	r7, #0
 800a76c:	bfab      	itete	ge
 800a76e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a770:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a772:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a776:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a77a:	bfac      	ite	ge
 800a77c:	eb07 0903 	addge.w	r9, r7, r3
 800a780:	eba3 0807 	sublt.w	r8, r3, r7
 800a784:	9b06      	ldr	r3, [sp, #24]
 800a786:	1aff      	subs	r7, r7, r3
 800a788:	4417      	add	r7, r2
 800a78a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a78e:	4a6b      	ldr	r2, [pc, #428]	@ (800a93c <_strtod_l+0x854>)
 800a790:	3f01      	subs	r7, #1
 800a792:	4297      	cmp	r7, r2
 800a794:	da51      	bge.n	800a83a <_strtod_l+0x752>
 800a796:	1bd1      	subs	r1, r2, r7
 800a798:	291f      	cmp	r1, #31
 800a79a:	eba3 0301 	sub.w	r3, r3, r1
 800a79e:	f04f 0201 	mov.w	r2, #1
 800a7a2:	dc3e      	bgt.n	800a822 <_strtod_l+0x73a>
 800a7a4:	408a      	lsls	r2, r1
 800a7a6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a7ac:	eb09 0703 	add.w	r7, r9, r3
 800a7b0:	4498      	add	r8, r3
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	45b9      	cmp	r9, r7
 800a7b6:	4498      	add	r8, r3
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	bfa8      	it	ge
 800a7bc:	463b      	movge	r3, r7
 800a7be:	4543      	cmp	r3, r8
 800a7c0:	bfa8      	it	ge
 800a7c2:	4643      	movge	r3, r8
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	bfc2      	ittt	gt
 800a7c8:	1aff      	subgt	r7, r7, r3
 800a7ca:	eba8 0803 	subgt.w	r8, r8, r3
 800a7ce:	eba9 0903 	subgt.w	r9, r9, r3
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	dd16      	ble.n	800a806 <_strtod_l+0x71e>
 800a7d8:	4629      	mov	r1, r5
 800a7da:	9805      	ldr	r0, [sp, #20]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	f7ff f9b7 	bl	8009b50 <__pow5mult>
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	d0b5      	beq.n	800a754 <_strtod_l+0x66c>
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a7ec:	9805      	ldr	r0, [sp, #20]
 800a7ee:	f7ff f905 	bl	80099fc <__multiply>
 800a7f2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f43f ae87 	beq.w	800a508 <_strtod_l+0x420>
 800a7fa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a7fc:	9805      	ldr	r0, [sp, #20]
 800a7fe:	f7fe ffe9 	bl	80097d4 <_Bfree>
 800a802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a804:	9312      	str	r3, [sp, #72]	@ 0x48
 800a806:	2f00      	cmp	r7, #0
 800a808:	dc1b      	bgt.n	800a842 <_strtod_l+0x75a>
 800a80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dd21      	ble.n	800a854 <_strtod_l+0x76c>
 800a810:	4631      	mov	r1, r6
 800a812:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a814:	9805      	ldr	r0, [sp, #20]
 800a816:	f7ff f99b 	bl	8009b50 <__pow5mult>
 800a81a:	4606      	mov	r6, r0
 800a81c:	b9d0      	cbnz	r0, 800a854 <_strtod_l+0x76c>
 800a81e:	2600      	movs	r6, #0
 800a820:	e672      	b.n	800a508 <_strtod_l+0x420>
 800a822:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800a826:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800a82a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800a82e:	37e2      	adds	r7, #226	@ 0xe2
 800a830:	fa02 f107 	lsl.w	r1, r2, r7
 800a834:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a836:	920c      	str	r2, [sp, #48]	@ 0x30
 800a838:	e7b8      	b.n	800a7ac <_strtod_l+0x6c4>
 800a83a:	2200      	movs	r2, #0
 800a83c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a83e:	2201      	movs	r2, #1
 800a840:	e7f9      	b.n	800a836 <_strtod_l+0x74e>
 800a842:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a844:	9805      	ldr	r0, [sp, #20]
 800a846:	463a      	mov	r2, r7
 800a848:	f7ff f9dc 	bl	8009c04 <__lshift>
 800a84c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a84e:	2800      	cmp	r0, #0
 800a850:	d1db      	bne.n	800a80a <_strtod_l+0x722>
 800a852:	e659      	b.n	800a508 <_strtod_l+0x420>
 800a854:	f1b8 0f00 	cmp.w	r8, #0
 800a858:	dd07      	ble.n	800a86a <_strtod_l+0x782>
 800a85a:	4631      	mov	r1, r6
 800a85c:	9805      	ldr	r0, [sp, #20]
 800a85e:	4642      	mov	r2, r8
 800a860:	f7ff f9d0 	bl	8009c04 <__lshift>
 800a864:	4606      	mov	r6, r0
 800a866:	2800      	cmp	r0, #0
 800a868:	d0d9      	beq.n	800a81e <_strtod_l+0x736>
 800a86a:	f1b9 0f00 	cmp.w	r9, #0
 800a86e:	dd08      	ble.n	800a882 <_strtod_l+0x79a>
 800a870:	4629      	mov	r1, r5
 800a872:	9805      	ldr	r0, [sp, #20]
 800a874:	464a      	mov	r2, r9
 800a876:	f7ff f9c5 	bl	8009c04 <__lshift>
 800a87a:	4605      	mov	r5, r0
 800a87c:	2800      	cmp	r0, #0
 800a87e:	f43f ae43 	beq.w	800a508 <_strtod_l+0x420>
 800a882:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a884:	9805      	ldr	r0, [sp, #20]
 800a886:	4632      	mov	r2, r6
 800a888:	f7ff fa44 	bl	8009d14 <__mdiff>
 800a88c:	4604      	mov	r4, r0
 800a88e:	2800      	cmp	r0, #0
 800a890:	f43f ae3a 	beq.w	800a508 <_strtod_l+0x420>
 800a894:	2300      	movs	r3, #0
 800a896:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800a89a:	60c3      	str	r3, [r0, #12]
 800a89c:	4629      	mov	r1, r5
 800a89e:	f7ff fa1d 	bl	8009cdc <__mcmp>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	da4e      	bge.n	800a944 <_strtod_l+0x85c>
 800a8a6:	ea58 080a 	orrs.w	r8, r8, sl
 800a8aa:	d174      	bne.n	800a996 <_strtod_l+0x8ae>
 800a8ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d170      	bne.n	800a996 <_strtod_l+0x8ae>
 800a8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8b8:	0d1b      	lsrs	r3, r3, #20
 800a8ba:	051b      	lsls	r3, r3, #20
 800a8bc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8c0:	d969      	bls.n	800a996 <_strtod_l+0x8ae>
 800a8c2:	6963      	ldr	r3, [r4, #20]
 800a8c4:	b913      	cbnz	r3, 800a8cc <_strtod_l+0x7e4>
 800a8c6:	6923      	ldr	r3, [r4, #16]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	dd64      	ble.n	800a996 <_strtod_l+0x8ae>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	9805      	ldr	r0, [sp, #20]
 800a8d2:	f7ff f997 	bl	8009c04 <__lshift>
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4604      	mov	r4, r0
 800a8da:	f7ff f9ff 	bl	8009cdc <__mcmp>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	dd59      	ble.n	800a996 <_strtod_l+0x8ae>
 800a8e2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8e6:	9a06      	ldr	r2, [sp, #24]
 800a8e8:	0d1b      	lsrs	r3, r3, #20
 800a8ea:	051b      	lsls	r3, r3, #20
 800a8ec:	2a00      	cmp	r2, #0
 800a8ee:	d070      	beq.n	800a9d2 <_strtod_l+0x8ea>
 800a8f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8f4:	d86d      	bhi.n	800a9d2 <_strtod_l+0x8ea>
 800a8f6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a8fa:	f67f ae99 	bls.w	800a630 <_strtod_l+0x548>
 800a8fe:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800a930 <_strtod_l+0x848>
 800a902:	ec4b ab16 	vmov	d6, sl, fp
 800a906:	4b0e      	ldr	r3, [pc, #56]	@ (800a940 <_strtod_l+0x858>)
 800a908:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a90c:	ee17 2a90 	vmov	r2, s15
 800a910:	4013      	ands	r3, r2
 800a912:	ec5b ab17 	vmov	sl, fp, d7
 800a916:	2b00      	cmp	r3, #0
 800a918:	f47f ae01 	bne.w	800a51e <_strtod_l+0x436>
 800a91c:	9a05      	ldr	r2, [sp, #20]
 800a91e:	2322      	movs	r3, #34	@ 0x22
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	e5fc      	b.n	800a51e <_strtod_l+0x436>
 800a924:	f3af 8000 	nop.w
 800a928:	ffc00000 	.word	0xffc00000
 800a92c:	41dfffff 	.word	0x41dfffff
 800a930:	00000000 	.word	0x00000000
 800a934:	39500000 	.word	0x39500000
 800a938:	0800c3b0 	.word	0x0800c3b0
 800a93c:	fffffc02 	.word	0xfffffc02
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	46d9      	mov	r9, fp
 800a946:	d15d      	bne.n	800aa04 <_strtod_l+0x91c>
 800a948:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a94c:	f1b8 0f00 	cmp.w	r8, #0
 800a950:	d02a      	beq.n	800a9a8 <_strtod_l+0x8c0>
 800a952:	4aab      	ldr	r2, [pc, #684]	@ (800ac00 <_strtod_l+0xb18>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d12a      	bne.n	800a9ae <_strtod_l+0x8c6>
 800a958:	9b06      	ldr	r3, [sp, #24]
 800a95a:	4652      	mov	r2, sl
 800a95c:	b1fb      	cbz	r3, 800a99e <_strtod_l+0x8b6>
 800a95e:	4ba9      	ldr	r3, [pc, #676]	@ (800ac04 <_strtod_l+0xb1c>)
 800a960:	ea0b 0303 	and.w	r3, fp, r3
 800a964:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a968:	f04f 31ff 	mov.w	r1, #4294967295
 800a96c:	d81a      	bhi.n	800a9a4 <_strtod_l+0x8bc>
 800a96e:	0d1b      	lsrs	r3, r3, #20
 800a970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a974:	fa01 f303 	lsl.w	r3, r1, r3
 800a978:	429a      	cmp	r2, r3
 800a97a:	d118      	bne.n	800a9ae <_strtod_l+0x8c6>
 800a97c:	4ba2      	ldr	r3, [pc, #648]	@ (800ac08 <_strtod_l+0xb20>)
 800a97e:	4599      	cmp	r9, r3
 800a980:	d102      	bne.n	800a988 <_strtod_l+0x8a0>
 800a982:	3201      	adds	r2, #1
 800a984:	f43f adc0 	beq.w	800a508 <_strtod_l+0x420>
 800a988:	4b9e      	ldr	r3, [pc, #632]	@ (800ac04 <_strtod_l+0xb1c>)
 800a98a:	ea09 0303 	and.w	r3, r9, r3
 800a98e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a992:	f04f 0a00 	mov.w	sl, #0
 800a996:	9b06      	ldr	r3, [sp, #24]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1b0      	bne.n	800a8fe <_strtod_l+0x816>
 800a99c:	e5bf      	b.n	800a51e <_strtod_l+0x436>
 800a99e:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a2:	e7e9      	b.n	800a978 <_strtod_l+0x890>
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	e7e7      	b.n	800a978 <_strtod_l+0x890>
 800a9a8:	ea53 030a 	orrs.w	r3, r3, sl
 800a9ac:	d099      	beq.n	800a8e2 <_strtod_l+0x7fa>
 800a9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9b0:	b1c3      	cbz	r3, 800a9e4 <_strtod_l+0x8fc>
 800a9b2:	ea13 0f09 	tst.w	r3, r9
 800a9b6:	d0ee      	beq.n	800a996 <_strtod_l+0x8ae>
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	4650      	mov	r0, sl
 800a9bc:	4659      	mov	r1, fp
 800a9be:	f1b8 0f00 	cmp.w	r8, #0
 800a9c2:	d013      	beq.n	800a9ec <_strtod_l+0x904>
 800a9c4:	f7ff fb75 	bl	800a0b2 <sulp>
 800a9c8:	ee39 7b00 	vadd.f64	d7, d9, d0
 800a9cc:	ec5b ab17 	vmov	sl, fp, d7
 800a9d0:	e7e1      	b.n	800a996 <_strtod_l+0x8ae>
 800a9d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a9d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a9da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a9de:	f04f 3aff 	mov.w	sl, #4294967295
 800a9e2:	e7d8      	b.n	800a996 <_strtod_l+0x8ae>
 800a9e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9e6:	ea13 0f0a 	tst.w	r3, sl
 800a9ea:	e7e4      	b.n	800a9b6 <_strtod_l+0x8ce>
 800a9ec:	f7ff fb61 	bl	800a0b2 <sulp>
 800a9f0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a9f4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fc:	ec5b ab10 	vmov	sl, fp, d0
 800aa00:	d1c9      	bne.n	800a996 <_strtod_l+0x8ae>
 800aa02:	e615      	b.n	800a630 <_strtod_l+0x548>
 800aa04:	4629      	mov	r1, r5
 800aa06:	4620      	mov	r0, r4
 800aa08:	f7ff fae0 	bl	8009fcc <__ratio>
 800aa0c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800aa10:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa18:	d85d      	bhi.n	800aad6 <_strtod_l+0x9ee>
 800aa1a:	f1b8 0f00 	cmp.w	r8, #0
 800aa1e:	d164      	bne.n	800aaea <_strtod_l+0xa02>
 800aa20:	f1ba 0f00 	cmp.w	sl, #0
 800aa24:	d14b      	bne.n	800aabe <_strtod_l+0x9d6>
 800aa26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa2a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d160      	bne.n	800aaf4 <_strtod_l+0xa0c>
 800aa32:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800aa36:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800aa3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3e:	d401      	bmi.n	800aa44 <_strtod_l+0x95c>
 800aa40:	ee20 8b08 	vmul.f64	d8, d0, d8
 800aa44:	eeb1 ab48 	vneg.f64	d10, d8
 800aa48:	486e      	ldr	r0, [pc, #440]	@ (800ac04 <_strtod_l+0xb1c>)
 800aa4a:	4970      	ldr	r1, [pc, #448]	@ (800ac0c <_strtod_l+0xb24>)
 800aa4c:	ea09 0700 	and.w	r7, r9, r0
 800aa50:	428f      	cmp	r7, r1
 800aa52:	ec53 2b1a 	vmov	r2, r3, d10
 800aa56:	d17d      	bne.n	800ab54 <_strtod_l+0xa6c>
 800aa58:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800aa5c:	ec4b ab1c 	vmov	d12, sl, fp
 800aa60:	eeb0 0b4c 	vmov.f64	d0, d12
 800aa64:	f7ff f9ea 	bl	8009e3c <__ulp>
 800aa68:	4866      	ldr	r0, [pc, #408]	@ (800ac04 <_strtod_l+0xb1c>)
 800aa6a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800aa6e:	ee1c 3a90 	vmov	r3, s25
 800aa72:	4a67      	ldr	r2, [pc, #412]	@ (800ac10 <_strtod_l+0xb28>)
 800aa74:	ea03 0100 	and.w	r1, r3, r0
 800aa78:	4291      	cmp	r1, r2
 800aa7a:	ec5b ab1c 	vmov	sl, fp, d12
 800aa7e:	d93c      	bls.n	800aafa <_strtod_l+0xa12>
 800aa80:	ee19 2a90 	vmov	r2, s19
 800aa84:	4b60      	ldr	r3, [pc, #384]	@ (800ac08 <_strtod_l+0xb20>)
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d104      	bne.n	800aa94 <_strtod_l+0x9ac>
 800aa8a:	ee19 3a10 	vmov	r3, s18
 800aa8e:	3301      	adds	r3, #1
 800aa90:	f43f ad3a 	beq.w	800a508 <_strtod_l+0x420>
 800aa94:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ac08 <_strtod_l+0xb20>
 800aa98:	f04f 3aff 	mov.w	sl, #4294967295
 800aa9c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa9e:	9805      	ldr	r0, [sp, #20]
 800aaa0:	f7fe fe98 	bl	80097d4 <_Bfree>
 800aaa4:	9805      	ldr	r0, [sp, #20]
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	f7fe fe94 	bl	80097d4 <_Bfree>
 800aaac:	9805      	ldr	r0, [sp, #20]
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7fe fe90 	bl	80097d4 <_Bfree>
 800aab4:	9805      	ldr	r0, [sp, #20]
 800aab6:	4621      	mov	r1, r4
 800aab8:	f7fe fe8c 	bl	80097d4 <_Bfree>
 800aabc:	e625      	b.n	800a70a <_strtod_l+0x622>
 800aabe:	f1ba 0f01 	cmp.w	sl, #1
 800aac2:	d103      	bne.n	800aacc <_strtod_l+0x9e4>
 800aac4:	f1bb 0f00 	cmp.w	fp, #0
 800aac8:	f43f adb2 	beq.w	800a630 <_strtod_l+0x548>
 800aacc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800aad0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800aad4:	e7b8      	b.n	800aa48 <_strtod_l+0x960>
 800aad6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800aada:	ee20 8b08 	vmul.f64	d8, d0, d8
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	d0af      	beq.n	800aa44 <_strtod_l+0x95c>
 800aae4:	eeb0 ab48 	vmov.f64	d10, d8
 800aae8:	e7ae      	b.n	800aa48 <_strtod_l+0x960>
 800aaea:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800aaee:	eeb0 8b4a 	vmov.f64	d8, d10
 800aaf2:	e7a9      	b.n	800aa48 <_strtod_l+0x960>
 800aaf4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800aaf8:	e7a6      	b.n	800aa48 <_strtod_l+0x960>
 800aafa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	46d9      	mov	r9, fp
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1ca      	bne.n	800aa9c <_strtod_l+0x9b4>
 800ab06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab0a:	0d1b      	lsrs	r3, r3, #20
 800ab0c:	051b      	lsls	r3, r3, #20
 800ab0e:	429f      	cmp	r7, r3
 800ab10:	d1c4      	bne.n	800aa9c <_strtod_l+0x9b4>
 800ab12:	ec51 0b18 	vmov	r0, r1, d8
 800ab16:	f7f5 fe0f 	bl	8000738 <__aeabi_d2lz>
 800ab1a:	f7f5 fdc7 	bl	80006ac <__aeabi_l2d>
 800ab1e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ab22:	ec41 0b17 	vmov	d7, r0, r1
 800ab26:	ea49 090a 	orr.w	r9, r9, sl
 800ab2a:	ea59 0908 	orrs.w	r9, r9, r8
 800ab2e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ab32:	d03c      	beq.n	800abae <_strtod_l+0xac6>
 800ab34:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800abe8 <_strtod_l+0xb00>
 800ab38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	f53f aced 	bmi.w	800a51e <_strtod_l+0x436>
 800ab44:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800abf0 <_strtod_l+0xb08>
 800ab48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	dda4      	ble.n	800aa9c <_strtod_l+0x9b4>
 800ab52:	e4e4      	b.n	800a51e <_strtod_l+0x436>
 800ab54:	9906      	ldr	r1, [sp, #24]
 800ab56:	b1e1      	cbz	r1, 800ab92 <_strtod_l+0xaaa>
 800ab58:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ab5c:	d819      	bhi.n	800ab92 <_strtod_l+0xaaa>
 800ab5e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ab62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab66:	d811      	bhi.n	800ab8c <_strtod_l+0xaa4>
 800ab68:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ab6c:	ee18 3a10 	vmov	r3, s16
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	bf38      	it	cc
 800ab74:	2301      	movcc	r3, #1
 800ab76:	ee08 3a10 	vmov	s16, r3
 800ab7a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ab7e:	f1b8 0f00 	cmp.w	r8, #0
 800ab82:	d111      	bne.n	800aba8 <_strtod_l+0xac0>
 800ab84:	eeb1 7b48 	vneg.f64	d7, d8
 800ab88:	ec53 2b17 	vmov	r2, r3, d7
 800ab8c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ab90:	1bcb      	subs	r3, r1, r7
 800ab92:	eeb0 0b49 	vmov.f64	d0, d9
 800ab96:	ec43 2b1a 	vmov	d10, r2, r3
 800ab9a:	f7ff f94f 	bl	8009e3c <__ulp>
 800ab9e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800aba2:	ec5b ab19 	vmov	sl, fp, d9
 800aba6:	e7aa      	b.n	800aafe <_strtod_l+0xa16>
 800aba8:	eeb0 7b48 	vmov.f64	d7, d8
 800abac:	e7ec      	b.n	800ab88 <_strtod_l+0xaa0>
 800abae:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800abf8 <_strtod_l+0xb10>
 800abb2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abba:	f57f af6f 	bpl.w	800aa9c <_strtod_l+0x9b4>
 800abbe:	e4ae      	b.n	800a51e <_strtod_l+0x436>
 800abc0:	2300      	movs	r3, #0
 800abc2:	9308      	str	r3, [sp, #32]
 800abc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	f7ff bacc 	b.w	800a166 <_strtod_l+0x7e>
 800abce:	2a65      	cmp	r2, #101	@ 0x65
 800abd0:	f43f abbc 	beq.w	800a34c <_strtod_l+0x264>
 800abd4:	2a45      	cmp	r2, #69	@ 0x45
 800abd6:	f43f abb9 	beq.w	800a34c <_strtod_l+0x264>
 800abda:	2301      	movs	r3, #1
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	f7ff bbf0 	b.w	800a3c2 <_strtod_l+0x2da>
 800abe2:	bf00      	nop
 800abe4:	f3af 8000 	nop.w
 800abe8:	94a03595 	.word	0x94a03595
 800abec:	3fdfffff 	.word	0x3fdfffff
 800abf0:	35afe535 	.word	0x35afe535
 800abf4:	3fe00000 	.word	0x3fe00000
 800abf8:	94a03595 	.word	0x94a03595
 800abfc:	3fcfffff 	.word	0x3fcfffff
 800ac00:	000fffff 	.word	0x000fffff
 800ac04:	7ff00000 	.word	0x7ff00000
 800ac08:	7fefffff 	.word	0x7fefffff
 800ac0c:	7fe00000 	.word	0x7fe00000
 800ac10:	7c9fffff 	.word	0x7c9fffff

0800ac14 <_strtod_r>:
 800ac14:	4b01      	ldr	r3, [pc, #4]	@ (800ac1c <_strtod_r+0x8>)
 800ac16:	f7ff ba67 	b.w	800a0e8 <_strtod_l>
 800ac1a:	bf00      	nop
 800ac1c:	2400010c 	.word	0x2400010c

0800ac20 <_strtol_l.constprop.0>:
 800ac20:	2b24      	cmp	r3, #36	@ 0x24
 800ac22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac26:	4686      	mov	lr, r0
 800ac28:	4690      	mov	r8, r2
 800ac2a:	d801      	bhi.n	800ac30 <_strtol_l.constprop.0+0x10>
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d106      	bne.n	800ac3e <_strtol_l.constprop.0+0x1e>
 800ac30:	f7fd fe7e 	bl	8008930 <__errno>
 800ac34:	2316      	movs	r3, #22
 800ac36:	6003      	str	r3, [r0, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3e:	4834      	ldr	r0, [pc, #208]	@ (800ad10 <_strtol_l.constprop.0+0xf0>)
 800ac40:	460d      	mov	r5, r1
 800ac42:	462a      	mov	r2, r5
 800ac44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac48:	5d06      	ldrb	r6, [r0, r4]
 800ac4a:	f016 0608 	ands.w	r6, r6, #8
 800ac4e:	d1f8      	bne.n	800ac42 <_strtol_l.constprop.0+0x22>
 800ac50:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac52:	d12d      	bne.n	800acb0 <_strtol_l.constprop.0+0x90>
 800ac54:	782c      	ldrb	r4, [r5, #0]
 800ac56:	2601      	movs	r6, #1
 800ac58:	1c95      	adds	r5, r2, #2
 800ac5a:	f033 0210 	bics.w	r2, r3, #16
 800ac5e:	d109      	bne.n	800ac74 <_strtol_l.constprop.0+0x54>
 800ac60:	2c30      	cmp	r4, #48	@ 0x30
 800ac62:	d12a      	bne.n	800acba <_strtol_l.constprop.0+0x9a>
 800ac64:	782a      	ldrb	r2, [r5, #0]
 800ac66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac6a:	2a58      	cmp	r2, #88	@ 0x58
 800ac6c:	d125      	bne.n	800acba <_strtol_l.constprop.0+0x9a>
 800ac6e:	786c      	ldrb	r4, [r5, #1]
 800ac70:	2310      	movs	r3, #16
 800ac72:	3502      	adds	r5, #2
 800ac74:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ac78:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	fbbc f9f3 	udiv	r9, ip, r3
 800ac82:	4610      	mov	r0, r2
 800ac84:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac8c:	2f09      	cmp	r7, #9
 800ac8e:	d81b      	bhi.n	800acc8 <_strtol_l.constprop.0+0xa8>
 800ac90:	463c      	mov	r4, r7
 800ac92:	42a3      	cmp	r3, r4
 800ac94:	dd27      	ble.n	800ace6 <_strtol_l.constprop.0+0xc6>
 800ac96:	1c57      	adds	r7, r2, #1
 800ac98:	d007      	beq.n	800acaa <_strtol_l.constprop.0+0x8a>
 800ac9a:	4581      	cmp	r9, r0
 800ac9c:	d320      	bcc.n	800ace0 <_strtol_l.constprop.0+0xc0>
 800ac9e:	d101      	bne.n	800aca4 <_strtol_l.constprop.0+0x84>
 800aca0:	45a2      	cmp	sl, r4
 800aca2:	db1d      	blt.n	800ace0 <_strtol_l.constprop.0+0xc0>
 800aca4:	fb00 4003 	mla	r0, r0, r3, r4
 800aca8:	2201      	movs	r2, #1
 800acaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acae:	e7eb      	b.n	800ac88 <_strtol_l.constprop.0+0x68>
 800acb0:	2c2b      	cmp	r4, #43	@ 0x2b
 800acb2:	bf04      	itt	eq
 800acb4:	782c      	ldrbeq	r4, [r5, #0]
 800acb6:	1c95      	addeq	r5, r2, #2
 800acb8:	e7cf      	b.n	800ac5a <_strtol_l.constprop.0+0x3a>
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1da      	bne.n	800ac74 <_strtol_l.constprop.0+0x54>
 800acbe:	2c30      	cmp	r4, #48	@ 0x30
 800acc0:	bf0c      	ite	eq
 800acc2:	2308      	moveq	r3, #8
 800acc4:	230a      	movne	r3, #10
 800acc6:	e7d5      	b.n	800ac74 <_strtol_l.constprop.0+0x54>
 800acc8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800accc:	2f19      	cmp	r7, #25
 800acce:	d801      	bhi.n	800acd4 <_strtol_l.constprop.0+0xb4>
 800acd0:	3c37      	subs	r4, #55	@ 0x37
 800acd2:	e7de      	b.n	800ac92 <_strtol_l.constprop.0+0x72>
 800acd4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800acd8:	2f19      	cmp	r7, #25
 800acda:	d804      	bhi.n	800ace6 <_strtol_l.constprop.0+0xc6>
 800acdc:	3c57      	subs	r4, #87	@ 0x57
 800acde:	e7d8      	b.n	800ac92 <_strtol_l.constprop.0+0x72>
 800ace0:	f04f 32ff 	mov.w	r2, #4294967295
 800ace4:	e7e1      	b.n	800acaa <_strtol_l.constprop.0+0x8a>
 800ace6:	1c53      	adds	r3, r2, #1
 800ace8:	d108      	bne.n	800acfc <_strtol_l.constprop.0+0xdc>
 800acea:	2322      	movs	r3, #34	@ 0x22
 800acec:	f8ce 3000 	str.w	r3, [lr]
 800acf0:	4660      	mov	r0, ip
 800acf2:	f1b8 0f00 	cmp.w	r8, #0
 800acf6:	d0a0      	beq.n	800ac3a <_strtol_l.constprop.0+0x1a>
 800acf8:	1e69      	subs	r1, r5, #1
 800acfa:	e006      	b.n	800ad0a <_strtol_l.constprop.0+0xea>
 800acfc:	b106      	cbz	r6, 800ad00 <_strtol_l.constprop.0+0xe0>
 800acfe:	4240      	negs	r0, r0
 800ad00:	f1b8 0f00 	cmp.w	r8, #0
 800ad04:	d099      	beq.n	800ac3a <_strtol_l.constprop.0+0x1a>
 800ad06:	2a00      	cmp	r2, #0
 800ad08:	d1f6      	bne.n	800acf8 <_strtol_l.constprop.0+0xd8>
 800ad0a:	f8c8 1000 	str.w	r1, [r8]
 800ad0e:	e794      	b.n	800ac3a <_strtol_l.constprop.0+0x1a>
 800ad10:	0800c3d9 	.word	0x0800c3d9

0800ad14 <_strtol_r>:
 800ad14:	f7ff bf84 	b.w	800ac20 <_strtol_l.constprop.0>

0800ad18 <__ssputs_r>:
 800ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad1c:	688e      	ldr	r6, [r1, #8]
 800ad1e:	461f      	mov	r7, r3
 800ad20:	42be      	cmp	r6, r7
 800ad22:	680b      	ldr	r3, [r1, #0]
 800ad24:	4682      	mov	sl, r0
 800ad26:	460c      	mov	r4, r1
 800ad28:	4690      	mov	r8, r2
 800ad2a:	d82d      	bhi.n	800ad88 <__ssputs_r+0x70>
 800ad2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad34:	d026      	beq.n	800ad84 <__ssputs_r+0x6c>
 800ad36:	6965      	ldr	r5, [r4, #20]
 800ad38:	6909      	ldr	r1, [r1, #16]
 800ad3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad3e:	eba3 0901 	sub.w	r9, r3, r1
 800ad42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad46:	1c7b      	adds	r3, r7, #1
 800ad48:	444b      	add	r3, r9
 800ad4a:	106d      	asrs	r5, r5, #1
 800ad4c:	429d      	cmp	r5, r3
 800ad4e:	bf38      	it	cc
 800ad50:	461d      	movcc	r5, r3
 800ad52:	0553      	lsls	r3, r2, #21
 800ad54:	d527      	bpl.n	800ada6 <__ssputs_r+0x8e>
 800ad56:	4629      	mov	r1, r5
 800ad58:	f7fe fc70 	bl	800963c <_malloc_r>
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	b360      	cbz	r0, 800adba <__ssputs_r+0xa2>
 800ad60:	6921      	ldr	r1, [r4, #16]
 800ad62:	464a      	mov	r2, r9
 800ad64:	f000 fa18 	bl	800b198 <memcpy>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	6126      	str	r6, [r4, #16]
 800ad76:	6165      	str	r5, [r4, #20]
 800ad78:	444e      	add	r6, r9
 800ad7a:	eba5 0509 	sub.w	r5, r5, r9
 800ad7e:	6026      	str	r6, [r4, #0]
 800ad80:	60a5      	str	r5, [r4, #8]
 800ad82:	463e      	mov	r6, r7
 800ad84:	42be      	cmp	r6, r7
 800ad86:	d900      	bls.n	800ad8a <__ssputs_r+0x72>
 800ad88:	463e      	mov	r6, r7
 800ad8a:	6820      	ldr	r0, [r4, #0]
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	4641      	mov	r1, r8
 800ad90:	f000 f9c6 	bl	800b120 <memmove>
 800ad94:	68a3      	ldr	r3, [r4, #8]
 800ad96:	1b9b      	subs	r3, r3, r6
 800ad98:	60a3      	str	r3, [r4, #8]
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	4433      	add	r3, r6
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	2000      	movs	r0, #0
 800ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada6:	462a      	mov	r2, r5
 800ada8:	f000 fd8b 	bl	800b8c2 <_realloc_r>
 800adac:	4606      	mov	r6, r0
 800adae:	2800      	cmp	r0, #0
 800adb0:	d1e0      	bne.n	800ad74 <__ssputs_r+0x5c>
 800adb2:	6921      	ldr	r1, [r4, #16]
 800adb4:	4650      	mov	r0, sl
 800adb6:	f7fe fbcd 	bl	8009554 <_free_r>
 800adba:	230c      	movs	r3, #12
 800adbc:	f8ca 3000 	str.w	r3, [sl]
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295
 800adcc:	e7e9      	b.n	800ada2 <__ssputs_r+0x8a>
	...

0800add0 <_svfiprintf_r>:
 800add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add4:	4698      	mov	r8, r3
 800add6:	898b      	ldrh	r3, [r1, #12]
 800add8:	061b      	lsls	r3, r3, #24
 800adda:	b09d      	sub	sp, #116	@ 0x74
 800addc:	4607      	mov	r7, r0
 800adde:	460d      	mov	r5, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	d510      	bpl.n	800ae06 <_svfiprintf_r+0x36>
 800ade4:	690b      	ldr	r3, [r1, #16]
 800ade6:	b973      	cbnz	r3, 800ae06 <_svfiprintf_r+0x36>
 800ade8:	2140      	movs	r1, #64	@ 0x40
 800adea:	f7fe fc27 	bl	800963c <_malloc_r>
 800adee:	6028      	str	r0, [r5, #0]
 800adf0:	6128      	str	r0, [r5, #16]
 800adf2:	b930      	cbnz	r0, 800ae02 <_svfiprintf_r+0x32>
 800adf4:	230c      	movs	r3, #12
 800adf6:	603b      	str	r3, [r7, #0]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	b01d      	add	sp, #116	@ 0x74
 800adfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae02:	2340      	movs	r3, #64	@ 0x40
 800ae04:	616b      	str	r3, [r5, #20]
 800ae06:	2300      	movs	r3, #0
 800ae08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae0a:	2320      	movs	r3, #32
 800ae0c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae14:	2330      	movs	r3, #48	@ 0x30
 800ae16:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afb4 <_svfiprintf_r+0x1e4>
 800ae1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae1e:	f04f 0901 	mov.w	r9, #1
 800ae22:	4623      	mov	r3, r4
 800ae24:	469a      	mov	sl, r3
 800ae26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae2a:	b10a      	cbz	r2, 800ae30 <_svfiprintf_r+0x60>
 800ae2c:	2a25      	cmp	r2, #37	@ 0x25
 800ae2e:	d1f9      	bne.n	800ae24 <_svfiprintf_r+0x54>
 800ae30:	ebba 0b04 	subs.w	fp, sl, r4
 800ae34:	d00b      	beq.n	800ae4e <_svfiprintf_r+0x7e>
 800ae36:	465b      	mov	r3, fp
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	f7ff ff6b 	bl	800ad18 <__ssputs_r>
 800ae42:	3001      	adds	r0, #1
 800ae44:	f000 80a7 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae4a:	445a      	add	r2, fp
 800ae4c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 809f 	beq.w	800af96 <_svfiprintf_r+0x1c6>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae62:	f10a 0a01 	add.w	sl, sl, #1
 800ae66:	9304      	str	r3, [sp, #16]
 800ae68:	9307      	str	r3, [sp, #28]
 800ae6a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae6e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae70:	4654      	mov	r4, sl
 800ae72:	2205      	movs	r2, #5
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	484e      	ldr	r0, [pc, #312]	@ (800afb4 <_svfiprintf_r+0x1e4>)
 800ae7a:	f7f5 fa31 	bl	80002e0 <memchr>
 800ae7e:	9a04      	ldr	r2, [sp, #16]
 800ae80:	b9d8      	cbnz	r0, 800aeba <_svfiprintf_r+0xea>
 800ae82:	06d0      	lsls	r0, r2, #27
 800ae84:	bf44      	itt	mi
 800ae86:	2320      	movmi	r3, #32
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8c:	0711      	lsls	r1, r2, #28
 800ae8e:	bf44      	itt	mi
 800ae90:	232b      	movmi	r3, #43	@ 0x2b
 800ae92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae96:	f89a 3000 	ldrb.w	r3, [sl]
 800ae9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9c:	d015      	beq.n	800aeca <_svfiprintf_r+0xfa>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	4654      	mov	r4, sl
 800aea2:	2000      	movs	r0, #0
 800aea4:	f04f 0c0a 	mov.w	ip, #10
 800aea8:	4621      	mov	r1, r4
 800aeaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeae:	3b30      	subs	r3, #48	@ 0x30
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d94b      	bls.n	800af4c <_svfiprintf_r+0x17c>
 800aeb4:	b1b0      	cbz	r0, 800aee4 <_svfiprintf_r+0x114>
 800aeb6:	9207      	str	r2, [sp, #28]
 800aeb8:	e014      	b.n	800aee4 <_svfiprintf_r+0x114>
 800aeba:	eba0 0308 	sub.w	r3, r0, r8
 800aebe:	fa09 f303 	lsl.w	r3, r9, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	46a2      	mov	sl, r4
 800aec8:	e7d2      	b.n	800ae70 <_svfiprintf_r+0xa0>
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	1d19      	adds	r1, r3, #4
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	bfbb      	ittet	lt
 800aed6:	425b      	neglt	r3, r3
 800aed8:	f042 0202 	orrlt.w	r2, r2, #2
 800aedc:	9307      	strge	r3, [sp, #28]
 800aede:	9307      	strlt	r3, [sp, #28]
 800aee0:	bfb8      	it	lt
 800aee2:	9204      	strlt	r2, [sp, #16]
 800aee4:	7823      	ldrb	r3, [r4, #0]
 800aee6:	2b2e      	cmp	r3, #46	@ 0x2e
 800aee8:	d10a      	bne.n	800af00 <_svfiprintf_r+0x130>
 800aeea:	7863      	ldrb	r3, [r4, #1]
 800aeec:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeee:	d132      	bne.n	800af56 <_svfiprintf_r+0x186>
 800aef0:	9b03      	ldr	r3, [sp, #12]
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	9203      	str	r2, [sp, #12]
 800aef8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aefc:	3402      	adds	r4, #2
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afc4 <_svfiprintf_r+0x1f4>
 800af04:	7821      	ldrb	r1, [r4, #0]
 800af06:	2203      	movs	r2, #3
 800af08:	4650      	mov	r0, sl
 800af0a:	f7f5 f9e9 	bl	80002e0 <memchr>
 800af0e:	b138      	cbz	r0, 800af20 <_svfiprintf_r+0x150>
 800af10:	9b04      	ldr	r3, [sp, #16]
 800af12:	eba0 000a 	sub.w	r0, r0, sl
 800af16:	2240      	movs	r2, #64	@ 0x40
 800af18:	4082      	lsls	r2, r0
 800af1a:	4313      	orrs	r3, r2
 800af1c:	3401      	adds	r4, #1
 800af1e:	9304      	str	r3, [sp, #16]
 800af20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af24:	4824      	ldr	r0, [pc, #144]	@ (800afb8 <_svfiprintf_r+0x1e8>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af2a:	2206      	movs	r2, #6
 800af2c:	f7f5 f9d8 	bl	80002e0 <memchr>
 800af30:	2800      	cmp	r0, #0
 800af32:	d036      	beq.n	800afa2 <_svfiprintf_r+0x1d2>
 800af34:	4b21      	ldr	r3, [pc, #132]	@ (800afbc <_svfiprintf_r+0x1ec>)
 800af36:	bb1b      	cbnz	r3, 800af80 <_svfiprintf_r+0x1b0>
 800af38:	9b03      	ldr	r3, [sp, #12]
 800af3a:	3307      	adds	r3, #7
 800af3c:	f023 0307 	bic.w	r3, r3, #7
 800af40:	3308      	adds	r3, #8
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	4433      	add	r3, r6
 800af48:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4a:	e76a      	b.n	800ae22 <_svfiprintf_r+0x52>
 800af4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800af50:	460c      	mov	r4, r1
 800af52:	2001      	movs	r0, #1
 800af54:	e7a8      	b.n	800aea8 <_svfiprintf_r+0xd8>
 800af56:	2300      	movs	r3, #0
 800af58:	3401      	adds	r4, #1
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	4619      	mov	r1, r3
 800af5e:	f04f 0c0a 	mov.w	ip, #10
 800af62:	4620      	mov	r0, r4
 800af64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af68:	3a30      	subs	r2, #48	@ 0x30
 800af6a:	2a09      	cmp	r2, #9
 800af6c:	d903      	bls.n	800af76 <_svfiprintf_r+0x1a6>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0c6      	beq.n	800af00 <_svfiprintf_r+0x130>
 800af72:	9105      	str	r1, [sp, #20]
 800af74:	e7c4      	b.n	800af00 <_svfiprintf_r+0x130>
 800af76:	fb0c 2101 	mla	r1, ip, r1, r2
 800af7a:	4604      	mov	r4, r0
 800af7c:	2301      	movs	r3, #1
 800af7e:	e7f0      	b.n	800af62 <_svfiprintf_r+0x192>
 800af80:	ab03      	add	r3, sp, #12
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	462a      	mov	r2, r5
 800af86:	4b0e      	ldr	r3, [pc, #56]	@ (800afc0 <_svfiprintf_r+0x1f0>)
 800af88:	a904      	add	r1, sp, #16
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7fc fd70 	bl	8007a70 <_printf_float>
 800af90:	1c42      	adds	r2, r0, #1
 800af92:	4606      	mov	r6, r0
 800af94:	d1d6      	bne.n	800af44 <_svfiprintf_r+0x174>
 800af96:	89ab      	ldrh	r3, [r5, #12]
 800af98:	065b      	lsls	r3, r3, #25
 800af9a:	f53f af2d 	bmi.w	800adf8 <_svfiprintf_r+0x28>
 800af9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afa0:	e72c      	b.n	800adfc <_svfiprintf_r+0x2c>
 800afa2:	ab03      	add	r3, sp, #12
 800afa4:	9300      	str	r3, [sp, #0]
 800afa6:	462a      	mov	r2, r5
 800afa8:	4b05      	ldr	r3, [pc, #20]	@ (800afc0 <_svfiprintf_r+0x1f0>)
 800afaa:	a904      	add	r1, sp, #16
 800afac:	4638      	mov	r0, r7
 800afae:	f7fc ffe7 	bl	8007f80 <_printf_i>
 800afb2:	e7ed      	b.n	800af90 <_svfiprintf_r+0x1c0>
 800afb4:	0800c4d9 	.word	0x0800c4d9
 800afb8:	0800c4e3 	.word	0x0800c4e3
 800afbc:	08007a71 	.word	0x08007a71
 800afc0:	0800ad19 	.word	0x0800ad19
 800afc4:	0800c4df 	.word	0x0800c4df

0800afc8 <__sflush_r>:
 800afc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd0:	0716      	lsls	r6, r2, #28
 800afd2:	4605      	mov	r5, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	d454      	bmi.n	800b082 <__sflush_r+0xba>
 800afd8:	684b      	ldr	r3, [r1, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	dc02      	bgt.n	800afe4 <__sflush_r+0x1c>
 800afde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dd48      	ble.n	800b076 <__sflush_r+0xae>
 800afe4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afe6:	2e00      	cmp	r6, #0
 800afe8:	d045      	beq.n	800b076 <__sflush_r+0xae>
 800afea:	2300      	movs	r3, #0
 800afec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aff0:	682f      	ldr	r7, [r5, #0]
 800aff2:	6a21      	ldr	r1, [r4, #32]
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	d030      	beq.n	800b05a <__sflush_r+0x92>
 800aff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800affa:	89a3      	ldrh	r3, [r4, #12]
 800affc:	0759      	lsls	r1, r3, #29
 800affe:	d505      	bpl.n	800b00c <__sflush_r+0x44>
 800b000:	6863      	ldr	r3, [r4, #4]
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b006:	b10b      	cbz	r3, 800b00c <__sflush_r+0x44>
 800b008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b00a:	1ad2      	subs	r2, r2, r3
 800b00c:	2300      	movs	r3, #0
 800b00e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b010:	6a21      	ldr	r1, [r4, #32]
 800b012:	4628      	mov	r0, r5
 800b014:	47b0      	blx	r6
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	89a3      	ldrh	r3, [r4, #12]
 800b01a:	d106      	bne.n	800b02a <__sflush_r+0x62>
 800b01c:	6829      	ldr	r1, [r5, #0]
 800b01e:	291d      	cmp	r1, #29
 800b020:	d82b      	bhi.n	800b07a <__sflush_r+0xb2>
 800b022:	4a2a      	ldr	r2, [pc, #168]	@ (800b0cc <__sflush_r+0x104>)
 800b024:	410a      	asrs	r2, r1
 800b026:	07d6      	lsls	r6, r2, #31
 800b028:	d427      	bmi.n	800b07a <__sflush_r+0xb2>
 800b02a:	2200      	movs	r2, #0
 800b02c:	6062      	str	r2, [r4, #4]
 800b02e:	04d9      	lsls	r1, r3, #19
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	6022      	str	r2, [r4, #0]
 800b034:	d504      	bpl.n	800b040 <__sflush_r+0x78>
 800b036:	1c42      	adds	r2, r0, #1
 800b038:	d101      	bne.n	800b03e <__sflush_r+0x76>
 800b03a:	682b      	ldr	r3, [r5, #0]
 800b03c:	b903      	cbnz	r3, 800b040 <__sflush_r+0x78>
 800b03e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b042:	602f      	str	r7, [r5, #0]
 800b044:	b1b9      	cbz	r1, 800b076 <__sflush_r+0xae>
 800b046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d002      	beq.n	800b054 <__sflush_r+0x8c>
 800b04e:	4628      	mov	r0, r5
 800b050:	f7fe fa80 	bl	8009554 <_free_r>
 800b054:	2300      	movs	r3, #0
 800b056:	6363      	str	r3, [r4, #52]	@ 0x34
 800b058:	e00d      	b.n	800b076 <__sflush_r+0xae>
 800b05a:	2301      	movs	r3, #1
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b0      	blx	r6
 800b060:	4602      	mov	r2, r0
 800b062:	1c50      	adds	r0, r2, #1
 800b064:	d1c9      	bne.n	800affa <__sflush_r+0x32>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d0c6      	beq.n	800affa <__sflush_r+0x32>
 800b06c:	2b1d      	cmp	r3, #29
 800b06e:	d001      	beq.n	800b074 <__sflush_r+0xac>
 800b070:	2b16      	cmp	r3, #22
 800b072:	d11e      	bne.n	800b0b2 <__sflush_r+0xea>
 800b074:	602f      	str	r7, [r5, #0]
 800b076:	2000      	movs	r0, #0
 800b078:	e022      	b.n	800b0c0 <__sflush_r+0xf8>
 800b07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b07e:	b21b      	sxth	r3, r3
 800b080:	e01b      	b.n	800b0ba <__sflush_r+0xf2>
 800b082:	690f      	ldr	r7, [r1, #16]
 800b084:	2f00      	cmp	r7, #0
 800b086:	d0f6      	beq.n	800b076 <__sflush_r+0xae>
 800b088:	0793      	lsls	r3, r2, #30
 800b08a:	680e      	ldr	r6, [r1, #0]
 800b08c:	bf08      	it	eq
 800b08e:	694b      	ldreq	r3, [r1, #20]
 800b090:	600f      	str	r7, [r1, #0]
 800b092:	bf18      	it	ne
 800b094:	2300      	movne	r3, #0
 800b096:	eba6 0807 	sub.w	r8, r6, r7
 800b09a:	608b      	str	r3, [r1, #8]
 800b09c:	f1b8 0f00 	cmp.w	r8, #0
 800b0a0:	dde9      	ble.n	800b076 <__sflush_r+0xae>
 800b0a2:	6a21      	ldr	r1, [r4, #32]
 800b0a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0a6:	4643      	mov	r3, r8
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b0      	blx	r6
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	dc08      	bgt.n	800b0c4 <__sflush_r+0xfc>
 800b0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ba:	81a3      	strh	r3, [r4, #12]
 800b0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c4:	4407      	add	r7, r0
 800b0c6:	eba8 0800 	sub.w	r8, r8, r0
 800b0ca:	e7e7      	b.n	800b09c <__sflush_r+0xd4>
 800b0cc:	dfbffffe 	.word	0xdfbffffe

0800b0d0 <_fflush_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	690b      	ldr	r3, [r1, #16]
 800b0d4:	4605      	mov	r5, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	b913      	cbnz	r3, 800b0e0 <_fflush_r+0x10>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	4628      	mov	r0, r5
 800b0de:	bd38      	pop	{r3, r4, r5, pc}
 800b0e0:	b118      	cbz	r0, 800b0ea <_fflush_r+0x1a>
 800b0e2:	6a03      	ldr	r3, [r0, #32]
 800b0e4:	b90b      	cbnz	r3, 800b0ea <_fflush_r+0x1a>
 800b0e6:	f7fd fb03 	bl	80086f0 <__sinit>
 800b0ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d0f3      	beq.n	800b0da <_fflush_r+0xa>
 800b0f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0f4:	07d0      	lsls	r0, r2, #31
 800b0f6:	d404      	bmi.n	800b102 <_fflush_r+0x32>
 800b0f8:	0599      	lsls	r1, r3, #22
 800b0fa:	d402      	bmi.n	800b102 <_fflush_r+0x32>
 800b0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0fe:	f7fd fc42 	bl	8008986 <__retarget_lock_acquire_recursive>
 800b102:	4628      	mov	r0, r5
 800b104:	4621      	mov	r1, r4
 800b106:	f7ff ff5f 	bl	800afc8 <__sflush_r>
 800b10a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b10c:	07da      	lsls	r2, r3, #31
 800b10e:	4605      	mov	r5, r0
 800b110:	d4e4      	bmi.n	800b0dc <_fflush_r+0xc>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	059b      	lsls	r3, r3, #22
 800b116:	d4e1      	bmi.n	800b0dc <_fflush_r+0xc>
 800b118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b11a:	f7fd fc35 	bl	8008988 <__retarget_lock_release_recursive>
 800b11e:	e7dd      	b.n	800b0dc <_fflush_r+0xc>

0800b120 <memmove>:
 800b120:	4288      	cmp	r0, r1
 800b122:	b510      	push	{r4, lr}
 800b124:	eb01 0402 	add.w	r4, r1, r2
 800b128:	d902      	bls.n	800b130 <memmove+0x10>
 800b12a:	4284      	cmp	r4, r0
 800b12c:	4623      	mov	r3, r4
 800b12e:	d807      	bhi.n	800b140 <memmove+0x20>
 800b130:	1e43      	subs	r3, r0, #1
 800b132:	42a1      	cmp	r1, r4
 800b134:	d008      	beq.n	800b148 <memmove+0x28>
 800b136:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b13a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b13e:	e7f8      	b.n	800b132 <memmove+0x12>
 800b140:	4402      	add	r2, r0
 800b142:	4601      	mov	r1, r0
 800b144:	428a      	cmp	r2, r1
 800b146:	d100      	bne.n	800b14a <memmove+0x2a>
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b14e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b152:	e7f7      	b.n	800b144 <memmove+0x24>

0800b154 <strncmp>:
 800b154:	b510      	push	{r4, lr}
 800b156:	b16a      	cbz	r2, 800b174 <strncmp+0x20>
 800b158:	3901      	subs	r1, #1
 800b15a:	1884      	adds	r4, r0, r2
 800b15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b160:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b164:	429a      	cmp	r2, r3
 800b166:	d103      	bne.n	800b170 <strncmp+0x1c>
 800b168:	42a0      	cmp	r0, r4
 800b16a:	d001      	beq.n	800b170 <strncmp+0x1c>
 800b16c:	2a00      	cmp	r2, #0
 800b16e:	d1f5      	bne.n	800b15c <strncmp+0x8>
 800b170:	1ad0      	subs	r0, r2, r3
 800b172:	bd10      	pop	{r4, pc}
 800b174:	4610      	mov	r0, r2
 800b176:	e7fc      	b.n	800b172 <strncmp+0x1e>

0800b178 <_sbrk_r>:
 800b178:	b538      	push	{r3, r4, r5, lr}
 800b17a:	4d06      	ldr	r5, [pc, #24]	@ (800b194 <_sbrk_r+0x1c>)
 800b17c:	2300      	movs	r3, #0
 800b17e:	4604      	mov	r4, r0
 800b180:	4608      	mov	r0, r1
 800b182:	602b      	str	r3, [r5, #0]
 800b184:	f7f6 fc02 	bl	800198c <_sbrk>
 800b188:	1c43      	adds	r3, r0, #1
 800b18a:	d102      	bne.n	800b192 <_sbrk_r+0x1a>
 800b18c:	682b      	ldr	r3, [r5, #0]
 800b18e:	b103      	cbz	r3, 800b192 <_sbrk_r+0x1a>
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	bd38      	pop	{r3, r4, r5, pc}
 800b194:	2400057c 	.word	0x2400057c

0800b198 <memcpy>:
 800b198:	440a      	add	r2, r1
 800b19a:	4291      	cmp	r1, r2
 800b19c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1a0:	d100      	bne.n	800b1a4 <memcpy+0xc>
 800b1a2:	4770      	bx	lr
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ae:	4291      	cmp	r1, r2
 800b1b0:	d1f9      	bne.n	800b1a6 <memcpy+0xe>
 800b1b2:	bd10      	pop	{r4, pc}
 800b1b4:	0000      	movs	r0, r0
	...

0800b1b8 <nan>:
 800b1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b1c0 <nan+0x8>
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	00000000 	.word	0x00000000
 800b1c4:	7ff80000 	.word	0x7ff80000

0800b1c8 <__assert_func>:
 800b1c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1ca:	4614      	mov	r4, r2
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <__assert_func+0x2c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4605      	mov	r5, r0
 800b1d4:	68d8      	ldr	r0, [r3, #12]
 800b1d6:	b954      	cbnz	r4, 800b1ee <__assert_func+0x26>
 800b1d8:	4b07      	ldr	r3, [pc, #28]	@ (800b1f8 <__assert_func+0x30>)
 800b1da:	461c      	mov	r4, r3
 800b1dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1e0:	9100      	str	r1, [sp, #0]
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	4905      	ldr	r1, [pc, #20]	@ (800b1fc <__assert_func+0x34>)
 800b1e6:	f000 fba7 	bl	800b938 <fiprintf>
 800b1ea:	f000 fbb7 	bl	800b95c <abort>
 800b1ee:	4b04      	ldr	r3, [pc, #16]	@ (800b200 <__assert_func+0x38>)
 800b1f0:	e7f4      	b.n	800b1dc <__assert_func+0x14>
 800b1f2:	bf00      	nop
 800b1f4:	240000bc 	.word	0x240000bc
 800b1f8:	0800c52d 	.word	0x0800c52d
 800b1fc:	0800c4ff 	.word	0x0800c4ff
 800b200:	0800c4f2 	.word	0x0800c4f2

0800b204 <_calloc_r>:
 800b204:	b570      	push	{r4, r5, r6, lr}
 800b206:	fba1 5402 	umull	r5, r4, r1, r2
 800b20a:	b93c      	cbnz	r4, 800b21c <_calloc_r+0x18>
 800b20c:	4629      	mov	r1, r5
 800b20e:	f7fe fa15 	bl	800963c <_malloc_r>
 800b212:	4606      	mov	r6, r0
 800b214:	b928      	cbnz	r0, 800b222 <_calloc_r+0x1e>
 800b216:	2600      	movs	r6, #0
 800b218:	4630      	mov	r0, r6
 800b21a:	bd70      	pop	{r4, r5, r6, pc}
 800b21c:	220c      	movs	r2, #12
 800b21e:	6002      	str	r2, [r0, #0]
 800b220:	e7f9      	b.n	800b216 <_calloc_r+0x12>
 800b222:	462a      	mov	r2, r5
 800b224:	4621      	mov	r1, r4
 800b226:	f7fd fb30 	bl	800888a <memset>
 800b22a:	e7f5      	b.n	800b218 <_calloc_r+0x14>

0800b22c <rshift>:
 800b22c:	6903      	ldr	r3, [r0, #16]
 800b22e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b23a:	f100 0414 	add.w	r4, r0, #20
 800b23e:	dd45      	ble.n	800b2cc <rshift+0xa0>
 800b240:	f011 011f 	ands.w	r1, r1, #31
 800b244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b24c:	d10c      	bne.n	800b268 <rshift+0x3c>
 800b24e:	f100 0710 	add.w	r7, r0, #16
 800b252:	4629      	mov	r1, r5
 800b254:	42b1      	cmp	r1, r6
 800b256:	d334      	bcc.n	800b2c2 <rshift+0x96>
 800b258:	1a9b      	subs	r3, r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	1eea      	subs	r2, r5, #3
 800b25e:	4296      	cmp	r6, r2
 800b260:	bf38      	it	cc
 800b262:	2300      	movcc	r3, #0
 800b264:	4423      	add	r3, r4
 800b266:	e015      	b.n	800b294 <rshift+0x68>
 800b268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b26c:	f1c1 0820 	rsb	r8, r1, #32
 800b270:	40cf      	lsrs	r7, r1
 800b272:	f105 0e04 	add.w	lr, r5, #4
 800b276:	46a1      	mov	r9, r4
 800b278:	4576      	cmp	r6, lr
 800b27a:	46f4      	mov	ip, lr
 800b27c:	d815      	bhi.n	800b2aa <rshift+0x7e>
 800b27e:	1a9a      	subs	r2, r3, r2
 800b280:	0092      	lsls	r2, r2, #2
 800b282:	3a04      	subs	r2, #4
 800b284:	3501      	adds	r5, #1
 800b286:	42ae      	cmp	r6, r5
 800b288:	bf38      	it	cc
 800b28a:	2200      	movcc	r2, #0
 800b28c:	18a3      	adds	r3, r4, r2
 800b28e:	50a7      	str	r7, [r4, r2]
 800b290:	b107      	cbz	r7, 800b294 <rshift+0x68>
 800b292:	3304      	adds	r3, #4
 800b294:	1b1a      	subs	r2, r3, r4
 800b296:	42a3      	cmp	r3, r4
 800b298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b29c:	bf08      	it	eq
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	6102      	str	r2, [r0, #16]
 800b2a2:	bf08      	it	eq
 800b2a4:	6143      	streq	r3, [r0, #20]
 800b2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2aa:	f8dc c000 	ldr.w	ip, [ip]
 800b2ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b2b6:	f849 7b04 	str.w	r7, [r9], #4
 800b2ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2be:	40cf      	lsrs	r7, r1
 800b2c0:	e7da      	b.n	800b278 <rshift+0x4c>
 800b2c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b2ca:	e7c3      	b.n	800b254 <rshift+0x28>
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	e7e1      	b.n	800b294 <rshift+0x68>

0800b2d0 <__hexdig_fun>:
 800b2d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d802      	bhi.n	800b2de <__hexdig_fun+0xe>
 800b2d8:	3820      	subs	r0, #32
 800b2da:	b2c0      	uxtb	r0, r0
 800b2dc:	4770      	bx	lr
 800b2de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b2e2:	2b05      	cmp	r3, #5
 800b2e4:	d801      	bhi.n	800b2ea <__hexdig_fun+0x1a>
 800b2e6:	3847      	subs	r0, #71	@ 0x47
 800b2e8:	e7f7      	b.n	800b2da <__hexdig_fun+0xa>
 800b2ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b2ee:	2b05      	cmp	r3, #5
 800b2f0:	d801      	bhi.n	800b2f6 <__hexdig_fun+0x26>
 800b2f2:	3827      	subs	r0, #39	@ 0x27
 800b2f4:	e7f1      	b.n	800b2da <__hexdig_fun+0xa>
 800b2f6:	2000      	movs	r0, #0
 800b2f8:	4770      	bx	lr
	...

0800b2fc <__gethex>:
 800b2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b300:	b085      	sub	sp, #20
 800b302:	468a      	mov	sl, r1
 800b304:	9302      	str	r3, [sp, #8]
 800b306:	680b      	ldr	r3, [r1, #0]
 800b308:	9001      	str	r0, [sp, #4]
 800b30a:	4690      	mov	r8, r2
 800b30c:	1c9c      	adds	r4, r3, #2
 800b30e:	46a1      	mov	r9, r4
 800b310:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b314:	2830      	cmp	r0, #48	@ 0x30
 800b316:	d0fa      	beq.n	800b30e <__gethex+0x12>
 800b318:	eba9 0303 	sub.w	r3, r9, r3
 800b31c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b320:	f7ff ffd6 	bl	800b2d0 <__hexdig_fun>
 800b324:	4605      	mov	r5, r0
 800b326:	2800      	cmp	r0, #0
 800b328:	d168      	bne.n	800b3fc <__gethex+0x100>
 800b32a:	49a0      	ldr	r1, [pc, #640]	@ (800b5ac <__gethex+0x2b0>)
 800b32c:	2201      	movs	r2, #1
 800b32e:	4648      	mov	r0, r9
 800b330:	f7ff ff10 	bl	800b154 <strncmp>
 800b334:	4607      	mov	r7, r0
 800b336:	2800      	cmp	r0, #0
 800b338:	d167      	bne.n	800b40a <__gethex+0x10e>
 800b33a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b33e:	4626      	mov	r6, r4
 800b340:	f7ff ffc6 	bl	800b2d0 <__hexdig_fun>
 800b344:	2800      	cmp	r0, #0
 800b346:	d062      	beq.n	800b40e <__gethex+0x112>
 800b348:	4623      	mov	r3, r4
 800b34a:	7818      	ldrb	r0, [r3, #0]
 800b34c:	2830      	cmp	r0, #48	@ 0x30
 800b34e:	4699      	mov	r9, r3
 800b350:	f103 0301 	add.w	r3, r3, #1
 800b354:	d0f9      	beq.n	800b34a <__gethex+0x4e>
 800b356:	f7ff ffbb 	bl	800b2d0 <__hexdig_fun>
 800b35a:	fab0 f580 	clz	r5, r0
 800b35e:	096d      	lsrs	r5, r5, #5
 800b360:	f04f 0b01 	mov.w	fp, #1
 800b364:	464a      	mov	r2, r9
 800b366:	4616      	mov	r6, r2
 800b368:	3201      	adds	r2, #1
 800b36a:	7830      	ldrb	r0, [r6, #0]
 800b36c:	f7ff ffb0 	bl	800b2d0 <__hexdig_fun>
 800b370:	2800      	cmp	r0, #0
 800b372:	d1f8      	bne.n	800b366 <__gethex+0x6a>
 800b374:	498d      	ldr	r1, [pc, #564]	@ (800b5ac <__gethex+0x2b0>)
 800b376:	2201      	movs	r2, #1
 800b378:	4630      	mov	r0, r6
 800b37a:	f7ff feeb 	bl	800b154 <strncmp>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d13f      	bne.n	800b402 <__gethex+0x106>
 800b382:	b944      	cbnz	r4, 800b396 <__gethex+0x9a>
 800b384:	1c74      	adds	r4, r6, #1
 800b386:	4622      	mov	r2, r4
 800b388:	4616      	mov	r6, r2
 800b38a:	3201      	adds	r2, #1
 800b38c:	7830      	ldrb	r0, [r6, #0]
 800b38e:	f7ff ff9f 	bl	800b2d0 <__hexdig_fun>
 800b392:	2800      	cmp	r0, #0
 800b394:	d1f8      	bne.n	800b388 <__gethex+0x8c>
 800b396:	1ba4      	subs	r4, r4, r6
 800b398:	00a7      	lsls	r7, r4, #2
 800b39a:	7833      	ldrb	r3, [r6, #0]
 800b39c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b3a0:	2b50      	cmp	r3, #80	@ 0x50
 800b3a2:	d13e      	bne.n	800b422 <__gethex+0x126>
 800b3a4:	7873      	ldrb	r3, [r6, #1]
 800b3a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3a8:	d033      	beq.n	800b412 <__gethex+0x116>
 800b3aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3ac:	d034      	beq.n	800b418 <__gethex+0x11c>
 800b3ae:	1c71      	adds	r1, r6, #1
 800b3b0:	2400      	movs	r4, #0
 800b3b2:	7808      	ldrb	r0, [r1, #0]
 800b3b4:	f7ff ff8c 	bl	800b2d0 <__hexdig_fun>
 800b3b8:	1e43      	subs	r3, r0, #1
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b18      	cmp	r3, #24
 800b3be:	d830      	bhi.n	800b422 <__gethex+0x126>
 800b3c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b3c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3c8:	f7ff ff82 	bl	800b2d0 <__hexdig_fun>
 800b3cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b3d0:	fa5f fc8c 	uxtb.w	ip, ip
 800b3d4:	f1bc 0f18 	cmp.w	ip, #24
 800b3d8:	f04f 030a 	mov.w	r3, #10
 800b3dc:	d91e      	bls.n	800b41c <__gethex+0x120>
 800b3de:	b104      	cbz	r4, 800b3e2 <__gethex+0xe6>
 800b3e0:	4252      	negs	r2, r2
 800b3e2:	4417      	add	r7, r2
 800b3e4:	f8ca 1000 	str.w	r1, [sl]
 800b3e8:	b1ed      	cbz	r5, 800b426 <__gethex+0x12a>
 800b3ea:	f1bb 0f00 	cmp.w	fp, #0
 800b3ee:	bf0c      	ite	eq
 800b3f0:	2506      	moveq	r5, #6
 800b3f2:	2500      	movne	r5, #0
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	b005      	add	sp, #20
 800b3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3fc:	2500      	movs	r5, #0
 800b3fe:	462c      	mov	r4, r5
 800b400:	e7b0      	b.n	800b364 <__gethex+0x68>
 800b402:	2c00      	cmp	r4, #0
 800b404:	d1c7      	bne.n	800b396 <__gethex+0x9a>
 800b406:	4627      	mov	r7, r4
 800b408:	e7c7      	b.n	800b39a <__gethex+0x9e>
 800b40a:	464e      	mov	r6, r9
 800b40c:	462f      	mov	r7, r5
 800b40e:	2501      	movs	r5, #1
 800b410:	e7c3      	b.n	800b39a <__gethex+0x9e>
 800b412:	2400      	movs	r4, #0
 800b414:	1cb1      	adds	r1, r6, #2
 800b416:	e7cc      	b.n	800b3b2 <__gethex+0xb6>
 800b418:	2401      	movs	r4, #1
 800b41a:	e7fb      	b.n	800b414 <__gethex+0x118>
 800b41c:	fb03 0002 	mla	r0, r3, r2, r0
 800b420:	e7ce      	b.n	800b3c0 <__gethex+0xc4>
 800b422:	4631      	mov	r1, r6
 800b424:	e7de      	b.n	800b3e4 <__gethex+0xe8>
 800b426:	eba6 0309 	sub.w	r3, r6, r9
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4629      	mov	r1, r5
 800b42e:	2b07      	cmp	r3, #7
 800b430:	dc0a      	bgt.n	800b448 <__gethex+0x14c>
 800b432:	9801      	ldr	r0, [sp, #4]
 800b434:	f7fe f98e 	bl	8009754 <_Balloc>
 800b438:	4604      	mov	r4, r0
 800b43a:	b940      	cbnz	r0, 800b44e <__gethex+0x152>
 800b43c:	4b5c      	ldr	r3, [pc, #368]	@ (800b5b0 <__gethex+0x2b4>)
 800b43e:	4602      	mov	r2, r0
 800b440:	21e4      	movs	r1, #228	@ 0xe4
 800b442:	485c      	ldr	r0, [pc, #368]	@ (800b5b4 <__gethex+0x2b8>)
 800b444:	f7ff fec0 	bl	800b1c8 <__assert_func>
 800b448:	3101      	adds	r1, #1
 800b44a:	105b      	asrs	r3, r3, #1
 800b44c:	e7ef      	b.n	800b42e <__gethex+0x132>
 800b44e:	f100 0a14 	add.w	sl, r0, #20
 800b452:	2300      	movs	r3, #0
 800b454:	4655      	mov	r5, sl
 800b456:	469b      	mov	fp, r3
 800b458:	45b1      	cmp	r9, r6
 800b45a:	d337      	bcc.n	800b4cc <__gethex+0x1d0>
 800b45c:	f845 bb04 	str.w	fp, [r5], #4
 800b460:	eba5 050a 	sub.w	r5, r5, sl
 800b464:	10ad      	asrs	r5, r5, #2
 800b466:	6125      	str	r5, [r4, #16]
 800b468:	4658      	mov	r0, fp
 800b46a:	f7fe fa65 	bl	8009938 <__hi0bits>
 800b46e:	016d      	lsls	r5, r5, #5
 800b470:	f8d8 6000 	ldr.w	r6, [r8]
 800b474:	1a2d      	subs	r5, r5, r0
 800b476:	42b5      	cmp	r5, r6
 800b478:	dd54      	ble.n	800b524 <__gethex+0x228>
 800b47a:	1bad      	subs	r5, r5, r6
 800b47c:	4629      	mov	r1, r5
 800b47e:	4620      	mov	r0, r4
 800b480:	f7fe fdf6 	bl	800a070 <__any_on>
 800b484:	4681      	mov	r9, r0
 800b486:	b178      	cbz	r0, 800b4a8 <__gethex+0x1ac>
 800b488:	1e6b      	subs	r3, r5, #1
 800b48a:	1159      	asrs	r1, r3, #5
 800b48c:	f003 021f 	and.w	r2, r3, #31
 800b490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b494:	f04f 0901 	mov.w	r9, #1
 800b498:	fa09 f202 	lsl.w	r2, r9, r2
 800b49c:	420a      	tst	r2, r1
 800b49e:	d003      	beq.n	800b4a8 <__gethex+0x1ac>
 800b4a0:	454b      	cmp	r3, r9
 800b4a2:	dc36      	bgt.n	800b512 <__gethex+0x216>
 800b4a4:	f04f 0902 	mov.w	r9, #2
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f7ff febe 	bl	800b22c <rshift>
 800b4b0:	442f      	add	r7, r5
 800b4b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4b6:	42bb      	cmp	r3, r7
 800b4b8:	da42      	bge.n	800b540 <__gethex+0x244>
 800b4ba:	9801      	ldr	r0, [sp, #4]
 800b4bc:	4621      	mov	r1, r4
 800b4be:	f7fe f989 	bl	80097d4 <_Bfree>
 800b4c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	6013      	str	r3, [r2, #0]
 800b4c8:	25a3      	movs	r5, #163	@ 0xa3
 800b4ca:	e793      	b.n	800b3f4 <__gethex+0xf8>
 800b4cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b4d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b4d2:	d012      	beq.n	800b4fa <__gethex+0x1fe>
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d104      	bne.n	800b4e2 <__gethex+0x1e6>
 800b4d8:	f845 bb04 	str.w	fp, [r5], #4
 800b4dc:	f04f 0b00 	mov.w	fp, #0
 800b4e0:	465b      	mov	r3, fp
 800b4e2:	7830      	ldrb	r0, [r6, #0]
 800b4e4:	9303      	str	r3, [sp, #12]
 800b4e6:	f7ff fef3 	bl	800b2d0 <__hexdig_fun>
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	f000 000f 	and.w	r0, r0, #15
 800b4f0:	4098      	lsls	r0, r3
 800b4f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4f6:	3304      	adds	r3, #4
 800b4f8:	e7ae      	b.n	800b458 <__gethex+0x15c>
 800b4fa:	45b1      	cmp	r9, r6
 800b4fc:	d8ea      	bhi.n	800b4d4 <__gethex+0x1d8>
 800b4fe:	492b      	ldr	r1, [pc, #172]	@ (800b5ac <__gethex+0x2b0>)
 800b500:	9303      	str	r3, [sp, #12]
 800b502:	2201      	movs	r2, #1
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fe25 	bl	800b154 <strncmp>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1e1      	bne.n	800b4d4 <__gethex+0x1d8>
 800b510:	e7a2      	b.n	800b458 <__gethex+0x15c>
 800b512:	1ea9      	subs	r1, r5, #2
 800b514:	4620      	mov	r0, r4
 800b516:	f7fe fdab 	bl	800a070 <__any_on>
 800b51a:	2800      	cmp	r0, #0
 800b51c:	d0c2      	beq.n	800b4a4 <__gethex+0x1a8>
 800b51e:	f04f 0903 	mov.w	r9, #3
 800b522:	e7c1      	b.n	800b4a8 <__gethex+0x1ac>
 800b524:	da09      	bge.n	800b53a <__gethex+0x23e>
 800b526:	1b75      	subs	r5, r6, r5
 800b528:	4621      	mov	r1, r4
 800b52a:	9801      	ldr	r0, [sp, #4]
 800b52c:	462a      	mov	r2, r5
 800b52e:	f7fe fb69 	bl	8009c04 <__lshift>
 800b532:	1b7f      	subs	r7, r7, r5
 800b534:	4604      	mov	r4, r0
 800b536:	f100 0a14 	add.w	sl, r0, #20
 800b53a:	f04f 0900 	mov.w	r9, #0
 800b53e:	e7b8      	b.n	800b4b2 <__gethex+0x1b6>
 800b540:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b544:	42bd      	cmp	r5, r7
 800b546:	dd6f      	ble.n	800b628 <__gethex+0x32c>
 800b548:	1bed      	subs	r5, r5, r7
 800b54a:	42ae      	cmp	r6, r5
 800b54c:	dc34      	bgt.n	800b5b8 <__gethex+0x2bc>
 800b54e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b552:	2b02      	cmp	r3, #2
 800b554:	d022      	beq.n	800b59c <__gethex+0x2a0>
 800b556:	2b03      	cmp	r3, #3
 800b558:	d024      	beq.n	800b5a4 <__gethex+0x2a8>
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d115      	bne.n	800b58a <__gethex+0x28e>
 800b55e:	42ae      	cmp	r6, r5
 800b560:	d113      	bne.n	800b58a <__gethex+0x28e>
 800b562:	2e01      	cmp	r6, #1
 800b564:	d10b      	bne.n	800b57e <__gethex+0x282>
 800b566:	9a02      	ldr	r2, [sp, #8]
 800b568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	2301      	movs	r3, #1
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	f8ca 3000 	str.w	r3, [sl]
 800b576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b578:	2562      	movs	r5, #98	@ 0x62
 800b57a:	601c      	str	r4, [r3, #0]
 800b57c:	e73a      	b.n	800b3f4 <__gethex+0xf8>
 800b57e:	1e71      	subs	r1, r6, #1
 800b580:	4620      	mov	r0, r4
 800b582:	f7fe fd75 	bl	800a070 <__any_on>
 800b586:	2800      	cmp	r0, #0
 800b588:	d1ed      	bne.n	800b566 <__gethex+0x26a>
 800b58a:	9801      	ldr	r0, [sp, #4]
 800b58c:	4621      	mov	r1, r4
 800b58e:	f7fe f921 	bl	80097d4 <_Bfree>
 800b592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b594:	2300      	movs	r3, #0
 800b596:	6013      	str	r3, [r2, #0]
 800b598:	2550      	movs	r5, #80	@ 0x50
 800b59a:	e72b      	b.n	800b3f4 <__gethex+0xf8>
 800b59c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1f3      	bne.n	800b58a <__gethex+0x28e>
 800b5a2:	e7e0      	b.n	800b566 <__gethex+0x26a>
 800b5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1dd      	bne.n	800b566 <__gethex+0x26a>
 800b5aa:	e7ee      	b.n	800b58a <__gethex+0x28e>
 800b5ac:	0800c380 	.word	0x0800c380
 800b5b0:	0800c219 	.word	0x0800c219
 800b5b4:	0800c52e 	.word	0x0800c52e
 800b5b8:	1e6f      	subs	r7, r5, #1
 800b5ba:	f1b9 0f00 	cmp.w	r9, #0
 800b5be:	d130      	bne.n	800b622 <__gethex+0x326>
 800b5c0:	b127      	cbz	r7, 800b5cc <__gethex+0x2d0>
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	f7fe fd53 	bl	800a070 <__any_on>
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	117a      	asrs	r2, r7, #5
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b5d4:	f007 071f 	and.w	r7, r7, #31
 800b5d8:	40bb      	lsls	r3, r7
 800b5da:	4213      	tst	r3, r2
 800b5dc:	4629      	mov	r1, r5
 800b5de:	4620      	mov	r0, r4
 800b5e0:	bf18      	it	ne
 800b5e2:	f049 0902 	orrne.w	r9, r9, #2
 800b5e6:	f7ff fe21 	bl	800b22c <rshift>
 800b5ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b5ee:	1b76      	subs	r6, r6, r5
 800b5f0:	2502      	movs	r5, #2
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d047      	beq.n	800b688 <__gethex+0x38c>
 800b5f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d015      	beq.n	800b62c <__gethex+0x330>
 800b600:	2b03      	cmp	r3, #3
 800b602:	d017      	beq.n	800b634 <__gethex+0x338>
 800b604:	2b01      	cmp	r3, #1
 800b606:	d109      	bne.n	800b61c <__gethex+0x320>
 800b608:	f019 0f02 	tst.w	r9, #2
 800b60c:	d006      	beq.n	800b61c <__gethex+0x320>
 800b60e:	f8da 3000 	ldr.w	r3, [sl]
 800b612:	ea49 0903 	orr.w	r9, r9, r3
 800b616:	f019 0f01 	tst.w	r9, #1
 800b61a:	d10e      	bne.n	800b63a <__gethex+0x33e>
 800b61c:	f045 0510 	orr.w	r5, r5, #16
 800b620:	e032      	b.n	800b688 <__gethex+0x38c>
 800b622:	f04f 0901 	mov.w	r9, #1
 800b626:	e7d1      	b.n	800b5cc <__gethex+0x2d0>
 800b628:	2501      	movs	r5, #1
 800b62a:	e7e2      	b.n	800b5f2 <__gethex+0x2f6>
 800b62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b62e:	f1c3 0301 	rsb	r3, r3, #1
 800b632:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0f0      	beq.n	800b61c <__gethex+0x320>
 800b63a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b63e:	f104 0314 	add.w	r3, r4, #20
 800b642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b64a:	f04f 0c00 	mov.w	ip, #0
 800b64e:	4618      	mov	r0, r3
 800b650:	f853 2b04 	ldr.w	r2, [r3], #4
 800b654:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b658:	d01b      	beq.n	800b692 <__gethex+0x396>
 800b65a:	3201      	adds	r2, #1
 800b65c:	6002      	str	r2, [r0, #0]
 800b65e:	2d02      	cmp	r5, #2
 800b660:	f104 0314 	add.w	r3, r4, #20
 800b664:	d13c      	bne.n	800b6e0 <__gethex+0x3e4>
 800b666:	f8d8 2000 	ldr.w	r2, [r8]
 800b66a:	3a01      	subs	r2, #1
 800b66c:	42b2      	cmp	r2, r6
 800b66e:	d109      	bne.n	800b684 <__gethex+0x388>
 800b670:	1171      	asrs	r1, r6, #5
 800b672:	2201      	movs	r2, #1
 800b674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b678:	f006 061f 	and.w	r6, r6, #31
 800b67c:	fa02 f606 	lsl.w	r6, r2, r6
 800b680:	421e      	tst	r6, r3
 800b682:	d13a      	bne.n	800b6fa <__gethex+0x3fe>
 800b684:	f045 0520 	orr.w	r5, r5, #32
 800b688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b68a:	601c      	str	r4, [r3, #0]
 800b68c:	9b02      	ldr	r3, [sp, #8]
 800b68e:	601f      	str	r7, [r3, #0]
 800b690:	e6b0      	b.n	800b3f4 <__gethex+0xf8>
 800b692:	4299      	cmp	r1, r3
 800b694:	f843 cc04 	str.w	ip, [r3, #-4]
 800b698:	d8d9      	bhi.n	800b64e <__gethex+0x352>
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	459b      	cmp	fp, r3
 800b69e:	db17      	blt.n	800b6d0 <__gethex+0x3d4>
 800b6a0:	6861      	ldr	r1, [r4, #4]
 800b6a2:	9801      	ldr	r0, [sp, #4]
 800b6a4:	3101      	adds	r1, #1
 800b6a6:	f7fe f855 	bl	8009754 <_Balloc>
 800b6aa:	4681      	mov	r9, r0
 800b6ac:	b918      	cbnz	r0, 800b6b6 <__gethex+0x3ba>
 800b6ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b718 <__gethex+0x41c>)
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	2184      	movs	r1, #132	@ 0x84
 800b6b4:	e6c5      	b.n	800b442 <__gethex+0x146>
 800b6b6:	6922      	ldr	r2, [r4, #16]
 800b6b8:	3202      	adds	r2, #2
 800b6ba:	f104 010c 	add.w	r1, r4, #12
 800b6be:	0092      	lsls	r2, r2, #2
 800b6c0:	300c      	adds	r0, #12
 800b6c2:	f7ff fd69 	bl	800b198 <memcpy>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	9801      	ldr	r0, [sp, #4]
 800b6ca:	f7fe f883 	bl	80097d4 <_Bfree>
 800b6ce:	464c      	mov	r4, r9
 800b6d0:	6923      	ldr	r3, [r4, #16]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6d8:	6122      	str	r2, [r4, #16]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	615a      	str	r2, [r3, #20]
 800b6de:	e7be      	b.n	800b65e <__gethex+0x362>
 800b6e0:	6922      	ldr	r2, [r4, #16]
 800b6e2:	455a      	cmp	r2, fp
 800b6e4:	dd0b      	ble.n	800b6fe <__gethex+0x402>
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f7ff fd9f 	bl	800b22c <rshift>
 800b6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6f2:	3701      	adds	r7, #1
 800b6f4:	42bb      	cmp	r3, r7
 800b6f6:	f6ff aee0 	blt.w	800b4ba <__gethex+0x1be>
 800b6fa:	2501      	movs	r5, #1
 800b6fc:	e7c2      	b.n	800b684 <__gethex+0x388>
 800b6fe:	f016 061f 	ands.w	r6, r6, #31
 800b702:	d0fa      	beq.n	800b6fa <__gethex+0x3fe>
 800b704:	4453      	add	r3, sl
 800b706:	f1c6 0620 	rsb	r6, r6, #32
 800b70a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b70e:	f7fe f913 	bl	8009938 <__hi0bits>
 800b712:	42b0      	cmp	r0, r6
 800b714:	dbe7      	blt.n	800b6e6 <__gethex+0x3ea>
 800b716:	e7f0      	b.n	800b6fa <__gethex+0x3fe>
 800b718:	0800c219 	.word	0x0800c219

0800b71c <L_shift>:
 800b71c:	f1c2 0208 	rsb	r2, r2, #8
 800b720:	0092      	lsls	r2, r2, #2
 800b722:	b570      	push	{r4, r5, r6, lr}
 800b724:	f1c2 0620 	rsb	r6, r2, #32
 800b728:	6843      	ldr	r3, [r0, #4]
 800b72a:	6804      	ldr	r4, [r0, #0]
 800b72c:	fa03 f506 	lsl.w	r5, r3, r6
 800b730:	432c      	orrs	r4, r5
 800b732:	40d3      	lsrs	r3, r2
 800b734:	6004      	str	r4, [r0, #0]
 800b736:	f840 3f04 	str.w	r3, [r0, #4]!
 800b73a:	4288      	cmp	r0, r1
 800b73c:	d3f4      	bcc.n	800b728 <L_shift+0xc>
 800b73e:	bd70      	pop	{r4, r5, r6, pc}

0800b740 <__match>:
 800b740:	b530      	push	{r4, r5, lr}
 800b742:	6803      	ldr	r3, [r0, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74a:	b914      	cbnz	r4, 800b752 <__match+0x12>
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	2001      	movs	r0, #1
 800b750:	bd30      	pop	{r4, r5, pc}
 800b752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b756:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b75a:	2d19      	cmp	r5, #25
 800b75c:	bf98      	it	ls
 800b75e:	3220      	addls	r2, #32
 800b760:	42a2      	cmp	r2, r4
 800b762:	d0f0      	beq.n	800b746 <__match+0x6>
 800b764:	2000      	movs	r0, #0
 800b766:	e7f3      	b.n	800b750 <__match+0x10>

0800b768 <__hexnan>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	680b      	ldr	r3, [r1, #0]
 800b76e:	6801      	ldr	r1, [r0, #0]
 800b770:	115e      	asrs	r6, r3, #5
 800b772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b776:	f013 031f 	ands.w	r3, r3, #31
 800b77a:	b087      	sub	sp, #28
 800b77c:	bf18      	it	ne
 800b77e:	3604      	addne	r6, #4
 800b780:	2500      	movs	r5, #0
 800b782:	1f37      	subs	r7, r6, #4
 800b784:	4682      	mov	sl, r0
 800b786:	4690      	mov	r8, r2
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b78e:	46b9      	mov	r9, r7
 800b790:	463c      	mov	r4, r7
 800b792:	9502      	str	r5, [sp, #8]
 800b794:	46ab      	mov	fp, r5
 800b796:	784a      	ldrb	r2, [r1, #1]
 800b798:	1c4b      	adds	r3, r1, #1
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	b342      	cbz	r2, 800b7f0 <__hexnan+0x88>
 800b79e:	4610      	mov	r0, r2
 800b7a0:	9105      	str	r1, [sp, #20]
 800b7a2:	9204      	str	r2, [sp, #16]
 800b7a4:	f7ff fd94 	bl	800b2d0 <__hexdig_fun>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d151      	bne.n	800b850 <__hexnan+0xe8>
 800b7ac:	9a04      	ldr	r2, [sp, #16]
 800b7ae:	9905      	ldr	r1, [sp, #20]
 800b7b0:	2a20      	cmp	r2, #32
 800b7b2:	d818      	bhi.n	800b7e6 <__hexnan+0x7e>
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	459b      	cmp	fp, r3
 800b7b8:	dd13      	ble.n	800b7e2 <__hexnan+0x7a>
 800b7ba:	454c      	cmp	r4, r9
 800b7bc:	d206      	bcs.n	800b7cc <__hexnan+0x64>
 800b7be:	2d07      	cmp	r5, #7
 800b7c0:	dc04      	bgt.n	800b7cc <__hexnan+0x64>
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff ffa8 	bl	800b71c <L_shift>
 800b7cc:	4544      	cmp	r4, r8
 800b7ce:	d952      	bls.n	800b876 <__hexnan+0x10e>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f1a4 0904 	sub.w	r9, r4, #4
 800b7d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7da:	f8cd b008 	str.w	fp, [sp, #8]
 800b7de:	464c      	mov	r4, r9
 800b7e0:	461d      	mov	r5, r3
 800b7e2:	9903      	ldr	r1, [sp, #12]
 800b7e4:	e7d7      	b.n	800b796 <__hexnan+0x2e>
 800b7e6:	2a29      	cmp	r2, #41	@ 0x29
 800b7e8:	d157      	bne.n	800b89a <__hexnan+0x132>
 800b7ea:	3102      	adds	r1, #2
 800b7ec:	f8ca 1000 	str.w	r1, [sl]
 800b7f0:	f1bb 0f00 	cmp.w	fp, #0
 800b7f4:	d051      	beq.n	800b89a <__hexnan+0x132>
 800b7f6:	454c      	cmp	r4, r9
 800b7f8:	d206      	bcs.n	800b808 <__hexnan+0xa0>
 800b7fa:	2d07      	cmp	r5, #7
 800b7fc:	dc04      	bgt.n	800b808 <__hexnan+0xa0>
 800b7fe:	462a      	mov	r2, r5
 800b800:	4649      	mov	r1, r9
 800b802:	4620      	mov	r0, r4
 800b804:	f7ff ff8a 	bl	800b71c <L_shift>
 800b808:	4544      	cmp	r4, r8
 800b80a:	d936      	bls.n	800b87a <__hexnan+0x112>
 800b80c:	f1a8 0204 	sub.w	r2, r8, #4
 800b810:	4623      	mov	r3, r4
 800b812:	f853 1b04 	ldr.w	r1, [r3], #4
 800b816:	f842 1f04 	str.w	r1, [r2, #4]!
 800b81a:	429f      	cmp	r7, r3
 800b81c:	d2f9      	bcs.n	800b812 <__hexnan+0xaa>
 800b81e:	1b3b      	subs	r3, r7, r4
 800b820:	f023 0303 	bic.w	r3, r3, #3
 800b824:	3304      	adds	r3, #4
 800b826:	3401      	adds	r4, #1
 800b828:	3e03      	subs	r6, #3
 800b82a:	42b4      	cmp	r4, r6
 800b82c:	bf88      	it	hi
 800b82e:	2304      	movhi	r3, #4
 800b830:	4443      	add	r3, r8
 800b832:	2200      	movs	r2, #0
 800b834:	f843 2b04 	str.w	r2, [r3], #4
 800b838:	429f      	cmp	r7, r3
 800b83a:	d2fb      	bcs.n	800b834 <__hexnan+0xcc>
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	b91b      	cbnz	r3, 800b848 <__hexnan+0xe0>
 800b840:	4547      	cmp	r7, r8
 800b842:	d128      	bne.n	800b896 <__hexnan+0x12e>
 800b844:	2301      	movs	r3, #1
 800b846:	603b      	str	r3, [r7, #0]
 800b848:	2005      	movs	r0, #5
 800b84a:	b007      	add	sp, #28
 800b84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b850:	3501      	adds	r5, #1
 800b852:	2d08      	cmp	r5, #8
 800b854:	f10b 0b01 	add.w	fp, fp, #1
 800b858:	dd06      	ble.n	800b868 <__hexnan+0x100>
 800b85a:	4544      	cmp	r4, r8
 800b85c:	d9c1      	bls.n	800b7e2 <__hexnan+0x7a>
 800b85e:	2300      	movs	r3, #0
 800b860:	f844 3c04 	str.w	r3, [r4, #-4]
 800b864:	2501      	movs	r5, #1
 800b866:	3c04      	subs	r4, #4
 800b868:	6822      	ldr	r2, [r4, #0]
 800b86a:	f000 000f 	and.w	r0, r0, #15
 800b86e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b872:	6020      	str	r0, [r4, #0]
 800b874:	e7b5      	b.n	800b7e2 <__hexnan+0x7a>
 800b876:	2508      	movs	r5, #8
 800b878:	e7b3      	b.n	800b7e2 <__hexnan+0x7a>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d0dd      	beq.n	800b83c <__hexnan+0xd4>
 800b880:	f1c3 0320 	rsb	r3, r3, #32
 800b884:	f04f 32ff 	mov.w	r2, #4294967295
 800b888:	40da      	lsrs	r2, r3
 800b88a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b88e:	4013      	ands	r3, r2
 800b890:	f846 3c04 	str.w	r3, [r6, #-4]
 800b894:	e7d2      	b.n	800b83c <__hexnan+0xd4>
 800b896:	3f04      	subs	r7, #4
 800b898:	e7d0      	b.n	800b83c <__hexnan+0xd4>
 800b89a:	2004      	movs	r0, #4
 800b89c:	e7d5      	b.n	800b84a <__hexnan+0xe2>

0800b89e <__ascii_mbtowc>:
 800b89e:	b082      	sub	sp, #8
 800b8a0:	b901      	cbnz	r1, 800b8a4 <__ascii_mbtowc+0x6>
 800b8a2:	a901      	add	r1, sp, #4
 800b8a4:	b142      	cbz	r2, 800b8b8 <__ascii_mbtowc+0x1a>
 800b8a6:	b14b      	cbz	r3, 800b8bc <__ascii_mbtowc+0x1e>
 800b8a8:	7813      	ldrb	r3, [r2, #0]
 800b8aa:	600b      	str	r3, [r1, #0]
 800b8ac:	7812      	ldrb	r2, [r2, #0]
 800b8ae:	1e10      	subs	r0, r2, #0
 800b8b0:	bf18      	it	ne
 800b8b2:	2001      	movne	r0, #1
 800b8b4:	b002      	add	sp, #8
 800b8b6:	4770      	bx	lr
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	e7fb      	b.n	800b8b4 <__ascii_mbtowc+0x16>
 800b8bc:	f06f 0001 	mvn.w	r0, #1
 800b8c0:	e7f8      	b.n	800b8b4 <__ascii_mbtowc+0x16>

0800b8c2 <_realloc_r>:
 800b8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c6:	4680      	mov	r8, r0
 800b8c8:	4615      	mov	r5, r2
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	b921      	cbnz	r1, 800b8d8 <_realloc_r+0x16>
 800b8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	f7fd beb2 	b.w	800963c <_malloc_r>
 800b8d8:	b92a      	cbnz	r2, 800b8e6 <_realloc_r+0x24>
 800b8da:	f7fd fe3b 	bl	8009554 <_free_r>
 800b8de:	2400      	movs	r4, #0
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e6:	f000 f840 	bl	800b96a <_malloc_usable_size_r>
 800b8ea:	4285      	cmp	r5, r0
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	d802      	bhi.n	800b8f6 <_realloc_r+0x34>
 800b8f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8f4:	d8f4      	bhi.n	800b8e0 <_realloc_r+0x1e>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	f7fd fe9f 	bl	800963c <_malloc_r>
 800b8fe:	4607      	mov	r7, r0
 800b900:	2800      	cmp	r0, #0
 800b902:	d0ec      	beq.n	800b8de <_realloc_r+0x1c>
 800b904:	42b5      	cmp	r5, r6
 800b906:	462a      	mov	r2, r5
 800b908:	4621      	mov	r1, r4
 800b90a:	bf28      	it	cs
 800b90c:	4632      	movcs	r2, r6
 800b90e:	f7ff fc43 	bl	800b198 <memcpy>
 800b912:	4621      	mov	r1, r4
 800b914:	4640      	mov	r0, r8
 800b916:	f7fd fe1d 	bl	8009554 <_free_r>
 800b91a:	463c      	mov	r4, r7
 800b91c:	e7e0      	b.n	800b8e0 <_realloc_r+0x1e>

0800b91e <__ascii_wctomb>:
 800b91e:	4603      	mov	r3, r0
 800b920:	4608      	mov	r0, r1
 800b922:	b141      	cbz	r1, 800b936 <__ascii_wctomb+0x18>
 800b924:	2aff      	cmp	r2, #255	@ 0xff
 800b926:	d904      	bls.n	800b932 <__ascii_wctomb+0x14>
 800b928:	228a      	movs	r2, #138	@ 0x8a
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295
 800b930:	4770      	bx	lr
 800b932:	700a      	strb	r2, [r1, #0]
 800b934:	2001      	movs	r0, #1
 800b936:	4770      	bx	lr

0800b938 <fiprintf>:
 800b938:	b40e      	push	{r1, r2, r3}
 800b93a:	b503      	push	{r0, r1, lr}
 800b93c:	4601      	mov	r1, r0
 800b93e:	ab03      	add	r3, sp, #12
 800b940:	4805      	ldr	r0, [pc, #20]	@ (800b958 <fiprintf+0x20>)
 800b942:	f853 2b04 	ldr.w	r2, [r3], #4
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	f000 f83f 	bl	800b9cc <_vfiprintf_r>
 800b94e:	b002      	add	sp, #8
 800b950:	f85d eb04 	ldr.w	lr, [sp], #4
 800b954:	b003      	add	sp, #12
 800b956:	4770      	bx	lr
 800b958:	240000bc 	.word	0x240000bc

0800b95c <abort>:
 800b95c:	b508      	push	{r3, lr}
 800b95e:	2006      	movs	r0, #6
 800b960:	f000 fa08 	bl	800bd74 <raise>
 800b964:	2001      	movs	r0, #1
 800b966:	f7f5 ffb5 	bl	80018d4 <_exit>

0800b96a <_malloc_usable_size_r>:
 800b96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b96e:	1f18      	subs	r0, r3, #4
 800b970:	2b00      	cmp	r3, #0
 800b972:	bfbc      	itt	lt
 800b974:	580b      	ldrlt	r3, [r1, r0]
 800b976:	18c0      	addlt	r0, r0, r3
 800b978:	4770      	bx	lr

0800b97a <__sfputc_r>:
 800b97a:	6893      	ldr	r3, [r2, #8]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	b410      	push	{r4}
 800b982:	6093      	str	r3, [r2, #8]
 800b984:	da08      	bge.n	800b998 <__sfputc_r+0x1e>
 800b986:	6994      	ldr	r4, [r2, #24]
 800b988:	42a3      	cmp	r3, r4
 800b98a:	db01      	blt.n	800b990 <__sfputc_r+0x16>
 800b98c:	290a      	cmp	r1, #10
 800b98e:	d103      	bne.n	800b998 <__sfputc_r+0x1e>
 800b990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b994:	f000 b932 	b.w	800bbfc <__swbuf_r>
 800b998:	6813      	ldr	r3, [r2, #0]
 800b99a:	1c58      	adds	r0, r3, #1
 800b99c:	6010      	str	r0, [r2, #0]
 800b99e:	7019      	strb	r1, [r3, #0]
 800b9a0:	4608      	mov	r0, r1
 800b9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <__sfputs_r>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	4614      	mov	r4, r2
 800b9b0:	18d5      	adds	r5, r2, r3
 800b9b2:	42ac      	cmp	r4, r5
 800b9b4:	d101      	bne.n	800b9ba <__sfputs_r+0x12>
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	e007      	b.n	800b9ca <__sfputs_r+0x22>
 800b9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9be:	463a      	mov	r2, r7
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7ff ffda 	bl	800b97a <__sfputc_r>
 800b9c6:	1c43      	adds	r3, r0, #1
 800b9c8:	d1f3      	bne.n	800b9b2 <__sfputs_r+0xa>
 800b9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9cc <_vfiprintf_r>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	460d      	mov	r5, r1
 800b9d2:	b09d      	sub	sp, #116	@ 0x74
 800b9d4:	4614      	mov	r4, r2
 800b9d6:	4698      	mov	r8, r3
 800b9d8:	4606      	mov	r6, r0
 800b9da:	b118      	cbz	r0, 800b9e4 <_vfiprintf_r+0x18>
 800b9dc:	6a03      	ldr	r3, [r0, #32]
 800b9de:	b90b      	cbnz	r3, 800b9e4 <_vfiprintf_r+0x18>
 800b9e0:	f7fc fe86 	bl	80086f0 <__sinit>
 800b9e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b9e6:	07d9      	lsls	r1, r3, #31
 800b9e8:	d405      	bmi.n	800b9f6 <_vfiprintf_r+0x2a>
 800b9ea:	89ab      	ldrh	r3, [r5, #12]
 800b9ec:	059a      	lsls	r2, r3, #22
 800b9ee:	d402      	bmi.n	800b9f6 <_vfiprintf_r+0x2a>
 800b9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9f2:	f7fc ffc8 	bl	8008986 <__retarget_lock_acquire_recursive>
 800b9f6:	89ab      	ldrh	r3, [r5, #12]
 800b9f8:	071b      	lsls	r3, r3, #28
 800b9fa:	d501      	bpl.n	800ba00 <_vfiprintf_r+0x34>
 800b9fc:	692b      	ldr	r3, [r5, #16]
 800b9fe:	b99b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x5c>
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f000 f938 	bl	800bc78 <__swsetup_r>
 800ba08:	b170      	cbz	r0, 800ba28 <_vfiprintf_r+0x5c>
 800ba0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba0c:	07dc      	lsls	r4, r3, #31
 800ba0e:	d504      	bpl.n	800ba1a <_vfiprintf_r+0x4e>
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	b01d      	add	sp, #116	@ 0x74
 800ba16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba1a:	89ab      	ldrh	r3, [r5, #12]
 800ba1c:	0598      	lsls	r0, r3, #22
 800ba1e:	d4f7      	bmi.n	800ba10 <_vfiprintf_r+0x44>
 800ba20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba22:	f7fc ffb1 	bl	8008988 <__retarget_lock_release_recursive>
 800ba26:	e7f3      	b.n	800ba10 <_vfiprintf_r+0x44>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2c:	2320      	movs	r3, #32
 800ba2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba36:	2330      	movs	r3, #48	@ 0x30
 800ba38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bbe8 <_vfiprintf_r+0x21c>
 800ba3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba40:	f04f 0901 	mov.w	r9, #1
 800ba44:	4623      	mov	r3, r4
 800ba46:	469a      	mov	sl, r3
 800ba48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba4c:	b10a      	cbz	r2, 800ba52 <_vfiprintf_r+0x86>
 800ba4e:	2a25      	cmp	r2, #37	@ 0x25
 800ba50:	d1f9      	bne.n	800ba46 <_vfiprintf_r+0x7a>
 800ba52:	ebba 0b04 	subs.w	fp, sl, r4
 800ba56:	d00b      	beq.n	800ba70 <_vfiprintf_r+0xa4>
 800ba58:	465b      	mov	r3, fp
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4630      	mov	r0, r6
 800ba60:	f7ff ffa2 	bl	800b9a8 <__sfputs_r>
 800ba64:	3001      	adds	r0, #1
 800ba66:	f000 80a7 	beq.w	800bbb8 <_vfiprintf_r+0x1ec>
 800ba6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba6c:	445a      	add	r2, fp
 800ba6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba70:	f89a 3000 	ldrb.w	r3, [sl]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f000 809f 	beq.w	800bbb8 <_vfiprintf_r+0x1ec>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba84:	f10a 0a01 	add.w	sl, sl, #1
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	9307      	str	r3, [sp, #28]
 800ba8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba92:	4654      	mov	r4, sl
 800ba94:	2205      	movs	r2, #5
 800ba96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba9a:	4853      	ldr	r0, [pc, #332]	@ (800bbe8 <_vfiprintf_r+0x21c>)
 800ba9c:	f7f4 fc20 	bl	80002e0 <memchr>
 800baa0:	9a04      	ldr	r2, [sp, #16]
 800baa2:	b9d8      	cbnz	r0, 800badc <_vfiprintf_r+0x110>
 800baa4:	06d1      	lsls	r1, r2, #27
 800baa6:	bf44      	itt	mi
 800baa8:	2320      	movmi	r3, #32
 800baaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baae:	0713      	lsls	r3, r2, #28
 800bab0:	bf44      	itt	mi
 800bab2:	232b      	movmi	r3, #43	@ 0x2b
 800bab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bab8:	f89a 3000 	ldrb.w	r3, [sl]
 800babc:	2b2a      	cmp	r3, #42	@ 0x2a
 800babe:	d015      	beq.n	800baec <_vfiprintf_r+0x120>
 800bac0:	9a07      	ldr	r2, [sp, #28]
 800bac2:	4654      	mov	r4, sl
 800bac4:	2000      	movs	r0, #0
 800bac6:	f04f 0c0a 	mov.w	ip, #10
 800baca:	4621      	mov	r1, r4
 800bacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bad0:	3b30      	subs	r3, #48	@ 0x30
 800bad2:	2b09      	cmp	r3, #9
 800bad4:	d94b      	bls.n	800bb6e <_vfiprintf_r+0x1a2>
 800bad6:	b1b0      	cbz	r0, 800bb06 <_vfiprintf_r+0x13a>
 800bad8:	9207      	str	r2, [sp, #28]
 800bada:	e014      	b.n	800bb06 <_vfiprintf_r+0x13a>
 800badc:	eba0 0308 	sub.w	r3, r0, r8
 800bae0:	fa09 f303 	lsl.w	r3, r9, r3
 800bae4:	4313      	orrs	r3, r2
 800bae6:	9304      	str	r3, [sp, #16]
 800bae8:	46a2      	mov	sl, r4
 800baea:	e7d2      	b.n	800ba92 <_vfiprintf_r+0xc6>
 800baec:	9b03      	ldr	r3, [sp, #12]
 800baee:	1d19      	adds	r1, r3, #4
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	9103      	str	r1, [sp, #12]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	bfbb      	ittet	lt
 800baf8:	425b      	neglt	r3, r3
 800bafa:	f042 0202 	orrlt.w	r2, r2, #2
 800bafe:	9307      	strge	r3, [sp, #28]
 800bb00:	9307      	strlt	r3, [sp, #28]
 800bb02:	bfb8      	it	lt
 800bb04:	9204      	strlt	r2, [sp, #16]
 800bb06:	7823      	ldrb	r3, [r4, #0]
 800bb08:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb0a:	d10a      	bne.n	800bb22 <_vfiprintf_r+0x156>
 800bb0c:	7863      	ldrb	r3, [r4, #1]
 800bb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb10:	d132      	bne.n	800bb78 <_vfiprintf_r+0x1ac>
 800bb12:	9b03      	ldr	r3, [sp, #12]
 800bb14:	1d1a      	adds	r2, r3, #4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	9203      	str	r2, [sp, #12]
 800bb1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb1e:	3402      	adds	r4, #2
 800bb20:	9305      	str	r3, [sp, #20]
 800bb22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bbf8 <_vfiprintf_r+0x22c>
 800bb26:	7821      	ldrb	r1, [r4, #0]
 800bb28:	2203      	movs	r2, #3
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	f7f4 fbd8 	bl	80002e0 <memchr>
 800bb30:	b138      	cbz	r0, 800bb42 <_vfiprintf_r+0x176>
 800bb32:	9b04      	ldr	r3, [sp, #16]
 800bb34:	eba0 000a 	sub.w	r0, r0, sl
 800bb38:	2240      	movs	r2, #64	@ 0x40
 800bb3a:	4082      	lsls	r2, r0
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	3401      	adds	r4, #1
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb46:	4829      	ldr	r0, [pc, #164]	@ (800bbec <_vfiprintf_r+0x220>)
 800bb48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb4c:	2206      	movs	r2, #6
 800bb4e:	f7f4 fbc7 	bl	80002e0 <memchr>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d03f      	beq.n	800bbd6 <_vfiprintf_r+0x20a>
 800bb56:	4b26      	ldr	r3, [pc, #152]	@ (800bbf0 <_vfiprintf_r+0x224>)
 800bb58:	bb1b      	cbnz	r3, 800bba2 <_vfiprintf_r+0x1d6>
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	3307      	adds	r3, #7
 800bb5e:	f023 0307 	bic.w	r3, r3, #7
 800bb62:	3308      	adds	r3, #8
 800bb64:	9303      	str	r3, [sp, #12]
 800bb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb68:	443b      	add	r3, r7
 800bb6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6c:	e76a      	b.n	800ba44 <_vfiprintf_r+0x78>
 800bb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb72:	460c      	mov	r4, r1
 800bb74:	2001      	movs	r0, #1
 800bb76:	e7a8      	b.n	800baca <_vfiprintf_r+0xfe>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	9305      	str	r3, [sp, #20]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	f04f 0c0a 	mov.w	ip, #10
 800bb84:	4620      	mov	r0, r4
 800bb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb8a:	3a30      	subs	r2, #48	@ 0x30
 800bb8c:	2a09      	cmp	r2, #9
 800bb8e:	d903      	bls.n	800bb98 <_vfiprintf_r+0x1cc>
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0c6      	beq.n	800bb22 <_vfiprintf_r+0x156>
 800bb94:	9105      	str	r1, [sp, #20]
 800bb96:	e7c4      	b.n	800bb22 <_vfiprintf_r+0x156>
 800bb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e7f0      	b.n	800bb84 <_vfiprintf_r+0x1b8>
 800bba2:	ab03      	add	r3, sp, #12
 800bba4:	9300      	str	r3, [sp, #0]
 800bba6:	462a      	mov	r2, r5
 800bba8:	4b12      	ldr	r3, [pc, #72]	@ (800bbf4 <_vfiprintf_r+0x228>)
 800bbaa:	a904      	add	r1, sp, #16
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7fb ff5f 	bl	8007a70 <_printf_float>
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	1c78      	adds	r0, r7, #1
 800bbb6:	d1d6      	bne.n	800bb66 <_vfiprintf_r+0x19a>
 800bbb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbba:	07d9      	lsls	r1, r3, #31
 800bbbc:	d405      	bmi.n	800bbca <_vfiprintf_r+0x1fe>
 800bbbe:	89ab      	ldrh	r3, [r5, #12]
 800bbc0:	059a      	lsls	r2, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_vfiprintf_r+0x1fe>
 800bbc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbc6:	f7fc fedf 	bl	8008988 <__retarget_lock_release_recursive>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	065b      	lsls	r3, r3, #25
 800bbce:	f53f af1f 	bmi.w	800ba10 <_vfiprintf_r+0x44>
 800bbd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbd4:	e71e      	b.n	800ba14 <_vfiprintf_r+0x48>
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4b05      	ldr	r3, [pc, #20]	@ (800bbf4 <_vfiprintf_r+0x228>)
 800bbde:	a904      	add	r1, sp, #16
 800bbe0:	4630      	mov	r0, r6
 800bbe2:	f7fc f9cd 	bl	8007f80 <_printf_i>
 800bbe6:	e7e4      	b.n	800bbb2 <_vfiprintf_r+0x1e6>
 800bbe8:	0800c4d9 	.word	0x0800c4d9
 800bbec:	0800c4e3 	.word	0x0800c4e3
 800bbf0:	08007a71 	.word	0x08007a71
 800bbf4:	0800b9a9 	.word	0x0800b9a9
 800bbf8:	0800c4df 	.word	0x0800c4df

0800bbfc <__swbuf_r>:
 800bbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbfe:	460e      	mov	r6, r1
 800bc00:	4614      	mov	r4, r2
 800bc02:	4605      	mov	r5, r0
 800bc04:	b118      	cbz	r0, 800bc0e <__swbuf_r+0x12>
 800bc06:	6a03      	ldr	r3, [r0, #32]
 800bc08:	b90b      	cbnz	r3, 800bc0e <__swbuf_r+0x12>
 800bc0a:	f7fc fd71 	bl	80086f0 <__sinit>
 800bc0e:	69a3      	ldr	r3, [r4, #24]
 800bc10:	60a3      	str	r3, [r4, #8]
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	071a      	lsls	r2, r3, #28
 800bc16:	d501      	bpl.n	800bc1c <__swbuf_r+0x20>
 800bc18:	6923      	ldr	r3, [r4, #16]
 800bc1a:	b943      	cbnz	r3, 800bc2e <__swbuf_r+0x32>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f000 f82a 	bl	800bc78 <__swsetup_r>
 800bc24:	b118      	cbz	r0, 800bc2e <__swbuf_r+0x32>
 800bc26:	f04f 37ff 	mov.w	r7, #4294967295
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	6922      	ldr	r2, [r4, #16]
 800bc32:	1a98      	subs	r0, r3, r2
 800bc34:	6963      	ldr	r3, [r4, #20]
 800bc36:	b2f6      	uxtb	r6, r6
 800bc38:	4283      	cmp	r3, r0
 800bc3a:	4637      	mov	r7, r6
 800bc3c:	dc05      	bgt.n	800bc4a <__swbuf_r+0x4e>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	f7ff fa45 	bl	800b0d0 <_fflush_r>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d1ed      	bne.n	800bc26 <__swbuf_r+0x2a>
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	60a3      	str	r3, [r4, #8]
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	1c5a      	adds	r2, r3, #1
 800bc54:	6022      	str	r2, [r4, #0]
 800bc56:	701e      	strb	r6, [r3, #0]
 800bc58:	6962      	ldr	r2, [r4, #20]
 800bc5a:	1c43      	adds	r3, r0, #1
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d004      	beq.n	800bc6a <__swbuf_r+0x6e>
 800bc60:	89a3      	ldrh	r3, [r4, #12]
 800bc62:	07db      	lsls	r3, r3, #31
 800bc64:	d5e1      	bpl.n	800bc2a <__swbuf_r+0x2e>
 800bc66:	2e0a      	cmp	r6, #10
 800bc68:	d1df      	bne.n	800bc2a <__swbuf_r+0x2e>
 800bc6a:	4621      	mov	r1, r4
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f7ff fa2f 	bl	800b0d0 <_fflush_r>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d0d9      	beq.n	800bc2a <__swbuf_r+0x2e>
 800bc76:	e7d6      	b.n	800bc26 <__swbuf_r+0x2a>

0800bc78 <__swsetup_r>:
 800bc78:	b538      	push	{r3, r4, r5, lr}
 800bc7a:	4b29      	ldr	r3, [pc, #164]	@ (800bd20 <__swsetup_r+0xa8>)
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	6818      	ldr	r0, [r3, #0]
 800bc80:	460c      	mov	r4, r1
 800bc82:	b118      	cbz	r0, 800bc8c <__swsetup_r+0x14>
 800bc84:	6a03      	ldr	r3, [r0, #32]
 800bc86:	b90b      	cbnz	r3, 800bc8c <__swsetup_r+0x14>
 800bc88:	f7fc fd32 	bl	80086f0 <__sinit>
 800bc8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc90:	0719      	lsls	r1, r3, #28
 800bc92:	d422      	bmi.n	800bcda <__swsetup_r+0x62>
 800bc94:	06da      	lsls	r2, r3, #27
 800bc96:	d407      	bmi.n	800bca8 <__swsetup_r+0x30>
 800bc98:	2209      	movs	r2, #9
 800bc9a:	602a      	str	r2, [r5, #0]
 800bc9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	f04f 30ff 	mov.w	r0, #4294967295
 800bca6:	e033      	b.n	800bd10 <__swsetup_r+0x98>
 800bca8:	0758      	lsls	r0, r3, #29
 800bcaa:	d512      	bpl.n	800bcd2 <__swsetup_r+0x5a>
 800bcac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcae:	b141      	cbz	r1, 800bcc2 <__swsetup_r+0x4a>
 800bcb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcb4:	4299      	cmp	r1, r3
 800bcb6:	d002      	beq.n	800bcbe <__swsetup_r+0x46>
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f7fd fc4b 	bl	8009554 <_free_r>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcc2:	89a3      	ldrh	r3, [r4, #12]
 800bcc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	2300      	movs	r3, #0
 800bccc:	6063      	str	r3, [r4, #4]
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f043 0308 	orr.w	r3, r3, #8
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	b94b      	cbnz	r3, 800bcf2 <__swsetup_r+0x7a>
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bce4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bce8:	d003      	beq.n	800bcf2 <__swsetup_r+0x7a>
 800bcea:	4621      	mov	r1, r4
 800bcec:	4628      	mov	r0, r5
 800bcee:	f000 f883 	bl	800bdf8 <__smakebuf_r>
 800bcf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcf6:	f013 0201 	ands.w	r2, r3, #1
 800bcfa:	d00a      	beq.n	800bd12 <__swsetup_r+0x9a>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	60a2      	str	r2, [r4, #8]
 800bd00:	6962      	ldr	r2, [r4, #20]
 800bd02:	4252      	negs	r2, r2
 800bd04:	61a2      	str	r2, [r4, #24]
 800bd06:	6922      	ldr	r2, [r4, #16]
 800bd08:	b942      	cbnz	r2, 800bd1c <__swsetup_r+0xa4>
 800bd0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd0e:	d1c5      	bne.n	800bc9c <__swsetup_r+0x24>
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	0799      	lsls	r1, r3, #30
 800bd14:	bf58      	it	pl
 800bd16:	6962      	ldrpl	r2, [r4, #20]
 800bd18:	60a2      	str	r2, [r4, #8]
 800bd1a:	e7f4      	b.n	800bd06 <__swsetup_r+0x8e>
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e7f7      	b.n	800bd10 <__swsetup_r+0x98>
 800bd20:	240000bc 	.word	0x240000bc

0800bd24 <_raise_r>:
 800bd24:	291f      	cmp	r1, #31
 800bd26:	b538      	push	{r3, r4, r5, lr}
 800bd28:	4605      	mov	r5, r0
 800bd2a:	460c      	mov	r4, r1
 800bd2c:	d904      	bls.n	800bd38 <_raise_r+0x14>
 800bd2e:	2316      	movs	r3, #22
 800bd30:	6003      	str	r3, [r0, #0]
 800bd32:	f04f 30ff 	mov.w	r0, #4294967295
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd3a:	b112      	cbz	r2, 800bd42 <_raise_r+0x1e>
 800bd3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd40:	b94b      	cbnz	r3, 800bd56 <_raise_r+0x32>
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 f830 	bl	800bda8 <_getpid_r>
 800bd48:	4622      	mov	r2, r4
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd52:	f000 b817 	b.w	800bd84 <_kill_r>
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d00a      	beq.n	800bd70 <_raise_r+0x4c>
 800bd5a:	1c59      	adds	r1, r3, #1
 800bd5c:	d103      	bne.n	800bd66 <_raise_r+0x42>
 800bd5e:	2316      	movs	r3, #22
 800bd60:	6003      	str	r3, [r0, #0]
 800bd62:	2001      	movs	r0, #1
 800bd64:	e7e7      	b.n	800bd36 <_raise_r+0x12>
 800bd66:	2100      	movs	r1, #0
 800bd68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4798      	blx	r3
 800bd70:	2000      	movs	r0, #0
 800bd72:	e7e0      	b.n	800bd36 <_raise_r+0x12>

0800bd74 <raise>:
 800bd74:	4b02      	ldr	r3, [pc, #8]	@ (800bd80 <raise+0xc>)
 800bd76:	4601      	mov	r1, r0
 800bd78:	6818      	ldr	r0, [r3, #0]
 800bd7a:	f7ff bfd3 	b.w	800bd24 <_raise_r>
 800bd7e:	bf00      	nop
 800bd80:	240000bc 	.word	0x240000bc

0800bd84 <_kill_r>:
 800bd84:	b538      	push	{r3, r4, r5, lr}
 800bd86:	4d07      	ldr	r5, [pc, #28]	@ (800bda4 <_kill_r+0x20>)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	4604      	mov	r4, r0
 800bd8c:	4608      	mov	r0, r1
 800bd8e:	4611      	mov	r1, r2
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	f7f5 fd8f 	bl	80018b4 <_kill>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d102      	bne.n	800bda0 <_kill_r+0x1c>
 800bd9a:	682b      	ldr	r3, [r5, #0]
 800bd9c:	b103      	cbz	r3, 800bda0 <_kill_r+0x1c>
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	bd38      	pop	{r3, r4, r5, pc}
 800bda2:	bf00      	nop
 800bda4:	2400057c 	.word	0x2400057c

0800bda8 <_getpid_r>:
 800bda8:	f7f5 bd7c 	b.w	80018a4 <_getpid>

0800bdac <__swhatbuf_r>:
 800bdac:	b570      	push	{r4, r5, r6, lr}
 800bdae:	460c      	mov	r4, r1
 800bdb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	b096      	sub	sp, #88	@ 0x58
 800bdb8:	4615      	mov	r5, r2
 800bdba:	461e      	mov	r6, r3
 800bdbc:	da0d      	bge.n	800bdda <__swhatbuf_r+0x2e>
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdc4:	f04f 0100 	mov.w	r1, #0
 800bdc8:	bf14      	ite	ne
 800bdca:	2340      	movne	r3, #64	@ 0x40
 800bdcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	6031      	str	r1, [r6, #0]
 800bdd4:	602b      	str	r3, [r5, #0]
 800bdd6:	b016      	add	sp, #88	@ 0x58
 800bdd8:	bd70      	pop	{r4, r5, r6, pc}
 800bdda:	466a      	mov	r2, sp
 800bddc:	f000 f848 	bl	800be70 <_fstat_r>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	dbec      	blt.n	800bdbe <__swhatbuf_r+0x12>
 800bde4:	9901      	ldr	r1, [sp, #4]
 800bde6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdee:	4259      	negs	r1, r3
 800bdf0:	4159      	adcs	r1, r3
 800bdf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdf6:	e7eb      	b.n	800bdd0 <__swhatbuf_r+0x24>

0800bdf8 <__smakebuf_r>:
 800bdf8:	898b      	ldrh	r3, [r1, #12]
 800bdfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdfc:	079d      	lsls	r5, r3, #30
 800bdfe:	4606      	mov	r6, r0
 800be00:	460c      	mov	r4, r1
 800be02:	d507      	bpl.n	800be14 <__smakebuf_r+0x1c>
 800be04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	6123      	str	r3, [r4, #16]
 800be0c:	2301      	movs	r3, #1
 800be0e:	6163      	str	r3, [r4, #20]
 800be10:	b003      	add	sp, #12
 800be12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be14:	ab01      	add	r3, sp, #4
 800be16:	466a      	mov	r2, sp
 800be18:	f7ff ffc8 	bl	800bdac <__swhatbuf_r>
 800be1c:	9f00      	ldr	r7, [sp, #0]
 800be1e:	4605      	mov	r5, r0
 800be20:	4639      	mov	r1, r7
 800be22:	4630      	mov	r0, r6
 800be24:	f7fd fc0a 	bl	800963c <_malloc_r>
 800be28:	b948      	cbnz	r0, 800be3e <__smakebuf_r+0x46>
 800be2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2e:	059a      	lsls	r2, r3, #22
 800be30:	d4ee      	bmi.n	800be10 <__smakebuf_r+0x18>
 800be32:	f023 0303 	bic.w	r3, r3, #3
 800be36:	f043 0302 	orr.w	r3, r3, #2
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	e7e2      	b.n	800be04 <__smakebuf_r+0xc>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	6020      	str	r0, [r4, #0]
 800be42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be46:	81a3      	strh	r3, [r4, #12]
 800be48:	9b01      	ldr	r3, [sp, #4]
 800be4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be4e:	b15b      	cbz	r3, 800be68 <__smakebuf_r+0x70>
 800be50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be54:	4630      	mov	r0, r6
 800be56:	f000 f81d 	bl	800be94 <_isatty_r>
 800be5a:	b128      	cbz	r0, 800be68 <__smakebuf_r+0x70>
 800be5c:	89a3      	ldrh	r3, [r4, #12]
 800be5e:	f023 0303 	bic.w	r3, r3, #3
 800be62:	f043 0301 	orr.w	r3, r3, #1
 800be66:	81a3      	strh	r3, [r4, #12]
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	431d      	orrs	r5, r3
 800be6c:	81a5      	strh	r5, [r4, #12]
 800be6e:	e7cf      	b.n	800be10 <__smakebuf_r+0x18>

0800be70 <_fstat_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4d07      	ldr	r5, [pc, #28]	@ (800be90 <_fstat_r+0x20>)
 800be74:	2300      	movs	r3, #0
 800be76:	4604      	mov	r4, r0
 800be78:	4608      	mov	r0, r1
 800be7a:	4611      	mov	r1, r2
 800be7c:	602b      	str	r3, [r5, #0]
 800be7e:	f7f5 fd5d 	bl	800193c <_fstat>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	d102      	bne.n	800be8c <_fstat_r+0x1c>
 800be86:	682b      	ldr	r3, [r5, #0]
 800be88:	b103      	cbz	r3, 800be8c <_fstat_r+0x1c>
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	bd38      	pop	{r3, r4, r5, pc}
 800be8e:	bf00      	nop
 800be90:	2400057c 	.word	0x2400057c

0800be94 <_isatty_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d06      	ldr	r5, [pc, #24]	@ (800beb0 <_isatty_r+0x1c>)
 800be98:	2300      	movs	r3, #0
 800be9a:	4604      	mov	r4, r0
 800be9c:	4608      	mov	r0, r1
 800be9e:	602b      	str	r3, [r5, #0]
 800bea0:	f7f5 fd5c 	bl	800195c <_isatty>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_isatty_r+0x1a>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_isatty_r+0x1a>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	2400057c 	.word	0x2400057c
 800beb4:	00000000 	.word	0x00000000

0800beb8 <sqrt>:
 800beb8:	b508      	push	{r3, lr}
 800beba:	ed2d 8b04 	vpush	{d8-d9}
 800bebe:	eeb0 8b40 	vmov.f64	d8, d0
 800bec2:	f000 f91b 	bl	800c0fc <__ieee754_sqrt>
 800bec6:	eeb4 8b48 	vcmp.f64	d8, d8
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	d60c      	bvs.n	800beea <sqrt+0x32>
 800bed0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800bef0 <sqrt+0x38>
 800bed4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bedc:	d505      	bpl.n	800beea <sqrt+0x32>
 800bede:	f7fc fd27 	bl	8008930 <__errno>
 800bee2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bee6:	2321      	movs	r3, #33	@ 0x21
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	ecbd 8b04 	vpop	{d8-d9}
 800beee:	bd08      	pop	{r3, pc}
	...

0800bef8 <atan>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	eeb0 7b40 	vmov.f64	d7, d0
 800befe:	ee17 5a90 	vmov	r5, s15
 800bf02:	4b73      	ldr	r3, [pc, #460]	@ (800c0d0 <atan+0x1d8>)
 800bf04:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bf08:	429c      	cmp	r4, r3
 800bf0a:	d913      	bls.n	800bf34 <atan+0x3c>
 800bf0c:	4b71      	ldr	r3, [pc, #452]	@ (800c0d4 <atan+0x1dc>)
 800bf0e:	429c      	cmp	r4, r3
 800bf10:	d803      	bhi.n	800bf1a <atan+0x22>
 800bf12:	d107      	bne.n	800bf24 <atan+0x2c>
 800bf14:	ee10 3a10 	vmov	r3, s0
 800bf18:	b123      	cbz	r3, 800bf24 <atan+0x2c>
 800bf1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf1e:	eeb0 0b47 	vmov.f64	d0, d7
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800c060 <atan+0x168>
 800bf28:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800c068 <atan+0x170>
 800bf2c:	2d00      	cmp	r5, #0
 800bf2e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800bf32:	e7f4      	b.n	800bf1e <atan+0x26>
 800bf34:	4b68      	ldr	r3, [pc, #416]	@ (800c0d8 <atan+0x1e0>)
 800bf36:	429c      	cmp	r4, r3
 800bf38:	d811      	bhi.n	800bf5e <atan+0x66>
 800bf3a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bf3e:	429c      	cmp	r4, r3
 800bf40:	d80a      	bhi.n	800bf58 <atan+0x60>
 800bf42:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800bf46:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800c070 <atan+0x178>
 800bf4a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bf4e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf56:	dce2      	bgt.n	800bf1e <atan+0x26>
 800bf58:	f04f 33ff 	mov.w	r3, #4294967295
 800bf5c:	e013      	b.n	800bf86 <atan+0x8e>
 800bf5e:	f000 f8c5 	bl	800c0ec <fabs>
 800bf62:	4b5e      	ldr	r3, [pc, #376]	@ (800c0dc <atan+0x1e4>)
 800bf64:	429c      	cmp	r4, r3
 800bf66:	d84f      	bhi.n	800c008 <atan+0x110>
 800bf68:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bf6c:	429c      	cmp	r4, r3
 800bf6e:	d841      	bhi.n	800bff4 <atan+0xfc>
 800bf70:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bf74:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800bf78:	2300      	movs	r3, #0
 800bf7a:	eea0 5b07 	vfma.f64	d5, d0, d7
 800bf7e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bf82:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800bf86:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c078 <atan+0x180>
 800bf8a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800bf8e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800bf92:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c080 <atan+0x188>
 800bf96:	eea5 3b06 	vfma.f64	d3, d5, d6
 800bf9a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c088 <atan+0x190>
 800bf9e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bfa2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c090 <atan+0x198>
 800bfa6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bfaa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c098 <atan+0x1a0>
 800bfae:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bfb2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c0a0 <atan+0x1a8>
 800bfb6:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c0a8 <atan+0x1b0>
 800bfba:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bfbe:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c0b0 <atan+0x1b8>
 800bfc2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800bfc6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c0b8 <atan+0x1c0>
 800bfca:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bfce:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c0c0 <atan+0x1c8>
 800bfd2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800bfd6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c0c8 <atan+0x1d0>
 800bfda:	1c5a      	adds	r2, r3, #1
 800bfdc:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bfe0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800bfe4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800bfe8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bfec:	d121      	bne.n	800c032 <atan+0x13a>
 800bfee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bff2:	e794      	b.n	800bf1e <atan+0x26>
 800bff4:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800bff8:	2301      	movs	r3, #1
 800bffa:	ee30 5b47 	vsub.f64	d5, d0, d7
 800bffe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c002:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c006:	e7be      	b.n	800bf86 <atan+0x8e>
 800c008:	4b35      	ldr	r3, [pc, #212]	@ (800c0e0 <atan+0x1e8>)
 800c00a:	429c      	cmp	r4, r3
 800c00c:	d20b      	bcs.n	800c026 <atan+0x12e>
 800c00e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800c012:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c016:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c01a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c01e:	2302      	movs	r3, #2
 800c020:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c024:	e7af      	b.n	800bf86 <atan+0x8e>
 800c026:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800c02a:	2303      	movs	r3, #3
 800c02c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c030:	e7a9      	b.n	800bf86 <atan+0x8e>
 800c032:	4a2c      	ldr	r2, [pc, #176]	@ (800c0e4 <atan+0x1ec>)
 800c034:	492c      	ldr	r1, [pc, #176]	@ (800c0e8 <atan+0x1f0>)
 800c036:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c03a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c03e:	ed93 5b00 	vldr	d5, [r3]
 800c042:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c046:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c04a:	ed92 7b00 	vldr	d7, [r2]
 800c04e:	2d00      	cmp	r5, #0
 800c050:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c054:	bfb8      	it	lt
 800c056:	eeb1 7b47 	vneglt.f64	d7, d7
 800c05a:	e760      	b.n	800bf1e <atan+0x26>
 800c05c:	f3af 8000 	nop.w
 800c060:	54442d18 	.word	0x54442d18
 800c064:	bff921fb 	.word	0xbff921fb
 800c068:	54442d18 	.word	0x54442d18
 800c06c:	3ff921fb 	.word	0x3ff921fb
 800c070:	8800759c 	.word	0x8800759c
 800c074:	7e37e43c 	.word	0x7e37e43c
 800c078:	e322da11 	.word	0xe322da11
 800c07c:	3f90ad3a 	.word	0x3f90ad3a
 800c080:	24760deb 	.word	0x24760deb
 800c084:	3fa97b4b 	.word	0x3fa97b4b
 800c088:	a0d03d51 	.word	0xa0d03d51
 800c08c:	3fb10d66 	.word	0x3fb10d66
 800c090:	c54c206e 	.word	0xc54c206e
 800c094:	3fb745cd 	.word	0x3fb745cd
 800c098:	920083ff 	.word	0x920083ff
 800c09c:	3fc24924 	.word	0x3fc24924
 800c0a0:	5555550d 	.word	0x5555550d
 800c0a4:	3fd55555 	.word	0x3fd55555
 800c0a8:	52defd9a 	.word	0x52defd9a
 800c0ac:	bfadde2d 	.word	0xbfadde2d
 800c0b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800c0b4:	bfa2b444 	.word	0xbfa2b444
 800c0b8:	af749a6d 	.word	0xaf749a6d
 800c0bc:	bfb3b0f2 	.word	0xbfb3b0f2
 800c0c0:	fe231671 	.word	0xfe231671
 800c0c4:	bfbc71c6 	.word	0xbfbc71c6
 800c0c8:	9998ebc4 	.word	0x9998ebc4
 800c0cc:	bfc99999 	.word	0xbfc99999
 800c0d0:	440fffff 	.word	0x440fffff
 800c0d4:	7ff00000 	.word	0x7ff00000
 800c0d8:	3fdbffff 	.word	0x3fdbffff
 800c0dc:	3ff2ffff 	.word	0x3ff2ffff
 800c0e0:	40038000 	.word	0x40038000
 800c0e4:	0800c5b0 	.word	0x0800c5b0
 800c0e8:	0800c590 	.word	0x0800c590

0800c0ec <fabs>:
 800c0ec:	ec51 0b10 	vmov	r0, r1, d0
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0f6:	ec43 2b10 	vmov	d0, r2, r3
 800c0fa:	4770      	bx	lr

0800c0fc <__ieee754_sqrt>:
 800c0fc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c100:	4770      	bx	lr
	...

0800c104 <_init>:
 800c104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c106:	bf00      	nop
 800c108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c10a:	bc08      	pop	{r3}
 800c10c:	469e      	mov	lr, r3
 800c10e:	4770      	bx	lr

0800c110 <_fini>:
 800c110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c112:	bf00      	nop
 800c114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c116:	bc08      	pop	{r3}
 800c118:	469e      	mov	lr, r3
 800c11a:	4770      	bx	lr
