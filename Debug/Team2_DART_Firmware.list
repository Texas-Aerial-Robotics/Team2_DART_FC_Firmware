
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010348  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080105e8  080105e8  000115e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010ac0  08010ac0  00011ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010ac8  08010ac8  00011ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08010acc  08010acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  08010ad0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005b8  240001e0  08010cac  000121e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24000798  08010cac  00012798  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000121dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a89a  00000000  00000000  0001220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031a2  00000000  00000000  0002caa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013e8  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f84  00000000  00000000  00031030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000391fb  00000000  00000000  00031fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c641  00000000  00000000  0006b1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169fde  00000000  00000000  000877f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f17ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006978  00000000  00000000  001f1814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000088  00000000  00000000  001f818c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080105d0 	.word	0x080105d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	080105d0 	.word	0x080105d0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	@ 0x48
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d10e      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d107      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	f000 8136 	beq.w	8000d20 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	f000 fa3c 	bl	8000f54 <invSqrt>
 8000adc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3304      	adds	r3, #4
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	edd3 6a00 	vldr	s13, [r3]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3308      	adds	r3, #8
 8000b54:	edd3 6a00 	vldr	s13, [r3]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	330c      	adds	r3, #12
 8000b88:	edd3 6a00 	vldr	s13, [r3]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bcc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bf0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c00:	4bcd      	ldr	r3, [pc, #820]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd54      	ble.n	8000cba <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c10:	4bc9      	ldr	r3, [pc, #804]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c26:	4bc6      	ldr	r3, [pc, #792]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	4bc3      	ldr	r3, [pc, #780]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c36:	4bc0      	ldr	r3, [pc, #768]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4bbb      	ldr	r3, [pc, #748]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c5c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c72:	4bb5      	ldr	r3, [pc, #724]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000c82:	4baf      	ldr	r3, [pc, #700]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000c94:	4bab      	ldr	r3, [pc, #684]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cb8:	e00b      	b.n	8000cd2 <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cba:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000cca:	4b9f      	ldr	r3, [pc, #636]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000cec:	4b97      	ldr	r3, [pc, #604]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d44:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d6c:	eef1 6a67 	vneg.f32	s13, s15
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d78:	ed97 6a08 	vldr	s12, [r7, #32]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	ed93 6a00 	vldr	s12, [r3]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dba:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	ed93 6a00 	vldr	s12, [r3]
 8000dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3308      	adds	r3, #8
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	330c      	adds	r3, #12
 8000e12:	ed93 6a00 	vldr	s12, [r3]
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3308      	adds	r3, #8
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	330c      	adds	r3, #12
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e52:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	330c      	adds	r3, #12
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	edd3 6a00 	vldr	s13, [r3]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 f843 	bl	8000f54 <invSqrt>
 8000ece:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3308      	adds	r3, #8
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	330c      	adds	r3, #12
 8000f22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	@ 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	3b5a740e 	.word	0x3b5a740e
 8000f40:	24000200 	.word	0x24000200
 8000f44:	24000204 	.word	0x24000204
 8000f48:	24000208 	.word	0x24000208
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	3ada740e 	.word	0x3ada740e

08000f54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	105a      	asrs	r2, r3, #1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <invSqrt+0x74>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5f3759df 	.word	0x5f3759df
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffa:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8001178 <bmp388_quantize_calibration+0x1a8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001004:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800100a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001016:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800101a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001020:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001026:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001032:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 8001036:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103a:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001190 <bmp388_quantize_calibration+0x1c0>
 800103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001044:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001048:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800104a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001198 <bmp388_quantize_calibration+0x1c8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001068:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800106e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011a0 <bmp388_quantize_calibration+0x1d0>
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001084:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800108a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011a8 <bmp388_quantize_calibration+0x1d8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	899b      	ldrh	r3, [r3, #12]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010b0:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010ba:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010be:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ca:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011b0 <bmp388_quantize_calibration+0x1e0>
 80010ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010e6:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010f0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010f6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001102:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011b8 <bmp388_quantize_calibration+0x1e8>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011c0 <bmp388_quantize_calibration+0x1f0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40700000 	.word	0x40700000
 8001178:	00000000 	.word	0x00000000
 800117c:	41d00000 	.word	0x41d00000
 8001180:	00000000 	.word	0x00000000
 8001184:	42f00000 	.word	0x42f00000
 8001188:	00000000 	.word	0x00000000
 800118c:	40d00000 	.word	0x40d00000
 8001190:	00000000 	.word	0x00000000
 8001194:	41300000 	.word	0x41300000
 8001198:	00000000 	.word	0x00000000
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	42400000 	.word	0x42400000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40500000 	.word	0x40500000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40e00000 	.word	0x40e00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	44000000 	.word	0x44000000
 80011c8:	2400020c 	.word	0x2400020c
 80011cc:	24000228 	.word	0x24000228

080011d0 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <bmp388_write_reg+0x44>)
 80011e6:	f004 fd5d 	bl	8005ca4 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <bmp388_write_reg+0x48>)
 80011f2:	f007 fce1 	bl	8008bb8 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80011f6:	1db9      	adds	r1, r7, #6
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	2201      	movs	r2, #1
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <bmp388_write_reg+0x48>)
 80011fe:	f007 fcdb 	bl	8008bb8 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <bmp388_write_reg+0x44>)
 8001208:	f004 fd4c 	bl	8005ca4 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58020000 	.word	0x58020000
 8001218:	24000328 	.word	0x24000328

0800121c <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <bmp388_read_reg+0x7c>)
 800123c:	f004 fd32 	bl	8005ca4 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <bmp388_read_reg+0x80>)
 800124a:	f007 fcb5 	bl	8008bb8 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bmp388_read_reg+0x40>
    Error_Handler();
 8001258:	f000 fdd2 	bl	8001e00 <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 800125c:	f107 010e 	add.w	r1, r7, #14
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <bmp388_read_reg+0x80>)
 8001266:	f007 fe95 	bl	8008f94 <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <bmp388_read_reg+0x80>)
 8001274:	f007 fe8e 	bl	8008f94 <HAL_SPI_Receive>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmp388_read_reg+0x6a>
    Error_Handler();
 8001282:	f000 fdbd 	bl	8001e00 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <bmp388_read_reg+0x7c>)
 800128c:	f004 fd0a 	bl	8005ca4 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58020000 	.word	0x58020000
 800129c:	24000328 	.word	0x24000328

080012a0 <bmp388_setup>:
void bmp388_setup()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012a6:	21b6      	movs	r1, #182	@ 0xb6
 80012a8:	207e      	movs	r0, #126	@ 0x7e
 80012aa:	f7ff ff91 	bl	80011d0 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fb48 	bl	8002944 <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2215      	movs	r2, #21
 80012ba:	4619      	mov	r1, r3
 80012bc:	2031      	movs	r0, #49	@ 0x31
 80012be:	f7ff ffad 	bl	800121c <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2202      	movs	r2, #2
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffa7 	bl	800121c <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <bmp388_setup+0x120>)
 80012e0:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <bmp388_setup+0x120>)
 80012f4:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <bmp388_setup+0x120>)
 80012fc:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	b21a      	sxth	r2, r3
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <bmp388_setup+0x120>)
 800130e:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <bmp388_setup+0x120>)
 8001320:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <bmp388_setup+0x120>)
 8001328:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <bmp388_setup+0x120>)
 8001330:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	b21a      	sxth	r2, r3
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <bmp388_setup+0x120>)
 8001344:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b21a      	sxth	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <bmp388_setup+0x120>)
 8001358:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <bmp388_setup+0x120>)
 8001360:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8001362:	7e3b      	ldrb	r3, [r7, #24]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <bmp388_setup+0x120>)
 8001368:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 800136a:	7e7b      	ldrb	r3, [r7, #25]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <bmp388_setup+0x120>)
 800137a:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <bmp388_setup+0x120>)
 8001382:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8001384:	7f3b      	ldrb	r3, [r7, #28]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <bmp388_setup+0x120>)
 800138a:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 800138c:	f7ff fe20 	bl	8000fd0 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff1c 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8001398:	2133      	movs	r1, #51	@ 0x33
 800139a:	201b      	movs	r0, #27
 800139c:	f7ff ff18 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013a0:	2103      	movs	r1, #3
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff ff14 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013a8:	2102      	movs	r1, #2
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff ff10 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013b0:	2104      	movs	r1, #4
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff ff0c 	bl	80011d0 <bmp388_write_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400020c 	.word	0x2400020c

080013c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d013      	beq.n	8001404 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80013e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00b      	beq.n	8001404 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013ec:	e000      	b.n	80013f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f9      	beq.n	80013ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013fa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800141a:	f000 fcc5 	bl	8001da8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141e:	f001 f9ff 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001422:	f000 f821 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001426:	f000 fa0d 	bl	8001844 <MX_GPIO_Init>
  MX_DMA_Init();
 800142a:	f000 f9e3 	bl	80017f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800142e:	f000 f995 	bl	800175c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001432:	f000 f895 	bl	8001560 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001436:	f000 f943 	bl	80016c0 <MX_TIM2_Init>
  MX_SPI2_Init();
 800143a:	f000 f8e9 	bl	8001610 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 800143e:	4809      	ldr	r0, [pc, #36]	@ (8001464 <main+0x50>)
 8001440:	f008 fd8e 	bl	8009f60 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2224      	movs	r2, #36	@ 0x24
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f00b fb17 	bl	800ca82 <memset>
  mpu9250_setup();
 8001454:	f000 fd3c 	bl	8001ed0 <mpu9250_setup>
  bmp388_setup();
 8001458:	f7ff ff22 	bl	80012a0 <bmp388_setup>

  Start_MPU9250_DMA_Read();
 800145c:	f000 fa36 	bl	80018cc <Start_MPU9250_DMA_Read>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <main+0x4c>
 8001464:	240004a0 	.word	0x240004a0

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b09c      	sub	sp, #112	@ 0x70
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001472:	224c      	movs	r2, #76	@ 0x4c
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00b fb03 	bl	800ca82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2220      	movs	r2, #32
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f00b fafd 	bl	800ca82 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001488:	2002      	movs	r0, #2
 800148a:	f004 fc25 	bl	8005cd8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <SystemClock_Config+0xf0>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	4a30      	ldr	r2, [pc, #192]	@ (8001558 <SystemClock_Config+0xf0>)
 8001498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800149c:	6193      	str	r3, [r2, #24]
 800149e:	4b2e      	ldr	r3, [pc, #184]	@ (8001558 <SystemClock_Config+0xf0>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <SystemClock_Config+0xf4>)
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <SystemClock_Config+0xf4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <SystemClock_Config+0xf4>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014c0:	bf00      	nop
 80014c2:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <SystemClock_Config+0xf0>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014ce:	d1f8      	bne.n	80014c2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014d4:	2301      	movs	r3, #1
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d8:	2340      	movs	r3, #64	@ 0x40
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014dc:	2302      	movs	r3, #2
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e0:	2300      	movs	r3, #0
 80014e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014e4:	2304      	movs	r3, #4
 80014e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80014e8:	233c      	movs	r3, #60	@ 0x3c
 80014ea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80014f0:	2305      	movs	r3, #5
 80014f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014f8:	230c      	movs	r3, #12
 80014fa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	4618      	mov	r0, r3
 800150a:	f004 fc1f 	bl	8005d4c <HAL_RCC_OscConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001514:	f000 fc74 	bl	8001e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001518:	233f      	movs	r3, #63	@ 0x3f
 800151a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151c:	2303      	movs	r3, #3
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001524:	2308      	movs	r3, #8
 8001526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800152c:	2340      	movs	r3, #64	@ 0x40
 800152e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001534:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001536:	2340      	movs	r3, #64	@ 0x40
 8001538:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2104      	movs	r1, #4
 800153e:	4618      	mov	r0, r3
 8001540:	f005 f85e 	bl	8006600 <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800154a:	f000 fc59 	bl	8001e00 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3770      	adds	r7, #112	@ 0x70
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	58024800 	.word	0x58024800
 800155c:	58000400 	.word	0x58000400

08001560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001566:	4a29      	ldr	r2, [pc, #164]	@ (800160c <MX_SPI1_Init+0xac>)
 8001568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156a:	4b27      	ldr	r3, [pc, #156]	@ (8001608 <MX_SPI1_Init+0xa8>)
 800156c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001572:	4b25      	ldr	r3, [pc, #148]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <MX_SPI1_Init+0xa8>)
 800157a:	2207      	movs	r2, #7
 800157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001580:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001584:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001588:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800158c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158e:	4b1e      	ldr	r3, [pc, #120]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001590:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001594:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001596:	4b1c      	ldr	r3, [pc, #112]	@ (8001608 <MX_SPI1_Init+0xa8>)
 8001598:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015b6:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_SPI1_Init+0xa8>)
 80015f6:	f007 f9bb 	bl	8008970 <HAL_SPI_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001600:	f000 fbfe 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	240002a0 	.word	0x240002a0
 800160c:	40013000 	.word	0x40013000

08001610 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001616:	4a29      	ldr	r2, [pc, #164]	@ (80016bc <MX_SPI2_Init+0xac>)
 8001618:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800161a:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800161c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001620:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001622:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001628:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800162a:	2207      	movs	r2, #7
 800162c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800162e:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001634:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001638:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800163c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800163e:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001640:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001644:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001646:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001648:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800164c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001668:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800166c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001670:	2200      	movs	r2, #0
 8001672:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001676:	2200      	movs	r2, #0
 8001678:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800167a:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800167c:	2200      	movs	r2, #0
 800167e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001688:	2200      	movs	r2, #0
 800168a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800168e:	2200      	movs	r2, #0
 8001690:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 8001694:	2200      	movs	r2, #0
 8001696:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 800169a:	2200      	movs	r2, #0
 800169c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <MX_SPI2_Init+0xa8>)
 80016a6:	f007 f963 	bl	8008970 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 80016b0:	f000 fba6 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	24000328 	.word	0x24000328
 80016bc:	40003800 	.word	0x40003800

080016c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016de:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016e8:	f240 321f 	movw	r2, #799	@ 0x31f
 80016ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016f4:	4b18      	ldr	r3, [pc, #96]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <MX_TIM2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b15      	ldr	r3, [pc, #84]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001708:	4813      	ldr	r0, [pc, #76]	@ (8001758 <MX_TIM2_Init+0x98>)
 800170a:	f008 fbd2 	bl	8009eb2 <HAL_TIM_Base_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001714:	f000 fb74 	bl	8001e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001718:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	480c      	ldr	r0, [pc, #48]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001726:	f008 fd9b 	bl	800a260 <HAL_TIM_ConfigClockSource>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001730:	f000 fb66 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001734:	2300      	movs	r3, #0
 8001736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_TIM2_Init+0x98>)
 8001742:	f008 ffeb 	bl	800a71c <HAL_TIMEx_MasterConfigSynchronization>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800174c:	f000 fb58 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	240004a0 	.word	0x240004a0

0800175c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001762:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <MX_USART2_UART_Init+0x94>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a4:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 80017a6:	f009 f865 	bl	800a874 <HAL_UART_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017b0:	f000 fb26 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	480d      	ldr	r0, [pc, #52]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 80017b8:	f00a f8fb 	bl	800b9b2 <HAL_UARTEx_SetTxFifoThreshold>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017c2:	f000 fb1d 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4808      	ldr	r0, [pc, #32]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 80017ca:	f00a f930 	bl	800ba2e <HAL_UARTEx_SetRxFifoThreshold>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017d4:	f000 fb14 	bl	8001e00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017d8:	4804      	ldr	r0, [pc, #16]	@ (80017ec <MX_USART2_UART_Init+0x90>)
 80017da:	f00a f8b1 	bl	800b940 <HAL_UARTEx_DisableFifoMode>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017e4:	f000 fb0c 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	240004ec 	.word	0x240004ec
 80017f0:	40004400 	.word	0x40004400

080017f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017fa:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <MX_DMA_Init+0x4c>)
 80017fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <MX_DMA_Init+0x4c>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <MX_DMA_Init+0x4c>)
 800180c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001818:	2200      	movs	r2, #0
 800181a:	2100      	movs	r1, #0
 800181c:	200b      	movs	r0, #11
 800181e:	f001 f99c 	bl	8002b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001822:	200b      	movs	r0, #11
 8001824:	f001 f9b3 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001828:	2200      	movs	r2, #0
 800182a:	2100      	movs	r1, #0
 800182c:	200c      	movs	r0, #12
 800182e:	f001 f994 	bl	8002b5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001832:	200c      	movs	r0, #12
 8001834:	f001 f9ab 	bl	8002b8e <HAL_NVIC_EnableIRQ>

}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	58024400 	.word	0x58024400

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_GPIO_Init+0x80>)
 800185c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001860:	4a18      	ldr	r2, [pc, #96]	@ (80018c4 <MX_GPIO_Init+0x80>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <MX_GPIO_Init+0x80>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_GPIO_Init+0x80>)
 800187a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800187e:	4a11      	ldr	r2, [pc, #68]	@ (80018c4 <MX_GPIO_Init+0x80>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001888:	4b0e      	ldr	r3, [pc, #56]	@ (80018c4 <MX_GPIO_Init+0x80>)
 800188a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2160      	movs	r1, #96	@ 0x60
 800189a:	480b      	ldr	r0, [pc, #44]	@ (80018c8 <MX_GPIO_Init+0x84>)
 800189c:	f004 fa02 	bl	8005ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 80018a0:	2360      	movs	r3, #96	@ 0x60
 80018a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	4619      	mov	r1, r3
 80018b6:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <MX_GPIO_Init+0x84>)
 80018b8:	f004 f844 	bl	8005944 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	58024400 	.word	0x58024400
 80018c8:	58020000 	.word	0x58020000

080018cc <Start_MPU9250_DMA_Read>:
 * Start_MPU9250_DMA_Read
 *
 * Prepares and starts a DMA-based SPI transaction to read 14 bytes of sensor data
 * (accelerometer, temperature, gyroscope) beginning at register 0x3B.
 */
void Start_MPU9250_DMA_Read(void) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
    // First byte: starting register (0x3B) with read flag
    sensor_tx_buffer[0] = 0x3B | READ_FLAG;
 80018d2:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <Start_MPU9250_DMA_Read+0x54>)
 80018d4:	22bb      	movs	r2, #187	@ 0xbb
 80018d6:	701a      	strb	r2, [r3, #0]
    // Fill remaining bytes with dummy data
    for (int i = 1; i < SENSOR_DMA_LENGTH; i++) {
 80018d8:	2301      	movs	r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	e007      	b.n	80018ee <Start_MPU9250_DMA_Read+0x22>
        sensor_tx_buffer[i] = 0x00;
 80018de:	4a10      	ldr	r2, [pc, #64]	@ (8001920 <Start_MPU9250_DMA_Read+0x54>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
    for (int i = 1; i < SENSOR_DMA_LENGTH; i++) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3301      	adds	r3, #1
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0e      	cmp	r3, #14
 80018f2:	ddf4      	ble.n	80018de <Start_MPU9250_DMA_Read+0x12>
    }

    // Assert CS low to begin the SPI transaction
    HAL_GPIO_WritePin(SPI1_CS_GPIO_Port , SPI1_CS_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2120      	movs	r1, #32
 80018f8:	480a      	ldr	r0, [pc, #40]	@ (8001924 <Start_MPU9250_DMA_Read+0x58>)
 80018fa:	f004 f9d3 	bl	8005ca4 <HAL_GPIO_WritePin>

    // Start the SPI DMA transaction
    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80018fe:	bf00      	nop
 8001900:	4809      	ldr	r0, [pc, #36]	@ (8001928 <Start_MPU9250_DMA_Read+0x5c>)
 8001902:	f008 f971 	bl	8009be8 <HAL_SPI_GetState>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1f9      	bne.n	8001900 <Start_MPU9250_DMA_Read+0x34>
	HAL_SPI_TransmitReceive_DMA(&hspi1, sensor_tx_buffer, sensor_rx_buffer, SENSOR_DMA_LENGTH);
 800190c:	230f      	movs	r3, #15
 800190e:	4a07      	ldr	r2, [pc, #28]	@ (800192c <Start_MPU9250_DMA_Read+0x60>)
 8001910:	4903      	ldr	r1, [pc, #12]	@ (8001920 <Start_MPU9250_DMA_Read+0x54>)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <Start_MPU9250_DMA_Read+0x5c>)
 8001914:	f007 fdb0 	bl	8009478 <HAL_SPI_TransmitReceive_DMA>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	24000584 	.word	0x24000584
 8001924:	58020000 	.word	0x58020000
 8001928:	240002a0 	.word	0x240002a0
 800192c:	24000594 	.word	0x24000594

08001930 <HAL_SPI_TxRxCpltCallback>:
 *
 * Called when the DMA-based SPI transaction completes.
 * Processes the received sensor data, converts raw values to physical units,
 * updates the Mahony filter, computes Euler angles, and then restarts the DMA read.
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	@ 0x30
 8001934:	af06      	add	r7, sp, #24
 8001936:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4ac4      	ldr	r2, [pc, #784]	@ (8001c50 <HAL_SPI_TxRxCpltCallback+0x320>)
 800193e:	4293      	cmp	r3, r2
 8001940:	f040 81dd 	bne.w	8001cfe <HAL_SPI_TxRxCpltCallback+0x3ce>
		// Deassert CS high to end the SPI transaction
		HAL_GPIO_WritePin(SPI1_CS_GPIO_Port , SPI1_CS_Pin, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2120      	movs	r1, #32
 8001948:	48c2      	ldr	r0, [pc, #776]	@ (8001c54 <HAL_SPI_TxRxCpltCallback+0x324>)
 800194a:	f004 f9ab 	bl	8005ca4 <HAL_GPIO_WritePin>
		        // [0-1]: ACCEL_X, [2-3]: ACCEL_Y, [4-5]: ACCEL_Z,
		        // [6-7]: TEMP (ignored),
		        // [8-9]: GYRO_X, [10-11]: GYRO_Y, [12-13]: GYRO_Z

		// Accelerometer raw data
		imu_raw_data.accel_x = ((int16_t)sensor_rx_buffer[0] << 8) | sensor_rx_buffer[1];
 800194e:	4bc2      	ldr	r3, [pc, #776]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	4bc0      	ldr	r3, [pc, #768]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	b21b      	sxth	r3, r3
 800195c:	4313      	orrs	r3, r2
 800195e:	b21a      	sxth	r2, r3
 8001960:	4bbe      	ldr	r3, [pc, #760]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001962:	801a      	strh	r2, [r3, #0]
		imu_raw_data.accel_y = ((int16_t)sensor_rx_buffer[2] << 8) | sensor_rx_buffer[3];
 8001964:	4bbc      	ldr	r3, [pc, #752]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 8001966:	789b      	ldrb	r3, [r3, #2]
 8001968:	021b      	lsls	r3, r3, #8
 800196a:	b21a      	sxth	r2, r3
 800196c:	4bba      	ldr	r3, [pc, #744]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	b21b      	sxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b21a      	sxth	r2, r3
 8001976:	4bb9      	ldr	r3, [pc, #740]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001978:	805a      	strh	r2, [r3, #2]
		imu_raw_data.accel_z = ((int16_t)sensor_rx_buffer[4] << 8) | sensor_rx_buffer[5];
 800197a:	4bb7      	ldr	r3, [pc, #732]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 800197c:	791b      	ldrb	r3, [r3, #4]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	b21a      	sxth	r2, r3
 8001982:	4bb5      	ldr	r3, [pc, #724]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 8001984:	795b      	ldrb	r3, [r3, #5]
 8001986:	b21b      	sxth	r3, r3
 8001988:	4313      	orrs	r3, r2
 800198a:	b21a      	sxth	r2, r3
 800198c:	4bb3      	ldr	r3, [pc, #716]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 800198e:	809a      	strh	r2, [r3, #4]

		// Gyroscope raw data (skip TEMP at indices 6-7)
		imu_raw_data.gyro_x  = ((int16_t)sensor_rx_buffer[8]  << 8) | sensor_rx_buffer[9];
 8001990:	4bb1      	ldr	r3, [pc, #708]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 8001992:	7a1b      	ldrb	r3, [r3, #8]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21a      	sxth	r2, r3
 8001998:	4baf      	ldr	r3, [pc, #700]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 800199a:	7a5b      	ldrb	r3, [r3, #9]
 800199c:	b21b      	sxth	r3, r3
 800199e:	4313      	orrs	r3, r2
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4bae      	ldr	r3, [pc, #696]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 80019a4:	80da      	strh	r2, [r3, #6]
		imu_raw_data.gyro_y  = ((int16_t)sensor_rx_buffer[10] << 8) | sensor_rx_buffer[11];
 80019a6:	4bac      	ldr	r3, [pc, #688]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 80019a8:	7a9b      	ldrb	r3, [r3, #10]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	4baa      	ldr	r3, [pc, #680]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 80019b0:	7adb      	ldrb	r3, [r3, #11]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	4313      	orrs	r3, r2
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	4ba8      	ldr	r3, [pc, #672]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 80019ba:	811a      	strh	r2, [r3, #8]
		imu_raw_data.gyro_z  = ((int16_t)sensor_rx_buffer[12] << 8) | sensor_rx_buffer[13];
 80019bc:	4ba6      	ldr	r3, [pc, #664]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 80019be:	7b1b      	ldrb	r3, [r3, #12]
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21a      	sxth	r2, r3
 80019c4:	4ba4      	ldr	r3, [pc, #656]	@ (8001c58 <HAL_SPI_TxRxCpltCallback+0x328>)
 80019c6:	7b5b      	ldrb	r3, [r3, #13]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	4ba3      	ldr	r3, [pc, #652]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 80019d0:	815a      	strh	r2, [r3, #10]

		// Convert accelerometer values:
		// Assuming ±8g full scale and 4096 LSB/g, multiplied by 9.81 for m/s^2.
		imu_processed_data.accel_x = ((float)imu_raw_data.accel_x / 4096.0f) * 9.81f;
 80019d2:	4ba2      	ldr	r3, [pc, #648]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e0:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8001c60 <HAL_SPI_TxRxCpltCallback+0x330>
 80019e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e8:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001c64 <HAL_SPI_TxRxCpltCallback+0x334>
 80019ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 80019f2:	edc3 7a03 	vstr	s15, [r3, #12]
		imu_processed_data.accel_y = ((float)imu_raw_data.accel_y / 4096.0f) * 9.81f;
 80019f6:	4b99      	ldr	r3, [pc, #612]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 80019f8:	885b      	ldrh	r3, [r3, #2]
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a04:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8001c60 <HAL_SPI_TxRxCpltCallback+0x330>
 8001a08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8001c64 <HAL_SPI_TxRxCpltCallback+0x334>
 8001a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a14:	4b94      	ldr	r3, [pc, #592]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001a16:	edc3 7a04 	vstr	s15, [r3, #16]
		imu_processed_data.accel_z = ((float)imu_raw_data.accel_z / 4096.0f) * 9.81f;
 8001a1a:	4b90      	ldr	r3, [pc, #576]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001a1c:	889b      	ldrh	r3, [r3, #4]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a28:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8001c60 <HAL_SPI_TxRxCpltCallback+0x330>
 8001a2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a30:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001c64 <HAL_SPI_TxRxCpltCallback+0x334>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	4b8b      	ldr	r3, [pc, #556]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001a3a:	edc3 7a05 	vstr	s15, [r3, #20]

		// Convert gyroscope values:
		// Assuming ±500°/s full scale and 65.5 LSB/(°/s), convert to rad/s after subtracting offsets.
		imu_processed_data.gyro_x = (((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX) / 65.5f) * (M_PI / 180.0f);
 8001a3e:	4b87      	ldr	r3, [pc, #540]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001a40:	88db      	ldrh	r3, [r3, #6]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4c:	4b86      	ldr	r3, [pc, #536]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a56:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8001c6c <HAL_SPI_TxRxCpltCallback+0x33c>
 8001a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a62:	ed9f 6b77 	vldr	d6, [pc, #476]	@ 8001c40 <HAL_SPI_TxRxCpltCallback+0x310>
 8001a66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001a70:	edc3 7a06 	vstr	s15, [r3, #24]
		imu_processed_data.gyro_y = (((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY) / 65.5f) * (M_PI / 180.0f);
 8001a74:	4b79      	ldr	r3, [pc, #484]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001a76:	891b      	ldrh	r3, [r3, #8]
 8001a78:	b21b      	sxth	r3, r3
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a82:	4b79      	ldr	r3, [pc, #484]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a8c:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8001c6c <HAL_SPI_TxRxCpltCallback+0x33c>
 8001a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a98:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8001c40 <HAL_SPI_TxRxCpltCallback+0x310>
 8001a9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aa4:	4b70      	ldr	r3, [pc, #448]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001aa6:	edc3 7a07 	vstr	s15, [r3, #28]
		imu_processed_data.gyro_z = (((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ) / 65.5f) * (M_PI / 180.0f);
 8001aaa:	4b6c      	ldr	r3, [pc, #432]	@ (8001c5c <HAL_SPI_TxRxCpltCallback+0x32c>)
 8001aac:	895b      	ldrh	r3, [r3, #10]
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001aba:	edd3 7a02 	vldr	s15, [r3, #8]
 8001abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac2:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8001c6c <HAL_SPI_TxRxCpltCallback+0x33c>
 8001ac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ace:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 8001c40 <HAL_SPI_TxRxCpltCallback+0x310>
 8001ad2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ad6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ada:	4b63      	ldr	r3, [pc, #396]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001adc:	edc3 7a08 	vstr	s15, [r3, #32]

		// Update the Mahony filter with the processed sensor data.
		// This updates your quaternion (quat) representing orientation.
		MahonyAHRSupdateIMU(quat,
							imu_processed_data.gyro_x,
 8001ae0:	4b61      	ldr	r3, [pc, #388]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001ae2:	edd3 7a06 	vldr	s15, [r3, #24]
							imu_processed_data.gyro_y,
 8001ae6:	4b60      	ldr	r3, [pc, #384]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001ae8:	ed93 7a07 	vldr	s14, [r3, #28]
							imu_processed_data.gyro_z,
 8001aec:	4b5e      	ldr	r3, [pc, #376]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001aee:	edd3 6a08 	vldr	s13, [r3, #32]
							imu_processed_data.accel_x,
 8001af2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001af4:	ed93 6a03 	vldr	s12, [r3, #12]
							imu_processed_data.accel_y,
 8001af8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001afa:	edd3 5a04 	vldr	s11, [r3, #16]
							imu_processed_data.accel_z);
 8001afe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_SPI_TxRxCpltCallback+0x338>)
 8001b00:	ed93 5a05 	vldr	s10, [r3, #20]
		MahonyAHRSupdateIMU(quat,
 8001b04:	eef0 2a45 	vmov.f32	s5, s10
 8001b08:	eeb0 2a65 	vmov.f32	s4, s11
 8001b0c:	eef0 1a46 	vmov.f32	s3, s12
 8001b10:	eeb0 1a66 	vmov.f32	s2, s13
 8001b14:	eef0 0a47 	vmov.f32	s1, s14
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	4854      	ldr	r0, [pc, #336]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b1e:	f7fe ffa3 	bl	8000a68 <MahonyAHRSupdateIMU>

		// Convert quaternion to Euler angles (pitch, roll, yaw)
		float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 8001b22:	4b53      	ldr	r3, [pc, #332]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b28:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b32:	4b4f      	ldr	r3, [pc, #316]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b34:	edd3 6a00 	vldr	s13, [r3]
 8001b38:	4b4d      	ldr	r3, [pc, #308]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b52:	f00e faab 	bl	80100ac <asinf>
 8001b56:	ed87 0a05 	vstr	s0, [r7, #20]
		float radRoll  = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]),
 8001b5a:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b5c:	ed93 7a00 	vldr	s14, [r3]
 8001b60:	4b43      	ldr	r3, [pc, #268]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b62:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b70:	4b3f      	ldr	r3, [pc, #252]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b72:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	ee37 6aa7 	vadd.f32	s12, s15, s15
								 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 8001b82:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	4b39      	ldr	r3, [pc, #228]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b8a:	edd3 7a00 	vldr	s15, [r3]
 8001b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b92:	4b37      	ldr	r3, [pc, #220]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b94:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b98:	4b35      	ldr	r3, [pc, #212]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001b9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	ee77 7aa7 	vadd.f32	s15, s15, s15
		float radRoll  = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]),
 8001baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	eeb0 0a46 	vmov.f32	s0, s12
 8001bba:	f00e faa3 	bl	8010104 <atan2f>
 8001bbe:	ed87 0a04 	vstr	s0, [r7, #16]
		float radYaw   = atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]),
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bca:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd2:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bd8:	4b25      	ldr	r3, [pc, #148]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bda:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be6:	ee37 6aa7 	vadd.f32	s12, s15, s15
								 2.0f * (quat[0] * quat[0] + quat[1] * quat[1]) - 1.0f);
 8001bea:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bec:	ed93 7a00 	vldr	s14, [r3]
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001bfc:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_SPI_TxRxCpltCallback+0x340>)
 8001c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
		float radYaw   = atan2f(2.0f * (quat[0] * quat[3] + quat[1] * quat[2]),
 8001c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1a:	eef0 0a67 	vmov.f32	s1, s15
 8001c1e:	eeb0 0a46 	vmov.f32	s0, s12
 8001c22:	f00e fa6f 	bl	8010104 <atan2f>
 8001c26:	ed87 0a03 	vstr	s0, [r7, #12]

		imu_angles.pitch = radPitch * (180.0f / M_PI);
 8001c2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c32:	ed9f 6b05 	vldr	d6, [pc, #20]	@ 8001c48 <HAL_SPI_TxRxCpltCallback+0x318>
 8001c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c3e:	e019      	b.n	8001c74 <HAL_SPI_TxRxCpltCallback+0x344>
 8001c40:	a2529d39 	.word	0xa2529d39
 8001c44:	3f91df46 	.word	0x3f91df46
 8001c48:	1a63c1f8 	.word	0x1a63c1f8
 8001c4c:	404ca5dc 	.word	0x404ca5dc
 8001c50:	40013000 	.word	0x40013000
 8001c54:	58020000 	.word	0x58020000
 8001c58:	24000594 	.word	0x24000594
 8001c5c:	240005f4 	.word	0x240005f4
 8001c60:	45800000 	.word	0x45800000
 8001c64:	411cf5c3 	.word	0x411cf5c3
 8001c68:	24000608 	.word	0x24000608
 8001c6c:	42830000 	.word	0x42830000
 8001c70:	240005e4 	.word	0x240005e4
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001c76:	edc3 7a01 	vstr	s15, [r3, #4]
		imu_angles.roll  = radRoll  * (180.0f / M_PI);
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c82:	ed9f 6b29 	vldr	d6, [pc, #164]	@ 8001d28 <HAL_SPI_TxRxCpltCallback+0x3f8>
 8001c86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c8e:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
		imu_angles.yaw   = radYaw   * (180.0f / M_PI);
 8001c94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c9c:	ed9f 6b22 	vldr	d6, [pc, #136]	@ 8001d28 <HAL_SPI_TxRxCpltCallback+0x3f8>
 8001ca0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ca4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ca8:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001caa:	edc3 7a02 	vstr	s15, [r3, #8]

		  //send data through UART
		  snprintf(uart_buffer, sizeof(uart_buffer), "%.4f,%.4f,%.4f\n", imu_angles.pitch, imu_angles.roll, imu_angles.yaw);
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cb4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001cba:	edd3 6a00 	vldr	s13, [r3]
 8001cbe:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <HAL_SPI_TxRxCpltCallback+0x400>)
 8001cc4:	edd3 5a02 	vldr	s11, [r3, #8]
 8001cc8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001ccc:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001cd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001cd4:	ed8d 7b00 	vstr	d7, [sp]
 8001cd8:	4a16      	ldr	r2, [pc, #88]	@ (8001d34 <HAL_SPI_TxRxCpltCallback+0x404>)
 8001cda:	2140      	movs	r1, #64	@ 0x40
 8001cdc:	4816      	ldr	r0, [pc, #88]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001cde:	f00a fe39 	bl	800c954 <sniprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001ce2:	4815      	ldr	r0, [pc, #84]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001ce4:	f7fe fb4c 	bl	8000380 <strlen>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf0:	4911      	ldr	r1, [pc, #68]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001cf2:	4812      	ldr	r0, [pc, #72]	@ (8001d3c <HAL_SPI_TxRxCpltCallback+0x40c>)
 8001cf4:	f008 fe0e 	bl	800a914 <HAL_UART_Transmit>

		  Start_MPU9250_DMA_Read();
 8001cf8:	f7ff fde8 	bl	80018cc <Start_MPU9250_DMA_Read>
		// print SPI->Instance if false
		snprintf(uart_buffer, sizeof(uart_buffer), "oh no spi->instance != SPI1\n");
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);

	}
}
 8001cfc:	e00f      	b.n	8001d1e <HAL_SPI_TxRxCpltCallback+0x3ee>
		snprintf(uart_buffer, sizeof(uart_buffer), "oh no spi->instance != SPI1\n");
 8001cfe:	4a10      	ldr	r2, [pc, #64]	@ (8001d40 <HAL_SPI_TxRxCpltCallback+0x410>)
 8001d00:	2140      	movs	r1, #64	@ 0x40
 8001d02:	480d      	ldr	r0, [pc, #52]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001d04:	f00a fe26 	bl	800c954 <sniprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8001d08:	480b      	ldr	r0, [pc, #44]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001d0a:	f7fe fb39 	bl	8000380 <strlen>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <HAL_SPI_TxRxCpltCallback+0x408>)
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <HAL_SPI_TxRxCpltCallback+0x40c>)
 8001d1a:	f008 fdfb 	bl	800a914 <HAL_UART_Transmit>
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	1a63c1f8 	.word	0x1a63c1f8
 8001d2c:	404ca5dc 	.word	0x404ca5dc
 8001d30:	24000638 	.word	0x24000638
 8001d34:	080105e8 	.word	0x080105e8
 8001d38:	240005a4 	.word	0x240005a4
 8001d3c:	240004ec 	.word	0x240004ec
 8001d40:	080105f8 	.word	0x080105f8

08001d44 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a06      	ldr	r2, [pc, #24]	@ (8001d68 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d102      	bne.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
//		if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_READY)
//		        {
//		            Start_MPU9250_DMA_Read();
//		        }
		timer_flag = 1;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	240004a0 	.word	0x240004a0
 8001d6c:	24000580 	.word	0x24000580

08001d70 <_write>:
int _write(int file, char *ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e009      	b.n	8001d96 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb1a 	bl	80013c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbf1      	blt.n	8001d82 <_write+0x12>
	}
	return len;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001dba:	f000 ff03 	bl	8002bc4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001dca:	231f      	movs	r3, #31
 8001dcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001dce:	2387      	movs	r3, #135	@ 0x87
 8001dd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dea:	463b      	mov	r3, r7
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 ff21 	bl	8002c34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001df2:	2004      	movs	r0, #4
 8001df4:	f000 fefe 	bl	8002bf4 <HAL_MPU_Enable>

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <Error_Handler+0x8>

08001e0c <mpu9250_write_reg>:
IMU_ProcessedData_t imu_processed_data; // Instance of processed IMU data
IMU_Angles_t imu_angles;            // Instance of IMU angles
Mag_CalibData_t mag_calibration_data;

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	460a      	mov	r2, r1
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	480b      	ldr	r0, [pc, #44]	@ (8001e50 <mpu9250_write_reg+0x44>)
 8001e22:	f003 ff3f 	bl	8005ca4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001e26:	1df9      	adds	r1, r7, #7
 8001e28:	2364      	movs	r3, #100	@ 0x64
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4809      	ldr	r0, [pc, #36]	@ (8001e54 <mpu9250_write_reg+0x48>)
 8001e2e:	f006 fec3 	bl	8008bb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001e32:	1db9      	adds	r1, r7, #6
 8001e34:	2364      	movs	r3, #100	@ 0x64
 8001e36:	2201      	movs	r2, #1
 8001e38:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <mpu9250_write_reg+0x48>)
 8001e3a:	f006 febd 	bl	8008bb8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2120      	movs	r1, #32
 8001e42:	4803      	ldr	r0, [pc, #12]	@ (8001e50 <mpu9250_write_reg+0x44>)
 8001e44:	f003 ff2e 	bl	8005ca4 <HAL_GPIO_WritePin>
}
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	58020000 	.word	0x58020000
 8001e54:	240002a0 	.word	0x240002a0

08001e58 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2120      	movs	r1, #32
 8001e76:	4814      	ldr	r0, [pc, #80]	@ (8001ec8 <mpu9250_read_reg+0x70>)
 8001e78:	f003 ff14 	bl	8005ca4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001e7c:	f107 010e 	add.w	r1, r7, #14
 8001e80:	2364      	movs	r3, #100	@ 0x64
 8001e82:	2201      	movs	r2, #1
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <mpu9250_read_reg+0x74>)
 8001e86:	f006 fe97 	bl	8008bb8 <HAL_SPI_Transmit>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <mpu9250_read_reg+0x40>
		Error_Handler();
 8001e94:	f7ff ffb4 	bl	8001e00 <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8001e98:	79bb      	ldrb	r3, [r7, #6]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	2364      	movs	r3, #100	@ 0x64
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	480a      	ldr	r0, [pc, #40]	@ (8001ecc <mpu9250_read_reg+0x74>)
 8001ea2:	f007 f877 	bl	8008f94 <HAL_SPI_Receive>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8001eb0:	f7ff ffa6 	bl	8001e00 <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	4803      	ldr	r0, [pc, #12]	@ (8001ec8 <mpu9250_read_reg+0x70>)
 8001eba:	f003 fef3 	bl	8005ca4 <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	58020000 	.word	0x58020000
 8001ecc:	240002a0 	.word	0x240002a0

08001ed0 <mpu9250_setup>:

void mpu9250_setup()
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	201a      	movs	r0, #26
 8001ed8:	f7ff ff98 	bl	8001e0c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001edc:	2110      	movs	r1, #16
 8001ede:	201c      	movs	r0, #28
 8001ee0:	f7ff ff94 	bl	8001e0c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	201b      	movs	r0, #27
 8001ee8:	f7ff ff90 	bl	8001e0c <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 8001eec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001ef0:	f000 f814 	bl	8001f1c <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <mpu9250_setup+0x48>)
 8001ef6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001efa:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <mpu9250_setup+0x48>)
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8001f04:	4b04      	ldr	r3, [pc, #16]	@ (8001f18 <mpu9250_setup+0x48>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 8001f0c:	4b02      	ldr	r3, [pc, #8]	@ (8001f18 <mpu9250_setup+0x48>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	240005e4 	.word	0x240005e4

08001f1c <mpu9250_calibrateGyro>:

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	817b      	strh	r3, [r7, #10]
 8001f40:	e01c      	b.n	8001f7c <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 8001f42:	f000 f855 	bl	8001ff0 <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8001f46:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <mpu9250_calibrateGyro+0xcc>)
 8001f48:	88db      	ldrh	r3, [r3, #6]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8001f54:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <mpu9250_calibrateGyro+0xcc>)
 8001f56:	891b      	ldrh	r3, [r3, #8]
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <mpu9250_calibrateGyro+0xcc>)
 8001f64:	895b      	ldrh	r3, [r3, #10]
 8001f66:	b21b      	sxth	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 fce7 	bl	8002944 <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	817b      	strh	r3, [r7, #10]
 8001f7c:	897a      	ldrh	r2, [r7, #10]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3de      	bcc.n	8001f42 <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9c:	4b13      	ldr	r3, [pc, #76]	@ (8001fec <mpu9250_calibrateGyro+0xd0>)
 8001f9e:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <mpu9250_calibrateGyro+0xd0>)
 8001fbc:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <mpu9250_calibrateGyro+0xd0>)
 8001fda:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	240005f4 	.word	0x240005f4
 8001fec:	24000608 	.word	0x24000608

08001ff0 <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2206      	movs	r2, #6
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	203b      	movs	r0, #59	@ 0x3b
 8001ffe:	f7ff ff2b 	bl	8001e58 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002002:	783b      	ldrb	r3, [r7, #0]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21a      	sxth	r2, r3
 8002010:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002012:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002014:	78bb      	ldrb	r3, [r7, #2]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21a      	sxth	r2, r3
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21a      	sxth	r2, r3
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002024:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002026:	793b      	ldrb	r3, [r7, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	b21a      	sxth	r2, r3
 800202c:	797b      	ldrb	r3, [r7, #5]
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21a      	sxth	r2, r3
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002036:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8002038:	463b      	mov	r3, r7
 800203a:	2206      	movs	r2, #6
 800203c:	4619      	mov	r1, r3
 800203e:	2043      	movs	r0, #67	@ 0x43
 8002040:	f7ff ff0a 	bl	8001e58 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8002044:	783b      	ldrb	r3, [r7, #0]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	b21a      	sxth	r2, r3
 800204a:	787b      	ldrb	r3, [r7, #1]
 800204c:	b21b      	sxth	r3, r3
 800204e:	4313      	orrs	r3, r2
 8002050:	b21a      	sxth	r2, r3
 8002052:	4b0c      	ldr	r3, [pc, #48]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002054:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8002056:	78bb      	ldrb	r3, [r7, #2]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	b21b      	sxth	r3, r3
 8002060:	4313      	orrs	r3, r2
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002066:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8002068:	793b      	ldrb	r3, [r7, #4]
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	b21a      	sxth	r2, r3
 800206e:	797b      	ldrb	r3, [r7, #5]
 8002070:	b21b      	sxth	r3, r3
 8002072:	4313      	orrs	r3, r2
 8002074:	b21a      	sxth	r2, r3
 8002076:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <mpu9250_getRawData+0x94>)
 8002078:	815a      	strh	r2, [r3, #10]
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	240005f4 	.word	0x240005f4

08002088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_MspInit+0x30>)
 8002090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002094:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <HAL_MspInit+0x30>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_MspInit+0x30>)
 80020a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	58024400 	.word	0x58024400

080020bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b0be      	sub	sp, #248	@ 0xf8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020d4:	f107 0320 	add.w	r3, r7, #32
 80020d8:	22c0      	movs	r2, #192	@ 0xc0
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f00a fcd0 	bl	800ca82 <memset>
  if(hspi->Instance==SPI1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4aa4      	ldr	r2, [pc, #656]	@ (8002378 <HAL_SPI_MspInit+0x2bc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	f040 80d0 	bne.w	800228e <HAL_SPI_MspInit+0x1d2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80020ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002100:	f107 0320 	add.w	r3, r7, #32
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fe07 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8002110:	f7ff fe76 	bl	8001e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002114:	4b99      	ldr	r3, [pc, #612]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800211a:	4a98      	ldr	r2, [pc, #608]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 800211c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002124:	4b95      	ldr	r3, [pc, #596]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002126:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800212a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	4b92      	ldr	r3, [pc, #584]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002138:	4a90      	ldr	r2, [pc, #576]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002142:	4b8e      	ldr	r3, [pc, #568]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	4b8a      	ldr	r3, [pc, #552]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002156:	4a89      	ldr	r2, [pc, #548]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002160:	4b86      	ldr	r3, [pc, #536]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002186:	2305      	movs	r3, #5
 8002188:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002190:	4619      	mov	r1, r3
 8002192:	487b      	ldr	r0, [pc, #492]	@ (8002380 <HAL_SPI_MspInit+0x2c4>)
 8002194:	f003 fbd6 	bl	8005944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002198:	2318      	movs	r3, #24
 800219a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021b0:	2305      	movs	r3, #5
 80021b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021ba:	4619      	mov	r1, r3
 80021bc:	4871      	ldr	r0, [pc, #452]	@ (8002384 <HAL_SPI_MspInit+0x2c8>)
 80021be:	f003 fbc1 	bl	8005944 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80021c2:	4b71      	ldr	r3, [pc, #452]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021c4:	4a71      	ldr	r2, [pc, #452]	@ (800238c <HAL_SPI_MspInit+0x2d0>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80021c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021ca:	2225      	movs	r2, #37	@ 0x25
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b6b      	ldr	r3, [pc, #428]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021e0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e2:	4b69      	ldr	r3, [pc, #420]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e8:	4b67      	ldr	r3, [pc, #412]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80021ee:	4b66      	ldr	r3, [pc, #408]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80021f6:	4b64      	ldr	r3, [pc, #400]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 80021f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021fc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021fe:	4b62      	ldr	r3, [pc, #392]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002204:	4860      	ldr	r0, [pc, #384]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 8002206:	f000 fd55 	bl	8002cb4 <HAL_DMA_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8002210:	f7ff fdf6 	bl	8001e00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 8002218:	67da      	str	r2, [r3, #124]	@ 0x7c
 800221a:	4a5b      	ldr	r2, [pc, #364]	@ (8002388 <HAL_SPI_MspInit+0x2cc>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8002220:	4b5b      	ldr	r3, [pc, #364]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002222:	4a5c      	ldr	r2, [pc, #368]	@ (8002394 <HAL_SPI_MspInit+0x2d8>)
 8002224:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002226:	4b5a      	ldr	r3, [pc, #360]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002228:	2226      	movs	r2, #38	@ 0x26
 800222a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800222c:	4b58      	ldr	r3, [pc, #352]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002232:	4b57      	ldr	r3, [pc, #348]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002238:	4b55      	ldr	r3, [pc, #340]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 800223a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002240:	4b53      	ldr	r3, [pc, #332]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002246:	4b52      	ldr	r3, [pc, #328]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800224c:	4b50      	ldr	r3, [pc, #320]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002252:	4b4f      	ldr	r3, [pc, #316]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002254:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002258:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800225a:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 800225c:	2200      	movs	r2, #0
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002260:	484b      	ldr	r0, [pc, #300]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002262:	f000 fd27 	bl	8002cb4 <HAL_DMA_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 800226c:	f7ff fdc8 	bl	8001e00 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a47      	ldr	r2, [pc, #284]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002274:	679a      	str	r2, [r3, #120]	@ 0x78
 8002276:	4a46      	ldr	r2, [pc, #280]	@ (8002390 <HAL_SPI_MspInit+0x2d4>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800227c:	2200      	movs	r2, #0
 800227e:	2100      	movs	r1, #0
 8002280:	2023      	movs	r0, #35	@ 0x23
 8002282:	f000 fc6a 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002286:	2023      	movs	r0, #35	@ 0x23
 8002288:	f000 fc81 	bl	8002b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800228c:	e070      	b.n	8002370 <HAL_SPI_MspInit+0x2b4>
  else if(hspi->Instance==SPI2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a41      	ldr	r2, [pc, #260]	@ (8002398 <HAL_SPI_MspInit+0x2dc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d16b      	bne.n	8002370 <HAL_SPI_MspInit+0x2b4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002298:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022aa:	f107 0320 	add.w	r3, r7, #32
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 fd32 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_SPI_MspInit+0x202>
      Error_Handler();
 80022ba:	f7ff fda1 	bl	8001e00 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c4:	4a2d      	ldr	r2, [pc, #180]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022ce:	4b2b      	ldr	r3, [pc, #172]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022dc:	4b27      	ldr	r3, [pc, #156]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	4a26      	ldr	r2, [pc, #152]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ec:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	4a1e      	ldr	r2, [pc, #120]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800230a:	4b1c      	ldr	r3, [pc, #112]	@ (800237c <HAL_SPI_MspInit+0x2c0>)
 800230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002318:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800231c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002332:	2305      	movs	r3, #5
 8002334:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800233c:	4619      	mov	r1, r3
 800233e:	4811      	ldr	r0, [pc, #68]	@ (8002384 <HAL_SPI_MspInit+0x2c8>)
 8002340:	f003 fb00 	bl	8005944 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002348:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234c:	2302      	movs	r3, #2
 800234e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800235e:	2305      	movs	r3, #5
 8002360:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002364:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002368:	4619      	mov	r1, r3
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <HAL_SPI_MspInit+0x2c4>)
 800236c:	f003 faea 	bl	8005944 <HAL_GPIO_Init>
}
 8002370:	bf00      	nop
 8002372:	37f8      	adds	r7, #248	@ 0xf8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40013000 	.word	0x40013000
 800237c:	58024400 	.word	0x58024400
 8002380:	58020000 	.word	0x58020000
 8002384:	58020400 	.word	0x58020400
 8002388:	240003b0 	.word	0x240003b0
 800238c:	40020010 	.word	0x40020010
 8002390:	24000428 	.word	0x24000428
 8002394:	40020028 	.word	0x40020028
 8002398:	40003800 	.word	0x40003800

0800239c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023ac:	d116      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ae:	4b0d      	ldr	r3, [pc, #52]	@ (80023e4 <HAL_TIM_Base_MspInit+0x48>)
 80023b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023b4:	4a0b      	ldr	r2, [pc, #44]	@ (80023e4 <HAL_TIM_Base_MspInit+0x48>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_TIM_Base_MspInit+0x48>)
 80023c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	201c      	movs	r0, #28
 80023d2:	f000 fbc2 	bl	8002b5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023d6:	201c      	movs	r0, #28
 80023d8:	f000 fbd9 	bl	8002b8e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400

080023e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0ba      	sub	sp, #232	@ 0xe8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002400:	f107 0310 	add.w	r3, r7, #16
 8002404:	22c0      	movs	r2, #192	@ 0xc0
 8002406:	2100      	movs	r1, #0
 8002408:	4618      	mov	r0, r3
 800240a:	f00a fb3a 	bl	800ca82 <memset>
  if(huart->Instance==USART2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a26      	ldr	r2, [pc, #152]	@ (80024ac <HAL_UART_MspInit+0xc4>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d145      	bne.n	80024a4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002418:	f04f 0202 	mov.w	r2, #2
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242a:	f107 0310 	add.w	r3, r7, #16
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fc72 	bl	8006d18 <HAL_RCCEx_PeriphCLKConfig>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800243a:	f7ff fce1 	bl	8001e00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002444:	4a1a      	ldr	r2, [pc, #104]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 8002446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 8002450:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002462:	4a13      	ldr	r2, [pc, #76]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800246c:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_UART_MspInit+0xc8>)
 800246e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800247a:	230c      	movs	r3, #12
 800247c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002492:	2307      	movs	r3, #7
 8002494:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800249c:	4619      	mov	r1, r3
 800249e:	4805      	ldr	r0, [pc, #20]	@ (80024b4 <HAL_UART_MspInit+0xcc>)
 80024a0:	f003 fa50 	bl	8005944 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024a4:	bf00      	nop
 80024a6:	37e8      	adds	r7, #232	@ 0xe8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40004400 	.word	0x40004400
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58020000 	.word	0x58020000

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024bc:	bf00      	nop
 80024be:	e7fd      	b.n	80024bc <NMI_Handler+0x4>

080024c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <HardFault_Handler+0x4>

080024c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <MemManage_Handler+0x4>

080024d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <UsageFault_Handler+0x4>

080024e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr

0800250a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800250e:	f000 f9f9 	bl	8002904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <DMA1_Stream0_IRQHandler+0x10>)
 800251e:	f001 fef3 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	240003b0 	.word	0x240003b0

0800252c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <DMA1_Stream1_IRQHandler+0x10>)
 8002532:	f001 fee9 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	24000428 	.word	0x24000428

08002540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002544:	4802      	ldr	r0, [pc, #8]	@ (8002550 <TIM2_IRQHandler+0x10>)
 8002546:	f007 fd83 	bl	800a050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	240004a0 	.word	0x240004a0

08002554 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002558:	4802      	ldr	r0, [pc, #8]	@ (8002564 <SPI1_IRQHandler+0x10>)
 800255a:	f007 f945 	bl	80097e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	240002a0 	.word	0x240002a0

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002582:	f00a fad1 	bl	800cb28 <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <_exit+0x12>

080025ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e00a      	b.n	80025d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c0:	f3af 8000 	nop.w
 80025c4:	4601      	mov	r1, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf0      	blt.n	80025c0 <_read+0x12>
  }

  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002610:	605a      	str	r2, [r3, #4]
  return 0;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_isatty>:

int _isatty(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	@ (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	@ (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f00a fa52 	bl	800cb28 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	24080000 	.word	0x24080000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	24000644 	.word	0x24000644
 80026b8:	24000798 	.word	0x24000798

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c0:	4b37      	ldr	r3, [pc, #220]	@ (80027a0 <SystemInit+0xe4>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c6:	4a36      	ldr	r2, [pc, #216]	@ (80027a0 <SystemInit+0xe4>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d0:	4b34      	ldr	r3, [pc, #208]	@ (80027a4 <SystemInit+0xe8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	2b06      	cmp	r3, #6
 80026da:	d807      	bhi.n	80026ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026dc:	4b31      	ldr	r3, [pc, #196]	@ (80027a4 <SystemInit+0xe8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 030f 	bic.w	r3, r3, #15
 80026e4:	4a2f      	ldr	r2, [pc, #188]	@ (80027a4 <SystemInit+0xe8>)
 80026e6:	f043 0307 	orr.w	r3, r3, #7
 80026ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	@ (80027a8 <SystemInit+0xec>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	@ (80027a8 <SystemInit+0xec>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026f8:	4b2b      	ldr	r3, [pc, #172]	@ (80027a8 <SystemInit+0xec>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <SystemInit+0xec>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4929      	ldr	r1, [pc, #164]	@ (80027a8 <SystemInit+0xec>)
 8002704:	4b29      	ldr	r3, [pc, #164]	@ (80027ac <SystemInit+0xf0>)
 8002706:	4013      	ands	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800270a:	4b26      	ldr	r3, [pc, #152]	@ (80027a4 <SystemInit+0xe8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <SystemInit+0xe8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <SystemInit+0xe8>)
 8002720:	f043 0307 	orr.w	r3, r3, #7
 8002724:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <SystemInit+0xec>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800272c:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <SystemInit+0xec>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002732:	4b1d      	ldr	r3, [pc, #116]	@ (80027a8 <SystemInit+0xec>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002738:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <SystemInit+0xec>)
 800273a:	4a1d      	ldr	r2, [pc, #116]	@ (80027b0 <SystemInit+0xf4>)
 800273c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800273e:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <SystemInit+0xec>)
 8002740:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <SystemInit+0xf8>)
 8002742:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002744:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <SystemInit+0xec>)
 8002746:	4a1c      	ldr	r2, [pc, #112]	@ (80027b8 <SystemInit+0xfc>)
 8002748:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800274a:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <SystemInit+0xec>)
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002750:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <SystemInit+0xec>)
 8002752:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <SystemInit+0xfc>)
 8002754:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002756:	4b14      	ldr	r3, [pc, #80]	@ (80027a8 <SystemInit+0xec>)
 8002758:	2200      	movs	r2, #0
 800275a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800275c:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <SystemInit+0xec>)
 800275e:	4a16      	ldr	r2, [pc, #88]	@ (80027b8 <SystemInit+0xfc>)
 8002760:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002762:	4b11      	ldr	r3, [pc, #68]	@ (80027a8 <SystemInit+0xec>)
 8002764:	2200      	movs	r2, #0
 8002766:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002768:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <SystemInit+0xec>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0e      	ldr	r2, [pc, #56]	@ (80027a8 <SystemInit+0xec>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002774:	4b0c      	ldr	r3, [pc, #48]	@ (80027a8 <SystemInit+0xec>)
 8002776:	2200      	movs	r2, #0
 8002778:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <SystemInit+0x100>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <SystemInit+0x104>)
 8002780:	4013      	ands	r3, r2
 8002782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002786:	d202      	bcs.n	800278e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <SystemInit+0x108>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <SystemInit+0x10c>)
 8002790:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00
 80027a4:	52002000 	.word	0x52002000
 80027a8:	58024400 	.word	0x58024400
 80027ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80027b0:	02020200 	.word	0x02020200
 80027b4:	01ff0000 	.word	0x01ff0000
 80027b8:	01010280 	.word	0x01010280
 80027bc:	5c001000 	.word	0x5c001000
 80027c0:	ffff0000 	.word	0xffff0000
 80027c4:	51008108 	.word	0x51008108
 80027c8:	52004000 	.word	0x52004000

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002804 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027d0:	f7ff ff74 	bl	80026bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	@ (8002808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	@ (800280c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fa:	f00a f99b 	bl	800cb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7fe fe09 	bl	8001414 <main>
  bx  lr
 8002802:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002804:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002808:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800280c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8002810:	08010ad0 	.word	0x08010ad0
  ldr r2, =_sbss
 8002814:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002818:	24000798 	.word	0x24000798

0800281c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC3_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002826:	2003      	movs	r0, #3
 8002828:	f000 f98c 	bl	8002b44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800282c:	f004 f89e 	bl	800696c <HAL_RCC_GetSysClockFreq>
 8002830:	4602      	mov	r2, r0
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_Init+0x68>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	4913      	ldr	r1, [pc, #76]	@ (800288c <HAL_Init+0x6c>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	f003 031f 	and.w	r3, r3, #31
 8002844:	fa22 f303 	lsr.w	r3, r2, r3
 8002848:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800284a:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <HAL_Init+0x68>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a0e      	ldr	r2, [pc, #56]	@ (800288c <HAL_Init+0x6c>)
 8002854:	5cd3      	ldrb	r3, [r2, r3]
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <HAL_Init+0x70>)
 8002862:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002864:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <HAL_Init+0x74>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800286a:	200f      	movs	r0, #15
 800286c:	f000 f814 	bl	8002898 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e002      	b.n	8002880 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800287a:	f7ff fc05 	bl	8002088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	58024400 	.word	0x58024400
 800288c:	08010618 	.word	0x08010618
 8002890:	24000008 	.word	0x24000008
 8002894:	24000004 	.word	0x24000004

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028a0:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <HAL_InitTick+0x60>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e021      	b.n	80028f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <HAL_InitTick+0x64>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_InitTick+0x60>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4619      	mov	r1, r3
 80028b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80028be:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f971 	bl	8002baa <HAL_SYSTICK_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00e      	b.n	80028f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0f      	cmp	r3, #15
 80028d6:	d80a      	bhi.n	80028ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d8:	2200      	movs	r2, #0
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f000 f93b 	bl	8002b5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e4:	4a06      	ldr	r2, [pc, #24]	@ (8002900 <HAL_InitTick+0x68>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e000      	b.n	80028f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	24000010 	.word	0x24000010
 80028fc:	24000004 	.word	0x24000004
 8002900:	2400000c 	.word	0x2400000c

08002904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x20>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_IncTick+0x24>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4413      	add	r3, r2
 8002914:	4a04      	ldr	r2, [pc, #16]	@ (8002928 <HAL_IncTick+0x24>)
 8002916:	6013      	str	r3, [r2, #0]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	24000010 	.word	0x24000010
 8002928:	24000648 	.word	0x24000648

0800292c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_GetTick+0x14>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	24000648 	.word	0x24000648

08002944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff ffee 	bl	800292c <HAL_GetTick>
 8002950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d005      	beq.n	800296a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295e:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <HAL_Delay+0x44>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800296a:	bf00      	nop
 800296c:	f7ff ffde 	bl	800292c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	429a      	cmp	r2, r3
 800297a:	d8f7      	bhi.n	800296c <HAL_Delay+0x28>
  {
  }
}
 800297c:	bf00      	nop
 800297e:	bf00      	nop
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	24000010 	.word	0x24000010

0800298c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_GetREVID+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	0c1b      	lsrs	r3, r3, #16
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	5c001000 	.word	0x5c001000

080029a4 <__NVIC_SetPriorityGrouping>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d2:	4a04      	ldr	r2, [pc, #16]	@ (80029e4 <__NVIC_SetPriorityGrouping+0x40>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	60d3      	str	r3, [r2, #12]
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00
 80029e8:	05fa0000 	.word	0x05fa0000

080029ec <__NVIC_GetPriorityGrouping>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	88fb      	ldrh	r3, [r7, #6]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4907      	ldr	r1, [pc, #28]	@ (8002a40 <__NVIC_EnableIRQ+0x38>)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <__NVIC_SetPriority>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	6039      	str	r1, [r7, #0]
 8002a4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	db0a      	blt.n	8002a6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	490c      	ldr	r1, [pc, #48]	@ (8002a90 <__NVIC_SetPriority+0x4c>)
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	0112      	lsls	r2, r2, #4
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	440b      	add	r3, r1
 8002a68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a6c:	e00a      	b.n	8002a84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4908      	ldr	r1, [pc, #32]	@ (8002a94 <__NVIC_SetPriority+0x50>)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	3b04      	subs	r3, #4
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	440b      	add	r3, r1
 8002a82:	761a      	strb	r2, [r3, #24]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <NVIC_EncodePriority>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b089      	sub	sp, #36	@ 0x24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f1c3 0307 	rsb	r3, r3, #7
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	bf28      	it	cs
 8002ab6:	2304      	movcs	r3, #4
 8002ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2b06      	cmp	r3, #6
 8002ac0:	d902      	bls.n	8002ac8 <NVIC_EncodePriority+0x30>
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3b03      	subs	r3, #3
 8002ac6:	e000      	b.n	8002aca <NVIC_EncodePriority+0x32>
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	401a      	ands	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	43d9      	mvns	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	4313      	orrs	r3, r2
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3724      	adds	r7, #36	@ 0x24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <SysTick_Config>:
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b10:	d301      	bcc.n	8002b16 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002b12:	2301      	movs	r3, #1
 8002b14:	e00f      	b.n	8002b36 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b16:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <SysTick_Config+0x40>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b1e:	210f      	movs	r1, #15
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f7ff ff8e 	bl	8002a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <SysTick_Config+0x40>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b2e:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <SysTick_Config+0x40>)
 8002b30:	2207      	movs	r2, #7
 8002b32:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	e000e010 	.word	0xe000e010

08002b44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff29 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b086      	sub	sp, #24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
 8002b66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b68:	f7ff ff40 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f7ff ff90 	bl	8002a98 <NVIC_EncodePriority>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff ff5f 	bl	8002a44 <__NVIC_SetPriority>
}
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff33 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ffa4 	bl	8002b00 <SysTick_Config>
 8002bb8:	4603      	mov	r3, r0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002bc8:	f3bf 8f5f 	dmb	sy
}
 8002bcc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002bce:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <HAL_MPU_Disable+0x28>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd2:	4a06      	ldr	r2, [pc, #24]	@ (8002bec <HAL_MPU_Disable+0x28>)
 8002bd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bda:	4b05      	ldr	r3, [pc, #20]	@ (8002bf0 <HAL_MPU_Disable+0x2c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e000ed00 	.word	0xe000ed00
 8002bf0:	e000ed90 	.word	0xe000ed90

08002bf4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_MPU_Enable+0x38>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f043 0301 	orr.w	r3, r3, #1
 8002c04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_MPU_Enable+0x3c>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_MPU_Enable+0x3c>)
 8002c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c10:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c12:	f3bf 8f4f 	dsb	sy
}
 8002c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c18:	f3bf 8f6f 	isb	sy
}
 8002c1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000ed90 	.word	0xe000ed90
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	785a      	ldrb	r2, [r3, #1]
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c42:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4a19      	ldr	r2, [pc, #100]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c4a:	f023 0301 	bic.w	r3, r3, #1
 8002c4e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	7b1b      	ldrb	r3, [r3, #12]
 8002c5c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7adb      	ldrb	r3, [r3, #11]
 8002c62:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7a9b      	ldrb	r3, [r3, #10]
 8002c6a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7b5b      	ldrb	r3, [r3, #13]
 8002c72:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7b9b      	ldrb	r3, [r3, #14]
 8002c7a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7bdb      	ldrb	r3, [r3, #15]
 8002c82:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	7a5b      	ldrb	r3, [r3, #9]
 8002c8a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7a1b      	ldrb	r3, [r3, #8]
 8002c92:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c94:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c9c:	4a04      	ldr	r2, [pc, #16]	@ (8002cb0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c9e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ca0:	6113      	str	r3, [r2, #16]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed90 	.word	0xe000ed90

08002cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fe36 	bl	800292c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e316      	b.n	80032fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a66      	ldr	r2, [pc, #408]	@ (8002e6c <HAL_DMA_Init+0x1b8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a65      	ldr	r2, [pc, #404]	@ (8002e70 <HAL_DMA_Init+0x1bc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a63      	ldr	r2, [pc, #396]	@ (8002e74 <HAL_DMA_Init+0x1c0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a62      	ldr	r2, [pc, #392]	@ (8002e78 <HAL_DMA_Init+0x1c4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a60      	ldr	r2, [pc, #384]	@ (8002e7c <HAL_DMA_Init+0x1c8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a5f      	ldr	r2, [pc, #380]	@ (8002e80 <HAL_DMA_Init+0x1cc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_DMA_Init+0x1d0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a5c      	ldr	r2, [pc, #368]	@ (8002e88 <HAL_DMA_Init+0x1d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5a      	ldr	r2, [pc, #360]	@ (8002e8c <HAL_DMA_Init+0x1d8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a59      	ldr	r2, [pc, #356]	@ (8002e90 <HAL_DMA_Init+0x1dc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a57      	ldr	r2, [pc, #348]	@ (8002e94 <HAL_DMA_Init+0x1e0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a56      	ldr	r2, [pc, #344]	@ (8002e98 <HAL_DMA_Init+0x1e4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a54      	ldr	r2, [pc, #336]	@ (8002e9c <HAL_DMA_Init+0x1e8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a53      	ldr	r2, [pc, #332]	@ (8002ea0 <HAL_DMA_Init+0x1ec>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a51      	ldr	r2, [pc, #324]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Init+0xb8>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a50      	ldr	r2, [pc, #320]	@ (8002ea8 <HAL_DMA_Init+0x1f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Init+0xbc>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_Init+0xbe>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 813b 	beq.w	8002fee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a37      	ldr	r2, [pc, #220]	@ (8002e6c <HAL_DMA_Init+0x1b8>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d04a      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a36      	ldr	r2, [pc, #216]	@ (8002e70 <HAL_DMA_Init+0x1bc>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d045      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a34      	ldr	r2, [pc, #208]	@ (8002e74 <HAL_DMA_Init+0x1c0>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d040      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a33      	ldr	r2, [pc, #204]	@ (8002e78 <HAL_DMA_Init+0x1c4>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d03b      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a31      	ldr	r2, [pc, #196]	@ (8002e7c <HAL_DMA_Init+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d036      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <HAL_DMA_Init+0x1cc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d031      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <HAL_DMA_Init+0x1d0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d02c      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_DMA_Init+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d027      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_DMA_Init+0x1d8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d022      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_DMA_Init+0x1dc>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d01d      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <HAL_DMA_Init+0x1e0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d018      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	@ (8002e98 <HAL_DMA_Init+0x1e4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d013      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_DMA_Init+0x1e8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00e      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_DMA_Init+0x1ec>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d009      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d004      	beq.n	8002e28 <HAL_DMA_Init+0x174>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_DMA_Init+0x1f4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d108      	bne.n	8002e3a <HAL_DMA_Init+0x186>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	e007      	b.n	8002e4a <HAL_DMA_Init+0x196>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0201 	bic.w	r2, r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e4a:	e02f      	b.n	8002eac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e4c:	f7ff fd6e 	bl	800292c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d928      	bls.n	8002eac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2203      	movs	r2, #3
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e246      	b.n	80032fa <HAL_DMA_Init+0x646>
 8002e6c:	40020010 	.word	0x40020010
 8002e70:	40020028 	.word	0x40020028
 8002e74:	40020040 	.word	0x40020040
 8002e78:	40020058 	.word	0x40020058
 8002e7c:	40020070 	.word	0x40020070
 8002e80:	40020088 	.word	0x40020088
 8002e84:	400200a0 	.word	0x400200a0
 8002e88:	400200b8 	.word	0x400200b8
 8002e8c:	40020410 	.word	0x40020410
 8002e90:	40020428 	.word	0x40020428
 8002e94:	40020440 	.word	0x40020440
 8002e98:	40020458 	.word	0x40020458
 8002e9c:	40020470 	.word	0x40020470
 8002ea0:	40020488 	.word	0x40020488
 8002ea4:	400204a0 	.word	0x400204a0
 8002ea8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1c8      	bne.n	8002e4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	4b83      	ldr	r3, [pc, #524]	@ (80030d4 <HAL_DMA_Init+0x420>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ed2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002f10:	4b71      	ldr	r3, [pc, #452]	@ (80030d8 <HAL_DMA_Init+0x424>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b71      	ldr	r3, [pc, #452]	@ (80030dc <HAL_DMA_Init+0x428>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f1c:	d328      	bcc.n	8002f70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b28      	cmp	r3, #40	@ 0x28
 8002f24:	d903      	bls.n	8002f2e <HAL_DMA_Init+0x27a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002f2c:	d917      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b3e      	cmp	r3, #62	@ 0x3e
 8002f34:	d903      	bls.n	8002f3e <HAL_DMA_Init+0x28a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b42      	cmp	r3, #66	@ 0x42
 8002f3c:	d90f      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b46      	cmp	r3, #70	@ 0x46
 8002f44:	d903      	bls.n	8002f4e <HAL_DMA_Init+0x29a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b48      	cmp	r3, #72	@ 0x48
 8002f4c:	d907      	bls.n	8002f5e <HAL_DMA_Init+0x2aa>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f54:	d905      	bls.n	8002f62 <HAL_DMA_Init+0x2ae>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b52      	cmp	r3, #82	@ 0x52
 8002f5c:	d801      	bhi.n	8002f62 <HAL_DMA_Init+0x2ae>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_Init+0x2b0>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f023 0307 	bic.w	r3, r3, #7
 8002f86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d117      	bne.n	8002fca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00e      	beq.n	8002fca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f002 fb3f 	bl	8005630 <DMA_CheckFifoParam>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2240      	movs	r2, #64	@ 0x40
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e197      	b.n	80032fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f002 fa7a 	bl	80054cc <DMA_CalcBaseAndBitshift>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	223f      	movs	r2, #63	@ 0x3f
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	e0cd      	b.n	800318a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3b      	ldr	r2, [pc, #236]	@ (80030e0 <HAL_DMA_Init+0x42c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d022      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a39      	ldr	r2, [pc, #228]	@ (80030e4 <HAL_DMA_Init+0x430>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01d      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a38      	ldr	r2, [pc, #224]	@ (80030e8 <HAL_DMA_Init+0x434>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d018      	beq.n	800303e <HAL_DMA_Init+0x38a>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a36      	ldr	r2, [pc, #216]	@ (80030ec <HAL_DMA_Init+0x438>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a35      	ldr	r2, [pc, #212]	@ (80030f0 <HAL_DMA_Init+0x43c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a33      	ldr	r2, [pc, #204]	@ (80030f4 <HAL_DMA_Init+0x440>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_DMA_Init+0x38a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a32      	ldr	r2, [pc, #200]	@ (80030f8 <HAL_DMA_Init+0x444>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_DMA_Init+0x38a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <HAL_DMA_Init+0x448>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Init+0x38e>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_DMA_Init+0x390>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8097 	beq.w	8003178 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a24      	ldr	r2, [pc, #144]	@ (80030e0 <HAL_DMA_Init+0x42c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d021      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a22      	ldr	r2, [pc, #136]	@ (80030e4 <HAL_DMA_Init+0x430>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d01c      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a21      	ldr	r2, [pc, #132]	@ (80030e8 <HAL_DMA_Init+0x434>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d017      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <HAL_DMA_Init+0x438>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d012      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a1e      	ldr	r2, [pc, #120]	@ (80030f0 <HAL_DMA_Init+0x43c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00d      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1c      	ldr	r2, [pc, #112]	@ (80030f4 <HAL_DMA_Init+0x440>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d008      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a1b      	ldr	r2, [pc, #108]	@ (80030f8 <HAL_DMA_Init+0x444>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d003      	beq.n	8003098 <HAL_DMA_Init+0x3e4>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a19      	ldr	r2, [pc, #100]	@ (80030fc <HAL_DMA_Init+0x448>)
 8003096:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <HAL_DMA_Init+0x44c>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	d021      	beq.n	8003104 <HAL_DMA_Init+0x450>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b80      	cmp	r3, #128	@ 0x80
 80030c6:	d102      	bne.n	80030ce <HAL_DMA_Init+0x41a>
 80030c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030cc:	e01b      	b.n	8003106 <HAL_DMA_Init+0x452>
 80030ce:	2300      	movs	r3, #0
 80030d0:	e019      	b.n	8003106 <HAL_DMA_Init+0x452>
 80030d2:	bf00      	nop
 80030d4:	fe10803f 	.word	0xfe10803f
 80030d8:	5c001000 	.word	0x5c001000
 80030dc:	ffff0000 	.word	0xffff0000
 80030e0:	58025408 	.word	0x58025408
 80030e4:	5802541c 	.word	0x5802541c
 80030e8:	58025430 	.word	0x58025430
 80030ec:	58025444 	.word	0x58025444
 80030f0:	58025458 	.word	0x58025458
 80030f4:	5802546c 	.word	0x5802546c
 80030f8:	58025480 	.word	0x58025480
 80030fc:	58025494 	.word	0x58025494
 8003100:	fffe000f 	.word	0xfffe000f
 8003104:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68d2      	ldr	r2, [r2, #12]
 800310a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800310c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800311c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800312c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003134:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	4313      	orrs	r3, r2
 800313a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	4b6e      	ldr	r3, [pc, #440]	@ (8003304 <HAL_DMA_Init+0x650>)
 800314c:	4413      	add	r3, r2
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_DMA_Init+0x654>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	009a      	lsls	r2, r3, #2
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f002 f9b5 	bl	80054cc <DMA_CalcBaseAndBitshift>
 8003162:	4603      	mov	r3, r0
 8003164:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	2201      	movs	r2, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	e008      	b.n	800318a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2240      	movs	r2, #64	@ 0x40
 800317c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0b7      	b.n	80032fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5f      	ldr	r2, [pc, #380]	@ (800330c <HAL_DMA_Init+0x658>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d072      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5d      	ldr	r2, [pc, #372]	@ (8003310 <HAL_DMA_Init+0x65c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d06d      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <HAL_DMA_Init+0x660>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d068      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003318 <HAL_DMA_Init+0x664>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d063      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a59      	ldr	r2, [pc, #356]	@ (800331c <HAL_DMA_Init+0x668>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d05e      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a57      	ldr	r2, [pc, #348]	@ (8003320 <HAL_DMA_Init+0x66c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d059      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <HAL_DMA_Init+0x670>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d054      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a54      	ldr	r2, [pc, #336]	@ (8003328 <HAL_DMA_Init+0x674>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d04f      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a53      	ldr	r2, [pc, #332]	@ (800332c <HAL_DMA_Init+0x678>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a51      	ldr	r2, [pc, #324]	@ (8003330 <HAL_DMA_Init+0x67c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a50      	ldr	r2, [pc, #320]	@ (8003334 <HAL_DMA_Init+0x680>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003338 <HAL_DMA_Init+0x684>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a4d      	ldr	r2, [pc, #308]	@ (800333c <HAL_DMA_Init+0x688>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a4b      	ldr	r2, [pc, #300]	@ (8003340 <HAL_DMA_Init+0x68c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4a      	ldr	r2, [pc, #296]	@ (8003344 <HAL_DMA_Init+0x690>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a48      	ldr	r2, [pc, #288]	@ (8003348 <HAL_DMA_Init+0x694>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a47      	ldr	r2, [pc, #284]	@ (800334c <HAL_DMA_Init+0x698>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a45      	ldr	r2, [pc, #276]	@ (8003350 <HAL_DMA_Init+0x69c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a44      	ldr	r2, [pc, #272]	@ (8003354 <HAL_DMA_Init+0x6a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a42      	ldr	r2, [pc, #264]	@ (8003358 <HAL_DMA_Init+0x6a4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a41      	ldr	r2, [pc, #260]	@ (800335c <HAL_DMA_Init+0x6a8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <HAL_DMA_Init+0x6ac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <HAL_DMA_Init+0x6b0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Init+0x5c6>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a3c      	ldr	r2, [pc, #240]	@ (8003368 <HAL_DMA_Init+0x6b4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_DMA_Init+0x5ca>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_DMA_Init+0x5cc>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d032      	beq.n	80032ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f002 fa4f 	bl	8005728 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b80      	cmp	r3, #128	@ 0x80
 8003290:	d102      	bne.n	8003298 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80032ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_DMA_Init+0x624>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d80c      	bhi.n	80032d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f002 facc 	bl	800585c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e008      	b.n	80032ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	a7fdabf8 	.word	0xa7fdabf8
 8003308:	cccccccd 	.word	0xcccccccd
 800330c:	40020010 	.word	0x40020010
 8003310:	40020028 	.word	0x40020028
 8003314:	40020040 	.word	0x40020040
 8003318:	40020058 	.word	0x40020058
 800331c:	40020070 	.word	0x40020070
 8003320:	40020088 	.word	0x40020088
 8003324:	400200a0 	.word	0x400200a0
 8003328:	400200b8 	.word	0x400200b8
 800332c:	40020410 	.word	0x40020410
 8003330:	40020428 	.word	0x40020428
 8003334:	40020440 	.word	0x40020440
 8003338:	40020458 	.word	0x40020458
 800333c:	40020470 	.word	0x40020470
 8003340:	40020488 	.word	0x40020488
 8003344:	400204a0 	.word	0x400204a0
 8003348:	400204b8 	.word	0x400204b8
 800334c:	58025408 	.word	0x58025408
 8003350:	5802541c 	.word	0x5802541c
 8003354:	58025430 	.word	0x58025430
 8003358:	58025444 	.word	0x58025444
 800335c:	58025458 	.word	0x58025458
 8003360:	5802546c 	.word	0x5802546c
 8003364:	58025480 	.word	0x58025480
 8003368:	58025494 	.word	0x58025494

0800336c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e226      	b.n	80037d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800338e:	2b01      	cmp	r3, #1
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Start_IT+0x2a>
 8003392:	2302      	movs	r3, #2
 8003394:	e21f      	b.n	80037d6 <HAL_DMA_Start_IT+0x46a>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 820a 	bne.w	80037c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a68      	ldr	r2, [pc, #416]	@ (8003560 <HAL_DMA_Start_IT+0x1f4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d04a      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a66      	ldr	r2, [pc, #408]	@ (8003564 <HAL_DMA_Start_IT+0x1f8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d045      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a65      	ldr	r2, [pc, #404]	@ (8003568 <HAL_DMA_Start_IT+0x1fc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d040      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a63      	ldr	r2, [pc, #396]	@ (800356c <HAL_DMA_Start_IT+0x200>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d03b      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a62      	ldr	r2, [pc, #392]	@ (8003570 <HAL_DMA_Start_IT+0x204>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d036      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a60      	ldr	r2, [pc, #384]	@ (8003574 <HAL_DMA_Start_IT+0x208>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d031      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003578 <HAL_DMA_Start_IT+0x20c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d02c      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a5d      	ldr	r2, [pc, #372]	@ (800357c <HAL_DMA_Start_IT+0x210>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d027      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a5c      	ldr	r2, [pc, #368]	@ (8003580 <HAL_DMA_Start_IT+0x214>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d022      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a5a      	ldr	r2, [pc, #360]	@ (8003584 <HAL_DMA_Start_IT+0x218>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d01d      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a59      	ldr	r2, [pc, #356]	@ (8003588 <HAL_DMA_Start_IT+0x21c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d018      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a57      	ldr	r2, [pc, #348]	@ (800358c <HAL_DMA_Start_IT+0x220>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d013      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a56      	ldr	r2, [pc, #344]	@ (8003590 <HAL_DMA_Start_IT+0x224>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a54      	ldr	r2, [pc, #336]	@ (8003594 <HAL_DMA_Start_IT+0x228>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d009      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a53      	ldr	r2, [pc, #332]	@ (8003598 <HAL_DMA_Start_IT+0x22c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d004      	beq.n	800345a <HAL_DMA_Start_IT+0xee>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a51      	ldr	r2, [pc, #324]	@ (800359c <HAL_DMA_Start_IT+0x230>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d108      	bne.n	800346c <HAL_DMA_Start_IT+0x100>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e007      	b.n	800347c <HAL_DMA_Start_IT+0x110>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f001 fe76 	bl	8005174 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a34      	ldr	r2, [pc, #208]	@ (8003560 <HAL_DMA_Start_IT+0x1f4>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d04a      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a33      	ldr	r2, [pc, #204]	@ (8003564 <HAL_DMA_Start_IT+0x1f8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d045      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a31      	ldr	r2, [pc, #196]	@ (8003568 <HAL_DMA_Start_IT+0x1fc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d040      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a30      	ldr	r2, [pc, #192]	@ (800356c <HAL_DMA_Start_IT+0x200>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d03b      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a2e      	ldr	r2, [pc, #184]	@ (8003570 <HAL_DMA_Start_IT+0x204>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d036      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a2d      	ldr	r2, [pc, #180]	@ (8003574 <HAL_DMA_Start_IT+0x208>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d031      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <HAL_DMA_Start_IT+0x20c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d02c      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <HAL_DMA_Start_IT+0x210>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <HAL_DMA_Start_IT+0x214>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d022      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a27      	ldr	r2, [pc, #156]	@ (8003584 <HAL_DMA_Start_IT+0x218>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01d      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a25      	ldr	r2, [pc, #148]	@ (8003588 <HAL_DMA_Start_IT+0x21c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d018      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a24      	ldr	r2, [pc, #144]	@ (800358c <HAL_DMA_Start_IT+0x220>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <HAL_DMA_Start_IT+0x224>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_DMA_Start_IT+0x228>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d009      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	@ (8003598 <HAL_DMA_Start_IT+0x22c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <HAL_DMA_Start_IT+0x1bc>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	@ (800359c <HAL_DMA_Start_IT+0x230>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_DMA_Start_IT+0x1c0>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_DMA_Start_IT+0x1c2>
 800352c:	2300      	movs	r3, #0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 021e 	bic.w	r2, r3, #30
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0216 	orr.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03e      	beq.n	80035cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0208 	orr.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e035      	b.n	80035cc <HAL_DMA_Start_IT+0x260>
 8003560:	40020010 	.word	0x40020010
 8003564:	40020028 	.word	0x40020028
 8003568:	40020040 	.word	0x40020040
 800356c:	40020058 	.word	0x40020058
 8003570:	40020070 	.word	0x40020070
 8003574:	40020088 	.word	0x40020088
 8003578:	400200a0 	.word	0x400200a0
 800357c:	400200b8 	.word	0x400200b8
 8003580:	40020410 	.word	0x40020410
 8003584:	40020428 	.word	0x40020428
 8003588:	40020440 	.word	0x40020440
 800358c:	40020458 	.word	0x40020458
 8003590:	40020470 	.word	0x40020470
 8003594:	40020488 	.word	0x40020488
 8003598:	400204a0 	.word	0x400204a0
 800359c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 020e 	bic.w	r2, r3, #14
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 020a 	orr.w	r2, r2, #10
 80035b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0204 	orr.w	r2, r2, #4
 80035ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a83      	ldr	r2, [pc, #524]	@ (80037e0 <HAL_DMA_Start_IT+0x474>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d072      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a82      	ldr	r2, [pc, #520]	@ (80037e4 <HAL_DMA_Start_IT+0x478>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d06d      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a80      	ldr	r2, [pc, #512]	@ (80037e8 <HAL_DMA_Start_IT+0x47c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d068      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a7f      	ldr	r2, [pc, #508]	@ (80037ec <HAL_DMA_Start_IT+0x480>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d063      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a7d      	ldr	r2, [pc, #500]	@ (80037f0 <HAL_DMA_Start_IT+0x484>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d05e      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a7c      	ldr	r2, [pc, #496]	@ (80037f4 <HAL_DMA_Start_IT+0x488>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d059      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a7a      	ldr	r2, [pc, #488]	@ (80037f8 <HAL_DMA_Start_IT+0x48c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d054      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a79      	ldr	r2, [pc, #484]	@ (80037fc <HAL_DMA_Start_IT+0x490>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04f      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a77      	ldr	r2, [pc, #476]	@ (8003800 <HAL_DMA_Start_IT+0x494>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d04a      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a76      	ldr	r2, [pc, #472]	@ (8003804 <HAL_DMA_Start_IT+0x498>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d045      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a74      	ldr	r2, [pc, #464]	@ (8003808 <HAL_DMA_Start_IT+0x49c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d040      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	@ (800380c <HAL_DMA_Start_IT+0x4a0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d03b      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a71      	ldr	r2, [pc, #452]	@ (8003810 <HAL_DMA_Start_IT+0x4a4>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d036      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a70      	ldr	r2, [pc, #448]	@ (8003814 <HAL_DMA_Start_IT+0x4a8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d031      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_DMA_Start_IT+0x4ac>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d02c      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6d      	ldr	r2, [pc, #436]	@ (800381c <HAL_DMA_Start_IT+0x4b0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d027      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	@ (8003820 <HAL_DMA_Start_IT+0x4b4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a6a      	ldr	r2, [pc, #424]	@ (8003824 <HAL_DMA_Start_IT+0x4b8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d01d      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a68      	ldr	r2, [pc, #416]	@ (8003828 <HAL_DMA_Start_IT+0x4bc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a67      	ldr	r2, [pc, #412]	@ (800382c <HAL_DMA_Start_IT+0x4c0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d013      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_DMA_Start_IT+0x4c4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00e      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a64      	ldr	r2, [pc, #400]	@ (8003834 <HAL_DMA_Start_IT+0x4c8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a62      	ldr	r2, [pc, #392]	@ (8003838 <HAL_DMA_Start_IT+0x4cc>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_DMA_Start_IT+0x350>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a61      	ldr	r2, [pc, #388]	@ (800383c <HAL_DMA_Start_IT+0x4d0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_DMA_Start_IT+0x354>
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_DMA_Start_IT+0x356>
 80036c0:	2300      	movs	r3, #0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a37      	ldr	r2, [pc, #220]	@ (80037e0 <HAL_DMA_Start_IT+0x474>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d04a      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a36      	ldr	r2, [pc, #216]	@ (80037e4 <HAL_DMA_Start_IT+0x478>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d045      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a34      	ldr	r2, [pc, #208]	@ (80037e8 <HAL_DMA_Start_IT+0x47c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d040      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a33      	ldr	r2, [pc, #204]	@ (80037ec <HAL_DMA_Start_IT+0x480>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d03b      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a31      	ldr	r2, [pc, #196]	@ (80037f0 <HAL_DMA_Start_IT+0x484>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d036      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a30      	ldr	r2, [pc, #192]	@ (80037f4 <HAL_DMA_Start_IT+0x488>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d031      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a2e      	ldr	r2, [pc, #184]	@ (80037f8 <HAL_DMA_Start_IT+0x48c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d02c      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a2d      	ldr	r2, [pc, #180]	@ (80037fc <HAL_DMA_Start_IT+0x490>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d027      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a2b      	ldr	r2, [pc, #172]	@ (8003800 <HAL_DMA_Start_IT+0x494>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d022      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2a      	ldr	r2, [pc, #168]	@ (8003804 <HAL_DMA_Start_IT+0x498>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d01d      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a28      	ldr	r2, [pc, #160]	@ (8003808 <HAL_DMA_Start_IT+0x49c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d018      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a27      	ldr	r2, [pc, #156]	@ (800380c <HAL_DMA_Start_IT+0x4a0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a25      	ldr	r2, [pc, #148]	@ (8003810 <HAL_DMA_Start_IT+0x4a4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00e      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a24      	ldr	r2, [pc, #144]	@ (8003814 <HAL_DMA_Start_IT+0x4a8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d009      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a22      	ldr	r2, [pc, #136]	@ (8003818 <HAL_DMA_Start_IT+0x4ac>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d004      	beq.n	800379c <HAL_DMA_Start_IT+0x430>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	@ (800381c <HAL_DMA_Start_IT+0x4b0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d108      	bne.n	80037ae <HAL_DMA_Start_IT+0x442>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	e012      	b.n	80037d4 <HAL_DMA_Start_IT+0x468>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e009      	b.n	80037d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40020010 	.word	0x40020010
 80037e4:	40020028 	.word	0x40020028
 80037e8:	40020040 	.word	0x40020040
 80037ec:	40020058 	.word	0x40020058
 80037f0:	40020070 	.word	0x40020070
 80037f4:	40020088 	.word	0x40020088
 80037f8:	400200a0 	.word	0x400200a0
 80037fc:	400200b8 	.word	0x400200b8
 8003800:	40020410 	.word	0x40020410
 8003804:	40020428 	.word	0x40020428
 8003808:	40020440 	.word	0x40020440
 800380c:	40020458 	.word	0x40020458
 8003810:	40020470 	.word	0x40020470
 8003814:	40020488 	.word	0x40020488
 8003818:	400204a0 	.word	0x400204a0
 800381c:	400204b8 	.word	0x400204b8
 8003820:	58025408 	.word	0x58025408
 8003824:	5802541c 	.word	0x5802541c
 8003828:	58025430 	.word	0x58025430
 800382c:	58025444 	.word	0x58025444
 8003830:	58025458 	.word	0x58025458
 8003834:	5802546c 	.word	0x5802546c
 8003838:	58025480 	.word	0x58025480
 800383c:	58025494 	.word	0x58025494

08003840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff f870 	bl	800292c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e2dc      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d008      	beq.n	8003876 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2280      	movs	r2, #128	@ 0x80
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e2cd      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a76      	ldr	r2, [pc, #472]	@ (8003a54 <HAL_DMA_Abort+0x214>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a74      	ldr	r2, [pc, #464]	@ (8003a58 <HAL_DMA_Abort+0x218>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	@ (8003a5c <HAL_DMA_Abort+0x21c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a71      	ldr	r2, [pc, #452]	@ (8003a60 <HAL_DMA_Abort+0x220>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a70      	ldr	r2, [pc, #448]	@ (8003a64 <HAL_DMA_Abort+0x224>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_DMA_Abort+0x228>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a6c <HAL_DMA_Abort+0x22c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a70 <HAL_DMA_Abort+0x230>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a6a      	ldr	r2, [pc, #424]	@ (8003a74 <HAL_DMA_Abort+0x234>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a68      	ldr	r2, [pc, #416]	@ (8003a78 <HAL_DMA_Abort+0x238>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a67      	ldr	r2, [pc, #412]	@ (8003a7c <HAL_DMA_Abort+0x23c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a65      	ldr	r2, [pc, #404]	@ (8003a80 <HAL_DMA_Abort+0x240>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a64      	ldr	r2, [pc, #400]	@ (8003a84 <HAL_DMA_Abort+0x244>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a62      	ldr	r2, [pc, #392]	@ (8003a88 <HAL_DMA_Abort+0x248>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a61      	ldr	r2, [pc, #388]	@ (8003a8c <HAL_DMA_Abort+0x24c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Abort+0xd6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a5f      	ldr	r2, [pc, #380]	@ (8003a90 <HAL_DMA_Abort+0x250>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_DMA_Abort+0xda>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_DMA_Abort+0xdc>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 021e 	bic.w	r2, r2, #30
 800392e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800393e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e00a      	b.n	800395e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3c      	ldr	r2, [pc, #240]	@ (8003a54 <HAL_DMA_Abort+0x214>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d072      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a58 <HAL_DMA_Abort+0x218>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d06d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a39      	ldr	r2, [pc, #228]	@ (8003a5c <HAL_DMA_Abort+0x21c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d068      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a37      	ldr	r2, [pc, #220]	@ (8003a60 <HAL_DMA_Abort+0x220>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d063      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a36      	ldr	r2, [pc, #216]	@ (8003a64 <HAL_DMA_Abort+0x224>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d05e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a34      	ldr	r2, [pc, #208]	@ (8003a68 <HAL_DMA_Abort+0x228>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d059      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a33      	ldr	r2, [pc, #204]	@ (8003a6c <HAL_DMA_Abort+0x22c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d054      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a31      	ldr	r2, [pc, #196]	@ (8003a70 <HAL_DMA_Abort+0x230>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04f      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a30      	ldr	r2, [pc, #192]	@ (8003a74 <HAL_DMA_Abort+0x234>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d04a      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003a78 <HAL_DMA_Abort+0x238>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d045      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_DMA_Abort+0x23c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d040      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a80 <HAL_DMA_Abort+0x240>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d03b      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2a      	ldr	r2, [pc, #168]	@ (8003a84 <HAL_DMA_Abort+0x244>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d036      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a28      	ldr	r2, [pc, #160]	@ (8003a88 <HAL_DMA_Abort+0x248>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d031      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a27      	ldr	r2, [pc, #156]	@ (8003a8c <HAL_DMA_Abort+0x24c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d02c      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a25      	ldr	r2, [pc, #148]	@ (8003a90 <HAL_DMA_Abort+0x250>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d027      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a24      	ldr	r2, [pc, #144]	@ (8003a94 <HAL_DMA_Abort+0x254>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a22      	ldr	r2, [pc, #136]	@ (8003a98 <HAL_DMA_Abort+0x258>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a21      	ldr	r2, [pc, #132]	@ (8003a9c <HAL_DMA_Abort+0x25c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <HAL_DMA_Abort+0x260>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa4 <HAL_DMA_Abort+0x264>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa8 <HAL_DMA_Abort+0x268>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <HAL_DMA_Abort+0x26c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_DMA_Abort+0x20e>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a19      	ldr	r2, [pc, #100]	@ (8003ab0 <HAL_DMA_Abort+0x270>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d132      	bne.n	8003ab4 <HAL_DMA_Abort+0x274>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e031      	b.n	8003ab6 <HAL_DMA_Abort+0x276>
 8003a52:	bf00      	nop
 8003a54:	40020010 	.word	0x40020010
 8003a58:	40020028 	.word	0x40020028
 8003a5c:	40020040 	.word	0x40020040
 8003a60:	40020058 	.word	0x40020058
 8003a64:	40020070 	.word	0x40020070
 8003a68:	40020088 	.word	0x40020088
 8003a6c:	400200a0 	.word	0x400200a0
 8003a70:	400200b8 	.word	0x400200b8
 8003a74:	40020410 	.word	0x40020410
 8003a78:	40020428 	.word	0x40020428
 8003a7c:	40020440 	.word	0x40020440
 8003a80:	40020458 	.word	0x40020458
 8003a84:	40020470 	.word	0x40020470
 8003a88:	40020488 	.word	0x40020488
 8003a8c:	400204a0 	.word	0x400204a0
 8003a90:	400204b8 	.word	0x400204b8
 8003a94:	58025408 	.word	0x58025408
 8003a98:	5802541c 	.word	0x5802541c
 8003a9c:	58025430 	.word	0x58025430
 8003aa0:	58025444 	.word	0x58025444
 8003aa4:	58025458 	.word	0x58025458
 8003aa8:	5802546c 	.word	0x5802546c
 8003aac:	58025480 	.word	0x58025480
 8003ab0:	58025494 	.word	0x58025494
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6d      	ldr	r2, [pc, #436]	@ (8003c84 <HAL_DMA_Abort+0x444>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d04a      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a6b      	ldr	r2, [pc, #428]	@ (8003c88 <HAL_DMA_Abort+0x448>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d045      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a6a      	ldr	r2, [pc, #424]	@ (8003c8c <HAL_DMA_Abort+0x44c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d040      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a68      	ldr	r2, [pc, #416]	@ (8003c90 <HAL_DMA_Abort+0x450>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d03b      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a67      	ldr	r2, [pc, #412]	@ (8003c94 <HAL_DMA_Abort+0x454>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d036      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a65      	ldr	r2, [pc, #404]	@ (8003c98 <HAL_DMA_Abort+0x458>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d031      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a64      	ldr	r2, [pc, #400]	@ (8003c9c <HAL_DMA_Abort+0x45c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d02c      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	@ (8003ca0 <HAL_DMA_Abort+0x460>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d027      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a61      	ldr	r2, [pc, #388]	@ (8003ca4 <HAL_DMA_Abort+0x464>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d022      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a5f      	ldr	r2, [pc, #380]	@ (8003ca8 <HAL_DMA_Abort+0x468>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	@ (8003cac <HAL_DMA_Abort+0x46c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d018      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb0 <HAL_DMA_Abort+0x470>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5b      	ldr	r2, [pc, #364]	@ (8003cb4 <HAL_DMA_Abort+0x474>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00e      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a59      	ldr	r2, [pc, #356]	@ (8003cb8 <HAL_DMA_Abort+0x478>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a58      	ldr	r2, [pc, #352]	@ (8003cbc <HAL_DMA_Abort+0x47c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d004      	beq.n	8003b6a <HAL_DMA_Abort+0x32a>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a56      	ldr	r2, [pc, #344]	@ (8003cc0 <HAL_DMA_Abort+0x480>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <HAL_DMA_Abort+0x33c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e007      	b.n	8003b8c <HAL_DMA_Abort+0x34c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b8c:	e013      	b.n	8003bb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8e:	f7fe fecd 	bl	800292c <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d90c      	bls.n	8003bb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e12d      	b.n	8003e12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c84 <HAL_DMA_Abort+0x444>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d04a      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c88 <HAL_DMA_Abort+0x448>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d045      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	@ (8003c8c <HAL_DMA_Abort+0x44c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d040      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <HAL_DMA_Abort+0x450>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03b      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <HAL_DMA_Abort+0x454>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d036      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a27      	ldr	r2, [pc, #156]	@ (8003c98 <HAL_DMA_Abort+0x458>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d031      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <HAL_DMA_Abort+0x45c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d02c      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ca0 <HAL_DMA_Abort+0x460>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d027      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <HAL_DMA_Abort+0x464>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a21      	ldr	r2, [pc, #132]	@ (8003ca8 <HAL_DMA_Abort+0x468>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a20      	ldr	r2, [pc, #128]	@ (8003cac <HAL_DMA_Abort+0x46c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb0 <HAL_DMA_Abort+0x470>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d013      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_DMA_Abort+0x474>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1b      	ldr	r2, [pc, #108]	@ (8003cb8 <HAL_DMA_Abort+0x478>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_DMA_Abort+0x47c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_DMA_Abort+0x422>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a18      	ldr	r2, [pc, #96]	@ (8003cc0 <HAL_DMA_Abort+0x480>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_DMA_Abort+0x426>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_DMA_Abort+0x428>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02b      	beq.n	8003cc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	223f      	movs	r2, #63	@ 0x3f
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	609a      	str	r2, [r3, #8]
 8003c82:	e02a      	b.n	8003cda <HAL_DMA_Abort+0x49a>
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	409a      	lsls	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4f      	ldr	r2, [pc, #316]	@ (8003e1c <HAL_DMA_Abort+0x5dc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d072      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8003e20 <HAL_DMA_Abort+0x5e0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d06d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8003e24 <HAL_DMA_Abort+0x5e4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d068      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8003e28 <HAL_DMA_Abort+0x5e8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d063      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a49      	ldr	r2, [pc, #292]	@ (8003e2c <HAL_DMA_Abort+0x5ec>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d05e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a47      	ldr	r2, [pc, #284]	@ (8003e30 <HAL_DMA_Abort+0x5f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d059      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a46      	ldr	r2, [pc, #280]	@ (8003e34 <HAL_DMA_Abort+0x5f4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d054      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a44      	ldr	r2, [pc, #272]	@ (8003e38 <HAL_DMA_Abort+0x5f8>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04f      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a43      	ldr	r2, [pc, #268]	@ (8003e3c <HAL_DMA_Abort+0x5fc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d04a      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a41      	ldr	r2, [pc, #260]	@ (8003e40 <HAL_DMA_Abort+0x600>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d045      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a40      	ldr	r2, [pc, #256]	@ (8003e44 <HAL_DMA_Abort+0x604>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d040      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a3e      	ldr	r2, [pc, #248]	@ (8003e48 <HAL_DMA_Abort+0x608>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d03b      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a3d      	ldr	r2, [pc, #244]	@ (8003e4c <HAL_DMA_Abort+0x60c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d036      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a3b      	ldr	r2, [pc, #236]	@ (8003e50 <HAL_DMA_Abort+0x610>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8003e54 <HAL_DMA_Abort+0x614>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d02c      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_DMA_Abort+0x618>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d027      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a37      	ldr	r2, [pc, #220]	@ (8003e5c <HAL_DMA_Abort+0x61c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a35      	ldr	r2, [pc, #212]	@ (8003e60 <HAL_DMA_Abort+0x620>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01d      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a34      	ldr	r2, [pc, #208]	@ (8003e64 <HAL_DMA_Abort+0x624>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d018      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a32      	ldr	r2, [pc, #200]	@ (8003e68 <HAL_DMA_Abort+0x628>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d013      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a31      	ldr	r2, [pc, #196]	@ (8003e6c <HAL_DMA_Abort+0x62c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00e      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a2f      	ldr	r2, [pc, #188]	@ (8003e70 <HAL_DMA_Abort+0x630>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2e      	ldr	r2, [pc, #184]	@ (8003e74 <HAL_DMA_Abort+0x634>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d004      	beq.n	8003dca <HAL_DMA_Abort+0x58a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e78 <HAL_DMA_Abort+0x638>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_DMA_Abort+0x58e>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_DMA_Abort+0x590>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d015      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ddc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003df4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003dfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40020010 	.word	0x40020010
 8003e20:	40020028 	.word	0x40020028
 8003e24:	40020040 	.word	0x40020040
 8003e28:	40020058 	.word	0x40020058
 8003e2c:	40020070 	.word	0x40020070
 8003e30:	40020088 	.word	0x40020088
 8003e34:	400200a0 	.word	0x400200a0
 8003e38:	400200b8 	.word	0x400200b8
 8003e3c:	40020410 	.word	0x40020410
 8003e40:	40020428 	.word	0x40020428
 8003e44:	40020440 	.word	0x40020440
 8003e48:	40020458 	.word	0x40020458
 8003e4c:	40020470 	.word	0x40020470
 8003e50:	40020488 	.word	0x40020488
 8003e54:	400204a0 	.word	0x400204a0
 8003e58:	400204b8 	.word	0x400204b8
 8003e5c:	58025408 	.word	0x58025408
 8003e60:	5802541c 	.word	0x5802541c
 8003e64:	58025430 	.word	0x58025430
 8003e68:	58025444 	.word	0x58025444
 8003e6c:	58025458 	.word	0x58025458
 8003e70:	5802546c 	.word	0x5802546c
 8003e74:	58025480 	.word	0x58025480
 8003e78:	58025494 	.word	0x58025494

08003e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e237      	b.n	80042fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2280      	movs	r2, #128	@ 0x80
 8003e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e22c      	b.n	80042fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a5c      	ldr	r2, [pc, #368]	@ (800401c <HAL_DMA_Abort_IT+0x1a0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d04a      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_DMA_Abort_IT+0x1a4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d045      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a59      	ldr	r2, [pc, #356]	@ (8004024 <HAL_DMA_Abort_IT+0x1a8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d040      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a58      	ldr	r2, [pc, #352]	@ (8004028 <HAL_DMA_Abort_IT+0x1ac>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d03b      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a56      	ldr	r2, [pc, #344]	@ (800402c <HAL_DMA_Abort_IT+0x1b0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d036      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a55      	ldr	r2, [pc, #340]	@ (8004030 <HAL_DMA_Abort_IT+0x1b4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d031      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a53      	ldr	r2, [pc, #332]	@ (8004034 <HAL_DMA_Abort_IT+0x1b8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02c      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a52      	ldr	r2, [pc, #328]	@ (8004038 <HAL_DMA_Abort_IT+0x1bc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d027      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a50      	ldr	r2, [pc, #320]	@ (800403c <HAL_DMA_Abort_IT+0x1c0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d022      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4f      	ldr	r2, [pc, #316]	@ (8004040 <HAL_DMA_Abort_IT+0x1c4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d01d      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8004044 <HAL_DMA_Abort_IT+0x1c8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d018      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4c      	ldr	r2, [pc, #304]	@ (8004048 <HAL_DMA_Abort_IT+0x1cc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4a      	ldr	r2, [pc, #296]	@ (800404c <HAL_DMA_Abort_IT+0x1d0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d00e      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a49      	ldr	r2, [pc, #292]	@ (8004050 <HAL_DMA_Abort_IT+0x1d4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d009      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a47      	ldr	r2, [pc, #284]	@ (8004054 <HAL_DMA_Abort_IT+0x1d8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d004      	beq.n	8003f44 <HAL_DMA_Abort_IT+0xc8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a46      	ldr	r2, [pc, #280]	@ (8004058 <HAL_DMA_Abort_IT+0x1dc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Abort_IT+0xcc>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <HAL_DMA_Abort_IT+0xce>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8086 	beq.w	800405c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2204      	movs	r2, #4
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800401c <HAL_DMA_Abort_IT+0x1a0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a2e      	ldr	r2, [pc, #184]	@ (8004020 <HAL_DMA_Abort_IT+0x1a4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a2c      	ldr	r2, [pc, #176]	@ (8004024 <HAL_DMA_Abort_IT+0x1a8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004028 <HAL_DMA_Abort_IT+0x1ac>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a29      	ldr	r2, [pc, #164]	@ (800402c <HAL_DMA_Abort_IT+0x1b0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a28      	ldr	r2, [pc, #160]	@ (8004030 <HAL_DMA_Abort_IT+0x1b4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a26      	ldr	r2, [pc, #152]	@ (8004034 <HAL_DMA_Abort_IT+0x1b8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a25      	ldr	r2, [pc, #148]	@ (8004038 <HAL_DMA_Abort_IT+0x1bc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a23      	ldr	r2, [pc, #140]	@ (800403c <HAL_DMA_Abort_IT+0x1c0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a22      	ldr	r2, [pc, #136]	@ (8004040 <HAL_DMA_Abort_IT+0x1c4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a20      	ldr	r2, [pc, #128]	@ (8004044 <HAL_DMA_Abort_IT+0x1c8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a1f      	ldr	r2, [pc, #124]	@ (8004048 <HAL_DMA_Abort_IT+0x1cc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	@ (800404c <HAL_DMA_Abort_IT+0x1d0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_DMA_Abort_IT+0x1d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8004054 <HAL_DMA_Abort_IT+0x1d8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0x17c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <HAL_DMA_Abort_IT+0x1dc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d108      	bne.n	800400a <HAL_DMA_Abort_IT+0x18e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	e178      	b.n	80042fc <HAL_DMA_Abort_IT+0x480>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e16f      	b.n	80042fc <HAL_DMA_Abort_IT+0x480>
 800401c:	40020010 	.word	0x40020010
 8004020:	40020028 	.word	0x40020028
 8004024:	40020040 	.word	0x40020040
 8004028:	40020058 	.word	0x40020058
 800402c:	40020070 	.word	0x40020070
 8004030:	40020088 	.word	0x40020088
 8004034:	400200a0 	.word	0x400200a0
 8004038:	400200b8 	.word	0x400200b8
 800403c:	40020410 	.word	0x40020410
 8004040:	40020428 	.word	0x40020428
 8004044:	40020440 	.word	0x40020440
 8004048:	40020458 	.word	0x40020458
 800404c:	40020470 	.word	0x40020470
 8004050:	40020488 	.word	0x40020488
 8004054:	400204a0 	.word	0x400204a0
 8004058:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 020e 	bic.w	r2, r2, #14
 800406a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6c      	ldr	r2, [pc, #432]	@ (8004224 <HAL_DMA_Abort_IT+0x3a8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d04a      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6b      	ldr	r2, [pc, #428]	@ (8004228 <HAL_DMA_Abort_IT+0x3ac>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d045      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a69      	ldr	r2, [pc, #420]	@ (800422c <HAL_DMA_Abort_IT+0x3b0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d040      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a68      	ldr	r2, [pc, #416]	@ (8004230 <HAL_DMA_Abort_IT+0x3b4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d03b      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a66      	ldr	r2, [pc, #408]	@ (8004234 <HAL_DMA_Abort_IT+0x3b8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d036      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a65      	ldr	r2, [pc, #404]	@ (8004238 <HAL_DMA_Abort_IT+0x3bc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d031      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a63      	ldr	r2, [pc, #396]	@ (800423c <HAL_DMA_Abort_IT+0x3c0>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d02c      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a62      	ldr	r2, [pc, #392]	@ (8004240 <HAL_DMA_Abort_IT+0x3c4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d027      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a60      	ldr	r2, [pc, #384]	@ (8004244 <HAL_DMA_Abort_IT+0x3c8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d022      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5f      	ldr	r2, [pc, #380]	@ (8004248 <HAL_DMA_Abort_IT+0x3cc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d01d      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a5d      	ldr	r2, [pc, #372]	@ (800424c <HAL_DMA_Abort_IT+0x3d0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d018      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a5c      	ldr	r2, [pc, #368]	@ (8004250 <HAL_DMA_Abort_IT+0x3d4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d013      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a5a      	ldr	r2, [pc, #360]	@ (8004254 <HAL_DMA_Abort_IT+0x3d8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00e      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a59      	ldr	r2, [pc, #356]	@ (8004258 <HAL_DMA_Abort_IT+0x3dc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d009      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a57      	ldr	r2, [pc, #348]	@ (800425c <HAL_DMA_Abort_IT+0x3e0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <HAL_DMA_Abort_IT+0x290>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a56      	ldr	r2, [pc, #344]	@ (8004260 <HAL_DMA_Abort_IT+0x3e4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d108      	bne.n	800411e <HAL_DMA_Abort_IT+0x2a2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e007      	b.n	800412e <HAL_DMA_Abort_IT+0x2b2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3c      	ldr	r2, [pc, #240]	@ (8004224 <HAL_DMA_Abort_IT+0x3a8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d072      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3a      	ldr	r2, [pc, #232]	@ (8004228 <HAL_DMA_Abort_IT+0x3ac>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d06d      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a39      	ldr	r2, [pc, #228]	@ (800422c <HAL_DMA_Abort_IT+0x3b0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d068      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a37      	ldr	r2, [pc, #220]	@ (8004230 <HAL_DMA_Abort_IT+0x3b4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d063      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a36      	ldr	r2, [pc, #216]	@ (8004234 <HAL_DMA_Abort_IT+0x3b8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d05e      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a34      	ldr	r2, [pc, #208]	@ (8004238 <HAL_DMA_Abort_IT+0x3bc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d059      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a33      	ldr	r2, [pc, #204]	@ (800423c <HAL_DMA_Abort_IT+0x3c0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d054      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a31      	ldr	r2, [pc, #196]	@ (8004240 <HAL_DMA_Abort_IT+0x3c4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d04f      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a30      	ldr	r2, [pc, #192]	@ (8004244 <HAL_DMA_Abort_IT+0x3c8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d04a      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2e      	ldr	r2, [pc, #184]	@ (8004248 <HAL_DMA_Abort_IT+0x3cc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d045      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a2d      	ldr	r2, [pc, #180]	@ (800424c <HAL_DMA_Abort_IT+0x3d0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d040      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a2b      	ldr	r2, [pc, #172]	@ (8004250 <HAL_DMA_Abort_IT+0x3d4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03b      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a2a      	ldr	r2, [pc, #168]	@ (8004254 <HAL_DMA_Abort_IT+0x3d8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d036      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a28      	ldr	r2, [pc, #160]	@ (8004258 <HAL_DMA_Abort_IT+0x3dc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d031      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a27      	ldr	r2, [pc, #156]	@ (800425c <HAL_DMA_Abort_IT+0x3e0>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d02c      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a25      	ldr	r2, [pc, #148]	@ (8004260 <HAL_DMA_Abort_IT+0x3e4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d027      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a24      	ldr	r2, [pc, #144]	@ (8004264 <HAL_DMA_Abort_IT+0x3e8>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d022      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a22      	ldr	r2, [pc, #136]	@ (8004268 <HAL_DMA_Abort_IT+0x3ec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01d      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a21      	ldr	r2, [pc, #132]	@ (800426c <HAL_DMA_Abort_IT+0x3f0>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d018      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <HAL_DMA_Abort_IT+0x3f4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d013      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_DMA_Abort_IT+0x3f8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d00e      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1c      	ldr	r2, [pc, #112]	@ (8004278 <HAL_DMA_Abort_IT+0x3fc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d009      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <HAL_DMA_Abort_IT+0x400>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d004      	beq.n	800421e <HAL_DMA_Abort_IT+0x3a2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_DMA_Abort_IT+0x404>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d132      	bne.n	8004284 <HAL_DMA_Abort_IT+0x408>
 800421e:	2301      	movs	r3, #1
 8004220:	e031      	b.n	8004286 <HAL_DMA_Abort_IT+0x40a>
 8004222:	bf00      	nop
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	58025408 	.word	0x58025408
 8004268:	5802541c 	.word	0x5802541c
 800426c:	58025430 	.word	0x58025430
 8004270:	58025444 	.word	0x58025444
 8004274:	58025458 	.word	0x58025458
 8004278:	5802546c 	.word	0x5802546c
 800427c:	58025480 	.word	0x58025480
 8004280:	58025494 	.word	0x58025494
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d028      	beq.n	80042dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004294:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004298:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	2201      	movs	r2, #1
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80042b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00c      	beq.n	80042dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop

08004308 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08a      	sub	sp, #40	@ 0x28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004314:	4b67      	ldr	r3, [pc, #412]	@ (80044b4 <HAL_DMA_IRQHandler+0x1ac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a67      	ldr	r2, [pc, #412]	@ (80044b8 <HAL_DMA_IRQHandler+0x1b0>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004326:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a5f      	ldr	r2, [pc, #380]	@ (80044bc <HAL_DMA_IRQHandler+0x1b4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d04a      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5d      	ldr	r2, [pc, #372]	@ (80044c0 <HAL_DMA_IRQHandler+0x1b8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d045      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5c      	ldr	r2, [pc, #368]	@ (80044c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d040      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a5a      	ldr	r2, [pc, #360]	@ (80044c8 <HAL_DMA_IRQHandler+0x1c0>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d03b      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a59      	ldr	r2, [pc, #356]	@ (80044cc <HAL_DMA_IRQHandler+0x1c4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d036      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a57      	ldr	r2, [pc, #348]	@ (80044d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d031      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a56      	ldr	r2, [pc, #344]	@ (80044d4 <HAL_DMA_IRQHandler+0x1cc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d02c      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a54      	ldr	r2, [pc, #336]	@ (80044d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d027      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a53      	ldr	r2, [pc, #332]	@ (80044dc <HAL_DMA_IRQHandler+0x1d4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d022      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a51      	ldr	r2, [pc, #324]	@ (80044e0 <HAL_DMA_IRQHandler+0x1d8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01d      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a50      	ldr	r2, [pc, #320]	@ (80044e4 <HAL_DMA_IRQHandler+0x1dc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d018      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4e      	ldr	r2, [pc, #312]	@ (80044e8 <HAL_DMA_IRQHandler+0x1e0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a4d      	ldr	r2, [pc, #308]	@ (80044ec <HAL_DMA_IRQHandler+0x1e4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d00e      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a4b      	ldr	r2, [pc, #300]	@ (80044f0 <HAL_DMA_IRQHandler+0x1e8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d009      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a4a      	ldr	r2, [pc, #296]	@ (80044f4 <HAL_DMA_IRQHandler+0x1ec>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d004      	beq.n	80043da <HAL_DMA_IRQHandler+0xd2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a48      	ldr	r2, [pc, #288]	@ (80044f8 <HAL_DMA_IRQHandler+0x1f0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d101      	bne.n	80043de <HAL_DMA_IRQHandler+0xd6>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 842b 	beq.w	8004c3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	2208      	movs	r2, #8
 80043f0:	409a      	lsls	r2, r3
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 80a2 	beq.w	8004540 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2e      	ldr	r2, [pc, #184]	@ (80044bc <HAL_DMA_IRQHandler+0x1b4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d04a      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_DMA_IRQHandler+0x1b8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d045      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2b      	ldr	r2, [pc, #172]	@ (80044c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d040      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2a      	ldr	r2, [pc, #168]	@ (80044c8 <HAL_DMA_IRQHandler+0x1c0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d03b      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a28      	ldr	r2, [pc, #160]	@ (80044cc <HAL_DMA_IRQHandler+0x1c4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d036      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a27      	ldr	r2, [pc, #156]	@ (80044d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d031      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a25      	ldr	r2, [pc, #148]	@ (80044d4 <HAL_DMA_IRQHandler+0x1cc>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d02c      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a24      	ldr	r2, [pc, #144]	@ (80044d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d027      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a22      	ldr	r2, [pc, #136]	@ (80044dc <HAL_DMA_IRQHandler+0x1d4>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <HAL_DMA_IRQHandler+0x1d8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d01d      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1f      	ldr	r2, [pc, #124]	@ (80044e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1e      	ldr	r2, [pc, #120]	@ (80044e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <HAL_DMA_IRQHandler+0x1e4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1b      	ldr	r2, [pc, #108]	@ (80044f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_DMA_IRQHandler+0x1ec>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_DMA_IRQHandler+0x194>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d12f      	bne.n	80044fc <HAL_DMA_IRQHandler+0x1f4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e02e      	b.n	8004510 <HAL_DMA_IRQHandler+0x208>
 80044b2:	bf00      	nop
 80044b4:	24000004 	.word	0x24000004
 80044b8:	1b4e81b5 	.word	0x1b4e81b5
 80044bc:	40020010 	.word	0x40020010
 80044c0:	40020028 	.word	0x40020028
 80044c4:	40020040 	.word	0x40020040
 80044c8:	40020058 	.word	0x40020058
 80044cc:	40020070 	.word	0x40020070
 80044d0:	40020088 	.word	0x40020088
 80044d4:	400200a0 	.word	0x400200a0
 80044d8:	400200b8 	.word	0x400200b8
 80044dc:	40020410 	.word	0x40020410
 80044e0:	40020428 	.word	0x40020428
 80044e4:	40020440 	.word	0x40020440
 80044e8:	40020458 	.word	0x40020458
 80044ec:	40020470 	.word	0x40020470
 80044f0:	40020488 	.word	0x40020488
 80044f4:	400204a0 	.word	0x400204a0
 80044f8:	400204b8 	.word	0x400204b8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	bf14      	ite	ne
 800450a:	2301      	movne	r3, #1
 800450c:	2300      	moveq	r3, #0
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	2208      	movs	r2, #8
 800452e:	409a      	lsls	r2, r3
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	f043 0201 	orr.w	r2, r3, #1
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d06e      	beq.n	8004634 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a69      	ldr	r2, [pc, #420]	@ (8004700 <HAL_DMA_IRQHandler+0x3f8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d04a      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a67      	ldr	r2, [pc, #412]	@ (8004704 <HAL_DMA_IRQHandler+0x3fc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d045      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a66      	ldr	r2, [pc, #408]	@ (8004708 <HAL_DMA_IRQHandler+0x400>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d040      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a64      	ldr	r2, [pc, #400]	@ (800470c <HAL_DMA_IRQHandler+0x404>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d03b      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a63      	ldr	r2, [pc, #396]	@ (8004710 <HAL_DMA_IRQHandler+0x408>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d036      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a61      	ldr	r2, [pc, #388]	@ (8004714 <HAL_DMA_IRQHandler+0x40c>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d031      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a60      	ldr	r2, [pc, #384]	@ (8004718 <HAL_DMA_IRQHandler+0x410>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02c      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5e      	ldr	r2, [pc, #376]	@ (800471c <HAL_DMA_IRQHandler+0x414>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d027      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5d      	ldr	r2, [pc, #372]	@ (8004720 <HAL_DMA_IRQHandler+0x418>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d022      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5b      	ldr	r2, [pc, #364]	@ (8004724 <HAL_DMA_IRQHandler+0x41c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d01d      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a5a      	ldr	r2, [pc, #360]	@ (8004728 <HAL_DMA_IRQHandler+0x420>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d018      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a58      	ldr	r2, [pc, #352]	@ (800472c <HAL_DMA_IRQHandler+0x424>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_DMA_IRQHandler+0x428>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00e      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a55      	ldr	r2, [pc, #340]	@ (8004734 <HAL_DMA_IRQHandler+0x42c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d009      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a54      	ldr	r2, [pc, #336]	@ (8004738 <HAL_DMA_IRQHandler+0x430>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x2ee>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a52      	ldr	r2, [pc, #328]	@ (800473c <HAL_DMA_IRQHandler+0x434>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10a      	bne.n	800460c <HAL_DMA_IRQHandler+0x304>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e003      	b.n	8004614 <HAL_DMA_IRQHandler+0x30c>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2300      	movs	r3, #0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00d      	beq.n	8004634 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	2201      	movs	r2, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800462c:	f043 0202 	orr.w	r2, r3, #2
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	2204      	movs	r2, #4
 800463e:	409a      	lsls	r2, r3
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 808f 	beq.w	8004768 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2c      	ldr	r2, [pc, #176]	@ (8004700 <HAL_DMA_IRQHandler+0x3f8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d04a      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a2a      	ldr	r2, [pc, #168]	@ (8004704 <HAL_DMA_IRQHandler+0x3fc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d045      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a29      	ldr	r2, [pc, #164]	@ (8004708 <HAL_DMA_IRQHandler+0x400>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d040      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a27      	ldr	r2, [pc, #156]	@ (800470c <HAL_DMA_IRQHandler+0x404>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d03b      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a26      	ldr	r2, [pc, #152]	@ (8004710 <HAL_DMA_IRQHandler+0x408>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d036      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a24      	ldr	r2, [pc, #144]	@ (8004714 <HAL_DMA_IRQHandler+0x40c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d031      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a23      	ldr	r2, [pc, #140]	@ (8004718 <HAL_DMA_IRQHandler+0x410>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d02c      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a21      	ldr	r2, [pc, #132]	@ (800471c <HAL_DMA_IRQHandler+0x414>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d027      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <HAL_DMA_IRQHandler+0x418>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_DMA_IRQHandler+0x41c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <HAL_DMA_IRQHandler+0x420>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <HAL_DMA_IRQHandler+0x424>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004730 <HAL_DMA_IRQHandler+0x428>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_DMA_IRQHandler+0x42c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <HAL_DMA_IRQHandler+0x430>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_DMA_IRQHandler+0x3e2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HAL_DMA_IRQHandler+0x434>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d12a      	bne.n	8004740 <HAL_DMA_IRQHandler+0x438>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf14      	ite	ne
 80046f8:	2301      	movne	r3, #1
 80046fa:	2300      	moveq	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e023      	b.n	8004748 <HAL_DMA_IRQHandler+0x440>
 8004700:	40020010 	.word	0x40020010
 8004704:	40020028 	.word	0x40020028
 8004708:	40020040 	.word	0x40020040
 800470c:	40020058 	.word	0x40020058
 8004710:	40020070 	.word	0x40020070
 8004714:	40020088 	.word	0x40020088
 8004718:	400200a0 	.word	0x400200a0
 800471c:	400200b8 	.word	0x400200b8
 8004720:	40020410 	.word	0x40020410
 8004724:	40020428 	.word	0x40020428
 8004728:	40020440 	.word	0x40020440
 800472c:	40020458 	.word	0x40020458
 8004730:	40020470 	.word	0x40020470
 8004734:	40020488 	.word	0x40020488
 8004738:	400204a0 	.word	0x400204a0
 800473c:	400204b8 	.word	0x400204b8
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2300      	movs	r3, #0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2204      	movs	r2, #4
 8004756:	409a      	lsls	r2, r3
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004760:	f043 0204 	orr.w	r2, r3, #4
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2210      	movs	r2, #16
 8004772:	409a      	lsls	r2, r3
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4013      	ands	r3, r2
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a6 	beq.w	80048ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a85      	ldr	r2, [pc, #532]	@ (8004998 <HAL_DMA_IRQHandler+0x690>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d04a      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a83      	ldr	r2, [pc, #524]	@ (800499c <HAL_DMA_IRQHandler+0x694>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d045      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a82      	ldr	r2, [pc, #520]	@ (80049a0 <HAL_DMA_IRQHandler+0x698>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d040      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a80      	ldr	r2, [pc, #512]	@ (80049a4 <HAL_DMA_IRQHandler+0x69c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d03b      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7f      	ldr	r2, [pc, #508]	@ (80049a8 <HAL_DMA_IRQHandler+0x6a0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d036      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a7d      	ldr	r2, [pc, #500]	@ (80049ac <HAL_DMA_IRQHandler+0x6a4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d031      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a7c      	ldr	r2, [pc, #496]	@ (80049b0 <HAL_DMA_IRQHandler+0x6a8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d02c      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a7a      	ldr	r2, [pc, #488]	@ (80049b4 <HAL_DMA_IRQHandler+0x6ac>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d027      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a79      	ldr	r2, [pc, #484]	@ (80049b8 <HAL_DMA_IRQHandler+0x6b0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d022      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a77      	ldr	r2, [pc, #476]	@ (80049bc <HAL_DMA_IRQHandler+0x6b4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01d      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a76      	ldr	r2, [pc, #472]	@ (80049c0 <HAL_DMA_IRQHandler+0x6b8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d018      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a74      	ldr	r2, [pc, #464]	@ (80049c4 <HAL_DMA_IRQHandler+0x6bc>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d013      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a73      	ldr	r2, [pc, #460]	@ (80049c8 <HAL_DMA_IRQHandler+0x6c0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00e      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a71      	ldr	r2, [pc, #452]	@ (80049cc <HAL_DMA_IRQHandler+0x6c4>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d009      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a70      	ldr	r2, [pc, #448]	@ (80049d0 <HAL_DMA_IRQHandler+0x6c8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d004      	beq.n	800481e <HAL_DMA_IRQHandler+0x516>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a6e      	ldr	r2, [pc, #440]	@ (80049d4 <HAL_DMA_IRQHandler+0x6cc>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d10a      	bne.n	8004834 <HAL_DMA_IRQHandler+0x52c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf14      	ite	ne
 800482c:	2301      	movne	r3, #1
 800482e:	2300      	moveq	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	e009      	b.n	8004848 <HAL_DMA_IRQHandler+0x540>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf14      	ite	ne
 8004842:	2301      	movne	r3, #1
 8004844:	2300      	moveq	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	d03e      	beq.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	f003 031f 	and.w	r3, r3, #31
 8004854:	2210      	movs	r2, #16
 8004856:	409a      	lsls	r2, r3
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d018      	beq.n	800489c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d108      	bne.n	800488a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d024      	beq.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
 8004888:	e01f      	b.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01b      	beq.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
 800489a:	e016      	b.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d107      	bne.n	80048ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0208 	bic.w	r2, r2, #8
 80048b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2220      	movs	r2, #32
 80048d4:	409a      	lsls	r2, r3
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8110 	beq.w	8004b00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004998 <HAL_DMA_IRQHandler+0x690>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d04a      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a2b      	ldr	r2, [pc, #172]	@ (800499c <HAL_DMA_IRQHandler+0x694>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d045      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a29      	ldr	r2, [pc, #164]	@ (80049a0 <HAL_DMA_IRQHandler+0x698>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d040      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a28      	ldr	r2, [pc, #160]	@ (80049a4 <HAL_DMA_IRQHandler+0x69c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d03b      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a26      	ldr	r2, [pc, #152]	@ (80049a8 <HAL_DMA_IRQHandler+0x6a0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d036      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a25      	ldr	r2, [pc, #148]	@ (80049ac <HAL_DMA_IRQHandler+0x6a4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d031      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a23      	ldr	r2, [pc, #140]	@ (80049b0 <HAL_DMA_IRQHandler+0x6a8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d02c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <HAL_DMA_IRQHandler+0x6ac>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d027      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a20      	ldr	r2, [pc, #128]	@ (80049b8 <HAL_DMA_IRQHandler+0x6b0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d022      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a1f      	ldr	r2, [pc, #124]	@ (80049bc <HAL_DMA_IRQHandler+0x6b4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d01d      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a1d      	ldr	r2, [pc, #116]	@ (80049c0 <HAL_DMA_IRQHandler+0x6b8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d018      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1c      	ldr	r2, [pc, #112]	@ (80049c4 <HAL_DMA_IRQHandler+0x6bc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d013      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1a      	ldr	r2, [pc, #104]	@ (80049c8 <HAL_DMA_IRQHandler+0x6c0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00e      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_DMA_IRQHandler+0x6c4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d009      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <HAL_DMA_IRQHandler+0x6c8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d004      	beq.n	8004980 <HAL_DMA_IRQHandler+0x678>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a16      	ldr	r2, [pc, #88]	@ (80049d4 <HAL_DMA_IRQHandler+0x6cc>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d12b      	bne.n	80049d8 <HAL_DMA_IRQHandler+0x6d0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b00      	cmp	r3, #0
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e02a      	b.n	80049ec <HAL_DMA_IRQHandler+0x6e4>
 8004996:	bf00      	nop
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8087 	beq.w	8004b00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2220      	movs	r2, #32
 80049fc:	409a      	lsls	r2, r3
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d139      	bne.n	8004a82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0216 	bic.w	r2, r2, #22
 8004a1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d103      	bne.n	8004a3e <HAL_DMA_IRQHandler+0x736>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0208 	bic.w	r2, r2, #8
 8004a4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	223f      	movs	r2, #63	@ 0x3f
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 834a 	beq.w	800510c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
          }
          return;
 8004a80:	e344      	b.n	800510c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02c      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	4798      	blx	r3
 8004aae:	e027      	b.n	8004b00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d023      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	4798      	blx	r3
 8004ac0:	e01e      	b.n	8004b00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10f      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0210 	bic.w	r2, r2, #16
 8004ade:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8306 	beq.w	8005116 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8088 	beq.w	8004c28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7a      	ldr	r2, [pc, #488]	@ (8004d10 <HAL_DMA_IRQHandler+0xa08>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d04a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a79      	ldr	r2, [pc, #484]	@ (8004d14 <HAL_DMA_IRQHandler+0xa0c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d045      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a77      	ldr	r2, [pc, #476]	@ (8004d18 <HAL_DMA_IRQHandler+0xa10>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d040      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a76      	ldr	r2, [pc, #472]	@ (8004d1c <HAL_DMA_IRQHandler+0xa14>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d03b      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a74      	ldr	r2, [pc, #464]	@ (8004d20 <HAL_DMA_IRQHandler+0xa18>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d036      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a73      	ldr	r2, [pc, #460]	@ (8004d24 <HAL_DMA_IRQHandler+0xa1c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d031      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a71      	ldr	r2, [pc, #452]	@ (8004d28 <HAL_DMA_IRQHandler+0xa20>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02c      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a70      	ldr	r2, [pc, #448]	@ (8004d2c <HAL_DMA_IRQHandler+0xa24>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d027      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a6e      	ldr	r2, [pc, #440]	@ (8004d30 <HAL_DMA_IRQHandler+0xa28>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a6d      	ldr	r2, [pc, #436]	@ (8004d34 <HAL_DMA_IRQHandler+0xa2c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d01d      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6b      	ldr	r2, [pc, #428]	@ (8004d38 <HAL_DMA_IRQHandler+0xa30>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6a      	ldr	r2, [pc, #424]	@ (8004d3c <HAL_DMA_IRQHandler+0xa34>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a68      	ldr	r2, [pc, #416]	@ (8004d40 <HAL_DMA_IRQHandler+0xa38>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a67      	ldr	r2, [pc, #412]	@ (8004d44 <HAL_DMA_IRQHandler+0xa3c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a65      	ldr	r2, [pc, #404]	@ (8004d48 <HAL_DMA_IRQHandler+0xa40>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x8b8>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a64      	ldr	r2, [pc, #400]	@ (8004d4c <HAL_DMA_IRQHandler+0xa44>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d108      	bne.n	8004bd2 <HAL_DMA_IRQHandler+0x8ca>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 0201 	bic.w	r2, r2, #1
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e007      	b.n	8004be2 <HAL_DMA_IRQHandler+0x8da>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0201 	bic.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3301      	adds	r3, #1
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d307      	bcc.n	8004bfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1f2      	bne.n	8004be2 <HAL_DMA_IRQHandler+0x8da>
 8004bfc:	e000      	b.n	8004c00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004bfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d004      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2203      	movs	r2, #3
 8004c12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004c16:	e003      	b.n	8004c20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8272 	beq.w	8005116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	4798      	blx	r3
 8004c3a:	e26c      	b.n	8005116 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a43      	ldr	r2, [pc, #268]	@ (8004d50 <HAL_DMA_IRQHandler+0xa48>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d022      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a42      	ldr	r2, [pc, #264]	@ (8004d54 <HAL_DMA_IRQHandler+0xa4c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d01d      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a40      	ldr	r2, [pc, #256]	@ (8004d58 <HAL_DMA_IRQHandler+0xa50>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d5c <HAL_DMA_IRQHandler+0xa54>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3d      	ldr	r2, [pc, #244]	@ (8004d60 <HAL_DMA_IRQHandler+0xa58>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3c      	ldr	r2, [pc, #240]	@ (8004d64 <HAL_DMA_IRQHandler+0xa5c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004d68 <HAL_DMA_IRQHandler+0xa60>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_DMA_IRQHandler+0x984>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a39      	ldr	r2, [pc, #228]	@ (8004d6c <HAL_DMA_IRQHandler+0xa64>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d101      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x988>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e000      	b.n	8004c92 <HAL_DMA_IRQHandler+0x98a>
 8004c90:	2300      	movs	r3, #0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 823f 	beq.w	8005116 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2204      	movs	r2, #4
 8004caa:	409a      	lsls	r2, r3
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80cd 	beq.w	8004e50 <HAL_DMA_IRQHandler+0xb48>
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 80c7 	beq.w	8004e50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2204      	movs	r2, #4
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d049      	beq.n	8004d70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 8210 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cf8:	e20a      	b.n	8005110 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8206 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d0c:	e200      	b.n	8005110 <HAL_DMA_IRQHandler+0xe08>
 8004d0e:	bf00      	nop
 8004d10:	40020010 	.word	0x40020010
 8004d14:	40020028 	.word	0x40020028
 8004d18:	40020040 	.word	0x40020040
 8004d1c:	40020058 	.word	0x40020058
 8004d20:	40020070 	.word	0x40020070
 8004d24:	40020088 	.word	0x40020088
 8004d28:	400200a0 	.word	0x400200a0
 8004d2c:	400200b8 	.word	0x400200b8
 8004d30:	40020410 	.word	0x40020410
 8004d34:	40020428 	.word	0x40020428
 8004d38:	40020440 	.word	0x40020440
 8004d3c:	40020458 	.word	0x40020458
 8004d40:	40020470 	.word	0x40020470
 8004d44:	40020488 	.word	0x40020488
 8004d48:	400204a0 	.word	0x400204a0
 8004d4c:	400204b8 	.word	0x400204b8
 8004d50:	58025408 	.word	0x58025408
 8004d54:	5802541c 	.word	0x5802541c
 8004d58:	58025430 	.word	0x58025430
 8004d5c:	58025444 	.word	0x58025444
 8004d60:	58025458 	.word	0x58025458
 8004d64:	5802546c 	.word	0x5802546c
 8004d68:	58025480 	.word	0x58025480
 8004d6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d160      	bne.n	8004e3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f7c <HAL_DMA_IRQHandler+0xc74>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d04a      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a7d      	ldr	r2, [pc, #500]	@ (8004f80 <HAL_DMA_IRQHandler+0xc78>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d045      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a7c      	ldr	r2, [pc, #496]	@ (8004f84 <HAL_DMA_IRQHandler+0xc7c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d040      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f88 <HAL_DMA_IRQHandler+0xc80>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d03b      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a79      	ldr	r2, [pc, #484]	@ (8004f8c <HAL_DMA_IRQHandler+0xc84>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d036      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a77      	ldr	r2, [pc, #476]	@ (8004f90 <HAL_DMA_IRQHandler+0xc88>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d031      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a76      	ldr	r2, [pc, #472]	@ (8004f94 <HAL_DMA_IRQHandler+0xc8c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d02c      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a74      	ldr	r2, [pc, #464]	@ (8004f98 <HAL_DMA_IRQHandler+0xc90>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d027      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a73      	ldr	r2, [pc, #460]	@ (8004f9c <HAL_DMA_IRQHandler+0xc94>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d022      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a71      	ldr	r2, [pc, #452]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc98>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d01d      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a70      	ldr	r2, [pc, #448]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d018      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a6e      	ldr	r2, [pc, #440]	@ (8004fa8 <HAL_DMA_IRQHandler+0xca0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d013      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a6d      	ldr	r2, [pc, #436]	@ (8004fac <HAL_DMA_IRQHandler+0xca4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb0 <HAL_DMA_IRQHandler+0xca8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d009      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8004fb4 <HAL_DMA_IRQHandler+0xcac>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_DMA_IRQHandler+0xb12>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a68      	ldr	r2, [pc, #416]	@ (8004fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d108      	bne.n	8004e2c <HAL_DMA_IRQHandler+0xb24>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0208 	bic.w	r2, r2, #8
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e007      	b.n	8004e3c <HAL_DMA_IRQHandler+0xb34>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0204 	bic.w	r2, r2, #4
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8165 	beq.w	8005110 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e4e:	e15f      	b.n	8005110 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2202      	movs	r2, #2
 8004e5a:	409a      	lsls	r2, r3
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80c5 	beq.w	8004ff0 <HAL_DMA_IRQHandler+0xce8>
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f000 80bf 	beq.w	8004ff0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	409a      	lsls	r2, r3
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d018      	beq.n	8004ebe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 813a 	beq.w	8005114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ea8:	e134      	b.n	8005114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 8130 	beq.w	8005114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ebc:	e12a      	b.n	8005114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 8089 	bne.w	8004fdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <HAL_DMA_IRQHandler+0xc74>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d04a      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	@ (8004f80 <HAL_DMA_IRQHandler+0xc78>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d045      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <HAL_DMA_IRQHandler+0xc7c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d040      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a26      	ldr	r2, [pc, #152]	@ (8004f88 <HAL_DMA_IRQHandler+0xc80>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d03b      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a25      	ldr	r2, [pc, #148]	@ (8004f8c <HAL_DMA_IRQHandler+0xc84>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d036      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a23      	ldr	r2, [pc, #140]	@ (8004f90 <HAL_DMA_IRQHandler+0xc88>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d031      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_DMA_IRQHandler+0xc8c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d02c      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a20      	ldr	r2, [pc, #128]	@ (8004f98 <HAL_DMA_IRQHandler+0xc90>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d027      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <HAL_DMA_IRQHandler+0xc94>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d022      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa0 <HAL_DMA_IRQHandler+0xc98>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d01d      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa4 <HAL_DMA_IRQHandler+0xc9c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fa8 <HAL_DMA_IRQHandler+0xca0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d013      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <HAL_DMA_IRQHandler+0xca4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a17      	ldr	r2, [pc, #92]	@ (8004fb0 <HAL_DMA_IRQHandler+0xca8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <HAL_DMA_IRQHandler+0xcac>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_DMA_IRQHandler+0xc62>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <HAL_DMA_IRQHandler+0xcb0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d128      	bne.n	8004fbc <HAL_DMA_IRQHandler+0xcb4>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0214 	bic.w	r2, r2, #20
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	e027      	b.n	8004fcc <HAL_DMA_IRQHandler+0xcc4>
 8004f7c:	40020010 	.word	0x40020010
 8004f80:	40020028 	.word	0x40020028
 8004f84:	40020040 	.word	0x40020040
 8004f88:	40020058 	.word	0x40020058
 8004f8c:	40020070 	.word	0x40020070
 8004f90:	40020088 	.word	0x40020088
 8004f94:	400200a0 	.word	0x400200a0
 8004f98:	400200b8 	.word	0x400200b8
 8004f9c:	40020410 	.word	0x40020410
 8004fa0:	40020428 	.word	0x40020428
 8004fa4:	40020440 	.word	0x40020440
 8004fa8:	40020458 	.word	0x40020458
 8004fac:	40020470 	.word	0x40020470
 8004fb0:	40020488 	.word	0x40020488
 8004fb4:	400204a0 	.word	0x400204a0
 8004fb8:	400204b8 	.word	0x400204b8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 020a 	bic.w	r2, r2, #10
 8004fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8097 	beq.w	8005114 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fee:	e091      	b.n	8005114 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ff4:	f003 031f 	and.w	r3, r3, #31
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8088 	beq.w	8005116 <HAL_DMA_IRQHandler+0xe0e>
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8082 	beq.w	8005116 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a41      	ldr	r2, [pc, #260]	@ (800511c <HAL_DMA_IRQHandler+0xe14>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d04a      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a3f      	ldr	r2, [pc, #252]	@ (8005120 <HAL_DMA_IRQHandler+0xe18>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d045      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3e      	ldr	r2, [pc, #248]	@ (8005124 <HAL_DMA_IRQHandler+0xe1c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d040      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a3c      	ldr	r2, [pc, #240]	@ (8005128 <HAL_DMA_IRQHandler+0xe20>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d03b      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <HAL_DMA_IRQHandler+0xe24>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d036      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a39      	ldr	r2, [pc, #228]	@ (8005130 <HAL_DMA_IRQHandler+0xe28>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d031      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a38      	ldr	r2, [pc, #224]	@ (8005134 <HAL_DMA_IRQHandler+0xe2c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d02c      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a36      	ldr	r2, [pc, #216]	@ (8005138 <HAL_DMA_IRQHandler+0xe30>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d027      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a35      	ldr	r2, [pc, #212]	@ (800513c <HAL_DMA_IRQHandler+0xe34>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d022      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a33      	ldr	r2, [pc, #204]	@ (8005140 <HAL_DMA_IRQHandler+0xe38>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01d      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a32      	ldr	r2, [pc, #200]	@ (8005144 <HAL_DMA_IRQHandler+0xe3c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d018      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a30      	ldr	r2, [pc, #192]	@ (8005148 <HAL_DMA_IRQHandler+0xe40>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2f      	ldr	r2, [pc, #188]	@ (800514c <HAL_DMA_IRQHandler+0xe44>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00e      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2d      	ldr	r2, [pc, #180]	@ (8005150 <HAL_DMA_IRQHandler+0xe48>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d009      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005154 <HAL_DMA_IRQHandler+0xe4c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d004      	beq.n	80050b2 <HAL_DMA_IRQHandler+0xdaa>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005158 <HAL_DMA_IRQHandler+0xe50>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d108      	bne.n	80050c4 <HAL_DMA_IRQHandler+0xdbc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 021c 	bic.w	r2, r2, #28
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <HAL_DMA_IRQHandler+0xdcc>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020e 	bic.w	r2, r2, #14
 80050d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	2201      	movs	r2, #1
 80050de:	409a      	lsls	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4798      	blx	r3
 800510a:	e004      	b.n	8005116 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800510c:	bf00      	nop
 800510e:	e002      	b.n	8005116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005110:	bf00      	nop
 8005112:	e000      	b.n	8005116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005114:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005116:	3728      	adds	r7, #40	@ 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
 8005124:	40020040 	.word	0x40020040
 8005128:	40020058 	.word	0x40020058
 800512c:	40020070 	.word	0x40020070
 8005130:	40020088 	.word	0x40020088
 8005134:	400200a0 	.word	0x400200a0
 8005138:	400200b8 	.word	0x400200b8
 800513c:	40020410 	.word	0x40020410
 8005140:	40020428 	.word	0x40020428
 8005144:	40020440 	.word	0x40020440
 8005148:	40020458 	.word	0x40020458
 800514c:	40020470 	.word	0x40020470
 8005150:	40020488 	.word	0x40020488
 8005154:	400204a0 	.word	0x400204a0
 8005158:	400204b8 	.word	0x400204b8

0800515c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005186:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a7f      	ldr	r2, [pc, #508]	@ (8005390 <DMA_SetConfig+0x21c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d072      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a7d      	ldr	r2, [pc, #500]	@ (8005394 <DMA_SetConfig+0x220>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d06d      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005398 <DMA_SetConfig+0x224>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d068      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a7a      	ldr	r2, [pc, #488]	@ (800539c <DMA_SetConfig+0x228>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d063      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a79      	ldr	r2, [pc, #484]	@ (80053a0 <DMA_SetConfig+0x22c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d05e      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a77      	ldr	r2, [pc, #476]	@ (80053a4 <DMA_SetConfig+0x230>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d059      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a76      	ldr	r2, [pc, #472]	@ (80053a8 <DMA_SetConfig+0x234>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d054      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a74      	ldr	r2, [pc, #464]	@ (80053ac <DMA_SetConfig+0x238>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d04f      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a73      	ldr	r2, [pc, #460]	@ (80053b0 <DMA_SetConfig+0x23c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d04a      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a71      	ldr	r2, [pc, #452]	@ (80053b4 <DMA_SetConfig+0x240>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d045      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a70      	ldr	r2, [pc, #448]	@ (80053b8 <DMA_SetConfig+0x244>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d040      	beq.n	800527e <DMA_SetConfig+0x10a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6e      	ldr	r2, [pc, #440]	@ (80053bc <DMA_SetConfig+0x248>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d03b      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a6d      	ldr	r2, [pc, #436]	@ (80053c0 <DMA_SetConfig+0x24c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d036      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a6b      	ldr	r2, [pc, #428]	@ (80053c4 <DMA_SetConfig+0x250>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <DMA_SetConfig+0x10a>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6a      	ldr	r2, [pc, #424]	@ (80053c8 <DMA_SetConfig+0x254>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d02c      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a68      	ldr	r2, [pc, #416]	@ (80053cc <DMA_SetConfig+0x258>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d027      	beq.n	800527e <DMA_SetConfig+0x10a>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a67      	ldr	r2, [pc, #412]	@ (80053d0 <DMA_SetConfig+0x25c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a65      	ldr	r2, [pc, #404]	@ (80053d4 <DMA_SetConfig+0x260>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a64      	ldr	r2, [pc, #400]	@ (80053d8 <DMA_SetConfig+0x264>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <DMA_SetConfig+0x10a>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a62      	ldr	r2, [pc, #392]	@ (80053dc <DMA_SetConfig+0x268>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a61      	ldr	r2, [pc, #388]	@ (80053e0 <DMA_SetConfig+0x26c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a5f      	ldr	r2, [pc, #380]	@ (80053e4 <DMA_SetConfig+0x270>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <DMA_SetConfig+0x10a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a5e      	ldr	r2, [pc, #376]	@ (80053e8 <DMA_SetConfig+0x274>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <DMA_SetConfig+0x10a>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5c      	ldr	r2, [pc, #368]	@ (80053ec <DMA_SetConfig+0x278>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <DMA_SetConfig+0x10e>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <DMA_SetConfig+0x110>
 8005282:	2300      	movs	r3, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005290:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a39      	ldr	r2, [pc, #228]	@ (8005390 <DMA_SetConfig+0x21c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d04a      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a38      	ldr	r2, [pc, #224]	@ (8005394 <DMA_SetConfig+0x220>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d045      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a36      	ldr	r2, [pc, #216]	@ (8005398 <DMA_SetConfig+0x224>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d040      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a35      	ldr	r2, [pc, #212]	@ (800539c <DMA_SetConfig+0x228>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d03b      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a33      	ldr	r2, [pc, #204]	@ (80053a0 <DMA_SetConfig+0x22c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d036      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a32      	ldr	r2, [pc, #200]	@ (80053a4 <DMA_SetConfig+0x230>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d031      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a30      	ldr	r2, [pc, #192]	@ (80053a8 <DMA_SetConfig+0x234>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d02c      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a2f      	ldr	r2, [pc, #188]	@ (80053ac <DMA_SetConfig+0x238>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d027      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a2d      	ldr	r2, [pc, #180]	@ (80053b0 <DMA_SetConfig+0x23c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d022      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a2c      	ldr	r2, [pc, #176]	@ (80053b4 <DMA_SetConfig+0x240>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d01d      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2a      	ldr	r2, [pc, #168]	@ (80053b8 <DMA_SetConfig+0x244>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d018      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a29      	ldr	r2, [pc, #164]	@ (80053bc <DMA_SetConfig+0x248>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a27      	ldr	r2, [pc, #156]	@ (80053c0 <DMA_SetConfig+0x24c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a26      	ldr	r2, [pc, #152]	@ (80053c4 <DMA_SetConfig+0x250>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a24      	ldr	r2, [pc, #144]	@ (80053c8 <DMA_SetConfig+0x254>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <DMA_SetConfig+0x1d0>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a23      	ldr	r2, [pc, #140]	@ (80053cc <DMA_SetConfig+0x258>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <DMA_SetConfig+0x1d4>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <DMA_SetConfig+0x1d6>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d059      	beq.n	8005402 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	223f      	movs	r2, #63	@ 0x3f
 8005358:	409a      	lsls	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800536c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	2b40      	cmp	r3, #64	@ 0x40
 800537c:	d138      	bne.n	80053f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800538e:	e086      	b.n	800549e <DMA_SetConfig+0x32a>
 8005390:	40020010 	.word	0x40020010
 8005394:	40020028 	.word	0x40020028
 8005398:	40020040 	.word	0x40020040
 800539c:	40020058 	.word	0x40020058
 80053a0:	40020070 	.word	0x40020070
 80053a4:	40020088 	.word	0x40020088
 80053a8:	400200a0 	.word	0x400200a0
 80053ac:	400200b8 	.word	0x400200b8
 80053b0:	40020410 	.word	0x40020410
 80053b4:	40020428 	.word	0x40020428
 80053b8:	40020440 	.word	0x40020440
 80053bc:	40020458 	.word	0x40020458
 80053c0:	40020470 	.word	0x40020470
 80053c4:	40020488 	.word	0x40020488
 80053c8:	400204a0 	.word	0x400204a0
 80053cc:	400204b8 	.word	0x400204b8
 80053d0:	58025408 	.word	0x58025408
 80053d4:	5802541c 	.word	0x5802541c
 80053d8:	58025430 	.word	0x58025430
 80053dc:	58025444 	.word	0x58025444
 80053e0:	58025458 	.word	0x58025458
 80053e4:	5802546c 	.word	0x5802546c
 80053e8:	58025480 	.word	0x58025480
 80053ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60da      	str	r2, [r3, #12]
}
 8005400:	e04d      	b.n	800549e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a29      	ldr	r2, [pc, #164]	@ (80054ac <DMA_SetConfig+0x338>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a27      	ldr	r2, [pc, #156]	@ (80054b0 <DMA_SetConfig+0x33c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a26      	ldr	r2, [pc, #152]	@ (80054b4 <DMA_SetConfig+0x340>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a24      	ldr	r2, [pc, #144]	@ (80054b8 <DMA_SetConfig+0x344>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a23      	ldr	r2, [pc, #140]	@ (80054bc <DMA_SetConfig+0x348>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a21      	ldr	r2, [pc, #132]	@ (80054c0 <DMA_SetConfig+0x34c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <DMA_SetConfig+0x2de>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a20      	ldr	r2, [pc, #128]	@ (80054c4 <DMA_SetConfig+0x350>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <DMA_SetConfig+0x2de>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <DMA_SetConfig+0x354>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <DMA_SetConfig+0x2e2>
 8005452:	2301      	movs	r3, #1
 8005454:	e000      	b.n	8005458 <DMA_SetConfig+0x2e4>
 8005456:	2300      	movs	r3, #0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d020      	beq.n	800549e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	683a      	ldr	r2, [r7, #0]
 8005472:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b40      	cmp	r3, #64	@ 0x40
 800547a:	d108      	bne.n	800548e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	60da      	str	r2, [r3, #12]
}
 800548c:	e007      	b.n	800549e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
}
 800549e:	bf00      	nop
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	58025408 	.word	0x58025408
 80054b0:	5802541c 	.word	0x5802541c
 80054b4:	58025430 	.word	0x58025430
 80054b8:	58025444 	.word	0x58025444
 80054bc:	58025458 	.word	0x58025458
 80054c0:	5802546c 	.word	0x5802546c
 80054c4:	58025480 	.word	0x58025480
 80054c8:	58025494 	.word	0x58025494

080054cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a42      	ldr	r2, [pc, #264]	@ (80055e4 <DMA_CalcBaseAndBitshift+0x118>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d04a      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a41      	ldr	r2, [pc, #260]	@ (80055e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d045      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a3f      	ldr	r2, [pc, #252]	@ (80055ec <DMA_CalcBaseAndBitshift+0x120>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d040      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a3e      	ldr	r2, [pc, #248]	@ (80055f0 <DMA_CalcBaseAndBitshift+0x124>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d03b      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3c      	ldr	r2, [pc, #240]	@ (80055f4 <DMA_CalcBaseAndBitshift+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d036      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3b      	ldr	r2, [pc, #236]	@ (80055f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d031      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a39      	ldr	r2, [pc, #228]	@ (80055fc <DMA_CalcBaseAndBitshift+0x130>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d02c      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a38      	ldr	r2, [pc, #224]	@ (8005600 <DMA_CalcBaseAndBitshift+0x134>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d027      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a36      	ldr	r2, [pc, #216]	@ (8005604 <DMA_CalcBaseAndBitshift+0x138>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d022      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a35      	ldr	r2, [pc, #212]	@ (8005608 <DMA_CalcBaseAndBitshift+0x13c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d01d      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a33      	ldr	r2, [pc, #204]	@ (800560c <DMA_CalcBaseAndBitshift+0x140>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d018      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a32      	ldr	r2, [pc, #200]	@ (8005610 <DMA_CalcBaseAndBitshift+0x144>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d013      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a30      	ldr	r2, [pc, #192]	@ (8005614 <DMA_CalcBaseAndBitshift+0x148>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d00e      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a2f      	ldr	r2, [pc, #188]	@ (8005618 <DMA_CalcBaseAndBitshift+0x14c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d009      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a2d      	ldr	r2, [pc, #180]	@ (800561c <DMA_CalcBaseAndBitshift+0x150>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <DMA_CalcBaseAndBitshift+0xa8>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <DMA_CalcBaseAndBitshift+0x154>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <DMA_CalcBaseAndBitshift+0xac>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <DMA_CalcBaseAndBitshift+0xae>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d024      	beq.n	80055c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b2db      	uxtb	r3, r3
 8005584:	3b10      	subs	r3, #16
 8005586:	4a27      	ldr	r2, [pc, #156]	@ (8005624 <DMA_CalcBaseAndBitshift+0x158>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	091b      	lsrs	r3, r3, #4
 800558e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0307 	and.w	r3, r3, #7
 8005596:	4a24      	ldr	r2, [pc, #144]	@ (8005628 <DMA_CalcBaseAndBitshift+0x15c>)
 8005598:	5cd3      	ldrb	r3, [r2, r3]
 800559a:	461a      	mov	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b03      	cmp	r3, #3
 80055a4:	d908      	bls.n	80055b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b1f      	ldr	r3, [pc, #124]	@ (800562c <DMA_CalcBaseAndBitshift+0x160>)
 80055ae:	4013      	ands	r3, r2
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80055b6:	e00d      	b.n	80055d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	4b1b      	ldr	r3, [pc, #108]	@ (800562c <DMA_CalcBaseAndBitshift+0x160>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80055c6:	e005      	b.n	80055d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
 8005624:	aaaaaaab 	.word	0xaaaaaaab
 8005628:	08010628 	.word	0x08010628
 800562c:	fffffc00 	.word	0xfffffc00

08005630 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d120      	bne.n	8005686 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	2b03      	cmp	r3, #3
 800564a:	d858      	bhi.n	80056fe <DMA_CheckFifoParam+0xce>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <DMA_CheckFifoParam+0x24>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	08005665 	.word	0x08005665
 8005658:	08005677 	.word	0x08005677
 800565c:	08005665 	.word	0x08005665
 8005660:	080056ff 	.word	0x080056ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d048      	beq.n	8005702 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005674:	e045      	b.n	8005702 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800567e:	d142      	bne.n	8005706 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005684:	e03f      	b.n	8005706 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800568e:	d123      	bne.n	80056d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005694:	2b03      	cmp	r3, #3
 8005696:	d838      	bhi.n	800570a <DMA_CheckFifoParam+0xda>
 8005698:	a201      	add	r2, pc, #4	@ (adr r2, 80056a0 <DMA_CheckFifoParam+0x70>)
 800569a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569e:	bf00      	nop
 80056a0:	080056b1 	.word	0x080056b1
 80056a4:	080056b7 	.word	0x080056b7
 80056a8:	080056b1 	.word	0x080056b1
 80056ac:	080056c9 	.word	0x080056c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
        break;
 80056b4:	e030      	b.n	8005718 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d025      	beq.n	800570e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056c6:	e022      	b.n	800570e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056d0:	d11f      	bne.n	8005712 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80056d6:	e01c      	b.n	8005712 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d902      	bls.n	80056e6 <DMA_CheckFifoParam+0xb6>
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d003      	beq.n	80056ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80056e4:	e018      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
        break;
 80056ea:	e015      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	73fb      	strb	r3, [r7, #15]
    break;
 80056fc:	e00b      	b.n	8005716 <DMA_CheckFifoParam+0xe6>
        break;
 80056fe:	bf00      	nop
 8005700:	e00a      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005702:	bf00      	nop
 8005704:	e008      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005706:	bf00      	nop
 8005708:	e006      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 800570a:	bf00      	nop
 800570c:	e004      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 800570e:	bf00      	nop
 8005710:	e002      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
        break;
 8005712:	bf00      	nop
 8005714:	e000      	b.n	8005718 <DMA_CheckFifoParam+0xe8>
    break;
 8005716:	bf00      	nop
    }
  }

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop

08005728 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a38      	ldr	r2, [pc, #224]	@ (800581c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d022      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a36      	ldr	r2, [pc, #216]	@ (8005820 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d01d      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a35      	ldr	r2, [pc, #212]	@ (8005824 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d018      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a33      	ldr	r2, [pc, #204]	@ (8005828 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d013      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a32      	ldr	r2, [pc, #200]	@ (800582c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00e      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d009      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a2f      	ldr	r2, [pc, #188]	@ (8005834 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d004      	beq.n	8005786 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d101      	bne.n	800578a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800578a:	2300      	movs	r3, #0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01a      	beq.n	80057c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	b2db      	uxtb	r3, r3
 8005796:	3b08      	subs	r3, #8
 8005798:	4a28      	ldr	r2, [pc, #160]	@ (800583c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a24      	ldr	r2, [pc, #144]	@ (8005844 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80057b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f003 031f 	and.w	r3, r3, #31
 80057bc:	2201      	movs	r2, #1
 80057be:	409a      	lsls	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80057c4:	e024      	b.n	8005810 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3b10      	subs	r3, #16
 80057ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005848 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80057d0:	fba2 2303 	umull	r2, r3, r2, r3
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d806      	bhi.n	80057ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d902      	bls.n	80057ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3308      	adds	r3, #8
 80057ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	461a      	mov	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a16      	ldr	r2, [pc, #88]	@ (8005858 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005800:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2201      	movs	r2, #1
 800580a:	409a      	lsls	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005810:	bf00      	nop
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	58025408 	.word	0x58025408
 8005820:	5802541c 	.word	0x5802541c
 8005824:	58025430 	.word	0x58025430
 8005828:	58025444 	.word	0x58025444
 800582c:	58025458 	.word	0x58025458
 8005830:	5802546c 	.word	0x5802546c
 8005834:	58025480 	.word	0x58025480
 8005838:	58025494 	.word	0x58025494
 800583c:	cccccccd 	.word	0xcccccccd
 8005840:	16009600 	.word	0x16009600
 8005844:	58025880 	.word	0x58025880
 8005848:	aaaaaaab 	.word	0xaaaaaaab
 800584c:	400204b8 	.word	0x400204b8
 8005850:	4002040f 	.word	0x4002040f
 8005854:	10008200 	.word	0x10008200
 8005858:	40020880 	.word	0x40020880

0800585c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d04a      	beq.n	8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b08      	cmp	r3, #8
 8005876:	d847      	bhi.n	8005908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a25      	ldr	r2, [pc, #148]	@ (8005914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d022      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a24      	ldr	r2, [pc, #144]	@ (8005918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d01d      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a22      	ldr	r2, [pc, #136]	@ (800591c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d018      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a21      	ldr	r2, [pc, #132]	@ (8005920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d013      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00e      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1c      	ldr	r2, [pc, #112]	@ (800592c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e000      	b.n	80058ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80058cc:	2300      	movs	r3, #0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80058d6:	4413      	add	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	461a      	mov	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a15      	ldr	r2, [pc, #84]	@ (8005938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80058e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80058e6:	e009      	b.n	80058fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4b14      	ldr	r3, [pc, #80]	@ (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80058ec:	4413      	add	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	461a      	mov	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a11      	ldr	r2, [pc, #68]	@ (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80058fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3b01      	subs	r3, #1
 8005900:	2201      	movs	r2, #1
 8005902:	409a      	lsls	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	58025408 	.word	0x58025408
 8005918:	5802541c 	.word	0x5802541c
 800591c:	58025430 	.word	0x58025430
 8005920:	58025444 	.word	0x58025444
 8005924:	58025458 	.word	0x58025458
 8005928:	5802546c 	.word	0x5802546c
 800592c:	58025480 	.word	0x58025480
 8005930:	58025494 	.word	0x58025494
 8005934:	1600963f 	.word	0x1600963f
 8005938:	58025940 	.word	0x58025940
 800593c:	1000823f 	.word	0x1000823f
 8005940:	40020940 	.word	0x40020940

08005944 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005944:	b480      	push	{r7}
 8005946:	b089      	sub	sp, #36	@ 0x24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005952:	4b89      	ldr	r3, [pc, #548]	@ (8005b78 <HAL_GPIO_Init+0x234>)
 8005954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005956:	e194      	b.n	8005c82 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2101      	movs	r1, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	4013      	ands	r3, r2
 8005966:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 8186 	beq.w	8005c7c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d005      	beq.n	8005988 <HAL_GPIO_Init+0x44>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d130      	bne.n	80059ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2203      	movs	r2, #3
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	4013      	ands	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059be:	2201      	movs	r2, #1
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	4013      	ands	r3, r2
 80059cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	f003 0201 	and.w	r2, r3, #1
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d017      	beq.n	8005a26 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d123      	bne.n	8005a7a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	69b9      	ldr	r1, [r7, #24]
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0203 	and.w	r2, r3, #3
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80e0 	beq.w	8005c7c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abc:	4b2f      	ldr	r3, [pc, #188]	@ (8005b7c <HAL_GPIO_Init+0x238>)
 8005abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ac2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b7c <HAL_GPIO_Init+0x238>)
 8005ac4:	f043 0302 	orr.w	r3, r3, #2
 8005ac8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005acc:	4b2b      	ldr	r3, [pc, #172]	@ (8005b7c <HAL_GPIO_Init+0x238>)
 8005ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ada:	4a29      	ldr	r2, [pc, #164]	@ (8005b80 <HAL_GPIO_Init+0x23c>)
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	3302      	adds	r3, #2
 8005ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	220f      	movs	r2, #15
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	43db      	mvns	r3, r3
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	4013      	ands	r3, r2
 8005afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a20      	ldr	r2, [pc, #128]	@ (8005b84 <HAL_GPIO_Init+0x240>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d052      	beq.n	8005bac <HAL_GPIO_Init+0x268>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a1f      	ldr	r2, [pc, #124]	@ (8005b88 <HAL_GPIO_Init+0x244>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d031      	beq.n	8005b72 <HAL_GPIO_Init+0x22e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <HAL_GPIO_Init+0x248>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d02b      	beq.n	8005b6e <HAL_GPIO_Init+0x22a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a1d      	ldr	r2, [pc, #116]	@ (8005b90 <HAL_GPIO_Init+0x24c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d025      	beq.n	8005b6a <HAL_GPIO_Init+0x226>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	@ (8005b94 <HAL_GPIO_Init+0x250>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01f      	beq.n	8005b66 <HAL_GPIO_Init+0x222>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1b      	ldr	r2, [pc, #108]	@ (8005b98 <HAL_GPIO_Init+0x254>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d019      	beq.n	8005b62 <HAL_GPIO_Init+0x21e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	@ (8005b9c <HAL_GPIO_Init+0x258>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <HAL_GPIO_Init+0x21a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a19      	ldr	r2, [pc, #100]	@ (8005ba0 <HAL_GPIO_Init+0x25c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00d      	beq.n	8005b5a <HAL_GPIO_Init+0x216>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a18      	ldr	r2, [pc, #96]	@ (8005ba4 <HAL_GPIO_Init+0x260>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d007      	beq.n	8005b56 <HAL_GPIO_Init+0x212>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a17      	ldr	r2, [pc, #92]	@ (8005ba8 <HAL_GPIO_Init+0x264>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d101      	bne.n	8005b52 <HAL_GPIO_Init+0x20e>
 8005b4e:	2309      	movs	r3, #9
 8005b50:	e02d      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b52:	230a      	movs	r3, #10
 8005b54:	e02b      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b56:	2308      	movs	r3, #8
 8005b58:	e029      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b5a:	2307      	movs	r3, #7
 8005b5c:	e027      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b5e:	2306      	movs	r3, #6
 8005b60:	e025      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b62:	2305      	movs	r3, #5
 8005b64:	e023      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b66:	2304      	movs	r3, #4
 8005b68:	e021      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e01f      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e01d      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e01b      	b.n	8005bae <HAL_GPIO_Init+0x26a>
 8005b76:	bf00      	nop
 8005b78:	58000080 	.word	0x58000080
 8005b7c:	58024400 	.word	0x58024400
 8005b80:	58000400 	.word	0x58000400
 8005b84:	58020000 	.word	0x58020000
 8005b88:	58020400 	.word	0x58020400
 8005b8c:	58020800 	.word	0x58020800
 8005b90:	58020c00 	.word	0x58020c00
 8005b94:	58021000 	.word	0x58021000
 8005b98:	58021400 	.word	0x58021400
 8005b9c:	58021800 	.word	0x58021800
 8005ba0:	58021c00 	.word	0x58021c00
 8005ba4:	58022000 	.word	0x58022000
 8005ba8:	58022400 	.word	0x58022400
 8005bac:	2300      	movs	r3, #0
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	f002 0203 	and.w	r2, r2, #3
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	4093      	lsls	r3, r2
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bbe:	4938      	ldr	r1, [pc, #224]	@ (8005ca0 <HAL_GPIO_Init+0x35c>)
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	089b      	lsrs	r3, r3, #2
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	43db      	mvns	r3, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4013      	ands	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f47f ae63 	bne.w	8005958 <HAL_GPIO_Init+0x14>
  }
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	3724      	adds	r7, #36	@ 0x24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	58000400 	.word	0x58000400

08005ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cb4:	787b      	ldrb	r3, [r7, #1]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cc0:	e003      	b.n	8005cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cc2:	887b      	ldrh	r3, [r7, #2]
 8005cc4:	041a      	lsls	r2, r3, #16
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	619a      	str	r2, [r3, #24]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
	...

08005cd8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_PWREx_ConfigSupply+0x70>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d00a      	beq.n	8005d02 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005cec:	4b16      	ldr	r3, [pc, #88]	@ (8005d48 <HAL_PWREx_ConfigSupply+0x70>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d001      	beq.n	8005cfe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e01f      	b.n	8005d3e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e01d      	b.n	8005d3e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d02:	4b11      	ldr	r3, [pc, #68]	@ (8005d48 <HAL_PWREx_ConfigSupply+0x70>)
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f023 0207 	bic.w	r2, r3, #7
 8005d0a:	490f      	ldr	r1, [pc, #60]	@ (8005d48 <HAL_PWREx_ConfigSupply+0x70>)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005d12:	f7fc fe0b 	bl	800292c <HAL_GetTick>
 8005d16:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d18:	e009      	b.n	8005d2e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005d1a:	f7fc fe07 	bl	800292c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d28:	d901      	bls.n	8005d2e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e007      	b.n	8005d3e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_PWREx_ConfigSupply+0x70>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d3a:	d1ee      	bne.n	8005d1a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	58024800 	.word	0x58024800

08005d4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	@ 0x30
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	f000 bc48 	b.w	80065f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 8088 	beq.w	8005e7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d6e:	4b99      	ldr	r3, [pc, #612]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d78:	4b96      	ldr	r3, [pc, #600]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d007      	beq.n	8005d94 <HAL_RCC_OscConfig+0x48>
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	2b18      	cmp	r3, #24
 8005d88:	d111      	bne.n	8005dae <HAL_RCC_OscConfig+0x62>
 8005d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d10c      	bne.n	8005dae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d94:	4b8f      	ldr	r3, [pc, #572]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d06d      	beq.n	8005e7c <HAL_RCC_OscConfig+0x130>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d169      	bne.n	8005e7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f000 bc21 	b.w	80065f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x7a>
 8005db8:	4b86      	ldr	r3, [pc, #536]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a85      	ldr	r2, [pc, #532]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	e02e      	b.n	8005e24 <HAL_RCC_OscConfig+0xd8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10c      	bne.n	8005de8 <HAL_RCC_OscConfig+0x9c>
 8005dce:	4b81      	ldr	r3, [pc, #516]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a80      	ldr	r2, [pc, #512]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	4b7e      	ldr	r3, [pc, #504]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a7d      	ldr	r2, [pc, #500]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e01d      	b.n	8005e24 <HAL_RCC_OscConfig+0xd8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005df0:	d10c      	bne.n	8005e0c <HAL_RCC_OscConfig+0xc0>
 8005df2:	4b78      	ldr	r3, [pc, #480]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a77      	ldr	r2, [pc, #476]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	4b75      	ldr	r3, [pc, #468]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a74      	ldr	r2, [pc, #464]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e08:	6013      	str	r3, [r2, #0]
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCC_OscConfig+0xd8>
 8005e0c:	4b71      	ldr	r3, [pc, #452]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a70      	ldr	r2, [pc, #448]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	4b6e      	ldr	r3, [pc, #440]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a6d      	ldr	r2, [pc, #436]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d013      	beq.n	8005e54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fc fd7e 	bl	800292c <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e34:	f7fc fd7a 	bl	800292c <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b64      	cmp	r3, #100	@ 0x64
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e3d4      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e46:	4b63      	ldr	r3, [pc, #396]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d0f0      	beq.n	8005e34 <HAL_RCC_OscConfig+0xe8>
 8005e52:	e014      	b.n	8005e7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fc fd6a 	bl	800292c <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e5c:	f7fc fd66 	bl	800292c <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b64      	cmp	r3, #100	@ 0x64
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e3c0      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e6e:	4b59      	ldr	r3, [pc, #356]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <HAL_RCC_OscConfig+0x110>
 8005e7a:	e000      	b.n	8005e7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80ca 	beq.w	8006020 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8c:	4b51      	ldr	r3, [pc, #324]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e96:	4b4f      	ldr	r3, [pc, #316]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x166>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2b18      	cmp	r3, #24
 8005ea6:	d156      	bne.n	8005f56 <HAL_RCC_OscConfig+0x20a>
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d151      	bne.n	8005f56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eb2:	4b48      	ldr	r3, [pc, #288]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d005      	beq.n	8005eca <HAL_RCC_OscConfig+0x17e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e392      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005eca:	4b42      	ldr	r3, [pc, #264]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f023 0219 	bic.w	r2, r3, #25
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	493f      	ldr	r1, [pc, #252]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005edc:	f7fc fd26 	bl	800292c <HAL_GetTick>
 8005ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ee4:	f7fc fd22 	bl	800292c <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e37c      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ef6:	4b37      	ldr	r3, [pc, #220]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f02:	f7fc fd43 	bl	800298c <HAL_GetREVID>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d817      	bhi.n	8005f40 <HAL_RCC_OscConfig+0x1f4>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	d108      	bne.n	8005f2a <HAL_RCC_OscConfig+0x1de>
 8005f18:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f20:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f28:	e07a      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	031b      	lsls	r3, r3, #12
 8005f38:	4926      	ldr	r1, [pc, #152]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f3e:	e06f      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f40:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	4921      	ldr	r1, [pc, #132]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f54:	e064      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d047      	beq.n	8005fee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f023 0219 	bic.w	r2, r3, #25
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	491a      	ldr	r1, [pc, #104]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f70:	f7fc fcdc 	bl	800292c <HAL_GetTick>
 8005f74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f76:	e008      	b.n	8005f8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f78:	f7fc fcd8 	bl	800292c <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d901      	bls.n	8005f8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e332      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f8a:	4b12      	ldr	r3, [pc, #72]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0304 	and.w	r3, r3, #4
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0f0      	beq.n	8005f78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f96:	f7fc fcf9 	bl	800298c <HAL_GetREVID>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d819      	bhi.n	8005fd8 <HAL_RCC_OscConfig+0x28c>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	2b40      	cmp	r3, #64	@ 0x40
 8005faa:	d108      	bne.n	8005fbe <HAL_RCC_OscConfig+0x272>
 8005fac:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005fb4:	4a07      	ldr	r2, [pc, #28]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fba:	6053      	str	r3, [r2, #4]
 8005fbc:	e030      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
 8005fbe:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	031b      	lsls	r3, r3, #12
 8005fcc:	4901      	ldr	r1, [pc, #4]	@ (8005fd4 <HAL_RCC_OscConfig+0x288>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	604b      	str	r3, [r1, #4]
 8005fd2:	e025      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	061b      	lsls	r3, r3, #24
 8005fe6:	4997      	ldr	r1, [pc, #604]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	604b      	str	r3, [r1, #4]
 8005fec:	e018      	b.n	8006020 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fee:	4b95      	ldr	r3, [pc, #596]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a94      	ldr	r2, [pc, #592]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8005ff4:	f023 0301 	bic.w	r3, r3, #1
 8005ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ffa:	f7fc fc97 	bl	800292c <HAL_GetTick>
 8005ffe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006002:	f7fc fc93 	bl	800292c <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e2ed      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006014:	4b8b      	ldr	r3, [pc, #556]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1f0      	bne.n	8006002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80a9 	beq.w	8006180 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602e:	4b85      	ldr	r3, [pc, #532]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006036:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006038:	4b82      	ldr	r3, [pc, #520]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b08      	cmp	r3, #8
 8006042:	d007      	beq.n	8006054 <HAL_RCC_OscConfig+0x308>
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	2b18      	cmp	r3, #24
 8006048:	d13a      	bne.n	80060c0 <HAL_RCC_OscConfig+0x374>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b01      	cmp	r3, #1
 8006052:	d135      	bne.n	80060c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006054:	4b7b      	ldr	r3, [pc, #492]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_OscConfig+0x320>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	2b80      	cmp	r3, #128	@ 0x80
 8006066:	d001      	beq.n	800606c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e2c1      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800606c:	f7fc fc8e 	bl	800298c <HAL_GetREVID>
 8006070:	4603      	mov	r3, r0
 8006072:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006076:	4293      	cmp	r3, r2
 8006078:	d817      	bhi.n	80060aa <HAL_RCC_OscConfig+0x35e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	2b20      	cmp	r3, #32
 8006080:	d108      	bne.n	8006094 <HAL_RCC_OscConfig+0x348>
 8006082:	4b70      	ldr	r3, [pc, #448]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800608a:	4a6e      	ldr	r2, [pc, #440]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 800608c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006090:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006092:	e075      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006094:	4b6b      	ldr	r3, [pc, #428]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	069b      	lsls	r3, r3, #26
 80060a2:	4968      	ldr	r1, [pc, #416]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060a8:	e06a      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060aa:	4b66      	ldr	r3, [pc, #408]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a1b      	ldr	r3, [r3, #32]
 80060b6:	061b      	lsls	r3, r3, #24
 80060b8:	4962      	ldr	r1, [pc, #392]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80060be:	e05f      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d042      	beq.n	800614e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80060c8:	4b5e      	ldr	r3, [pc, #376]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fc fc2a 	bl	800292c <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80060dc:	f7fc fc26 	bl	800292c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e280      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060ee:	4b55      	ldr	r3, [pc, #340]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060fa:	f7fc fc47 	bl	800298c <HAL_GetREVID>
 80060fe:	4603      	mov	r3, r0
 8006100:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006104:	4293      	cmp	r3, r2
 8006106:	d817      	bhi.n	8006138 <HAL_RCC_OscConfig+0x3ec>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	2b20      	cmp	r3, #32
 800610e:	d108      	bne.n	8006122 <HAL_RCC_OscConfig+0x3d6>
 8006110:	4b4c      	ldr	r3, [pc, #304]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006118:	4a4a      	ldr	r2, [pc, #296]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 800611a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800611e:	6053      	str	r3, [r2, #4]
 8006120:	e02e      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
 8006122:	4b48      	ldr	r3, [pc, #288]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	069b      	lsls	r3, r3, #26
 8006130:	4944      	ldr	r1, [pc, #272]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	604b      	str	r3, [r1, #4]
 8006136:	e023      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
 8006138:	4b42      	ldr	r3, [pc, #264]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	493f      	ldr	r1, [pc, #252]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	60cb      	str	r3, [r1, #12]
 800614c:	e018      	b.n	8006180 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800614e:	4b3d      	ldr	r3, [pc, #244]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a3c      	ldr	r2, [pc, #240]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006154:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615a:	f7fc fbe7 	bl	800292c <HAL_GetTick>
 800615e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006160:	e008      	b.n	8006174 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006162:	f7fc fbe3 	bl	800292c <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	2b02      	cmp	r3, #2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e23d      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006174:	4b33      	ldr	r3, [pc, #204]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1f0      	bne.n	8006162 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b00      	cmp	r3, #0
 800618a:	d036      	beq.n	80061fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d019      	beq.n	80061c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006194:	4b2b      	ldr	r3, [pc, #172]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006198:	4a2a      	ldr	r2, [pc, #168]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 800619a:	f043 0301 	orr.w	r3, r3, #1
 800619e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fc fbc4 	bl	800292c <HAL_GetTick>
 80061a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a8:	f7fc fbc0 	bl	800292c <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e21a      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061ba:	4b22      	ldr	r3, [pc, #136]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80061bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCC_OscConfig+0x45c>
 80061c6:	e018      	b.n	80061fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80061ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061cc:	4a1d      	ldr	r2, [pc, #116]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80061ce:	f023 0301 	bic.w	r3, r3, #1
 80061d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d4:	f7fc fbaa 	bl	800292c <HAL_GetTick>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061dc:	f7fc fba6 	bl	800292c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e200      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061ee:	4b15      	ldr	r3, [pc, #84]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061f2:	f003 0302 	and.w	r3, r3, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f0      	bne.n	80061dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0320 	and.w	r3, r3, #32
 8006202:	2b00      	cmp	r3, #0
 8006204:	d039      	beq.n	800627a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01c      	beq.n	8006248 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800620e:	4b0d      	ldr	r3, [pc, #52]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a0c      	ldr	r2, [pc, #48]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006214:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006218:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800621a:	f7fc fb87 	bl	800292c <HAL_GetTick>
 800621e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006222:	f7fc fb83 	bl	800292c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e1dd      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006234:	4b03      	ldr	r3, [pc, #12]	@ (8006244 <HAL_RCC_OscConfig+0x4f8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0f0      	beq.n	8006222 <HAL_RCC_OscConfig+0x4d6>
 8006240:	e01b      	b.n	800627a <HAL_RCC_OscConfig+0x52e>
 8006242:	bf00      	nop
 8006244:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006248:	4b9b      	ldr	r3, [pc, #620]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a9a      	ldr	r2, [pc, #616]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800624e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006254:	f7fc fb6a 	bl	800292c <HAL_GetTick>
 8006258:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800625c:	f7fc fb66 	bl	800292c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e1c0      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800626e:	4b92      	ldr	r3, [pc, #584]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	f000 8081 	beq.w	800638a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006288:	4b8c      	ldr	r3, [pc, #560]	@ (80064bc <HAL_RCC_OscConfig+0x770>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a8b      	ldr	r2, [pc, #556]	@ (80064bc <HAL_RCC_OscConfig+0x770>)
 800628e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006294:	f7fc fb4a 	bl	800292c <HAL_GetTick>
 8006298:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800629c:	f7fc fb46 	bl	800292c <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b64      	cmp	r3, #100	@ 0x64
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e1a0      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ae:	4b83      	ldr	r3, [pc, #524]	@ (80064bc <HAL_RCC_OscConfig+0x770>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d106      	bne.n	80062d0 <HAL_RCC_OscConfig+0x584>
 80062c2:	4b7d      	ldr	r3, [pc, #500]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c6:	4a7c      	ldr	r2, [pc, #496]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062ce:	e02d      	b.n	800632c <HAL_RCC_OscConfig+0x5e0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10c      	bne.n	80062f2 <HAL_RCC_OscConfig+0x5a6>
 80062d8:	4b77      	ldr	r3, [pc, #476]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062dc:	4a76      	ldr	r2, [pc, #472]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062de:	f023 0301 	bic.w	r3, r3, #1
 80062e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062e4:	4b74      	ldr	r3, [pc, #464]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062e8:	4a73      	ldr	r2, [pc, #460]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062ea:	f023 0304 	bic.w	r3, r3, #4
 80062ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f0:	e01c      	b.n	800632c <HAL_RCC_OscConfig+0x5e0>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	2b05      	cmp	r3, #5
 80062f8:	d10c      	bne.n	8006314 <HAL_RCC_OscConfig+0x5c8>
 80062fa:	4b6f      	ldr	r3, [pc, #444]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80062fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fe:	4a6e      	ldr	r2, [pc, #440]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006300:	f043 0304 	orr.w	r3, r3, #4
 8006304:	6713      	str	r3, [r2, #112]	@ 0x70
 8006306:	4b6c      	ldr	r3, [pc, #432]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630a:	4a6b      	ldr	r2, [pc, #428]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	6713      	str	r3, [r2, #112]	@ 0x70
 8006312:	e00b      	b.n	800632c <HAL_RCC_OscConfig+0x5e0>
 8006314:	4b68      	ldr	r3, [pc, #416]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006318:	4a67      	ldr	r2, [pc, #412]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006320:	4b65      	ldr	r3, [pc, #404]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	4a64      	ldr	r2, [pc, #400]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006326:	f023 0304 	bic.w	r3, r3, #4
 800632a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d015      	beq.n	8006360 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006334:	f7fc fafa 	bl	800292c <HAL_GetTick>
 8006338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800633a:	e00a      	b.n	8006352 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800633c:	f7fc faf6 	bl	800292c <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634a:	4293      	cmp	r3, r2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e14e      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006352:	4b59      	ldr	r3, [pc, #356]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0ee      	beq.n	800633c <HAL_RCC_OscConfig+0x5f0>
 800635e:	e014      	b.n	800638a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fc fae4 	bl	800292c <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006366:	e00a      	b.n	800637e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006368:	f7fc fae0 	bl	800292c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e138      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800637e:	4b4e      	ldr	r3, [pc, #312]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1ee      	bne.n	8006368 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 812d 	beq.w	80065ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006394:	4b48      	ldr	r3, [pc, #288]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800639c:	2b18      	cmp	r3, #24
 800639e:	f000 80bd 	beq.w	800651c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	f040 809e 	bne.w	80064e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ac:	4b42      	ldr	r3, [pc, #264]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a41      	ldr	r2, [pc, #260]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80063b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fc fab8 	bl	800292c <HAL_GetTick>
 80063bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c0:	f7fc fab4 	bl	800292c <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e10e      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063d2:	4b39      	ldr	r3, [pc, #228]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063de:	4b36      	ldr	r3, [pc, #216]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063e2:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <HAL_RCC_OscConfig+0x774>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063ee:	0112      	lsls	r2, r2, #4
 80063f0:	430a      	orrs	r2, r1
 80063f2:	4931      	ldr	r1, [pc, #196]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	628b      	str	r3, [r1, #40]	@ 0x28
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	3b01      	subs	r3, #1
 80063fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006406:	3b01      	subs	r3, #1
 8006408:	025b      	lsls	r3, r3, #9
 800640a:	b29b      	uxth	r3, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	3b01      	subs	r3, #1
 8006414:	041b      	lsls	r3, r3, #16
 8006416:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006420:	3b01      	subs	r3, #1
 8006422:	061b      	lsls	r3, r3, #24
 8006424:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006428:	4923      	ldr	r1, [pc, #140]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800642a:	4313      	orrs	r3, r2
 800642c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800642e:	4b22      	ldr	r3, [pc, #136]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006432:	4a21      	ldr	r2, [pc, #132]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006434:	f023 0301 	bic.w	r3, r3, #1
 8006438:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800643a:	4b1f      	ldr	r3, [pc, #124]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800643c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800643e:	4b21      	ldr	r3, [pc, #132]	@ (80064c4 <HAL_RCC_OscConfig+0x778>)
 8006440:	4013      	ands	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006446:	00d2      	lsls	r2, r2, #3
 8006448:	491b      	ldr	r1, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800644a:	4313      	orrs	r3, r2
 800644c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006452:	f023 020c 	bic.w	r2, r3, #12
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	4917      	ldr	r1, [pc, #92]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800645c:	4313      	orrs	r3, r2
 800645e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006460:	4b15      	ldr	r3, [pc, #84]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006464:	f023 0202 	bic.w	r2, r3, #2
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646c:	4912      	ldr	r1, [pc, #72]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800646e:	4313      	orrs	r3, r2
 8006470:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006472:	4b11      	ldr	r3, [pc, #68]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a10      	ldr	r2, [pc, #64]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647e:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006482:	4a0d      	ldr	r2, [pc, #52]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800648a:	4b0b      	ldr	r3, [pc, #44]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800648c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648e:	4a0a      	ldr	r2, [pc, #40]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006496:	4b08      	ldr	r3, [pc, #32]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	4a07      	ldr	r2, [pc, #28]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 800649c:	f043 0301 	orr.w	r3, r3, #1
 80064a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064a2:	4b05      	ldr	r3, [pc, #20]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a04      	ldr	r2, [pc, #16]	@ (80064b8 <HAL_RCC_OscConfig+0x76c>)
 80064a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fc fa3d 	bl	800292c <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064b4:	e011      	b.n	80064da <HAL_RCC_OscConfig+0x78e>
 80064b6:	bf00      	nop
 80064b8:	58024400 	.word	0x58024400
 80064bc:	58024800 	.word	0x58024800
 80064c0:	fffffc0c 	.word	0xfffffc0c
 80064c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064c8:	f7fc fa30 	bl	800292c <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e08a      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064da:	4b47      	ldr	r3, [pc, #284]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d0f0      	beq.n	80064c8 <HAL_RCC_OscConfig+0x77c>
 80064e6:	e082      	b.n	80065ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064e8:	4b43      	ldr	r3, [pc, #268]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a42      	ldr	r2, [pc, #264]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80064ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80064f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fc fa1a 	bl	800292c <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fc fa16 	bl	800292c <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e070      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800650e:	4b3a      	ldr	r3, [pc, #232]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0x7b0>
 800651a:	e068      	b.n	80065ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800651c:	4b36      	ldr	r3, [pc, #216]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006522:	4b35      	ldr	r3, [pc, #212]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006526:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	2b01      	cmp	r3, #1
 800652e:	d031      	beq.n	8006594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f003 0203 	and.w	r2, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d12a      	bne.n	8006594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800654a:	429a      	cmp	r2, r3
 800654c:	d122      	bne.n	8006594 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006558:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d11a      	bne.n	8006594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	0a5b      	lsrs	r3, r3, #9
 8006562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800656c:	429a      	cmp	r2, r3
 800656e:	d111      	bne.n	8006594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	0c1b      	lsrs	r3, r3, #16
 8006574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d108      	bne.n	8006594 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	0e1b      	lsrs	r3, r3, #24
 8006586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006590:	429a      	cmp	r2, r3
 8006592:	d001      	beq.n	8006598 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e02b      	b.n	80065f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006598:	4b17      	ldr	r3, [pc, #92]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 800659a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659c:	08db      	lsrs	r3, r3, #3
 800659e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d01f      	beq.n	80065ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80065ae:	4b12      	ldr	r3, [pc, #72]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	4a11      	ldr	r2, [pc, #68]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80065ba:	f7fc f9b7 	bl	800292c <HAL_GetTick>
 80065be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80065c0:	bf00      	nop
 80065c2:	f7fc f9b3 	bl	800292c <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d0f9      	beq.n	80065c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065ce:	4b0a      	ldr	r3, [pc, #40]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065d2:	4b0a      	ldr	r3, [pc, #40]	@ (80065fc <HAL_RCC_OscConfig+0x8b0>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065da:	00d2      	lsls	r2, r2, #3
 80065dc:	4906      	ldr	r1, [pc, #24]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80065e2:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	4a04      	ldr	r2, [pc, #16]	@ (80065f8 <HAL_RCC_OscConfig+0x8ac>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3730      	adds	r7, #48	@ 0x30
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	58024400 	.word	0x58024400
 80065fc:	ffff0007 	.word	0xffff0007

08006600 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e19c      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006614:	4b8a      	ldr	r3, [pc, #552]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d910      	bls.n	8006644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006622:	4b87      	ldr	r3, [pc, #540]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 020f 	bic.w	r2, r3, #15
 800662a:	4985      	ldr	r1, [pc, #532]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e184      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d010      	beq.n	8006672 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	4b7b      	ldr	r3, [pc, #492]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800665c:	429a      	cmp	r2, r3
 800665e:	d908      	bls.n	8006672 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006660:	4b78      	ldr	r3, [pc, #480]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	4975      	ldr	r1, [pc, #468]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800666e:	4313      	orrs	r3, r2
 8006670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0308 	and.w	r3, r3, #8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d010      	beq.n	80066a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	4b70      	ldr	r3, [pc, #448]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800668a:	429a      	cmp	r2, r3
 800668c:	d908      	bls.n	80066a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800668e:	4b6d      	ldr	r3, [pc, #436]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	496a      	ldr	r1, [pc, #424]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800669c:	4313      	orrs	r3, r2
 800669e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0310 	and.w	r3, r3, #16
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d010      	beq.n	80066ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	4b64      	ldr	r3, [pc, #400]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d908      	bls.n	80066ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066bc:	4b61      	ldr	r3, [pc, #388]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	495e      	ldr	r1, [pc, #376]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d010      	beq.n	80066fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	69da      	ldr	r2, [r3, #28]
 80066de:	4b59      	ldr	r3, [pc, #356]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d908      	bls.n	80066fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80066ea:	4b56      	ldr	r3, [pc, #344]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	69db      	ldr	r3, [r3, #28]
 80066f6:	4953      	ldr	r1, [pc, #332]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d010      	beq.n	800672a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68da      	ldr	r2, [r3, #12]
 800670c:	4b4d      	ldr	r3, [pc, #308]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	429a      	cmp	r2, r3
 8006716:	d908      	bls.n	800672a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006718:	4b4a      	ldr	r3, [pc, #296]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	f023 020f 	bic.w	r2, r3, #15
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4947      	ldr	r1, [pc, #284]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006726:	4313      	orrs	r3, r2
 8006728:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d055      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006736:	4b43      	ldr	r3, [pc, #268]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	4940      	ldr	r1, [pc, #256]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006744:	4313      	orrs	r3, r2
 8006746:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b02      	cmp	r3, #2
 800674e:	d107      	bne.n	8006760 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006750:	4b3c      	ldr	r3, [pc, #240]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d121      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0f6      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	2b03      	cmp	r3, #3
 8006766:	d107      	bne.n	8006778 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006768:	4b36      	ldr	r3, [pc, #216]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d115      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0ea      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006780:	4b30      	ldr	r3, [pc, #192]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e0de      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006790:	4b2c      	ldr	r3, [pc, #176]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e0d6      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067a0:	4b28      	ldr	r3, [pc, #160]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f023 0207 	bic.w	r2, r3, #7
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4925      	ldr	r1, [pc, #148]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067b2:	f7fc f8bb 	bl	800292c <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b8:	e00a      	b.n	80067d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ba:	f7fc f8b7 	bl	800292c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e0be      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	429a      	cmp	r2, r3
 80067e0:	d1eb      	bne.n	80067ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d010      	beq.n	8006810 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	f003 030f 	and.w	r3, r3, #15
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d208      	bcs.n	8006810 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067fe:	4b11      	ldr	r3, [pc, #68]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f023 020f 	bic.w	r2, r3, #15
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	490e      	ldr	r1, [pc, #56]	@ (8006844 <HAL_RCC_ClockConfig+0x244>)
 800680c:	4313      	orrs	r3, r2
 800680e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d214      	bcs.n	8006848 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b08      	ldr	r3, [pc, #32]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 020f 	bic.w	r2, r3, #15
 8006826:	4906      	ldr	r1, [pc, #24]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b04      	ldr	r3, [pc, #16]	@ (8006840 <HAL_RCC_ClockConfig+0x240>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d005      	beq.n	8006848 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e086      	b.n	800694e <HAL_RCC_ClockConfig+0x34e>
 8006840:	52002000 	.word	0x52002000
 8006844:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	4b3f      	ldr	r3, [pc, #252]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006860:	429a      	cmp	r2, r3
 8006862:	d208      	bcs.n	8006876 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006864:	4b3c      	ldr	r3, [pc, #240]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	4939      	ldr	r1, [pc, #228]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006872:	4313      	orrs	r3, r2
 8006874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0308 	and.w	r3, r3, #8
 800687e:	2b00      	cmp	r3, #0
 8006880:	d010      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	4b34      	ldr	r3, [pc, #208]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800688e:	429a      	cmp	r2, r3
 8006890:	d208      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006892:	4b31      	ldr	r3, [pc, #196]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	492e      	ldr	r1, [pc, #184]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0310 	and.w	r3, r3, #16
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d010      	beq.n	80068d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699a      	ldr	r2, [r3, #24]
 80068b4:	4b28      	ldr	r3, [pc, #160]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80068bc:	429a      	cmp	r2, r3
 80068be:	d208      	bcs.n	80068d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80068c0:	4b25      	ldr	r3, [pc, #148]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	4922      	ldr	r1, [pc, #136]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d010      	beq.n	8006900 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69da      	ldr	r2, [r3, #28]
 80068e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d208      	bcs.n	8006900 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80068ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4917      	ldr	r1, [pc, #92]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006900:	f000 f834 	bl	800696c <HAL_RCC_GetSysClockFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b14      	ldr	r3, [pc, #80]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	4912      	ldr	r1, [pc, #72]	@ (800695c <HAL_RCC_ClockConfig+0x35c>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	f003 031f 	and.w	r3, r3, #31
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800691e:	4b0e      	ldr	r3, [pc, #56]	@ (8006958 <HAL_RCC_ClockConfig+0x358>)
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f003 030f 	and.w	r3, r3, #15
 8006926:	4a0d      	ldr	r2, [pc, #52]	@ (800695c <HAL_RCC_ClockConfig+0x35c>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <HAL_RCC_ClockConfig+0x360>)
 8006936:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006938:	4a0a      	ldr	r2, [pc, #40]	@ (8006964 <HAL_RCC_ClockConfig+0x364>)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <HAL_RCC_ClockConfig+0x368>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7fb ffa8 	bl	8002898 <HAL_InitTick>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	58024400 	.word	0x58024400
 800695c:	08010618 	.word	0x08010618
 8006960:	24000008 	.word	0x24000008
 8006964:	24000004 	.word	0x24000004
 8006968:	2400000c 	.word	0x2400000c

0800696c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800696c:	b480      	push	{r7}
 800696e:	b089      	sub	sp, #36	@ 0x24
 8006970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006972:	4bb3      	ldr	r3, [pc, #716]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800697a:	2b18      	cmp	r3, #24
 800697c:	f200 8155 	bhi.w	8006c2a <HAL_RCC_GetSysClockFreq+0x2be>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069ed 	.word	0x080069ed
 800698c:	08006c2b 	.word	0x08006c2b
 8006990:	08006c2b 	.word	0x08006c2b
 8006994:	08006c2b 	.word	0x08006c2b
 8006998:	08006c2b 	.word	0x08006c2b
 800699c:	08006c2b 	.word	0x08006c2b
 80069a0:	08006c2b 	.word	0x08006c2b
 80069a4:	08006c2b 	.word	0x08006c2b
 80069a8:	08006a13 	.word	0x08006a13
 80069ac:	08006c2b 	.word	0x08006c2b
 80069b0:	08006c2b 	.word	0x08006c2b
 80069b4:	08006c2b 	.word	0x08006c2b
 80069b8:	08006c2b 	.word	0x08006c2b
 80069bc:	08006c2b 	.word	0x08006c2b
 80069c0:	08006c2b 	.word	0x08006c2b
 80069c4:	08006c2b 	.word	0x08006c2b
 80069c8:	08006a19 	.word	0x08006a19
 80069cc:	08006c2b 	.word	0x08006c2b
 80069d0:	08006c2b 	.word	0x08006c2b
 80069d4:	08006c2b 	.word	0x08006c2b
 80069d8:	08006c2b 	.word	0x08006c2b
 80069dc:	08006c2b 	.word	0x08006c2b
 80069e0:	08006c2b 	.word	0x08006c2b
 80069e4:	08006c2b 	.word	0x08006c2b
 80069e8:	08006a1f 	.word	0x08006a1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069ec:	4b94      	ldr	r3, [pc, #592]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d009      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069f8:	4b91      	ldr	r3, [pc, #580]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	08db      	lsrs	r3, r3, #3
 80069fe:	f003 0303 	and.w	r3, r3, #3
 8006a02:	4a90      	ldr	r2, [pc, #576]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
 8006a08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006a0a:	e111      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a0c:	4b8d      	ldr	r3, [pc, #564]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a0e:	61bb      	str	r3, [r7, #24]
      break;
 8006a10:	e10e      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006a12:	4b8d      	ldr	r3, [pc, #564]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a14:	61bb      	str	r3, [r7, #24]
      break;
 8006a16:	e10b      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006a18:	4b8c      	ldr	r3, [pc, #560]	@ (8006c4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006a1a:	61bb      	str	r3, [r7, #24]
      break;
 8006a1c:	e108      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a1e:	4b88      	ldr	r3, [pc, #544]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a28:	4b85      	ldr	r3, [pc, #532]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	091b      	lsrs	r3, r3, #4
 8006a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a34:	4b82      	ldr	r3, [pc, #520]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a3e:	4b80      	ldr	r3, [pc, #512]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a42:	08db      	lsrs	r3, r3, #3
 8006a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	fb02 f303 	mul.w	r3, r2, r3
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80e1 	beq.w	8006c24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f000 8083 	beq.w	8006b70 <HAL_RCC_GetSysClockFreq+0x204>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	f200 80a1 	bhi.w	8006bb4 <HAL_RCC_GetSysClockFreq+0x248>
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_RCC_GetSysClockFreq+0x114>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d056      	beq.n	8006b2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a7e:	e099      	b.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a80:	4b6f      	ldr	r3, [pc, #444]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d02d      	beq.n	8006ae8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	08db      	lsrs	r3, r3, #3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	4a6b      	ldr	r2, [pc, #428]	@ (8006c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a98:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	ee07 3a90 	vmov	s15, r3
 8006aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab6:	4b62      	ldr	r3, [pc, #392]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006ae6:	e087      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	ee07 3a90 	vmov	s15, r3
 8006aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006af2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afa:	4b51      	ldr	r3, [pc, #324]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b02:	ee07 3a90 	vmov	s15, r3
 8006b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b2a:	e065      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b3e:	4b40      	ldr	r3, [pc, #256]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b6e:	e043      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b82:	4b2f      	ldr	r3, [pc, #188]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bb2:	e021      	b.n	8006bf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bce:	ee07 3a90 	vmov	s15, r3
 8006bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006bf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006bf8:	4b11      	ldr	r3, [pc, #68]	@ (8006c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	0a5b      	lsrs	r3, r3, #9
 8006bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c02:	3301      	adds	r3, #1
 8006c04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1c:	ee17 3a90 	vmov	r3, s15
 8006c20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006c22:	e005      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61bb      	str	r3, [r7, #24]
      break;
 8006c28:	e002      	b.n	8006c30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006c2a:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006c2c:	61bb      	str	r3, [r7, #24]
      break;
 8006c2e:	bf00      	nop
  }

  return sysclockfreq;
 8006c30:	69bb      	ldr	r3, [r7, #24]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3724      	adds	r7, #36	@ 0x24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	58024400 	.word	0x58024400
 8006c44:	03d09000 	.word	0x03d09000
 8006c48:	003d0900 	.word	0x003d0900
 8006c4c:	017d7840 	.word	0x017d7840
 8006c50:	46000000 	.word	0x46000000
 8006c54:	4c742400 	.word	0x4c742400
 8006c58:	4a742400 	.word	0x4a742400
 8006c5c:	4bbebc20 	.word	0x4bbebc20

08006c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c66:	f7ff fe81 	bl	800696c <HAL_RCC_GetSysClockFreq>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b10      	ldr	r3, [pc, #64]	@ (8006cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	0a1b      	lsrs	r3, r3, #8
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	490f      	ldr	r1, [pc, #60]	@ (8006cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c78:	5ccb      	ldrb	r3, [r1, r3]
 8006c7a:	f003 031f 	and.w	r3, r3, #31
 8006c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c84:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	4a09      	ldr	r2, [pc, #36]	@ (8006cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9a:	4a07      	ldr	r2, [pc, #28]	@ (8006cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c9e:	4a07      	ldr	r2, [pc, #28]	@ (8006cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ca4:	4b04      	ldr	r3, [pc, #16]	@ (8006cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	58024400 	.word	0x58024400
 8006cb4:	08010618 	.word	0x08010618
 8006cb8:	24000008 	.word	0x24000008
 8006cbc:	24000004 	.word	0x24000004

08006cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006cc4:	f7ff ffcc 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	091b      	lsrs	r3, r3, #4
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	4904      	ldr	r1, [pc, #16]	@ (8006ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006cd6:	5ccb      	ldrb	r3, [r1, r3]
 8006cd8:	f003 031f 	and.w	r3, r3, #31
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	58024400 	.word	0x58024400
 8006ce8:	08010618 	.word	0x08010618

08006cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006cf0:	f7ff ffb6 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	4b06      	ldr	r3, [pc, #24]	@ (8006d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d02:	5ccb      	ldrb	r3, [r1, r3]
 8006d04:	f003 031f 	and.w	r3, r3, #31
 8006d08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	58024400 	.word	0x58024400
 8006d14:	08010618 	.word	0x08010618

08006d18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d1c:	b0ca      	sub	sp, #296	@ 0x128
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d38:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006d3c:	2500      	movs	r5, #0
 8006d3e:	ea54 0305 	orrs.w	r3, r4, r5
 8006d42:	d049      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d4e:	d02f      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006d50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d54:	d828      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d5a:	d01a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d60:	d822      	bhi.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d6a:	d007      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d6c:	e01c      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d6e:	4bb8      	ldr	r3, [pc, #736]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	4ab7      	ldr	r2, [pc, #732]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d7a:	e01a      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d80:	3308      	adds	r3, #8
 8006d82:	2102      	movs	r1, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 fc8f 	bl	80086a8 <RCCEx_PLL2_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d90:	e00f      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d96:	3328      	adds	r3, #40	@ 0x28
 8006d98:	2102      	movs	r1, #2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f001 fd36 	bl	800880c <RCCEx_PLL3_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006da6:	e004      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dae:	e000      	b.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10a      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006dba:	4ba5      	ldr	r3, [pc, #660]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dbe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006dc8:	4aa1      	ldr	r2, [pc, #644]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6513      	str	r3, [r2, #80]	@ 0x50
 8006dce:	e003      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006de4:	f04f 0900 	mov.w	r9, #0
 8006de8:	ea58 0309 	orrs.w	r3, r8, r9
 8006dec:	d047      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d82a      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006df8:	a201      	add	r2, pc, #4	@ (adr r2, 8006e00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfe:	bf00      	nop
 8006e00:	08006e15 	.word	0x08006e15
 8006e04:	08006e23 	.word	0x08006e23
 8006e08:	08006e39 	.word	0x08006e39
 8006e0c:	08006e57 	.word	0x08006e57
 8006e10:	08006e57 	.word	0x08006e57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e14:	4b8e      	ldr	r3, [pc, #568]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e18:	4a8d      	ldr	r2, [pc, #564]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e20:	e01a      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e26:	3308      	adds	r3, #8
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 fc3c 	bl	80086a8 <RCCEx_PLL2_Config>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e36:	e00f      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3c:	3328      	adds	r3, #40	@ 0x28
 8006e3e:	2100      	movs	r1, #0
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 fce3 	bl	800880c <RCCEx_PLL3_Config>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e4c:	e004      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e54:	e000      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e60:	4b7b      	ldr	r3, [pc, #492]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e64:	f023 0107 	bic.w	r1, r3, #7
 8006e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e6e:	4a78      	ldr	r2, [pc, #480]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e70:	430b      	orrs	r3, r1
 8006e72:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e74:	e003      	b.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e8a:	f04f 0b00 	mov.w	fp, #0
 8006e8e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e92:	d04c      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e9e:	d030      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006ea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea4:	d829      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ea6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ea8:	d02d      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006eaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006eac:	d825      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eae:	2b80      	cmp	r3, #128	@ 0x80
 8006eb0:	d018      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d821      	bhi.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006eba:	2b40      	cmp	r3, #64	@ 0x40
 8006ebc:	d007      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ebe:	e01c      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec0:	4b63      	ldr	r3, [pc, #396]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	4a62      	ldr	r2, [pc, #392]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ecc:	e01c      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 fbe6 	bl	80086a8 <RCCEx_PLL2_Config>
 8006edc:	4603      	mov	r3, r0
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ee2:	e011      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee8:	3328      	adds	r3, #40	@ 0x28
 8006eea:	2100      	movs	r1, #0
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fc8d 	bl	800880c <RCCEx_PLL3_Config>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ef8:	e006      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f00:	e002      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f02:	bf00      	nop
 8006f04:	e000      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10a      	bne.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006f10:	4b4f      	ldr	r3, [pc, #316]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f1e:	4a4c      	ldr	r2, [pc, #304]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f20:	430b      	orrs	r3, r1
 8006f22:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006f3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006f44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	d053      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f5a:	d035      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f60:	d82e      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f66:	d031      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f6c:	d828      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f72:	d01a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f78:	d822      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f82:	d007      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f84:	e01c      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f86:	4b32      	ldr	r3, [pc, #200]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	4a31      	ldr	r2, [pc, #196]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f92:	e01c      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f98:	3308      	adds	r3, #8
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f001 fb83 	bl	80086a8 <RCCEx_PLL2_Config>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006fa8:	e011      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fae:	3328      	adds	r3, #40	@ 0x28
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f001 fc2a 	bl	800880c <RCCEx_PLL3_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006fbe:	e006      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fc8:	bf00      	nop
 8006fca:	e000      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fda:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8007050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fec:	e003      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007002:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007006:	2300      	movs	r3, #0
 8007008:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800700c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007010:	460b      	mov	r3, r1
 8007012:	4313      	orrs	r3, r2
 8007014:	d056      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800701e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007022:	d038      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007024:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007028:	d831      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800702a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800702e:	d034      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007030:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007034:	d82b      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007036:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800703a:	d01d      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800703c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007040:	d825      	bhi.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d006      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800704c:	e01f      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800704e:	bf00      	nop
 8007050:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007054:	4ba2      	ldr	r3, [pc, #648]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007058:	4aa1      	ldr	r2, [pc, #644]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800705a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800705e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007060:	e01c      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	3308      	adds	r3, #8
 8007068:	2100      	movs	r1, #0
 800706a:	4618      	mov	r0, r3
 800706c:	f001 fb1c 	bl	80086a8 <RCCEx_PLL2_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007076:	e011      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707c:	3328      	adds	r3, #40	@ 0x28
 800707e:	2100      	movs	r1, #0
 8007080:	4618      	mov	r0, r3
 8007082:	f001 fbc3 	bl	800880c <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800708c:	e006      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007094:	e002      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800709a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10b      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070a4:	4b8e      	ldr	r3, [pc, #568]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80070b4:	4a8a      	ldr	r2, [pc, #552]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80070ba:	e003      	b.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80070d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80070d4:	2300      	movs	r3, #0
 80070d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80070da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80070de:	460b      	mov	r3, r1
 80070e0:	4313      	orrs	r3, r2
 80070e2:	d03a      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80070e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ea:	2b30      	cmp	r3, #48	@ 0x30
 80070ec:	d01f      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80070ee:	2b30      	cmp	r3, #48	@ 0x30
 80070f0:	d819      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d00c      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070f6:	2b20      	cmp	r3, #32
 80070f8:	d815      	bhi.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d019      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d111      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007102:	4b77      	ldr	r3, [pc, #476]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	4a76      	ldr	r2, [pc, #472]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800710e:	e011      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	3308      	adds	r3, #8
 8007116:	2102      	movs	r1, #2
 8007118:	4618      	mov	r0, r3
 800711a:	f001 fac5 	bl	80086a8 <RCCEx_PLL2_Config>
 800711e:	4603      	mov	r3, r0
 8007120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007124:	e006      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800712c:	e002      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800712e:	bf00      	nop
 8007130:	e000      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007134:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800713c:	4b68      	ldr	r3, [pc, #416]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800713e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007140:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800714a:	4a65      	ldr	r2, [pc, #404]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800714c:	430b      	orrs	r3, r1
 800714e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007150:	e003      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800715a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007162:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007166:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800716a:	2300      	movs	r3, #0
 800716c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007170:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007174:	460b      	mov	r3, r1
 8007176:	4313      	orrs	r3, r2
 8007178:	d051      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800717e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007184:	d035      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800718a:	d82e      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800718c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007190:	d031      	beq.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007192:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007196:	d828      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800719c:	d01a      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800719e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a2:	d822      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d003      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80071a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ac:	d007      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80071ae:	e01c      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b0:	4b4b      	ldr	r3, [pc, #300]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b4:	4a4a      	ldr	r2, [pc, #296]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071bc:	e01c      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c2:	3308      	adds	r3, #8
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fa6e 	bl	80086a8 <RCCEx_PLL2_Config>
 80071cc:	4603      	mov	r3, r0
 80071ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071d2:	e011      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d8:	3328      	adds	r3, #40	@ 0x28
 80071da:	2100      	movs	r1, #0
 80071dc:	4618      	mov	r0, r3
 80071de:	f001 fb15 	bl	800880c <RCCEx_PLL3_Config>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80071e8:	e006      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071f0:	e002      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071f2:	bf00      	nop
 80071f4:	e000      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007200:	4b37      	ldr	r3, [pc, #220]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007204:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800720c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800720e:	4a34      	ldr	r2, [pc, #208]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007210:	430b      	orrs	r3, r1
 8007212:	6513      	str	r3, [r2, #80]	@ 0x50
 8007214:	e003      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800721a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800722a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722e:	2300      	movs	r3, #0
 8007230:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007234:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007238:	460b      	mov	r3, r1
 800723a:	4313      	orrs	r3, r2
 800723c:	d056      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007248:	d033      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800724a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800724e:	d82c      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007250:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007254:	d02f      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007256:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800725a:	d826      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800725c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007260:	d02b      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007262:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007266:	d820      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007268:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800726c:	d012      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800726e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007272:	d81a      	bhi.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007274:	2b00      	cmp	r3, #0
 8007276:	d022      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727c:	d115      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	3308      	adds	r3, #8
 8007284:	2101      	movs	r1, #1
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fa0e 	bl	80086a8 <RCCEx_PLL2_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007292:	e015      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007298:	3328      	adds	r3, #40	@ 0x28
 800729a:	2101      	movs	r1, #1
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fab5 	bl	800880c <RCCEx_PLL3_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80072a8:	e00a      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072b0:	e006      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e004      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e002      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80072be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10d      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80072d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072d6:	4a02      	ldr	r2, [pc, #8]	@ (80072e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072d8:	430b      	orrs	r3, r1
 80072da:	6513      	str	r3, [r2, #80]	@ 0x50
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80072de:	bf00      	nop
 80072e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072fc:	2300      	movs	r3, #0
 80072fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007302:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007306:	460b      	mov	r3, r1
 8007308:	4313      	orrs	r3, r2
 800730a:	d055      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800730c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007310:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007318:	d033      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800731a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800731e:	d82c      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007324:	d02f      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800732a:	d826      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800732c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007330:	d02b      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007332:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007336:	d820      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800733c:	d012      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800733e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007342:	d81a      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007344:	2b00      	cmp	r3, #0
 8007346:	d022      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800734c:	d115      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	3308      	adds	r3, #8
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f001 f9a6 	bl	80086a8 <RCCEx_PLL2_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007362:	e015      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	3328      	adds	r3, #40	@ 0x28
 800736a:	2101      	movs	r1, #1
 800736c:	4618      	mov	r0, r3
 800736e:	f001 fa4d 	bl	800880c <RCCEx_PLL3_Config>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007378:	e00a      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007380:	e006      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007382:	bf00      	nop
 8007384:	e004      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007386:	bf00      	nop
 8007388:	e002      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800738a:	bf00      	nop
 800738c:	e000      	b.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800738e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007390:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10b      	bne.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007398:	4ba3      	ldr	r3, [pc, #652]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800739a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800739c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80073a8:	4a9f      	ldr	r2, [pc, #636]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073aa:	430b      	orrs	r3, r1
 80073ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80073c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073c8:	2300      	movs	r3, #0
 80073ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80073ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073d2:	460b      	mov	r3, r1
 80073d4:	4313      	orrs	r3, r2
 80073d6:	d037      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80073d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e2:	d00e      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80073e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073e8:	d816      	bhi.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d018      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80073ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073f2:	d111      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f4:	4b8c      	ldr	r3, [pc, #560]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	4a8b      	ldr	r2, [pc, #556]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007400:	e00f      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007406:	3308      	adds	r3, #8
 8007408:	2101      	movs	r1, #1
 800740a:	4618      	mov	r0, r3
 800740c:	f001 f94c 	bl	80086a8 <RCCEx_PLL2_Config>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007416:	e004      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10a      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800742a:	4b7f      	ldr	r3, [pc, #508]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800742c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800742e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	4a7b      	ldr	r2, [pc, #492]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743a:	430b      	orrs	r3, r1
 800743c:	6513      	str	r3, [r2, #80]	@ 0x50
 800743e:	e003      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007454:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007458:	2300      	movs	r3, #0
 800745a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800745e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007462:	460b      	mov	r3, r1
 8007464:	4313      	orrs	r3, r2
 8007466:	d039      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800746e:	2b03      	cmp	r3, #3
 8007470:	d81c      	bhi.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007472:	a201      	add	r2, pc, #4	@ (adr r2, 8007478 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007478:	080074b5 	.word	0x080074b5
 800747c:	08007489 	.word	0x08007489
 8007480:	08007497 	.word	0x08007497
 8007484:	080074b5 	.word	0x080074b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007488:	4b67      	ldr	r3, [pc, #412]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800748a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748c:	4a66      	ldr	r2, [pc, #408]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800748e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007494:	e00f      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	3308      	adds	r3, #8
 800749c:	2102      	movs	r1, #2
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 f902 	bl	80086a8 <RCCEx_PLL2_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80074aa:	e004      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074b2:	e000      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80074b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80074be:	4b5a      	ldr	r3, [pc, #360]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c2:	f023 0103 	bic.w	r1, r3, #3
 80074c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074cc:	4a56      	ldr	r2, [pc, #344]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ce:	430b      	orrs	r3, r1
 80074d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074d2:	e003      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80074e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074ec:	2300      	movs	r3, #0
 80074ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074f6:	460b      	mov	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f000 809f 	beq.w	800763c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074fe:	4b4b      	ldr	r3, [pc, #300]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a4a      	ldr	r2, [pc, #296]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800750a:	f7fb fa0f 	bl	800292c <HAL_GetTick>
 800750e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007512:	e00b      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007514:	f7fb fa0a 	bl	800292c <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	2b64      	cmp	r3, #100	@ 0x64
 8007522:	d903      	bls.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800752a:	e005      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800752c:	4b3f      	ldr	r3, [pc, #252]	@ (800762c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d0ed      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800753c:	2b00      	cmp	r3, #0
 800753e:	d179      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007540:	4b39      	ldr	r3, [pc, #228]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007542:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007548:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800754c:	4053      	eors	r3, r2
 800754e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d015      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007556:	4b34      	ldr	r3, [pc, #208]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800755e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007562:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	4a30      	ldr	r2, [pc, #192]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800756c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800756e:	4b2e      	ldr	r3, [pc, #184]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007572:	4a2d      	ldr	r2, [pc, #180]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007578:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800757a:	4a2b      	ldr	r2, [pc, #172]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800757c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007580:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007586:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800758a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758e:	d118      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007590:	f7fb f9cc 	bl	800292c <HAL_GetTick>
 8007594:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007598:	e00d      	b.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759a:	f7fb f9c7 	bl	800292c <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80075a4:	1ad2      	subs	r2, r2, r3
 80075a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d903      	bls.n	80075b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80075b4:	e005      	b.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0eb      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80075c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d129      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075da:	d10e      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80075dc:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80075e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075ec:	091a      	lsrs	r2, r3, #4
 80075ee:	4b10      	ldr	r3, [pc, #64]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075f4:	430b      	orrs	r3, r1
 80075f6:	6113      	str	r3, [r2, #16]
 80075f8:	e005      	b.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007600:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007604:	6113      	str	r3, [r2, #16]
 8007606:	4b08      	ldr	r3, [pc, #32]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007608:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800760a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007616:	4a04      	ldr	r2, [pc, #16]	@ (8007628 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007618:	430b      	orrs	r3, r1
 800761a:	6713      	str	r3, [r2, #112]	@ 0x70
 800761c:	e00e      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800761e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007622:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007626:	e009      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007628:	58024400 	.word	0x58024400
 800762c:	58024800 	.word	0x58024800
 8007630:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f002 0301 	and.w	r3, r2, #1
 8007648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800764c:	2300      	movs	r3, #0
 800764e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007652:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007656:	460b      	mov	r3, r1
 8007658:	4313      	orrs	r3, r2
 800765a:	f000 8089 	beq.w	8007770 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800765e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007664:	2b28      	cmp	r3, #40	@ 0x28
 8007666:	d86b      	bhi.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007668:	a201      	add	r2, pc, #4	@ (adr r2, 8007670 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007749 	.word	0x08007749
 8007674:	08007741 	.word	0x08007741
 8007678:	08007741 	.word	0x08007741
 800767c:	08007741 	.word	0x08007741
 8007680:	08007741 	.word	0x08007741
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007741 	.word	0x08007741
 8007690:	08007715 	.word	0x08007715
 8007694:	08007741 	.word	0x08007741
 8007698:	08007741 	.word	0x08007741
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007741 	.word	0x08007741
 80076b0:	0800772b 	.word	0x0800772b
 80076b4:	08007741 	.word	0x08007741
 80076b8:	08007741 	.word	0x08007741
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007741 	.word	0x08007741
 80076c4:	08007741 	.word	0x08007741
 80076c8:	08007741 	.word	0x08007741
 80076cc:	08007741 	.word	0x08007741
 80076d0:	08007749 	.word	0x08007749
 80076d4:	08007741 	.word	0x08007741
 80076d8:	08007741 	.word	0x08007741
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007741 	.word	0x08007741
 80076e4:	08007741 	.word	0x08007741
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007741 	.word	0x08007741
 80076f0:	08007749 	.word	0x08007749
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007741 	.word	0x08007741
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007741 	.word	0x08007741
 8007704:	08007741 	.word	0x08007741
 8007708:	08007741 	.word	0x08007741
 800770c:	08007741 	.word	0x08007741
 8007710:	08007749 	.word	0x08007749
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007718:	3308      	adds	r3, #8
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ffc3 	bl	80086a8 <RCCEx_PLL2_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007728:	e00f      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772e:	3328      	adds	r3, #40	@ 0x28
 8007730:	2101      	movs	r1, #1
 8007732:	4618      	mov	r0, r3
 8007734:	f001 f86a 	bl	800880c <RCCEx_PLL3_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800773e:	e004      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007746:	e000      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800774a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007752:	4bbf      	ldr	r3, [pc, #764]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007756:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007760:	4abb      	ldr	r2, [pc, #748]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007762:	430b      	orrs	r3, r1
 8007764:	6553      	str	r3, [r2, #84]	@ 0x54
 8007766:	e003      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007768:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f002 0302 	and.w	r3, r2, #2
 800777c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007780:	2300      	movs	r3, #0
 8007782:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007786:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d041      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007796:	2b05      	cmp	r3, #5
 8007798:	d824      	bhi.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077cf 	.word	0x080077cf
 80077ac:	080077ed 	.word	0x080077ed
 80077b0:	080077ed 	.word	0x080077ed
 80077b4:	080077ed 	.word	0x080077ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077bc:	3308      	adds	r3, #8
 80077be:	2101      	movs	r1, #1
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 ff71 	bl	80086a8 <RCCEx_PLL2_Config>
 80077c6:	4603      	mov	r3, r0
 80077c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077cc:	e00f      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	3328      	adds	r3, #40	@ 0x28
 80077d4:	2101      	movs	r1, #1
 80077d6:	4618      	mov	r0, r3
 80077d8:	f001 f818 	bl	800880c <RCCEx_PLL3_Config>
 80077dc:	4603      	mov	r3, r0
 80077de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80077e2:	e004      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ea:	e000      	b.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80077ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10a      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077f6:	4b96      	ldr	r3, [pc, #600]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fa:	f023 0107 	bic.w	r1, r3, #7
 80077fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007802:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007804:	4a92      	ldr	r2, [pc, #584]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007806:	430b      	orrs	r3, r1
 8007808:	6553      	str	r3, [r2, #84]	@ 0x54
 800780a:	e003      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	f002 0304 	and.w	r3, r2, #4
 8007820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800782a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d044      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800783c:	2b05      	cmp	r3, #5
 800783e:	d825      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007840:	a201      	add	r2, pc, #4	@ (adr r2, 8007848 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	08007895 	.word	0x08007895
 800784c:	08007861 	.word	0x08007861
 8007850:	08007877 	.word	0x08007877
 8007854:	08007895 	.word	0x08007895
 8007858:	08007895 	.word	0x08007895
 800785c:	08007895 	.word	0x08007895
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	3308      	adds	r3, #8
 8007866:	2101      	movs	r1, #1
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ff1d 	bl	80086a8 <RCCEx_PLL2_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007874:	e00f      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f000 ffc4 	bl	800880c <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007892:	e000      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10b      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800789e:	4b6c      	ldr	r3, [pc, #432]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078a2:	f023 0107 	bic.w	r1, r3, #7
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ae:	4a68      	ldr	r2, [pc, #416]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80078b4:	e003      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f002 0320 	and.w	r3, r2, #32
 80078ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80078d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d055      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ea:	d033      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80078ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078f0:	d82c      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f6:	d02f      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078fc:	d826      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007902:	d02b      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007904:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007908:	d820      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800790a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800790e:	d012      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007914:	d81a      	bhi.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d022      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800791a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800791e:	d115      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007924:	3308      	adds	r3, #8
 8007926:	2100      	movs	r1, #0
 8007928:	4618      	mov	r0, r3
 800792a:	f000 febd 	bl	80086a8 <RCCEx_PLL2_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007934:	e015      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793a:	3328      	adds	r3, #40	@ 0x28
 800793c:	2102      	movs	r1, #2
 800793e:	4618      	mov	r0, r3
 8007940:	f000 ff64 	bl	800880c <RCCEx_PLL3_Config>
 8007944:	4603      	mov	r3, r0
 8007946:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800794a:	e00a      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007952:	e006      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007954:	bf00      	nop
 8007956:	e004      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007958:	bf00      	nop
 800795a:	e002      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800795c:	bf00      	nop
 800795e:	e000      	b.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800796a:	4b39      	ldr	r3, [pc, #228]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800797a:	4a35      	ldr	r2, [pc, #212]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800797c:	430b      	orrs	r3, r1
 800797e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007980:	e003      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800798a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007996:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80079a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80079a4:	460b      	mov	r3, r1
 80079a6:	4313      	orrs	r3, r2
 80079a8:	d058      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079b6:	d033      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80079b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079bc:	d82c      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c2:	d02f      	beq.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80079c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079c8:	d826      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079ce:	d02b      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80079d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079d4:	d820      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079da:	d012      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80079dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e0:	d81a      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d022      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80079e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079ea:	d115      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f0:	3308      	adds	r3, #8
 80079f2:	2100      	movs	r1, #0
 80079f4:	4618      	mov	r0, r3
 80079f6:	f000 fe57 	bl	80086a8 <RCCEx_PLL2_Config>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a00:	e015      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	3328      	adds	r3, #40	@ 0x28
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fefe 	bl	800880c <RCCEx_PLL3_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007a16:	e00a      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a1e:	e006      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a20:	bf00      	nop
 8007a22:	e004      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a24:	bf00      	nop
 8007a26:	e002      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a28:	bf00      	nop
 8007a2a:	e000      	b.n	8007a2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10e      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a36:	4b06      	ldr	r3, [pc, #24]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a3a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a42:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a46:	4a02      	ldr	r2, [pc, #8]	@ (8007a50 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a4c:	e006      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007a4e:	bf00      	nop
 8007a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d055      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a84:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a88:	d033      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a8e:	d82c      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a94:	d02f      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a9a:	d826      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a9c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007aa0:	d02b      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007aa2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007aa6:	d820      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aac:	d012      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007aae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ab2:	d81a      	bhi.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d022      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007abc:	d115      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fdee 	bl	80086a8 <RCCEx_PLL2_Config>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ad2:	e015      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	3328      	adds	r3, #40	@ 0x28
 8007ada:	2102      	movs	r1, #2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fe95 	bl	800880c <RCCEx_PLL3_Config>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007af0:	e006      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007af2:	bf00      	nop
 8007af4:	e004      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007af6:	bf00      	nop
 8007af8:	e002      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10b      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007b08:	4ba1      	ldr	r3, [pc, #644]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b0c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b18:	4a9d      	ldr	r2, [pc, #628]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1a:	430b      	orrs	r3, r1
 8007b1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b1e:	e003      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f002 0308 	and.w	r3, r2, #8
 8007b34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b3e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007b42:	460b      	mov	r3, r1
 8007b44:	4313      	orrs	r3, r2
 8007b46:	d01e      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b54:	d10c      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	3328      	adds	r3, #40	@ 0x28
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fe54 	bl	800880c <RCCEx_PLL3_Config>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b70:	4b87      	ldr	r3, [pc, #540]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b74:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b80:	4a83      	ldr	r2, [pc, #524]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f002 0310 	and.w	r3, r2, #16
 8007b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b9c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d01e      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007baa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007bb2:	d10c      	bne.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb8:	3328      	adds	r3, #40	@ 0x28
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fe25 	bl	800880c <RCCEx_PLL3_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007bce:	4b70      	ldr	r3, [pc, #448]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bd2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007bde:	4a6c      	ldr	r2, [pc, #432]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be0:	430b      	orrs	r3, r1
 8007be2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007bf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bfa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	d03e      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c10:	d022      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007c12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c16:	d81b      	bhi.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c20:	d00b      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007c22:	e015      	b.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c28:	3308      	adds	r3, #8
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fd3b 	bl	80086a8 <RCCEx_PLL2_Config>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c38:	e00f      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c3e:	3328      	adds	r3, #40	@ 0x28
 8007c40:	2102      	movs	r1, #2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fde2 	bl	800880c <RCCEx_PLL3_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007c4e:	e004      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c56:	e000      	b.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c62:	4b4b      	ldr	r3, [pc, #300]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c66:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c72:	4a47      	ldr	r2, [pc, #284]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c74:	430b      	orrs	r3, r1
 8007c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c78:	e003      	b.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c90:	2300      	movs	r3, #0
 8007c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c94:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c98:	460b      	mov	r3, r1
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	d03b      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007caa:	d01f      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007cac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007cb0:	d818      	bhi.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cb6:	d003      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007cb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007cbc:	d007      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007cbe:	e011      	b.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cc0:	4b33      	ldr	r3, [pc, #204]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc4:	4a32      	ldr	r2, [pc, #200]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ccc:	e00f      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd2:	3328      	adds	r3, #40	@ 0x28
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fd98 	bl	800880c <RCCEx_PLL3_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007ce2:	e004      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cea:	e000      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007cf6:	4b26      	ldr	r3, [pc, #152]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d06:	4a22      	ldr	r2, [pc, #136]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d0c:	e003      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8007d24:	2300      	movs	r3, #0
 8007d26:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	d034      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007d3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d40:	d007      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007d42:	e011      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d44:	4b12      	ldr	r3, [pc, #72]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d48:	4a11      	ldr	r2, [pc, #68]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d50:	e00e      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d56:	3308      	adds	r3, #8
 8007d58:	2102      	movs	r1, #2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fca4 	bl	80086a8 <RCCEx_PLL2_Config>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d66:	e003      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10d      	bne.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d7c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d86:	4a02      	ldr	r2, [pc, #8]	@ (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d8c:	e006      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007da8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007daa:	2300      	movs	r3, #0
 8007dac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007dae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007db2:	460b      	mov	r3, r1
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d00c      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	3328      	adds	r3, #40	@ 0x28
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fd23 	bl	800880c <RCCEx_PLL3_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007dde:	663b      	str	r3, [r7, #96]	@ 0x60
 8007de0:	2300      	movs	r3, #0
 8007de2:	667b      	str	r3, [r7, #100]	@ 0x64
 8007de4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d038      	beq.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dfa:	d018      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007dfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e00:	d811      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e06:	d014      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e0c:	d80b      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e16:	d106      	bne.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e18:	4bc3      	ldr	r3, [pc, #780]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	4ac2      	ldr	r2, [pc, #776]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007e24:	e008      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e2c:	e004      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e2e:	bf00      	nop
 8007e30:	e002      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e32:	bf00      	nop
 8007e34:	e000      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10b      	bne.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e40:	4bb9      	ldr	r3, [pc, #740]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e50:	4ab5      	ldr	r2, [pc, #724]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e52:	430b      	orrs	r3, r1
 8007e54:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e56:	e003      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e6e:	2300      	movs	r3, #0
 8007e70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e76:	460b      	mov	r3, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d009      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e7c:	4baa      	ldr	r3, [pc, #680]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e8a:	4aa7      	ldr	r2, [pc, #668]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ea2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	d00a      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007eac:	4b9e      	ldr	r3, [pc, #632]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ebc:	4a9a      	ldr	r2, [pc, #616]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ed4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4313      	orrs	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ede:	4b92      	ldr	r3, [pc, #584]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eec:	4a8e      	ldr	r2, [pc, #568]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007eee:	430b      	orrs	r3, r1
 8007ef0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f00:	2300      	movs	r3, #0
 8007f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d00e      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f0e:	4b86      	ldr	r3, [pc, #536]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	4a85      	ldr	r2, [pc, #532]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f18:	6113      	str	r3, [r2, #16]
 8007f1a:	4b83      	ldr	r3, [pc, #524]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f1c:	6919      	ldr	r1, [r3, #16]
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007f26:	4a80      	ldr	r2, [pc, #512]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007f38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007f42:	460b      	mov	r3, r1
 8007f44:	4313      	orrs	r3, r2
 8007f46:	d009      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f48:	4b77      	ldr	r3, [pc, #476]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f56:	4a74      	ldr	r2, [pc, #464]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f72:	460b      	mov	r3, r1
 8007f74:	4313      	orrs	r3, r2
 8007f76:	d00a      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f78:	4b6b      	ldr	r3, [pc, #428]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f88:	4a67      	ldr	r2, [pc, #412]	@ (8008128 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f8a:	430b      	orrs	r3, r1
 8007f8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	2100      	movs	r1, #0
 8007f98:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fa0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	d011      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fae:	3308      	adds	r3, #8
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fb78 	bl	80086a8 <RCCEx_PLL2_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	6239      	str	r1, [r7, #32]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fe0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	d011      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fee:	3308      	adds	r3, #8
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fb58 	bl	80086a8 <RCCEx_PLL2_Config>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	2100      	movs	r1, #0
 8008018:	61b9      	str	r1, [r7, #24]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	61fb      	str	r3, [r7, #28]
 8008020:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008024:	460b      	mov	r3, r1
 8008026:	4313      	orrs	r3, r2
 8008028:	d011      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800802a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800802e:	3308      	adds	r3, #8
 8008030:	2102      	movs	r1, #2
 8008032:	4618      	mov	r0, r3
 8008034:	f000 fb38 	bl	80086a8 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800803e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	2100      	movs	r1, #0
 8008058:	6139      	str	r1, [r7, #16]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008064:	460b      	mov	r3, r1
 8008066:	4313      	orrs	r3, r2
 8008068:	d011      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	3328      	adds	r3, #40	@ 0x28
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f000 fbca 	bl	800880c <RCCEx_PLL3_Config>
 8008078:	4603      	mov	r3, r0
 800807a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800807e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800808a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800808e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008096:	2100      	movs	r1, #0
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80080a4:	460b      	mov	r3, r1
 80080a6:	4313      	orrs	r3, r2
 80080a8:	d011      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80080aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ae:	3328      	adds	r3, #40	@ 0x28
 80080b0:	2101      	movs	r1, #1
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 fbaa 	bl	800880c <RCCEx_PLL3_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80080ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d6:	2100      	movs	r1, #0
 80080d8:	6039      	str	r1, [r7, #0]
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	607b      	str	r3, [r7, #4]
 80080e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80080e4:	460b      	mov	r3, r1
 80080e6:	4313      	orrs	r3, r2
 80080e8:	d011      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ee:	3328      	adds	r3, #40	@ 0x28
 80080f0:	2102      	movs	r1, #2
 80080f2:	4618      	mov	r0, r3
 80080f4:	f000 fb8a 	bl	800880c <RCCEx_PLL3_Config>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800810e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008116:	2300      	movs	r3, #0
 8008118:	e000      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
}
 800811c:	4618      	mov	r0, r3
 800811e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8008122:	46bd      	mov	sp, r7
 8008124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008128:	58024400 	.word	0x58024400

0800812c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008130:	f7fe fd96 	bl	8006c60 <HAL_RCC_GetHCLKFreq>
 8008134:	4602      	mov	r2, r0
 8008136:	4b06      	ldr	r3, [pc, #24]	@ (8008150 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	091b      	lsrs	r3, r3, #4
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	4904      	ldr	r1, [pc, #16]	@ (8008154 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008142:	5ccb      	ldrb	r3, [r1, r3]
 8008144:	f003 031f 	and.w	r3, r3, #31
 8008148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800814c:	4618      	mov	r0, r3
 800814e:	bd80      	pop	{r7, pc}
 8008150:	58024400 	.word	0x58024400
 8008154:	08010618 	.word	0x08010618

08008158 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008158:	b480      	push	{r7}
 800815a:	b089      	sub	sp, #36	@ 0x24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008160:	4ba1      	ldr	r3, [pc, #644]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800816a:	4b9f      	ldr	r3, [pc, #636]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816e:	0b1b      	lsrs	r3, r3, #12
 8008170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008174:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008176:	4b9c      	ldr	r3, [pc, #624]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	091b      	lsrs	r3, r3, #4
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008182:	4b99      	ldr	r3, [pc, #612]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008186:	08db      	lsrs	r3, r3, #3
 8008188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	fb02 f303 	mul.w	r3, r2, r3
 8008192:	ee07 3a90 	vmov	s15, r3
 8008196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800819a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f000 8111 	beq.w	80083c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	f000 8083 	beq.w	80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	f200 80a1 	bhi.w	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d056      	beq.n	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80081c2:	e099      	b.n	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081c4:	4b88      	ldr	r3, [pc, #544]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d02d      	beq.n	800822c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081d0:	4b85      	ldr	r3, [pc, #532]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	08db      	lsrs	r3, r3, #3
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	4a84      	ldr	r2, [pc, #528]	@ (80083ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80081dc:	fa22 f303 	lsr.w	r3, r2, r3
 80081e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	ee07 3a90 	vmov	s15, r3
 80081e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	ee07 3a90 	vmov	s15, r3
 80081f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fa:	4b7b      	ldr	r3, [pc, #492]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008202:	ee07 3a90 	vmov	s15, r3
 8008206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800820a:	ed97 6a03 	vldr	s12, [r7, #12]
 800820e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800821e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800822a:	e087      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b6a      	ldr	r3, [pc, #424]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800826e:	e065      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b59      	ldr	r3, [pc, #356]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082b2:	e043      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b48      	ldr	r3, [pc, #288]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082f6:	e021      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b37      	ldr	r3, [pc, #220]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a03 	vldr	s12, [r7, #12]
 800831e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80083f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800833a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800833c:	4b2a      	ldr	r3, [pc, #168]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800833e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008340:	0a5b      	lsrs	r3, r3, #9
 8008342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800834e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008356:	edd7 6a07 	vldr	s13, [r7, #28]
 800835a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008362:	ee17 2a90 	vmov	r2, s15
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800836a:	4b1f      	ldr	r3, [pc, #124]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008384:	edd7 6a07 	vldr	s13, [r7, #28]
 8008388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008390:	ee17 2a90 	vmov	r2, s15
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008398:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800839a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839c:	0e1b      	lsrs	r3, r3, #24
 800839e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80083a2:	ee07 3a90 	vmov	s15, r3
 80083a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083be:	ee17 2a90 	vmov	r2, s15
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80083c6:	e008      	b.n	80083da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	609a      	str	r2, [r3, #8]
}
 80083da:	bf00      	nop
 80083dc:	3724      	adds	r7, #36	@ 0x24
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
 80083ec:	03d09000 	.word	0x03d09000
 80083f0:	46000000 	.word	0x46000000
 80083f4:	4c742400 	.word	0x4c742400
 80083f8:	4a742400 	.word	0x4a742400
 80083fc:	4bbebc20 	.word	0x4bbebc20

08008400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008400:	b480      	push	{r7}
 8008402:	b089      	sub	sp, #36	@ 0x24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008408:	4ba1      	ldr	r3, [pc, #644]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800840a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840c:	f003 0303 	and.w	r3, r3, #3
 8008410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008412:	4b9f      	ldr	r3, [pc, #636]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	0d1b      	lsrs	r3, r3, #20
 8008418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800841c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800841e:	4b9c      	ldr	r3, [pc, #624]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800842a:	4b99      	ldr	r3, [pc, #612]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800842c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800842e:	08db      	lsrs	r3, r3, #3
 8008430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 8111 	beq.w	8008670 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b02      	cmp	r3, #2
 8008452:	f000 8083 	beq.w	800855c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	2b02      	cmp	r3, #2
 800845a:	f200 80a1 	bhi.w	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d056      	beq.n	8008518 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800846a:	e099      	b.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800846c:	4b88      	ldr	r3, [pc, #544]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f003 0320 	and.w	r3, r3, #32
 8008474:	2b00      	cmp	r3, #0
 8008476:	d02d      	beq.n	80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008478:	4b85      	ldr	r3, [pc, #532]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	08db      	lsrs	r3, r3, #3
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	4a84      	ldr	r2, [pc, #528]	@ (8008694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008484:	fa22 f303 	lsr.w	r3, r2, r3
 8008488:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	ee07 3a90 	vmov	s15, r3
 800849a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084a2:	4b7b      	ldr	r3, [pc, #492]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084aa:	ee07 3a90 	vmov	s15, r3
 80084ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80084d2:	e087      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800869c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800850a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008516:	e065      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852a:	4b59      	ldr	r3, [pc, #356]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853a:	ed97 6a03 	vldr	s12, [r7, #12]
 800853e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800854a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800854e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800855a:	e043      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80086a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800856a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856e:	4b48      	ldr	r3, [pc, #288]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008582:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800859e:	e021      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b2:	4b37      	ldr	r3, [pc, #220]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80085e4:	4b2a      	ldr	r3, [pc, #168]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e8:	0a5b      	lsrs	r3, r3, #9
 80085ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085ee:	ee07 3a90 	vmov	s15, r3
 80085f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800860a:	ee17 2a90 	vmov	r2, s15
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008612:	4b1f      	ldr	r3, [pc, #124]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	0c1b      	lsrs	r3, r3, #16
 8008618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800862c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008638:	ee17 2a90 	vmov	r2, s15
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008640:	4b13      	ldr	r3, [pc, #76]	@ (8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	0e1b      	lsrs	r3, r3, #24
 8008646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800864a:	ee07 3a90 	vmov	s15, r3
 800864e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800865a:	edd7 6a07 	vldr	s13, [r7, #28]
 800865e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008666:	ee17 2a90 	vmov	r2, s15
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800866e:	e008      	b.n	8008682 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	609a      	str	r2, [r3, #8]
}
 8008682:	bf00      	nop
 8008684:	3724      	adds	r7, #36	@ 0x24
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	58024400 	.word	0x58024400
 8008694:	03d09000 	.word	0x03d09000
 8008698:	46000000 	.word	0x46000000
 800869c:	4c742400 	.word	0x4c742400
 80086a0:	4a742400 	.word	0x4a742400
 80086a4:	4bbebc20 	.word	0x4bbebc20

080086a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086b6:	4b53      	ldr	r3, [pc, #332]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80086b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d101      	bne.n	80086c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e099      	b.n	80087fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80086c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a4e      	ldr	r2, [pc, #312]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80086cc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086d2:	f7fa f92b 	bl	800292c <HAL_GetTick>
 80086d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086d8:	e008      	b.n	80086ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80086da:	f7fa f927 	bl	800292c <HAL_GetTick>
 80086de:	4602      	mov	r2, r0
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	1ad3      	subs	r3, r2, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d901      	bls.n	80086ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e086      	b.n	80087fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80086ec:	4b45      	ldr	r3, [pc, #276]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1f0      	bne.n	80086da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086f8:	4b42      	ldr	r3, [pc, #264]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80086fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	031b      	lsls	r3, r3, #12
 8008706:	493f      	ldr	r1, [pc, #252]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008708:	4313      	orrs	r3, r2
 800870a:	628b      	str	r3, [r1, #40]	@ 0x28
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	3b01      	subs	r3, #1
 8008712:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	3b01      	subs	r3, #1
 800871c:	025b      	lsls	r3, r3, #9
 800871e:	b29b      	uxth	r3, r3
 8008720:	431a      	orrs	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	3b01      	subs	r3, #1
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	3b01      	subs	r3, #1
 8008736:	061b      	lsls	r3, r3, #24
 8008738:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800873c:	4931      	ldr	r1, [pc, #196]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 800873e:	4313      	orrs	r3, r2
 8008740:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008742:	4b30      	ldr	r3, [pc, #192]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008746:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	492d      	ldr	r1, [pc, #180]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008750:	4313      	orrs	r3, r2
 8008752:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008754:	4b2b      	ldr	r3, [pc, #172]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	f023 0220 	bic.w	r2, r3, #32
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	4928      	ldr	r1, [pc, #160]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008762:	4313      	orrs	r3, r2
 8008764:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008766:	4b27      	ldr	r3, [pc, #156]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	4a26      	ldr	r2, [pc, #152]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 800876c:	f023 0310 	bic.w	r3, r3, #16
 8008770:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008772:	4b24      	ldr	r3, [pc, #144]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008776:	4b24      	ldr	r3, [pc, #144]	@ (8008808 <RCCEx_PLL2_Config+0x160>)
 8008778:	4013      	ands	r3, r2
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	69d2      	ldr	r2, [r2, #28]
 800877e:	00d2      	lsls	r2, r2, #3
 8008780:	4920      	ldr	r1, [pc, #128]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008782:	4313      	orrs	r3, r2
 8008784:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008786:	4b1f      	ldr	r3, [pc, #124]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878a:	4a1e      	ldr	r2, [pc, #120]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 800878c:	f043 0310 	orr.w	r3, r3, #16
 8008790:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d106      	bne.n	80087a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008798:	4b1a      	ldr	r3, [pc, #104]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 800879a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879c:	4a19      	ldr	r2, [pc, #100]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 800879e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087a4:	e00f      	b.n	80087c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d106      	bne.n	80087ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087ac:	4b15      	ldr	r3, [pc, #84]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	4a14      	ldr	r2, [pc, #80]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80087b8:	e005      	b.n	80087c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087ba:	4b12      	ldr	r3, [pc, #72]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087be:	4a11      	ldr	r2, [pc, #68]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80087c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d2:	f7fa f8ab 	bl	800292c <HAL_GetTick>
 80087d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087d8:	e008      	b.n	80087ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80087da:	f7fa f8a7 	bl	800292c <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e006      	b.n	80087fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80087ec:	4b05      	ldr	r3, [pc, #20]	@ (8008804 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0f0      	beq.n	80087da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	58024400 	.word	0x58024400
 8008808:	ffff0007 	.word	0xffff0007

0800880c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008816:	2300      	movs	r3, #0
 8008818:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800881a:	4b53      	ldr	r3, [pc, #332]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b03      	cmp	r3, #3
 8008824:	d101      	bne.n	800882a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e099      	b.n	800895e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800882a:	4b4f      	ldr	r3, [pc, #316]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a4e      	ldr	r2, [pc, #312]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008836:	f7fa f879 	bl	800292c <HAL_GetTick>
 800883a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800883c:	e008      	b.n	8008850 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800883e:	f7fa f875 	bl	800292c <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d901      	bls.n	8008850 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800884c:	2303      	movs	r3, #3
 800884e:	e086      	b.n	800895e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008850:	4b45      	ldr	r3, [pc, #276]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1f0      	bne.n	800883e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800885c:	4b42      	ldr	r3, [pc, #264]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 800885e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008860:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	051b      	lsls	r3, r3, #20
 800886a:	493f      	ldr	r1, [pc, #252]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 800886c:	4313      	orrs	r3, r2
 800886e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	3b01      	subs	r3, #1
 8008876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	3b01      	subs	r3, #1
 8008880:	025b      	lsls	r3, r3, #9
 8008882:	b29b      	uxth	r3, r3
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	3b01      	subs	r3, #1
 800888c:	041b      	lsls	r3, r3, #16
 800888e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008892:	431a      	orrs	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	3b01      	subs	r3, #1
 800889a:	061b      	lsls	r3, r3, #24
 800889c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80088a0:	4931      	ldr	r1, [pc, #196]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088a6:	4b30      	ldr	r3, [pc, #192]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	492d      	ldr	r1, [pc, #180]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088b4:	4313      	orrs	r3, r2
 80088b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088b8:	4b2b      	ldr	r3, [pc, #172]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	4928      	ldr	r1, [pc, #160]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088c6:	4313      	orrs	r3, r2
 80088c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80088ca:	4b27      	ldr	r3, [pc, #156]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	4a26      	ldr	r2, [pc, #152]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80088d6:	4b24      	ldr	r3, [pc, #144]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088da:	4b24      	ldr	r3, [pc, #144]	@ (800896c <RCCEx_PLL3_Config+0x160>)
 80088dc:	4013      	ands	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	69d2      	ldr	r2, [r2, #28]
 80088e2:	00d2      	lsls	r2, r2, #3
 80088e4:	4920      	ldr	r1, [pc, #128]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80088ea:	4b1f      	ldr	r3, [pc, #124]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008900:	4a19      	ldr	r2, [pc, #100]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008902:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008906:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008908:	e00f      	b.n	800892a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d106      	bne.n	800891e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008910:	4b15      	ldr	r3, [pc, #84]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008914:	4a14      	ldr	r2, [pc, #80]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008916:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800891a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800891c:	e005      	b.n	800892a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800891e:	4b12      	ldr	r3, [pc, #72]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008922:	4a11      	ldr	r2, [pc, #68]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008924:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008928:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800892a:	4b0f      	ldr	r3, [pc, #60]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a0e      	ldr	r2, [pc, #56]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008936:	f7f9 fff9 	bl	800292c <HAL_GetTick>
 800893a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800893c:	e008      	b.n	8008950 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800893e:	f7f9 fff5 	bl	800292c <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d901      	bls.n	8008950 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e006      	b.n	800895e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008950:	4b05      	ldr	r3, [pc, #20]	@ (8008968 <RCCEx_PLL3_Config+0x15c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d0f0      	beq.n	800893e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800895c:	7bfb      	ldrb	r3, [r7, #15]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	58024400 	.word	0x58024400
 800896c:	ffff0007 	.word	0xffff0007

08008970 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e10f      	b.n	8008ba2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a87      	ldr	r2, [pc, #540]	@ (8008bac <HAL_SPI_Init+0x23c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00f      	beq.n	80089b2 <HAL_SPI_Init+0x42>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a86      	ldr	r2, [pc, #536]	@ (8008bb0 <HAL_SPI_Init+0x240>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d00a      	beq.n	80089b2 <HAL_SPI_Init+0x42>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a84      	ldr	r2, [pc, #528]	@ (8008bb4 <HAL_SPI_Init+0x244>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d005      	beq.n	80089b2 <HAL_SPI_Init+0x42>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b0f      	cmp	r3, #15
 80089ac:	d901      	bls.n	80089b2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	e0f7      	b.n	8008ba2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 fa62 	bl	8009e7c <SPI_GetPacketSize>
 80089b8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a7b      	ldr	r2, [pc, #492]	@ (8008bac <HAL_SPI_Init+0x23c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d00c      	beq.n	80089de <HAL_SPI_Init+0x6e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a79      	ldr	r2, [pc, #484]	@ (8008bb0 <HAL_SPI_Init+0x240>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <HAL_SPI_Init+0x6e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a78      	ldr	r2, [pc, #480]	@ (8008bb4 <HAL_SPI_Init+0x244>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d002      	beq.n	80089de <HAL_SPI_Init+0x6e>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d811      	bhi.n	8008a02 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089e2:	4a72      	ldr	r2, [pc, #456]	@ (8008bac <HAL_SPI_Init+0x23c>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d009      	beq.n	80089fc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a70      	ldr	r2, [pc, #448]	@ (8008bb0 <HAL_SPI_Init+0x240>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d004      	beq.n	80089fc <HAL_SPI_Init+0x8c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a6f      	ldr	r2, [pc, #444]	@ (8008bb4 <HAL_SPI_Init+0x244>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d104      	bne.n	8008a06 <HAL_SPI_Init+0x96>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b10      	cmp	r3, #16
 8008a00:	d901      	bls.n	8008a06 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e0cd      	b.n	8008ba2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d106      	bne.n	8008a20 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7f9 fb4e 	bl	80020bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2202      	movs	r2, #2
 8008a24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 0201 	bic.w	r2, r2, #1
 8008a36:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8008a42:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008a4c:	d119      	bne.n	8008a82 <HAL_SPI_Init+0x112>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a56:	d103      	bne.n	8008a60 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d008      	beq.n	8008a72 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10c      	bne.n	8008a82 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a70:	d107      	bne.n	8008a82 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008a80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00f      	beq.n	8008aae <HAL_SPI_Init+0x13e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	2b06      	cmp	r3, #6
 8008a94:	d90b      	bls.n	8008aae <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	e007      	b.n	8008abe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008abc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad0:	ea42 0103 	orr.w	r1, r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68da      	ldr	r2, [r3, #12]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	430a      	orrs	r2, r1
 8008ade:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	431a      	orrs	r2, r3
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	431a      	orrs	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b1e:	ea42 0103 	orr.w	r1, r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d113      	bne.n	8008b5e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b48:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b5c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40013000 	.word	0x40013000
 8008bb0:	40003800 	.word	0x40003800
 8008bb4:	40003c00 	.word	0x40003c00

08008bb8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af02      	add	r7, sp, #8
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	3320      	adds	r3, #32
 8008bce:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bd0:	f7f9 feac 	bl	800292c <HAL_GetTick>
 8008bd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d001      	beq.n	8008be6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8008be2:	2302      	movs	r3, #2
 8008be4:	e1d1      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <HAL_SPI_Transmit+0x3a>
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e1c9      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_SPI_Transmit+0x4c>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e1c2      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2203      	movs	r2, #3
 8008c10:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	88fa      	ldrh	r2, [r7, #6]
 8008c26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008c5c:	d108      	bne.n	8008c70 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	e009      	b.n	8008c84 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008c82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	4b96      	ldr	r3, [pc, #600]	@ (8008ee4 <HAL_SPI_Transmit+0x32c>)
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	88f9      	ldrh	r1, [r7, #6]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	6812      	ldr	r2, [r2, #0]
 8008c94:	430b      	orrs	r3, r1
 8008c96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cb0:	d107      	bne.n	8008cc2 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	2b0f      	cmp	r3, #15
 8008cc8:	d947      	bls.n	8008d5a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008cca:	e03f      	b.n	8008d4c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d114      	bne.n	8008d04 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008d02:	e023      	b.n	8008d4c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d04:	f7f9 fe12 	bl	800292c <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d803      	bhi.n	8008d1c <HAL_SPI_Transmit+0x164>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d1a:	d102      	bne.n	8008d22 <HAL_SPI_Transmit+0x16a>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d114      	bne.n	8008d4c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 ffdc 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008d48:	2303      	movs	r3, #3
 8008d4a:	e11e      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1b9      	bne.n	8008ccc <HAL_SPI_Transmit+0x114>
 8008d58:	e0f1      	b.n	8008f3e <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	2b07      	cmp	r3, #7
 8008d60:	f240 80e6 	bls.w	8008f30 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d64:	e05d      	b.n	8008e22 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d132      	bne.n	8008dda <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d918      	bls.n	8008db2 <HAL_SPI_Transmit+0x1fa>
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d014      	beq.n	8008db2 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6812      	ldr	r2, [r2, #0]
 8008d92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d98:	1d1a      	adds	r2, r3, #4
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b02      	subs	r3, #2
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008db0:	e037      	b.n	8008e22 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db6:	881a      	ldrh	r2, [r3, #0]
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dc0:	1c9a      	adds	r2, r3, #2
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008dd8:	e023      	b.n	8008e22 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dda:	f7f9 fda7 	bl	800292c <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d803      	bhi.n	8008df2 <HAL_SPI_Transmit+0x23a>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d102      	bne.n	8008df8 <HAL_SPI_Transmit+0x240>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d114      	bne.n	8008e22 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 ff71 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e0b3      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d19b      	bne.n	8008d66 <HAL_SPI_Transmit+0x1ae>
 8008e2e:	e086      	b.n	8008f3e <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d154      	bne.n	8008ee8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b03      	cmp	r3, #3
 8008e48:	d918      	bls.n	8008e7c <HAL_SPI_Transmit+0x2c4>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4e:	2b40      	cmp	r3, #64	@ 0x40
 8008e50:	d914      	bls.n	8008e7c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6812      	ldr	r2, [r2, #0]
 8008e5c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b04      	subs	r3, #4
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008e7a:	e059      	b.n	8008f30 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d917      	bls.n	8008eb8 <HAL_SPI_Transmit+0x300>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d013      	beq.n	8008eb8 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e94:	881a      	ldrh	r2, [r3, #0]
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9e:	1c9a      	adds	r2, r3, #2
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	3b02      	subs	r3, #2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008eb6:	e03b      	b.n	8008f30 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3320      	adds	r3, #32
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8008ee2:	e025      	b.n	8008f30 <HAL_SPI_Transmit+0x378>
 8008ee4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ee8:	f7f9 fd20 	bl	800292c <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d803      	bhi.n	8008f00 <HAL_SPI_Transmit+0x348>
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efe:	d102      	bne.n	8008f06 <HAL_SPI_Transmit+0x34e>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d114      	bne.n	8008f30 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 feea 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e02c      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f47f af79 	bne.w	8008e30 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	2200      	movs	r2, #0
 8008f46:	2108      	movs	r1, #8
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 ff69 	bl	8009e20 <SPI_WaitOnFlagUntilTimeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d007      	beq.n	8008f64 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f5a:	f043 0220 	orr.w	r2, r3, #32
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 febb 	bl	8009ce0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8008f84:	2301      	movs	r3, #1
 8008f86:	e000      	b.n	8008f8a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8008f88:	2300      	movs	r3, #0
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop

08008f94 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa8:	095b      	lsrs	r3, r3, #5
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3301      	adds	r3, #1
 8008fae:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	3330      	adds	r3, #48	@ 0x30
 8008fb6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008fb8:	f7f9 fcb8 	bl	800292c <HAL_GetTick>
 8008fbc:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d001      	beq.n	8008fce <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e250      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_SPI_Receive+0x46>
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e248      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_SPI_Receive+0x58>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e241      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2204      	movs	r2, #4
 8008ff8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68ba      	ldr	r2, [r7, #8]
 8009008:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	88fa      	ldrh	r2, [r7, #6]
 800900e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2200      	movs	r2, #0
 800901e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2200      	movs	r2, #0
 8009024:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2200      	movs	r2, #0
 800903a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009044:	d108      	bne.n	8009058 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	e009      	b.n	800906c <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800906a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	4b95      	ldr	r3, [pc, #596]	@ (80092c8 <HAL_SPI_Receive+0x334>)
 8009074:	4013      	ands	r3, r2
 8009076:	88f9      	ldrh	r1, [r7, #6]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	6812      	ldr	r2, [r2, #0]
 800907c:	430b      	orrs	r3, r1
 800907e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009098:	d107      	bne.n	80090aa <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090a8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b0f      	cmp	r3, #15
 80090b0:	d96c      	bls.n	800918c <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80090b2:	e064      	b.n	800917e <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d114      	bne.n	80090f4 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090d2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80090d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b01      	subs	r3, #1
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80090f2:	e044      	b.n	800917e <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8bfa      	ldrh	r2, [r7, #30]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d919      	bls.n	8009136 <HAL_SPI_Receive+0x1a2>
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009108:	2b00      	cmp	r3, #0
 800910a:	d014      	beq.n	8009136 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009114:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009116:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800911c:	1d1a      	adds	r2, r3, #4
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009134:	e023      	b.n	800917e <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009136:	f7f9 fbf9 	bl	800292c <HAL_GetTick>
 800913a:	4602      	mov	r2, r0
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	1ad3      	subs	r3, r2, r3
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d803      	bhi.n	800914e <HAL_SPI_Receive+0x1ba>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d102      	bne.n	8009154 <HAL_SPI_Receive+0x1c0>
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d114      	bne.n	800917e <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fdc3 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009160:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e178      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009184:	b29b      	uxth	r3, r3
 8009186:	2b00      	cmp	r3, #0
 8009188:	d194      	bne.n	80090b4 <HAL_SPI_Receive+0x120>
 800918a:	e15e      	b.n	800944a <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	2b07      	cmp	r3, #7
 8009192:	f240 8153 	bls.w	800943c <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8009196:	e08f      	b.n	80092b8 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	f003 0301 	and.w	r3, r3, #1
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d114      	bne.n	80091d8 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	8812      	ldrh	r2, [r2, #0]
 80091b6:	b292      	uxth	r2, r2
 80091b8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091be:	1c9a      	adds	r2, r3, #2
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80091d6:	e06f      	b.n	80092b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80091de:	b29b      	uxth	r3, r3
 80091e0:	8bfa      	ldrh	r2, [r7, #30]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d924      	bls.n	8009230 <HAL_SPI_Receive+0x29c>
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01f      	beq.n	8009230 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	8812      	ldrh	r2, [r2, #0]
 80091f8:	b292      	uxth	r2, r2
 80091fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009200:	1c9a      	adds	r2, r3, #2
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	b292      	uxth	r2, r2
 8009210:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009216:	1c9a      	adds	r2, r3, #2
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b02      	subs	r3, #2
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800922e:	e043      	b.n	80092b8 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009236:	b29b      	uxth	r3, r3
 8009238:	2b01      	cmp	r3, #1
 800923a:	d119      	bne.n	8009270 <HAL_SPI_Receive+0x2dc>
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d014      	beq.n	8009270 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800924a:	69ba      	ldr	r2, [r7, #24]
 800924c:	8812      	ldrh	r2, [r2, #0]
 800924e:	b292      	uxth	r2, r2
 8009250:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009256:	1c9a      	adds	r2, r3, #2
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009262:	b29b      	uxth	r3, r3
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800926e:	e023      	b.n	80092b8 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009270:	f7f9 fb5c 	bl	800292c <HAL_GetTick>
 8009274:	4602      	mov	r2, r0
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	429a      	cmp	r2, r3
 800927e:	d803      	bhi.n	8009288 <HAL_SPI_Receive+0x2f4>
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009286:	d102      	bne.n	800928e <HAL_SPI_Receive+0x2fa>
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d114      	bne.n	80092b8 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f000 fd26 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800929a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e0db      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f47f af69 	bne.w	8009198 <HAL_SPI_Receive+0x204>
 80092c6:	e0c0      	b.n	800944a <HAL_SPI_Receive+0x4b6>
 80092c8:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d117      	bne.n	8009312 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ee:	7812      	ldrb	r2, [r2, #0]
 80092f0:	b2d2      	uxtb	r2, r2
 80092f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092f8:	1c5a      	adds	r2, r3, #1
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009310:	e094      	b.n	800943c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009318:	b29b      	uxth	r3, r3
 800931a:	8bfa      	ldrh	r2, [r7, #30]
 800931c:	429a      	cmp	r2, r3
 800931e:	d946      	bls.n	80093ae <HAL_SPI_Receive+0x41a>
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d041      	beq.n	80093ae <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009336:	7812      	ldrb	r2, [r2, #0]
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009352:	7812      	ldrb	r2, [r2, #0]
 8009354:	b2d2      	uxtb	r2, r2
 8009356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800936e:	7812      	ldrb	r2, [r2, #0]
 8009370:	b2d2      	uxtb	r2, r2
 8009372:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938a:	7812      	ldrb	r2, [r2, #0]
 800938c:	b2d2      	uxtb	r2, r2
 800938e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009394:	1c5a      	adds	r2, r3, #1
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	3b04      	subs	r3, #4
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093ac:	e046      	b.n	800943c <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d81c      	bhi.n	80093f4 <HAL_SPI_Receive+0x460>
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d017      	beq.n	80093f4 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	b2d2      	uxtb	r2, r2
 80093d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80093da:	1c5a      	adds	r2, r3, #1
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80093f2:	e023      	b.n	800943c <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093f4:	f7f9 fa9a 	bl	800292c <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d803      	bhi.n	800940c <HAL_SPI_Receive+0x478>
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800940a:	d102      	bne.n	8009412 <HAL_SPI_Receive+0x47e>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d114      	bne.n	800943c <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fc64 	bl	8009ce0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800941e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e019      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	f47f af41 	bne.w	80092cc <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f000 fc48 	bl	8009ce0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800946e:	2300      	movs	r3, #0
  }
}
 8009470:	4618      	mov	r0, r3
 8009472:	3720      	adds	r7, #32
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
 8009484:	807b      	strh	r3, [r7, #2]
  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b01      	cmp	r3, #1
 8009490:	d001      	beq.n	8009496 <HAL_SPI_TransmitReceive_DMA+0x1e>
  {
    return HAL_BUSY;
 8009492:	2302      	movs	r3, #2
 8009494:	e19c      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <HAL_SPI_TransmitReceive_DMA+0x30>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d002      	beq.n	80094a8 <HAL_SPI_TransmitReceive_DMA+0x30>
 80094a2:	887b      	ldrh	r3, [r7, #2]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d101      	bne.n	80094ac <HAL_SPI_TransmitReceive_DMA+0x34>
  {
    return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e191      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_SPI_TransmitReceive_DMA+0x42>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e18a      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2205      	movs	r2, #5
 80094c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	887a      	ldrh	r2, [r7, #2]
 80094dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	887a      	ldrh	r2, [r7, #2]
 80094e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	887a      	ldrh	r2, [r7, #2]
 80094f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	887a      	ldrh	r2, [r7, #2]
 80094fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8009518:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009528:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	2b0f      	cmp	r3, #15
 8009530:	d90b      	bls.n	800954a <HAL_SPI_TransmitReceive_DMA+0xd2>
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009536:	699b      	ldr	r3, [r3, #24]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && \
 8009538:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800953c:	d121      	bne.n	8009582 <HAL_SPI_TransmitReceive_DMA+0x10a>
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009542:	699b      	ldr	r3, [r3, #24]
       ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD) || \
 8009544:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009548:	d11b      	bne.n	8009582 <HAL_SPI_TransmitReceive_DMA+0x10a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	68db      	ldr	r3, [r3, #12]
        (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))) || \
 800954e:	2b07      	cmp	r3, #7
 8009550:	d91d      	bls.n	800958e <HAL_SPI_TransmitReceive_DMA+0x116>
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009556:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && \
 8009558:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800955c:	d005      	beq.n	800956a <HAL_SPI_TransmitReceive_DMA+0xf2>
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009562:	699b      	ldr	r3, [r3, #24]
       (((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8009564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009568:	d10b      	bne.n	8009582 <HAL_SPI_TransmitReceive_DMA+0x10a>
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800956e:	699b      	ldr	r3, [r3, #24]
         (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)) || \
 8009570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009574:	d00b      	beq.n	800958e <HAL_SPI_TransmitReceive_DMA+0x116>
         (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD)))))
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800957a:	699b      	ldr	r3, [r3, #24]
        ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800957c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009580:	d005      	beq.n	800958e <HAL_SPI_TransmitReceive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e120      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b07      	cmp	r3, #7
 8009594:	d840      	bhi.n	8009618 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095a0:	d109      	bne.n	80095b6 <HAL_SPI_TransmitReceive_DMA+0x13e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3301      	adds	r3, #1
 80095ac:	105b      	asrs	r3, r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c0:	d109      	bne.n	80095d6 <HAL_SPI_TransmitReceive_DMA+0x15e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	3303      	adds	r3, #3
 80095cc:	109b      	asrs	r3, r3, #2
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e0:	d109      	bne.n	80095f6 <HAL_SPI_TransmitReceive_DMA+0x17e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3301      	adds	r3, #1
 80095ec:	105b      	asrs	r3, r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009600:	d12e      	bne.n	8009660 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009608:	b29b      	uxth	r3, r3
 800960a:	3303      	adds	r3, #3
 800960c:	109b      	asrs	r3, r3, #2
 800960e:	b29a      	uxth	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8009616:	e023      	b.n	8009660 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d81f      	bhi.n	8009660 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800962a:	d109      	bne.n	8009640 <HAL_SPI_TransmitReceive_DMA+0x1c8>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009632:	b29b      	uxth	r3, r3
 8009634:	3301      	adds	r3, #1
 8009636:	105b      	asrs	r3, r3, #1
 8009638:	b29a      	uxth	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800964a:	d109      	bne.n	8009660 <HAL_SPI_TransmitReceive_DMA+0x1e8>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009652:	b29b      	uxth	r3, r3
 8009654:	3301      	adds	r3, #1
 8009656:	105b      	asrs	r3, r3, #1
 8009658:	b29a      	uxth	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009664:	4a5c      	ldr	r2, [pc, #368]	@ (80097d8 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8009666:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800966c:	4a5b      	ldr	r2, [pc, #364]	@ (80097dc <HAL_SPI_TransmitReceive_DMA+0x364>)
 800966e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009674:	4a5a      	ldr	r2, [pc, #360]	@ (80097e0 <HAL_SPI_TransmitReceive_DMA+0x368>)
 8009676:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800967c:	2200      	movs	r2, #0
 800967e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3330      	adds	r3, #48	@ 0x30
 800968a:	4619      	mov	r1, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009690:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009698:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800969a:	f7f9 fe67 	bl	800336c <HAL_DMA_Start_IT>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d011      	beq.n	80096c8 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096aa:	f043 0210 	orr.w	r2, r3, #16
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e083      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689a      	ldr	r2, [r3, #8]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80096d6:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096dc:	2200      	movs	r2, #0
 80096de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096e4:	2200      	movs	r2, #0
 80096e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ec:	2200      	movs	r2, #0
 80096ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f4:	4a3a      	ldr	r2, [pc, #232]	@ (80097e0 <HAL_SPI_TransmitReceive_DMA+0x368>)
 80096f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009700:	4619      	mov	r1, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3320      	adds	r3, #32
 8009708:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009710:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8009712:	f7f9 fe2b 	bl	800336c <HAL_DMA_Start_IT>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d016      	beq.n	800974a <HAL_SPI_TransmitReceive_DMA+0x2d2>
  {
    /* Abort Rx DMA Channel already started */
    (void)HAL_DMA_Abort(hspi->hdmarx);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009720:	4618      	mov	r0, r3
 8009722:	f7fa f88d 	bl	8003840 <HAL_DMA_Abort>

    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800972c:	f043 0210 	orr.w	r2, r3, #16
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e042      	b.n	80097d0 <HAL_SPI_TransmitReceive_DMA+0x358>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009754:	d108      	bne.n	8009768 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6859      	ldr	r1, [r3, #4]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	4b20      	ldr	r3, [pc, #128]	@ (80097e4 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8009762:	400b      	ands	r3, r1
 8009764:	6053      	str	r3, [r2, #4]
 8009766:	e009      	b.n	800977c <HAL_SPI_TransmitReceive_DMA+0x304>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <HAL_SPI_TransmitReceive_DMA+0x36c>)
 8009770:	4013      	ands	r3, r2
 8009772:	8879      	ldrh	r1, [r7, #2]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	6812      	ldr	r2, [r2, #0]
 8009778:	430b      	orrs	r3, r1
 800977a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800978a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 7258 	orr.w	r2, r2, #864	@ 0x360
 800979a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097b4:	d107      	bne.n	80097c6 <HAL_SPI_TransmitReceive_DMA+0x34e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097c4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	08009c4b 	.word	0x08009c4b
 80097dc:	08009c05 	.word	0x08009c05
 80097e0:	08009c67 	.word	0x08009c67
 80097e4:	ffff0000 	.word	0xffff0000

080097e8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08a      	sub	sp, #40	@ 0x28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8009800:	6a3a      	ldr	r2, [r7, #32]
 8009802:	69fb      	ldr	r3, [r7, #28]
 8009804:	4013      	ands	r3, r2
 8009806:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8009810:	2300      	movs	r3, #0
 8009812:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800981a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3330      	adds	r3, #48	@ 0x30
 8009822:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800982a:	2b00      	cmp	r3, #0
 800982c:	d010      	beq.n	8009850 <HAL_SPI_IRQHandler+0x68>
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	f003 0308 	and.w	r3, r3, #8
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00b      	beq.n	8009850 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009846:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9c3 	bl	8009bd4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800984e:	e192      	b.n	8009b76 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009856:	2b00      	cmp	r3, #0
 8009858:	d113      	bne.n	8009882 <HAL_SPI_IRQHandler+0x9a>
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	f003 0320 	and.w	r3, r3, #32
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10e      	bne.n	8009882 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
    hspi->RxISR(hspi);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
    handled = 1UL;
 800987e:	2301      	movs	r3, #1
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10f      	bne.n	80098ac <HAL_SPI_IRQHandler+0xc4>
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8009896:	69bb      	ldr	r3, [r7, #24]
 8009898:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800989c:	2b00      	cmp	r3, #0
 800989e:	d105      	bne.n	80098ac <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	4798      	blx	r3
    handled = 1UL;
 80098a8:	2301      	movs	r3, #1
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10f      	bne.n	80098d6 <HAL_SPI_IRQHandler+0xee>
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d105      	bne.n	80098d6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	4798      	blx	r3
    handled = 1UL;
 80098d2:	2301      	movs	r3, #1
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80098d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d8:	2b00      	cmp	r3, #0
 80098da:	f040 8147 	bne.w	8009b6c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	f003 0308 	and.w	r3, r3, #8
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 808b 	beq.w	8009a00 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	699a      	ldr	r2, [r3, #24]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0208 	orr.w	r2, r2, #8
 80098f8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0210 	orr.w	r2, r2, #16
 8009908:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	699a      	ldr	r2, [r3, #24]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009918:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f022 0208 	bic.w	r2, r2, #8
 8009928:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d13d      	bne.n	80099b4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8009938:	e036      	b.n	80099a8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	2b0f      	cmp	r3, #15
 8009940:	d90b      	bls.n	800995a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800994a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800994c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	665a      	str	r2, [r3, #100]	@ 0x64
 8009958:	e01d      	b.n	8009996 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	2b07      	cmp	r3, #7
 8009960:	d90b      	bls.n	800997a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	8812      	ldrh	r2, [r2, #0]
 800996a:	b292      	uxth	r2, r2
 800996c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009972:	1c9a      	adds	r2, r3, #2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	665a      	str	r2, [r3, #100]	@ 0x64
 8009978:	e00d      	b.n	8009996 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009986:	7812      	ldrb	r2, [r2, #0]
 8009988:	b2d2      	uxtb	r2, r2
 800998a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800999c:	b29b      	uxth	r3, r3
 800999e:	3b01      	subs	r3, #1
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d1c2      	bne.n	800993a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f993 	bl	8009ce0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d003      	beq.n	80099d4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f8f7 	bl	8009bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80099d2:	e0d0      	b.n	8009b76 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80099d4:	7cfb      	ldrb	r3, [r7, #19]
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	d103      	bne.n	80099e2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7f7 ffa8 	bl	8001930 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80099e0:	e0c6      	b.n	8009b70 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80099e2:	7cfb      	ldrb	r3, [r7, #19]
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d103      	bne.n	80099f0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f8d5 	bl	8009b98 <HAL_SPI_RxCpltCallback>
    return;
 80099ee:	e0bf      	b.n	8009b70 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80099f0:	7cfb      	ldrb	r3, [r7, #19]
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	f040 80bc 	bne.w	8009b70 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8c3 	bl	8009b84 <HAL_SPI_TxCpltCallback>
    return;
 80099fe:	e0b7      	b.n	8009b70 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f000 80b5 	beq.w	8009b76 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00f      	beq.n	8009a36 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a1c:	f043 0204 	orr.w	r2, r3, #4
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	699a      	ldr	r2, [r3, #24]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a34:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00f      	beq.n	8009a60 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a46:	f043 0201 	orr.w	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699a      	ldr	r2, [r3, #24]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a5e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00f      	beq.n	8009a8a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a70:	f043 0208 	orr.w	r2, r3, #8
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	699a      	ldr	r2, [r3, #24]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009a88:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00f      	beq.n	8009ab4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	699a      	ldr	r2, [r3, #24]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0220 	orr.w	r2, r2, #32
 8009ab2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d05a      	beq.n	8009b74 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f022 0201 	bic.w	r2, r2, #1
 8009acc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	6919      	ldr	r1, [r3, #16]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b28      	ldr	r3, [pc, #160]	@ (8009b7c <HAL_SPI_IRQHandler+0x394>)
 8009ada:	400b      	ands	r3, r1
 8009adc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009ae4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009ae8:	d138      	bne.n	8009b5c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689a      	ldr	r2, [r3, #8]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009af8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d013      	beq.n	8009b2a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b06:	4a1e      	ldr	r2, [pc, #120]	@ (8009b80 <HAL_SPI_IRQHandler+0x398>)
 8009b08:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fa f9b4 	bl	8003e7c <HAL_DMA_Abort_IT>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d007      	beq.n	8009b2a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d020      	beq.n	8009b74 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b36:	4a12      	ldr	r2, [pc, #72]	@ (8009b80 <HAL_SPI_IRQHandler+0x398>)
 8009b38:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7fa f99c 	bl	8003e7c <HAL_DMA_Abort_IT>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d014      	beq.n	8009b74 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b50:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009b5a:	e00b      	b.n	8009b74 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f82b 	bl	8009bc0 <HAL_SPI_ErrorCallback>
    return;
 8009b6a:	e003      	b.n	8009b74 <HAL_SPI_IRQHandler+0x38c>
    return;
 8009b6c:	bf00      	nop
 8009b6e:	e002      	b.n	8009b76 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b70:	bf00      	nop
 8009b72:	e000      	b.n	8009b76 <HAL_SPI_IRQHandler+0x38e>
    return;
 8009b74:	bf00      	nop
  }
}
 8009b76:	3728      	adds	r7, #40	@ 0x28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	fffffc94 	.word	0xfffffc94
 8009b80:	08009cad 	.word	0x08009cad

08009b84 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8009bdc:	bf00      	nop
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_SPI_GetState>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009bf6:	b2db      	uxtb	r3, r3
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c10:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b07      	cmp	r3, #7
 8009c1c:	d011      	beq.n	8009c42 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c28:	d103      	bne.n	8009c32 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7f7 fe80 	bl	8001930 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8009c30:	e007      	b.n	8009c42 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691a      	ldr	r2, [r3, #16]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0208 	orr.w	r2, r2, #8
 8009c40:	611a      	str	r2, [r3, #16]
}
 8009c42:	bf00      	nop
 8009c44:	3710      	adds	r7, #16
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b084      	sub	sp, #16
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c56:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff ffa7 	bl	8009bac <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c72:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7fb fa71 	bl	800515c <HAL_DMA_GetError>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d011      	beq.n	8009ca4 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f82d 	bl	8009ce0 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c8c:	f043 0210 	orr.w	r2, r3, #16
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009c9e:	68f8      	ldr	r0, [r7, #12]
 8009ca0:	f7ff ff8e 	bl	8009bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009ca4:	bf00      	nop
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009cd2:	68f8      	ldr	r0, [r7, #12]
 8009cd4:	f7ff ff74 	bl	8009bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009cd8:	bf00      	nop
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699a      	ldr	r2, [r3, #24]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0208 	orr.w	r2, r2, #8
 8009cfe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	699a      	ldr	r2, [r3, #24]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0210 	orr.w	r2, r2, #16
 8009d0e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6919      	ldr	r1, [r3, #16]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4b3c      	ldr	r3, [pc, #240]	@ (8009e1c <SPI_CloseTransfer+0x13c>)
 8009d2c:	400b      	ands	r3, r1
 8009d2e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009d3e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b04      	cmp	r3, #4
 8009d4a:	d014      	beq.n	8009d76 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00f      	beq.n	8009d76 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d5c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	699a      	ldr	r2, [r3, #24]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f042 0220 	orr.w	r2, r2, #32
 8009d74:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d014      	beq.n	8009dac <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00f      	beq.n	8009dac <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d92:	f043 0204 	orr.w	r2, r3, #4
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	699a      	ldr	r2, [r3, #24]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009daa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00f      	beq.n	8009dd6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dbc:	f043 0201 	orr.w	r2, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699a      	ldr	r2, [r3, #24]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009dd4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00f      	beq.n	8009e00 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de6:	f043 0208 	orr.w	r2, r3, #8
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009dfe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	fffffc90 	.word	0xfffffc90

08009e20 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e30:	e010      	b.n	8009e54 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e32:	f7f8 fd7b 	bl	800292c <HAL_GetTick>
 8009e36:	4602      	mov	r2, r0
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	1ad3      	subs	r3, r2, r3
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d803      	bhi.n	8009e4a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d102      	bne.n	8009e50 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e00f      	b.n	8009e74 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	695a      	ldr	r2, [r3, #20]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	bf0c      	ite	eq
 8009e64:	2301      	moveq	r3, #1
 8009e66:	2300      	movne	r3, #0
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	79fb      	ldrb	r3, [r7, #7]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d0df      	beq.n	8009e32 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e88:	095b      	lsrs	r3, r3, #5
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	3307      	adds	r3, #7
 8009e9a:	08db      	lsrs	r3, r3, #3
 8009e9c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	fb02 f303 	mul.w	r3, r2, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3714      	adds	r7, #20
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009eb2:	b580      	push	{r7, lr}
 8009eb4:	b082      	sub	sp, #8
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e049      	b.n	8009f58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d106      	bne.n	8009ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f7f8 fa5f 	bl	800239c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3304      	adds	r3, #4
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	f000 fad5 	bl	800a4a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d001      	beq.n	8009f78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e054      	b.n	800a022 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2202      	movs	r2, #2
 8009f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f042 0201 	orr.w	r2, r2, #1
 8009f8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a26      	ldr	r2, [pc, #152]	@ (800a030 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d022      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa2:	d01d      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a22      	ldr	r2, [pc, #136]	@ (800a034 <HAL_TIM_Base_Start_IT+0xd4>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d018      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	4a21      	ldr	r2, [pc, #132]	@ (800a038 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d013      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800a03c <HAL_TIM_Base_Start_IT+0xdc>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d00e      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a1e      	ldr	r2, [pc, #120]	@ (800a040 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d009      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	@ (800a044 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d004      	beq.n	8009fe0 <HAL_TIM_Base_Start_IT+0x80>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1b      	ldr	r2, [pc, #108]	@ (800a048 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d115      	bne.n	800a00c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689a      	ldr	r2, [r3, #8]
 8009fe6:	4b19      	ldr	r3, [pc, #100]	@ (800a04c <HAL_TIM_Base_Start_IT+0xec>)
 8009fe8:	4013      	ands	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b06      	cmp	r3, #6
 8009ff0:	d015      	beq.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ff8:	d011      	beq.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f042 0201 	orr.w	r2, r2, #1
 800a008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a00a:	e008      	b.n	800a01e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	e000      	b.n	800a020 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40010400 	.word	0x40010400
 800a044:	40001800 	.word	0x40001800
 800a048:	40014000 	.word	0x40014000
 800a04c:	00010007 	.word	0x00010007

0800a050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d020      	beq.n	800a0b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01b      	beq.n	800a0b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f06f 0202 	mvn.w	r2, #2
 800a084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	699b      	ldr	r3, [r3, #24]
 800a092:	f003 0303 	and.w	r3, r3, #3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f9e2 	bl	800a464 <HAL_TIM_IC_CaptureCallback>
 800a0a0:	e005      	b.n	800a0ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 f9d4 	bl	800a450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f9e5 	bl	800a478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f003 0304 	and.w	r3, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d020      	beq.n	800a100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f003 0304 	and.w	r3, r3, #4
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01b      	beq.n	800a100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f06f 0204 	mvn.w	r2, #4
 800a0d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f9bc 	bl	800a464 <HAL_TIM_IC_CaptureCallback>
 800a0ec:	e005      	b.n	800a0fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f9ae 	bl	800a450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 f9bf 	bl	800a478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b00      	cmp	r3, #0
 800a108:	d020      	beq.n	800a14c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f003 0308 	and.w	r3, r3, #8
 800a110:	2b00      	cmp	r3, #0
 800a112:	d01b      	beq.n	800a14c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f06f 0208 	mvn.w	r2, #8
 800a11c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2204      	movs	r2, #4
 800a122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	69db      	ldr	r3, [r3, #28]
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f996 	bl	800a464 <HAL_TIM_IC_CaptureCallback>
 800a138:	e005      	b.n	800a146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f988 	bl	800a450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f999 	bl	800a478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f003 0310 	and.w	r3, r3, #16
 800a152:	2b00      	cmp	r3, #0
 800a154:	d020      	beq.n	800a198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f003 0310 	and.w	r3, r3, #16
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d01b      	beq.n	800a198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f06f 0210 	mvn.w	r2, #16
 800a168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2208      	movs	r2, #8
 800a16e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d003      	beq.n	800a186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f970 	bl	800a464 <HAL_TIM_IC_CaptureCallback>
 800a184:	e005      	b.n	800a192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f962 	bl	800a450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f973 	bl	800a478 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f003 0301 	and.w	r3, r3, #1
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00c      	beq.n	800a1bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d007      	beq.n	800a1bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f06f 0201 	mvn.w	r2, #1
 800a1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f7 fdc4 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d104      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00c      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d007      	beq.n	800a1ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fb31 	bl	800a84c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00c      	beq.n	800a20e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d007      	beq.n	800a20e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fb29 	bl	800a860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00c      	beq.n	800a232 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d007      	beq.n	800a232 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a22a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f92d 	bl	800a48c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00c      	beq.n	800a256 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f06f 0220 	mvn.w	r2, #32
 800a24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 faf1 	bl	800a838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a256:	bf00      	nop
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
	...

0800a260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a274:	2b01      	cmp	r3, #1
 800a276:	d101      	bne.n	800a27c <HAL_TIM_ConfigClockSource+0x1c>
 800a278:	2302      	movs	r3, #2
 800a27a:	e0dc      	b.n	800a436 <HAL_TIM_ConfigClockSource+0x1d6>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a294:	68ba      	ldr	r2, [r7, #8]
 800a296:	4b6a      	ldr	r3, [pc, #424]	@ (800a440 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a298:	4013      	ands	r3, r2
 800a29a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a2a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a64      	ldr	r2, [pc, #400]	@ (800a444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	f000 80a9 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2b8:	4a62      	ldr	r2, [pc, #392]	@ (800a444 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	f200 80ae 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c0:	4a61      	ldr	r2, [pc, #388]	@ (800a448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	f000 80a1 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2c8:	4a5f      	ldr	r2, [pc, #380]	@ (800a448 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	f200 80a6 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d0:	4a5e      	ldr	r2, [pc, #376]	@ (800a44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	f000 8099 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	4a5c      	ldr	r2, [pc, #368]	@ (800a44c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	f200 809e 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2e4:	f000 8091 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2ec:	f200 8096 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a2f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2f4:	f000 8089 	beq.w	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2fc:	f200 808e 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a304:	d03e      	beq.n	800a384 <HAL_TIM_ConfigClockSource+0x124>
 800a306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a30a:	f200 8087 	bhi.w	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a30e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a312:	f000 8086 	beq.w	800a422 <HAL_TIM_ConfigClockSource+0x1c2>
 800a316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a31a:	d87f      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a31c:	2b70      	cmp	r3, #112	@ 0x70
 800a31e:	d01a      	beq.n	800a356 <HAL_TIM_ConfigClockSource+0xf6>
 800a320:	2b70      	cmp	r3, #112	@ 0x70
 800a322:	d87b      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a324:	2b60      	cmp	r3, #96	@ 0x60
 800a326:	d050      	beq.n	800a3ca <HAL_TIM_ConfigClockSource+0x16a>
 800a328:	2b60      	cmp	r3, #96	@ 0x60
 800a32a:	d877      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a32c:	2b50      	cmp	r3, #80	@ 0x50
 800a32e:	d03c      	beq.n	800a3aa <HAL_TIM_ConfigClockSource+0x14a>
 800a330:	2b50      	cmp	r3, #80	@ 0x50
 800a332:	d873      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a334:	2b40      	cmp	r3, #64	@ 0x40
 800a336:	d058      	beq.n	800a3ea <HAL_TIM_ConfigClockSource+0x18a>
 800a338:	2b40      	cmp	r3, #64	@ 0x40
 800a33a:	d86f      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a33c:	2b30      	cmp	r3, #48	@ 0x30
 800a33e:	d064      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a340:	2b30      	cmp	r3, #48	@ 0x30
 800a342:	d86b      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a344:	2b20      	cmp	r3, #32
 800a346:	d060      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a348:	2b20      	cmp	r3, #32
 800a34a:	d867      	bhi.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d05c      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a350:	2b10      	cmp	r3, #16
 800a352:	d05a      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0x1aa>
 800a354:	e062      	b.n	800a41c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a366:	f000 f9b9 	bl	800a6dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	609a      	str	r2, [r3, #8]
      break;
 800a382:	e04f      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a394:	f000 f9a2 	bl	800a6dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	689a      	ldr	r2, [r3, #8]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3a6:	609a      	str	r2, [r3, #8]
      break;
 800a3a8:	e03c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 f912 	bl	800a5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2150      	movs	r1, #80	@ 0x50
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f000 f96c 	bl	800a6a0 <TIM_ITRx_SetConfig>
      break;
 800a3c8:	e02c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	f000 f931 	bl	800a63e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2160      	movs	r1, #96	@ 0x60
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 f95c 	bl	800a6a0 <TIM_ITRx_SetConfig>
      break;
 800a3e8:	e01c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f000 f8f2 	bl	800a5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	2140      	movs	r1, #64	@ 0x40
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f94c 	bl	800a6a0 <TIM_ITRx_SetConfig>
      break;
 800a408:	e00c      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4619      	mov	r1, r3
 800a414:	4610      	mov	r0, r2
 800a416:	f000 f943 	bl	800a6a0 <TIM_ITRx_SetConfig>
      break;
 800a41a:	e003      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
      break;
 800a420:	e000      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a434:	7bfb      	ldrb	r3, [r7, #15]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	ffceff88 	.word	0xffceff88
 800a444:	00100040 	.word	0x00100040
 800a448:	00100030 	.word	0x00100030
 800a44c:	00100020 	.word	0x00100020

0800a450 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a43      	ldr	r2, [pc, #268]	@ (800a5c0 <TIM_Base_SetConfig+0x120>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d013      	beq.n	800a4e0 <TIM_Base_SetConfig+0x40>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4be:	d00f      	beq.n	800a4e0 <TIM_Base_SetConfig+0x40>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a40      	ldr	r2, [pc, #256]	@ (800a5c4 <TIM_Base_SetConfig+0x124>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d00b      	beq.n	800a4e0 <TIM_Base_SetConfig+0x40>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a3f      	ldr	r2, [pc, #252]	@ (800a5c8 <TIM_Base_SetConfig+0x128>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d007      	beq.n	800a4e0 <TIM_Base_SetConfig+0x40>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a3e      	ldr	r2, [pc, #248]	@ (800a5cc <TIM_Base_SetConfig+0x12c>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d003      	beq.n	800a4e0 <TIM_Base_SetConfig+0x40>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a3d      	ldr	r2, [pc, #244]	@ (800a5d0 <TIM_Base_SetConfig+0x130>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d108      	bne.n	800a4f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	4a32      	ldr	r2, [pc, #200]	@ (800a5c0 <TIM_Base_SetConfig+0x120>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d01f      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a500:	d01b      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a2f      	ldr	r2, [pc, #188]	@ (800a5c4 <TIM_Base_SetConfig+0x124>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d017      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a2e      	ldr	r2, [pc, #184]	@ (800a5c8 <TIM_Base_SetConfig+0x128>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d013      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2d      	ldr	r2, [pc, #180]	@ (800a5cc <TIM_Base_SetConfig+0x12c>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d00f      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2c      	ldr	r2, [pc, #176]	@ (800a5d0 <TIM_Base_SetConfig+0x130>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d00b      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2b      	ldr	r2, [pc, #172]	@ (800a5d4 <TIM_Base_SetConfig+0x134>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d007      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a2a      	ldr	r2, [pc, #168]	@ (800a5d8 <TIM_Base_SetConfig+0x138>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d003      	beq.n	800a53a <TIM_Base_SetConfig+0x9a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a29      	ldr	r2, [pc, #164]	@ (800a5dc <TIM_Base_SetConfig+0x13c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d108      	bne.n	800a54c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	4313      	orrs	r3, r2
 800a54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	695b      	ldr	r3, [r3, #20]
 800a556:	4313      	orrs	r3, r2
 800a558:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	689a      	ldr	r2, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a14      	ldr	r2, [pc, #80]	@ (800a5c0 <TIM_Base_SetConfig+0x120>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d00f      	beq.n	800a592 <TIM_Base_SetConfig+0xf2>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a16      	ldr	r2, [pc, #88]	@ (800a5d0 <TIM_Base_SetConfig+0x130>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00b      	beq.n	800a592 <TIM_Base_SetConfig+0xf2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a15      	ldr	r2, [pc, #84]	@ (800a5d4 <TIM_Base_SetConfig+0x134>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d007      	beq.n	800a592 <TIM_Base_SetConfig+0xf2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a14      	ldr	r2, [pc, #80]	@ (800a5d8 <TIM_Base_SetConfig+0x138>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d003      	beq.n	800a592 <TIM_Base_SetConfig+0xf2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a13      	ldr	r2, [pc, #76]	@ (800a5dc <TIM_Base_SetConfig+0x13c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d103      	bne.n	800a59a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f043 0204 	orr.w	r2, r3, #4
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	601a      	str	r2, [r3, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	40010000 	.word	0x40010000
 800a5c4:	40000400 	.word	0x40000400
 800a5c8:	40000800 	.word	0x40000800
 800a5cc:	40000c00 	.word	0x40000c00
 800a5d0:	40010400 	.word	0x40010400
 800a5d4:	40014000 	.word	0x40014000
 800a5d8:	40014400 	.word	0x40014400
 800a5dc:	40014800 	.word	0x40014800

0800a5e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	f023 0201 	bic.w	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a60a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	4313      	orrs	r3, r2
 800a614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f023 030a 	bic.w	r3, r3, #10
 800a61c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	621a      	str	r2, [r3, #32]
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a63e:	b480      	push	{r7}
 800a640:	b087      	sub	sp, #28
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	f023 0210 	bic.w	r2, r3, #16
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	031b      	lsls	r3, r3, #12
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a67a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	621a      	str	r2, [r3, #32]
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4b09      	ldr	r3, [pc, #36]	@ (800a6d8 <TIM_ITRx_SetConfig+0x38>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	f043 0307 	orr.w	r3, r3, #7
 800a6c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	609a      	str	r2, [r3, #8]
}
 800a6ca:	bf00      	nop
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	ffcfff8f 	.word	0xffcfff8f

0800a6dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b087      	sub	sp, #28
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	021a      	lsls	r2, r3, #8
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	431a      	orrs	r2, r3
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	4313      	orrs	r3, r2
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	4313      	orrs	r3, r2
 800a708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	697a      	ldr	r2, [r7, #20]
 800a70e:	609a      	str	r2, [r3, #8]
}
 800a710:	bf00      	nop
 800a712:	371c      	adds	r7, #28
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d101      	bne.n	800a734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a730:	2302      	movs	r3, #2
 800a732:	e06d      	b.n	800a810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a30      	ldr	r2, [pc, #192]	@ (800a81c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a2f      	ldr	r2, [pc, #188]	@ (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d108      	bne.n	800a77a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a76e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a20      	ldr	r2, [pc, #128]	@ (800a81c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d022      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a6:	d01d      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d018      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d013      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a82c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00e      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	@ (800a820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d009      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a16      	ldr	r2, [pc, #88]	@ (800a830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a15      	ldr	r2, [pc, #84]	@ (800a834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d10c      	bne.n	800a7fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	40010000 	.word	0x40010000
 800a820:	40010400 	.word	0x40010400
 800a824:	40000400 	.word	0x40000400
 800a828:	40000800 	.word	0x40000800
 800a82c:	40000c00 	.word	0x40000c00
 800a830:	40001800 	.word	0x40001800
 800a834:	40014000 	.word	0x40014000

0800a838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e042      	b.n	800a90c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7f7 fda5 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	@ 0x24
 800a8a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f022 0201 	bic.w	r2, r2, #1
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d002      	beq.n	800a8c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fe1e 	bl	800b500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f8b3 	bl	800aa30 <UART_SetConfig>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e01b      	b.n	800a90c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a8e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a8f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f042 0201 	orr.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 fe9d 	bl	800b644 <UART_CheckIdleState>
 800a90a:	4603      	mov	r3, r0
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08a      	sub	sp, #40	@ 0x28
 800a918:	af02      	add	r7, sp, #8
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	603b      	str	r3, [r7, #0]
 800a920:	4613      	mov	r3, r2
 800a922:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	d17b      	bne.n	800aa26 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_UART_Transmit+0x26>
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e074      	b.n	800aa28 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2221      	movs	r2, #33	@ 0x21
 800a94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a94e:	f7f7 ffed 	bl	800292c <HAL_GetTick>
 800a952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	88fa      	ldrh	r2, [r7, #6]
 800a958:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	88fa      	ldrh	r2, [r7, #6]
 800a960:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a96c:	d108      	bne.n	800a980 <HAL_UART_Transmit+0x6c>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d104      	bne.n	800a980 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a976:	2300      	movs	r3, #0
 800a978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	61bb      	str	r3, [r7, #24]
 800a97e:	e003      	b.n	800a988 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a988:	e030      	b.n	800a9ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2200      	movs	r2, #0
 800a992:	2180      	movs	r1, #128	@ 0x80
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 feff 	bl	800b798 <UART_WaitOnFlagUntilTimeout>
 800a99a:	4603      	mov	r3, r0
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d005      	beq.n	800a9ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e03d      	b.n	800aa28 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10b      	bne.n	800a9ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	881b      	ldrh	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	3302      	adds	r3, #2
 800a9c6:	61bb      	str	r3, [r7, #24]
 800a9c8:	e007      	b.n	800a9da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	781a      	ldrb	r2, [r3, #0]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d1c8      	bne.n	800a98a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2140      	movs	r1, #64	@ 0x40
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 fec8 	bl	800b798 <UART_WaitOnFlagUntilTimeout>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d005      	beq.n	800aa1a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2220      	movs	r2, #32
 800aa12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e006      	b.n	800aa28 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aa22:	2300      	movs	r3, #0
 800aa24:	e000      	b.n	800aa28 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800aa26:	2302      	movs	r3, #2
  }
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3720      	adds	r7, #32
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa34:	b092      	sub	sp, #72	@ 0x48
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	431a      	orrs	r2, r3
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	431a      	orrs	r2, r3
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	69db      	ldr	r3, [r3, #28]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	4bbe      	ldr	r3, [pc, #760]	@ (800ad58 <UART_SetConfig+0x328>)
 800aa60:	4013      	ands	r3, r2
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	6812      	ldr	r2, [r2, #0]
 800aa66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	68da      	ldr	r2, [r3, #12]
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	430a      	orrs	r2, r1
 800aa80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4ab3      	ldr	r2, [pc, #716]	@ (800ad5c <UART_SetConfig+0x32c>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d004      	beq.n	800aa9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689a      	ldr	r2, [r3, #8]
 800aaa2:	4baf      	ldr	r3, [pc, #700]	@ (800ad60 <UART_SetConfig+0x330>)
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	6812      	ldr	r2, [r2, #0]
 800aaaa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aaac:	430b      	orrs	r3, r1
 800aaae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	f023 010f 	bic.w	r1, r3, #15
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	430a      	orrs	r2, r1
 800aac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4aa6      	ldr	r2, [pc, #664]	@ (800ad64 <UART_SetConfig+0x334>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d177      	bne.n	800abc0 <UART_SetConfig+0x190>
 800aad0:	4ba5      	ldr	r3, [pc, #660]	@ (800ad68 <UART_SetConfig+0x338>)
 800aad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aad8:	2b28      	cmp	r3, #40	@ 0x28
 800aada:	d86d      	bhi.n	800abb8 <UART_SetConfig+0x188>
 800aadc:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <UART_SetConfig+0xb4>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab89 	.word	0x0800ab89
 800aae8:	0800abb9 	.word	0x0800abb9
 800aaec:	0800abb9 	.word	0x0800abb9
 800aaf0:	0800abb9 	.word	0x0800abb9
 800aaf4:	0800abb9 	.word	0x0800abb9
 800aaf8:	0800abb9 	.word	0x0800abb9
 800aafc:	0800abb9 	.word	0x0800abb9
 800ab00:	0800abb9 	.word	0x0800abb9
 800ab04:	0800ab91 	.word	0x0800ab91
 800ab08:	0800abb9 	.word	0x0800abb9
 800ab0c:	0800abb9 	.word	0x0800abb9
 800ab10:	0800abb9 	.word	0x0800abb9
 800ab14:	0800abb9 	.word	0x0800abb9
 800ab18:	0800abb9 	.word	0x0800abb9
 800ab1c:	0800abb9 	.word	0x0800abb9
 800ab20:	0800abb9 	.word	0x0800abb9
 800ab24:	0800ab99 	.word	0x0800ab99
 800ab28:	0800abb9 	.word	0x0800abb9
 800ab2c:	0800abb9 	.word	0x0800abb9
 800ab30:	0800abb9 	.word	0x0800abb9
 800ab34:	0800abb9 	.word	0x0800abb9
 800ab38:	0800abb9 	.word	0x0800abb9
 800ab3c:	0800abb9 	.word	0x0800abb9
 800ab40:	0800abb9 	.word	0x0800abb9
 800ab44:	0800aba1 	.word	0x0800aba1
 800ab48:	0800abb9 	.word	0x0800abb9
 800ab4c:	0800abb9 	.word	0x0800abb9
 800ab50:	0800abb9 	.word	0x0800abb9
 800ab54:	0800abb9 	.word	0x0800abb9
 800ab58:	0800abb9 	.word	0x0800abb9
 800ab5c:	0800abb9 	.word	0x0800abb9
 800ab60:	0800abb9 	.word	0x0800abb9
 800ab64:	0800aba9 	.word	0x0800aba9
 800ab68:	0800abb9 	.word	0x0800abb9
 800ab6c:	0800abb9 	.word	0x0800abb9
 800ab70:	0800abb9 	.word	0x0800abb9
 800ab74:	0800abb9 	.word	0x0800abb9
 800ab78:	0800abb9 	.word	0x0800abb9
 800ab7c:	0800abb9 	.word	0x0800abb9
 800ab80:	0800abb9 	.word	0x0800abb9
 800ab84:	0800abb1 	.word	0x0800abb1
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab8e:	e222      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ab90:	2304      	movs	r3, #4
 800ab92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab96:	e21e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ab98:	2308      	movs	r3, #8
 800ab9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ab9e:	e21a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aba0:	2310      	movs	r3, #16
 800aba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aba6:	e216      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aba8:	2320      	movs	r3, #32
 800abaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abae:	e212      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800abb0:	2340      	movs	r3, #64	@ 0x40
 800abb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abb6:	e20e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800abb8:	2380      	movs	r3, #128	@ 0x80
 800abba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abbe:	e20a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a69      	ldr	r2, [pc, #420]	@ (800ad6c <UART_SetConfig+0x33c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d130      	bne.n	800ac2c <UART_SetConfig+0x1fc>
 800abca:	4b67      	ldr	r3, [pc, #412]	@ (800ad68 <UART_SetConfig+0x338>)
 800abcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abce:	f003 0307 	and.w	r3, r3, #7
 800abd2:	2b05      	cmp	r3, #5
 800abd4:	d826      	bhi.n	800ac24 <UART_SetConfig+0x1f4>
 800abd6:	a201      	add	r2, pc, #4	@ (adr r2, 800abdc <UART_SetConfig+0x1ac>)
 800abd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abdc:	0800abf5 	.word	0x0800abf5
 800abe0:	0800abfd 	.word	0x0800abfd
 800abe4:	0800ac05 	.word	0x0800ac05
 800abe8:	0800ac0d 	.word	0x0800ac0d
 800abec:	0800ac15 	.word	0x0800ac15
 800abf0:	0800ac1d 	.word	0x0800ac1d
 800abf4:	2300      	movs	r3, #0
 800abf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800abfa:	e1ec      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800abfc:	2304      	movs	r3, #4
 800abfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac02:	e1e8      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac04:	2308      	movs	r3, #8
 800ac06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac0a:	e1e4      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac0c:	2310      	movs	r3, #16
 800ac0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac12:	e1e0      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac14:	2320      	movs	r3, #32
 800ac16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1a:	e1dc      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac1c:	2340      	movs	r3, #64	@ 0x40
 800ac1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac22:	e1d8      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac24:	2380      	movs	r3, #128	@ 0x80
 800ac26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2a:	e1d4      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a4f      	ldr	r2, [pc, #316]	@ (800ad70 <UART_SetConfig+0x340>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d130      	bne.n	800ac98 <UART_SetConfig+0x268>
 800ac36:	4b4c      	ldr	r3, [pc, #304]	@ (800ad68 <UART_SetConfig+0x338>)
 800ac38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac3a:	f003 0307 	and.w	r3, r3, #7
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	d826      	bhi.n	800ac90 <UART_SetConfig+0x260>
 800ac42:	a201      	add	r2, pc, #4	@ (adr r2, 800ac48 <UART_SetConfig+0x218>)
 800ac44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac69 	.word	0x0800ac69
 800ac50:	0800ac71 	.word	0x0800ac71
 800ac54:	0800ac79 	.word	0x0800ac79
 800ac58:	0800ac81 	.word	0x0800ac81
 800ac5c:	0800ac89 	.word	0x0800ac89
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac66:	e1b6      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac68:	2304      	movs	r3, #4
 800ac6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac6e:	e1b2      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac70:	2308      	movs	r3, #8
 800ac72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac76:	e1ae      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac78:	2310      	movs	r3, #16
 800ac7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac7e:	e1aa      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac80:	2320      	movs	r3, #32
 800ac82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac86:	e1a6      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac88:	2340      	movs	r3, #64	@ 0x40
 800ac8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8e:	e1a2      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac90:	2380      	movs	r3, #128	@ 0x80
 800ac92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac96:	e19e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a35      	ldr	r2, [pc, #212]	@ (800ad74 <UART_SetConfig+0x344>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d130      	bne.n	800ad04 <UART_SetConfig+0x2d4>
 800aca2:	4b31      	ldr	r3, [pc, #196]	@ (800ad68 <UART_SetConfig+0x338>)
 800aca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aca6:	f003 0307 	and.w	r3, r3, #7
 800acaa:	2b05      	cmp	r3, #5
 800acac:	d826      	bhi.n	800acfc <UART_SetConfig+0x2cc>
 800acae:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <UART_SetConfig+0x284>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800accd 	.word	0x0800accd
 800acb8:	0800acd5 	.word	0x0800acd5
 800acbc:	0800acdd 	.word	0x0800acdd
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800aced 	.word	0x0800aced
 800acc8:	0800acf5 	.word	0x0800acf5
 800accc:	2300      	movs	r3, #0
 800acce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acd2:	e180      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800acd4:	2304      	movs	r3, #4
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acda:	e17c      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800acdc:	2308      	movs	r3, #8
 800acde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ace2:	e178      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ace4:	2310      	movs	r3, #16
 800ace6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acea:	e174      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800acec:	2320      	movs	r3, #32
 800acee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf2:	e170      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800acf4:	2340      	movs	r3, #64	@ 0x40
 800acf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfa:	e16c      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800acfc:	2380      	movs	r3, #128	@ 0x80
 800acfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad02:	e168      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a1b      	ldr	r2, [pc, #108]	@ (800ad78 <UART_SetConfig+0x348>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d142      	bne.n	800ad94 <UART_SetConfig+0x364>
 800ad0e:	4b16      	ldr	r3, [pc, #88]	@ (800ad68 <UART_SetConfig+0x338>)
 800ad10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad12:	f003 0307 	and.w	r3, r3, #7
 800ad16:	2b05      	cmp	r3, #5
 800ad18:	d838      	bhi.n	800ad8c <UART_SetConfig+0x35c>
 800ad1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad20 <UART_SetConfig+0x2f0>)
 800ad1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad20:	0800ad39 	.word	0x0800ad39
 800ad24:	0800ad41 	.word	0x0800ad41
 800ad28:	0800ad49 	.word	0x0800ad49
 800ad2c:	0800ad51 	.word	0x0800ad51
 800ad30:	0800ad7d 	.word	0x0800ad7d
 800ad34:	0800ad85 	.word	0x0800ad85
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3e:	e14a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad40:	2304      	movs	r3, #4
 800ad42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad46:	e146      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad48:	2308      	movs	r3, #8
 800ad4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4e:	e142      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad50:	2310      	movs	r3, #16
 800ad52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad56:	e13e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad58:	cfff69f3 	.word	0xcfff69f3
 800ad5c:	58000c00 	.word	0x58000c00
 800ad60:	11fff4ff 	.word	0x11fff4ff
 800ad64:	40011000 	.word	0x40011000
 800ad68:	58024400 	.word	0x58024400
 800ad6c:	40004400 	.word	0x40004400
 800ad70:	40004800 	.word	0x40004800
 800ad74:	40004c00 	.word	0x40004c00
 800ad78:	40005000 	.word	0x40005000
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e128      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad84:	2340      	movs	r3, #64	@ 0x40
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e124      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad8c:	2380      	movs	r3, #128	@ 0x80
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e120      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4acb      	ldr	r2, [pc, #812]	@ (800b0c8 <UART_SetConfig+0x698>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d176      	bne.n	800ae8c <UART_SetConfig+0x45c>
 800ad9e:	4bcb      	ldr	r3, [pc, #812]	@ (800b0cc <UART_SetConfig+0x69c>)
 800ada0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ada6:	2b28      	cmp	r3, #40	@ 0x28
 800ada8:	d86c      	bhi.n	800ae84 <UART_SetConfig+0x454>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <UART_SetConfig+0x380>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800ae55 	.word	0x0800ae55
 800adb4:	0800ae85 	.word	0x0800ae85
 800adb8:	0800ae85 	.word	0x0800ae85
 800adbc:	0800ae85 	.word	0x0800ae85
 800adc0:	0800ae85 	.word	0x0800ae85
 800adc4:	0800ae85 	.word	0x0800ae85
 800adc8:	0800ae85 	.word	0x0800ae85
 800adcc:	0800ae85 	.word	0x0800ae85
 800add0:	0800ae5d 	.word	0x0800ae5d
 800add4:	0800ae85 	.word	0x0800ae85
 800add8:	0800ae85 	.word	0x0800ae85
 800addc:	0800ae85 	.word	0x0800ae85
 800ade0:	0800ae85 	.word	0x0800ae85
 800ade4:	0800ae85 	.word	0x0800ae85
 800ade8:	0800ae85 	.word	0x0800ae85
 800adec:	0800ae85 	.word	0x0800ae85
 800adf0:	0800ae65 	.word	0x0800ae65
 800adf4:	0800ae85 	.word	0x0800ae85
 800adf8:	0800ae85 	.word	0x0800ae85
 800adfc:	0800ae85 	.word	0x0800ae85
 800ae00:	0800ae85 	.word	0x0800ae85
 800ae04:	0800ae85 	.word	0x0800ae85
 800ae08:	0800ae85 	.word	0x0800ae85
 800ae0c:	0800ae85 	.word	0x0800ae85
 800ae10:	0800ae6d 	.word	0x0800ae6d
 800ae14:	0800ae85 	.word	0x0800ae85
 800ae18:	0800ae85 	.word	0x0800ae85
 800ae1c:	0800ae85 	.word	0x0800ae85
 800ae20:	0800ae85 	.word	0x0800ae85
 800ae24:	0800ae85 	.word	0x0800ae85
 800ae28:	0800ae85 	.word	0x0800ae85
 800ae2c:	0800ae85 	.word	0x0800ae85
 800ae30:	0800ae75 	.word	0x0800ae75
 800ae34:	0800ae85 	.word	0x0800ae85
 800ae38:	0800ae85 	.word	0x0800ae85
 800ae3c:	0800ae85 	.word	0x0800ae85
 800ae40:	0800ae85 	.word	0x0800ae85
 800ae44:	0800ae85 	.word	0x0800ae85
 800ae48:	0800ae85 	.word	0x0800ae85
 800ae4c:	0800ae85 	.word	0x0800ae85
 800ae50:	0800ae7d 	.word	0x0800ae7d
 800ae54:	2301      	movs	r3, #1
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae5a:	e0bc      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae5c:	2304      	movs	r3, #4
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae62:	e0b8      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae64:	2308      	movs	r3, #8
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae6a:	e0b4      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae6c:	2310      	movs	r3, #16
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae72:	e0b0      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae74:	2320      	movs	r3, #32
 800ae76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7a:	e0ac      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae7c:	2340      	movs	r3, #64	@ 0x40
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae82:	e0a8      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae84:	2380      	movs	r3, #128	@ 0x80
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8a:	e0a4      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a8f      	ldr	r2, [pc, #572]	@ (800b0d0 <UART_SetConfig+0x6a0>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d130      	bne.n	800aef8 <UART_SetConfig+0x4c8>
 800ae96:	4b8d      	ldr	r3, [pc, #564]	@ (800b0cc <UART_SetConfig+0x69c>)
 800ae98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae9a:	f003 0307 	and.w	r3, r3, #7
 800ae9e:	2b05      	cmp	r3, #5
 800aea0:	d826      	bhi.n	800aef0 <UART_SetConfig+0x4c0>
 800aea2:	a201      	add	r2, pc, #4	@ (adr r2, 800aea8 <UART_SetConfig+0x478>)
 800aea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea8:	0800aec1 	.word	0x0800aec1
 800aeac:	0800aec9 	.word	0x0800aec9
 800aeb0:	0800aed1 	.word	0x0800aed1
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aee1 	.word	0x0800aee1
 800aebc:	0800aee9 	.word	0x0800aee9
 800aec0:	2300      	movs	r3, #0
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aec6:	e086      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aec8:	2304      	movs	r3, #4
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aece:	e082      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aed0:	2308      	movs	r3, #8
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aed6:	e07e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aed8:	2310      	movs	r3, #16
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aede:	e07a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aee0:	2320      	movs	r3, #32
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee6:	e076      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aee8:	2340      	movs	r3, #64	@ 0x40
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeee:	e072      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aef0:	2380      	movs	r3, #128	@ 0x80
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef6:	e06e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a75      	ldr	r2, [pc, #468]	@ (800b0d4 <UART_SetConfig+0x6a4>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d130      	bne.n	800af64 <UART_SetConfig+0x534>
 800af02:	4b72      	ldr	r3, [pc, #456]	@ (800b0cc <UART_SetConfig+0x69c>)
 800af04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b05      	cmp	r3, #5
 800af0c:	d826      	bhi.n	800af5c <UART_SetConfig+0x52c>
 800af0e:	a201      	add	r2, pc, #4	@ (adr r2, 800af14 <UART_SetConfig+0x4e4>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af2d 	.word	0x0800af2d
 800af18:	0800af35 	.word	0x0800af35
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af45 	.word	0x0800af45
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	2300      	movs	r3, #0
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af32:	e050      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af34:	2304      	movs	r3, #4
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af3a:	e04c      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af3c:	2308      	movs	r3, #8
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af42:	e048      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af44:	2310      	movs	r3, #16
 800af46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af4a:	e044      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af4c:	2320      	movs	r3, #32
 800af4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af52:	e040      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af54:	2340      	movs	r3, #64	@ 0x40
 800af56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5a:	e03c      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af5c:	2380      	movs	r3, #128	@ 0x80
 800af5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af62:	e038      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a5b      	ldr	r2, [pc, #364]	@ (800b0d8 <UART_SetConfig+0x6a8>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d130      	bne.n	800afd0 <UART_SetConfig+0x5a0>
 800af6e:	4b57      	ldr	r3, [pc, #348]	@ (800b0cc <UART_SetConfig+0x69c>)
 800af70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af72:	f003 0307 	and.w	r3, r3, #7
 800af76:	2b05      	cmp	r3, #5
 800af78:	d826      	bhi.n	800afc8 <UART_SetConfig+0x598>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <UART_SetConfig+0x550>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800af99 	.word	0x0800af99
 800af84:	0800afa1 	.word	0x0800afa1
 800af88:	0800afa9 	.word	0x0800afa9
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afb9 	.word	0x0800afb9
 800af94:	0800afc1 	.word	0x0800afc1
 800af98:	2302      	movs	r3, #2
 800af9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af9e:	e01a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afa0:	2304      	movs	r3, #4
 800afa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afa6:	e016      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afa8:	2308      	movs	r3, #8
 800afaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afae:	e012      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afb0:	2310      	movs	r3, #16
 800afb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afb6:	e00e      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afb8:	2320      	movs	r3, #32
 800afba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afbe:	e00a      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afc0:	2340      	movs	r3, #64	@ 0x40
 800afc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc6:	e006      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afc8:	2380      	movs	r3, #128	@ 0x80
 800afca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afce:	e002      	b.n	800afd6 <UART_SetConfig+0x5a6>
 800afd0:	2380      	movs	r3, #128	@ 0x80
 800afd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a3f      	ldr	r2, [pc, #252]	@ (800b0d8 <UART_SetConfig+0x6a8>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	f040 80f8 	bne.w	800b1d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afe2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	dc46      	bgt.n	800b078 <UART_SetConfig+0x648>
 800afea:	2b02      	cmp	r3, #2
 800afec:	f2c0 8082 	blt.w	800b0f4 <UART_SetConfig+0x6c4>
 800aff0:	3b02      	subs	r3, #2
 800aff2:	2b1e      	cmp	r3, #30
 800aff4:	d87e      	bhi.n	800b0f4 <UART_SetConfig+0x6c4>
 800aff6:	a201      	add	r2, pc, #4	@ (adr r2, 800affc <UART_SetConfig+0x5cc>)
 800aff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affc:	0800b07f 	.word	0x0800b07f
 800b000:	0800b0f5 	.word	0x0800b0f5
 800b004:	0800b087 	.word	0x0800b087
 800b008:	0800b0f5 	.word	0x0800b0f5
 800b00c:	0800b0f5 	.word	0x0800b0f5
 800b010:	0800b0f5 	.word	0x0800b0f5
 800b014:	0800b097 	.word	0x0800b097
 800b018:	0800b0f5 	.word	0x0800b0f5
 800b01c:	0800b0f5 	.word	0x0800b0f5
 800b020:	0800b0f5 	.word	0x0800b0f5
 800b024:	0800b0f5 	.word	0x0800b0f5
 800b028:	0800b0f5 	.word	0x0800b0f5
 800b02c:	0800b0f5 	.word	0x0800b0f5
 800b030:	0800b0f5 	.word	0x0800b0f5
 800b034:	0800b0a7 	.word	0x0800b0a7
 800b038:	0800b0f5 	.word	0x0800b0f5
 800b03c:	0800b0f5 	.word	0x0800b0f5
 800b040:	0800b0f5 	.word	0x0800b0f5
 800b044:	0800b0f5 	.word	0x0800b0f5
 800b048:	0800b0f5 	.word	0x0800b0f5
 800b04c:	0800b0f5 	.word	0x0800b0f5
 800b050:	0800b0f5 	.word	0x0800b0f5
 800b054:	0800b0f5 	.word	0x0800b0f5
 800b058:	0800b0f5 	.word	0x0800b0f5
 800b05c:	0800b0f5 	.word	0x0800b0f5
 800b060:	0800b0f5 	.word	0x0800b0f5
 800b064:	0800b0f5 	.word	0x0800b0f5
 800b068:	0800b0f5 	.word	0x0800b0f5
 800b06c:	0800b0f5 	.word	0x0800b0f5
 800b070:	0800b0f5 	.word	0x0800b0f5
 800b074:	0800b0e7 	.word	0x0800b0e7
 800b078:	2b40      	cmp	r3, #64	@ 0x40
 800b07a:	d037      	beq.n	800b0ec <UART_SetConfig+0x6bc>
 800b07c:	e03a      	b.n	800b0f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b07e:	f7fd f855 	bl	800812c <HAL_RCCEx_GetD3PCLK1Freq>
 800b082:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b084:	e03c      	b.n	800b100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7fd f864 	bl	8008158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b094:	e034      	b.n	800b100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b096:	f107 0318 	add.w	r3, r7, #24
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fd f9b0 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0a4:	e02c      	b.n	800b100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a6:	4b09      	ldr	r3, [pc, #36]	@ (800b0cc <UART_SetConfig+0x69c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f003 0320 	and.w	r3, r3, #32
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d016      	beq.n	800b0e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0b2:	4b06      	ldr	r3, [pc, #24]	@ (800b0cc <UART_SetConfig+0x69c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	08db      	lsrs	r3, r3, #3
 800b0b8:	f003 0303 	and.w	r3, r3, #3
 800b0bc:	4a07      	ldr	r2, [pc, #28]	@ (800b0dc <UART_SetConfig+0x6ac>)
 800b0be:	fa22 f303 	lsr.w	r3, r2, r3
 800b0c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0c4:	e01c      	b.n	800b100 <UART_SetConfig+0x6d0>
 800b0c6:	bf00      	nop
 800b0c8:	40011400 	.word	0x40011400
 800b0cc:	58024400 	.word	0x58024400
 800b0d0:	40007800 	.word	0x40007800
 800b0d4:	40007c00 	.word	0x40007c00
 800b0d8:	58000c00 	.word	0x58000c00
 800b0dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b0e0:	4b9d      	ldr	r3, [pc, #628]	@ (800b358 <UART_SetConfig+0x928>)
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e4:	e00c      	b.n	800b100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0e6:	4b9d      	ldr	r3, [pc, #628]	@ (800b35c <UART_SetConfig+0x92c>)
 800b0e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ea:	e009      	b.n	800b100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0f2:	e005      	b.n	800b100 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b0fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b102:	2b00      	cmp	r3, #0
 800b104:	f000 81de 	beq.w	800b4c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10c:	4a94      	ldr	r2, [pc, #592]	@ (800b360 <UART_SetConfig+0x930>)
 800b10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b112:	461a      	mov	r2, r3
 800b114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b116:	fbb3 f3f2 	udiv	r3, r3, r2
 800b11a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	685a      	ldr	r2, [r3, #4]
 800b120:	4613      	mov	r3, r2
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	4413      	add	r3, r2
 800b126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b128:	429a      	cmp	r2, r3
 800b12a:	d305      	bcc.n	800b138 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b132:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b134:	429a      	cmp	r2, r3
 800b136:	d903      	bls.n	800b140 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b13e:	e1c1      	b.n	800b4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b142:	2200      	movs	r2, #0
 800b144:	60bb      	str	r3, [r7, #8]
 800b146:	60fa      	str	r2, [r7, #12]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14c:	4a84      	ldr	r2, [pc, #528]	@ (800b360 <UART_SetConfig+0x930>)
 800b14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b152:	b29b      	uxth	r3, r3
 800b154:	2200      	movs	r2, #0
 800b156:	603b      	str	r3, [r7, #0]
 800b158:	607a      	str	r2, [r7, #4]
 800b15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b162:	f7f5 fad1 	bl	8000708 <__aeabi_uldivmod>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4610      	mov	r0, r2
 800b16c:	4619      	mov	r1, r3
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	f04f 0300 	mov.w	r3, #0
 800b176:	020b      	lsls	r3, r1, #8
 800b178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b17c:	0202      	lsls	r2, r0, #8
 800b17e:	6979      	ldr	r1, [r7, #20]
 800b180:	6849      	ldr	r1, [r1, #4]
 800b182:	0849      	lsrs	r1, r1, #1
 800b184:	2000      	movs	r0, #0
 800b186:	460c      	mov	r4, r1
 800b188:	4605      	mov	r5, r0
 800b18a:	eb12 0804 	adds.w	r8, r2, r4
 800b18e:	eb43 0905 	adc.w	r9, r3, r5
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	469a      	mov	sl, r3
 800b19a:	4693      	mov	fp, r2
 800b19c:	4652      	mov	r2, sl
 800b19e:	465b      	mov	r3, fp
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	4649      	mov	r1, r9
 800b1a4:	f7f5 fab0 	bl	8000708 <__aeabi_uldivmod>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b1b6:	d308      	bcc.n	800b1ca <UART_SetConfig+0x79a>
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b1be:	d204      	bcs.n	800b1ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1c6:	60da      	str	r2, [r3, #12]
 800b1c8:	e17c      	b.n	800b4c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b1d0:	e178      	b.n	800b4c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	69db      	ldr	r3, [r3, #28]
 800b1d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1da:	f040 80c5 	bne.w	800b368 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b1de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b1e2:	2b20      	cmp	r3, #32
 800b1e4:	dc48      	bgt.n	800b278 <UART_SetConfig+0x848>
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	db7b      	blt.n	800b2e2 <UART_SetConfig+0x8b2>
 800b1ea:	2b20      	cmp	r3, #32
 800b1ec:	d879      	bhi.n	800b2e2 <UART_SetConfig+0x8b2>
 800b1ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f4 <UART_SetConfig+0x7c4>)
 800b1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f4:	0800b27f 	.word	0x0800b27f
 800b1f8:	0800b287 	.word	0x0800b287
 800b1fc:	0800b2e3 	.word	0x0800b2e3
 800b200:	0800b2e3 	.word	0x0800b2e3
 800b204:	0800b28f 	.word	0x0800b28f
 800b208:	0800b2e3 	.word	0x0800b2e3
 800b20c:	0800b2e3 	.word	0x0800b2e3
 800b210:	0800b2e3 	.word	0x0800b2e3
 800b214:	0800b29f 	.word	0x0800b29f
 800b218:	0800b2e3 	.word	0x0800b2e3
 800b21c:	0800b2e3 	.word	0x0800b2e3
 800b220:	0800b2e3 	.word	0x0800b2e3
 800b224:	0800b2e3 	.word	0x0800b2e3
 800b228:	0800b2e3 	.word	0x0800b2e3
 800b22c:	0800b2e3 	.word	0x0800b2e3
 800b230:	0800b2e3 	.word	0x0800b2e3
 800b234:	0800b2af 	.word	0x0800b2af
 800b238:	0800b2e3 	.word	0x0800b2e3
 800b23c:	0800b2e3 	.word	0x0800b2e3
 800b240:	0800b2e3 	.word	0x0800b2e3
 800b244:	0800b2e3 	.word	0x0800b2e3
 800b248:	0800b2e3 	.word	0x0800b2e3
 800b24c:	0800b2e3 	.word	0x0800b2e3
 800b250:	0800b2e3 	.word	0x0800b2e3
 800b254:	0800b2e3 	.word	0x0800b2e3
 800b258:	0800b2e3 	.word	0x0800b2e3
 800b25c:	0800b2e3 	.word	0x0800b2e3
 800b260:	0800b2e3 	.word	0x0800b2e3
 800b264:	0800b2e3 	.word	0x0800b2e3
 800b268:	0800b2e3 	.word	0x0800b2e3
 800b26c:	0800b2e3 	.word	0x0800b2e3
 800b270:	0800b2e3 	.word	0x0800b2e3
 800b274:	0800b2d5 	.word	0x0800b2d5
 800b278:	2b40      	cmp	r3, #64	@ 0x40
 800b27a:	d02e      	beq.n	800b2da <UART_SetConfig+0x8aa>
 800b27c:	e031      	b.n	800b2e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b27e:	f7fb fd1f 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 800b282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b284:	e033      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b286:	f7fb fd31 	bl	8006cec <HAL_RCC_GetPCLK2Freq>
 800b28a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b28c:	e02f      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b28e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b292:	4618      	mov	r0, r3
 800b294:	f7fc ff60 	bl	8008158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b29c:	e027      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29e:	f107 0318 	add.w	r3, r7, #24
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7fd f8ac 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ac:	e01f      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b364 <UART_SetConfig+0x934>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0320 	and.w	r3, r3, #32
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d009      	beq.n	800b2ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2ba:	4b2a      	ldr	r3, [pc, #168]	@ (800b364 <UART_SetConfig+0x934>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	08db      	lsrs	r3, r3, #3
 800b2c0:	f003 0303 	and.w	r3, r3, #3
 800b2c4:	4a24      	ldr	r2, [pc, #144]	@ (800b358 <UART_SetConfig+0x928>)
 800b2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b2cc:	e00f      	b.n	800b2ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b2ce:	4b22      	ldr	r3, [pc, #136]	@ (800b358 <UART_SetConfig+0x928>)
 800b2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d2:	e00c      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b2d4:	4b21      	ldr	r3, [pc, #132]	@ (800b35c <UART_SetConfig+0x92c>)
 800b2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2d8:	e009      	b.n	800b2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2e0:	e005      	b.n	800b2ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b2ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80e7 	beq.w	800b4c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	4a19      	ldr	r2, [pc, #100]	@ (800b360 <UART_SetConfig+0x930>)
 800b2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b300:	461a      	mov	r2, r3
 800b302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b304:	fbb3 f3f2 	udiv	r3, r3, r2
 800b308:	005a      	lsls	r2, r3, #1
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	085b      	lsrs	r3, r3, #1
 800b310:	441a      	add	r2, r3
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b31e:	2b0f      	cmp	r3, #15
 800b320:	d916      	bls.n	800b350 <UART_SetConfig+0x920>
 800b322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b328:	d212      	bcs.n	800b350 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	f023 030f 	bic.w	r3, r3, #15
 800b332:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	b29b      	uxth	r3, r3
 800b33a:	f003 0307 	and.w	r3, r3, #7
 800b33e:	b29a      	uxth	r2, r3
 800b340:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b342:	4313      	orrs	r3, r2
 800b344:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b34c:	60da      	str	r2, [r3, #12]
 800b34e:	e0b9      	b.n	800b4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b356:	e0b5      	b.n	800b4c4 <UART_SetConfig+0xa94>
 800b358:	03d09000 	.word	0x03d09000
 800b35c:	003d0900 	.word	0x003d0900
 800b360:	08010630 	.word	0x08010630
 800b364:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b368:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	dc49      	bgt.n	800b404 <UART_SetConfig+0x9d4>
 800b370:	2b00      	cmp	r3, #0
 800b372:	db7c      	blt.n	800b46e <UART_SetConfig+0xa3e>
 800b374:	2b20      	cmp	r3, #32
 800b376:	d87a      	bhi.n	800b46e <UART_SetConfig+0xa3e>
 800b378:	a201      	add	r2, pc, #4	@ (adr r2, 800b380 <UART_SetConfig+0x950>)
 800b37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b37e:	bf00      	nop
 800b380:	0800b40b 	.word	0x0800b40b
 800b384:	0800b413 	.word	0x0800b413
 800b388:	0800b46f 	.word	0x0800b46f
 800b38c:	0800b46f 	.word	0x0800b46f
 800b390:	0800b41b 	.word	0x0800b41b
 800b394:	0800b46f 	.word	0x0800b46f
 800b398:	0800b46f 	.word	0x0800b46f
 800b39c:	0800b46f 	.word	0x0800b46f
 800b3a0:	0800b42b 	.word	0x0800b42b
 800b3a4:	0800b46f 	.word	0x0800b46f
 800b3a8:	0800b46f 	.word	0x0800b46f
 800b3ac:	0800b46f 	.word	0x0800b46f
 800b3b0:	0800b46f 	.word	0x0800b46f
 800b3b4:	0800b46f 	.word	0x0800b46f
 800b3b8:	0800b46f 	.word	0x0800b46f
 800b3bc:	0800b46f 	.word	0x0800b46f
 800b3c0:	0800b43b 	.word	0x0800b43b
 800b3c4:	0800b46f 	.word	0x0800b46f
 800b3c8:	0800b46f 	.word	0x0800b46f
 800b3cc:	0800b46f 	.word	0x0800b46f
 800b3d0:	0800b46f 	.word	0x0800b46f
 800b3d4:	0800b46f 	.word	0x0800b46f
 800b3d8:	0800b46f 	.word	0x0800b46f
 800b3dc:	0800b46f 	.word	0x0800b46f
 800b3e0:	0800b46f 	.word	0x0800b46f
 800b3e4:	0800b46f 	.word	0x0800b46f
 800b3e8:	0800b46f 	.word	0x0800b46f
 800b3ec:	0800b46f 	.word	0x0800b46f
 800b3f0:	0800b46f 	.word	0x0800b46f
 800b3f4:	0800b46f 	.word	0x0800b46f
 800b3f8:	0800b46f 	.word	0x0800b46f
 800b3fc:	0800b46f 	.word	0x0800b46f
 800b400:	0800b461 	.word	0x0800b461
 800b404:	2b40      	cmp	r3, #64	@ 0x40
 800b406:	d02e      	beq.n	800b466 <UART_SetConfig+0xa36>
 800b408:	e031      	b.n	800b46e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b40a:	f7fb fc59 	bl	8006cc0 <HAL_RCC_GetPCLK1Freq>
 800b40e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b410:	e033      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b412:	f7fb fc6b 	bl	8006cec <HAL_RCC_GetPCLK2Freq>
 800b416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b418:	e02f      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b41e:	4618      	mov	r0, r3
 800b420:	f7fc fe9a 	bl	8008158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b428:	e027      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b42a:	f107 0318 	add.w	r3, r7, #24
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fc ffe6 	bl	8008400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b438:	e01f      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b43a:	4b2d      	ldr	r3, [pc, #180]	@ (800b4f0 <UART_SetConfig+0xac0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b00      	cmp	r3, #0
 800b444:	d009      	beq.n	800b45a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b446:	4b2a      	ldr	r3, [pc, #168]	@ (800b4f0 <UART_SetConfig+0xac0>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	08db      	lsrs	r3, r3, #3
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	4a28      	ldr	r2, [pc, #160]	@ (800b4f4 <UART_SetConfig+0xac4>)
 800b452:	fa22 f303 	lsr.w	r3, r2, r3
 800b456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b458:	e00f      	b.n	800b47a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b45a:	4b26      	ldr	r3, [pc, #152]	@ (800b4f4 <UART_SetConfig+0xac4>)
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b45e:	e00c      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b460:	4b25      	ldr	r3, [pc, #148]	@ (800b4f8 <UART_SetConfig+0xac8>)
 800b462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b464:	e009      	b.n	800b47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b46c:	e005      	b.n	800b47a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b46e:	2300      	movs	r3, #0
 800b470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b478:	bf00      	nop
    }

    if (pclk != 0U)
 800b47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d021      	beq.n	800b4c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b484:	4a1d      	ldr	r2, [pc, #116]	@ (800b4fc <UART_SetConfig+0xacc>)
 800b486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b48a:	461a      	mov	r2, r3
 800b48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	441a      	add	r2, r3
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	2b0f      	cmp	r3, #15
 800b4a8:	d909      	bls.n	800b4be <UART_SetConfig+0xa8e>
 800b4aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4b0:	d205      	bcs.n	800b4be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60da      	str	r2, [r3, #12]
 800b4bc:	e002      	b.n	800b4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b4e0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3748      	adds	r7, #72	@ 0x48
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ee:	bf00      	nop
 800b4f0:	58024400 	.word	0x58024400
 800b4f4:	03d09000 	.word	0x03d09000
 800b4f8:	003d0900 	.word	0x003d0900
 800b4fc:	08010630 	.word	0x08010630

0800b500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b00      	cmp	r3, #0
 800b512:	d00a      	beq.n	800b52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52e:	f003 0301 	and.w	r3, r3, #1
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b550:	f003 0302 	and.w	r3, r3, #2
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00a      	beq.n	800b56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b572:	f003 0304 	and.w	r3, r3, #4
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	430a      	orrs	r2, r1
 800b58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00a      	beq.n	800b5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	430a      	orrs	r2, r1
 800b5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b6:	f003 0320 	and.w	r3, r3, #32
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00a      	beq.n	800b5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01a      	beq.n	800b616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5fe:	d10a      	bne.n	800b616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	430a      	orrs	r2, r1
 800b614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	430a      	orrs	r2, r1
 800b636:	605a      	str	r2, [r3, #4]
  }
}
 800b638:	bf00      	nop
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b098      	sub	sp, #96	@ 0x60
 800b648:	af02      	add	r7, sp, #8
 800b64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b654:	f7f7 f96a 	bl	800292c <HAL_GetTick>
 800b658:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b08      	cmp	r3, #8
 800b666:	d12f      	bne.n	800b6c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b668:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b670:	2200      	movs	r2, #0
 800b672:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f88e 	bl	800b798 <UART_WaitOnFlagUntilTimeout>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d022      	beq.n	800b6c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b692:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b696:	653b      	str	r3, [r7, #80]	@ 0x50
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	461a      	mov	r2, r3
 800b69e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6a8:	e841 2300 	strex	r3, r2, [r1]
 800b6ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1e6      	bne.n	800b682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e063      	b.n	800b790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f003 0304 	and.w	r3, r3, #4
 800b6d2:	2b04      	cmp	r3, #4
 800b6d4:	d149      	bne.n	800b76a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f857 	bl	800b798 <UART_WaitOnFlagUntilTimeout>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d03c      	beq.n	800b76a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f8:	e853 3f00 	ldrex	r3, [r3]
 800b6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b710:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b712:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b716:	e841 2300 	strex	r3, r2, [r1]
 800b71a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b71c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d1e6      	bne.n	800b6f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	e853 3f00 	ldrex	r3, [r3]
 800b730:	60fb      	str	r3, [r7, #12]
   return(result);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	f023 0301 	bic.w	r3, r3, #1
 800b738:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	3308      	adds	r3, #8
 800b740:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b742:	61fa      	str	r2, [r7, #28]
 800b744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b746:	69b9      	ldr	r1, [r7, #24]
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	e841 2300 	strex	r3, r2, [r1]
 800b74e:	617b      	str	r3, [r7, #20]
   return(result);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d1e5      	bne.n	800b722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2220      	movs	r2, #32
 800b75a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2200      	movs	r2, #0
 800b762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b766:	2303      	movs	r3, #3
 800b768:	e012      	b.n	800b790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2220      	movs	r2, #32
 800b76e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2220      	movs	r2, #32
 800b776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2200      	movs	r2, #0
 800b78a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3758      	adds	r7, #88	@ 0x58
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4613      	mov	r3, r2
 800b7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7a8:	e04f      	b.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7aa:	69bb      	ldr	r3, [r7, #24]
 800b7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b0:	d04b      	beq.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7b2:	f7f7 f8bb 	bl	800292c <HAL_GetTick>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	1ad3      	subs	r3, r2, r3
 800b7bc:	69ba      	ldr	r2, [r7, #24]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d302      	bcc.n	800b7c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e04e      	b.n	800b86a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d037      	beq.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	2b80      	cmp	r3, #128	@ 0x80
 800b7de:	d034      	beq.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b40      	cmp	r3, #64	@ 0x40
 800b7e4:	d031      	beq.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	f003 0308 	and.w	r3, r3, #8
 800b7f0:	2b08      	cmp	r3, #8
 800b7f2:	d110      	bne.n	800b816 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2208      	movs	r2, #8
 800b7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f839 	bl	800b874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2208      	movs	r2, #8
 800b806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e029      	b.n	800b86a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	69db      	ldr	r3, [r3, #28]
 800b81c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b824:	d111      	bne.n	800b84a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b82e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b830:	68f8      	ldr	r0, [r7, #12]
 800b832:	f000 f81f 	bl	800b874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2220      	movs	r2, #32
 800b83a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	e00f      	b.n	800b86a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	69da      	ldr	r2, [r3, #28]
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	4013      	ands	r3, r2
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	429a      	cmp	r2, r3
 800b858:	bf0c      	ite	eq
 800b85a:	2301      	moveq	r3, #1
 800b85c:	2300      	movne	r3, #0
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	461a      	mov	r2, r3
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	429a      	cmp	r2, r3
 800b866:	d0a0      	beq.n	800b7aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b874:	b480      	push	{r7}
 800b876:	b095      	sub	sp, #84	@ 0x54
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b88a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b88c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	461a      	mov	r2, r3
 800b898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b89a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b89c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b8a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e6      	bne.n	800b87c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	e853 3f00 	ldrex	r3, [r3]
 800b8bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8be:	69fa      	ldr	r2, [r7, #28]
 800b8c0:	4b1e      	ldr	r3, [pc, #120]	@ (800b93c <UART_EndRxTransfer+0xc8>)
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b8d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b8d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b8d6:	e841 2300 	strex	r3, r2, [r1]
 800b8da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1e5      	bne.n	800b8ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d118      	bne.n	800b91c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f023 0310 	bic.w	r3, r3, #16
 800b8fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b908:	61bb      	str	r3, [r7, #24]
 800b90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b90c:	6979      	ldr	r1, [r7, #20]
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	e841 2300 	strex	r3, r2, [r1]
 800b914:	613b      	str	r3, [r7, #16]
   return(result);
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1e6      	bne.n	800b8ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2220      	movs	r2, #32
 800b920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b930:	bf00      	nop
 800b932:	3754      	adds	r7, #84	@ 0x54
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr
 800b93c:	effffffe 	.word	0xeffffffe

0800b940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_UARTEx_DisableFifoMode+0x16>
 800b952:	2302      	movs	r3, #2
 800b954:	e027      	b.n	800b9a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2224      	movs	r2, #36	@ 0x24
 800b962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e02d      	b.n	800ba26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2224      	movs	r2, #36	@ 0x24
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 0201 	bic.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f850 	bl	800baac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d101      	bne.n	800ba46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba42:	2302      	movs	r3, #2
 800ba44:	e02d      	b.n	800baa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2224      	movs	r2, #36	@ 0x24
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0201 	bic.w	r2, r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f812 	bl	800baac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d108      	bne.n	800bace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bacc:	e031      	b.n	800bb32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bace:	2310      	movs	r3, #16
 800bad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bad2:	2310      	movs	r3, #16
 800bad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	0e5b      	lsrs	r3, r3, #25
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	0f5b      	lsrs	r3, r3, #29
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	7b3a      	ldrb	r2, [r7, #12]
 800bafa:	4911      	ldr	r1, [pc, #68]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x94>)
 800bafc:	5c8a      	ldrb	r2, [r1, r2]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb02:	7b3a      	ldrb	r2, [r7, #12]
 800bb04:	490f      	ldr	r1, [pc, #60]	@ (800bb44 <UARTEx_SetNbDataToProcess+0x98>)
 800bb06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb08:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	7b7a      	ldrb	r2, [r7, #13]
 800bb18:	4909      	ldr	r1, [pc, #36]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x94>)
 800bb1a:	5c8a      	ldrb	r2, [r1, r2]
 800bb1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb20:	7b7a      	ldrb	r2, [r7, #13]
 800bb22:	4908      	ldr	r1, [pc, #32]	@ (800bb44 <UARTEx_SetNbDataToProcess+0x98>)
 800bb24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb26:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb32:	bf00      	nop
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	08010648 	.word	0x08010648
 800bb44:	08010650 	.word	0x08010650

0800bb48 <__cvt>:
 800bb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4a:	ed2d 8b02 	vpush	{d8}
 800bb4e:	eeb0 8b40 	vmov.f64	d8, d0
 800bb52:	b085      	sub	sp, #20
 800bb54:	4617      	mov	r7, r2
 800bb56:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bb58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bb5a:	ee18 2a90 	vmov	r2, s17
 800bb5e:	f025 0520 	bic.w	r5, r5, #32
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	bfb6      	itet	lt
 800bb66:	222d      	movlt	r2, #45	@ 0x2d
 800bb68:	2200      	movge	r2, #0
 800bb6a:	eeb1 8b40 	vneglt.f64	d8, d0
 800bb6e:	2d46      	cmp	r5, #70	@ 0x46
 800bb70:	460c      	mov	r4, r1
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	d004      	beq.n	800bb80 <__cvt+0x38>
 800bb76:	2d45      	cmp	r5, #69	@ 0x45
 800bb78:	d100      	bne.n	800bb7c <__cvt+0x34>
 800bb7a:	3401      	adds	r4, #1
 800bb7c:	2102      	movs	r1, #2
 800bb7e:	e000      	b.n	800bb82 <__cvt+0x3a>
 800bb80:	2103      	movs	r1, #3
 800bb82:	ab03      	add	r3, sp, #12
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	ab02      	add	r3, sp, #8
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4633      	mov	r3, r6
 800bb8e:	eeb0 0b48 	vmov.f64	d0, d8
 800bb92:	f001 f885 	bl	800cca0 <_dtoa_r>
 800bb96:	2d47      	cmp	r5, #71	@ 0x47
 800bb98:	d114      	bne.n	800bbc4 <__cvt+0x7c>
 800bb9a:	07fb      	lsls	r3, r7, #31
 800bb9c:	d50a      	bpl.n	800bbb4 <__cvt+0x6c>
 800bb9e:	1902      	adds	r2, r0, r4
 800bba0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba8:	bf08      	it	eq
 800bbaa:	9203      	streq	r2, [sp, #12]
 800bbac:	2130      	movs	r1, #48	@ 0x30
 800bbae:	9b03      	ldr	r3, [sp, #12]
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d319      	bcc.n	800bbe8 <__cvt+0xa0>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbb8:	1a1b      	subs	r3, r3, r0
 800bbba:	6013      	str	r3, [r2, #0]
 800bbbc:	b005      	add	sp, #20
 800bbbe:	ecbd 8b02 	vpop	{d8}
 800bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbc4:	2d46      	cmp	r5, #70	@ 0x46
 800bbc6:	eb00 0204 	add.w	r2, r0, r4
 800bbca:	d1e9      	bne.n	800bba0 <__cvt+0x58>
 800bbcc:	7803      	ldrb	r3, [r0, #0]
 800bbce:	2b30      	cmp	r3, #48	@ 0x30
 800bbd0:	d107      	bne.n	800bbe2 <__cvt+0x9a>
 800bbd2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbda:	bf1c      	itt	ne
 800bbdc:	f1c4 0401 	rsbne	r4, r4, #1
 800bbe0:	6034      	strne	r4, [r6, #0]
 800bbe2:	6833      	ldr	r3, [r6, #0]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	e7db      	b.n	800bba0 <__cvt+0x58>
 800bbe8:	1c5c      	adds	r4, r3, #1
 800bbea:	9403      	str	r4, [sp, #12]
 800bbec:	7019      	strb	r1, [r3, #0]
 800bbee:	e7de      	b.n	800bbae <__cvt+0x66>

0800bbf0 <__exponent>:
 800bbf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbf2:	2900      	cmp	r1, #0
 800bbf4:	bfba      	itte	lt
 800bbf6:	4249      	neglt	r1, r1
 800bbf8:	232d      	movlt	r3, #45	@ 0x2d
 800bbfa:	232b      	movge	r3, #43	@ 0x2b
 800bbfc:	2909      	cmp	r1, #9
 800bbfe:	7002      	strb	r2, [r0, #0]
 800bc00:	7043      	strb	r3, [r0, #1]
 800bc02:	dd29      	ble.n	800bc58 <__exponent+0x68>
 800bc04:	f10d 0307 	add.w	r3, sp, #7
 800bc08:	461d      	mov	r5, r3
 800bc0a:	270a      	movs	r7, #10
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	fbb1 f6f7 	udiv	r6, r1, r7
 800bc12:	fb07 1416 	mls	r4, r7, r6, r1
 800bc16:	3430      	adds	r4, #48	@ 0x30
 800bc18:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	2c63      	cmp	r4, #99	@ 0x63
 800bc20:	f103 33ff 	add.w	r3, r3, #4294967295
 800bc24:	4631      	mov	r1, r6
 800bc26:	dcf1      	bgt.n	800bc0c <__exponent+0x1c>
 800bc28:	3130      	adds	r1, #48	@ 0x30
 800bc2a:	1e94      	subs	r4, r2, #2
 800bc2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc30:	1c41      	adds	r1, r0, #1
 800bc32:	4623      	mov	r3, r4
 800bc34:	42ab      	cmp	r3, r5
 800bc36:	d30a      	bcc.n	800bc4e <__exponent+0x5e>
 800bc38:	f10d 0309 	add.w	r3, sp, #9
 800bc3c:	1a9b      	subs	r3, r3, r2
 800bc3e:	42ac      	cmp	r4, r5
 800bc40:	bf88      	it	hi
 800bc42:	2300      	movhi	r3, #0
 800bc44:	3302      	adds	r3, #2
 800bc46:	4403      	add	r3, r0
 800bc48:	1a18      	subs	r0, r3, r0
 800bc4a:	b003      	add	sp, #12
 800bc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bc52:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bc56:	e7ed      	b.n	800bc34 <__exponent+0x44>
 800bc58:	2330      	movs	r3, #48	@ 0x30
 800bc5a:	3130      	adds	r1, #48	@ 0x30
 800bc5c:	7083      	strb	r3, [r0, #2]
 800bc5e:	70c1      	strb	r1, [r0, #3]
 800bc60:	1d03      	adds	r3, r0, #4
 800bc62:	e7f1      	b.n	800bc48 <__exponent+0x58>
 800bc64:	0000      	movs	r0, r0
	...

0800bc68 <_printf_float>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	b08d      	sub	sp, #52	@ 0x34
 800bc6e:	460c      	mov	r4, r1
 800bc70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bc74:	4616      	mov	r6, r2
 800bc76:	461f      	mov	r7, r3
 800bc78:	4605      	mov	r5, r0
 800bc7a:	f000 ff0b 	bl	800ca94 <_localeconv_r>
 800bc7e:	f8d0 b000 	ldr.w	fp, [r0]
 800bc82:	4658      	mov	r0, fp
 800bc84:	f7f4 fb7c 	bl	8000380 <strlen>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800bc90:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bc94:	6822      	ldr	r2, [r4, #0]
 800bc96:	9005      	str	r0, [sp, #20]
 800bc98:	3307      	adds	r3, #7
 800bc9a:	f023 0307 	bic.w	r3, r3, #7
 800bc9e:	f103 0108 	add.w	r1, r3, #8
 800bca2:	f8c8 1000 	str.w	r1, [r8]
 800bca6:	ed93 0b00 	vldr	d0, [r3]
 800bcaa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800bf08 <_printf_float+0x2a0>
 800bcae:	eeb0 7bc0 	vabs.f64	d7, d0
 800bcb2:	eeb4 7b46 	vcmp.f64	d7, d6
 800bcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800bcbe:	dd24      	ble.n	800bd0a <_printf_float+0xa2>
 800bcc0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc8:	d502      	bpl.n	800bcd0 <_printf_float+0x68>
 800bcca:	232d      	movs	r3, #45	@ 0x2d
 800bccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcd0:	498f      	ldr	r1, [pc, #572]	@ (800bf10 <_printf_float+0x2a8>)
 800bcd2:	4b90      	ldr	r3, [pc, #576]	@ (800bf14 <_printf_float+0x2ac>)
 800bcd4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800bcd8:	bf94      	ite	ls
 800bcda:	4688      	movls	r8, r1
 800bcdc:	4698      	movhi	r8, r3
 800bcde:	f022 0204 	bic.w	r2, r2, #4
 800bce2:	2303      	movs	r3, #3
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	6022      	str	r2, [r4, #0]
 800bce8:	f04f 0a00 	mov.w	sl, #0
 800bcec:	9700      	str	r7, [sp, #0]
 800bcee:	4633      	mov	r3, r6
 800bcf0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bcf2:	4621      	mov	r1, r4
 800bcf4:	4628      	mov	r0, r5
 800bcf6:	f000 f9d1 	bl	800c09c <_printf_common>
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	f040 8089 	bne.w	800be12 <_printf_float+0x1aa>
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	b00d      	add	sp, #52	@ 0x34
 800bd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0a:	eeb4 0b40 	vcmp.f64	d0, d0
 800bd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd12:	d709      	bvc.n	800bd28 <_printf_float+0xc0>
 800bd14:	ee10 3a90 	vmov	r3, s1
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	bfbc      	itt	lt
 800bd1c:	232d      	movlt	r3, #45	@ 0x2d
 800bd1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800bd22:	497d      	ldr	r1, [pc, #500]	@ (800bf18 <_printf_float+0x2b0>)
 800bd24:	4b7d      	ldr	r3, [pc, #500]	@ (800bf1c <_printf_float+0x2b4>)
 800bd26:	e7d5      	b.n	800bcd4 <_printf_float+0x6c>
 800bd28:	6863      	ldr	r3, [r4, #4]
 800bd2a:	1c59      	adds	r1, r3, #1
 800bd2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800bd30:	d139      	bne.n	800bda6 <_printf_float+0x13e>
 800bd32:	2306      	movs	r3, #6
 800bd34:	6063      	str	r3, [r4, #4]
 800bd36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	6022      	str	r2, [r4, #0]
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	ab0a      	add	r3, sp, #40	@ 0x28
 800bd42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800bd46:	ab09      	add	r3, sp, #36	@ 0x24
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	6861      	ldr	r1, [r4, #4]
 800bd4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bd50:	4628      	mov	r0, r5
 800bd52:	f7ff fef9 	bl	800bb48 <__cvt>
 800bd56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bd5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	d129      	bne.n	800bdb4 <_printf_float+0x14c>
 800bd60:	1cc8      	adds	r0, r1, #3
 800bd62:	db02      	blt.n	800bd6a <_printf_float+0x102>
 800bd64:	6863      	ldr	r3, [r4, #4]
 800bd66:	4299      	cmp	r1, r3
 800bd68:	dd41      	ble.n	800bdee <_printf_float+0x186>
 800bd6a:	f1a9 0902 	sub.w	r9, r9, #2
 800bd6e:	fa5f f989 	uxtb.w	r9, r9
 800bd72:	3901      	subs	r1, #1
 800bd74:	464a      	mov	r2, r9
 800bd76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bd7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800bd7c:	f7ff ff38 	bl	800bbf0 <__exponent>
 800bd80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd82:	1813      	adds	r3, r2, r0
 800bd84:	2a01      	cmp	r2, #1
 800bd86:	4682      	mov	sl, r0
 800bd88:	6123      	str	r3, [r4, #16]
 800bd8a:	dc02      	bgt.n	800bd92 <_printf_float+0x12a>
 800bd8c:	6822      	ldr	r2, [r4, #0]
 800bd8e:	07d2      	lsls	r2, r2, #31
 800bd90:	d501      	bpl.n	800bd96 <_printf_float+0x12e>
 800bd92:	3301      	adds	r3, #1
 800bd94:	6123      	str	r3, [r4, #16]
 800bd96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0a6      	beq.n	800bcec <_printf_float+0x84>
 800bd9e:	232d      	movs	r3, #45	@ 0x2d
 800bda0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bda4:	e7a2      	b.n	800bcec <_printf_float+0x84>
 800bda6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800bdaa:	d1c4      	bne.n	800bd36 <_printf_float+0xce>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1c2      	bne.n	800bd36 <_printf_float+0xce>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	e7bf      	b.n	800bd34 <_printf_float+0xcc>
 800bdb4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800bdb8:	d9db      	bls.n	800bd72 <_printf_float+0x10a>
 800bdba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800bdbe:	d118      	bne.n	800bdf2 <_printf_float+0x18a>
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	6863      	ldr	r3, [r4, #4]
 800bdc4:	dd0b      	ble.n	800bdde <_printf_float+0x176>
 800bdc6:	6121      	str	r1, [r4, #16]
 800bdc8:	b913      	cbnz	r3, 800bdd0 <_printf_float+0x168>
 800bdca:	6822      	ldr	r2, [r4, #0]
 800bdcc:	07d0      	lsls	r0, r2, #31
 800bdce:	d502      	bpl.n	800bdd6 <_printf_float+0x16e>
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	440b      	add	r3, r1
 800bdd4:	6123      	str	r3, [r4, #16]
 800bdd6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bdd8:	f04f 0a00 	mov.w	sl, #0
 800bddc:	e7db      	b.n	800bd96 <_printf_float+0x12e>
 800bdde:	b913      	cbnz	r3, 800bde6 <_printf_float+0x17e>
 800bde0:	6822      	ldr	r2, [r4, #0]
 800bde2:	07d2      	lsls	r2, r2, #31
 800bde4:	d501      	bpl.n	800bdea <_printf_float+0x182>
 800bde6:	3302      	adds	r3, #2
 800bde8:	e7f4      	b.n	800bdd4 <_printf_float+0x16c>
 800bdea:	2301      	movs	r3, #1
 800bdec:	e7f2      	b.n	800bdd4 <_printf_float+0x16c>
 800bdee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800bdf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdf4:	4299      	cmp	r1, r3
 800bdf6:	db05      	blt.n	800be04 <_printf_float+0x19c>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	6121      	str	r1, [r4, #16]
 800bdfc:	07d8      	lsls	r0, r3, #31
 800bdfe:	d5ea      	bpl.n	800bdd6 <_printf_float+0x16e>
 800be00:	1c4b      	adds	r3, r1, #1
 800be02:	e7e7      	b.n	800bdd4 <_printf_float+0x16c>
 800be04:	2900      	cmp	r1, #0
 800be06:	bfd4      	ite	le
 800be08:	f1c1 0202 	rsble	r2, r1, #2
 800be0c:	2201      	movgt	r2, #1
 800be0e:	4413      	add	r3, r2
 800be10:	e7e0      	b.n	800bdd4 <_printf_float+0x16c>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	055a      	lsls	r2, r3, #21
 800be16:	d407      	bmi.n	800be28 <_printf_float+0x1c0>
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	4642      	mov	r2, r8
 800be1c:	4631      	mov	r1, r6
 800be1e:	4628      	mov	r0, r5
 800be20:	47b8      	blx	r7
 800be22:	3001      	adds	r0, #1
 800be24:	d12a      	bne.n	800be7c <_printf_float+0x214>
 800be26:	e76b      	b.n	800bd00 <_printf_float+0x98>
 800be28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800be2c:	f240 80e0 	bls.w	800bff0 <_printf_float+0x388>
 800be30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800be34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	d133      	bne.n	800bea6 <_printf_float+0x23e>
 800be3e:	4a38      	ldr	r2, [pc, #224]	@ (800bf20 <_printf_float+0x2b8>)
 800be40:	2301      	movs	r3, #1
 800be42:	4631      	mov	r1, r6
 800be44:	4628      	mov	r0, r5
 800be46:	47b8      	blx	r7
 800be48:	3001      	adds	r0, #1
 800be4a:	f43f af59 	beq.w	800bd00 <_printf_float+0x98>
 800be4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800be52:	4543      	cmp	r3, r8
 800be54:	db02      	blt.n	800be5c <_printf_float+0x1f4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	07d8      	lsls	r0, r3, #31
 800be5a:	d50f      	bpl.n	800be7c <_printf_float+0x214>
 800be5c:	9b05      	ldr	r3, [sp, #20]
 800be5e:	465a      	mov	r2, fp
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	f43f af4a 	beq.w	800bd00 <_printf_float+0x98>
 800be6c:	f04f 0900 	mov.w	r9, #0
 800be70:	f108 38ff 	add.w	r8, r8, #4294967295
 800be74:	f104 0a1a 	add.w	sl, r4, #26
 800be78:	45c8      	cmp	r8, r9
 800be7a:	dc09      	bgt.n	800be90 <_printf_float+0x228>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	079b      	lsls	r3, r3, #30
 800be80:	f100 8107 	bmi.w	800c092 <_printf_float+0x42a>
 800be84:	68e0      	ldr	r0, [r4, #12]
 800be86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be88:	4298      	cmp	r0, r3
 800be8a:	bfb8      	it	lt
 800be8c:	4618      	movlt	r0, r3
 800be8e:	e739      	b.n	800bd04 <_printf_float+0x9c>
 800be90:	2301      	movs	r3, #1
 800be92:	4652      	mov	r2, sl
 800be94:	4631      	mov	r1, r6
 800be96:	4628      	mov	r0, r5
 800be98:	47b8      	blx	r7
 800be9a:	3001      	adds	r0, #1
 800be9c:	f43f af30 	beq.w	800bd00 <_printf_float+0x98>
 800bea0:	f109 0901 	add.w	r9, r9, #1
 800bea4:	e7e8      	b.n	800be78 <_printf_float+0x210>
 800bea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dc3b      	bgt.n	800bf24 <_printf_float+0x2bc>
 800beac:	4a1c      	ldr	r2, [pc, #112]	@ (800bf20 <_printf_float+0x2b8>)
 800beae:	2301      	movs	r3, #1
 800beb0:	4631      	mov	r1, r6
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	f43f af22 	beq.w	800bd00 <_printf_float+0x98>
 800bebc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bec0:	ea59 0303 	orrs.w	r3, r9, r3
 800bec4:	d102      	bne.n	800becc <_printf_float+0x264>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	07d9      	lsls	r1, r3, #31
 800beca:	d5d7      	bpl.n	800be7c <_printf_float+0x214>
 800becc:	9b05      	ldr	r3, [sp, #20]
 800bece:	465a      	mov	r2, fp
 800bed0:	4631      	mov	r1, r6
 800bed2:	4628      	mov	r0, r5
 800bed4:	47b8      	blx	r7
 800bed6:	3001      	adds	r0, #1
 800bed8:	f43f af12 	beq.w	800bd00 <_printf_float+0x98>
 800bedc:	f04f 0a00 	mov.w	sl, #0
 800bee0:	f104 0b1a 	add.w	fp, r4, #26
 800bee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee6:	425b      	negs	r3, r3
 800bee8:	4553      	cmp	r3, sl
 800beea:	dc01      	bgt.n	800bef0 <_printf_float+0x288>
 800beec:	464b      	mov	r3, r9
 800beee:	e794      	b.n	800be1a <_printf_float+0x1b2>
 800bef0:	2301      	movs	r3, #1
 800bef2:	465a      	mov	r2, fp
 800bef4:	4631      	mov	r1, r6
 800bef6:	4628      	mov	r0, r5
 800bef8:	47b8      	blx	r7
 800befa:	3001      	adds	r0, #1
 800befc:	f43f af00 	beq.w	800bd00 <_printf_float+0x98>
 800bf00:	f10a 0a01 	add.w	sl, sl, #1
 800bf04:	e7ee      	b.n	800bee4 <_printf_float+0x27c>
 800bf06:	bf00      	nop
 800bf08:	ffffffff 	.word	0xffffffff
 800bf0c:	7fefffff 	.word	0x7fefffff
 800bf10:	08010658 	.word	0x08010658
 800bf14:	0801065c 	.word	0x0801065c
 800bf18:	08010660 	.word	0x08010660
 800bf1c:	08010664 	.word	0x08010664
 800bf20:	08010668 	.word	0x08010668
 800bf24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bf2a:	4553      	cmp	r3, sl
 800bf2c:	bfa8      	it	ge
 800bf2e:	4653      	movge	r3, sl
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	4699      	mov	r9, r3
 800bf34:	dc37      	bgt.n	800bfa6 <_printf_float+0x33e>
 800bf36:	2300      	movs	r3, #0
 800bf38:	9307      	str	r3, [sp, #28]
 800bf3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf3e:	f104 021a 	add.w	r2, r4, #26
 800bf42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bf44:	9907      	ldr	r1, [sp, #28]
 800bf46:	9306      	str	r3, [sp, #24]
 800bf48:	eba3 0309 	sub.w	r3, r3, r9
 800bf4c:	428b      	cmp	r3, r1
 800bf4e:	dc31      	bgt.n	800bfb4 <_printf_float+0x34c>
 800bf50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf52:	459a      	cmp	sl, r3
 800bf54:	dc3b      	bgt.n	800bfce <_printf_float+0x366>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	07da      	lsls	r2, r3, #31
 800bf5a:	d438      	bmi.n	800bfce <_printf_float+0x366>
 800bf5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf5e:	ebaa 0903 	sub.w	r9, sl, r3
 800bf62:	9b06      	ldr	r3, [sp, #24]
 800bf64:	ebaa 0303 	sub.w	r3, sl, r3
 800bf68:	4599      	cmp	r9, r3
 800bf6a:	bfa8      	it	ge
 800bf6c:	4699      	movge	r9, r3
 800bf6e:	f1b9 0f00 	cmp.w	r9, #0
 800bf72:	dc34      	bgt.n	800bfde <_printf_float+0x376>
 800bf74:	f04f 0800 	mov.w	r8, #0
 800bf78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf7c:	f104 0b1a 	add.w	fp, r4, #26
 800bf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf82:	ebaa 0303 	sub.w	r3, sl, r3
 800bf86:	eba3 0309 	sub.w	r3, r3, r9
 800bf8a:	4543      	cmp	r3, r8
 800bf8c:	f77f af76 	ble.w	800be7c <_printf_float+0x214>
 800bf90:	2301      	movs	r3, #1
 800bf92:	465a      	mov	r2, fp
 800bf94:	4631      	mov	r1, r6
 800bf96:	4628      	mov	r0, r5
 800bf98:	47b8      	blx	r7
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	f43f aeb0 	beq.w	800bd00 <_printf_float+0x98>
 800bfa0:	f108 0801 	add.w	r8, r8, #1
 800bfa4:	e7ec      	b.n	800bf80 <_printf_float+0x318>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d1c1      	bne.n	800bf36 <_printf_float+0x2ce>
 800bfb2:	e6a5      	b.n	800bd00 <_printf_float+0x98>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4628      	mov	r0, r5
 800bfba:	9206      	str	r2, [sp, #24]
 800bfbc:	47b8      	blx	r7
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	f43f ae9e 	beq.w	800bd00 <_printf_float+0x98>
 800bfc4:	9b07      	ldr	r3, [sp, #28]
 800bfc6:	9a06      	ldr	r2, [sp, #24]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	9307      	str	r3, [sp, #28]
 800bfcc:	e7b9      	b.n	800bf42 <_printf_float+0x2da>
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	465a      	mov	r2, fp
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	47b8      	blx	r7
 800bfd8:	3001      	adds	r0, #1
 800bfda:	d1bf      	bne.n	800bf5c <_printf_float+0x2f4>
 800bfdc:	e690      	b.n	800bd00 <_printf_float+0x98>
 800bfde:	9a06      	ldr	r2, [sp, #24]
 800bfe0:	464b      	mov	r3, r9
 800bfe2:	4442      	add	r2, r8
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	d1c2      	bne.n	800bf74 <_printf_float+0x30c>
 800bfee:	e687      	b.n	800bd00 <_printf_float+0x98>
 800bff0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800bff4:	f1b9 0f01 	cmp.w	r9, #1
 800bff8:	dc01      	bgt.n	800bffe <_printf_float+0x396>
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d536      	bpl.n	800c06c <_printf_float+0x404>
 800bffe:	2301      	movs	r3, #1
 800c000:	4642      	mov	r2, r8
 800c002:	4631      	mov	r1, r6
 800c004:	4628      	mov	r0, r5
 800c006:	47b8      	blx	r7
 800c008:	3001      	adds	r0, #1
 800c00a:	f43f ae79 	beq.w	800bd00 <_printf_float+0x98>
 800c00e:	9b05      	ldr	r3, [sp, #20]
 800c010:	465a      	mov	r2, fp
 800c012:	4631      	mov	r1, r6
 800c014:	4628      	mov	r0, r5
 800c016:	47b8      	blx	r7
 800c018:	3001      	adds	r0, #1
 800c01a:	f43f ae71 	beq.w	800bd00 <_printf_float+0x98>
 800c01e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800c022:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02a:	f109 39ff 	add.w	r9, r9, #4294967295
 800c02e:	d018      	beq.n	800c062 <_printf_float+0x3fa>
 800c030:	464b      	mov	r3, r9
 800c032:	f108 0201 	add.w	r2, r8, #1
 800c036:	4631      	mov	r1, r6
 800c038:	4628      	mov	r0, r5
 800c03a:	47b8      	blx	r7
 800c03c:	3001      	adds	r0, #1
 800c03e:	d10c      	bne.n	800c05a <_printf_float+0x3f2>
 800c040:	e65e      	b.n	800bd00 <_printf_float+0x98>
 800c042:	2301      	movs	r3, #1
 800c044:	465a      	mov	r2, fp
 800c046:	4631      	mov	r1, r6
 800c048:	4628      	mov	r0, r5
 800c04a:	47b8      	blx	r7
 800c04c:	3001      	adds	r0, #1
 800c04e:	f43f ae57 	beq.w	800bd00 <_printf_float+0x98>
 800c052:	f108 0801 	add.w	r8, r8, #1
 800c056:	45c8      	cmp	r8, r9
 800c058:	dbf3      	blt.n	800c042 <_printf_float+0x3da>
 800c05a:	4653      	mov	r3, sl
 800c05c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c060:	e6dc      	b.n	800be1c <_printf_float+0x1b4>
 800c062:	f04f 0800 	mov.w	r8, #0
 800c066:	f104 0b1a 	add.w	fp, r4, #26
 800c06a:	e7f4      	b.n	800c056 <_printf_float+0x3ee>
 800c06c:	2301      	movs	r3, #1
 800c06e:	4642      	mov	r2, r8
 800c070:	e7e1      	b.n	800c036 <_printf_float+0x3ce>
 800c072:	2301      	movs	r3, #1
 800c074:	464a      	mov	r2, r9
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	f43f ae3f 	beq.w	800bd00 <_printf_float+0x98>
 800c082:	f108 0801 	add.w	r8, r8, #1
 800c086:	68e3      	ldr	r3, [r4, #12]
 800c088:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c08a:	1a5b      	subs	r3, r3, r1
 800c08c:	4543      	cmp	r3, r8
 800c08e:	dcf0      	bgt.n	800c072 <_printf_float+0x40a>
 800c090:	e6f8      	b.n	800be84 <_printf_float+0x21c>
 800c092:	f04f 0800 	mov.w	r8, #0
 800c096:	f104 0919 	add.w	r9, r4, #25
 800c09a:	e7f4      	b.n	800c086 <_printf_float+0x41e>

0800c09c <_printf_common>:
 800c09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	4698      	mov	r8, r3
 800c0a4:	688a      	ldr	r2, [r1, #8]
 800c0a6:	690b      	ldr	r3, [r1, #16]
 800c0a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	bfb8      	it	lt
 800c0b0:	4613      	movlt	r3, r2
 800c0b2:	6033      	str	r3, [r6, #0]
 800c0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c0b8:	4607      	mov	r7, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	b10a      	cbz	r2, 800c0c2 <_printf_common+0x26>
 800c0be:	3301      	adds	r3, #1
 800c0c0:	6033      	str	r3, [r6, #0]
 800c0c2:	6823      	ldr	r3, [r4, #0]
 800c0c4:	0699      	lsls	r1, r3, #26
 800c0c6:	bf42      	ittt	mi
 800c0c8:	6833      	ldrmi	r3, [r6, #0]
 800c0ca:	3302      	addmi	r3, #2
 800c0cc:	6033      	strmi	r3, [r6, #0]
 800c0ce:	6825      	ldr	r5, [r4, #0]
 800c0d0:	f015 0506 	ands.w	r5, r5, #6
 800c0d4:	d106      	bne.n	800c0e4 <_printf_common+0x48>
 800c0d6:	f104 0a19 	add.w	sl, r4, #25
 800c0da:	68e3      	ldr	r3, [r4, #12]
 800c0dc:	6832      	ldr	r2, [r6, #0]
 800c0de:	1a9b      	subs	r3, r3, r2
 800c0e0:	42ab      	cmp	r3, r5
 800c0e2:	dc26      	bgt.n	800c132 <_printf_common+0x96>
 800c0e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c0e8:	6822      	ldr	r2, [r4, #0]
 800c0ea:	3b00      	subs	r3, #0
 800c0ec:	bf18      	it	ne
 800c0ee:	2301      	movne	r3, #1
 800c0f0:	0692      	lsls	r2, r2, #26
 800c0f2:	d42b      	bmi.n	800c14c <_printf_common+0xb0>
 800c0f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c0f8:	4641      	mov	r1, r8
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	47c8      	blx	r9
 800c0fe:	3001      	adds	r0, #1
 800c100:	d01e      	beq.n	800c140 <_printf_common+0xa4>
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	f003 0306 	and.w	r3, r3, #6
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	bf02      	ittt	eq
 800c10e:	68e5      	ldreq	r5, [r4, #12]
 800c110:	6833      	ldreq	r3, [r6, #0]
 800c112:	1aed      	subeq	r5, r5, r3
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	bf0c      	ite	eq
 800c118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c11c:	2500      	movne	r5, #0
 800c11e:	4293      	cmp	r3, r2
 800c120:	bfc4      	itt	gt
 800c122:	1a9b      	subgt	r3, r3, r2
 800c124:	18ed      	addgt	r5, r5, r3
 800c126:	2600      	movs	r6, #0
 800c128:	341a      	adds	r4, #26
 800c12a:	42b5      	cmp	r5, r6
 800c12c:	d11a      	bne.n	800c164 <_printf_common+0xc8>
 800c12e:	2000      	movs	r0, #0
 800c130:	e008      	b.n	800c144 <_printf_common+0xa8>
 800c132:	2301      	movs	r3, #1
 800c134:	4652      	mov	r2, sl
 800c136:	4641      	mov	r1, r8
 800c138:	4638      	mov	r0, r7
 800c13a:	47c8      	blx	r9
 800c13c:	3001      	adds	r0, #1
 800c13e:	d103      	bne.n	800c148 <_printf_common+0xac>
 800c140:	f04f 30ff 	mov.w	r0, #4294967295
 800c144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c148:	3501      	adds	r5, #1
 800c14a:	e7c6      	b.n	800c0da <_printf_common+0x3e>
 800c14c:	18e1      	adds	r1, r4, r3
 800c14e:	1c5a      	adds	r2, r3, #1
 800c150:	2030      	movs	r0, #48	@ 0x30
 800c152:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c156:	4422      	add	r2, r4
 800c158:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c15c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c160:	3302      	adds	r3, #2
 800c162:	e7c7      	b.n	800c0f4 <_printf_common+0x58>
 800c164:	2301      	movs	r3, #1
 800c166:	4622      	mov	r2, r4
 800c168:	4641      	mov	r1, r8
 800c16a:	4638      	mov	r0, r7
 800c16c:	47c8      	blx	r9
 800c16e:	3001      	adds	r0, #1
 800c170:	d0e6      	beq.n	800c140 <_printf_common+0xa4>
 800c172:	3601      	adds	r6, #1
 800c174:	e7d9      	b.n	800c12a <_printf_common+0x8e>
	...

0800c178 <_printf_i>:
 800c178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c17c:	7e0f      	ldrb	r7, [r1, #24]
 800c17e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c180:	2f78      	cmp	r7, #120	@ 0x78
 800c182:	4691      	mov	r9, r2
 800c184:	4680      	mov	r8, r0
 800c186:	460c      	mov	r4, r1
 800c188:	469a      	mov	sl, r3
 800c18a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c18e:	d807      	bhi.n	800c1a0 <_printf_i+0x28>
 800c190:	2f62      	cmp	r7, #98	@ 0x62
 800c192:	d80a      	bhi.n	800c1aa <_printf_i+0x32>
 800c194:	2f00      	cmp	r7, #0
 800c196:	f000 80d2 	beq.w	800c33e <_printf_i+0x1c6>
 800c19a:	2f58      	cmp	r7, #88	@ 0x58
 800c19c:	f000 80b9 	beq.w	800c312 <_printf_i+0x19a>
 800c1a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c1a8:	e03a      	b.n	800c220 <_printf_i+0xa8>
 800c1aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c1ae:	2b15      	cmp	r3, #21
 800c1b0:	d8f6      	bhi.n	800c1a0 <_printf_i+0x28>
 800c1b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c1b8 <_printf_i+0x40>)
 800c1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1b8:	0800c211 	.word	0x0800c211
 800c1bc:	0800c225 	.word	0x0800c225
 800c1c0:	0800c1a1 	.word	0x0800c1a1
 800c1c4:	0800c1a1 	.word	0x0800c1a1
 800c1c8:	0800c1a1 	.word	0x0800c1a1
 800c1cc:	0800c1a1 	.word	0x0800c1a1
 800c1d0:	0800c225 	.word	0x0800c225
 800c1d4:	0800c1a1 	.word	0x0800c1a1
 800c1d8:	0800c1a1 	.word	0x0800c1a1
 800c1dc:	0800c1a1 	.word	0x0800c1a1
 800c1e0:	0800c1a1 	.word	0x0800c1a1
 800c1e4:	0800c325 	.word	0x0800c325
 800c1e8:	0800c24f 	.word	0x0800c24f
 800c1ec:	0800c2df 	.word	0x0800c2df
 800c1f0:	0800c1a1 	.word	0x0800c1a1
 800c1f4:	0800c1a1 	.word	0x0800c1a1
 800c1f8:	0800c347 	.word	0x0800c347
 800c1fc:	0800c1a1 	.word	0x0800c1a1
 800c200:	0800c24f 	.word	0x0800c24f
 800c204:	0800c1a1 	.word	0x0800c1a1
 800c208:	0800c1a1 	.word	0x0800c1a1
 800c20c:	0800c2e7 	.word	0x0800c2e7
 800c210:	6833      	ldr	r3, [r6, #0]
 800c212:	1d1a      	adds	r2, r3, #4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6032      	str	r2, [r6, #0]
 800c218:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c21c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c220:	2301      	movs	r3, #1
 800c222:	e09d      	b.n	800c360 <_printf_i+0x1e8>
 800c224:	6833      	ldr	r3, [r6, #0]
 800c226:	6820      	ldr	r0, [r4, #0]
 800c228:	1d19      	adds	r1, r3, #4
 800c22a:	6031      	str	r1, [r6, #0]
 800c22c:	0606      	lsls	r6, r0, #24
 800c22e:	d501      	bpl.n	800c234 <_printf_i+0xbc>
 800c230:	681d      	ldr	r5, [r3, #0]
 800c232:	e003      	b.n	800c23c <_printf_i+0xc4>
 800c234:	0645      	lsls	r5, r0, #25
 800c236:	d5fb      	bpl.n	800c230 <_printf_i+0xb8>
 800c238:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	da03      	bge.n	800c248 <_printf_i+0xd0>
 800c240:	232d      	movs	r3, #45	@ 0x2d
 800c242:	426d      	negs	r5, r5
 800c244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c248:	4859      	ldr	r0, [pc, #356]	@ (800c3b0 <_printf_i+0x238>)
 800c24a:	230a      	movs	r3, #10
 800c24c:	e011      	b.n	800c272 <_printf_i+0xfa>
 800c24e:	6821      	ldr	r1, [r4, #0]
 800c250:	6833      	ldr	r3, [r6, #0]
 800c252:	0608      	lsls	r0, r1, #24
 800c254:	f853 5b04 	ldr.w	r5, [r3], #4
 800c258:	d402      	bmi.n	800c260 <_printf_i+0xe8>
 800c25a:	0649      	lsls	r1, r1, #25
 800c25c:	bf48      	it	mi
 800c25e:	b2ad      	uxthmi	r5, r5
 800c260:	2f6f      	cmp	r7, #111	@ 0x6f
 800c262:	4853      	ldr	r0, [pc, #332]	@ (800c3b0 <_printf_i+0x238>)
 800c264:	6033      	str	r3, [r6, #0]
 800c266:	bf14      	ite	ne
 800c268:	230a      	movne	r3, #10
 800c26a:	2308      	moveq	r3, #8
 800c26c:	2100      	movs	r1, #0
 800c26e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c272:	6866      	ldr	r6, [r4, #4]
 800c274:	60a6      	str	r6, [r4, #8]
 800c276:	2e00      	cmp	r6, #0
 800c278:	bfa2      	ittt	ge
 800c27a:	6821      	ldrge	r1, [r4, #0]
 800c27c:	f021 0104 	bicge.w	r1, r1, #4
 800c280:	6021      	strge	r1, [r4, #0]
 800c282:	b90d      	cbnz	r5, 800c288 <_printf_i+0x110>
 800c284:	2e00      	cmp	r6, #0
 800c286:	d04b      	beq.n	800c320 <_printf_i+0x1a8>
 800c288:	4616      	mov	r6, r2
 800c28a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c28e:	fb03 5711 	mls	r7, r3, r1, r5
 800c292:	5dc7      	ldrb	r7, [r0, r7]
 800c294:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c298:	462f      	mov	r7, r5
 800c29a:	42bb      	cmp	r3, r7
 800c29c:	460d      	mov	r5, r1
 800c29e:	d9f4      	bls.n	800c28a <_printf_i+0x112>
 800c2a0:	2b08      	cmp	r3, #8
 800c2a2:	d10b      	bne.n	800c2bc <_printf_i+0x144>
 800c2a4:	6823      	ldr	r3, [r4, #0]
 800c2a6:	07df      	lsls	r7, r3, #31
 800c2a8:	d508      	bpl.n	800c2bc <_printf_i+0x144>
 800c2aa:	6923      	ldr	r3, [r4, #16]
 800c2ac:	6861      	ldr	r1, [r4, #4]
 800c2ae:	4299      	cmp	r1, r3
 800c2b0:	bfde      	ittt	le
 800c2b2:	2330      	movle	r3, #48	@ 0x30
 800c2b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c2b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c2bc:	1b92      	subs	r2, r2, r6
 800c2be:	6122      	str	r2, [r4, #16]
 800c2c0:	f8cd a000 	str.w	sl, [sp]
 800c2c4:	464b      	mov	r3, r9
 800c2c6:	aa03      	add	r2, sp, #12
 800c2c8:	4621      	mov	r1, r4
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	f7ff fee6 	bl	800c09c <_printf_common>
 800c2d0:	3001      	adds	r0, #1
 800c2d2:	d14a      	bne.n	800c36a <_printf_i+0x1f2>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	b004      	add	sp, #16
 800c2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	f043 0320 	orr.w	r3, r3, #32
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	4833      	ldr	r0, [pc, #204]	@ (800c3b4 <_printf_i+0x23c>)
 800c2e8:	2778      	movs	r7, #120	@ 0x78
 800c2ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	6831      	ldr	r1, [r6, #0]
 800c2f2:	061f      	lsls	r7, r3, #24
 800c2f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c2f8:	d402      	bmi.n	800c300 <_printf_i+0x188>
 800c2fa:	065f      	lsls	r7, r3, #25
 800c2fc:	bf48      	it	mi
 800c2fe:	b2ad      	uxthmi	r5, r5
 800c300:	6031      	str	r1, [r6, #0]
 800c302:	07d9      	lsls	r1, r3, #31
 800c304:	bf44      	itt	mi
 800c306:	f043 0320 	orrmi.w	r3, r3, #32
 800c30a:	6023      	strmi	r3, [r4, #0]
 800c30c:	b11d      	cbz	r5, 800c316 <_printf_i+0x19e>
 800c30e:	2310      	movs	r3, #16
 800c310:	e7ac      	b.n	800c26c <_printf_i+0xf4>
 800c312:	4827      	ldr	r0, [pc, #156]	@ (800c3b0 <_printf_i+0x238>)
 800c314:	e7e9      	b.n	800c2ea <_printf_i+0x172>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	f023 0320 	bic.w	r3, r3, #32
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	e7f6      	b.n	800c30e <_printf_i+0x196>
 800c320:	4616      	mov	r6, r2
 800c322:	e7bd      	b.n	800c2a0 <_printf_i+0x128>
 800c324:	6833      	ldr	r3, [r6, #0]
 800c326:	6825      	ldr	r5, [r4, #0]
 800c328:	6961      	ldr	r1, [r4, #20]
 800c32a:	1d18      	adds	r0, r3, #4
 800c32c:	6030      	str	r0, [r6, #0]
 800c32e:	062e      	lsls	r6, r5, #24
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	d501      	bpl.n	800c338 <_printf_i+0x1c0>
 800c334:	6019      	str	r1, [r3, #0]
 800c336:	e002      	b.n	800c33e <_printf_i+0x1c6>
 800c338:	0668      	lsls	r0, r5, #25
 800c33a:	d5fb      	bpl.n	800c334 <_printf_i+0x1bc>
 800c33c:	8019      	strh	r1, [r3, #0]
 800c33e:	2300      	movs	r3, #0
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	4616      	mov	r6, r2
 800c344:	e7bc      	b.n	800c2c0 <_printf_i+0x148>
 800c346:	6833      	ldr	r3, [r6, #0]
 800c348:	1d1a      	adds	r2, r3, #4
 800c34a:	6032      	str	r2, [r6, #0]
 800c34c:	681e      	ldr	r6, [r3, #0]
 800c34e:	6862      	ldr	r2, [r4, #4]
 800c350:	2100      	movs	r1, #0
 800c352:	4630      	mov	r0, r6
 800c354:	f7f3 ffc4 	bl	80002e0 <memchr>
 800c358:	b108      	cbz	r0, 800c35e <_printf_i+0x1e6>
 800c35a:	1b80      	subs	r0, r0, r6
 800c35c:	6060      	str	r0, [r4, #4]
 800c35e:	6863      	ldr	r3, [r4, #4]
 800c360:	6123      	str	r3, [r4, #16]
 800c362:	2300      	movs	r3, #0
 800c364:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c368:	e7aa      	b.n	800c2c0 <_printf_i+0x148>
 800c36a:	6923      	ldr	r3, [r4, #16]
 800c36c:	4632      	mov	r2, r6
 800c36e:	4649      	mov	r1, r9
 800c370:	4640      	mov	r0, r8
 800c372:	47d0      	blx	sl
 800c374:	3001      	adds	r0, #1
 800c376:	d0ad      	beq.n	800c2d4 <_printf_i+0x15c>
 800c378:	6823      	ldr	r3, [r4, #0]
 800c37a:	079b      	lsls	r3, r3, #30
 800c37c:	d413      	bmi.n	800c3a6 <_printf_i+0x22e>
 800c37e:	68e0      	ldr	r0, [r4, #12]
 800c380:	9b03      	ldr	r3, [sp, #12]
 800c382:	4298      	cmp	r0, r3
 800c384:	bfb8      	it	lt
 800c386:	4618      	movlt	r0, r3
 800c388:	e7a6      	b.n	800c2d8 <_printf_i+0x160>
 800c38a:	2301      	movs	r3, #1
 800c38c:	4632      	mov	r2, r6
 800c38e:	4649      	mov	r1, r9
 800c390:	4640      	mov	r0, r8
 800c392:	47d0      	blx	sl
 800c394:	3001      	adds	r0, #1
 800c396:	d09d      	beq.n	800c2d4 <_printf_i+0x15c>
 800c398:	3501      	adds	r5, #1
 800c39a:	68e3      	ldr	r3, [r4, #12]
 800c39c:	9903      	ldr	r1, [sp, #12]
 800c39e:	1a5b      	subs	r3, r3, r1
 800c3a0:	42ab      	cmp	r3, r5
 800c3a2:	dcf2      	bgt.n	800c38a <_printf_i+0x212>
 800c3a4:	e7eb      	b.n	800c37e <_printf_i+0x206>
 800c3a6:	2500      	movs	r5, #0
 800c3a8:	f104 0619 	add.w	r6, r4, #25
 800c3ac:	e7f5      	b.n	800c39a <_printf_i+0x222>
 800c3ae:	bf00      	nop
 800c3b0:	0801066a 	.word	0x0801066a
 800c3b4:	0801067b 	.word	0x0801067b

0800c3b8 <_scanf_float>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	b087      	sub	sp, #28
 800c3be:	4617      	mov	r7, r2
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	688b      	ldr	r3, [r1, #8]
 800c3c4:	1e5a      	subs	r2, r3, #1
 800c3c6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c3ca:	bf81      	itttt	hi
 800c3cc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c3d0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c3d4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c3d8:	608b      	strhi	r3, [r1, #8]
 800c3da:	680b      	ldr	r3, [r1, #0]
 800c3dc:	460a      	mov	r2, r1
 800c3de:	f04f 0500 	mov.w	r5, #0
 800c3e2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c3e6:	f842 3b1c 	str.w	r3, [r2], #28
 800c3ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c3ee:	4680      	mov	r8, r0
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	bf98      	it	ls
 800c3f4:	f04f 0b00 	movls.w	fp, #0
 800c3f8:	9201      	str	r2, [sp, #4]
 800c3fa:	4616      	mov	r6, r2
 800c3fc:	46aa      	mov	sl, r5
 800c3fe:	46a9      	mov	r9, r5
 800c400:	9502      	str	r5, [sp, #8]
 800c402:	68a2      	ldr	r2, [r4, #8]
 800c404:	b152      	cbz	r2, 800c41c <_scanf_float+0x64>
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c40c:	d864      	bhi.n	800c4d8 <_scanf_float+0x120>
 800c40e:	2b40      	cmp	r3, #64	@ 0x40
 800c410:	d83c      	bhi.n	800c48c <_scanf_float+0xd4>
 800c412:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c416:	b2c8      	uxtb	r0, r1
 800c418:	280e      	cmp	r0, #14
 800c41a:	d93a      	bls.n	800c492 <_scanf_float+0xda>
 800c41c:	f1b9 0f00 	cmp.w	r9, #0
 800c420:	d003      	beq.n	800c42a <_scanf_float+0x72>
 800c422:	6823      	ldr	r3, [r4, #0]
 800c424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c42e:	f1ba 0f01 	cmp.w	sl, #1
 800c432:	f200 8117 	bhi.w	800c664 <_scanf_float+0x2ac>
 800c436:	9b01      	ldr	r3, [sp, #4]
 800c438:	429e      	cmp	r6, r3
 800c43a:	f200 8108 	bhi.w	800c64e <_scanf_float+0x296>
 800c43e:	2001      	movs	r0, #1
 800c440:	b007      	add	sp, #28
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c44a:	2a0d      	cmp	r2, #13
 800c44c:	d8e6      	bhi.n	800c41c <_scanf_float+0x64>
 800c44e:	a101      	add	r1, pc, #4	@ (adr r1, 800c454 <_scanf_float+0x9c>)
 800c450:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c454:	0800c59b 	.word	0x0800c59b
 800c458:	0800c41d 	.word	0x0800c41d
 800c45c:	0800c41d 	.word	0x0800c41d
 800c460:	0800c41d 	.word	0x0800c41d
 800c464:	0800c5fb 	.word	0x0800c5fb
 800c468:	0800c5d3 	.word	0x0800c5d3
 800c46c:	0800c41d 	.word	0x0800c41d
 800c470:	0800c41d 	.word	0x0800c41d
 800c474:	0800c5a9 	.word	0x0800c5a9
 800c478:	0800c41d 	.word	0x0800c41d
 800c47c:	0800c41d 	.word	0x0800c41d
 800c480:	0800c41d 	.word	0x0800c41d
 800c484:	0800c41d 	.word	0x0800c41d
 800c488:	0800c561 	.word	0x0800c561
 800c48c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c490:	e7db      	b.n	800c44a <_scanf_float+0x92>
 800c492:	290e      	cmp	r1, #14
 800c494:	d8c2      	bhi.n	800c41c <_scanf_float+0x64>
 800c496:	a001      	add	r0, pc, #4	@ (adr r0, 800c49c <_scanf_float+0xe4>)
 800c498:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c49c:	0800c551 	.word	0x0800c551
 800c4a0:	0800c41d 	.word	0x0800c41d
 800c4a4:	0800c551 	.word	0x0800c551
 800c4a8:	0800c5e7 	.word	0x0800c5e7
 800c4ac:	0800c41d 	.word	0x0800c41d
 800c4b0:	0800c4f9 	.word	0x0800c4f9
 800c4b4:	0800c537 	.word	0x0800c537
 800c4b8:	0800c537 	.word	0x0800c537
 800c4bc:	0800c537 	.word	0x0800c537
 800c4c0:	0800c537 	.word	0x0800c537
 800c4c4:	0800c537 	.word	0x0800c537
 800c4c8:	0800c537 	.word	0x0800c537
 800c4cc:	0800c537 	.word	0x0800c537
 800c4d0:	0800c537 	.word	0x0800c537
 800c4d4:	0800c537 	.word	0x0800c537
 800c4d8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c4da:	d809      	bhi.n	800c4f0 <_scanf_float+0x138>
 800c4dc:	2b60      	cmp	r3, #96	@ 0x60
 800c4de:	d8b2      	bhi.n	800c446 <_scanf_float+0x8e>
 800c4e0:	2b54      	cmp	r3, #84	@ 0x54
 800c4e2:	d07b      	beq.n	800c5dc <_scanf_float+0x224>
 800c4e4:	2b59      	cmp	r3, #89	@ 0x59
 800c4e6:	d199      	bne.n	800c41c <_scanf_float+0x64>
 800c4e8:	2d07      	cmp	r5, #7
 800c4ea:	d197      	bne.n	800c41c <_scanf_float+0x64>
 800c4ec:	2508      	movs	r5, #8
 800c4ee:	e02c      	b.n	800c54a <_scanf_float+0x192>
 800c4f0:	2b74      	cmp	r3, #116	@ 0x74
 800c4f2:	d073      	beq.n	800c5dc <_scanf_float+0x224>
 800c4f4:	2b79      	cmp	r3, #121	@ 0x79
 800c4f6:	e7f6      	b.n	800c4e6 <_scanf_float+0x12e>
 800c4f8:	6821      	ldr	r1, [r4, #0]
 800c4fa:	05c8      	lsls	r0, r1, #23
 800c4fc:	d51b      	bpl.n	800c536 <_scanf_float+0x17e>
 800c4fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c502:	6021      	str	r1, [r4, #0]
 800c504:	f109 0901 	add.w	r9, r9, #1
 800c508:	f1bb 0f00 	cmp.w	fp, #0
 800c50c:	d003      	beq.n	800c516 <_scanf_float+0x15e>
 800c50e:	3201      	adds	r2, #1
 800c510:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c514:	60a2      	str	r2, [r4, #8]
 800c516:	68a3      	ldr	r3, [r4, #8]
 800c518:	3b01      	subs	r3, #1
 800c51a:	60a3      	str	r3, [r4, #8]
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	3301      	adds	r3, #1
 800c520:	6123      	str	r3, [r4, #16]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3b01      	subs	r3, #1
 800c526:	2b00      	cmp	r3, #0
 800c528:	607b      	str	r3, [r7, #4]
 800c52a:	f340 8087 	ble.w	800c63c <_scanf_float+0x284>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	3301      	adds	r3, #1
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	e765      	b.n	800c402 <_scanf_float+0x4a>
 800c536:	eb1a 0105 	adds.w	r1, sl, r5
 800c53a:	f47f af6f 	bne.w	800c41c <_scanf_float+0x64>
 800c53e:	6822      	ldr	r2, [r4, #0]
 800c540:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c544:	6022      	str	r2, [r4, #0]
 800c546:	460d      	mov	r5, r1
 800c548:	468a      	mov	sl, r1
 800c54a:	f806 3b01 	strb.w	r3, [r6], #1
 800c54e:	e7e2      	b.n	800c516 <_scanf_float+0x15e>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	0610      	lsls	r0, r2, #24
 800c554:	f57f af62 	bpl.w	800c41c <_scanf_float+0x64>
 800c558:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c55c:	6022      	str	r2, [r4, #0]
 800c55e:	e7f4      	b.n	800c54a <_scanf_float+0x192>
 800c560:	f1ba 0f00 	cmp.w	sl, #0
 800c564:	d10e      	bne.n	800c584 <_scanf_float+0x1cc>
 800c566:	f1b9 0f00 	cmp.w	r9, #0
 800c56a:	d10e      	bne.n	800c58a <_scanf_float+0x1d2>
 800c56c:	6822      	ldr	r2, [r4, #0]
 800c56e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c572:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c576:	d108      	bne.n	800c58a <_scanf_float+0x1d2>
 800c578:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c57c:	6022      	str	r2, [r4, #0]
 800c57e:	f04f 0a01 	mov.w	sl, #1
 800c582:	e7e2      	b.n	800c54a <_scanf_float+0x192>
 800c584:	f1ba 0f02 	cmp.w	sl, #2
 800c588:	d055      	beq.n	800c636 <_scanf_float+0x27e>
 800c58a:	2d01      	cmp	r5, #1
 800c58c:	d002      	beq.n	800c594 <_scanf_float+0x1dc>
 800c58e:	2d04      	cmp	r5, #4
 800c590:	f47f af44 	bne.w	800c41c <_scanf_float+0x64>
 800c594:	3501      	adds	r5, #1
 800c596:	b2ed      	uxtb	r5, r5
 800c598:	e7d7      	b.n	800c54a <_scanf_float+0x192>
 800c59a:	f1ba 0f01 	cmp.w	sl, #1
 800c59e:	f47f af3d 	bne.w	800c41c <_scanf_float+0x64>
 800c5a2:	f04f 0a02 	mov.w	sl, #2
 800c5a6:	e7d0      	b.n	800c54a <_scanf_float+0x192>
 800c5a8:	b97d      	cbnz	r5, 800c5ca <_scanf_float+0x212>
 800c5aa:	f1b9 0f00 	cmp.w	r9, #0
 800c5ae:	f47f af38 	bne.w	800c422 <_scanf_float+0x6a>
 800c5b2:	6822      	ldr	r2, [r4, #0]
 800c5b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c5b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c5bc:	f040 8101 	bne.w	800c7c2 <_scanf_float+0x40a>
 800c5c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c5c4:	6022      	str	r2, [r4, #0]
 800c5c6:	2501      	movs	r5, #1
 800c5c8:	e7bf      	b.n	800c54a <_scanf_float+0x192>
 800c5ca:	2d03      	cmp	r5, #3
 800c5cc:	d0e2      	beq.n	800c594 <_scanf_float+0x1dc>
 800c5ce:	2d05      	cmp	r5, #5
 800c5d0:	e7de      	b.n	800c590 <_scanf_float+0x1d8>
 800c5d2:	2d02      	cmp	r5, #2
 800c5d4:	f47f af22 	bne.w	800c41c <_scanf_float+0x64>
 800c5d8:	2503      	movs	r5, #3
 800c5da:	e7b6      	b.n	800c54a <_scanf_float+0x192>
 800c5dc:	2d06      	cmp	r5, #6
 800c5de:	f47f af1d 	bne.w	800c41c <_scanf_float+0x64>
 800c5e2:	2507      	movs	r5, #7
 800c5e4:	e7b1      	b.n	800c54a <_scanf_float+0x192>
 800c5e6:	6822      	ldr	r2, [r4, #0]
 800c5e8:	0591      	lsls	r1, r2, #22
 800c5ea:	f57f af17 	bpl.w	800c41c <_scanf_float+0x64>
 800c5ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c5f2:	6022      	str	r2, [r4, #0]
 800c5f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800c5f8:	e7a7      	b.n	800c54a <_scanf_float+0x192>
 800c5fa:	6822      	ldr	r2, [r4, #0]
 800c5fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c600:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c604:	d006      	beq.n	800c614 <_scanf_float+0x25c>
 800c606:	0550      	lsls	r0, r2, #21
 800c608:	f57f af08 	bpl.w	800c41c <_scanf_float+0x64>
 800c60c:	f1b9 0f00 	cmp.w	r9, #0
 800c610:	f000 80d7 	beq.w	800c7c2 <_scanf_float+0x40a>
 800c614:	0591      	lsls	r1, r2, #22
 800c616:	bf58      	it	pl
 800c618:	9902      	ldrpl	r1, [sp, #8]
 800c61a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c61e:	bf58      	it	pl
 800c620:	eba9 0101 	subpl.w	r1, r9, r1
 800c624:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c628:	bf58      	it	pl
 800c62a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c62e:	6022      	str	r2, [r4, #0]
 800c630:	f04f 0900 	mov.w	r9, #0
 800c634:	e789      	b.n	800c54a <_scanf_float+0x192>
 800c636:	f04f 0a03 	mov.w	sl, #3
 800c63a:	e786      	b.n	800c54a <_scanf_float+0x192>
 800c63c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c640:	4639      	mov	r1, r7
 800c642:	4640      	mov	r0, r8
 800c644:	4798      	blx	r3
 800c646:	2800      	cmp	r0, #0
 800c648:	f43f aedb 	beq.w	800c402 <_scanf_float+0x4a>
 800c64c:	e6e6      	b.n	800c41c <_scanf_float+0x64>
 800c64e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c652:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c656:	463a      	mov	r2, r7
 800c658:	4640      	mov	r0, r8
 800c65a:	4798      	blx	r3
 800c65c:	6923      	ldr	r3, [r4, #16]
 800c65e:	3b01      	subs	r3, #1
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	e6e8      	b.n	800c436 <_scanf_float+0x7e>
 800c664:	1e6b      	subs	r3, r5, #1
 800c666:	2b06      	cmp	r3, #6
 800c668:	d824      	bhi.n	800c6b4 <_scanf_float+0x2fc>
 800c66a:	2d02      	cmp	r5, #2
 800c66c:	d836      	bhi.n	800c6dc <_scanf_float+0x324>
 800c66e:	9b01      	ldr	r3, [sp, #4]
 800c670:	429e      	cmp	r6, r3
 800c672:	f67f aee4 	bls.w	800c43e <_scanf_float+0x86>
 800c676:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c67a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c67e:	463a      	mov	r2, r7
 800c680:	4640      	mov	r0, r8
 800c682:	4798      	blx	r3
 800c684:	6923      	ldr	r3, [r4, #16]
 800c686:	3b01      	subs	r3, #1
 800c688:	6123      	str	r3, [r4, #16]
 800c68a:	e7f0      	b.n	800c66e <_scanf_float+0x2b6>
 800c68c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c690:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c694:	463a      	mov	r2, r7
 800c696:	4640      	mov	r0, r8
 800c698:	4798      	blx	r3
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	3b01      	subs	r3, #1
 800c69e:	6123      	str	r3, [r4, #16]
 800c6a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6a4:	fa5f fa8a 	uxtb.w	sl, sl
 800c6a8:	f1ba 0f02 	cmp.w	sl, #2
 800c6ac:	d1ee      	bne.n	800c68c <_scanf_float+0x2d4>
 800c6ae:	3d03      	subs	r5, #3
 800c6b0:	b2ed      	uxtb	r5, r5
 800c6b2:	1b76      	subs	r6, r6, r5
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	05da      	lsls	r2, r3, #23
 800c6b8:	d530      	bpl.n	800c71c <_scanf_float+0x364>
 800c6ba:	055b      	lsls	r3, r3, #21
 800c6bc:	d511      	bpl.n	800c6e2 <_scanf_float+0x32a>
 800c6be:	9b01      	ldr	r3, [sp, #4]
 800c6c0:	429e      	cmp	r6, r3
 800c6c2:	f67f aebc 	bls.w	800c43e <_scanf_float+0x86>
 800c6c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6ce:	463a      	mov	r2, r7
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	4798      	blx	r3
 800c6d4:	6923      	ldr	r3, [r4, #16]
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	6123      	str	r3, [r4, #16]
 800c6da:	e7f0      	b.n	800c6be <_scanf_float+0x306>
 800c6dc:	46aa      	mov	sl, r5
 800c6de:	46b3      	mov	fp, r6
 800c6e0:	e7de      	b.n	800c6a0 <_scanf_float+0x2e8>
 800c6e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c6e6:	6923      	ldr	r3, [r4, #16]
 800c6e8:	2965      	cmp	r1, #101	@ 0x65
 800c6ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6ee:	f106 35ff 	add.w	r5, r6, #4294967295
 800c6f2:	6123      	str	r3, [r4, #16]
 800c6f4:	d00c      	beq.n	800c710 <_scanf_float+0x358>
 800c6f6:	2945      	cmp	r1, #69	@ 0x45
 800c6f8:	d00a      	beq.n	800c710 <_scanf_float+0x358>
 800c6fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c6fe:	463a      	mov	r2, r7
 800c700:	4640      	mov	r0, r8
 800c702:	4798      	blx	r3
 800c704:	6923      	ldr	r3, [r4, #16]
 800c706:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	1eb5      	subs	r5, r6, #2
 800c70e:	6123      	str	r3, [r4, #16]
 800c710:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c714:	463a      	mov	r2, r7
 800c716:	4640      	mov	r0, r8
 800c718:	4798      	blx	r3
 800c71a:	462e      	mov	r6, r5
 800c71c:	6822      	ldr	r2, [r4, #0]
 800c71e:	f012 0210 	ands.w	r2, r2, #16
 800c722:	d001      	beq.n	800c728 <_scanf_float+0x370>
 800c724:	2000      	movs	r0, #0
 800c726:	e68b      	b.n	800c440 <_scanf_float+0x88>
 800c728:	7032      	strb	r2, [r6, #0]
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c734:	d11a      	bne.n	800c76c <_scanf_float+0x3b4>
 800c736:	9b02      	ldr	r3, [sp, #8]
 800c738:	454b      	cmp	r3, r9
 800c73a:	eba3 0209 	sub.w	r2, r3, r9
 800c73e:	d121      	bne.n	800c784 <_scanf_float+0x3cc>
 800c740:	9901      	ldr	r1, [sp, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	4640      	mov	r0, r8
 800c746:	f002 fb61 	bl	800ee0c <_strtod_r>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	6821      	ldr	r1, [r4, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f011 0f02 	tst.w	r1, #2
 800c754:	f103 0204 	add.w	r2, r3, #4
 800c758:	d01f      	beq.n	800c79a <_scanf_float+0x3e2>
 800c75a:	9903      	ldr	r1, [sp, #12]
 800c75c:	600a      	str	r2, [r1, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	ed83 0b00 	vstr	d0, [r3]
 800c764:	68e3      	ldr	r3, [r4, #12]
 800c766:	3301      	adds	r3, #1
 800c768:	60e3      	str	r3, [r4, #12]
 800c76a:	e7db      	b.n	800c724 <_scanf_float+0x36c>
 800c76c:	9b04      	ldr	r3, [sp, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0e6      	beq.n	800c740 <_scanf_float+0x388>
 800c772:	9905      	ldr	r1, [sp, #20]
 800c774:	230a      	movs	r3, #10
 800c776:	3101      	adds	r1, #1
 800c778:	4640      	mov	r0, r8
 800c77a:	f002 fbc7 	bl	800ef0c <_strtol_r>
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	9e05      	ldr	r6, [sp, #20]
 800c782:	1ac2      	subs	r2, r0, r3
 800c784:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c788:	429e      	cmp	r6, r3
 800c78a:	bf28      	it	cs
 800c78c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c790:	490d      	ldr	r1, [pc, #52]	@ (800c7c8 <_scanf_float+0x410>)
 800c792:	4630      	mov	r0, r6
 800c794:	f000 f912 	bl	800c9bc <siprintf>
 800c798:	e7d2      	b.n	800c740 <_scanf_float+0x388>
 800c79a:	f011 0f04 	tst.w	r1, #4
 800c79e:	9903      	ldr	r1, [sp, #12]
 800c7a0:	600a      	str	r2, [r1, #0]
 800c7a2:	d1dc      	bne.n	800c75e <_scanf_float+0x3a6>
 800c7a4:	eeb4 0b40 	vcmp.f64	d0, d0
 800c7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ac:	681d      	ldr	r5, [r3, #0]
 800c7ae:	d705      	bvc.n	800c7bc <_scanf_float+0x404>
 800c7b0:	4806      	ldr	r0, [pc, #24]	@ (800c7cc <_scanf_float+0x414>)
 800c7b2:	f000 f9e7 	bl	800cb84 <nanf>
 800c7b6:	ed85 0a00 	vstr	s0, [r5]
 800c7ba:	e7d3      	b.n	800c764 <_scanf_float+0x3ac>
 800c7bc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c7c0:	e7f9      	b.n	800c7b6 <_scanf_float+0x3fe>
 800c7c2:	f04f 0900 	mov.w	r9, #0
 800c7c6:	e630      	b.n	800c42a <_scanf_float+0x72>
 800c7c8:	0801068c 	.word	0x0801068c
 800c7cc:	08010a25 	.word	0x08010a25

0800c7d0 <std>:
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	b510      	push	{r4, lr}
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c7da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7de:	6083      	str	r3, [r0, #8]
 800c7e0:	8181      	strh	r1, [r0, #12]
 800c7e2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c7e4:	81c2      	strh	r2, [r0, #14]
 800c7e6:	6183      	str	r3, [r0, #24]
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	2208      	movs	r2, #8
 800c7ec:	305c      	adds	r0, #92	@ 0x5c
 800c7ee:	f000 f948 	bl	800ca82 <memset>
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c828 <std+0x58>)
 800c7f4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c7f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c82c <std+0x5c>)
 800c7f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c7fa:	4b0d      	ldr	r3, [pc, #52]	@ (800c830 <std+0x60>)
 800c7fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c7fe:	4b0d      	ldr	r3, [pc, #52]	@ (800c834 <std+0x64>)
 800c800:	6323      	str	r3, [r4, #48]	@ 0x30
 800c802:	4b0d      	ldr	r3, [pc, #52]	@ (800c838 <std+0x68>)
 800c804:	6224      	str	r4, [r4, #32]
 800c806:	429c      	cmp	r4, r3
 800c808:	d006      	beq.n	800c818 <std+0x48>
 800c80a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c80e:	4294      	cmp	r4, r2
 800c810:	d002      	beq.n	800c818 <std+0x48>
 800c812:	33d0      	adds	r3, #208	@ 0xd0
 800c814:	429c      	cmp	r4, r3
 800c816:	d105      	bne.n	800c824 <std+0x54>
 800c818:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c81c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c820:	f000 b9ac 	b.w	800cb7c <__retarget_lock_init_recursive>
 800c824:	bd10      	pop	{r4, pc}
 800c826:	bf00      	nop
 800c828:	0800c9fd 	.word	0x0800c9fd
 800c82c:	0800ca1f 	.word	0x0800ca1f
 800c830:	0800ca57 	.word	0x0800ca57
 800c834:	0800ca7b 	.word	0x0800ca7b
 800c838:	2400064c 	.word	0x2400064c

0800c83c <stdio_exit_handler>:
 800c83c:	4a02      	ldr	r2, [pc, #8]	@ (800c848 <stdio_exit_handler+0xc>)
 800c83e:	4903      	ldr	r1, [pc, #12]	@ (800c84c <stdio_exit_handler+0x10>)
 800c840:	4803      	ldr	r0, [pc, #12]	@ (800c850 <stdio_exit_handler+0x14>)
 800c842:	f000 b869 	b.w	800c918 <_fwalk_sglue>
 800c846:	bf00      	nop
 800c848:	24000014 	.word	0x24000014
 800c84c:	0800f2c9 	.word	0x0800f2c9
 800c850:	24000024 	.word	0x24000024

0800c854 <cleanup_stdio>:
 800c854:	6841      	ldr	r1, [r0, #4]
 800c856:	4b0c      	ldr	r3, [pc, #48]	@ (800c888 <cleanup_stdio+0x34>)
 800c858:	4299      	cmp	r1, r3
 800c85a:	b510      	push	{r4, lr}
 800c85c:	4604      	mov	r4, r0
 800c85e:	d001      	beq.n	800c864 <cleanup_stdio+0x10>
 800c860:	f002 fd32 	bl	800f2c8 <_fflush_r>
 800c864:	68a1      	ldr	r1, [r4, #8]
 800c866:	4b09      	ldr	r3, [pc, #36]	@ (800c88c <cleanup_stdio+0x38>)
 800c868:	4299      	cmp	r1, r3
 800c86a:	d002      	beq.n	800c872 <cleanup_stdio+0x1e>
 800c86c:	4620      	mov	r0, r4
 800c86e:	f002 fd2b 	bl	800f2c8 <_fflush_r>
 800c872:	68e1      	ldr	r1, [r4, #12]
 800c874:	4b06      	ldr	r3, [pc, #24]	@ (800c890 <cleanup_stdio+0x3c>)
 800c876:	4299      	cmp	r1, r3
 800c878:	d004      	beq.n	800c884 <cleanup_stdio+0x30>
 800c87a:	4620      	mov	r0, r4
 800c87c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c880:	f002 bd22 	b.w	800f2c8 <_fflush_r>
 800c884:	bd10      	pop	{r4, pc}
 800c886:	bf00      	nop
 800c888:	2400064c 	.word	0x2400064c
 800c88c:	240006b4 	.word	0x240006b4
 800c890:	2400071c 	.word	0x2400071c

0800c894 <global_stdio_init.part.0>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c4 <global_stdio_init.part.0+0x30>)
 800c898:	4c0b      	ldr	r4, [pc, #44]	@ (800c8c8 <global_stdio_init.part.0+0x34>)
 800c89a:	4a0c      	ldr	r2, [pc, #48]	@ (800c8cc <global_stdio_init.part.0+0x38>)
 800c89c:	601a      	str	r2, [r3, #0]
 800c89e:	4620      	mov	r0, r4
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2104      	movs	r1, #4
 800c8a4:	f7ff ff94 	bl	800c7d0 <std>
 800c8a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	2109      	movs	r1, #9
 800c8b0:	f7ff ff8e 	bl	800c7d0 <std>
 800c8b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c8b8:	2202      	movs	r2, #2
 800c8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8be:	2112      	movs	r1, #18
 800c8c0:	f7ff bf86 	b.w	800c7d0 <std>
 800c8c4:	24000784 	.word	0x24000784
 800c8c8:	2400064c 	.word	0x2400064c
 800c8cc:	0800c83d 	.word	0x0800c83d

0800c8d0 <__sfp_lock_acquire>:
 800c8d0:	4801      	ldr	r0, [pc, #4]	@ (800c8d8 <__sfp_lock_acquire+0x8>)
 800c8d2:	f000 b954 	b.w	800cb7e <__retarget_lock_acquire_recursive>
 800c8d6:	bf00      	nop
 800c8d8:	2400078d 	.word	0x2400078d

0800c8dc <__sfp_lock_release>:
 800c8dc:	4801      	ldr	r0, [pc, #4]	@ (800c8e4 <__sfp_lock_release+0x8>)
 800c8de:	f000 b94f 	b.w	800cb80 <__retarget_lock_release_recursive>
 800c8e2:	bf00      	nop
 800c8e4:	2400078d 	.word	0x2400078d

0800c8e8 <__sinit>:
 800c8e8:	b510      	push	{r4, lr}
 800c8ea:	4604      	mov	r4, r0
 800c8ec:	f7ff fff0 	bl	800c8d0 <__sfp_lock_acquire>
 800c8f0:	6a23      	ldr	r3, [r4, #32]
 800c8f2:	b11b      	cbz	r3, 800c8fc <__sinit+0x14>
 800c8f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f8:	f7ff bff0 	b.w	800c8dc <__sfp_lock_release>
 800c8fc:	4b04      	ldr	r3, [pc, #16]	@ (800c910 <__sinit+0x28>)
 800c8fe:	6223      	str	r3, [r4, #32]
 800c900:	4b04      	ldr	r3, [pc, #16]	@ (800c914 <__sinit+0x2c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1f5      	bne.n	800c8f4 <__sinit+0xc>
 800c908:	f7ff ffc4 	bl	800c894 <global_stdio_init.part.0>
 800c90c:	e7f2      	b.n	800c8f4 <__sinit+0xc>
 800c90e:	bf00      	nop
 800c910:	0800c855 	.word	0x0800c855
 800c914:	24000784 	.word	0x24000784

0800c918 <_fwalk_sglue>:
 800c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c91c:	4607      	mov	r7, r0
 800c91e:	4688      	mov	r8, r1
 800c920:	4614      	mov	r4, r2
 800c922:	2600      	movs	r6, #0
 800c924:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c928:	f1b9 0901 	subs.w	r9, r9, #1
 800c92c:	d505      	bpl.n	800c93a <_fwalk_sglue+0x22>
 800c92e:	6824      	ldr	r4, [r4, #0]
 800c930:	2c00      	cmp	r4, #0
 800c932:	d1f7      	bne.n	800c924 <_fwalk_sglue+0xc>
 800c934:	4630      	mov	r0, r6
 800c936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c93a:	89ab      	ldrh	r3, [r5, #12]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d907      	bls.n	800c950 <_fwalk_sglue+0x38>
 800c940:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c944:	3301      	adds	r3, #1
 800c946:	d003      	beq.n	800c950 <_fwalk_sglue+0x38>
 800c948:	4629      	mov	r1, r5
 800c94a:	4638      	mov	r0, r7
 800c94c:	47c0      	blx	r8
 800c94e:	4306      	orrs	r6, r0
 800c950:	3568      	adds	r5, #104	@ 0x68
 800c952:	e7e9      	b.n	800c928 <_fwalk_sglue+0x10>

0800c954 <sniprintf>:
 800c954:	b40c      	push	{r2, r3}
 800c956:	b530      	push	{r4, r5, lr}
 800c958:	4b17      	ldr	r3, [pc, #92]	@ (800c9b8 <sniprintf+0x64>)
 800c95a:	1e0c      	subs	r4, r1, #0
 800c95c:	681d      	ldr	r5, [r3, #0]
 800c95e:	b09d      	sub	sp, #116	@ 0x74
 800c960:	da08      	bge.n	800c974 <sniprintf+0x20>
 800c962:	238b      	movs	r3, #139	@ 0x8b
 800c964:	602b      	str	r3, [r5, #0]
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	b01d      	add	sp, #116	@ 0x74
 800c96c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c970:	b002      	add	sp, #8
 800c972:	4770      	bx	lr
 800c974:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c978:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c97c:	bf14      	ite	ne
 800c97e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c982:	4623      	moveq	r3, r4
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	9307      	str	r3, [sp, #28]
 800c988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c98c:	9002      	str	r0, [sp, #8]
 800c98e:	9006      	str	r0, [sp, #24]
 800c990:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c994:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c996:	ab21      	add	r3, sp, #132	@ 0x84
 800c998:	a902      	add	r1, sp, #8
 800c99a:	4628      	mov	r0, r5
 800c99c:	9301      	str	r3, [sp, #4]
 800c99e:	f002 fb13 	bl	800efc8 <_svfiprintf_r>
 800c9a2:	1c43      	adds	r3, r0, #1
 800c9a4:	bfbc      	itt	lt
 800c9a6:	238b      	movlt	r3, #139	@ 0x8b
 800c9a8:	602b      	strlt	r3, [r5, #0]
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d0dd      	beq.n	800c96a <sniprintf+0x16>
 800c9ae:	9b02      	ldr	r3, [sp, #8]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	701a      	strb	r2, [r3, #0]
 800c9b4:	e7d9      	b.n	800c96a <sniprintf+0x16>
 800c9b6:	bf00      	nop
 800c9b8:	24000020 	.word	0x24000020

0800c9bc <siprintf>:
 800c9bc:	b40e      	push	{r1, r2, r3}
 800c9be:	b500      	push	{lr}
 800c9c0:	b09c      	sub	sp, #112	@ 0x70
 800c9c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c9c4:	9002      	str	r0, [sp, #8]
 800c9c6:	9006      	str	r0, [sp, #24]
 800c9c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c9cc:	4809      	ldr	r0, [pc, #36]	@ (800c9f4 <siprintf+0x38>)
 800c9ce:	9107      	str	r1, [sp, #28]
 800c9d0:	9104      	str	r1, [sp, #16]
 800c9d2:	4909      	ldr	r1, [pc, #36]	@ (800c9f8 <siprintf+0x3c>)
 800c9d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9d8:	9105      	str	r1, [sp, #20]
 800c9da:	6800      	ldr	r0, [r0, #0]
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	a902      	add	r1, sp, #8
 800c9e0:	f002 faf2 	bl	800efc8 <_svfiprintf_r>
 800c9e4:	9b02      	ldr	r3, [sp, #8]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	b01c      	add	sp, #112	@ 0x70
 800c9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f0:	b003      	add	sp, #12
 800c9f2:	4770      	bx	lr
 800c9f4:	24000020 	.word	0x24000020
 800c9f8:	ffff0208 	.word	0xffff0208

0800c9fc <__sread>:
 800c9fc:	b510      	push	{r4, lr}
 800c9fe:	460c      	mov	r4, r1
 800ca00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca04:	f000 f86c 	bl	800cae0 <_read_r>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	bfab      	itete	ge
 800ca0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ca0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ca10:	181b      	addge	r3, r3, r0
 800ca12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ca16:	bfac      	ite	ge
 800ca18:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ca1a:	81a3      	strhlt	r3, [r4, #12]
 800ca1c:	bd10      	pop	{r4, pc}

0800ca1e <__swrite>:
 800ca1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca22:	461f      	mov	r7, r3
 800ca24:	898b      	ldrh	r3, [r1, #12]
 800ca26:	05db      	lsls	r3, r3, #23
 800ca28:	4605      	mov	r5, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	4616      	mov	r6, r2
 800ca2e:	d505      	bpl.n	800ca3c <__swrite+0x1e>
 800ca30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca34:	2302      	movs	r3, #2
 800ca36:	2200      	movs	r2, #0
 800ca38:	f000 f840 	bl	800cabc <_lseek_r>
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ca46:	81a3      	strh	r3, [r4, #12]
 800ca48:	4632      	mov	r2, r6
 800ca4a:	463b      	mov	r3, r7
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca52:	f000 b857 	b.w	800cb04 <_write_r>

0800ca56 <__sseek>:
 800ca56:	b510      	push	{r4, lr}
 800ca58:	460c      	mov	r4, r1
 800ca5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca5e:	f000 f82d 	bl	800cabc <_lseek_r>
 800ca62:	1c43      	adds	r3, r0, #1
 800ca64:	89a3      	ldrh	r3, [r4, #12]
 800ca66:	bf15      	itete	ne
 800ca68:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ca6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ca6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ca72:	81a3      	strheq	r3, [r4, #12]
 800ca74:	bf18      	it	ne
 800ca76:	81a3      	strhne	r3, [r4, #12]
 800ca78:	bd10      	pop	{r4, pc}

0800ca7a <__sclose>:
 800ca7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca7e:	f000 b80d 	b.w	800ca9c <_close_r>

0800ca82 <memset>:
 800ca82:	4402      	add	r2, r0
 800ca84:	4603      	mov	r3, r0
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d100      	bne.n	800ca8c <memset+0xa>
 800ca8a:	4770      	bx	lr
 800ca8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ca90:	e7f9      	b.n	800ca86 <memset+0x4>
	...

0800ca94 <_localeconv_r>:
 800ca94:	4800      	ldr	r0, [pc, #0]	@ (800ca98 <_localeconv_r+0x4>)
 800ca96:	4770      	bx	lr
 800ca98:	24000160 	.word	0x24000160

0800ca9c <_close_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	@ (800cab8 <_close_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f5 fd9e 	bl	80025e8 <_close>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_close_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_close_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	24000788 	.word	0x24000788

0800cabc <_lseek_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d07      	ldr	r5, [pc, #28]	@ (800cadc <_lseek_r+0x20>)
 800cac0:	4604      	mov	r4, r0
 800cac2:	4608      	mov	r0, r1
 800cac4:	4611      	mov	r1, r2
 800cac6:	2200      	movs	r2, #0
 800cac8:	602a      	str	r2, [r5, #0]
 800caca:	461a      	mov	r2, r3
 800cacc:	f7f5 fdb3 	bl	8002636 <_lseek>
 800cad0:	1c43      	adds	r3, r0, #1
 800cad2:	d102      	bne.n	800cada <_lseek_r+0x1e>
 800cad4:	682b      	ldr	r3, [r5, #0]
 800cad6:	b103      	cbz	r3, 800cada <_lseek_r+0x1e>
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	bd38      	pop	{r3, r4, r5, pc}
 800cadc:	24000788 	.word	0x24000788

0800cae0 <_read_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4d07      	ldr	r5, [pc, #28]	@ (800cb00 <_read_r+0x20>)
 800cae4:	4604      	mov	r4, r0
 800cae6:	4608      	mov	r0, r1
 800cae8:	4611      	mov	r1, r2
 800caea:	2200      	movs	r2, #0
 800caec:	602a      	str	r2, [r5, #0]
 800caee:	461a      	mov	r2, r3
 800caf0:	f7f5 fd5d 	bl	80025ae <_read>
 800caf4:	1c43      	adds	r3, r0, #1
 800caf6:	d102      	bne.n	800cafe <_read_r+0x1e>
 800caf8:	682b      	ldr	r3, [r5, #0]
 800cafa:	b103      	cbz	r3, 800cafe <_read_r+0x1e>
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	24000788 	.word	0x24000788

0800cb04 <_write_r>:
 800cb04:	b538      	push	{r3, r4, r5, lr}
 800cb06:	4d07      	ldr	r5, [pc, #28]	@ (800cb24 <_write_r+0x20>)
 800cb08:	4604      	mov	r4, r0
 800cb0a:	4608      	mov	r0, r1
 800cb0c:	4611      	mov	r1, r2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	602a      	str	r2, [r5, #0]
 800cb12:	461a      	mov	r2, r3
 800cb14:	f7f5 f92c 	bl	8001d70 <_write>
 800cb18:	1c43      	adds	r3, r0, #1
 800cb1a:	d102      	bne.n	800cb22 <_write_r+0x1e>
 800cb1c:	682b      	ldr	r3, [r5, #0]
 800cb1e:	b103      	cbz	r3, 800cb22 <_write_r+0x1e>
 800cb20:	6023      	str	r3, [r4, #0]
 800cb22:	bd38      	pop	{r3, r4, r5, pc}
 800cb24:	24000788 	.word	0x24000788

0800cb28 <__errno>:
 800cb28:	4b01      	ldr	r3, [pc, #4]	@ (800cb30 <__errno+0x8>)
 800cb2a:	6818      	ldr	r0, [r3, #0]
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	24000020 	.word	0x24000020

0800cb34 <__libc_init_array>:
 800cb34:	b570      	push	{r4, r5, r6, lr}
 800cb36:	4d0d      	ldr	r5, [pc, #52]	@ (800cb6c <__libc_init_array+0x38>)
 800cb38:	4c0d      	ldr	r4, [pc, #52]	@ (800cb70 <__libc_init_array+0x3c>)
 800cb3a:	1b64      	subs	r4, r4, r5
 800cb3c:	10a4      	asrs	r4, r4, #2
 800cb3e:	2600      	movs	r6, #0
 800cb40:	42a6      	cmp	r6, r4
 800cb42:	d109      	bne.n	800cb58 <__libc_init_array+0x24>
 800cb44:	4d0b      	ldr	r5, [pc, #44]	@ (800cb74 <__libc_init_array+0x40>)
 800cb46:	4c0c      	ldr	r4, [pc, #48]	@ (800cb78 <__libc_init_array+0x44>)
 800cb48:	f003 fd42 	bl	80105d0 <_init>
 800cb4c:	1b64      	subs	r4, r4, r5
 800cb4e:	10a4      	asrs	r4, r4, #2
 800cb50:	2600      	movs	r6, #0
 800cb52:	42a6      	cmp	r6, r4
 800cb54:	d105      	bne.n	800cb62 <__libc_init_array+0x2e>
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5c:	4798      	blx	r3
 800cb5e:	3601      	adds	r6, #1
 800cb60:	e7ee      	b.n	800cb40 <__libc_init_array+0xc>
 800cb62:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb66:	4798      	blx	r3
 800cb68:	3601      	adds	r6, #1
 800cb6a:	e7f2      	b.n	800cb52 <__libc_init_array+0x1e>
 800cb6c:	08010ac8 	.word	0x08010ac8
 800cb70:	08010ac8 	.word	0x08010ac8
 800cb74:	08010ac8 	.word	0x08010ac8
 800cb78:	08010acc 	.word	0x08010acc

0800cb7c <__retarget_lock_init_recursive>:
 800cb7c:	4770      	bx	lr

0800cb7e <__retarget_lock_acquire_recursive>:
 800cb7e:	4770      	bx	lr

0800cb80 <__retarget_lock_release_recursive>:
 800cb80:	4770      	bx	lr
	...

0800cb84 <nanf>:
 800cb84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800cb8c <nanf+0x8>
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	7fc00000 	.word	0x7fc00000

0800cb90 <quorem>:
 800cb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	6903      	ldr	r3, [r0, #16]
 800cb96:	690c      	ldr	r4, [r1, #16]
 800cb98:	42a3      	cmp	r3, r4
 800cb9a:	4607      	mov	r7, r0
 800cb9c:	db7e      	blt.n	800cc9c <quorem+0x10c>
 800cb9e:	3c01      	subs	r4, #1
 800cba0:	f101 0814 	add.w	r8, r1, #20
 800cba4:	00a3      	lsls	r3, r4, #2
 800cba6:	f100 0514 	add.w	r5, r0, #20
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbc6:	d32e      	bcc.n	800cc26 <quorem+0x96>
 800cbc8:	f04f 0a00 	mov.w	sl, #0
 800cbcc:	46c4      	mov	ip, r8
 800cbce:	46ae      	mov	lr, r5
 800cbd0:	46d3      	mov	fp, sl
 800cbd2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cbd6:	b298      	uxth	r0, r3
 800cbd8:	fb06 a000 	mla	r0, r6, r0, sl
 800cbdc:	0c02      	lsrs	r2, r0, #16
 800cbde:	0c1b      	lsrs	r3, r3, #16
 800cbe0:	fb06 2303 	mla	r3, r6, r3, r2
 800cbe4:	f8de 2000 	ldr.w	r2, [lr]
 800cbe8:	b280      	uxth	r0, r0
 800cbea:	b292      	uxth	r2, r2
 800cbec:	1a12      	subs	r2, r2, r0
 800cbee:	445a      	add	r2, fp
 800cbf0:	f8de 0000 	ldr.w	r0, [lr]
 800cbf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cbfe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cc02:	b292      	uxth	r2, r2
 800cc04:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cc08:	45e1      	cmp	r9, ip
 800cc0a:	f84e 2b04 	str.w	r2, [lr], #4
 800cc0e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cc12:	d2de      	bcs.n	800cbd2 <quorem+0x42>
 800cc14:	9b00      	ldr	r3, [sp, #0]
 800cc16:	58eb      	ldr	r3, [r5, r3]
 800cc18:	b92b      	cbnz	r3, 800cc26 <quorem+0x96>
 800cc1a:	9b01      	ldr	r3, [sp, #4]
 800cc1c:	3b04      	subs	r3, #4
 800cc1e:	429d      	cmp	r5, r3
 800cc20:	461a      	mov	r2, r3
 800cc22:	d32f      	bcc.n	800cc84 <quorem+0xf4>
 800cc24:	613c      	str	r4, [r7, #16]
 800cc26:	4638      	mov	r0, r7
 800cc28:	f001 f954 	bl	800ded4 <__mcmp>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	db25      	blt.n	800cc7c <quorem+0xec>
 800cc30:	4629      	mov	r1, r5
 800cc32:	2000      	movs	r0, #0
 800cc34:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc38:	f8d1 c000 	ldr.w	ip, [r1]
 800cc3c:	fa1f fe82 	uxth.w	lr, r2
 800cc40:	fa1f f38c 	uxth.w	r3, ip
 800cc44:	eba3 030e 	sub.w	r3, r3, lr
 800cc48:	4403      	add	r3, r0
 800cc4a:	0c12      	lsrs	r2, r2, #16
 800cc4c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cc50:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc5a:	45c1      	cmp	r9, r8
 800cc5c:	f841 3b04 	str.w	r3, [r1], #4
 800cc60:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cc64:	d2e6      	bcs.n	800cc34 <quorem+0xa4>
 800cc66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc6e:	b922      	cbnz	r2, 800cc7a <quorem+0xea>
 800cc70:	3b04      	subs	r3, #4
 800cc72:	429d      	cmp	r5, r3
 800cc74:	461a      	mov	r2, r3
 800cc76:	d30b      	bcc.n	800cc90 <quorem+0x100>
 800cc78:	613c      	str	r4, [r7, #16]
 800cc7a:	3601      	adds	r6, #1
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	b003      	add	sp, #12
 800cc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc84:	6812      	ldr	r2, [r2, #0]
 800cc86:	3b04      	subs	r3, #4
 800cc88:	2a00      	cmp	r2, #0
 800cc8a:	d1cb      	bne.n	800cc24 <quorem+0x94>
 800cc8c:	3c01      	subs	r4, #1
 800cc8e:	e7c6      	b.n	800cc1e <quorem+0x8e>
 800cc90:	6812      	ldr	r2, [r2, #0]
 800cc92:	3b04      	subs	r3, #4
 800cc94:	2a00      	cmp	r2, #0
 800cc96:	d1ef      	bne.n	800cc78 <quorem+0xe8>
 800cc98:	3c01      	subs	r4, #1
 800cc9a:	e7ea      	b.n	800cc72 <quorem+0xe2>
 800cc9c:	2000      	movs	r0, #0
 800cc9e:	e7ee      	b.n	800cc7e <quorem+0xee>

0800cca0 <_dtoa_r>:
 800cca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca4:	ed2d 8b02 	vpush	{d8}
 800cca8:	69c7      	ldr	r7, [r0, #28]
 800ccaa:	b091      	sub	sp, #68	@ 0x44
 800ccac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ccb0:	ec55 4b10 	vmov	r4, r5, d0
 800ccb4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ccb6:	9107      	str	r1, [sp, #28]
 800ccb8:	4681      	mov	r9, r0
 800ccba:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccbc:	930d      	str	r3, [sp, #52]	@ 0x34
 800ccbe:	b97f      	cbnz	r7, 800cce0 <_dtoa_r+0x40>
 800ccc0:	2010      	movs	r0, #16
 800ccc2:	f000 fd8d 	bl	800d7e0 <malloc>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	f8c9 001c 	str.w	r0, [r9, #28]
 800cccc:	b920      	cbnz	r0, 800ccd8 <_dtoa_r+0x38>
 800ccce:	4ba0      	ldr	r3, [pc, #640]	@ (800cf50 <_dtoa_r+0x2b0>)
 800ccd0:	21ef      	movs	r1, #239	@ 0xef
 800ccd2:	48a0      	ldr	r0, [pc, #640]	@ (800cf54 <_dtoa_r+0x2b4>)
 800ccd4:	f002 fb74 	bl	800f3c0 <__assert_func>
 800ccd8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ccdc:	6007      	str	r7, [r0, #0]
 800ccde:	60c7      	str	r7, [r0, #12]
 800cce0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cce4:	6819      	ldr	r1, [r3, #0]
 800cce6:	b159      	cbz	r1, 800cd00 <_dtoa_r+0x60>
 800cce8:	685a      	ldr	r2, [r3, #4]
 800ccea:	604a      	str	r2, [r1, #4]
 800ccec:	2301      	movs	r3, #1
 800ccee:	4093      	lsls	r3, r2
 800ccf0:	608b      	str	r3, [r1, #8]
 800ccf2:	4648      	mov	r0, r9
 800ccf4:	f000 fe6a 	bl	800d9cc <_Bfree>
 800ccf8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]
 800cd00:	1e2b      	subs	r3, r5, #0
 800cd02:	bfbb      	ittet	lt
 800cd04:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cd08:	9303      	strlt	r3, [sp, #12]
 800cd0a:	2300      	movge	r3, #0
 800cd0c:	2201      	movlt	r2, #1
 800cd0e:	bfac      	ite	ge
 800cd10:	6033      	strge	r3, [r6, #0]
 800cd12:	6032      	strlt	r2, [r6, #0]
 800cd14:	4b90      	ldr	r3, [pc, #576]	@ (800cf58 <_dtoa_r+0x2b8>)
 800cd16:	9e03      	ldr	r6, [sp, #12]
 800cd18:	43b3      	bics	r3, r6
 800cd1a:	d110      	bne.n	800cd3e <_dtoa_r+0x9e>
 800cd1c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd1e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800cd28:	4323      	orrs	r3, r4
 800cd2a:	f000 84de 	beq.w	800d6ea <_dtoa_r+0xa4a>
 800cd2e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd30:	4f8a      	ldr	r7, [pc, #552]	@ (800cf5c <_dtoa_r+0x2bc>)
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	f000 84e0 	beq.w	800d6f8 <_dtoa_r+0xa58>
 800cd38:	1cfb      	adds	r3, r7, #3
 800cd3a:	f000 bcdb 	b.w	800d6f4 <_dtoa_r+0xa54>
 800cd3e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800cd42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	d10a      	bne.n	800cd62 <_dtoa_r+0xc2>
 800cd4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cd4e:	2301      	movs	r3, #1
 800cd50:	6013      	str	r3, [r2, #0]
 800cd52:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd54:	b113      	cbz	r3, 800cd5c <_dtoa_r+0xbc>
 800cd56:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800cd58:	4b81      	ldr	r3, [pc, #516]	@ (800cf60 <_dtoa_r+0x2c0>)
 800cd5a:	6013      	str	r3, [r2, #0]
 800cd5c:	4f81      	ldr	r7, [pc, #516]	@ (800cf64 <_dtoa_r+0x2c4>)
 800cd5e:	f000 bccb 	b.w	800d6f8 <_dtoa_r+0xa58>
 800cd62:	aa0e      	add	r2, sp, #56	@ 0x38
 800cd64:	a90f      	add	r1, sp, #60	@ 0x3c
 800cd66:	4648      	mov	r0, r9
 800cd68:	eeb0 0b48 	vmov.f64	d0, d8
 800cd6c:	f001 f9d2 	bl	800e114 <__d2b>
 800cd70:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800cd74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cd76:	9001      	str	r0, [sp, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d045      	beq.n	800ce08 <_dtoa_r+0x168>
 800cd7c:	eeb0 7b48 	vmov.f64	d7, d8
 800cd80:	ee18 1a90 	vmov	r1, s17
 800cd84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800cd88:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800cd8c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800cd90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cd94:	2500      	movs	r5, #0
 800cd96:	ee07 1a90 	vmov	s15, r1
 800cd9a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800cd9e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cf38 <_dtoa_r+0x298>
 800cda2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cda6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800cf40 <_dtoa_r+0x2a0>
 800cdaa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cdae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800cf48 <_dtoa_r+0x2a8>
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800cdba:	eeb0 7b46 	vmov.f64	d7, d6
 800cdbe:	eea4 7b05 	vfma.f64	d7, d4, d5
 800cdc2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cdc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdce:	ee16 8a90 	vmov	r8, s13
 800cdd2:	d508      	bpl.n	800cde6 <_dtoa_r+0x146>
 800cdd4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cdd8:	eeb4 6b47 	vcmp.f64	d6, d7
 800cddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde0:	bf18      	it	ne
 800cde2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800cde6:	f1b8 0f16 	cmp.w	r8, #22
 800cdea:	d82b      	bhi.n	800ce44 <_dtoa_r+0x1a4>
 800cdec:	495e      	ldr	r1, [pc, #376]	@ (800cf68 <_dtoa_r+0x2c8>)
 800cdee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800cdf2:	ed91 7b00 	vldr	d7, [r1]
 800cdf6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfe:	d501      	bpl.n	800ce04 <_dtoa_r+0x164>
 800ce00:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce04:	2100      	movs	r1, #0
 800ce06:	e01e      	b.n	800ce46 <_dtoa_r+0x1a6>
 800ce08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce0a:	4413      	add	r3, r2
 800ce0c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800ce10:	2920      	cmp	r1, #32
 800ce12:	bfc1      	itttt	gt
 800ce14:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800ce18:	408e      	lslgt	r6, r1
 800ce1a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800ce1e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800ce22:	bfd6      	itet	le
 800ce24:	f1c1 0120 	rsble	r1, r1, #32
 800ce28:	4331      	orrgt	r1, r6
 800ce2a:	fa04 f101 	lslle.w	r1, r4, r1
 800ce2e:	ee07 1a90 	vmov	s15, r1
 800ce32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ce36:	3b01      	subs	r3, #1
 800ce38:	ee17 1a90 	vmov	r1, s15
 800ce3c:	2501      	movs	r5, #1
 800ce3e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800ce42:	e7a8      	b.n	800cd96 <_dtoa_r+0xf6>
 800ce44:	2101      	movs	r1, #1
 800ce46:	1ad2      	subs	r2, r2, r3
 800ce48:	1e53      	subs	r3, r2, #1
 800ce4a:	9306      	str	r3, [sp, #24]
 800ce4c:	bf45      	ittet	mi
 800ce4e:	f1c2 0301 	rsbmi	r3, r2, #1
 800ce52:	9305      	strmi	r3, [sp, #20]
 800ce54:	2300      	movpl	r3, #0
 800ce56:	2300      	movmi	r3, #0
 800ce58:	bf4c      	ite	mi
 800ce5a:	9306      	strmi	r3, [sp, #24]
 800ce5c:	9305      	strpl	r3, [sp, #20]
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	910c      	str	r1, [sp, #48]	@ 0x30
 800ce64:	db18      	blt.n	800ce98 <_dtoa_r+0x1f8>
 800ce66:	9b06      	ldr	r3, [sp, #24]
 800ce68:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800ce6c:	4443      	add	r3, r8
 800ce6e:	9306      	str	r3, [sp, #24]
 800ce70:	2300      	movs	r3, #0
 800ce72:	9a07      	ldr	r2, [sp, #28]
 800ce74:	2a09      	cmp	r2, #9
 800ce76:	d849      	bhi.n	800cf0c <_dtoa_r+0x26c>
 800ce78:	2a05      	cmp	r2, #5
 800ce7a:	bfc4      	itt	gt
 800ce7c:	3a04      	subgt	r2, #4
 800ce7e:	9207      	strgt	r2, [sp, #28]
 800ce80:	9a07      	ldr	r2, [sp, #28]
 800ce82:	f1a2 0202 	sub.w	r2, r2, #2
 800ce86:	bfcc      	ite	gt
 800ce88:	2400      	movgt	r4, #0
 800ce8a:	2401      	movle	r4, #1
 800ce8c:	2a03      	cmp	r2, #3
 800ce8e:	d848      	bhi.n	800cf22 <_dtoa_r+0x282>
 800ce90:	e8df f002 	tbb	[pc, r2]
 800ce94:	3a2c2e0b 	.word	0x3a2c2e0b
 800ce98:	9b05      	ldr	r3, [sp, #20]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	eba3 0308 	sub.w	r3, r3, r8
 800cea0:	9305      	str	r3, [sp, #20]
 800cea2:	920a      	str	r2, [sp, #40]	@ 0x28
 800cea4:	f1c8 0300 	rsb	r3, r8, #0
 800cea8:	e7e3      	b.n	800ce72 <_dtoa_r+0x1d2>
 800ceaa:	2200      	movs	r2, #0
 800ceac:	9208      	str	r2, [sp, #32]
 800ceae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	dc39      	bgt.n	800cf28 <_dtoa_r+0x288>
 800ceb4:	f04f 0b01 	mov.w	fp, #1
 800ceb8:	46da      	mov	sl, fp
 800ceba:	465a      	mov	r2, fp
 800cebc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800cec0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800cec4:	2100      	movs	r1, #0
 800cec6:	2004      	movs	r0, #4
 800cec8:	f100 0614 	add.w	r6, r0, #20
 800cecc:	4296      	cmp	r6, r2
 800cece:	d930      	bls.n	800cf32 <_dtoa_r+0x292>
 800ced0:	6079      	str	r1, [r7, #4]
 800ced2:	4648      	mov	r0, r9
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	f000 fd39 	bl	800d94c <_Balloc>
 800ceda:	9b04      	ldr	r3, [sp, #16]
 800cedc:	4607      	mov	r7, r0
 800cede:	2800      	cmp	r0, #0
 800cee0:	d146      	bne.n	800cf70 <_dtoa_r+0x2d0>
 800cee2:	4b22      	ldr	r3, [pc, #136]	@ (800cf6c <_dtoa_r+0x2cc>)
 800cee4:	4602      	mov	r2, r0
 800cee6:	f240 11af 	movw	r1, #431	@ 0x1af
 800ceea:	e6f2      	b.n	800ccd2 <_dtoa_r+0x32>
 800ceec:	2201      	movs	r2, #1
 800ceee:	e7dd      	b.n	800ceac <_dtoa_r+0x20c>
 800cef0:	2200      	movs	r2, #0
 800cef2:	9208      	str	r2, [sp, #32]
 800cef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cef6:	eb08 0b02 	add.w	fp, r8, r2
 800cefa:	f10b 0a01 	add.w	sl, fp, #1
 800cefe:	4652      	mov	r2, sl
 800cf00:	2a01      	cmp	r2, #1
 800cf02:	bfb8      	it	lt
 800cf04:	2201      	movlt	r2, #1
 800cf06:	e7db      	b.n	800cec0 <_dtoa_r+0x220>
 800cf08:	2201      	movs	r2, #1
 800cf0a:	e7f2      	b.n	800cef2 <_dtoa_r+0x252>
 800cf0c:	2401      	movs	r4, #1
 800cf0e:	2200      	movs	r2, #0
 800cf10:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cf14:	f04f 3bff 	mov.w	fp, #4294967295
 800cf18:	2100      	movs	r1, #0
 800cf1a:	46da      	mov	sl, fp
 800cf1c:	2212      	movs	r2, #18
 800cf1e:	9109      	str	r1, [sp, #36]	@ 0x24
 800cf20:	e7ce      	b.n	800cec0 <_dtoa_r+0x220>
 800cf22:	2201      	movs	r2, #1
 800cf24:	9208      	str	r2, [sp, #32]
 800cf26:	e7f5      	b.n	800cf14 <_dtoa_r+0x274>
 800cf28:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800cf2c:	46da      	mov	sl, fp
 800cf2e:	465a      	mov	r2, fp
 800cf30:	e7c6      	b.n	800cec0 <_dtoa_r+0x220>
 800cf32:	3101      	adds	r1, #1
 800cf34:	0040      	lsls	r0, r0, #1
 800cf36:	e7c7      	b.n	800cec8 <_dtoa_r+0x228>
 800cf38:	636f4361 	.word	0x636f4361
 800cf3c:	3fd287a7 	.word	0x3fd287a7
 800cf40:	8b60c8b3 	.word	0x8b60c8b3
 800cf44:	3fc68a28 	.word	0x3fc68a28
 800cf48:	509f79fb 	.word	0x509f79fb
 800cf4c:	3fd34413 	.word	0x3fd34413
 800cf50:	0801069e 	.word	0x0801069e
 800cf54:	080106b5 	.word	0x080106b5
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	0801069a 	.word	0x0801069a
 800cf60:	08010669 	.word	0x08010669
 800cf64:	08010668 	.word	0x08010668
 800cf68:	080107b0 	.word	0x080107b0
 800cf6c:	0801070d 	.word	0x0801070d
 800cf70:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800cf74:	f1ba 0f0e 	cmp.w	sl, #14
 800cf78:	6010      	str	r0, [r2, #0]
 800cf7a:	d86f      	bhi.n	800d05c <_dtoa_r+0x3bc>
 800cf7c:	2c00      	cmp	r4, #0
 800cf7e:	d06d      	beq.n	800d05c <_dtoa_r+0x3bc>
 800cf80:	f1b8 0f00 	cmp.w	r8, #0
 800cf84:	f340 80c2 	ble.w	800d10c <_dtoa_r+0x46c>
 800cf88:	4aca      	ldr	r2, [pc, #808]	@ (800d2b4 <_dtoa_r+0x614>)
 800cf8a:	f008 010f 	and.w	r1, r8, #15
 800cf8e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800cf92:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800cf96:	ed92 7b00 	vldr	d7, [r2]
 800cf9a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800cf9e:	f000 80a9 	beq.w	800d0f4 <_dtoa_r+0x454>
 800cfa2:	4ac5      	ldr	r2, [pc, #788]	@ (800d2b8 <_dtoa_r+0x618>)
 800cfa4:	ed92 6b08 	vldr	d6, [r2, #32]
 800cfa8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cfac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cfb0:	f001 010f 	and.w	r1, r1, #15
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	48c0      	ldr	r0, [pc, #768]	@ (800d2b8 <_dtoa_r+0x618>)
 800cfb8:	2900      	cmp	r1, #0
 800cfba:	f040 809d 	bne.w	800d0f8 <_dtoa_r+0x458>
 800cfbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cfc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cfc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cfcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cfd0:	2900      	cmp	r1, #0
 800cfd2:	f000 80c1 	beq.w	800d158 <_dtoa_r+0x4b8>
 800cfd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cfda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	f140 80b9 	bpl.w	800d158 <_dtoa_r+0x4b8>
 800cfe6:	f1ba 0f00 	cmp.w	sl, #0
 800cfea:	f000 80b5 	beq.w	800d158 <_dtoa_r+0x4b8>
 800cfee:	f1bb 0f00 	cmp.w	fp, #0
 800cff2:	dd31      	ble.n	800d058 <_dtoa_r+0x3b8>
 800cff4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800cff8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d000:	f108 31ff 	add.w	r1, r8, #4294967295
 800d004:	9104      	str	r1, [sp, #16]
 800d006:	3201      	adds	r2, #1
 800d008:	465c      	mov	r4, fp
 800d00a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d00e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800d012:	ee07 2a90 	vmov	s15, r2
 800d016:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d01a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d01e:	ee15 2a90 	vmov	r2, s11
 800d022:	ec51 0b15 	vmov	r0, r1, d5
 800d026:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800d02a:	2c00      	cmp	r4, #0
 800d02c:	f040 8098 	bne.w	800d160 <_dtoa_r+0x4c0>
 800d030:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d034:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d038:	ec41 0b17 	vmov	d7, r0, r1
 800d03c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d044:	f300 8261 	bgt.w	800d50a <_dtoa_r+0x86a>
 800d048:	eeb1 7b47 	vneg.f64	d7, d7
 800d04c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d054:	f100 80f5 	bmi.w	800d242 <_dtoa_r+0x5a2>
 800d058:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d05c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d05e:	2a00      	cmp	r2, #0
 800d060:	f2c0 812c 	blt.w	800d2bc <_dtoa_r+0x61c>
 800d064:	f1b8 0f0e 	cmp.w	r8, #14
 800d068:	f300 8128 	bgt.w	800d2bc <_dtoa_r+0x61c>
 800d06c:	4b91      	ldr	r3, [pc, #580]	@ (800d2b4 <_dtoa_r+0x614>)
 800d06e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d072:	ed93 6b00 	vldr	d6, [r3]
 800d076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	da03      	bge.n	800d084 <_dtoa_r+0x3e4>
 800d07c:	f1ba 0f00 	cmp.w	sl, #0
 800d080:	f340 80d2 	ble.w	800d228 <_dtoa_r+0x588>
 800d084:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800d088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d08c:	463e      	mov	r6, r7
 800d08e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d092:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d096:	ee15 3a10 	vmov	r3, s10
 800d09a:	3330      	adds	r3, #48	@ 0x30
 800d09c:	f806 3b01 	strb.w	r3, [r6], #1
 800d0a0:	1bf3      	subs	r3, r6, r7
 800d0a2:	459a      	cmp	sl, r3
 800d0a4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d0a8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d0ac:	f040 80f8 	bne.w	800d2a0 <_dtoa_r+0x600>
 800d0b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d0b4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0bc:	f300 80dd 	bgt.w	800d27a <_dtoa_r+0x5da>
 800d0c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c8:	d104      	bne.n	800d0d4 <_dtoa_r+0x434>
 800d0ca:	ee15 3a10 	vmov	r3, s10
 800d0ce:	07db      	lsls	r3, r3, #31
 800d0d0:	f100 80d3 	bmi.w	800d27a <_dtoa_r+0x5da>
 800d0d4:	9901      	ldr	r1, [sp, #4]
 800d0d6:	4648      	mov	r0, r9
 800d0d8:	f000 fc78 	bl	800d9cc <_Bfree>
 800d0dc:	2300      	movs	r3, #0
 800d0de:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d0e0:	7033      	strb	r3, [r6, #0]
 800d0e2:	f108 0301 	add.w	r3, r8, #1
 800d0e6:	6013      	str	r3, [r2, #0]
 800d0e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 8304 	beq.w	800d6f8 <_dtoa_r+0xa58>
 800d0f0:	601e      	str	r6, [r3, #0]
 800d0f2:	e301      	b.n	800d6f8 <_dtoa_r+0xa58>
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	e75e      	b.n	800cfb6 <_dtoa_r+0x316>
 800d0f8:	07cc      	lsls	r4, r1, #31
 800d0fa:	d504      	bpl.n	800d106 <_dtoa_r+0x466>
 800d0fc:	ed90 6b00 	vldr	d6, [r0]
 800d100:	3201      	adds	r2, #1
 800d102:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d106:	1049      	asrs	r1, r1, #1
 800d108:	3008      	adds	r0, #8
 800d10a:	e755      	b.n	800cfb8 <_dtoa_r+0x318>
 800d10c:	d022      	beq.n	800d154 <_dtoa_r+0x4b4>
 800d10e:	f1c8 0100 	rsb	r1, r8, #0
 800d112:	4a68      	ldr	r2, [pc, #416]	@ (800d2b4 <_dtoa_r+0x614>)
 800d114:	f001 000f 	and.w	r0, r1, #15
 800d118:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d11c:	ed92 7b00 	vldr	d7, [r2]
 800d120:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d124:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d128:	4863      	ldr	r0, [pc, #396]	@ (800d2b8 <_dtoa_r+0x618>)
 800d12a:	1109      	asrs	r1, r1, #4
 800d12c:	2400      	movs	r4, #0
 800d12e:	2202      	movs	r2, #2
 800d130:	b929      	cbnz	r1, 800d13e <_dtoa_r+0x49e>
 800d132:	2c00      	cmp	r4, #0
 800d134:	f43f af49 	beq.w	800cfca <_dtoa_r+0x32a>
 800d138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d13c:	e745      	b.n	800cfca <_dtoa_r+0x32a>
 800d13e:	07ce      	lsls	r6, r1, #31
 800d140:	d505      	bpl.n	800d14e <_dtoa_r+0x4ae>
 800d142:	ed90 6b00 	vldr	d6, [r0]
 800d146:	3201      	adds	r2, #1
 800d148:	2401      	movs	r4, #1
 800d14a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d14e:	1049      	asrs	r1, r1, #1
 800d150:	3008      	adds	r0, #8
 800d152:	e7ed      	b.n	800d130 <_dtoa_r+0x490>
 800d154:	2202      	movs	r2, #2
 800d156:	e738      	b.n	800cfca <_dtoa_r+0x32a>
 800d158:	f8cd 8010 	str.w	r8, [sp, #16]
 800d15c:	4654      	mov	r4, sl
 800d15e:	e754      	b.n	800d00a <_dtoa_r+0x36a>
 800d160:	4a54      	ldr	r2, [pc, #336]	@ (800d2b4 <_dtoa_r+0x614>)
 800d162:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800d166:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d16a:	9a08      	ldr	r2, [sp, #32]
 800d16c:	ec41 0b17 	vmov	d7, r0, r1
 800d170:	443c      	add	r4, r7
 800d172:	b34a      	cbz	r2, 800d1c8 <_dtoa_r+0x528>
 800d174:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800d178:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800d17c:	463e      	mov	r6, r7
 800d17e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d182:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d186:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d18a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d18e:	ee14 2a90 	vmov	r2, s9
 800d192:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d196:	3230      	adds	r2, #48	@ 0x30
 800d198:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d19c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a4:	f806 2b01 	strb.w	r2, [r6], #1
 800d1a8:	d438      	bmi.n	800d21c <_dtoa_r+0x57c>
 800d1aa:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d1ae:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d1b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b6:	d462      	bmi.n	800d27e <_dtoa_r+0x5de>
 800d1b8:	42a6      	cmp	r6, r4
 800d1ba:	f43f af4d 	beq.w	800d058 <_dtoa_r+0x3b8>
 800d1be:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d1c2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d1c6:	e7e0      	b.n	800d18a <_dtoa_r+0x4ea>
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	463e      	mov	r6, r7
 800d1cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d1d0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800d1d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d1d8:	ee14 2a90 	vmov	r2, s9
 800d1dc:	3230      	adds	r2, #48	@ 0x30
 800d1de:	f806 2b01 	strb.w	r2, [r6], #1
 800d1e2:	42a6      	cmp	r6, r4
 800d1e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d1e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d1ec:	d119      	bne.n	800d222 <_dtoa_r+0x582>
 800d1ee:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800d1f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d1f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	dc3e      	bgt.n	800d27e <_dtoa_r+0x5de>
 800d200:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d204:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	f57f af24 	bpl.w	800d058 <_dtoa_r+0x3b8>
 800d210:	460e      	mov	r6, r1
 800d212:	3901      	subs	r1, #1
 800d214:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d218:	2b30      	cmp	r3, #48	@ 0x30
 800d21a:	d0f9      	beq.n	800d210 <_dtoa_r+0x570>
 800d21c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d220:	e758      	b.n	800d0d4 <_dtoa_r+0x434>
 800d222:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d226:	e7d5      	b.n	800d1d4 <_dtoa_r+0x534>
 800d228:	d10b      	bne.n	800d242 <_dtoa_r+0x5a2>
 800d22a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800d22e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d232:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d236:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23e:	f2c0 8161 	blt.w	800d504 <_dtoa_r+0x864>
 800d242:	2400      	movs	r4, #0
 800d244:	4625      	mov	r5, r4
 800d246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d248:	43db      	mvns	r3, r3
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	463e      	mov	r6, r7
 800d24e:	f04f 0800 	mov.w	r8, #0
 800d252:	4621      	mov	r1, r4
 800d254:	4648      	mov	r0, r9
 800d256:	f000 fbb9 	bl	800d9cc <_Bfree>
 800d25a:	2d00      	cmp	r5, #0
 800d25c:	d0de      	beq.n	800d21c <_dtoa_r+0x57c>
 800d25e:	f1b8 0f00 	cmp.w	r8, #0
 800d262:	d005      	beq.n	800d270 <_dtoa_r+0x5d0>
 800d264:	45a8      	cmp	r8, r5
 800d266:	d003      	beq.n	800d270 <_dtoa_r+0x5d0>
 800d268:	4641      	mov	r1, r8
 800d26a:	4648      	mov	r0, r9
 800d26c:	f000 fbae 	bl	800d9cc <_Bfree>
 800d270:	4629      	mov	r1, r5
 800d272:	4648      	mov	r0, r9
 800d274:	f000 fbaa 	bl	800d9cc <_Bfree>
 800d278:	e7d0      	b.n	800d21c <_dtoa_r+0x57c>
 800d27a:	f8cd 8010 	str.w	r8, [sp, #16]
 800d27e:	4633      	mov	r3, r6
 800d280:	461e      	mov	r6, r3
 800d282:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d286:	2a39      	cmp	r2, #57	@ 0x39
 800d288:	d106      	bne.n	800d298 <_dtoa_r+0x5f8>
 800d28a:	429f      	cmp	r7, r3
 800d28c:	d1f8      	bne.n	800d280 <_dtoa_r+0x5e0>
 800d28e:	9a04      	ldr	r2, [sp, #16]
 800d290:	3201      	adds	r2, #1
 800d292:	9204      	str	r2, [sp, #16]
 800d294:	2230      	movs	r2, #48	@ 0x30
 800d296:	703a      	strb	r2, [r7, #0]
 800d298:	781a      	ldrb	r2, [r3, #0]
 800d29a:	3201      	adds	r2, #1
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	e7bd      	b.n	800d21c <_dtoa_r+0x57c>
 800d2a0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d2a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ac:	f47f aeef 	bne.w	800d08e <_dtoa_r+0x3ee>
 800d2b0:	e710      	b.n	800d0d4 <_dtoa_r+0x434>
 800d2b2:	bf00      	nop
 800d2b4:	080107b0 	.word	0x080107b0
 800d2b8:	08010788 	.word	0x08010788
 800d2bc:	9908      	ldr	r1, [sp, #32]
 800d2be:	2900      	cmp	r1, #0
 800d2c0:	f000 80e3 	beq.w	800d48a <_dtoa_r+0x7ea>
 800d2c4:	9907      	ldr	r1, [sp, #28]
 800d2c6:	2901      	cmp	r1, #1
 800d2c8:	f300 80c8 	bgt.w	800d45c <_dtoa_r+0x7bc>
 800d2cc:	2d00      	cmp	r5, #0
 800d2ce:	f000 80c1 	beq.w	800d454 <_dtoa_r+0x7b4>
 800d2d2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d2d6:	9e05      	ldr	r6, [sp, #20]
 800d2d8:	461c      	mov	r4, r3
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	9b05      	ldr	r3, [sp, #20]
 800d2de:	4413      	add	r3, r2
 800d2e0:	9305      	str	r3, [sp, #20]
 800d2e2:	9b06      	ldr	r3, [sp, #24]
 800d2e4:	2101      	movs	r1, #1
 800d2e6:	4413      	add	r3, r2
 800d2e8:	4648      	mov	r0, r9
 800d2ea:	9306      	str	r3, [sp, #24]
 800d2ec:	f000 fc6c 	bl	800dbc8 <__i2b>
 800d2f0:	9b04      	ldr	r3, [sp, #16]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	b166      	cbz	r6, 800d310 <_dtoa_r+0x670>
 800d2f6:	9a06      	ldr	r2, [sp, #24]
 800d2f8:	2a00      	cmp	r2, #0
 800d2fa:	dd09      	ble.n	800d310 <_dtoa_r+0x670>
 800d2fc:	42b2      	cmp	r2, r6
 800d2fe:	9905      	ldr	r1, [sp, #20]
 800d300:	bfa8      	it	ge
 800d302:	4632      	movge	r2, r6
 800d304:	1a89      	subs	r1, r1, r2
 800d306:	9105      	str	r1, [sp, #20]
 800d308:	9906      	ldr	r1, [sp, #24]
 800d30a:	1ab6      	subs	r6, r6, r2
 800d30c:	1a8a      	subs	r2, r1, r2
 800d30e:	9206      	str	r2, [sp, #24]
 800d310:	b1fb      	cbz	r3, 800d352 <_dtoa_r+0x6b2>
 800d312:	9a08      	ldr	r2, [sp, #32]
 800d314:	2a00      	cmp	r2, #0
 800d316:	f000 80bc 	beq.w	800d492 <_dtoa_r+0x7f2>
 800d31a:	b19c      	cbz	r4, 800d344 <_dtoa_r+0x6a4>
 800d31c:	4629      	mov	r1, r5
 800d31e:	4622      	mov	r2, r4
 800d320:	4648      	mov	r0, r9
 800d322:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d324:	f000 fd10 	bl	800dd48 <__pow5mult>
 800d328:	9a01      	ldr	r2, [sp, #4]
 800d32a:	4601      	mov	r1, r0
 800d32c:	4605      	mov	r5, r0
 800d32e:	4648      	mov	r0, r9
 800d330:	f000 fc60 	bl	800dbf4 <__multiply>
 800d334:	9901      	ldr	r1, [sp, #4]
 800d336:	9004      	str	r0, [sp, #16]
 800d338:	4648      	mov	r0, r9
 800d33a:	f000 fb47 	bl	800d9cc <_Bfree>
 800d33e:	9a04      	ldr	r2, [sp, #16]
 800d340:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d342:	9201      	str	r2, [sp, #4]
 800d344:	1b1a      	subs	r2, r3, r4
 800d346:	d004      	beq.n	800d352 <_dtoa_r+0x6b2>
 800d348:	9901      	ldr	r1, [sp, #4]
 800d34a:	4648      	mov	r0, r9
 800d34c:	f000 fcfc 	bl	800dd48 <__pow5mult>
 800d350:	9001      	str	r0, [sp, #4]
 800d352:	2101      	movs	r1, #1
 800d354:	4648      	mov	r0, r9
 800d356:	f000 fc37 	bl	800dbc8 <__i2b>
 800d35a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d35c:	4604      	mov	r4, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 81d0 	beq.w	800d704 <_dtoa_r+0xa64>
 800d364:	461a      	mov	r2, r3
 800d366:	4601      	mov	r1, r0
 800d368:	4648      	mov	r0, r9
 800d36a:	f000 fced 	bl	800dd48 <__pow5mult>
 800d36e:	9b07      	ldr	r3, [sp, #28]
 800d370:	2b01      	cmp	r3, #1
 800d372:	4604      	mov	r4, r0
 800d374:	f300 8095 	bgt.w	800d4a2 <_dtoa_r+0x802>
 800d378:	9b02      	ldr	r3, [sp, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f040 808b 	bne.w	800d496 <_dtoa_r+0x7f6>
 800d380:	9b03      	ldr	r3, [sp, #12]
 800d382:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d386:	2a00      	cmp	r2, #0
 800d388:	f040 8087 	bne.w	800d49a <_dtoa_r+0x7fa>
 800d38c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d390:	0d12      	lsrs	r2, r2, #20
 800d392:	0512      	lsls	r2, r2, #20
 800d394:	2a00      	cmp	r2, #0
 800d396:	f000 8082 	beq.w	800d49e <_dtoa_r+0x7fe>
 800d39a:	9b05      	ldr	r3, [sp, #20]
 800d39c:	3301      	adds	r3, #1
 800d39e:	9305      	str	r3, [sp, #20]
 800d3a0:	9b06      	ldr	r3, [sp, #24]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	9306      	str	r3, [sp, #24]
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 81af 	beq.w	800d710 <_dtoa_r+0xa70>
 800d3b2:	6922      	ldr	r2, [r4, #16]
 800d3b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d3b8:	6910      	ldr	r0, [r2, #16]
 800d3ba:	f000 fbb9 	bl	800db30 <__hi0bits>
 800d3be:	f1c0 0020 	rsb	r0, r0, #32
 800d3c2:	9b06      	ldr	r3, [sp, #24]
 800d3c4:	4418      	add	r0, r3
 800d3c6:	f010 001f 	ands.w	r0, r0, #31
 800d3ca:	d076      	beq.n	800d4ba <_dtoa_r+0x81a>
 800d3cc:	f1c0 0220 	rsb	r2, r0, #32
 800d3d0:	2a04      	cmp	r2, #4
 800d3d2:	dd69      	ble.n	800d4a8 <_dtoa_r+0x808>
 800d3d4:	9b05      	ldr	r3, [sp, #20]
 800d3d6:	f1c0 001c 	rsb	r0, r0, #28
 800d3da:	4403      	add	r3, r0
 800d3dc:	9305      	str	r3, [sp, #20]
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	4406      	add	r6, r0
 800d3e2:	4403      	add	r3, r0
 800d3e4:	9306      	str	r3, [sp, #24]
 800d3e6:	9b05      	ldr	r3, [sp, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	dd05      	ble.n	800d3f8 <_dtoa_r+0x758>
 800d3ec:	9901      	ldr	r1, [sp, #4]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	f000 fd03 	bl	800ddfc <__lshift>
 800d3f6:	9001      	str	r0, [sp, #4]
 800d3f8:	9b06      	ldr	r3, [sp, #24]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dd05      	ble.n	800d40a <_dtoa_r+0x76a>
 800d3fe:	4621      	mov	r1, r4
 800d400:	461a      	mov	r2, r3
 800d402:	4648      	mov	r0, r9
 800d404:	f000 fcfa 	bl	800ddfc <__lshift>
 800d408:	4604      	mov	r4, r0
 800d40a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d056      	beq.n	800d4be <_dtoa_r+0x81e>
 800d410:	9801      	ldr	r0, [sp, #4]
 800d412:	4621      	mov	r1, r4
 800d414:	f000 fd5e 	bl	800ded4 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	da50      	bge.n	800d4be <_dtoa_r+0x81e>
 800d41c:	f108 33ff 	add.w	r3, r8, #4294967295
 800d420:	9304      	str	r3, [sp, #16]
 800d422:	9901      	ldr	r1, [sp, #4]
 800d424:	2300      	movs	r3, #0
 800d426:	220a      	movs	r2, #10
 800d428:	4648      	mov	r0, r9
 800d42a:	f000 faf1 	bl	800da10 <__multadd>
 800d42e:	9b08      	ldr	r3, [sp, #32]
 800d430:	9001      	str	r0, [sp, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 816e 	beq.w	800d714 <_dtoa_r+0xa74>
 800d438:	4629      	mov	r1, r5
 800d43a:	2300      	movs	r3, #0
 800d43c:	220a      	movs	r2, #10
 800d43e:	4648      	mov	r0, r9
 800d440:	f000 fae6 	bl	800da10 <__multadd>
 800d444:	f1bb 0f00 	cmp.w	fp, #0
 800d448:	4605      	mov	r5, r0
 800d44a:	dc64      	bgt.n	800d516 <_dtoa_r+0x876>
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	dc3e      	bgt.n	800d4d0 <_dtoa_r+0x830>
 800d452:	e060      	b.n	800d516 <_dtoa_r+0x876>
 800d454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d456:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d45a:	e73c      	b.n	800d2d6 <_dtoa_r+0x636>
 800d45c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800d460:	42a3      	cmp	r3, r4
 800d462:	bfbf      	itttt	lt
 800d464:	1ae2      	sublt	r2, r4, r3
 800d466:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d468:	189b      	addlt	r3, r3, r2
 800d46a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800d46c:	bfae      	itee	ge
 800d46e:	1b1c      	subge	r4, r3, r4
 800d470:	4623      	movlt	r3, r4
 800d472:	2400      	movlt	r4, #0
 800d474:	f1ba 0f00 	cmp.w	sl, #0
 800d478:	bfb5      	itete	lt
 800d47a:	9a05      	ldrlt	r2, [sp, #20]
 800d47c:	9e05      	ldrge	r6, [sp, #20]
 800d47e:	eba2 060a 	sublt.w	r6, r2, sl
 800d482:	4652      	movge	r2, sl
 800d484:	bfb8      	it	lt
 800d486:	2200      	movlt	r2, #0
 800d488:	e727      	b.n	800d2da <_dtoa_r+0x63a>
 800d48a:	9e05      	ldr	r6, [sp, #20]
 800d48c:	9d08      	ldr	r5, [sp, #32]
 800d48e:	461c      	mov	r4, r3
 800d490:	e730      	b.n	800d2f4 <_dtoa_r+0x654>
 800d492:	461a      	mov	r2, r3
 800d494:	e758      	b.n	800d348 <_dtoa_r+0x6a8>
 800d496:	2300      	movs	r3, #0
 800d498:	e786      	b.n	800d3a8 <_dtoa_r+0x708>
 800d49a:	9b02      	ldr	r3, [sp, #8]
 800d49c:	e784      	b.n	800d3a8 <_dtoa_r+0x708>
 800d49e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d4a0:	e783      	b.n	800d3aa <_dtoa_r+0x70a>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4a6:	e784      	b.n	800d3b2 <_dtoa_r+0x712>
 800d4a8:	d09d      	beq.n	800d3e6 <_dtoa_r+0x746>
 800d4aa:	9b05      	ldr	r3, [sp, #20]
 800d4ac:	321c      	adds	r2, #28
 800d4ae:	4413      	add	r3, r2
 800d4b0:	9305      	str	r3, [sp, #20]
 800d4b2:	9b06      	ldr	r3, [sp, #24]
 800d4b4:	4416      	add	r6, r2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	e794      	b.n	800d3e4 <_dtoa_r+0x744>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	e7f5      	b.n	800d4aa <_dtoa_r+0x80a>
 800d4be:	f1ba 0f00 	cmp.w	sl, #0
 800d4c2:	f8cd 8010 	str.w	r8, [sp, #16]
 800d4c6:	46d3      	mov	fp, sl
 800d4c8:	dc21      	bgt.n	800d50e <_dtoa_r+0x86e>
 800d4ca:	9b07      	ldr	r3, [sp, #28]
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	dd1e      	ble.n	800d50e <_dtoa_r+0x86e>
 800d4d0:	f1bb 0f00 	cmp.w	fp, #0
 800d4d4:	f47f aeb7 	bne.w	800d246 <_dtoa_r+0x5a6>
 800d4d8:	4621      	mov	r1, r4
 800d4da:	465b      	mov	r3, fp
 800d4dc:	2205      	movs	r2, #5
 800d4de:	4648      	mov	r0, r9
 800d4e0:	f000 fa96 	bl	800da10 <__multadd>
 800d4e4:	4601      	mov	r1, r0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	9801      	ldr	r0, [sp, #4]
 800d4ea:	f000 fcf3 	bl	800ded4 <__mcmp>
 800d4ee:	2800      	cmp	r0, #0
 800d4f0:	f77f aea9 	ble.w	800d246 <_dtoa_r+0x5a6>
 800d4f4:	463e      	mov	r6, r7
 800d4f6:	2331      	movs	r3, #49	@ 0x31
 800d4f8:	f806 3b01 	strb.w	r3, [r6], #1
 800d4fc:	9b04      	ldr	r3, [sp, #16]
 800d4fe:	3301      	adds	r3, #1
 800d500:	9304      	str	r3, [sp, #16]
 800d502:	e6a4      	b.n	800d24e <_dtoa_r+0x5ae>
 800d504:	f8cd 8010 	str.w	r8, [sp, #16]
 800d508:	4654      	mov	r4, sl
 800d50a:	4625      	mov	r5, r4
 800d50c:	e7f2      	b.n	800d4f4 <_dtoa_r+0x854>
 800d50e:	9b08      	ldr	r3, [sp, #32]
 800d510:	2b00      	cmp	r3, #0
 800d512:	f000 8103 	beq.w	800d71c <_dtoa_r+0xa7c>
 800d516:	2e00      	cmp	r6, #0
 800d518:	dd05      	ble.n	800d526 <_dtoa_r+0x886>
 800d51a:	4629      	mov	r1, r5
 800d51c:	4632      	mov	r2, r6
 800d51e:	4648      	mov	r0, r9
 800d520:	f000 fc6c 	bl	800ddfc <__lshift>
 800d524:	4605      	mov	r5, r0
 800d526:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d058      	beq.n	800d5de <_dtoa_r+0x93e>
 800d52c:	6869      	ldr	r1, [r5, #4]
 800d52e:	4648      	mov	r0, r9
 800d530:	f000 fa0c 	bl	800d94c <_Balloc>
 800d534:	4606      	mov	r6, r0
 800d536:	b928      	cbnz	r0, 800d544 <_dtoa_r+0x8a4>
 800d538:	4b82      	ldr	r3, [pc, #520]	@ (800d744 <_dtoa_r+0xaa4>)
 800d53a:	4602      	mov	r2, r0
 800d53c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d540:	f7ff bbc7 	b.w	800ccd2 <_dtoa_r+0x32>
 800d544:	692a      	ldr	r2, [r5, #16]
 800d546:	3202      	adds	r2, #2
 800d548:	0092      	lsls	r2, r2, #2
 800d54a:	f105 010c 	add.w	r1, r5, #12
 800d54e:	300c      	adds	r0, #12
 800d550:	f001 ff1e 	bl	800f390 <memcpy>
 800d554:	2201      	movs	r2, #1
 800d556:	4631      	mov	r1, r6
 800d558:	4648      	mov	r0, r9
 800d55a:	f000 fc4f 	bl	800ddfc <__lshift>
 800d55e:	1c7b      	adds	r3, r7, #1
 800d560:	9305      	str	r3, [sp, #20]
 800d562:	eb07 030b 	add.w	r3, r7, fp
 800d566:	9309      	str	r3, [sp, #36]	@ 0x24
 800d568:	9b02      	ldr	r3, [sp, #8]
 800d56a:	f003 0301 	and.w	r3, r3, #1
 800d56e:	46a8      	mov	r8, r5
 800d570:	9308      	str	r3, [sp, #32]
 800d572:	4605      	mov	r5, r0
 800d574:	9b05      	ldr	r3, [sp, #20]
 800d576:	9801      	ldr	r0, [sp, #4]
 800d578:	4621      	mov	r1, r4
 800d57a:	f103 3bff 	add.w	fp, r3, #4294967295
 800d57e:	f7ff fb07 	bl	800cb90 <quorem>
 800d582:	4641      	mov	r1, r8
 800d584:	9002      	str	r0, [sp, #8]
 800d586:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d58a:	9801      	ldr	r0, [sp, #4]
 800d58c:	f000 fca2 	bl	800ded4 <__mcmp>
 800d590:	462a      	mov	r2, r5
 800d592:	9006      	str	r0, [sp, #24]
 800d594:	4621      	mov	r1, r4
 800d596:	4648      	mov	r0, r9
 800d598:	f000 fcb8 	bl	800df0c <__mdiff>
 800d59c:	68c2      	ldr	r2, [r0, #12]
 800d59e:	4606      	mov	r6, r0
 800d5a0:	b9fa      	cbnz	r2, 800d5e2 <_dtoa_r+0x942>
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	9801      	ldr	r0, [sp, #4]
 800d5a6:	f000 fc95 	bl	800ded4 <__mcmp>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	4631      	mov	r1, r6
 800d5ae:	4648      	mov	r0, r9
 800d5b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800d5b2:	f000 fa0b 	bl	800d9cc <_Bfree>
 800d5b6:	9b07      	ldr	r3, [sp, #28]
 800d5b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d5ba:	9e05      	ldr	r6, [sp, #20]
 800d5bc:	ea43 0102 	orr.w	r1, r3, r2
 800d5c0:	9b08      	ldr	r3, [sp, #32]
 800d5c2:	4319      	orrs	r1, r3
 800d5c4:	d10f      	bne.n	800d5e6 <_dtoa_r+0x946>
 800d5c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d5ca:	d028      	beq.n	800d61e <_dtoa_r+0x97e>
 800d5cc:	9b06      	ldr	r3, [sp, #24]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dd02      	ble.n	800d5d8 <_dtoa_r+0x938>
 800d5d2:	9b02      	ldr	r3, [sp, #8]
 800d5d4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d5d8:	f88b a000 	strb.w	sl, [fp]
 800d5dc:	e639      	b.n	800d252 <_dtoa_r+0x5b2>
 800d5de:	4628      	mov	r0, r5
 800d5e0:	e7bd      	b.n	800d55e <_dtoa_r+0x8be>
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	e7e2      	b.n	800d5ac <_dtoa_r+0x90c>
 800d5e6:	9b06      	ldr	r3, [sp, #24]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	db04      	blt.n	800d5f6 <_dtoa_r+0x956>
 800d5ec:	9907      	ldr	r1, [sp, #28]
 800d5ee:	430b      	orrs	r3, r1
 800d5f0:	9908      	ldr	r1, [sp, #32]
 800d5f2:	430b      	orrs	r3, r1
 800d5f4:	d120      	bne.n	800d638 <_dtoa_r+0x998>
 800d5f6:	2a00      	cmp	r2, #0
 800d5f8:	ddee      	ble.n	800d5d8 <_dtoa_r+0x938>
 800d5fa:	9901      	ldr	r1, [sp, #4]
 800d5fc:	2201      	movs	r2, #1
 800d5fe:	4648      	mov	r0, r9
 800d600:	f000 fbfc 	bl	800ddfc <__lshift>
 800d604:	4621      	mov	r1, r4
 800d606:	9001      	str	r0, [sp, #4]
 800d608:	f000 fc64 	bl	800ded4 <__mcmp>
 800d60c:	2800      	cmp	r0, #0
 800d60e:	dc03      	bgt.n	800d618 <_dtoa_r+0x978>
 800d610:	d1e2      	bne.n	800d5d8 <_dtoa_r+0x938>
 800d612:	f01a 0f01 	tst.w	sl, #1
 800d616:	d0df      	beq.n	800d5d8 <_dtoa_r+0x938>
 800d618:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d61c:	d1d9      	bne.n	800d5d2 <_dtoa_r+0x932>
 800d61e:	2339      	movs	r3, #57	@ 0x39
 800d620:	f88b 3000 	strb.w	r3, [fp]
 800d624:	4633      	mov	r3, r6
 800d626:	461e      	mov	r6, r3
 800d628:	3b01      	subs	r3, #1
 800d62a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d62e:	2a39      	cmp	r2, #57	@ 0x39
 800d630:	d053      	beq.n	800d6da <_dtoa_r+0xa3a>
 800d632:	3201      	adds	r2, #1
 800d634:	701a      	strb	r2, [r3, #0]
 800d636:	e60c      	b.n	800d252 <_dtoa_r+0x5b2>
 800d638:	2a00      	cmp	r2, #0
 800d63a:	dd07      	ble.n	800d64c <_dtoa_r+0x9ac>
 800d63c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d640:	d0ed      	beq.n	800d61e <_dtoa_r+0x97e>
 800d642:	f10a 0301 	add.w	r3, sl, #1
 800d646:	f88b 3000 	strb.w	r3, [fp]
 800d64a:	e602      	b.n	800d252 <_dtoa_r+0x5b2>
 800d64c:	9b05      	ldr	r3, [sp, #20]
 800d64e:	9a05      	ldr	r2, [sp, #20]
 800d650:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d656:	4293      	cmp	r3, r2
 800d658:	d029      	beq.n	800d6ae <_dtoa_r+0xa0e>
 800d65a:	9901      	ldr	r1, [sp, #4]
 800d65c:	2300      	movs	r3, #0
 800d65e:	220a      	movs	r2, #10
 800d660:	4648      	mov	r0, r9
 800d662:	f000 f9d5 	bl	800da10 <__multadd>
 800d666:	45a8      	cmp	r8, r5
 800d668:	9001      	str	r0, [sp, #4]
 800d66a:	f04f 0300 	mov.w	r3, #0
 800d66e:	f04f 020a 	mov.w	r2, #10
 800d672:	4641      	mov	r1, r8
 800d674:	4648      	mov	r0, r9
 800d676:	d107      	bne.n	800d688 <_dtoa_r+0x9e8>
 800d678:	f000 f9ca 	bl	800da10 <__multadd>
 800d67c:	4680      	mov	r8, r0
 800d67e:	4605      	mov	r5, r0
 800d680:	9b05      	ldr	r3, [sp, #20]
 800d682:	3301      	adds	r3, #1
 800d684:	9305      	str	r3, [sp, #20]
 800d686:	e775      	b.n	800d574 <_dtoa_r+0x8d4>
 800d688:	f000 f9c2 	bl	800da10 <__multadd>
 800d68c:	4629      	mov	r1, r5
 800d68e:	4680      	mov	r8, r0
 800d690:	2300      	movs	r3, #0
 800d692:	220a      	movs	r2, #10
 800d694:	4648      	mov	r0, r9
 800d696:	f000 f9bb 	bl	800da10 <__multadd>
 800d69a:	4605      	mov	r5, r0
 800d69c:	e7f0      	b.n	800d680 <_dtoa_r+0x9e0>
 800d69e:	f1bb 0f00 	cmp.w	fp, #0
 800d6a2:	bfcc      	ite	gt
 800d6a4:	465e      	movgt	r6, fp
 800d6a6:	2601      	movle	r6, #1
 800d6a8:	443e      	add	r6, r7
 800d6aa:	f04f 0800 	mov.w	r8, #0
 800d6ae:	9901      	ldr	r1, [sp, #4]
 800d6b0:	2201      	movs	r2, #1
 800d6b2:	4648      	mov	r0, r9
 800d6b4:	f000 fba2 	bl	800ddfc <__lshift>
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	9001      	str	r0, [sp, #4]
 800d6bc:	f000 fc0a 	bl	800ded4 <__mcmp>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	dcaf      	bgt.n	800d624 <_dtoa_r+0x984>
 800d6c4:	d102      	bne.n	800d6cc <_dtoa_r+0xa2c>
 800d6c6:	f01a 0f01 	tst.w	sl, #1
 800d6ca:	d1ab      	bne.n	800d624 <_dtoa_r+0x984>
 800d6cc:	4633      	mov	r3, r6
 800d6ce:	461e      	mov	r6, r3
 800d6d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6d4:	2a30      	cmp	r2, #48	@ 0x30
 800d6d6:	d0fa      	beq.n	800d6ce <_dtoa_r+0xa2e>
 800d6d8:	e5bb      	b.n	800d252 <_dtoa_r+0x5b2>
 800d6da:	429f      	cmp	r7, r3
 800d6dc:	d1a3      	bne.n	800d626 <_dtoa_r+0x986>
 800d6de:	9b04      	ldr	r3, [sp, #16]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	9304      	str	r3, [sp, #16]
 800d6e4:	2331      	movs	r3, #49	@ 0x31
 800d6e6:	703b      	strb	r3, [r7, #0]
 800d6e8:	e5b3      	b.n	800d252 <_dtoa_r+0x5b2>
 800d6ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d6ec:	4f16      	ldr	r7, [pc, #88]	@ (800d748 <_dtoa_r+0xaa8>)
 800d6ee:	b11b      	cbz	r3, 800d6f8 <_dtoa_r+0xa58>
 800d6f0:	f107 0308 	add.w	r3, r7, #8
 800d6f4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d6f6:	6013      	str	r3, [r2, #0]
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	b011      	add	sp, #68	@ 0x44
 800d6fc:	ecbd 8b02 	vpop	{d8}
 800d700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d704:	9b07      	ldr	r3, [sp, #28]
 800d706:	2b01      	cmp	r3, #1
 800d708:	f77f ae36 	ble.w	800d378 <_dtoa_r+0x6d8>
 800d70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d70e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d710:	2001      	movs	r0, #1
 800d712:	e656      	b.n	800d3c2 <_dtoa_r+0x722>
 800d714:	f1bb 0f00 	cmp.w	fp, #0
 800d718:	f77f aed7 	ble.w	800d4ca <_dtoa_r+0x82a>
 800d71c:	463e      	mov	r6, r7
 800d71e:	9801      	ldr	r0, [sp, #4]
 800d720:	4621      	mov	r1, r4
 800d722:	f7ff fa35 	bl	800cb90 <quorem>
 800d726:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d72a:	f806 ab01 	strb.w	sl, [r6], #1
 800d72e:	1bf2      	subs	r2, r6, r7
 800d730:	4593      	cmp	fp, r2
 800d732:	ddb4      	ble.n	800d69e <_dtoa_r+0x9fe>
 800d734:	9901      	ldr	r1, [sp, #4]
 800d736:	2300      	movs	r3, #0
 800d738:	220a      	movs	r2, #10
 800d73a:	4648      	mov	r0, r9
 800d73c:	f000 f968 	bl	800da10 <__multadd>
 800d740:	9001      	str	r0, [sp, #4]
 800d742:	e7ec      	b.n	800d71e <_dtoa_r+0xa7e>
 800d744:	0801070d 	.word	0x0801070d
 800d748:	08010691 	.word	0x08010691

0800d74c <_free_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	4605      	mov	r5, r0
 800d750:	2900      	cmp	r1, #0
 800d752:	d041      	beq.n	800d7d8 <_free_r+0x8c>
 800d754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d758:	1f0c      	subs	r4, r1, #4
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	bfb8      	it	lt
 800d75e:	18e4      	addlt	r4, r4, r3
 800d760:	f000 f8e8 	bl	800d934 <__malloc_lock>
 800d764:	4a1d      	ldr	r2, [pc, #116]	@ (800d7dc <_free_r+0x90>)
 800d766:	6813      	ldr	r3, [r2, #0]
 800d768:	b933      	cbnz	r3, 800d778 <_free_r+0x2c>
 800d76a:	6063      	str	r3, [r4, #4]
 800d76c:	6014      	str	r4, [r2, #0]
 800d76e:	4628      	mov	r0, r5
 800d770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d774:	f000 b8e4 	b.w	800d940 <__malloc_unlock>
 800d778:	42a3      	cmp	r3, r4
 800d77a:	d908      	bls.n	800d78e <_free_r+0x42>
 800d77c:	6820      	ldr	r0, [r4, #0]
 800d77e:	1821      	adds	r1, r4, r0
 800d780:	428b      	cmp	r3, r1
 800d782:	bf01      	itttt	eq
 800d784:	6819      	ldreq	r1, [r3, #0]
 800d786:	685b      	ldreq	r3, [r3, #4]
 800d788:	1809      	addeq	r1, r1, r0
 800d78a:	6021      	streq	r1, [r4, #0]
 800d78c:	e7ed      	b.n	800d76a <_free_r+0x1e>
 800d78e:	461a      	mov	r2, r3
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	b10b      	cbz	r3, 800d798 <_free_r+0x4c>
 800d794:	42a3      	cmp	r3, r4
 800d796:	d9fa      	bls.n	800d78e <_free_r+0x42>
 800d798:	6811      	ldr	r1, [r2, #0]
 800d79a:	1850      	adds	r0, r2, r1
 800d79c:	42a0      	cmp	r0, r4
 800d79e:	d10b      	bne.n	800d7b8 <_free_r+0x6c>
 800d7a0:	6820      	ldr	r0, [r4, #0]
 800d7a2:	4401      	add	r1, r0
 800d7a4:	1850      	adds	r0, r2, r1
 800d7a6:	4283      	cmp	r3, r0
 800d7a8:	6011      	str	r1, [r2, #0]
 800d7aa:	d1e0      	bne.n	800d76e <_free_r+0x22>
 800d7ac:	6818      	ldr	r0, [r3, #0]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	6053      	str	r3, [r2, #4]
 800d7b2:	4408      	add	r0, r1
 800d7b4:	6010      	str	r0, [r2, #0]
 800d7b6:	e7da      	b.n	800d76e <_free_r+0x22>
 800d7b8:	d902      	bls.n	800d7c0 <_free_r+0x74>
 800d7ba:	230c      	movs	r3, #12
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	e7d6      	b.n	800d76e <_free_r+0x22>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	1821      	adds	r1, r4, r0
 800d7c4:	428b      	cmp	r3, r1
 800d7c6:	bf04      	itt	eq
 800d7c8:	6819      	ldreq	r1, [r3, #0]
 800d7ca:	685b      	ldreq	r3, [r3, #4]
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	bf04      	itt	eq
 800d7d0:	1809      	addeq	r1, r1, r0
 800d7d2:	6021      	streq	r1, [r4, #0]
 800d7d4:	6054      	str	r4, [r2, #4]
 800d7d6:	e7ca      	b.n	800d76e <_free_r+0x22>
 800d7d8:	bd38      	pop	{r3, r4, r5, pc}
 800d7da:	bf00      	nop
 800d7dc:	24000794 	.word	0x24000794

0800d7e0 <malloc>:
 800d7e0:	4b02      	ldr	r3, [pc, #8]	@ (800d7ec <malloc+0xc>)
 800d7e2:	4601      	mov	r1, r0
 800d7e4:	6818      	ldr	r0, [r3, #0]
 800d7e6:	f000 b825 	b.w	800d834 <_malloc_r>
 800d7ea:	bf00      	nop
 800d7ec:	24000020 	.word	0x24000020

0800d7f0 <sbrk_aligned>:
 800d7f0:	b570      	push	{r4, r5, r6, lr}
 800d7f2:	4e0f      	ldr	r6, [pc, #60]	@ (800d830 <sbrk_aligned+0x40>)
 800d7f4:	460c      	mov	r4, r1
 800d7f6:	6831      	ldr	r1, [r6, #0]
 800d7f8:	4605      	mov	r5, r0
 800d7fa:	b911      	cbnz	r1, 800d802 <sbrk_aligned+0x12>
 800d7fc:	f001 fdb8 	bl	800f370 <_sbrk_r>
 800d800:	6030      	str	r0, [r6, #0]
 800d802:	4621      	mov	r1, r4
 800d804:	4628      	mov	r0, r5
 800d806:	f001 fdb3 	bl	800f370 <_sbrk_r>
 800d80a:	1c43      	adds	r3, r0, #1
 800d80c:	d103      	bne.n	800d816 <sbrk_aligned+0x26>
 800d80e:	f04f 34ff 	mov.w	r4, #4294967295
 800d812:	4620      	mov	r0, r4
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	1cc4      	adds	r4, r0, #3
 800d818:	f024 0403 	bic.w	r4, r4, #3
 800d81c:	42a0      	cmp	r0, r4
 800d81e:	d0f8      	beq.n	800d812 <sbrk_aligned+0x22>
 800d820:	1a21      	subs	r1, r4, r0
 800d822:	4628      	mov	r0, r5
 800d824:	f001 fda4 	bl	800f370 <_sbrk_r>
 800d828:	3001      	adds	r0, #1
 800d82a:	d1f2      	bne.n	800d812 <sbrk_aligned+0x22>
 800d82c:	e7ef      	b.n	800d80e <sbrk_aligned+0x1e>
 800d82e:	bf00      	nop
 800d830:	24000790 	.word	0x24000790

0800d834 <_malloc_r>:
 800d834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d838:	1ccd      	adds	r5, r1, #3
 800d83a:	f025 0503 	bic.w	r5, r5, #3
 800d83e:	3508      	adds	r5, #8
 800d840:	2d0c      	cmp	r5, #12
 800d842:	bf38      	it	cc
 800d844:	250c      	movcc	r5, #12
 800d846:	2d00      	cmp	r5, #0
 800d848:	4606      	mov	r6, r0
 800d84a:	db01      	blt.n	800d850 <_malloc_r+0x1c>
 800d84c:	42a9      	cmp	r1, r5
 800d84e:	d904      	bls.n	800d85a <_malloc_r+0x26>
 800d850:	230c      	movs	r3, #12
 800d852:	6033      	str	r3, [r6, #0]
 800d854:	2000      	movs	r0, #0
 800d856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d85a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d930 <_malloc_r+0xfc>
 800d85e:	f000 f869 	bl	800d934 <__malloc_lock>
 800d862:	f8d8 3000 	ldr.w	r3, [r8]
 800d866:	461c      	mov	r4, r3
 800d868:	bb44      	cbnz	r4, 800d8bc <_malloc_r+0x88>
 800d86a:	4629      	mov	r1, r5
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7ff ffbf 	bl	800d7f0 <sbrk_aligned>
 800d872:	1c43      	adds	r3, r0, #1
 800d874:	4604      	mov	r4, r0
 800d876:	d158      	bne.n	800d92a <_malloc_r+0xf6>
 800d878:	f8d8 4000 	ldr.w	r4, [r8]
 800d87c:	4627      	mov	r7, r4
 800d87e:	2f00      	cmp	r7, #0
 800d880:	d143      	bne.n	800d90a <_malloc_r+0xd6>
 800d882:	2c00      	cmp	r4, #0
 800d884:	d04b      	beq.n	800d91e <_malloc_r+0xea>
 800d886:	6823      	ldr	r3, [r4, #0]
 800d888:	4639      	mov	r1, r7
 800d88a:	4630      	mov	r0, r6
 800d88c:	eb04 0903 	add.w	r9, r4, r3
 800d890:	f001 fd6e 	bl	800f370 <_sbrk_r>
 800d894:	4581      	cmp	r9, r0
 800d896:	d142      	bne.n	800d91e <_malloc_r+0xea>
 800d898:	6821      	ldr	r1, [r4, #0]
 800d89a:	1a6d      	subs	r5, r5, r1
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f7ff ffa6 	bl	800d7f0 <sbrk_aligned>
 800d8a4:	3001      	adds	r0, #1
 800d8a6:	d03a      	beq.n	800d91e <_malloc_r+0xea>
 800d8a8:	6823      	ldr	r3, [r4, #0]
 800d8aa:	442b      	add	r3, r5
 800d8ac:	6023      	str	r3, [r4, #0]
 800d8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	bb62      	cbnz	r2, 800d910 <_malloc_r+0xdc>
 800d8b6:	f8c8 7000 	str.w	r7, [r8]
 800d8ba:	e00f      	b.n	800d8dc <_malloc_r+0xa8>
 800d8bc:	6822      	ldr	r2, [r4, #0]
 800d8be:	1b52      	subs	r2, r2, r5
 800d8c0:	d420      	bmi.n	800d904 <_malloc_r+0xd0>
 800d8c2:	2a0b      	cmp	r2, #11
 800d8c4:	d917      	bls.n	800d8f6 <_malloc_r+0xc2>
 800d8c6:	1961      	adds	r1, r4, r5
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	6025      	str	r5, [r4, #0]
 800d8cc:	bf18      	it	ne
 800d8ce:	6059      	strne	r1, [r3, #4]
 800d8d0:	6863      	ldr	r3, [r4, #4]
 800d8d2:	bf08      	it	eq
 800d8d4:	f8c8 1000 	streq.w	r1, [r8]
 800d8d8:	5162      	str	r2, [r4, r5]
 800d8da:	604b      	str	r3, [r1, #4]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f82f 	bl	800d940 <__malloc_unlock>
 800d8e2:	f104 000b 	add.w	r0, r4, #11
 800d8e6:	1d23      	adds	r3, r4, #4
 800d8e8:	f020 0007 	bic.w	r0, r0, #7
 800d8ec:	1ac2      	subs	r2, r0, r3
 800d8ee:	bf1c      	itt	ne
 800d8f0:	1a1b      	subne	r3, r3, r0
 800d8f2:	50a3      	strne	r3, [r4, r2]
 800d8f4:	e7af      	b.n	800d856 <_malloc_r+0x22>
 800d8f6:	6862      	ldr	r2, [r4, #4]
 800d8f8:	42a3      	cmp	r3, r4
 800d8fa:	bf0c      	ite	eq
 800d8fc:	f8c8 2000 	streq.w	r2, [r8]
 800d900:	605a      	strne	r2, [r3, #4]
 800d902:	e7eb      	b.n	800d8dc <_malloc_r+0xa8>
 800d904:	4623      	mov	r3, r4
 800d906:	6864      	ldr	r4, [r4, #4]
 800d908:	e7ae      	b.n	800d868 <_malloc_r+0x34>
 800d90a:	463c      	mov	r4, r7
 800d90c:	687f      	ldr	r7, [r7, #4]
 800d90e:	e7b6      	b.n	800d87e <_malloc_r+0x4a>
 800d910:	461a      	mov	r2, r3
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	42a3      	cmp	r3, r4
 800d916:	d1fb      	bne.n	800d910 <_malloc_r+0xdc>
 800d918:	2300      	movs	r3, #0
 800d91a:	6053      	str	r3, [r2, #4]
 800d91c:	e7de      	b.n	800d8dc <_malloc_r+0xa8>
 800d91e:	230c      	movs	r3, #12
 800d920:	6033      	str	r3, [r6, #0]
 800d922:	4630      	mov	r0, r6
 800d924:	f000 f80c 	bl	800d940 <__malloc_unlock>
 800d928:	e794      	b.n	800d854 <_malloc_r+0x20>
 800d92a:	6005      	str	r5, [r0, #0]
 800d92c:	e7d6      	b.n	800d8dc <_malloc_r+0xa8>
 800d92e:	bf00      	nop
 800d930:	24000794 	.word	0x24000794

0800d934 <__malloc_lock>:
 800d934:	4801      	ldr	r0, [pc, #4]	@ (800d93c <__malloc_lock+0x8>)
 800d936:	f7ff b922 	b.w	800cb7e <__retarget_lock_acquire_recursive>
 800d93a:	bf00      	nop
 800d93c:	2400078c 	.word	0x2400078c

0800d940 <__malloc_unlock>:
 800d940:	4801      	ldr	r0, [pc, #4]	@ (800d948 <__malloc_unlock+0x8>)
 800d942:	f7ff b91d 	b.w	800cb80 <__retarget_lock_release_recursive>
 800d946:	bf00      	nop
 800d948:	2400078c 	.word	0x2400078c

0800d94c <_Balloc>:
 800d94c:	b570      	push	{r4, r5, r6, lr}
 800d94e:	69c6      	ldr	r6, [r0, #28]
 800d950:	4604      	mov	r4, r0
 800d952:	460d      	mov	r5, r1
 800d954:	b976      	cbnz	r6, 800d974 <_Balloc+0x28>
 800d956:	2010      	movs	r0, #16
 800d958:	f7ff ff42 	bl	800d7e0 <malloc>
 800d95c:	4602      	mov	r2, r0
 800d95e:	61e0      	str	r0, [r4, #28]
 800d960:	b920      	cbnz	r0, 800d96c <_Balloc+0x20>
 800d962:	4b18      	ldr	r3, [pc, #96]	@ (800d9c4 <_Balloc+0x78>)
 800d964:	4818      	ldr	r0, [pc, #96]	@ (800d9c8 <_Balloc+0x7c>)
 800d966:	216b      	movs	r1, #107	@ 0x6b
 800d968:	f001 fd2a 	bl	800f3c0 <__assert_func>
 800d96c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d970:	6006      	str	r6, [r0, #0]
 800d972:	60c6      	str	r6, [r0, #12]
 800d974:	69e6      	ldr	r6, [r4, #28]
 800d976:	68f3      	ldr	r3, [r6, #12]
 800d978:	b183      	cbz	r3, 800d99c <_Balloc+0x50>
 800d97a:	69e3      	ldr	r3, [r4, #28]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d982:	b9b8      	cbnz	r0, 800d9b4 <_Balloc+0x68>
 800d984:	2101      	movs	r1, #1
 800d986:	fa01 f605 	lsl.w	r6, r1, r5
 800d98a:	1d72      	adds	r2, r6, #5
 800d98c:	0092      	lsls	r2, r2, #2
 800d98e:	4620      	mov	r0, r4
 800d990:	f001 fd34 	bl	800f3fc <_calloc_r>
 800d994:	b160      	cbz	r0, 800d9b0 <_Balloc+0x64>
 800d996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d99a:	e00e      	b.n	800d9ba <_Balloc+0x6e>
 800d99c:	2221      	movs	r2, #33	@ 0x21
 800d99e:	2104      	movs	r1, #4
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f001 fd2b 	bl	800f3fc <_calloc_r>
 800d9a6:	69e3      	ldr	r3, [r4, #28]
 800d9a8:	60f0      	str	r0, [r6, #12]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1e4      	bne.n	800d97a <_Balloc+0x2e>
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	bd70      	pop	{r4, r5, r6, pc}
 800d9b4:	6802      	ldr	r2, [r0, #0]
 800d9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9c0:	e7f7      	b.n	800d9b2 <_Balloc+0x66>
 800d9c2:	bf00      	nop
 800d9c4:	0801069e 	.word	0x0801069e
 800d9c8:	0801071e 	.word	0x0801071e

0800d9cc <_Bfree>:
 800d9cc:	b570      	push	{r4, r5, r6, lr}
 800d9ce:	69c6      	ldr	r6, [r0, #28]
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	460c      	mov	r4, r1
 800d9d4:	b976      	cbnz	r6, 800d9f4 <_Bfree+0x28>
 800d9d6:	2010      	movs	r0, #16
 800d9d8:	f7ff ff02 	bl	800d7e0 <malloc>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	61e8      	str	r0, [r5, #28]
 800d9e0:	b920      	cbnz	r0, 800d9ec <_Bfree+0x20>
 800d9e2:	4b09      	ldr	r3, [pc, #36]	@ (800da08 <_Bfree+0x3c>)
 800d9e4:	4809      	ldr	r0, [pc, #36]	@ (800da0c <_Bfree+0x40>)
 800d9e6:	218f      	movs	r1, #143	@ 0x8f
 800d9e8:	f001 fcea 	bl	800f3c0 <__assert_func>
 800d9ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f0:	6006      	str	r6, [r0, #0]
 800d9f2:	60c6      	str	r6, [r0, #12]
 800d9f4:	b13c      	cbz	r4, 800da06 <_Bfree+0x3a>
 800d9f6:	69eb      	ldr	r3, [r5, #28]
 800d9f8:	6862      	ldr	r2, [r4, #4]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da00:	6021      	str	r1, [r4, #0]
 800da02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	0801069e 	.word	0x0801069e
 800da0c:	0801071e 	.word	0x0801071e

0800da10 <__multadd>:
 800da10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	690d      	ldr	r5, [r1, #16]
 800da16:	4607      	mov	r7, r0
 800da18:	460c      	mov	r4, r1
 800da1a:	461e      	mov	r6, r3
 800da1c:	f101 0c14 	add.w	ip, r1, #20
 800da20:	2000      	movs	r0, #0
 800da22:	f8dc 3000 	ldr.w	r3, [ip]
 800da26:	b299      	uxth	r1, r3
 800da28:	fb02 6101 	mla	r1, r2, r1, r6
 800da2c:	0c1e      	lsrs	r6, r3, #16
 800da2e:	0c0b      	lsrs	r3, r1, #16
 800da30:	fb02 3306 	mla	r3, r2, r6, r3
 800da34:	b289      	uxth	r1, r1
 800da36:	3001      	adds	r0, #1
 800da38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da3c:	4285      	cmp	r5, r0
 800da3e:	f84c 1b04 	str.w	r1, [ip], #4
 800da42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da46:	dcec      	bgt.n	800da22 <__multadd+0x12>
 800da48:	b30e      	cbz	r6, 800da8e <__multadd+0x7e>
 800da4a:	68a3      	ldr	r3, [r4, #8]
 800da4c:	42ab      	cmp	r3, r5
 800da4e:	dc19      	bgt.n	800da84 <__multadd+0x74>
 800da50:	6861      	ldr	r1, [r4, #4]
 800da52:	4638      	mov	r0, r7
 800da54:	3101      	adds	r1, #1
 800da56:	f7ff ff79 	bl	800d94c <_Balloc>
 800da5a:	4680      	mov	r8, r0
 800da5c:	b928      	cbnz	r0, 800da6a <__multadd+0x5a>
 800da5e:	4602      	mov	r2, r0
 800da60:	4b0c      	ldr	r3, [pc, #48]	@ (800da94 <__multadd+0x84>)
 800da62:	480d      	ldr	r0, [pc, #52]	@ (800da98 <__multadd+0x88>)
 800da64:	21ba      	movs	r1, #186	@ 0xba
 800da66:	f001 fcab 	bl	800f3c0 <__assert_func>
 800da6a:	6922      	ldr	r2, [r4, #16]
 800da6c:	3202      	adds	r2, #2
 800da6e:	f104 010c 	add.w	r1, r4, #12
 800da72:	0092      	lsls	r2, r2, #2
 800da74:	300c      	adds	r0, #12
 800da76:	f001 fc8b 	bl	800f390 <memcpy>
 800da7a:	4621      	mov	r1, r4
 800da7c:	4638      	mov	r0, r7
 800da7e:	f7ff ffa5 	bl	800d9cc <_Bfree>
 800da82:	4644      	mov	r4, r8
 800da84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da88:	3501      	adds	r5, #1
 800da8a:	615e      	str	r6, [r3, #20]
 800da8c:	6125      	str	r5, [r4, #16]
 800da8e:	4620      	mov	r0, r4
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da94:	0801070d 	.word	0x0801070d
 800da98:	0801071e 	.word	0x0801071e

0800da9c <__s2b>:
 800da9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daa0:	460c      	mov	r4, r1
 800daa2:	4615      	mov	r5, r2
 800daa4:	461f      	mov	r7, r3
 800daa6:	2209      	movs	r2, #9
 800daa8:	3308      	adds	r3, #8
 800daaa:	4606      	mov	r6, r0
 800daac:	fb93 f3f2 	sdiv	r3, r3, r2
 800dab0:	2100      	movs	r1, #0
 800dab2:	2201      	movs	r2, #1
 800dab4:	429a      	cmp	r2, r3
 800dab6:	db09      	blt.n	800dacc <__s2b+0x30>
 800dab8:	4630      	mov	r0, r6
 800daba:	f7ff ff47 	bl	800d94c <_Balloc>
 800dabe:	b940      	cbnz	r0, 800dad2 <__s2b+0x36>
 800dac0:	4602      	mov	r2, r0
 800dac2:	4b19      	ldr	r3, [pc, #100]	@ (800db28 <__s2b+0x8c>)
 800dac4:	4819      	ldr	r0, [pc, #100]	@ (800db2c <__s2b+0x90>)
 800dac6:	21d3      	movs	r1, #211	@ 0xd3
 800dac8:	f001 fc7a 	bl	800f3c0 <__assert_func>
 800dacc:	0052      	lsls	r2, r2, #1
 800dace:	3101      	adds	r1, #1
 800dad0:	e7f0      	b.n	800dab4 <__s2b+0x18>
 800dad2:	9b08      	ldr	r3, [sp, #32]
 800dad4:	6143      	str	r3, [r0, #20]
 800dad6:	2d09      	cmp	r5, #9
 800dad8:	f04f 0301 	mov.w	r3, #1
 800dadc:	6103      	str	r3, [r0, #16]
 800dade:	dd16      	ble.n	800db0e <__s2b+0x72>
 800dae0:	f104 0909 	add.w	r9, r4, #9
 800dae4:	46c8      	mov	r8, r9
 800dae6:	442c      	add	r4, r5
 800dae8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800daec:	4601      	mov	r1, r0
 800daee:	3b30      	subs	r3, #48	@ 0x30
 800daf0:	220a      	movs	r2, #10
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7ff ff8c 	bl	800da10 <__multadd>
 800daf8:	45a0      	cmp	r8, r4
 800dafa:	d1f5      	bne.n	800dae8 <__s2b+0x4c>
 800dafc:	f1a5 0408 	sub.w	r4, r5, #8
 800db00:	444c      	add	r4, r9
 800db02:	1b2d      	subs	r5, r5, r4
 800db04:	1963      	adds	r3, r4, r5
 800db06:	42bb      	cmp	r3, r7
 800db08:	db04      	blt.n	800db14 <__s2b+0x78>
 800db0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0e:	340a      	adds	r4, #10
 800db10:	2509      	movs	r5, #9
 800db12:	e7f6      	b.n	800db02 <__s2b+0x66>
 800db14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db18:	4601      	mov	r1, r0
 800db1a:	3b30      	subs	r3, #48	@ 0x30
 800db1c:	220a      	movs	r2, #10
 800db1e:	4630      	mov	r0, r6
 800db20:	f7ff ff76 	bl	800da10 <__multadd>
 800db24:	e7ee      	b.n	800db04 <__s2b+0x68>
 800db26:	bf00      	nop
 800db28:	0801070d 	.word	0x0801070d
 800db2c:	0801071e 	.word	0x0801071e

0800db30 <__hi0bits>:
 800db30:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800db34:	4603      	mov	r3, r0
 800db36:	bf36      	itet	cc
 800db38:	0403      	lslcc	r3, r0, #16
 800db3a:	2000      	movcs	r0, #0
 800db3c:	2010      	movcc	r0, #16
 800db3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800db42:	bf3c      	itt	cc
 800db44:	021b      	lslcc	r3, r3, #8
 800db46:	3008      	addcc	r0, #8
 800db48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db4c:	bf3c      	itt	cc
 800db4e:	011b      	lslcc	r3, r3, #4
 800db50:	3004      	addcc	r0, #4
 800db52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db56:	bf3c      	itt	cc
 800db58:	009b      	lslcc	r3, r3, #2
 800db5a:	3002      	addcc	r0, #2
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	db05      	blt.n	800db6c <__hi0bits+0x3c>
 800db60:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800db64:	f100 0001 	add.w	r0, r0, #1
 800db68:	bf08      	it	eq
 800db6a:	2020      	moveq	r0, #32
 800db6c:	4770      	bx	lr

0800db6e <__lo0bits>:
 800db6e:	6803      	ldr	r3, [r0, #0]
 800db70:	4602      	mov	r2, r0
 800db72:	f013 0007 	ands.w	r0, r3, #7
 800db76:	d00b      	beq.n	800db90 <__lo0bits+0x22>
 800db78:	07d9      	lsls	r1, r3, #31
 800db7a:	d421      	bmi.n	800dbc0 <__lo0bits+0x52>
 800db7c:	0798      	lsls	r0, r3, #30
 800db7e:	bf49      	itett	mi
 800db80:	085b      	lsrmi	r3, r3, #1
 800db82:	089b      	lsrpl	r3, r3, #2
 800db84:	2001      	movmi	r0, #1
 800db86:	6013      	strmi	r3, [r2, #0]
 800db88:	bf5c      	itt	pl
 800db8a:	6013      	strpl	r3, [r2, #0]
 800db8c:	2002      	movpl	r0, #2
 800db8e:	4770      	bx	lr
 800db90:	b299      	uxth	r1, r3
 800db92:	b909      	cbnz	r1, 800db98 <__lo0bits+0x2a>
 800db94:	0c1b      	lsrs	r3, r3, #16
 800db96:	2010      	movs	r0, #16
 800db98:	b2d9      	uxtb	r1, r3
 800db9a:	b909      	cbnz	r1, 800dba0 <__lo0bits+0x32>
 800db9c:	3008      	adds	r0, #8
 800db9e:	0a1b      	lsrs	r3, r3, #8
 800dba0:	0719      	lsls	r1, r3, #28
 800dba2:	bf04      	itt	eq
 800dba4:	091b      	lsreq	r3, r3, #4
 800dba6:	3004      	addeq	r0, #4
 800dba8:	0799      	lsls	r1, r3, #30
 800dbaa:	bf04      	itt	eq
 800dbac:	089b      	lsreq	r3, r3, #2
 800dbae:	3002      	addeq	r0, #2
 800dbb0:	07d9      	lsls	r1, r3, #31
 800dbb2:	d403      	bmi.n	800dbbc <__lo0bits+0x4e>
 800dbb4:	085b      	lsrs	r3, r3, #1
 800dbb6:	f100 0001 	add.w	r0, r0, #1
 800dbba:	d003      	beq.n	800dbc4 <__lo0bits+0x56>
 800dbbc:	6013      	str	r3, [r2, #0]
 800dbbe:	4770      	bx	lr
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	4770      	bx	lr
 800dbc4:	2020      	movs	r0, #32
 800dbc6:	4770      	bx	lr

0800dbc8 <__i2b>:
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	460c      	mov	r4, r1
 800dbcc:	2101      	movs	r1, #1
 800dbce:	f7ff febd 	bl	800d94c <_Balloc>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	b928      	cbnz	r0, 800dbe2 <__i2b+0x1a>
 800dbd6:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <__i2b+0x24>)
 800dbd8:	4805      	ldr	r0, [pc, #20]	@ (800dbf0 <__i2b+0x28>)
 800dbda:	f240 1145 	movw	r1, #325	@ 0x145
 800dbde:	f001 fbef 	bl	800f3c0 <__assert_func>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	6144      	str	r4, [r0, #20]
 800dbe6:	6103      	str	r3, [r0, #16]
 800dbe8:	bd10      	pop	{r4, pc}
 800dbea:	bf00      	nop
 800dbec:	0801070d 	.word	0x0801070d
 800dbf0:	0801071e 	.word	0x0801071e

0800dbf4 <__multiply>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	690a      	ldr	r2, [r1, #16]
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	bfa8      	it	ge
 800dc02:	4623      	movge	r3, r4
 800dc04:	460f      	mov	r7, r1
 800dc06:	bfa4      	itt	ge
 800dc08:	460c      	movge	r4, r1
 800dc0a:	461f      	movge	r7, r3
 800dc0c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800dc10:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800dc14:	68a3      	ldr	r3, [r4, #8]
 800dc16:	6861      	ldr	r1, [r4, #4]
 800dc18:	eb0a 0609 	add.w	r6, sl, r9
 800dc1c:	42b3      	cmp	r3, r6
 800dc1e:	b085      	sub	sp, #20
 800dc20:	bfb8      	it	lt
 800dc22:	3101      	addlt	r1, #1
 800dc24:	f7ff fe92 	bl	800d94c <_Balloc>
 800dc28:	b930      	cbnz	r0, 800dc38 <__multiply+0x44>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b44      	ldr	r3, [pc, #272]	@ (800dd40 <__multiply+0x14c>)
 800dc2e:	4845      	ldr	r0, [pc, #276]	@ (800dd44 <__multiply+0x150>)
 800dc30:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800dc34:	f001 fbc4 	bl	800f3c0 <__assert_func>
 800dc38:	f100 0514 	add.w	r5, r0, #20
 800dc3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc40:	462b      	mov	r3, r5
 800dc42:	2200      	movs	r2, #0
 800dc44:	4543      	cmp	r3, r8
 800dc46:	d321      	bcc.n	800dc8c <__multiply+0x98>
 800dc48:	f107 0114 	add.w	r1, r7, #20
 800dc4c:	f104 0214 	add.w	r2, r4, #20
 800dc50:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800dc54:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800dc58:	9302      	str	r3, [sp, #8]
 800dc5a:	1b13      	subs	r3, r2, r4
 800dc5c:	3b15      	subs	r3, #21
 800dc5e:	f023 0303 	bic.w	r3, r3, #3
 800dc62:	3304      	adds	r3, #4
 800dc64:	f104 0715 	add.w	r7, r4, #21
 800dc68:	42ba      	cmp	r2, r7
 800dc6a:	bf38      	it	cc
 800dc6c:	2304      	movcc	r3, #4
 800dc6e:	9301      	str	r3, [sp, #4]
 800dc70:	9b02      	ldr	r3, [sp, #8]
 800dc72:	9103      	str	r1, [sp, #12]
 800dc74:	428b      	cmp	r3, r1
 800dc76:	d80c      	bhi.n	800dc92 <__multiply+0x9e>
 800dc78:	2e00      	cmp	r6, #0
 800dc7a:	dd03      	ble.n	800dc84 <__multiply+0x90>
 800dc7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d05b      	beq.n	800dd3c <__multiply+0x148>
 800dc84:	6106      	str	r6, [r0, #16]
 800dc86:	b005      	add	sp, #20
 800dc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc8c:	f843 2b04 	str.w	r2, [r3], #4
 800dc90:	e7d8      	b.n	800dc44 <__multiply+0x50>
 800dc92:	f8b1 a000 	ldrh.w	sl, [r1]
 800dc96:	f1ba 0f00 	cmp.w	sl, #0
 800dc9a:	d024      	beq.n	800dce6 <__multiply+0xf2>
 800dc9c:	f104 0e14 	add.w	lr, r4, #20
 800dca0:	46a9      	mov	r9, r5
 800dca2:	f04f 0c00 	mov.w	ip, #0
 800dca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dcaa:	f8d9 3000 	ldr.w	r3, [r9]
 800dcae:	fa1f fb87 	uxth.w	fp, r7
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dcb8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dcbc:	f8d9 7000 	ldr.w	r7, [r9]
 800dcc0:	4463      	add	r3, ip
 800dcc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dcc6:	fb0a c70b 	mla	r7, sl, fp, ip
 800dcca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dcd4:	4572      	cmp	r2, lr
 800dcd6:	f849 3b04 	str.w	r3, [r9], #4
 800dcda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dcde:	d8e2      	bhi.n	800dca6 <__multiply+0xb2>
 800dce0:	9b01      	ldr	r3, [sp, #4]
 800dce2:	f845 c003 	str.w	ip, [r5, r3]
 800dce6:	9b03      	ldr	r3, [sp, #12]
 800dce8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dcec:	3104      	adds	r1, #4
 800dcee:	f1b9 0f00 	cmp.w	r9, #0
 800dcf2:	d021      	beq.n	800dd38 <__multiply+0x144>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	f104 0c14 	add.w	ip, r4, #20
 800dcfa:	46ae      	mov	lr, r5
 800dcfc:	f04f 0a00 	mov.w	sl, #0
 800dd00:	f8bc b000 	ldrh.w	fp, [ip]
 800dd04:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dd08:	fb09 770b 	mla	r7, r9, fp, r7
 800dd0c:	4457      	add	r7, sl
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dd14:	f84e 3b04 	str.w	r3, [lr], #4
 800dd18:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dd1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd20:	f8be 3000 	ldrh.w	r3, [lr]
 800dd24:	fb09 330a 	mla	r3, r9, sl, r3
 800dd28:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dd2c:	4562      	cmp	r2, ip
 800dd2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd32:	d8e5      	bhi.n	800dd00 <__multiply+0x10c>
 800dd34:	9f01      	ldr	r7, [sp, #4]
 800dd36:	51eb      	str	r3, [r5, r7]
 800dd38:	3504      	adds	r5, #4
 800dd3a:	e799      	b.n	800dc70 <__multiply+0x7c>
 800dd3c:	3e01      	subs	r6, #1
 800dd3e:	e79b      	b.n	800dc78 <__multiply+0x84>
 800dd40:	0801070d 	.word	0x0801070d
 800dd44:	0801071e 	.word	0x0801071e

0800dd48 <__pow5mult>:
 800dd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd4c:	4615      	mov	r5, r2
 800dd4e:	f012 0203 	ands.w	r2, r2, #3
 800dd52:	4607      	mov	r7, r0
 800dd54:	460e      	mov	r6, r1
 800dd56:	d007      	beq.n	800dd68 <__pow5mult+0x20>
 800dd58:	4c25      	ldr	r4, [pc, #148]	@ (800ddf0 <__pow5mult+0xa8>)
 800dd5a:	3a01      	subs	r2, #1
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd62:	f7ff fe55 	bl	800da10 <__multadd>
 800dd66:	4606      	mov	r6, r0
 800dd68:	10ad      	asrs	r5, r5, #2
 800dd6a:	d03d      	beq.n	800dde8 <__pow5mult+0xa0>
 800dd6c:	69fc      	ldr	r4, [r7, #28]
 800dd6e:	b97c      	cbnz	r4, 800dd90 <__pow5mult+0x48>
 800dd70:	2010      	movs	r0, #16
 800dd72:	f7ff fd35 	bl	800d7e0 <malloc>
 800dd76:	4602      	mov	r2, r0
 800dd78:	61f8      	str	r0, [r7, #28]
 800dd7a:	b928      	cbnz	r0, 800dd88 <__pow5mult+0x40>
 800dd7c:	4b1d      	ldr	r3, [pc, #116]	@ (800ddf4 <__pow5mult+0xac>)
 800dd7e:	481e      	ldr	r0, [pc, #120]	@ (800ddf8 <__pow5mult+0xb0>)
 800dd80:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dd84:	f001 fb1c 	bl	800f3c0 <__assert_func>
 800dd88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd8c:	6004      	str	r4, [r0, #0]
 800dd8e:	60c4      	str	r4, [r0, #12]
 800dd90:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dd94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd98:	b94c      	cbnz	r4, 800ddae <__pow5mult+0x66>
 800dd9a:	f240 2171 	movw	r1, #625	@ 0x271
 800dd9e:	4638      	mov	r0, r7
 800dda0:	f7ff ff12 	bl	800dbc8 <__i2b>
 800dda4:	2300      	movs	r3, #0
 800dda6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddaa:	4604      	mov	r4, r0
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	f04f 0900 	mov.w	r9, #0
 800ddb2:	07eb      	lsls	r3, r5, #31
 800ddb4:	d50a      	bpl.n	800ddcc <__pow5mult+0x84>
 800ddb6:	4631      	mov	r1, r6
 800ddb8:	4622      	mov	r2, r4
 800ddba:	4638      	mov	r0, r7
 800ddbc:	f7ff ff1a 	bl	800dbf4 <__multiply>
 800ddc0:	4631      	mov	r1, r6
 800ddc2:	4680      	mov	r8, r0
 800ddc4:	4638      	mov	r0, r7
 800ddc6:	f7ff fe01 	bl	800d9cc <_Bfree>
 800ddca:	4646      	mov	r6, r8
 800ddcc:	106d      	asrs	r5, r5, #1
 800ddce:	d00b      	beq.n	800dde8 <__pow5mult+0xa0>
 800ddd0:	6820      	ldr	r0, [r4, #0]
 800ddd2:	b938      	cbnz	r0, 800dde4 <__pow5mult+0x9c>
 800ddd4:	4622      	mov	r2, r4
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	4638      	mov	r0, r7
 800ddda:	f7ff ff0b 	bl	800dbf4 <__multiply>
 800ddde:	6020      	str	r0, [r4, #0]
 800dde0:	f8c0 9000 	str.w	r9, [r0]
 800dde4:	4604      	mov	r4, r0
 800dde6:	e7e4      	b.n	800ddb2 <__pow5mult+0x6a>
 800dde8:	4630      	mov	r0, r6
 800ddea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddee:	bf00      	nop
 800ddf0:	08010778 	.word	0x08010778
 800ddf4:	0801069e 	.word	0x0801069e
 800ddf8:	0801071e 	.word	0x0801071e

0800ddfc <__lshift>:
 800ddfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de00:	460c      	mov	r4, r1
 800de02:	6849      	ldr	r1, [r1, #4]
 800de04:	6923      	ldr	r3, [r4, #16]
 800de06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de0a:	68a3      	ldr	r3, [r4, #8]
 800de0c:	4607      	mov	r7, r0
 800de0e:	4691      	mov	r9, r2
 800de10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de14:	f108 0601 	add.w	r6, r8, #1
 800de18:	42b3      	cmp	r3, r6
 800de1a:	db0b      	blt.n	800de34 <__lshift+0x38>
 800de1c:	4638      	mov	r0, r7
 800de1e:	f7ff fd95 	bl	800d94c <_Balloc>
 800de22:	4605      	mov	r5, r0
 800de24:	b948      	cbnz	r0, 800de3a <__lshift+0x3e>
 800de26:	4602      	mov	r2, r0
 800de28:	4b28      	ldr	r3, [pc, #160]	@ (800decc <__lshift+0xd0>)
 800de2a:	4829      	ldr	r0, [pc, #164]	@ (800ded0 <__lshift+0xd4>)
 800de2c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800de30:	f001 fac6 	bl	800f3c0 <__assert_func>
 800de34:	3101      	adds	r1, #1
 800de36:	005b      	lsls	r3, r3, #1
 800de38:	e7ee      	b.n	800de18 <__lshift+0x1c>
 800de3a:	2300      	movs	r3, #0
 800de3c:	f100 0114 	add.w	r1, r0, #20
 800de40:	f100 0210 	add.w	r2, r0, #16
 800de44:	4618      	mov	r0, r3
 800de46:	4553      	cmp	r3, sl
 800de48:	db33      	blt.n	800deb2 <__lshift+0xb6>
 800de4a:	6920      	ldr	r0, [r4, #16]
 800de4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de50:	f104 0314 	add.w	r3, r4, #20
 800de54:	f019 091f 	ands.w	r9, r9, #31
 800de58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de60:	d02b      	beq.n	800deba <__lshift+0xbe>
 800de62:	f1c9 0e20 	rsb	lr, r9, #32
 800de66:	468a      	mov	sl, r1
 800de68:	2200      	movs	r2, #0
 800de6a:	6818      	ldr	r0, [r3, #0]
 800de6c:	fa00 f009 	lsl.w	r0, r0, r9
 800de70:	4310      	orrs	r0, r2
 800de72:	f84a 0b04 	str.w	r0, [sl], #4
 800de76:	f853 2b04 	ldr.w	r2, [r3], #4
 800de7a:	459c      	cmp	ip, r3
 800de7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800de80:	d8f3      	bhi.n	800de6a <__lshift+0x6e>
 800de82:	ebac 0304 	sub.w	r3, ip, r4
 800de86:	3b15      	subs	r3, #21
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	3304      	adds	r3, #4
 800de8e:	f104 0015 	add.w	r0, r4, #21
 800de92:	4584      	cmp	ip, r0
 800de94:	bf38      	it	cc
 800de96:	2304      	movcc	r3, #4
 800de98:	50ca      	str	r2, [r1, r3]
 800de9a:	b10a      	cbz	r2, 800dea0 <__lshift+0xa4>
 800de9c:	f108 0602 	add.w	r6, r8, #2
 800dea0:	3e01      	subs	r6, #1
 800dea2:	4638      	mov	r0, r7
 800dea4:	612e      	str	r6, [r5, #16]
 800dea6:	4621      	mov	r1, r4
 800dea8:	f7ff fd90 	bl	800d9cc <_Bfree>
 800deac:	4628      	mov	r0, r5
 800deae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800deb6:	3301      	adds	r3, #1
 800deb8:	e7c5      	b.n	800de46 <__lshift+0x4a>
 800deba:	3904      	subs	r1, #4
 800debc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dec4:	459c      	cmp	ip, r3
 800dec6:	d8f9      	bhi.n	800debc <__lshift+0xc0>
 800dec8:	e7ea      	b.n	800dea0 <__lshift+0xa4>
 800deca:	bf00      	nop
 800decc:	0801070d 	.word	0x0801070d
 800ded0:	0801071e 	.word	0x0801071e

0800ded4 <__mcmp>:
 800ded4:	690a      	ldr	r2, [r1, #16]
 800ded6:	4603      	mov	r3, r0
 800ded8:	6900      	ldr	r0, [r0, #16]
 800deda:	1a80      	subs	r0, r0, r2
 800dedc:	b530      	push	{r4, r5, lr}
 800dede:	d10e      	bne.n	800defe <__mcmp+0x2a>
 800dee0:	3314      	adds	r3, #20
 800dee2:	3114      	adds	r1, #20
 800dee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800deec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800def0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800def4:	4295      	cmp	r5, r2
 800def6:	d003      	beq.n	800df00 <__mcmp+0x2c>
 800def8:	d205      	bcs.n	800df06 <__mcmp+0x32>
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	42a3      	cmp	r3, r4
 800df02:	d3f3      	bcc.n	800deec <__mcmp+0x18>
 800df04:	e7fb      	b.n	800defe <__mcmp+0x2a>
 800df06:	2001      	movs	r0, #1
 800df08:	e7f9      	b.n	800defe <__mcmp+0x2a>
	...

0800df0c <__mdiff>:
 800df0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df10:	4689      	mov	r9, r1
 800df12:	4606      	mov	r6, r0
 800df14:	4611      	mov	r1, r2
 800df16:	4648      	mov	r0, r9
 800df18:	4614      	mov	r4, r2
 800df1a:	f7ff ffdb 	bl	800ded4 <__mcmp>
 800df1e:	1e05      	subs	r5, r0, #0
 800df20:	d112      	bne.n	800df48 <__mdiff+0x3c>
 800df22:	4629      	mov	r1, r5
 800df24:	4630      	mov	r0, r6
 800df26:	f7ff fd11 	bl	800d94c <_Balloc>
 800df2a:	4602      	mov	r2, r0
 800df2c:	b928      	cbnz	r0, 800df3a <__mdiff+0x2e>
 800df2e:	4b3f      	ldr	r3, [pc, #252]	@ (800e02c <__mdiff+0x120>)
 800df30:	f240 2137 	movw	r1, #567	@ 0x237
 800df34:	483e      	ldr	r0, [pc, #248]	@ (800e030 <__mdiff+0x124>)
 800df36:	f001 fa43 	bl	800f3c0 <__assert_func>
 800df3a:	2301      	movs	r3, #1
 800df3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df40:	4610      	mov	r0, r2
 800df42:	b003      	add	sp, #12
 800df44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df48:	bfbc      	itt	lt
 800df4a:	464b      	movlt	r3, r9
 800df4c:	46a1      	movlt	r9, r4
 800df4e:	4630      	mov	r0, r6
 800df50:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800df54:	bfba      	itte	lt
 800df56:	461c      	movlt	r4, r3
 800df58:	2501      	movlt	r5, #1
 800df5a:	2500      	movge	r5, #0
 800df5c:	f7ff fcf6 	bl	800d94c <_Balloc>
 800df60:	4602      	mov	r2, r0
 800df62:	b918      	cbnz	r0, 800df6c <__mdiff+0x60>
 800df64:	4b31      	ldr	r3, [pc, #196]	@ (800e02c <__mdiff+0x120>)
 800df66:	f240 2145 	movw	r1, #581	@ 0x245
 800df6a:	e7e3      	b.n	800df34 <__mdiff+0x28>
 800df6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800df70:	6926      	ldr	r6, [r4, #16]
 800df72:	60c5      	str	r5, [r0, #12]
 800df74:	f109 0310 	add.w	r3, r9, #16
 800df78:	f109 0514 	add.w	r5, r9, #20
 800df7c:	f104 0e14 	add.w	lr, r4, #20
 800df80:	f100 0b14 	add.w	fp, r0, #20
 800df84:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800df88:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	46d9      	mov	r9, fp
 800df90:	f04f 0c00 	mov.w	ip, #0
 800df94:	9b01      	ldr	r3, [sp, #4]
 800df96:	f85e 0b04 	ldr.w	r0, [lr], #4
 800df9a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	fa1f f38a 	uxth.w	r3, sl
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	b283      	uxth	r3, r0
 800dfa8:	1acb      	subs	r3, r1, r3
 800dfaa:	0c00      	lsrs	r0, r0, #16
 800dfac:	4463      	add	r3, ip
 800dfae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dfb2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dfbc:	4576      	cmp	r6, lr
 800dfbe:	f849 3b04 	str.w	r3, [r9], #4
 800dfc2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dfc6:	d8e5      	bhi.n	800df94 <__mdiff+0x88>
 800dfc8:	1b33      	subs	r3, r6, r4
 800dfca:	3b15      	subs	r3, #21
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3415      	adds	r4, #21
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	42a6      	cmp	r6, r4
 800dfd6:	bf38      	it	cc
 800dfd8:	2304      	movcc	r3, #4
 800dfda:	441d      	add	r5, r3
 800dfdc:	445b      	add	r3, fp
 800dfde:	461e      	mov	r6, r3
 800dfe0:	462c      	mov	r4, r5
 800dfe2:	4544      	cmp	r4, r8
 800dfe4:	d30e      	bcc.n	800e004 <__mdiff+0xf8>
 800dfe6:	f108 0103 	add.w	r1, r8, #3
 800dfea:	1b49      	subs	r1, r1, r5
 800dfec:	f021 0103 	bic.w	r1, r1, #3
 800dff0:	3d03      	subs	r5, #3
 800dff2:	45a8      	cmp	r8, r5
 800dff4:	bf38      	it	cc
 800dff6:	2100      	movcc	r1, #0
 800dff8:	440b      	add	r3, r1
 800dffa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dffe:	b191      	cbz	r1, 800e026 <__mdiff+0x11a>
 800e000:	6117      	str	r7, [r2, #16]
 800e002:	e79d      	b.n	800df40 <__mdiff+0x34>
 800e004:	f854 1b04 	ldr.w	r1, [r4], #4
 800e008:	46e6      	mov	lr, ip
 800e00a:	0c08      	lsrs	r0, r1, #16
 800e00c:	fa1c fc81 	uxtah	ip, ip, r1
 800e010:	4471      	add	r1, lr
 800e012:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e016:	b289      	uxth	r1, r1
 800e018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e01c:	f846 1b04 	str.w	r1, [r6], #4
 800e020:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e024:	e7dd      	b.n	800dfe2 <__mdiff+0xd6>
 800e026:	3f01      	subs	r7, #1
 800e028:	e7e7      	b.n	800dffa <__mdiff+0xee>
 800e02a:	bf00      	nop
 800e02c:	0801070d 	.word	0x0801070d
 800e030:	0801071e 	.word	0x0801071e

0800e034 <__ulp>:
 800e034:	b082      	sub	sp, #8
 800e036:	ed8d 0b00 	vstr	d0, [sp]
 800e03a:	9a01      	ldr	r2, [sp, #4]
 800e03c:	4b0f      	ldr	r3, [pc, #60]	@ (800e07c <__ulp+0x48>)
 800e03e:	4013      	ands	r3, r2
 800e040:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e044:	2b00      	cmp	r3, #0
 800e046:	dc08      	bgt.n	800e05a <__ulp+0x26>
 800e048:	425b      	negs	r3, r3
 800e04a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e04e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e052:	da04      	bge.n	800e05e <__ulp+0x2a>
 800e054:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e058:	4113      	asrs	r3, r2
 800e05a:	2200      	movs	r2, #0
 800e05c:	e008      	b.n	800e070 <__ulp+0x3c>
 800e05e:	f1a2 0314 	sub.w	r3, r2, #20
 800e062:	2b1e      	cmp	r3, #30
 800e064:	bfda      	itte	le
 800e066:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e06a:	40da      	lsrle	r2, r3
 800e06c:	2201      	movgt	r2, #1
 800e06e:	2300      	movs	r3, #0
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	ec41 0b10 	vmov	d0, r0, r1
 800e078:	b002      	add	sp, #8
 800e07a:	4770      	bx	lr
 800e07c:	7ff00000 	.word	0x7ff00000

0800e080 <__b2d>:
 800e080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e084:	6906      	ldr	r6, [r0, #16]
 800e086:	f100 0814 	add.w	r8, r0, #20
 800e08a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e08e:	1f37      	subs	r7, r6, #4
 800e090:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e094:	4610      	mov	r0, r2
 800e096:	f7ff fd4b 	bl	800db30 <__hi0bits>
 800e09a:	f1c0 0320 	rsb	r3, r0, #32
 800e09e:	280a      	cmp	r0, #10
 800e0a0:	600b      	str	r3, [r1, #0]
 800e0a2:	491b      	ldr	r1, [pc, #108]	@ (800e110 <__b2d+0x90>)
 800e0a4:	dc15      	bgt.n	800e0d2 <__b2d+0x52>
 800e0a6:	f1c0 0c0b 	rsb	ip, r0, #11
 800e0aa:	fa22 f30c 	lsr.w	r3, r2, ip
 800e0ae:	45b8      	cmp	r8, r7
 800e0b0:	ea43 0501 	orr.w	r5, r3, r1
 800e0b4:	bf34      	ite	cc
 800e0b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0ba:	2300      	movcs	r3, #0
 800e0bc:	3015      	adds	r0, #21
 800e0be:	fa02 f000 	lsl.w	r0, r2, r0
 800e0c2:	fa23 f30c 	lsr.w	r3, r3, ip
 800e0c6:	4303      	orrs	r3, r0
 800e0c8:	461c      	mov	r4, r3
 800e0ca:	ec45 4b10 	vmov	d0, r4, r5
 800e0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d2:	45b8      	cmp	r8, r7
 800e0d4:	bf3a      	itte	cc
 800e0d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e0da:	f1a6 0708 	subcc.w	r7, r6, #8
 800e0de:	2300      	movcs	r3, #0
 800e0e0:	380b      	subs	r0, #11
 800e0e2:	d012      	beq.n	800e10a <__b2d+0x8a>
 800e0e4:	f1c0 0120 	rsb	r1, r0, #32
 800e0e8:	fa23 f401 	lsr.w	r4, r3, r1
 800e0ec:	4082      	lsls	r2, r0
 800e0ee:	4322      	orrs	r2, r4
 800e0f0:	4547      	cmp	r7, r8
 800e0f2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e0f6:	bf8c      	ite	hi
 800e0f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e0fc:	2200      	movls	r2, #0
 800e0fe:	4083      	lsls	r3, r0
 800e100:	40ca      	lsrs	r2, r1
 800e102:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e106:	4313      	orrs	r3, r2
 800e108:	e7de      	b.n	800e0c8 <__b2d+0x48>
 800e10a:	ea42 0501 	orr.w	r5, r2, r1
 800e10e:	e7db      	b.n	800e0c8 <__b2d+0x48>
 800e110:	3ff00000 	.word	0x3ff00000

0800e114 <__d2b>:
 800e114:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e118:	460f      	mov	r7, r1
 800e11a:	2101      	movs	r1, #1
 800e11c:	ec59 8b10 	vmov	r8, r9, d0
 800e120:	4616      	mov	r6, r2
 800e122:	f7ff fc13 	bl	800d94c <_Balloc>
 800e126:	4604      	mov	r4, r0
 800e128:	b930      	cbnz	r0, 800e138 <__d2b+0x24>
 800e12a:	4602      	mov	r2, r0
 800e12c:	4b23      	ldr	r3, [pc, #140]	@ (800e1bc <__d2b+0xa8>)
 800e12e:	4824      	ldr	r0, [pc, #144]	@ (800e1c0 <__d2b+0xac>)
 800e130:	f240 310f 	movw	r1, #783	@ 0x30f
 800e134:	f001 f944 	bl	800f3c0 <__assert_func>
 800e138:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e13c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e140:	b10d      	cbz	r5, 800e146 <__d2b+0x32>
 800e142:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	f1b8 0300 	subs.w	r3, r8, #0
 800e14c:	d023      	beq.n	800e196 <__d2b+0x82>
 800e14e:	4668      	mov	r0, sp
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	f7ff fd0c 	bl	800db6e <__lo0bits>
 800e156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e15a:	b1d0      	cbz	r0, 800e192 <__d2b+0x7e>
 800e15c:	f1c0 0320 	rsb	r3, r0, #32
 800e160:	fa02 f303 	lsl.w	r3, r2, r3
 800e164:	430b      	orrs	r3, r1
 800e166:	40c2      	lsrs	r2, r0
 800e168:	6163      	str	r3, [r4, #20]
 800e16a:	9201      	str	r2, [sp, #4]
 800e16c:	9b01      	ldr	r3, [sp, #4]
 800e16e:	61a3      	str	r3, [r4, #24]
 800e170:	2b00      	cmp	r3, #0
 800e172:	bf0c      	ite	eq
 800e174:	2201      	moveq	r2, #1
 800e176:	2202      	movne	r2, #2
 800e178:	6122      	str	r2, [r4, #16]
 800e17a:	b1a5      	cbz	r5, 800e1a6 <__d2b+0x92>
 800e17c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e180:	4405      	add	r5, r0
 800e182:	603d      	str	r5, [r7, #0]
 800e184:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e188:	6030      	str	r0, [r6, #0]
 800e18a:	4620      	mov	r0, r4
 800e18c:	b003      	add	sp, #12
 800e18e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e192:	6161      	str	r1, [r4, #20]
 800e194:	e7ea      	b.n	800e16c <__d2b+0x58>
 800e196:	a801      	add	r0, sp, #4
 800e198:	f7ff fce9 	bl	800db6e <__lo0bits>
 800e19c:	9b01      	ldr	r3, [sp, #4]
 800e19e:	6163      	str	r3, [r4, #20]
 800e1a0:	3020      	adds	r0, #32
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	e7e8      	b.n	800e178 <__d2b+0x64>
 800e1a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e1ae:	6038      	str	r0, [r7, #0]
 800e1b0:	6918      	ldr	r0, [r3, #16]
 800e1b2:	f7ff fcbd 	bl	800db30 <__hi0bits>
 800e1b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1ba:	e7e5      	b.n	800e188 <__d2b+0x74>
 800e1bc:	0801070d 	.word	0x0801070d
 800e1c0:	0801071e 	.word	0x0801071e

0800e1c4 <__ratio>:
 800e1c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	4688      	mov	r8, r1
 800e1ca:	4669      	mov	r1, sp
 800e1cc:	4681      	mov	r9, r0
 800e1ce:	f7ff ff57 	bl	800e080 <__b2d>
 800e1d2:	a901      	add	r1, sp, #4
 800e1d4:	4640      	mov	r0, r8
 800e1d6:	ec55 4b10 	vmov	r4, r5, d0
 800e1da:	f7ff ff51 	bl	800e080 <__b2d>
 800e1de:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e1e2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800e1e6:	1ad2      	subs	r2, r2, r3
 800e1e8:	e9dd 3100 	ldrd	r3, r1, [sp]
 800e1ec:	1a5b      	subs	r3, r3, r1
 800e1ee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800e1f2:	ec57 6b10 	vmov	r6, r7, d0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	bfd6      	itet	le
 800e1fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e1fe:	462a      	movgt	r2, r5
 800e200:	463a      	movle	r2, r7
 800e202:	46ab      	mov	fp, r5
 800e204:	46a2      	mov	sl, r4
 800e206:	bfce      	itee	gt
 800e208:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800e20c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800e210:	ee00 3a90 	vmovle	s1, r3
 800e214:	ec4b ab17 	vmov	d7, sl, fp
 800e218:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800e21c:	b003      	add	sp, #12
 800e21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e222 <__copybits>:
 800e222:	3901      	subs	r1, #1
 800e224:	b570      	push	{r4, r5, r6, lr}
 800e226:	1149      	asrs	r1, r1, #5
 800e228:	6914      	ldr	r4, [r2, #16]
 800e22a:	3101      	adds	r1, #1
 800e22c:	f102 0314 	add.w	r3, r2, #20
 800e230:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e234:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e238:	1f05      	subs	r5, r0, #4
 800e23a:	42a3      	cmp	r3, r4
 800e23c:	d30c      	bcc.n	800e258 <__copybits+0x36>
 800e23e:	1aa3      	subs	r3, r4, r2
 800e240:	3b11      	subs	r3, #17
 800e242:	f023 0303 	bic.w	r3, r3, #3
 800e246:	3211      	adds	r2, #17
 800e248:	42a2      	cmp	r2, r4
 800e24a:	bf88      	it	hi
 800e24c:	2300      	movhi	r3, #0
 800e24e:	4418      	add	r0, r3
 800e250:	2300      	movs	r3, #0
 800e252:	4288      	cmp	r0, r1
 800e254:	d305      	bcc.n	800e262 <__copybits+0x40>
 800e256:	bd70      	pop	{r4, r5, r6, pc}
 800e258:	f853 6b04 	ldr.w	r6, [r3], #4
 800e25c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e260:	e7eb      	b.n	800e23a <__copybits+0x18>
 800e262:	f840 3b04 	str.w	r3, [r0], #4
 800e266:	e7f4      	b.n	800e252 <__copybits+0x30>

0800e268 <__any_on>:
 800e268:	f100 0214 	add.w	r2, r0, #20
 800e26c:	6900      	ldr	r0, [r0, #16]
 800e26e:	114b      	asrs	r3, r1, #5
 800e270:	4298      	cmp	r0, r3
 800e272:	b510      	push	{r4, lr}
 800e274:	db11      	blt.n	800e29a <__any_on+0x32>
 800e276:	dd0a      	ble.n	800e28e <__any_on+0x26>
 800e278:	f011 011f 	ands.w	r1, r1, #31
 800e27c:	d007      	beq.n	800e28e <__any_on+0x26>
 800e27e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e282:	fa24 f001 	lsr.w	r0, r4, r1
 800e286:	fa00 f101 	lsl.w	r1, r0, r1
 800e28a:	428c      	cmp	r4, r1
 800e28c:	d10b      	bne.n	800e2a6 <__any_on+0x3e>
 800e28e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e292:	4293      	cmp	r3, r2
 800e294:	d803      	bhi.n	800e29e <__any_on+0x36>
 800e296:	2000      	movs	r0, #0
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	4603      	mov	r3, r0
 800e29c:	e7f7      	b.n	800e28e <__any_on+0x26>
 800e29e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2a2:	2900      	cmp	r1, #0
 800e2a4:	d0f5      	beq.n	800e292 <__any_on+0x2a>
 800e2a6:	2001      	movs	r0, #1
 800e2a8:	e7f6      	b.n	800e298 <__any_on+0x30>

0800e2aa <sulp>:
 800e2aa:	b570      	push	{r4, r5, r6, lr}
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	4616      	mov	r6, r2
 800e2b2:	ec45 4b10 	vmov	d0, r4, r5
 800e2b6:	f7ff febd 	bl	800e034 <__ulp>
 800e2ba:	b17e      	cbz	r6, 800e2dc <sulp+0x32>
 800e2bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e2c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dd09      	ble.n	800e2dc <sulp+0x32>
 800e2c8:	051b      	lsls	r3, r3, #20
 800e2ca:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800e2d4:	ec41 0b17 	vmov	d7, r0, r1
 800e2d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e2dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e2e0 <_strtod_l>:
 800e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e4:	ed2d 8b0a 	vpush	{d8-d12}
 800e2e8:	b097      	sub	sp, #92	@ 0x5c
 800e2ea:	4688      	mov	r8, r1
 800e2ec:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	9212      	str	r2, [sp, #72]	@ 0x48
 800e2f2:	9005      	str	r0, [sp, #20]
 800e2f4:	f04f 0a00 	mov.w	sl, #0
 800e2f8:	f04f 0b00 	mov.w	fp, #0
 800e2fc:	460a      	mov	r2, r1
 800e2fe:	9211      	str	r2, [sp, #68]	@ 0x44
 800e300:	7811      	ldrb	r1, [r2, #0]
 800e302:	292b      	cmp	r1, #43	@ 0x2b
 800e304:	d04c      	beq.n	800e3a0 <_strtod_l+0xc0>
 800e306:	d839      	bhi.n	800e37c <_strtod_l+0x9c>
 800e308:	290d      	cmp	r1, #13
 800e30a:	d833      	bhi.n	800e374 <_strtod_l+0x94>
 800e30c:	2908      	cmp	r1, #8
 800e30e:	d833      	bhi.n	800e378 <_strtod_l+0x98>
 800e310:	2900      	cmp	r1, #0
 800e312:	d03c      	beq.n	800e38e <_strtod_l+0xae>
 800e314:	2200      	movs	r2, #0
 800e316:	9208      	str	r2, [sp, #32]
 800e318:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800e31a:	782a      	ldrb	r2, [r5, #0]
 800e31c:	2a30      	cmp	r2, #48	@ 0x30
 800e31e:	f040 80b5 	bne.w	800e48c <_strtod_l+0x1ac>
 800e322:	786a      	ldrb	r2, [r5, #1]
 800e324:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e328:	2a58      	cmp	r2, #88	@ 0x58
 800e32a:	d170      	bne.n	800e40e <_strtod_l+0x12e>
 800e32c:	9302      	str	r3, [sp, #8]
 800e32e:	9b08      	ldr	r3, [sp, #32]
 800e330:	9301      	str	r3, [sp, #4]
 800e332:	ab12      	add	r3, sp, #72	@ 0x48
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	4a8b      	ldr	r2, [pc, #556]	@ (800e564 <_strtod_l+0x284>)
 800e338:	9805      	ldr	r0, [sp, #20]
 800e33a:	ab13      	add	r3, sp, #76	@ 0x4c
 800e33c:	a911      	add	r1, sp, #68	@ 0x44
 800e33e:	f001 f8d9 	bl	800f4f4 <__gethex>
 800e342:	f010 060f 	ands.w	r6, r0, #15
 800e346:	4604      	mov	r4, r0
 800e348:	d005      	beq.n	800e356 <_strtod_l+0x76>
 800e34a:	2e06      	cmp	r6, #6
 800e34c:	d12a      	bne.n	800e3a4 <_strtod_l+0xc4>
 800e34e:	3501      	adds	r5, #1
 800e350:	2300      	movs	r3, #0
 800e352:	9511      	str	r5, [sp, #68]	@ 0x44
 800e354:	9308      	str	r3, [sp, #32]
 800e356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e358:	2b00      	cmp	r3, #0
 800e35a:	f040 852f 	bne.w	800edbc <_strtod_l+0xadc>
 800e35e:	9b08      	ldr	r3, [sp, #32]
 800e360:	ec4b ab10 	vmov	d0, sl, fp
 800e364:	b1cb      	cbz	r3, 800e39a <_strtod_l+0xba>
 800e366:	eeb1 0b40 	vneg.f64	d0, d0
 800e36a:	b017      	add	sp, #92	@ 0x5c
 800e36c:	ecbd 8b0a 	vpop	{d8-d12}
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	2920      	cmp	r1, #32
 800e376:	d1cd      	bne.n	800e314 <_strtod_l+0x34>
 800e378:	3201      	adds	r2, #1
 800e37a:	e7c0      	b.n	800e2fe <_strtod_l+0x1e>
 800e37c:	292d      	cmp	r1, #45	@ 0x2d
 800e37e:	d1c9      	bne.n	800e314 <_strtod_l+0x34>
 800e380:	2101      	movs	r1, #1
 800e382:	9108      	str	r1, [sp, #32]
 800e384:	1c51      	adds	r1, r2, #1
 800e386:	9111      	str	r1, [sp, #68]	@ 0x44
 800e388:	7852      	ldrb	r2, [r2, #1]
 800e38a:	2a00      	cmp	r2, #0
 800e38c:	d1c4      	bne.n	800e318 <_strtod_l+0x38>
 800e38e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e390:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e394:	2b00      	cmp	r3, #0
 800e396:	f040 850f 	bne.w	800edb8 <_strtod_l+0xad8>
 800e39a:	ec4b ab10 	vmov	d0, sl, fp
 800e39e:	e7e4      	b.n	800e36a <_strtod_l+0x8a>
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	e7ee      	b.n	800e382 <_strtod_l+0xa2>
 800e3a4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e3a6:	b13a      	cbz	r2, 800e3b8 <_strtod_l+0xd8>
 800e3a8:	2135      	movs	r1, #53	@ 0x35
 800e3aa:	a814      	add	r0, sp, #80	@ 0x50
 800e3ac:	f7ff ff39 	bl	800e222 <__copybits>
 800e3b0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e3b2:	9805      	ldr	r0, [sp, #20]
 800e3b4:	f7ff fb0a 	bl	800d9cc <_Bfree>
 800e3b8:	1e73      	subs	r3, r6, #1
 800e3ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d806      	bhi.n	800e3ce <_strtod_l+0xee>
 800e3c0:	e8df f003 	tbb	[pc, r3]
 800e3c4:	201d0314 	.word	0x201d0314
 800e3c8:	14          	.byte	0x14
 800e3c9:	00          	.byte	0x00
 800e3ca:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800e3ce:	05e3      	lsls	r3, r4, #23
 800e3d0:	bf48      	it	mi
 800e3d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e3d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e3da:	0d1b      	lsrs	r3, r3, #20
 800e3dc:	051b      	lsls	r3, r3, #20
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d1b9      	bne.n	800e356 <_strtod_l+0x76>
 800e3e2:	f7fe fba1 	bl	800cb28 <__errno>
 800e3e6:	2322      	movs	r3, #34	@ 0x22
 800e3e8:	6003      	str	r3, [r0, #0]
 800e3ea:	e7b4      	b.n	800e356 <_strtod_l+0x76>
 800e3ec:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800e3f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e3f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e3f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e3fc:	e7e7      	b.n	800e3ce <_strtod_l+0xee>
 800e3fe:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800e56c <_strtod_l+0x28c>
 800e402:	e7e4      	b.n	800e3ce <_strtod_l+0xee>
 800e404:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e408:	f04f 3aff 	mov.w	sl, #4294967295
 800e40c:	e7df      	b.n	800e3ce <_strtod_l+0xee>
 800e40e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	9211      	str	r2, [sp, #68]	@ 0x44
 800e414:	785b      	ldrb	r3, [r3, #1]
 800e416:	2b30      	cmp	r3, #48	@ 0x30
 800e418:	d0f9      	beq.n	800e40e <_strtod_l+0x12e>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d09b      	beq.n	800e356 <_strtod_l+0x76>
 800e41e:	2301      	movs	r3, #1
 800e420:	2600      	movs	r6, #0
 800e422:	9307      	str	r3, [sp, #28]
 800e424:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e426:	930a      	str	r3, [sp, #40]	@ 0x28
 800e428:	46b1      	mov	r9, r6
 800e42a:	4635      	mov	r5, r6
 800e42c:	220a      	movs	r2, #10
 800e42e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800e430:	7804      	ldrb	r4, [r0, #0]
 800e432:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800e436:	b2d9      	uxtb	r1, r3
 800e438:	2909      	cmp	r1, #9
 800e43a:	d929      	bls.n	800e490 <_strtod_l+0x1b0>
 800e43c:	494a      	ldr	r1, [pc, #296]	@ (800e568 <_strtod_l+0x288>)
 800e43e:	2201      	movs	r2, #1
 800e440:	f000 ff84 	bl	800f34c <strncmp>
 800e444:	b378      	cbz	r0, 800e4a6 <_strtod_l+0x1c6>
 800e446:	2000      	movs	r0, #0
 800e448:	4622      	mov	r2, r4
 800e44a:	462b      	mov	r3, r5
 800e44c:	4607      	mov	r7, r0
 800e44e:	9006      	str	r0, [sp, #24]
 800e450:	2a65      	cmp	r2, #101	@ 0x65
 800e452:	d001      	beq.n	800e458 <_strtod_l+0x178>
 800e454:	2a45      	cmp	r2, #69	@ 0x45
 800e456:	d117      	bne.n	800e488 <_strtod_l+0x1a8>
 800e458:	b91b      	cbnz	r3, 800e462 <_strtod_l+0x182>
 800e45a:	9b07      	ldr	r3, [sp, #28]
 800e45c:	4303      	orrs	r3, r0
 800e45e:	d096      	beq.n	800e38e <_strtod_l+0xae>
 800e460:	2300      	movs	r3, #0
 800e462:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800e466:	f108 0201 	add.w	r2, r8, #1
 800e46a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e46c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e470:	2a2b      	cmp	r2, #43	@ 0x2b
 800e472:	d06b      	beq.n	800e54c <_strtod_l+0x26c>
 800e474:	2a2d      	cmp	r2, #45	@ 0x2d
 800e476:	d071      	beq.n	800e55c <_strtod_l+0x27c>
 800e478:	f04f 0e00 	mov.w	lr, #0
 800e47c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e480:	2c09      	cmp	r4, #9
 800e482:	d979      	bls.n	800e578 <_strtod_l+0x298>
 800e484:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800e488:	2400      	movs	r4, #0
 800e48a:	e094      	b.n	800e5b6 <_strtod_l+0x2d6>
 800e48c:	2300      	movs	r3, #0
 800e48e:	e7c7      	b.n	800e420 <_strtod_l+0x140>
 800e490:	2d08      	cmp	r5, #8
 800e492:	f100 0001 	add.w	r0, r0, #1
 800e496:	bfd4      	ite	le
 800e498:	fb02 3909 	mlale	r9, r2, r9, r3
 800e49c:	fb02 3606 	mlagt	r6, r2, r6, r3
 800e4a0:	3501      	adds	r5, #1
 800e4a2:	9011      	str	r0, [sp, #68]	@ 0x44
 800e4a4:	e7c3      	b.n	800e42e <_strtod_l+0x14e>
 800e4a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4ac:	785a      	ldrb	r2, [r3, #1]
 800e4ae:	b375      	cbz	r5, 800e50e <_strtod_l+0x22e>
 800e4b0:	4607      	mov	r7, r0
 800e4b2:	462b      	mov	r3, r5
 800e4b4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e4b8:	2909      	cmp	r1, #9
 800e4ba:	d913      	bls.n	800e4e4 <_strtod_l+0x204>
 800e4bc:	2101      	movs	r1, #1
 800e4be:	9106      	str	r1, [sp, #24]
 800e4c0:	e7c6      	b.n	800e450 <_strtod_l+0x170>
 800e4c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	9211      	str	r2, [sp, #68]	@ 0x44
 800e4c8:	785a      	ldrb	r2, [r3, #1]
 800e4ca:	3001      	adds	r0, #1
 800e4cc:	2a30      	cmp	r2, #48	@ 0x30
 800e4ce:	d0f8      	beq.n	800e4c2 <_strtod_l+0x1e2>
 800e4d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	f200 8476 	bhi.w	800edc6 <_strtod_l+0xae6>
 800e4da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e4dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4de:	4607      	mov	r7, r0
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	3a30      	subs	r2, #48	@ 0x30
 800e4e6:	f100 0101 	add.w	r1, r0, #1
 800e4ea:	d023      	beq.n	800e534 <_strtod_l+0x254>
 800e4ec:	440f      	add	r7, r1
 800e4ee:	eb00 0c03 	add.w	ip, r0, r3
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	240a      	movs	r4, #10
 800e4f6:	4561      	cmp	r1, ip
 800e4f8:	d10b      	bne.n	800e512 <_strtod_l+0x232>
 800e4fa:	1c5c      	adds	r4, r3, #1
 800e4fc:	4403      	add	r3, r0
 800e4fe:	2b08      	cmp	r3, #8
 800e500:	4404      	add	r4, r0
 800e502:	dc11      	bgt.n	800e528 <_strtod_l+0x248>
 800e504:	230a      	movs	r3, #10
 800e506:	fb03 2909 	mla	r9, r3, r9, r2
 800e50a:	2100      	movs	r1, #0
 800e50c:	e013      	b.n	800e536 <_strtod_l+0x256>
 800e50e:	4628      	mov	r0, r5
 800e510:	e7dc      	b.n	800e4cc <_strtod_l+0x1ec>
 800e512:	2908      	cmp	r1, #8
 800e514:	f101 0101 	add.w	r1, r1, #1
 800e518:	dc02      	bgt.n	800e520 <_strtod_l+0x240>
 800e51a:	fb04 f909 	mul.w	r9, r4, r9
 800e51e:	e7ea      	b.n	800e4f6 <_strtod_l+0x216>
 800e520:	2910      	cmp	r1, #16
 800e522:	bfd8      	it	le
 800e524:	4366      	mulle	r6, r4
 800e526:	e7e6      	b.n	800e4f6 <_strtod_l+0x216>
 800e528:	2b0f      	cmp	r3, #15
 800e52a:	dcee      	bgt.n	800e50a <_strtod_l+0x22a>
 800e52c:	230a      	movs	r3, #10
 800e52e:	fb03 2606 	mla	r6, r3, r6, r2
 800e532:	e7ea      	b.n	800e50a <_strtod_l+0x22a>
 800e534:	461c      	mov	r4, r3
 800e536:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e538:	1c5a      	adds	r2, r3, #1
 800e53a:	9211      	str	r2, [sp, #68]	@ 0x44
 800e53c:	785a      	ldrb	r2, [r3, #1]
 800e53e:	4608      	mov	r0, r1
 800e540:	4623      	mov	r3, r4
 800e542:	e7b7      	b.n	800e4b4 <_strtod_l+0x1d4>
 800e544:	2301      	movs	r3, #1
 800e546:	2700      	movs	r7, #0
 800e548:	9306      	str	r3, [sp, #24]
 800e54a:	e786      	b.n	800e45a <_strtod_l+0x17a>
 800e54c:	f04f 0e00 	mov.w	lr, #0
 800e550:	f108 0202 	add.w	r2, r8, #2
 800e554:	9211      	str	r2, [sp, #68]	@ 0x44
 800e556:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e55a:	e78f      	b.n	800e47c <_strtod_l+0x19c>
 800e55c:	f04f 0e01 	mov.w	lr, #1
 800e560:	e7f6      	b.n	800e550 <_strtod_l+0x270>
 800e562:	bf00      	nop
 800e564:	08010890 	.word	0x08010890
 800e568:	08010878 	.word	0x08010878
 800e56c:	7ff00000 	.word	0x7ff00000
 800e570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e572:	1c54      	adds	r4, r2, #1
 800e574:	9411      	str	r4, [sp, #68]	@ 0x44
 800e576:	7852      	ldrb	r2, [r2, #1]
 800e578:	2a30      	cmp	r2, #48	@ 0x30
 800e57a:	d0f9      	beq.n	800e570 <_strtod_l+0x290>
 800e57c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800e580:	2c08      	cmp	r4, #8
 800e582:	d881      	bhi.n	800e488 <_strtod_l+0x1a8>
 800e584:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800e588:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e58a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e58c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e58e:	1c51      	adds	r1, r2, #1
 800e590:	9111      	str	r1, [sp, #68]	@ 0x44
 800e592:	7852      	ldrb	r2, [r2, #1]
 800e594:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800e598:	2c09      	cmp	r4, #9
 800e59a:	d938      	bls.n	800e60e <_strtod_l+0x32e>
 800e59c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800e59e:	1b0c      	subs	r4, r1, r4
 800e5a0:	2c08      	cmp	r4, #8
 800e5a2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800e5a6:	dc02      	bgt.n	800e5ae <_strtod_l+0x2ce>
 800e5a8:	4564      	cmp	r4, ip
 800e5aa:	bfa8      	it	ge
 800e5ac:	4664      	movge	r4, ip
 800e5ae:	f1be 0f00 	cmp.w	lr, #0
 800e5b2:	d000      	beq.n	800e5b6 <_strtod_l+0x2d6>
 800e5b4:	4264      	negs	r4, r4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d14e      	bne.n	800e658 <_strtod_l+0x378>
 800e5ba:	9b07      	ldr	r3, [sp, #28]
 800e5bc:	4318      	orrs	r0, r3
 800e5be:	f47f aeca 	bne.w	800e356 <_strtod_l+0x76>
 800e5c2:	9b06      	ldr	r3, [sp, #24]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f47f aee2 	bne.w	800e38e <_strtod_l+0xae>
 800e5ca:	2a69      	cmp	r2, #105	@ 0x69
 800e5cc:	d027      	beq.n	800e61e <_strtod_l+0x33e>
 800e5ce:	dc24      	bgt.n	800e61a <_strtod_l+0x33a>
 800e5d0:	2a49      	cmp	r2, #73	@ 0x49
 800e5d2:	d024      	beq.n	800e61e <_strtod_l+0x33e>
 800e5d4:	2a4e      	cmp	r2, #78	@ 0x4e
 800e5d6:	f47f aeda 	bne.w	800e38e <_strtod_l+0xae>
 800e5da:	4997      	ldr	r1, [pc, #604]	@ (800e838 <_strtod_l+0x558>)
 800e5dc:	a811      	add	r0, sp, #68	@ 0x44
 800e5de:	f001 f9ab 	bl	800f938 <__match>
 800e5e2:	2800      	cmp	r0, #0
 800e5e4:	f43f aed3 	beq.w	800e38e <_strtod_l+0xae>
 800e5e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2b28      	cmp	r3, #40	@ 0x28
 800e5ee:	d12d      	bne.n	800e64c <_strtod_l+0x36c>
 800e5f0:	4992      	ldr	r1, [pc, #584]	@ (800e83c <_strtod_l+0x55c>)
 800e5f2:	aa14      	add	r2, sp, #80	@ 0x50
 800e5f4:	a811      	add	r0, sp, #68	@ 0x44
 800e5f6:	f001 f9b3 	bl	800f960 <__hexnan>
 800e5fa:	2805      	cmp	r0, #5
 800e5fc:	d126      	bne.n	800e64c <_strtod_l+0x36c>
 800e5fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e600:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e604:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e608:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e60c:	e6a3      	b.n	800e356 <_strtod_l+0x76>
 800e60e:	240a      	movs	r4, #10
 800e610:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e614:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e618:	e7b8      	b.n	800e58c <_strtod_l+0x2ac>
 800e61a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e61c:	e7db      	b.n	800e5d6 <_strtod_l+0x2f6>
 800e61e:	4988      	ldr	r1, [pc, #544]	@ (800e840 <_strtod_l+0x560>)
 800e620:	a811      	add	r0, sp, #68	@ 0x44
 800e622:	f001 f989 	bl	800f938 <__match>
 800e626:	2800      	cmp	r0, #0
 800e628:	f43f aeb1 	beq.w	800e38e <_strtod_l+0xae>
 800e62c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e62e:	4985      	ldr	r1, [pc, #532]	@ (800e844 <_strtod_l+0x564>)
 800e630:	3b01      	subs	r3, #1
 800e632:	a811      	add	r0, sp, #68	@ 0x44
 800e634:	9311      	str	r3, [sp, #68]	@ 0x44
 800e636:	f001 f97f 	bl	800f938 <__match>
 800e63a:	b910      	cbnz	r0, 800e642 <_strtod_l+0x362>
 800e63c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e63e:	3301      	adds	r3, #1
 800e640:	9311      	str	r3, [sp, #68]	@ 0x44
 800e642:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e858 <_strtod_l+0x578>
 800e646:	f04f 0a00 	mov.w	sl, #0
 800e64a:	e684      	b.n	800e356 <_strtod_l+0x76>
 800e64c:	487e      	ldr	r0, [pc, #504]	@ (800e848 <_strtod_l+0x568>)
 800e64e:	f000 feaf 	bl	800f3b0 <nan>
 800e652:	ec5b ab10 	vmov	sl, fp, d0
 800e656:	e67e      	b.n	800e356 <_strtod_l+0x76>
 800e658:	ee07 9a90 	vmov	s15, r9
 800e65c:	1be2      	subs	r2, r4, r7
 800e65e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e662:	2d00      	cmp	r5, #0
 800e664:	bf08      	it	eq
 800e666:	461d      	moveq	r5, r3
 800e668:	2b10      	cmp	r3, #16
 800e66a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e66c:	461a      	mov	r2, r3
 800e66e:	bfa8      	it	ge
 800e670:	2210      	movge	r2, #16
 800e672:	2b09      	cmp	r3, #9
 800e674:	ec5b ab17 	vmov	sl, fp, d7
 800e678:	dc15      	bgt.n	800e6a6 <_strtod_l+0x3c6>
 800e67a:	1be1      	subs	r1, r4, r7
 800e67c:	2900      	cmp	r1, #0
 800e67e:	f43f ae6a 	beq.w	800e356 <_strtod_l+0x76>
 800e682:	eba4 0107 	sub.w	r1, r4, r7
 800e686:	dd72      	ble.n	800e76e <_strtod_l+0x48e>
 800e688:	2916      	cmp	r1, #22
 800e68a:	dc59      	bgt.n	800e740 <_strtod_l+0x460>
 800e68c:	4b6f      	ldr	r3, [pc, #444]	@ (800e84c <_strtod_l+0x56c>)
 800e68e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e690:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e694:	ed93 7b00 	vldr	d7, [r3]
 800e698:	ec4b ab16 	vmov	d6, sl, fp
 800e69c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6a0:	ec5b ab17 	vmov	sl, fp, d7
 800e6a4:	e657      	b.n	800e356 <_strtod_l+0x76>
 800e6a6:	4969      	ldr	r1, [pc, #420]	@ (800e84c <_strtod_l+0x56c>)
 800e6a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e6ac:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e6b0:	ee06 6a90 	vmov	s13, r6
 800e6b4:	2b0f      	cmp	r3, #15
 800e6b6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e6ba:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e6be:	ec5b ab16 	vmov	sl, fp, d6
 800e6c2:	ddda      	ble.n	800e67a <_strtod_l+0x39a>
 800e6c4:	1a9a      	subs	r2, r3, r2
 800e6c6:	1be1      	subs	r1, r4, r7
 800e6c8:	440a      	add	r2, r1
 800e6ca:	2a00      	cmp	r2, #0
 800e6cc:	f340 8094 	ble.w	800e7f8 <_strtod_l+0x518>
 800e6d0:	f012 000f 	ands.w	r0, r2, #15
 800e6d4:	d00a      	beq.n	800e6ec <_strtod_l+0x40c>
 800e6d6:	495d      	ldr	r1, [pc, #372]	@ (800e84c <_strtod_l+0x56c>)
 800e6d8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e6dc:	ed91 7b00 	vldr	d7, [r1]
 800e6e0:	ec4b ab16 	vmov	d6, sl, fp
 800e6e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6e8:	ec5b ab17 	vmov	sl, fp, d7
 800e6ec:	f032 020f 	bics.w	r2, r2, #15
 800e6f0:	d073      	beq.n	800e7da <_strtod_l+0x4fa>
 800e6f2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e6f6:	dd47      	ble.n	800e788 <_strtod_l+0x4a8>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	4625      	mov	r5, r4
 800e6fc:	9407      	str	r4, [sp, #28]
 800e6fe:	4626      	mov	r6, r4
 800e700:	9a05      	ldr	r2, [sp, #20]
 800e702:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e858 <_strtod_l+0x578>
 800e706:	2322      	movs	r3, #34	@ 0x22
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	f04f 0a00 	mov.w	sl, #0
 800e70e:	9b07      	ldr	r3, [sp, #28]
 800e710:	2b00      	cmp	r3, #0
 800e712:	f43f ae20 	beq.w	800e356 <_strtod_l+0x76>
 800e716:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e718:	9805      	ldr	r0, [sp, #20]
 800e71a:	f7ff f957 	bl	800d9cc <_Bfree>
 800e71e:	9805      	ldr	r0, [sp, #20]
 800e720:	4631      	mov	r1, r6
 800e722:	f7ff f953 	bl	800d9cc <_Bfree>
 800e726:	9805      	ldr	r0, [sp, #20]
 800e728:	4629      	mov	r1, r5
 800e72a:	f7ff f94f 	bl	800d9cc <_Bfree>
 800e72e:	9907      	ldr	r1, [sp, #28]
 800e730:	9805      	ldr	r0, [sp, #20]
 800e732:	f7ff f94b 	bl	800d9cc <_Bfree>
 800e736:	9805      	ldr	r0, [sp, #20]
 800e738:	4621      	mov	r1, r4
 800e73a:	f7ff f947 	bl	800d9cc <_Bfree>
 800e73e:	e60a      	b.n	800e356 <_strtod_l+0x76>
 800e740:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e744:	1be0      	subs	r0, r4, r7
 800e746:	4281      	cmp	r1, r0
 800e748:	dbbc      	blt.n	800e6c4 <_strtod_l+0x3e4>
 800e74a:	4a40      	ldr	r2, [pc, #256]	@ (800e84c <_strtod_l+0x56c>)
 800e74c:	f1c3 030f 	rsb	r3, r3, #15
 800e750:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e754:	ed91 7b00 	vldr	d7, [r1]
 800e758:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e75a:	ec4b ab16 	vmov	d6, sl, fp
 800e75e:	1acb      	subs	r3, r1, r3
 800e760:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e764:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e768:	ed92 6b00 	vldr	d6, [r2]
 800e76c:	e796      	b.n	800e69c <_strtod_l+0x3bc>
 800e76e:	3116      	adds	r1, #22
 800e770:	dba8      	blt.n	800e6c4 <_strtod_l+0x3e4>
 800e772:	4b36      	ldr	r3, [pc, #216]	@ (800e84c <_strtod_l+0x56c>)
 800e774:	1b3c      	subs	r4, r7, r4
 800e776:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e77a:	ed94 7b00 	vldr	d7, [r4]
 800e77e:	ec4b ab16 	vmov	d6, sl, fp
 800e782:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e786:	e78b      	b.n	800e6a0 <_strtod_l+0x3c0>
 800e788:	2000      	movs	r0, #0
 800e78a:	ec4b ab17 	vmov	d7, sl, fp
 800e78e:	4e30      	ldr	r6, [pc, #192]	@ (800e850 <_strtod_l+0x570>)
 800e790:	1112      	asrs	r2, r2, #4
 800e792:	4601      	mov	r1, r0
 800e794:	2a01      	cmp	r2, #1
 800e796:	dc23      	bgt.n	800e7e0 <_strtod_l+0x500>
 800e798:	b108      	cbz	r0, 800e79e <_strtod_l+0x4be>
 800e79a:	ec5b ab17 	vmov	sl, fp, d7
 800e79e:	4a2c      	ldr	r2, [pc, #176]	@ (800e850 <_strtod_l+0x570>)
 800e7a0:	482c      	ldr	r0, [pc, #176]	@ (800e854 <_strtod_l+0x574>)
 800e7a2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e7a6:	ed92 7b00 	vldr	d7, [r2]
 800e7aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e7ae:	ec4b ab16 	vmov	d6, sl, fp
 800e7b2:	4a29      	ldr	r2, [pc, #164]	@ (800e858 <_strtod_l+0x578>)
 800e7b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7b8:	ee17 1a90 	vmov	r1, s15
 800e7bc:	400a      	ands	r2, r1
 800e7be:	4282      	cmp	r2, r0
 800e7c0:	ec5b ab17 	vmov	sl, fp, d7
 800e7c4:	d898      	bhi.n	800e6f8 <_strtod_l+0x418>
 800e7c6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e7ca:	4282      	cmp	r2, r0
 800e7cc:	bf86      	itte	hi
 800e7ce:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e85c <_strtod_l+0x57c>
 800e7d2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e7d6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e7da:	2200      	movs	r2, #0
 800e7dc:	9206      	str	r2, [sp, #24]
 800e7de:	e076      	b.n	800e8ce <_strtod_l+0x5ee>
 800e7e0:	f012 0f01 	tst.w	r2, #1
 800e7e4:	d004      	beq.n	800e7f0 <_strtod_l+0x510>
 800e7e6:	ed96 6b00 	vldr	d6, [r6]
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7f0:	3101      	adds	r1, #1
 800e7f2:	1052      	asrs	r2, r2, #1
 800e7f4:	3608      	adds	r6, #8
 800e7f6:	e7cd      	b.n	800e794 <_strtod_l+0x4b4>
 800e7f8:	d0ef      	beq.n	800e7da <_strtod_l+0x4fa>
 800e7fa:	4252      	negs	r2, r2
 800e7fc:	f012 000f 	ands.w	r0, r2, #15
 800e800:	d00a      	beq.n	800e818 <_strtod_l+0x538>
 800e802:	4912      	ldr	r1, [pc, #72]	@ (800e84c <_strtod_l+0x56c>)
 800e804:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e808:	ed91 7b00 	vldr	d7, [r1]
 800e80c:	ec4b ab16 	vmov	d6, sl, fp
 800e810:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e814:	ec5b ab17 	vmov	sl, fp, d7
 800e818:	1112      	asrs	r2, r2, #4
 800e81a:	d0de      	beq.n	800e7da <_strtod_l+0x4fa>
 800e81c:	2a1f      	cmp	r2, #31
 800e81e:	dd1f      	ble.n	800e860 <_strtod_l+0x580>
 800e820:	2400      	movs	r4, #0
 800e822:	4625      	mov	r5, r4
 800e824:	9407      	str	r4, [sp, #28]
 800e826:	4626      	mov	r6, r4
 800e828:	9a05      	ldr	r2, [sp, #20]
 800e82a:	2322      	movs	r3, #34	@ 0x22
 800e82c:	f04f 0a00 	mov.w	sl, #0
 800e830:	f04f 0b00 	mov.w	fp, #0
 800e834:	6013      	str	r3, [r2, #0]
 800e836:	e76a      	b.n	800e70e <_strtod_l+0x42e>
 800e838:	08010665 	.word	0x08010665
 800e83c:	0801087c 	.word	0x0801087c
 800e840:	0801065d 	.word	0x0801065d
 800e844:	08010694 	.word	0x08010694
 800e848:	08010a25 	.word	0x08010a25
 800e84c:	080107b0 	.word	0x080107b0
 800e850:	08010788 	.word	0x08010788
 800e854:	7ca00000 	.word	0x7ca00000
 800e858:	7ff00000 	.word	0x7ff00000
 800e85c:	7fefffff 	.word	0x7fefffff
 800e860:	f012 0110 	ands.w	r1, r2, #16
 800e864:	bf18      	it	ne
 800e866:	216a      	movne	r1, #106	@ 0x6a
 800e868:	9106      	str	r1, [sp, #24]
 800e86a:	ec4b ab17 	vmov	d7, sl, fp
 800e86e:	49b0      	ldr	r1, [pc, #704]	@ (800eb30 <_strtod_l+0x850>)
 800e870:	2000      	movs	r0, #0
 800e872:	07d6      	lsls	r6, r2, #31
 800e874:	d504      	bpl.n	800e880 <_strtod_l+0x5a0>
 800e876:	ed91 6b00 	vldr	d6, [r1]
 800e87a:	2001      	movs	r0, #1
 800e87c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e880:	1052      	asrs	r2, r2, #1
 800e882:	f101 0108 	add.w	r1, r1, #8
 800e886:	d1f4      	bne.n	800e872 <_strtod_l+0x592>
 800e888:	b108      	cbz	r0, 800e88e <_strtod_l+0x5ae>
 800e88a:	ec5b ab17 	vmov	sl, fp, d7
 800e88e:	9a06      	ldr	r2, [sp, #24]
 800e890:	b1b2      	cbz	r2, 800e8c0 <_strtod_l+0x5e0>
 800e892:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e896:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e89a:	2a00      	cmp	r2, #0
 800e89c:	4658      	mov	r0, fp
 800e89e:	dd0f      	ble.n	800e8c0 <_strtod_l+0x5e0>
 800e8a0:	2a1f      	cmp	r2, #31
 800e8a2:	dd55      	ble.n	800e950 <_strtod_l+0x670>
 800e8a4:	2a34      	cmp	r2, #52	@ 0x34
 800e8a6:	bfde      	ittt	le
 800e8a8:	f04f 32ff 	movle.w	r2, #4294967295
 800e8ac:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e8b0:	408a      	lslle	r2, r1
 800e8b2:	f04f 0a00 	mov.w	sl, #0
 800e8b6:	bfcc      	ite	gt
 800e8b8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e8bc:	ea02 0b00 	andle.w	fp, r2, r0
 800e8c0:	ec4b ab17 	vmov	d7, sl, fp
 800e8c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8cc:	d0a8      	beq.n	800e820 <_strtod_l+0x540>
 800e8ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8d0:	9805      	ldr	r0, [sp, #20]
 800e8d2:	f8cd 9000 	str.w	r9, [sp]
 800e8d6:	462a      	mov	r2, r5
 800e8d8:	f7ff f8e0 	bl	800da9c <__s2b>
 800e8dc:	9007      	str	r0, [sp, #28]
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f af0a 	beq.w	800e6f8 <_strtod_l+0x418>
 800e8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8e6:	1b3f      	subs	r7, r7, r4
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	bfb4      	ite	lt
 800e8ec:	463b      	movlt	r3, r7
 800e8ee:	2300      	movge	r3, #0
 800e8f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8f4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800eb20 <_strtod_l+0x840>
 800e8f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e8fc:	2400      	movs	r4, #0
 800e8fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800e900:	4625      	mov	r5, r4
 800e902:	9b07      	ldr	r3, [sp, #28]
 800e904:	9805      	ldr	r0, [sp, #20]
 800e906:	6859      	ldr	r1, [r3, #4]
 800e908:	f7ff f820 	bl	800d94c <_Balloc>
 800e90c:	4606      	mov	r6, r0
 800e90e:	2800      	cmp	r0, #0
 800e910:	f43f aef6 	beq.w	800e700 <_strtod_l+0x420>
 800e914:	9b07      	ldr	r3, [sp, #28]
 800e916:	691a      	ldr	r2, [r3, #16]
 800e918:	ec4b ab19 	vmov	d9, sl, fp
 800e91c:	3202      	adds	r2, #2
 800e91e:	f103 010c 	add.w	r1, r3, #12
 800e922:	0092      	lsls	r2, r2, #2
 800e924:	300c      	adds	r0, #12
 800e926:	f000 fd33 	bl	800f390 <memcpy>
 800e92a:	eeb0 0b49 	vmov.f64	d0, d9
 800e92e:	9805      	ldr	r0, [sp, #20]
 800e930:	aa14      	add	r2, sp, #80	@ 0x50
 800e932:	a913      	add	r1, sp, #76	@ 0x4c
 800e934:	f7ff fbee 	bl	800e114 <__d2b>
 800e938:	9012      	str	r0, [sp, #72]	@ 0x48
 800e93a:	2800      	cmp	r0, #0
 800e93c:	f43f aee0 	beq.w	800e700 <_strtod_l+0x420>
 800e940:	9805      	ldr	r0, [sp, #20]
 800e942:	2101      	movs	r1, #1
 800e944:	f7ff f940 	bl	800dbc8 <__i2b>
 800e948:	4605      	mov	r5, r0
 800e94a:	b940      	cbnz	r0, 800e95e <_strtod_l+0x67e>
 800e94c:	2500      	movs	r5, #0
 800e94e:	e6d7      	b.n	800e700 <_strtod_l+0x420>
 800e950:	f04f 31ff 	mov.w	r1, #4294967295
 800e954:	fa01 f202 	lsl.w	r2, r1, r2
 800e958:	ea02 0a0a 	and.w	sl, r2, sl
 800e95c:	e7b0      	b.n	800e8c0 <_strtod_l+0x5e0>
 800e95e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e960:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e962:	2f00      	cmp	r7, #0
 800e964:	bfab      	itete	ge
 800e966:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e968:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e96a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e96e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e972:	bfac      	ite	ge
 800e974:	eb07 0903 	addge.w	r9, r7, r3
 800e978:	eba3 0807 	sublt.w	r8, r3, r7
 800e97c:	9b06      	ldr	r3, [sp, #24]
 800e97e:	1aff      	subs	r7, r7, r3
 800e980:	4417      	add	r7, r2
 800e982:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e986:	4a6b      	ldr	r2, [pc, #428]	@ (800eb34 <_strtod_l+0x854>)
 800e988:	3f01      	subs	r7, #1
 800e98a:	4297      	cmp	r7, r2
 800e98c:	da51      	bge.n	800ea32 <_strtod_l+0x752>
 800e98e:	1bd1      	subs	r1, r2, r7
 800e990:	291f      	cmp	r1, #31
 800e992:	eba3 0301 	sub.w	r3, r3, r1
 800e996:	f04f 0201 	mov.w	r2, #1
 800e99a:	dc3e      	bgt.n	800ea1a <_strtod_l+0x73a>
 800e99c:	408a      	lsls	r2, r1
 800e99e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e9a4:	eb09 0703 	add.w	r7, r9, r3
 800e9a8:	4498      	add	r8, r3
 800e9aa:	9b06      	ldr	r3, [sp, #24]
 800e9ac:	45b9      	cmp	r9, r7
 800e9ae:	4498      	add	r8, r3
 800e9b0:	464b      	mov	r3, r9
 800e9b2:	bfa8      	it	ge
 800e9b4:	463b      	movge	r3, r7
 800e9b6:	4543      	cmp	r3, r8
 800e9b8:	bfa8      	it	ge
 800e9ba:	4643      	movge	r3, r8
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	bfc2      	ittt	gt
 800e9c0:	1aff      	subgt	r7, r7, r3
 800e9c2:	eba8 0803 	subgt.w	r8, r8, r3
 800e9c6:	eba9 0903 	subgt.w	r9, r9, r3
 800e9ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	dd16      	ble.n	800e9fe <_strtod_l+0x71e>
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	9805      	ldr	r0, [sp, #20]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	f7ff f9b7 	bl	800dd48 <__pow5mult>
 800e9da:	4605      	mov	r5, r0
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	d0b5      	beq.n	800e94c <_strtod_l+0x66c>
 800e9e0:	4601      	mov	r1, r0
 800e9e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e9e4:	9805      	ldr	r0, [sp, #20]
 800e9e6:	f7ff f905 	bl	800dbf4 <__multiply>
 800e9ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	f43f ae87 	beq.w	800e700 <_strtod_l+0x420>
 800e9f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e9f4:	9805      	ldr	r0, [sp, #20]
 800e9f6:	f7fe ffe9 	bl	800d9cc <_Bfree>
 800e9fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9fc:	9312      	str	r3, [sp, #72]	@ 0x48
 800e9fe:	2f00      	cmp	r7, #0
 800ea00:	dc1b      	bgt.n	800ea3a <_strtod_l+0x75a>
 800ea02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	dd21      	ble.n	800ea4c <_strtod_l+0x76c>
 800ea08:	4631      	mov	r1, r6
 800ea0a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea0c:	9805      	ldr	r0, [sp, #20]
 800ea0e:	f7ff f99b 	bl	800dd48 <__pow5mult>
 800ea12:	4606      	mov	r6, r0
 800ea14:	b9d0      	cbnz	r0, 800ea4c <_strtod_l+0x76c>
 800ea16:	2600      	movs	r6, #0
 800ea18:	e672      	b.n	800e700 <_strtod_l+0x420>
 800ea1a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800ea1e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800ea22:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800ea26:	37e2      	adds	r7, #226	@ 0xe2
 800ea28:	fa02 f107 	lsl.w	r1, r2, r7
 800ea2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ea2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea30:	e7b8      	b.n	800e9a4 <_strtod_l+0x6c4>
 800ea32:	2200      	movs	r2, #0
 800ea34:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea36:	2201      	movs	r2, #1
 800ea38:	e7f9      	b.n	800ea2e <_strtod_l+0x74e>
 800ea3a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea3c:	9805      	ldr	r0, [sp, #20]
 800ea3e:	463a      	mov	r2, r7
 800ea40:	f7ff f9dc 	bl	800ddfc <__lshift>
 800ea44:	9012      	str	r0, [sp, #72]	@ 0x48
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d1db      	bne.n	800ea02 <_strtod_l+0x722>
 800ea4a:	e659      	b.n	800e700 <_strtod_l+0x420>
 800ea4c:	f1b8 0f00 	cmp.w	r8, #0
 800ea50:	dd07      	ble.n	800ea62 <_strtod_l+0x782>
 800ea52:	4631      	mov	r1, r6
 800ea54:	9805      	ldr	r0, [sp, #20]
 800ea56:	4642      	mov	r2, r8
 800ea58:	f7ff f9d0 	bl	800ddfc <__lshift>
 800ea5c:	4606      	mov	r6, r0
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d0d9      	beq.n	800ea16 <_strtod_l+0x736>
 800ea62:	f1b9 0f00 	cmp.w	r9, #0
 800ea66:	dd08      	ble.n	800ea7a <_strtod_l+0x79a>
 800ea68:	4629      	mov	r1, r5
 800ea6a:	9805      	ldr	r0, [sp, #20]
 800ea6c:	464a      	mov	r2, r9
 800ea6e:	f7ff f9c5 	bl	800ddfc <__lshift>
 800ea72:	4605      	mov	r5, r0
 800ea74:	2800      	cmp	r0, #0
 800ea76:	f43f ae43 	beq.w	800e700 <_strtod_l+0x420>
 800ea7a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ea7c:	9805      	ldr	r0, [sp, #20]
 800ea7e:	4632      	mov	r2, r6
 800ea80:	f7ff fa44 	bl	800df0c <__mdiff>
 800ea84:	4604      	mov	r4, r0
 800ea86:	2800      	cmp	r0, #0
 800ea88:	f43f ae3a 	beq.w	800e700 <_strtod_l+0x420>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800ea92:	60c3      	str	r3, [r0, #12]
 800ea94:	4629      	mov	r1, r5
 800ea96:	f7ff fa1d 	bl	800ded4 <__mcmp>
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	da4e      	bge.n	800eb3c <_strtod_l+0x85c>
 800ea9e:	ea58 080a 	orrs.w	r8, r8, sl
 800eaa2:	d174      	bne.n	800eb8e <_strtod_l+0x8ae>
 800eaa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d170      	bne.n	800eb8e <_strtod_l+0x8ae>
 800eaac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eab0:	0d1b      	lsrs	r3, r3, #20
 800eab2:	051b      	lsls	r3, r3, #20
 800eab4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eab8:	d969      	bls.n	800eb8e <_strtod_l+0x8ae>
 800eaba:	6963      	ldr	r3, [r4, #20]
 800eabc:	b913      	cbnz	r3, 800eac4 <_strtod_l+0x7e4>
 800eabe:	6923      	ldr	r3, [r4, #16]
 800eac0:	2b01      	cmp	r3, #1
 800eac2:	dd64      	ble.n	800eb8e <_strtod_l+0x8ae>
 800eac4:	4621      	mov	r1, r4
 800eac6:	2201      	movs	r2, #1
 800eac8:	9805      	ldr	r0, [sp, #20]
 800eaca:	f7ff f997 	bl	800ddfc <__lshift>
 800eace:	4629      	mov	r1, r5
 800ead0:	4604      	mov	r4, r0
 800ead2:	f7ff f9ff 	bl	800ded4 <__mcmp>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	dd59      	ble.n	800eb8e <_strtod_l+0x8ae>
 800eada:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eade:	9a06      	ldr	r2, [sp, #24]
 800eae0:	0d1b      	lsrs	r3, r3, #20
 800eae2:	051b      	lsls	r3, r3, #20
 800eae4:	2a00      	cmp	r2, #0
 800eae6:	d070      	beq.n	800ebca <_strtod_l+0x8ea>
 800eae8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eaec:	d86d      	bhi.n	800ebca <_strtod_l+0x8ea>
 800eaee:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800eaf2:	f67f ae99 	bls.w	800e828 <_strtod_l+0x548>
 800eaf6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800eb28 <_strtod_l+0x848>
 800eafa:	ec4b ab16 	vmov	d6, sl, fp
 800eafe:	4b0e      	ldr	r3, [pc, #56]	@ (800eb38 <_strtod_l+0x858>)
 800eb00:	ee26 7b07 	vmul.f64	d7, d6, d7
 800eb04:	ee17 2a90 	vmov	r2, s15
 800eb08:	4013      	ands	r3, r2
 800eb0a:	ec5b ab17 	vmov	sl, fp, d7
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f47f ae01 	bne.w	800e716 <_strtod_l+0x436>
 800eb14:	9a05      	ldr	r2, [sp, #20]
 800eb16:	2322      	movs	r3, #34	@ 0x22
 800eb18:	6013      	str	r3, [r2, #0]
 800eb1a:	e5fc      	b.n	800e716 <_strtod_l+0x436>
 800eb1c:	f3af 8000 	nop.w
 800eb20:	ffc00000 	.word	0xffc00000
 800eb24:	41dfffff 	.word	0x41dfffff
 800eb28:	00000000 	.word	0x00000000
 800eb2c:	39500000 	.word	0x39500000
 800eb30:	080108a8 	.word	0x080108a8
 800eb34:	fffffc02 	.word	0xfffffc02
 800eb38:	7ff00000 	.word	0x7ff00000
 800eb3c:	46d9      	mov	r9, fp
 800eb3e:	d15d      	bne.n	800ebfc <_strtod_l+0x91c>
 800eb40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb44:	f1b8 0f00 	cmp.w	r8, #0
 800eb48:	d02a      	beq.n	800eba0 <_strtod_l+0x8c0>
 800eb4a:	4aab      	ldr	r2, [pc, #684]	@ (800edf8 <_strtod_l+0xb18>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d12a      	bne.n	800eba6 <_strtod_l+0x8c6>
 800eb50:	9b06      	ldr	r3, [sp, #24]
 800eb52:	4652      	mov	r2, sl
 800eb54:	b1fb      	cbz	r3, 800eb96 <_strtod_l+0x8b6>
 800eb56:	4ba9      	ldr	r3, [pc, #676]	@ (800edfc <_strtod_l+0xb1c>)
 800eb58:	ea0b 0303 	and.w	r3, fp, r3
 800eb5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800eb60:	f04f 31ff 	mov.w	r1, #4294967295
 800eb64:	d81a      	bhi.n	800eb9c <_strtod_l+0x8bc>
 800eb66:	0d1b      	lsrs	r3, r3, #20
 800eb68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800eb6c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d118      	bne.n	800eba6 <_strtod_l+0x8c6>
 800eb74:	4ba2      	ldr	r3, [pc, #648]	@ (800ee00 <_strtod_l+0xb20>)
 800eb76:	4599      	cmp	r9, r3
 800eb78:	d102      	bne.n	800eb80 <_strtod_l+0x8a0>
 800eb7a:	3201      	adds	r2, #1
 800eb7c:	f43f adc0 	beq.w	800e700 <_strtod_l+0x420>
 800eb80:	4b9e      	ldr	r3, [pc, #632]	@ (800edfc <_strtod_l+0xb1c>)
 800eb82:	ea09 0303 	and.w	r3, r9, r3
 800eb86:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800eb8a:	f04f 0a00 	mov.w	sl, #0
 800eb8e:	9b06      	ldr	r3, [sp, #24]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d1b0      	bne.n	800eaf6 <_strtod_l+0x816>
 800eb94:	e5bf      	b.n	800e716 <_strtod_l+0x436>
 800eb96:	f04f 33ff 	mov.w	r3, #4294967295
 800eb9a:	e7e9      	b.n	800eb70 <_strtod_l+0x890>
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e7e7      	b.n	800eb70 <_strtod_l+0x890>
 800eba0:	ea53 030a 	orrs.w	r3, r3, sl
 800eba4:	d099      	beq.n	800eada <_strtod_l+0x7fa>
 800eba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eba8:	b1c3      	cbz	r3, 800ebdc <_strtod_l+0x8fc>
 800ebaa:	ea13 0f09 	tst.w	r3, r9
 800ebae:	d0ee      	beq.n	800eb8e <_strtod_l+0x8ae>
 800ebb0:	9a06      	ldr	r2, [sp, #24]
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	f1b8 0f00 	cmp.w	r8, #0
 800ebba:	d013      	beq.n	800ebe4 <_strtod_l+0x904>
 800ebbc:	f7ff fb75 	bl	800e2aa <sulp>
 800ebc0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ebc4:	ec5b ab17 	vmov	sl, fp, d7
 800ebc8:	e7e1      	b.n	800eb8e <_strtod_l+0x8ae>
 800ebca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ebce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ebd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ebd6:	f04f 3aff 	mov.w	sl, #4294967295
 800ebda:	e7d8      	b.n	800eb8e <_strtod_l+0x8ae>
 800ebdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebde:	ea13 0f0a 	tst.w	r3, sl
 800ebe2:	e7e4      	b.n	800ebae <_strtod_l+0x8ce>
 800ebe4:	f7ff fb61 	bl	800e2aa <sulp>
 800ebe8:	ee39 0b40 	vsub.f64	d0, d9, d0
 800ebec:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf4:	ec5b ab10 	vmov	sl, fp, d0
 800ebf8:	d1c9      	bne.n	800eb8e <_strtod_l+0x8ae>
 800ebfa:	e615      	b.n	800e828 <_strtod_l+0x548>
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4620      	mov	r0, r4
 800ec00:	f7ff fae0 	bl	800e1c4 <__ratio>
 800ec04:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800ec08:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ec0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec10:	d85d      	bhi.n	800ecce <_strtod_l+0x9ee>
 800ec12:	f1b8 0f00 	cmp.w	r8, #0
 800ec16:	d164      	bne.n	800ece2 <_strtod_l+0xa02>
 800ec18:	f1ba 0f00 	cmp.w	sl, #0
 800ec1c:	d14b      	bne.n	800ecb6 <_strtod_l+0x9d6>
 800ec1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec22:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d160      	bne.n	800ecec <_strtod_l+0xa0c>
 800ec2a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800ec2e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ec32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec36:	d401      	bmi.n	800ec3c <_strtod_l+0x95c>
 800ec38:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ec3c:	eeb1 ab48 	vneg.f64	d10, d8
 800ec40:	486e      	ldr	r0, [pc, #440]	@ (800edfc <_strtod_l+0xb1c>)
 800ec42:	4970      	ldr	r1, [pc, #448]	@ (800ee04 <_strtod_l+0xb24>)
 800ec44:	ea09 0700 	and.w	r7, r9, r0
 800ec48:	428f      	cmp	r7, r1
 800ec4a:	ec53 2b1a 	vmov	r2, r3, d10
 800ec4e:	d17d      	bne.n	800ed4c <_strtod_l+0xa6c>
 800ec50:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800ec54:	ec4b ab1c 	vmov	d12, sl, fp
 800ec58:	eeb0 0b4c 	vmov.f64	d0, d12
 800ec5c:	f7ff f9ea 	bl	800e034 <__ulp>
 800ec60:	4866      	ldr	r0, [pc, #408]	@ (800edfc <_strtod_l+0xb1c>)
 800ec62:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800ec66:	ee1c 3a90 	vmov	r3, s25
 800ec6a:	4a67      	ldr	r2, [pc, #412]	@ (800ee08 <_strtod_l+0xb28>)
 800ec6c:	ea03 0100 	and.w	r1, r3, r0
 800ec70:	4291      	cmp	r1, r2
 800ec72:	ec5b ab1c 	vmov	sl, fp, d12
 800ec76:	d93c      	bls.n	800ecf2 <_strtod_l+0xa12>
 800ec78:	ee19 2a90 	vmov	r2, s19
 800ec7c:	4b60      	ldr	r3, [pc, #384]	@ (800ee00 <_strtod_l+0xb20>)
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d104      	bne.n	800ec8c <_strtod_l+0x9ac>
 800ec82:	ee19 3a10 	vmov	r3, s18
 800ec86:	3301      	adds	r3, #1
 800ec88:	f43f ad3a 	beq.w	800e700 <_strtod_l+0x420>
 800ec8c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ee00 <_strtod_l+0xb20>
 800ec90:	f04f 3aff 	mov.w	sl, #4294967295
 800ec94:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ec96:	9805      	ldr	r0, [sp, #20]
 800ec98:	f7fe fe98 	bl	800d9cc <_Bfree>
 800ec9c:	9805      	ldr	r0, [sp, #20]
 800ec9e:	4631      	mov	r1, r6
 800eca0:	f7fe fe94 	bl	800d9cc <_Bfree>
 800eca4:	9805      	ldr	r0, [sp, #20]
 800eca6:	4629      	mov	r1, r5
 800eca8:	f7fe fe90 	bl	800d9cc <_Bfree>
 800ecac:	9805      	ldr	r0, [sp, #20]
 800ecae:	4621      	mov	r1, r4
 800ecb0:	f7fe fe8c 	bl	800d9cc <_Bfree>
 800ecb4:	e625      	b.n	800e902 <_strtod_l+0x622>
 800ecb6:	f1ba 0f01 	cmp.w	sl, #1
 800ecba:	d103      	bne.n	800ecc4 <_strtod_l+0x9e4>
 800ecbc:	f1bb 0f00 	cmp.w	fp, #0
 800ecc0:	f43f adb2 	beq.w	800e828 <_strtod_l+0x548>
 800ecc4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ecc8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800eccc:	e7b8      	b.n	800ec40 <_strtod_l+0x960>
 800ecce:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ecd2:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ecd6:	f1b8 0f00 	cmp.w	r8, #0
 800ecda:	d0af      	beq.n	800ec3c <_strtod_l+0x95c>
 800ecdc:	eeb0 ab48 	vmov.f64	d10, d8
 800ece0:	e7ae      	b.n	800ec40 <_strtod_l+0x960>
 800ece2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ece6:	eeb0 8b4a 	vmov.f64	d8, d10
 800ecea:	e7a9      	b.n	800ec40 <_strtod_l+0x960>
 800ecec:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ecf0:	e7a6      	b.n	800ec40 <_strtod_l+0x960>
 800ecf2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ecf6:	9b06      	ldr	r3, [sp, #24]
 800ecf8:	46d9      	mov	r9, fp
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1ca      	bne.n	800ec94 <_strtod_l+0x9b4>
 800ecfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed02:	0d1b      	lsrs	r3, r3, #20
 800ed04:	051b      	lsls	r3, r3, #20
 800ed06:	429f      	cmp	r7, r3
 800ed08:	d1c4      	bne.n	800ec94 <_strtod_l+0x9b4>
 800ed0a:	ec51 0b18 	vmov	r0, r1, d8
 800ed0e:	f7f1 fd13 	bl	8000738 <__aeabi_d2lz>
 800ed12:	f7f1 fccb 	bl	80006ac <__aeabi_l2d>
 800ed16:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ed1a:	ec41 0b17 	vmov	d7, r0, r1
 800ed1e:	ea49 090a 	orr.w	r9, r9, sl
 800ed22:	ea59 0908 	orrs.w	r9, r9, r8
 800ed26:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ed2a:	d03c      	beq.n	800eda6 <_strtod_l+0xac6>
 800ed2c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ede0 <_strtod_l+0xb00>
 800ed30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ed34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed38:	f53f aced 	bmi.w	800e716 <_strtod_l+0x436>
 800ed3c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ede8 <_strtod_l+0xb08>
 800ed40:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ed44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed48:	dda4      	ble.n	800ec94 <_strtod_l+0x9b4>
 800ed4a:	e4e4      	b.n	800e716 <_strtod_l+0x436>
 800ed4c:	9906      	ldr	r1, [sp, #24]
 800ed4e:	b1e1      	cbz	r1, 800ed8a <_strtod_l+0xaaa>
 800ed50:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800ed54:	d819      	bhi.n	800ed8a <_strtod_l+0xaaa>
 800ed56:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5e:	d811      	bhi.n	800ed84 <_strtod_l+0xaa4>
 800ed60:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800ed64:	ee18 3a10 	vmov	r3, s16
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	bf38      	it	cc
 800ed6c:	2301      	movcc	r3, #1
 800ed6e:	ee08 3a10 	vmov	s16, r3
 800ed72:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800ed76:	f1b8 0f00 	cmp.w	r8, #0
 800ed7a:	d111      	bne.n	800eda0 <_strtod_l+0xac0>
 800ed7c:	eeb1 7b48 	vneg.f64	d7, d8
 800ed80:	ec53 2b17 	vmov	r2, r3, d7
 800ed84:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800ed88:	1bcb      	subs	r3, r1, r7
 800ed8a:	eeb0 0b49 	vmov.f64	d0, d9
 800ed8e:	ec43 2b1a 	vmov	d10, r2, r3
 800ed92:	f7ff f94f 	bl	800e034 <__ulp>
 800ed96:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800ed9a:	ec5b ab19 	vmov	sl, fp, d9
 800ed9e:	e7aa      	b.n	800ecf6 <_strtod_l+0xa16>
 800eda0:	eeb0 7b48 	vmov.f64	d7, d8
 800eda4:	e7ec      	b.n	800ed80 <_strtod_l+0xaa0>
 800eda6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800edf0 <_strtod_l+0xb10>
 800edaa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800edae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb2:	f57f af6f 	bpl.w	800ec94 <_strtod_l+0x9b4>
 800edb6:	e4ae      	b.n	800e716 <_strtod_l+0x436>
 800edb8:	2300      	movs	r3, #0
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800edbe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800edc0:	6013      	str	r3, [r2, #0]
 800edc2:	f7ff bacc 	b.w	800e35e <_strtod_l+0x7e>
 800edc6:	2a65      	cmp	r2, #101	@ 0x65
 800edc8:	f43f abbc 	beq.w	800e544 <_strtod_l+0x264>
 800edcc:	2a45      	cmp	r2, #69	@ 0x45
 800edce:	f43f abb9 	beq.w	800e544 <_strtod_l+0x264>
 800edd2:	2301      	movs	r3, #1
 800edd4:	9306      	str	r3, [sp, #24]
 800edd6:	f7ff bbf0 	b.w	800e5ba <_strtod_l+0x2da>
 800edda:	bf00      	nop
 800eddc:	f3af 8000 	nop.w
 800ede0:	94a03595 	.word	0x94a03595
 800ede4:	3fdfffff 	.word	0x3fdfffff
 800ede8:	35afe535 	.word	0x35afe535
 800edec:	3fe00000 	.word	0x3fe00000
 800edf0:	94a03595 	.word	0x94a03595
 800edf4:	3fcfffff 	.word	0x3fcfffff
 800edf8:	000fffff 	.word	0x000fffff
 800edfc:	7ff00000 	.word	0x7ff00000
 800ee00:	7fefffff 	.word	0x7fefffff
 800ee04:	7fe00000 	.word	0x7fe00000
 800ee08:	7c9fffff 	.word	0x7c9fffff

0800ee0c <_strtod_r>:
 800ee0c:	4b01      	ldr	r3, [pc, #4]	@ (800ee14 <_strtod_r+0x8>)
 800ee0e:	f7ff ba67 	b.w	800e2e0 <_strtod_l>
 800ee12:	bf00      	nop
 800ee14:	24000070 	.word	0x24000070

0800ee18 <_strtol_l.constprop.0>:
 800ee18:	2b24      	cmp	r3, #36	@ 0x24
 800ee1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee1e:	4686      	mov	lr, r0
 800ee20:	4690      	mov	r8, r2
 800ee22:	d801      	bhi.n	800ee28 <_strtol_l.constprop.0+0x10>
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d106      	bne.n	800ee36 <_strtol_l.constprop.0+0x1e>
 800ee28:	f7fd fe7e 	bl	800cb28 <__errno>
 800ee2c:	2316      	movs	r3, #22
 800ee2e:	6003      	str	r3, [r0, #0]
 800ee30:	2000      	movs	r0, #0
 800ee32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee36:	4834      	ldr	r0, [pc, #208]	@ (800ef08 <_strtol_l.constprop.0+0xf0>)
 800ee38:	460d      	mov	r5, r1
 800ee3a:	462a      	mov	r2, r5
 800ee3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee40:	5d06      	ldrb	r6, [r0, r4]
 800ee42:	f016 0608 	ands.w	r6, r6, #8
 800ee46:	d1f8      	bne.n	800ee3a <_strtol_l.constprop.0+0x22>
 800ee48:	2c2d      	cmp	r4, #45	@ 0x2d
 800ee4a:	d12d      	bne.n	800eea8 <_strtol_l.constprop.0+0x90>
 800ee4c:	782c      	ldrb	r4, [r5, #0]
 800ee4e:	2601      	movs	r6, #1
 800ee50:	1c95      	adds	r5, r2, #2
 800ee52:	f033 0210 	bics.w	r2, r3, #16
 800ee56:	d109      	bne.n	800ee6c <_strtol_l.constprop.0+0x54>
 800ee58:	2c30      	cmp	r4, #48	@ 0x30
 800ee5a:	d12a      	bne.n	800eeb2 <_strtol_l.constprop.0+0x9a>
 800ee5c:	782a      	ldrb	r2, [r5, #0]
 800ee5e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ee62:	2a58      	cmp	r2, #88	@ 0x58
 800ee64:	d125      	bne.n	800eeb2 <_strtol_l.constprop.0+0x9a>
 800ee66:	786c      	ldrb	r4, [r5, #1]
 800ee68:	2310      	movs	r3, #16
 800ee6a:	3502      	adds	r5, #2
 800ee6c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ee70:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ee74:	2200      	movs	r2, #0
 800ee76:	fbbc f9f3 	udiv	r9, ip, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	fb03 ca19 	mls	sl, r3, r9, ip
 800ee80:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ee84:	2f09      	cmp	r7, #9
 800ee86:	d81b      	bhi.n	800eec0 <_strtol_l.constprop.0+0xa8>
 800ee88:	463c      	mov	r4, r7
 800ee8a:	42a3      	cmp	r3, r4
 800ee8c:	dd27      	ble.n	800eede <_strtol_l.constprop.0+0xc6>
 800ee8e:	1c57      	adds	r7, r2, #1
 800ee90:	d007      	beq.n	800eea2 <_strtol_l.constprop.0+0x8a>
 800ee92:	4581      	cmp	r9, r0
 800ee94:	d320      	bcc.n	800eed8 <_strtol_l.constprop.0+0xc0>
 800ee96:	d101      	bne.n	800ee9c <_strtol_l.constprop.0+0x84>
 800ee98:	45a2      	cmp	sl, r4
 800ee9a:	db1d      	blt.n	800eed8 <_strtol_l.constprop.0+0xc0>
 800ee9c:	fb00 4003 	mla	r0, r0, r3, r4
 800eea0:	2201      	movs	r2, #1
 800eea2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eea6:	e7eb      	b.n	800ee80 <_strtol_l.constprop.0+0x68>
 800eea8:	2c2b      	cmp	r4, #43	@ 0x2b
 800eeaa:	bf04      	itt	eq
 800eeac:	782c      	ldrbeq	r4, [r5, #0]
 800eeae:	1c95      	addeq	r5, r2, #2
 800eeb0:	e7cf      	b.n	800ee52 <_strtol_l.constprop.0+0x3a>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d1da      	bne.n	800ee6c <_strtol_l.constprop.0+0x54>
 800eeb6:	2c30      	cmp	r4, #48	@ 0x30
 800eeb8:	bf0c      	ite	eq
 800eeba:	2308      	moveq	r3, #8
 800eebc:	230a      	movne	r3, #10
 800eebe:	e7d5      	b.n	800ee6c <_strtol_l.constprop.0+0x54>
 800eec0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800eec4:	2f19      	cmp	r7, #25
 800eec6:	d801      	bhi.n	800eecc <_strtol_l.constprop.0+0xb4>
 800eec8:	3c37      	subs	r4, #55	@ 0x37
 800eeca:	e7de      	b.n	800ee8a <_strtol_l.constprop.0+0x72>
 800eecc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800eed0:	2f19      	cmp	r7, #25
 800eed2:	d804      	bhi.n	800eede <_strtol_l.constprop.0+0xc6>
 800eed4:	3c57      	subs	r4, #87	@ 0x57
 800eed6:	e7d8      	b.n	800ee8a <_strtol_l.constprop.0+0x72>
 800eed8:	f04f 32ff 	mov.w	r2, #4294967295
 800eedc:	e7e1      	b.n	800eea2 <_strtol_l.constprop.0+0x8a>
 800eede:	1c53      	adds	r3, r2, #1
 800eee0:	d108      	bne.n	800eef4 <_strtol_l.constprop.0+0xdc>
 800eee2:	2322      	movs	r3, #34	@ 0x22
 800eee4:	f8ce 3000 	str.w	r3, [lr]
 800eee8:	4660      	mov	r0, ip
 800eeea:	f1b8 0f00 	cmp.w	r8, #0
 800eeee:	d0a0      	beq.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800eef0:	1e69      	subs	r1, r5, #1
 800eef2:	e006      	b.n	800ef02 <_strtol_l.constprop.0+0xea>
 800eef4:	b106      	cbz	r6, 800eef8 <_strtol_l.constprop.0+0xe0>
 800eef6:	4240      	negs	r0, r0
 800eef8:	f1b8 0f00 	cmp.w	r8, #0
 800eefc:	d099      	beq.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800eefe:	2a00      	cmp	r2, #0
 800ef00:	d1f6      	bne.n	800eef0 <_strtol_l.constprop.0+0xd8>
 800ef02:	f8c8 1000 	str.w	r1, [r8]
 800ef06:	e794      	b.n	800ee32 <_strtol_l.constprop.0+0x1a>
 800ef08:	080108d1 	.word	0x080108d1

0800ef0c <_strtol_r>:
 800ef0c:	f7ff bf84 	b.w	800ee18 <_strtol_l.constprop.0>

0800ef10 <__ssputs_r>:
 800ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	688e      	ldr	r6, [r1, #8]
 800ef16:	461f      	mov	r7, r3
 800ef18:	42be      	cmp	r6, r7
 800ef1a:	680b      	ldr	r3, [r1, #0]
 800ef1c:	4682      	mov	sl, r0
 800ef1e:	460c      	mov	r4, r1
 800ef20:	4690      	mov	r8, r2
 800ef22:	d82d      	bhi.n	800ef80 <__ssputs_r+0x70>
 800ef24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef2c:	d026      	beq.n	800ef7c <__ssputs_r+0x6c>
 800ef2e:	6965      	ldr	r5, [r4, #20]
 800ef30:	6909      	ldr	r1, [r1, #16]
 800ef32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef36:	eba3 0901 	sub.w	r9, r3, r1
 800ef3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef3e:	1c7b      	adds	r3, r7, #1
 800ef40:	444b      	add	r3, r9
 800ef42:	106d      	asrs	r5, r5, #1
 800ef44:	429d      	cmp	r5, r3
 800ef46:	bf38      	it	cc
 800ef48:	461d      	movcc	r5, r3
 800ef4a:	0553      	lsls	r3, r2, #21
 800ef4c:	d527      	bpl.n	800ef9e <__ssputs_r+0x8e>
 800ef4e:	4629      	mov	r1, r5
 800ef50:	f7fe fc70 	bl	800d834 <_malloc_r>
 800ef54:	4606      	mov	r6, r0
 800ef56:	b360      	cbz	r0, 800efb2 <__ssputs_r+0xa2>
 800ef58:	6921      	ldr	r1, [r4, #16]
 800ef5a:	464a      	mov	r2, r9
 800ef5c:	f000 fa18 	bl	800f390 <memcpy>
 800ef60:	89a3      	ldrh	r3, [r4, #12]
 800ef62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	6126      	str	r6, [r4, #16]
 800ef6e:	6165      	str	r5, [r4, #20]
 800ef70:	444e      	add	r6, r9
 800ef72:	eba5 0509 	sub.w	r5, r5, r9
 800ef76:	6026      	str	r6, [r4, #0]
 800ef78:	60a5      	str	r5, [r4, #8]
 800ef7a:	463e      	mov	r6, r7
 800ef7c:	42be      	cmp	r6, r7
 800ef7e:	d900      	bls.n	800ef82 <__ssputs_r+0x72>
 800ef80:	463e      	mov	r6, r7
 800ef82:	6820      	ldr	r0, [r4, #0]
 800ef84:	4632      	mov	r2, r6
 800ef86:	4641      	mov	r1, r8
 800ef88:	f000 f9c6 	bl	800f318 <memmove>
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	1b9b      	subs	r3, r3, r6
 800ef90:	60a3      	str	r3, [r4, #8]
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	4433      	add	r3, r6
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	2000      	movs	r0, #0
 800ef9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9e:	462a      	mov	r2, r5
 800efa0:	f000 fd8b 	bl	800faba <_realloc_r>
 800efa4:	4606      	mov	r6, r0
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d1e0      	bne.n	800ef6c <__ssputs_r+0x5c>
 800efaa:	6921      	ldr	r1, [r4, #16]
 800efac:	4650      	mov	r0, sl
 800efae:	f7fe fbcd 	bl	800d74c <_free_r>
 800efb2:	230c      	movs	r3, #12
 800efb4:	f8ca 3000 	str.w	r3, [sl]
 800efb8:	89a3      	ldrh	r3, [r4, #12]
 800efba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efbe:	81a3      	strh	r3, [r4, #12]
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295
 800efc4:	e7e9      	b.n	800ef9a <__ssputs_r+0x8a>
	...

0800efc8 <_svfiprintf_r>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	4698      	mov	r8, r3
 800efce:	898b      	ldrh	r3, [r1, #12]
 800efd0:	061b      	lsls	r3, r3, #24
 800efd2:	b09d      	sub	sp, #116	@ 0x74
 800efd4:	4607      	mov	r7, r0
 800efd6:	460d      	mov	r5, r1
 800efd8:	4614      	mov	r4, r2
 800efda:	d510      	bpl.n	800effe <_svfiprintf_r+0x36>
 800efdc:	690b      	ldr	r3, [r1, #16]
 800efde:	b973      	cbnz	r3, 800effe <_svfiprintf_r+0x36>
 800efe0:	2140      	movs	r1, #64	@ 0x40
 800efe2:	f7fe fc27 	bl	800d834 <_malloc_r>
 800efe6:	6028      	str	r0, [r5, #0]
 800efe8:	6128      	str	r0, [r5, #16]
 800efea:	b930      	cbnz	r0, 800effa <_svfiprintf_r+0x32>
 800efec:	230c      	movs	r3, #12
 800efee:	603b      	str	r3, [r7, #0]
 800eff0:	f04f 30ff 	mov.w	r0, #4294967295
 800eff4:	b01d      	add	sp, #116	@ 0x74
 800eff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800effa:	2340      	movs	r3, #64	@ 0x40
 800effc:	616b      	str	r3, [r5, #20]
 800effe:	2300      	movs	r3, #0
 800f000:	9309      	str	r3, [sp, #36]	@ 0x24
 800f002:	2320      	movs	r3, #32
 800f004:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f008:	f8cd 800c 	str.w	r8, [sp, #12]
 800f00c:	2330      	movs	r3, #48	@ 0x30
 800f00e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1ac <_svfiprintf_r+0x1e4>
 800f012:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f016:	f04f 0901 	mov.w	r9, #1
 800f01a:	4623      	mov	r3, r4
 800f01c:	469a      	mov	sl, r3
 800f01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f022:	b10a      	cbz	r2, 800f028 <_svfiprintf_r+0x60>
 800f024:	2a25      	cmp	r2, #37	@ 0x25
 800f026:	d1f9      	bne.n	800f01c <_svfiprintf_r+0x54>
 800f028:	ebba 0b04 	subs.w	fp, sl, r4
 800f02c:	d00b      	beq.n	800f046 <_svfiprintf_r+0x7e>
 800f02e:	465b      	mov	r3, fp
 800f030:	4622      	mov	r2, r4
 800f032:	4629      	mov	r1, r5
 800f034:	4638      	mov	r0, r7
 800f036:	f7ff ff6b 	bl	800ef10 <__ssputs_r>
 800f03a:	3001      	adds	r0, #1
 800f03c:	f000 80a7 	beq.w	800f18e <_svfiprintf_r+0x1c6>
 800f040:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f042:	445a      	add	r2, fp
 800f044:	9209      	str	r2, [sp, #36]	@ 0x24
 800f046:	f89a 3000 	ldrb.w	r3, [sl]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f000 809f 	beq.w	800f18e <_svfiprintf_r+0x1c6>
 800f050:	2300      	movs	r3, #0
 800f052:	f04f 32ff 	mov.w	r2, #4294967295
 800f056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f05a:	f10a 0a01 	add.w	sl, sl, #1
 800f05e:	9304      	str	r3, [sp, #16]
 800f060:	9307      	str	r3, [sp, #28]
 800f062:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f066:	931a      	str	r3, [sp, #104]	@ 0x68
 800f068:	4654      	mov	r4, sl
 800f06a:	2205      	movs	r2, #5
 800f06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f070:	484e      	ldr	r0, [pc, #312]	@ (800f1ac <_svfiprintf_r+0x1e4>)
 800f072:	f7f1 f935 	bl	80002e0 <memchr>
 800f076:	9a04      	ldr	r2, [sp, #16]
 800f078:	b9d8      	cbnz	r0, 800f0b2 <_svfiprintf_r+0xea>
 800f07a:	06d0      	lsls	r0, r2, #27
 800f07c:	bf44      	itt	mi
 800f07e:	2320      	movmi	r3, #32
 800f080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f084:	0711      	lsls	r1, r2, #28
 800f086:	bf44      	itt	mi
 800f088:	232b      	movmi	r3, #43	@ 0x2b
 800f08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f08e:	f89a 3000 	ldrb.w	r3, [sl]
 800f092:	2b2a      	cmp	r3, #42	@ 0x2a
 800f094:	d015      	beq.n	800f0c2 <_svfiprintf_r+0xfa>
 800f096:	9a07      	ldr	r2, [sp, #28]
 800f098:	4654      	mov	r4, sl
 800f09a:	2000      	movs	r0, #0
 800f09c:	f04f 0c0a 	mov.w	ip, #10
 800f0a0:	4621      	mov	r1, r4
 800f0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0a6:	3b30      	subs	r3, #48	@ 0x30
 800f0a8:	2b09      	cmp	r3, #9
 800f0aa:	d94b      	bls.n	800f144 <_svfiprintf_r+0x17c>
 800f0ac:	b1b0      	cbz	r0, 800f0dc <_svfiprintf_r+0x114>
 800f0ae:	9207      	str	r2, [sp, #28]
 800f0b0:	e014      	b.n	800f0dc <_svfiprintf_r+0x114>
 800f0b2:	eba0 0308 	sub.w	r3, r0, r8
 800f0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	9304      	str	r3, [sp, #16]
 800f0be:	46a2      	mov	sl, r4
 800f0c0:	e7d2      	b.n	800f068 <_svfiprintf_r+0xa0>
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	1d19      	adds	r1, r3, #4
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	9103      	str	r1, [sp, #12]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	bfbb      	ittet	lt
 800f0ce:	425b      	neglt	r3, r3
 800f0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800f0d4:	9307      	strge	r3, [sp, #28]
 800f0d6:	9307      	strlt	r3, [sp, #28]
 800f0d8:	bfb8      	it	lt
 800f0da:	9204      	strlt	r2, [sp, #16]
 800f0dc:	7823      	ldrb	r3, [r4, #0]
 800f0de:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0e0:	d10a      	bne.n	800f0f8 <_svfiprintf_r+0x130>
 800f0e2:	7863      	ldrb	r3, [r4, #1]
 800f0e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0e6:	d132      	bne.n	800f14e <_svfiprintf_r+0x186>
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	1d1a      	adds	r2, r3, #4
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	9203      	str	r2, [sp, #12]
 800f0f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f0f4:	3402      	adds	r4, #2
 800f0f6:	9305      	str	r3, [sp, #20]
 800f0f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1bc <_svfiprintf_r+0x1f4>
 800f0fc:	7821      	ldrb	r1, [r4, #0]
 800f0fe:	2203      	movs	r2, #3
 800f100:	4650      	mov	r0, sl
 800f102:	f7f1 f8ed 	bl	80002e0 <memchr>
 800f106:	b138      	cbz	r0, 800f118 <_svfiprintf_r+0x150>
 800f108:	9b04      	ldr	r3, [sp, #16]
 800f10a:	eba0 000a 	sub.w	r0, r0, sl
 800f10e:	2240      	movs	r2, #64	@ 0x40
 800f110:	4082      	lsls	r2, r0
 800f112:	4313      	orrs	r3, r2
 800f114:	3401      	adds	r4, #1
 800f116:	9304      	str	r3, [sp, #16]
 800f118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f11c:	4824      	ldr	r0, [pc, #144]	@ (800f1b0 <_svfiprintf_r+0x1e8>)
 800f11e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f122:	2206      	movs	r2, #6
 800f124:	f7f1 f8dc 	bl	80002e0 <memchr>
 800f128:	2800      	cmp	r0, #0
 800f12a:	d036      	beq.n	800f19a <_svfiprintf_r+0x1d2>
 800f12c:	4b21      	ldr	r3, [pc, #132]	@ (800f1b4 <_svfiprintf_r+0x1ec>)
 800f12e:	bb1b      	cbnz	r3, 800f178 <_svfiprintf_r+0x1b0>
 800f130:	9b03      	ldr	r3, [sp, #12]
 800f132:	3307      	adds	r3, #7
 800f134:	f023 0307 	bic.w	r3, r3, #7
 800f138:	3308      	adds	r3, #8
 800f13a:	9303      	str	r3, [sp, #12]
 800f13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f13e:	4433      	add	r3, r6
 800f140:	9309      	str	r3, [sp, #36]	@ 0x24
 800f142:	e76a      	b.n	800f01a <_svfiprintf_r+0x52>
 800f144:	fb0c 3202 	mla	r2, ip, r2, r3
 800f148:	460c      	mov	r4, r1
 800f14a:	2001      	movs	r0, #1
 800f14c:	e7a8      	b.n	800f0a0 <_svfiprintf_r+0xd8>
 800f14e:	2300      	movs	r3, #0
 800f150:	3401      	adds	r4, #1
 800f152:	9305      	str	r3, [sp, #20]
 800f154:	4619      	mov	r1, r3
 800f156:	f04f 0c0a 	mov.w	ip, #10
 800f15a:	4620      	mov	r0, r4
 800f15c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f160:	3a30      	subs	r2, #48	@ 0x30
 800f162:	2a09      	cmp	r2, #9
 800f164:	d903      	bls.n	800f16e <_svfiprintf_r+0x1a6>
 800f166:	2b00      	cmp	r3, #0
 800f168:	d0c6      	beq.n	800f0f8 <_svfiprintf_r+0x130>
 800f16a:	9105      	str	r1, [sp, #20]
 800f16c:	e7c4      	b.n	800f0f8 <_svfiprintf_r+0x130>
 800f16e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f172:	4604      	mov	r4, r0
 800f174:	2301      	movs	r3, #1
 800f176:	e7f0      	b.n	800f15a <_svfiprintf_r+0x192>
 800f178:	ab03      	add	r3, sp, #12
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	462a      	mov	r2, r5
 800f17e:	4b0e      	ldr	r3, [pc, #56]	@ (800f1b8 <_svfiprintf_r+0x1f0>)
 800f180:	a904      	add	r1, sp, #16
 800f182:	4638      	mov	r0, r7
 800f184:	f7fc fd70 	bl	800bc68 <_printf_float>
 800f188:	1c42      	adds	r2, r0, #1
 800f18a:	4606      	mov	r6, r0
 800f18c:	d1d6      	bne.n	800f13c <_svfiprintf_r+0x174>
 800f18e:	89ab      	ldrh	r3, [r5, #12]
 800f190:	065b      	lsls	r3, r3, #25
 800f192:	f53f af2d 	bmi.w	800eff0 <_svfiprintf_r+0x28>
 800f196:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f198:	e72c      	b.n	800eff4 <_svfiprintf_r+0x2c>
 800f19a:	ab03      	add	r3, sp, #12
 800f19c:	9300      	str	r3, [sp, #0]
 800f19e:	462a      	mov	r2, r5
 800f1a0:	4b05      	ldr	r3, [pc, #20]	@ (800f1b8 <_svfiprintf_r+0x1f0>)
 800f1a2:	a904      	add	r1, sp, #16
 800f1a4:	4638      	mov	r0, r7
 800f1a6:	f7fc ffe7 	bl	800c178 <_printf_i>
 800f1aa:	e7ed      	b.n	800f188 <_svfiprintf_r+0x1c0>
 800f1ac:	080109d1 	.word	0x080109d1
 800f1b0:	080109db 	.word	0x080109db
 800f1b4:	0800bc69 	.word	0x0800bc69
 800f1b8:	0800ef11 	.word	0x0800ef11
 800f1bc:	080109d7 	.word	0x080109d7

0800f1c0 <__sflush_r>:
 800f1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c8:	0716      	lsls	r6, r2, #28
 800f1ca:	4605      	mov	r5, r0
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	d454      	bmi.n	800f27a <__sflush_r+0xba>
 800f1d0:	684b      	ldr	r3, [r1, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	dc02      	bgt.n	800f1dc <__sflush_r+0x1c>
 800f1d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	dd48      	ble.n	800f26e <__sflush_r+0xae>
 800f1dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	d045      	beq.n	800f26e <__sflush_r+0xae>
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f1e8:	682f      	ldr	r7, [r5, #0]
 800f1ea:	6a21      	ldr	r1, [r4, #32]
 800f1ec:	602b      	str	r3, [r5, #0]
 800f1ee:	d030      	beq.n	800f252 <__sflush_r+0x92>
 800f1f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f1f2:	89a3      	ldrh	r3, [r4, #12]
 800f1f4:	0759      	lsls	r1, r3, #29
 800f1f6:	d505      	bpl.n	800f204 <__sflush_r+0x44>
 800f1f8:	6863      	ldr	r3, [r4, #4]
 800f1fa:	1ad2      	subs	r2, r2, r3
 800f1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1fe:	b10b      	cbz	r3, 800f204 <__sflush_r+0x44>
 800f200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f202:	1ad2      	subs	r2, r2, r3
 800f204:	2300      	movs	r3, #0
 800f206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f208:	6a21      	ldr	r1, [r4, #32]
 800f20a:	4628      	mov	r0, r5
 800f20c:	47b0      	blx	r6
 800f20e:	1c43      	adds	r3, r0, #1
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	d106      	bne.n	800f222 <__sflush_r+0x62>
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	291d      	cmp	r1, #29
 800f218:	d82b      	bhi.n	800f272 <__sflush_r+0xb2>
 800f21a:	4a2a      	ldr	r2, [pc, #168]	@ (800f2c4 <__sflush_r+0x104>)
 800f21c:	410a      	asrs	r2, r1
 800f21e:	07d6      	lsls	r6, r2, #31
 800f220:	d427      	bmi.n	800f272 <__sflush_r+0xb2>
 800f222:	2200      	movs	r2, #0
 800f224:	6062      	str	r2, [r4, #4]
 800f226:	04d9      	lsls	r1, r3, #19
 800f228:	6922      	ldr	r2, [r4, #16]
 800f22a:	6022      	str	r2, [r4, #0]
 800f22c:	d504      	bpl.n	800f238 <__sflush_r+0x78>
 800f22e:	1c42      	adds	r2, r0, #1
 800f230:	d101      	bne.n	800f236 <__sflush_r+0x76>
 800f232:	682b      	ldr	r3, [r5, #0]
 800f234:	b903      	cbnz	r3, 800f238 <__sflush_r+0x78>
 800f236:	6560      	str	r0, [r4, #84]	@ 0x54
 800f238:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f23a:	602f      	str	r7, [r5, #0]
 800f23c:	b1b9      	cbz	r1, 800f26e <__sflush_r+0xae>
 800f23e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f242:	4299      	cmp	r1, r3
 800f244:	d002      	beq.n	800f24c <__sflush_r+0x8c>
 800f246:	4628      	mov	r0, r5
 800f248:	f7fe fa80 	bl	800d74c <_free_r>
 800f24c:	2300      	movs	r3, #0
 800f24e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f250:	e00d      	b.n	800f26e <__sflush_r+0xae>
 800f252:	2301      	movs	r3, #1
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	4602      	mov	r2, r0
 800f25a:	1c50      	adds	r0, r2, #1
 800f25c:	d1c9      	bne.n	800f1f2 <__sflush_r+0x32>
 800f25e:	682b      	ldr	r3, [r5, #0]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d0c6      	beq.n	800f1f2 <__sflush_r+0x32>
 800f264:	2b1d      	cmp	r3, #29
 800f266:	d001      	beq.n	800f26c <__sflush_r+0xac>
 800f268:	2b16      	cmp	r3, #22
 800f26a:	d11e      	bne.n	800f2aa <__sflush_r+0xea>
 800f26c:	602f      	str	r7, [r5, #0]
 800f26e:	2000      	movs	r0, #0
 800f270:	e022      	b.n	800f2b8 <__sflush_r+0xf8>
 800f272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f276:	b21b      	sxth	r3, r3
 800f278:	e01b      	b.n	800f2b2 <__sflush_r+0xf2>
 800f27a:	690f      	ldr	r7, [r1, #16]
 800f27c:	2f00      	cmp	r7, #0
 800f27e:	d0f6      	beq.n	800f26e <__sflush_r+0xae>
 800f280:	0793      	lsls	r3, r2, #30
 800f282:	680e      	ldr	r6, [r1, #0]
 800f284:	bf08      	it	eq
 800f286:	694b      	ldreq	r3, [r1, #20]
 800f288:	600f      	str	r7, [r1, #0]
 800f28a:	bf18      	it	ne
 800f28c:	2300      	movne	r3, #0
 800f28e:	eba6 0807 	sub.w	r8, r6, r7
 800f292:	608b      	str	r3, [r1, #8]
 800f294:	f1b8 0f00 	cmp.w	r8, #0
 800f298:	dde9      	ble.n	800f26e <__sflush_r+0xae>
 800f29a:	6a21      	ldr	r1, [r4, #32]
 800f29c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f29e:	4643      	mov	r3, r8
 800f2a0:	463a      	mov	r2, r7
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	47b0      	blx	r6
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	dc08      	bgt.n	800f2bc <__sflush_r+0xfc>
 800f2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2bc:	4407      	add	r7, r0
 800f2be:	eba8 0800 	sub.w	r8, r8, r0
 800f2c2:	e7e7      	b.n	800f294 <__sflush_r+0xd4>
 800f2c4:	dfbffffe 	.word	0xdfbffffe

0800f2c8 <_fflush_r>:
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	690b      	ldr	r3, [r1, #16]
 800f2cc:	4605      	mov	r5, r0
 800f2ce:	460c      	mov	r4, r1
 800f2d0:	b913      	cbnz	r3, 800f2d8 <_fflush_r+0x10>
 800f2d2:	2500      	movs	r5, #0
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	bd38      	pop	{r3, r4, r5, pc}
 800f2d8:	b118      	cbz	r0, 800f2e2 <_fflush_r+0x1a>
 800f2da:	6a03      	ldr	r3, [r0, #32]
 800f2dc:	b90b      	cbnz	r3, 800f2e2 <_fflush_r+0x1a>
 800f2de:	f7fd fb03 	bl	800c8e8 <__sinit>
 800f2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0f3      	beq.n	800f2d2 <_fflush_r+0xa>
 800f2ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f2ec:	07d0      	lsls	r0, r2, #31
 800f2ee:	d404      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f0:	0599      	lsls	r1, r3, #22
 800f2f2:	d402      	bmi.n	800f2fa <_fflush_r+0x32>
 800f2f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f2f6:	f7fd fc42 	bl	800cb7e <__retarget_lock_acquire_recursive>
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f7ff ff5f 	bl	800f1c0 <__sflush_r>
 800f302:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f304:	07da      	lsls	r2, r3, #31
 800f306:	4605      	mov	r5, r0
 800f308:	d4e4      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f30a:	89a3      	ldrh	r3, [r4, #12]
 800f30c:	059b      	lsls	r3, r3, #22
 800f30e:	d4e1      	bmi.n	800f2d4 <_fflush_r+0xc>
 800f310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f312:	f7fd fc35 	bl	800cb80 <__retarget_lock_release_recursive>
 800f316:	e7dd      	b.n	800f2d4 <_fflush_r+0xc>

0800f318 <memmove>:
 800f318:	4288      	cmp	r0, r1
 800f31a:	b510      	push	{r4, lr}
 800f31c:	eb01 0402 	add.w	r4, r1, r2
 800f320:	d902      	bls.n	800f328 <memmove+0x10>
 800f322:	4284      	cmp	r4, r0
 800f324:	4623      	mov	r3, r4
 800f326:	d807      	bhi.n	800f338 <memmove+0x20>
 800f328:	1e43      	subs	r3, r0, #1
 800f32a:	42a1      	cmp	r1, r4
 800f32c:	d008      	beq.n	800f340 <memmove+0x28>
 800f32e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f332:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f336:	e7f8      	b.n	800f32a <memmove+0x12>
 800f338:	4402      	add	r2, r0
 800f33a:	4601      	mov	r1, r0
 800f33c:	428a      	cmp	r2, r1
 800f33e:	d100      	bne.n	800f342 <memmove+0x2a>
 800f340:	bd10      	pop	{r4, pc}
 800f342:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f346:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f34a:	e7f7      	b.n	800f33c <memmove+0x24>

0800f34c <strncmp>:
 800f34c:	b510      	push	{r4, lr}
 800f34e:	b16a      	cbz	r2, 800f36c <strncmp+0x20>
 800f350:	3901      	subs	r1, #1
 800f352:	1884      	adds	r4, r0, r2
 800f354:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f358:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f35c:	429a      	cmp	r2, r3
 800f35e:	d103      	bne.n	800f368 <strncmp+0x1c>
 800f360:	42a0      	cmp	r0, r4
 800f362:	d001      	beq.n	800f368 <strncmp+0x1c>
 800f364:	2a00      	cmp	r2, #0
 800f366:	d1f5      	bne.n	800f354 <strncmp+0x8>
 800f368:	1ad0      	subs	r0, r2, r3
 800f36a:	bd10      	pop	{r4, pc}
 800f36c:	4610      	mov	r0, r2
 800f36e:	e7fc      	b.n	800f36a <strncmp+0x1e>

0800f370 <_sbrk_r>:
 800f370:	b538      	push	{r3, r4, r5, lr}
 800f372:	4d06      	ldr	r5, [pc, #24]	@ (800f38c <_sbrk_r+0x1c>)
 800f374:	2300      	movs	r3, #0
 800f376:	4604      	mov	r4, r0
 800f378:	4608      	mov	r0, r1
 800f37a:	602b      	str	r3, [r5, #0]
 800f37c:	f7f3 f968 	bl	8002650 <_sbrk>
 800f380:	1c43      	adds	r3, r0, #1
 800f382:	d102      	bne.n	800f38a <_sbrk_r+0x1a>
 800f384:	682b      	ldr	r3, [r5, #0]
 800f386:	b103      	cbz	r3, 800f38a <_sbrk_r+0x1a>
 800f388:	6023      	str	r3, [r4, #0]
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	24000788 	.word	0x24000788

0800f390 <memcpy>:
 800f390:	440a      	add	r2, r1
 800f392:	4291      	cmp	r1, r2
 800f394:	f100 33ff 	add.w	r3, r0, #4294967295
 800f398:	d100      	bne.n	800f39c <memcpy+0xc>
 800f39a:	4770      	bx	lr
 800f39c:	b510      	push	{r4, lr}
 800f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	d1f9      	bne.n	800f39e <memcpy+0xe>
 800f3aa:	bd10      	pop	{r4, pc}
 800f3ac:	0000      	movs	r0, r0
	...

0800f3b0 <nan>:
 800f3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f3b8 <nan+0x8>
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	00000000 	.word	0x00000000
 800f3bc:	7ff80000 	.word	0x7ff80000

0800f3c0 <__assert_func>:
 800f3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f3c2:	4614      	mov	r4, r2
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	4b09      	ldr	r3, [pc, #36]	@ (800f3ec <__assert_func+0x2c>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	68d8      	ldr	r0, [r3, #12]
 800f3ce:	b954      	cbnz	r4, 800f3e6 <__assert_func+0x26>
 800f3d0:	4b07      	ldr	r3, [pc, #28]	@ (800f3f0 <__assert_func+0x30>)
 800f3d2:	461c      	mov	r4, r3
 800f3d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f3d8:	9100      	str	r1, [sp, #0]
 800f3da:	462b      	mov	r3, r5
 800f3dc:	4905      	ldr	r1, [pc, #20]	@ (800f3f4 <__assert_func+0x34>)
 800f3de:	f000 fba7 	bl	800fb30 <fiprintf>
 800f3e2:	f000 fbb7 	bl	800fb54 <abort>
 800f3e6:	4b04      	ldr	r3, [pc, #16]	@ (800f3f8 <__assert_func+0x38>)
 800f3e8:	e7f4      	b.n	800f3d4 <__assert_func+0x14>
 800f3ea:	bf00      	nop
 800f3ec:	24000020 	.word	0x24000020
 800f3f0:	08010a25 	.word	0x08010a25
 800f3f4:	080109f7 	.word	0x080109f7
 800f3f8:	080109ea 	.word	0x080109ea

0800f3fc <_calloc_r>:
 800f3fc:	b570      	push	{r4, r5, r6, lr}
 800f3fe:	fba1 5402 	umull	r5, r4, r1, r2
 800f402:	b93c      	cbnz	r4, 800f414 <_calloc_r+0x18>
 800f404:	4629      	mov	r1, r5
 800f406:	f7fe fa15 	bl	800d834 <_malloc_r>
 800f40a:	4606      	mov	r6, r0
 800f40c:	b928      	cbnz	r0, 800f41a <_calloc_r+0x1e>
 800f40e:	2600      	movs	r6, #0
 800f410:	4630      	mov	r0, r6
 800f412:	bd70      	pop	{r4, r5, r6, pc}
 800f414:	220c      	movs	r2, #12
 800f416:	6002      	str	r2, [r0, #0]
 800f418:	e7f9      	b.n	800f40e <_calloc_r+0x12>
 800f41a:	462a      	mov	r2, r5
 800f41c:	4621      	mov	r1, r4
 800f41e:	f7fd fb30 	bl	800ca82 <memset>
 800f422:	e7f5      	b.n	800f410 <_calloc_r+0x14>

0800f424 <rshift>:
 800f424:	6903      	ldr	r3, [r0, #16]
 800f426:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f42a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f42e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f432:	f100 0414 	add.w	r4, r0, #20
 800f436:	dd45      	ble.n	800f4c4 <rshift+0xa0>
 800f438:	f011 011f 	ands.w	r1, r1, #31
 800f43c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f440:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f444:	d10c      	bne.n	800f460 <rshift+0x3c>
 800f446:	f100 0710 	add.w	r7, r0, #16
 800f44a:	4629      	mov	r1, r5
 800f44c:	42b1      	cmp	r1, r6
 800f44e:	d334      	bcc.n	800f4ba <rshift+0x96>
 800f450:	1a9b      	subs	r3, r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	1eea      	subs	r2, r5, #3
 800f456:	4296      	cmp	r6, r2
 800f458:	bf38      	it	cc
 800f45a:	2300      	movcc	r3, #0
 800f45c:	4423      	add	r3, r4
 800f45e:	e015      	b.n	800f48c <rshift+0x68>
 800f460:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f464:	f1c1 0820 	rsb	r8, r1, #32
 800f468:	40cf      	lsrs	r7, r1
 800f46a:	f105 0e04 	add.w	lr, r5, #4
 800f46e:	46a1      	mov	r9, r4
 800f470:	4576      	cmp	r6, lr
 800f472:	46f4      	mov	ip, lr
 800f474:	d815      	bhi.n	800f4a2 <rshift+0x7e>
 800f476:	1a9a      	subs	r2, r3, r2
 800f478:	0092      	lsls	r2, r2, #2
 800f47a:	3a04      	subs	r2, #4
 800f47c:	3501      	adds	r5, #1
 800f47e:	42ae      	cmp	r6, r5
 800f480:	bf38      	it	cc
 800f482:	2200      	movcc	r2, #0
 800f484:	18a3      	adds	r3, r4, r2
 800f486:	50a7      	str	r7, [r4, r2]
 800f488:	b107      	cbz	r7, 800f48c <rshift+0x68>
 800f48a:	3304      	adds	r3, #4
 800f48c:	1b1a      	subs	r2, r3, r4
 800f48e:	42a3      	cmp	r3, r4
 800f490:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f494:	bf08      	it	eq
 800f496:	2300      	moveq	r3, #0
 800f498:	6102      	str	r2, [r0, #16]
 800f49a:	bf08      	it	eq
 800f49c:	6143      	streq	r3, [r0, #20]
 800f49e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4a2:	f8dc c000 	ldr.w	ip, [ip]
 800f4a6:	fa0c fc08 	lsl.w	ip, ip, r8
 800f4aa:	ea4c 0707 	orr.w	r7, ip, r7
 800f4ae:	f849 7b04 	str.w	r7, [r9], #4
 800f4b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f4b6:	40cf      	lsrs	r7, r1
 800f4b8:	e7da      	b.n	800f470 <rshift+0x4c>
 800f4ba:	f851 cb04 	ldr.w	ip, [r1], #4
 800f4be:	f847 cf04 	str.w	ip, [r7, #4]!
 800f4c2:	e7c3      	b.n	800f44c <rshift+0x28>
 800f4c4:	4623      	mov	r3, r4
 800f4c6:	e7e1      	b.n	800f48c <rshift+0x68>

0800f4c8 <__hexdig_fun>:
 800f4c8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	d802      	bhi.n	800f4d6 <__hexdig_fun+0xe>
 800f4d0:	3820      	subs	r0, #32
 800f4d2:	b2c0      	uxtb	r0, r0
 800f4d4:	4770      	bx	lr
 800f4d6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	d801      	bhi.n	800f4e2 <__hexdig_fun+0x1a>
 800f4de:	3847      	subs	r0, #71	@ 0x47
 800f4e0:	e7f7      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4e2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f4e6:	2b05      	cmp	r3, #5
 800f4e8:	d801      	bhi.n	800f4ee <__hexdig_fun+0x26>
 800f4ea:	3827      	subs	r0, #39	@ 0x27
 800f4ec:	e7f1      	b.n	800f4d2 <__hexdig_fun+0xa>
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	4770      	bx	lr
	...

0800f4f4 <__gethex>:
 800f4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f8:	b085      	sub	sp, #20
 800f4fa:	468a      	mov	sl, r1
 800f4fc:	9302      	str	r3, [sp, #8]
 800f4fe:	680b      	ldr	r3, [r1, #0]
 800f500:	9001      	str	r0, [sp, #4]
 800f502:	4690      	mov	r8, r2
 800f504:	1c9c      	adds	r4, r3, #2
 800f506:	46a1      	mov	r9, r4
 800f508:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f50c:	2830      	cmp	r0, #48	@ 0x30
 800f50e:	d0fa      	beq.n	800f506 <__gethex+0x12>
 800f510:	eba9 0303 	sub.w	r3, r9, r3
 800f514:	f1a3 0b02 	sub.w	fp, r3, #2
 800f518:	f7ff ffd6 	bl	800f4c8 <__hexdig_fun>
 800f51c:	4605      	mov	r5, r0
 800f51e:	2800      	cmp	r0, #0
 800f520:	d168      	bne.n	800f5f4 <__gethex+0x100>
 800f522:	49a0      	ldr	r1, [pc, #640]	@ (800f7a4 <__gethex+0x2b0>)
 800f524:	2201      	movs	r2, #1
 800f526:	4648      	mov	r0, r9
 800f528:	f7ff ff10 	bl	800f34c <strncmp>
 800f52c:	4607      	mov	r7, r0
 800f52e:	2800      	cmp	r0, #0
 800f530:	d167      	bne.n	800f602 <__gethex+0x10e>
 800f532:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f536:	4626      	mov	r6, r4
 800f538:	f7ff ffc6 	bl	800f4c8 <__hexdig_fun>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d062      	beq.n	800f606 <__gethex+0x112>
 800f540:	4623      	mov	r3, r4
 800f542:	7818      	ldrb	r0, [r3, #0]
 800f544:	2830      	cmp	r0, #48	@ 0x30
 800f546:	4699      	mov	r9, r3
 800f548:	f103 0301 	add.w	r3, r3, #1
 800f54c:	d0f9      	beq.n	800f542 <__gethex+0x4e>
 800f54e:	f7ff ffbb 	bl	800f4c8 <__hexdig_fun>
 800f552:	fab0 f580 	clz	r5, r0
 800f556:	096d      	lsrs	r5, r5, #5
 800f558:	f04f 0b01 	mov.w	fp, #1
 800f55c:	464a      	mov	r2, r9
 800f55e:	4616      	mov	r6, r2
 800f560:	3201      	adds	r2, #1
 800f562:	7830      	ldrb	r0, [r6, #0]
 800f564:	f7ff ffb0 	bl	800f4c8 <__hexdig_fun>
 800f568:	2800      	cmp	r0, #0
 800f56a:	d1f8      	bne.n	800f55e <__gethex+0x6a>
 800f56c:	498d      	ldr	r1, [pc, #564]	@ (800f7a4 <__gethex+0x2b0>)
 800f56e:	2201      	movs	r2, #1
 800f570:	4630      	mov	r0, r6
 800f572:	f7ff feeb 	bl	800f34c <strncmp>
 800f576:	2800      	cmp	r0, #0
 800f578:	d13f      	bne.n	800f5fa <__gethex+0x106>
 800f57a:	b944      	cbnz	r4, 800f58e <__gethex+0x9a>
 800f57c:	1c74      	adds	r4, r6, #1
 800f57e:	4622      	mov	r2, r4
 800f580:	4616      	mov	r6, r2
 800f582:	3201      	adds	r2, #1
 800f584:	7830      	ldrb	r0, [r6, #0]
 800f586:	f7ff ff9f 	bl	800f4c8 <__hexdig_fun>
 800f58a:	2800      	cmp	r0, #0
 800f58c:	d1f8      	bne.n	800f580 <__gethex+0x8c>
 800f58e:	1ba4      	subs	r4, r4, r6
 800f590:	00a7      	lsls	r7, r4, #2
 800f592:	7833      	ldrb	r3, [r6, #0]
 800f594:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f598:	2b50      	cmp	r3, #80	@ 0x50
 800f59a:	d13e      	bne.n	800f61a <__gethex+0x126>
 800f59c:	7873      	ldrb	r3, [r6, #1]
 800f59e:	2b2b      	cmp	r3, #43	@ 0x2b
 800f5a0:	d033      	beq.n	800f60a <__gethex+0x116>
 800f5a2:	2b2d      	cmp	r3, #45	@ 0x2d
 800f5a4:	d034      	beq.n	800f610 <__gethex+0x11c>
 800f5a6:	1c71      	adds	r1, r6, #1
 800f5a8:	2400      	movs	r4, #0
 800f5aa:	7808      	ldrb	r0, [r1, #0]
 800f5ac:	f7ff ff8c 	bl	800f4c8 <__hexdig_fun>
 800f5b0:	1e43      	subs	r3, r0, #1
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	2b18      	cmp	r3, #24
 800f5b6:	d830      	bhi.n	800f61a <__gethex+0x126>
 800f5b8:	f1a0 0210 	sub.w	r2, r0, #16
 800f5bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f5c0:	f7ff ff82 	bl	800f4c8 <__hexdig_fun>
 800f5c4:	f100 3cff 	add.w	ip, r0, #4294967295
 800f5c8:	fa5f fc8c 	uxtb.w	ip, ip
 800f5cc:	f1bc 0f18 	cmp.w	ip, #24
 800f5d0:	f04f 030a 	mov.w	r3, #10
 800f5d4:	d91e      	bls.n	800f614 <__gethex+0x120>
 800f5d6:	b104      	cbz	r4, 800f5da <__gethex+0xe6>
 800f5d8:	4252      	negs	r2, r2
 800f5da:	4417      	add	r7, r2
 800f5dc:	f8ca 1000 	str.w	r1, [sl]
 800f5e0:	b1ed      	cbz	r5, 800f61e <__gethex+0x12a>
 800f5e2:	f1bb 0f00 	cmp.w	fp, #0
 800f5e6:	bf0c      	ite	eq
 800f5e8:	2506      	moveq	r5, #6
 800f5ea:	2500      	movne	r5, #0
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	b005      	add	sp, #20
 800f5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f4:	2500      	movs	r5, #0
 800f5f6:	462c      	mov	r4, r5
 800f5f8:	e7b0      	b.n	800f55c <__gethex+0x68>
 800f5fa:	2c00      	cmp	r4, #0
 800f5fc:	d1c7      	bne.n	800f58e <__gethex+0x9a>
 800f5fe:	4627      	mov	r7, r4
 800f600:	e7c7      	b.n	800f592 <__gethex+0x9e>
 800f602:	464e      	mov	r6, r9
 800f604:	462f      	mov	r7, r5
 800f606:	2501      	movs	r5, #1
 800f608:	e7c3      	b.n	800f592 <__gethex+0x9e>
 800f60a:	2400      	movs	r4, #0
 800f60c:	1cb1      	adds	r1, r6, #2
 800f60e:	e7cc      	b.n	800f5aa <__gethex+0xb6>
 800f610:	2401      	movs	r4, #1
 800f612:	e7fb      	b.n	800f60c <__gethex+0x118>
 800f614:	fb03 0002 	mla	r0, r3, r2, r0
 800f618:	e7ce      	b.n	800f5b8 <__gethex+0xc4>
 800f61a:	4631      	mov	r1, r6
 800f61c:	e7de      	b.n	800f5dc <__gethex+0xe8>
 800f61e:	eba6 0309 	sub.w	r3, r6, r9
 800f622:	3b01      	subs	r3, #1
 800f624:	4629      	mov	r1, r5
 800f626:	2b07      	cmp	r3, #7
 800f628:	dc0a      	bgt.n	800f640 <__gethex+0x14c>
 800f62a:	9801      	ldr	r0, [sp, #4]
 800f62c:	f7fe f98e 	bl	800d94c <_Balloc>
 800f630:	4604      	mov	r4, r0
 800f632:	b940      	cbnz	r0, 800f646 <__gethex+0x152>
 800f634:	4b5c      	ldr	r3, [pc, #368]	@ (800f7a8 <__gethex+0x2b4>)
 800f636:	4602      	mov	r2, r0
 800f638:	21e4      	movs	r1, #228	@ 0xe4
 800f63a:	485c      	ldr	r0, [pc, #368]	@ (800f7ac <__gethex+0x2b8>)
 800f63c:	f7ff fec0 	bl	800f3c0 <__assert_func>
 800f640:	3101      	adds	r1, #1
 800f642:	105b      	asrs	r3, r3, #1
 800f644:	e7ef      	b.n	800f626 <__gethex+0x132>
 800f646:	f100 0a14 	add.w	sl, r0, #20
 800f64a:	2300      	movs	r3, #0
 800f64c:	4655      	mov	r5, sl
 800f64e:	469b      	mov	fp, r3
 800f650:	45b1      	cmp	r9, r6
 800f652:	d337      	bcc.n	800f6c4 <__gethex+0x1d0>
 800f654:	f845 bb04 	str.w	fp, [r5], #4
 800f658:	eba5 050a 	sub.w	r5, r5, sl
 800f65c:	10ad      	asrs	r5, r5, #2
 800f65e:	6125      	str	r5, [r4, #16]
 800f660:	4658      	mov	r0, fp
 800f662:	f7fe fa65 	bl	800db30 <__hi0bits>
 800f666:	016d      	lsls	r5, r5, #5
 800f668:	f8d8 6000 	ldr.w	r6, [r8]
 800f66c:	1a2d      	subs	r5, r5, r0
 800f66e:	42b5      	cmp	r5, r6
 800f670:	dd54      	ble.n	800f71c <__gethex+0x228>
 800f672:	1bad      	subs	r5, r5, r6
 800f674:	4629      	mov	r1, r5
 800f676:	4620      	mov	r0, r4
 800f678:	f7fe fdf6 	bl	800e268 <__any_on>
 800f67c:	4681      	mov	r9, r0
 800f67e:	b178      	cbz	r0, 800f6a0 <__gethex+0x1ac>
 800f680:	1e6b      	subs	r3, r5, #1
 800f682:	1159      	asrs	r1, r3, #5
 800f684:	f003 021f 	and.w	r2, r3, #31
 800f688:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f68c:	f04f 0901 	mov.w	r9, #1
 800f690:	fa09 f202 	lsl.w	r2, r9, r2
 800f694:	420a      	tst	r2, r1
 800f696:	d003      	beq.n	800f6a0 <__gethex+0x1ac>
 800f698:	454b      	cmp	r3, r9
 800f69a:	dc36      	bgt.n	800f70a <__gethex+0x216>
 800f69c:	f04f 0902 	mov.w	r9, #2
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff febe 	bl	800f424 <rshift>
 800f6a8:	442f      	add	r7, r5
 800f6aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6ae:	42bb      	cmp	r3, r7
 800f6b0:	da42      	bge.n	800f738 <__gethex+0x244>
 800f6b2:	9801      	ldr	r0, [sp, #4]
 800f6b4:	4621      	mov	r1, r4
 800f6b6:	f7fe f989 	bl	800d9cc <_Bfree>
 800f6ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6bc:	2300      	movs	r3, #0
 800f6be:	6013      	str	r3, [r2, #0]
 800f6c0:	25a3      	movs	r5, #163	@ 0xa3
 800f6c2:	e793      	b.n	800f5ec <__gethex+0xf8>
 800f6c4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f6c8:	2a2e      	cmp	r2, #46	@ 0x2e
 800f6ca:	d012      	beq.n	800f6f2 <__gethex+0x1fe>
 800f6cc:	2b20      	cmp	r3, #32
 800f6ce:	d104      	bne.n	800f6da <__gethex+0x1e6>
 800f6d0:	f845 bb04 	str.w	fp, [r5], #4
 800f6d4:	f04f 0b00 	mov.w	fp, #0
 800f6d8:	465b      	mov	r3, fp
 800f6da:	7830      	ldrb	r0, [r6, #0]
 800f6dc:	9303      	str	r3, [sp, #12]
 800f6de:	f7ff fef3 	bl	800f4c8 <__hexdig_fun>
 800f6e2:	9b03      	ldr	r3, [sp, #12]
 800f6e4:	f000 000f 	and.w	r0, r0, #15
 800f6e8:	4098      	lsls	r0, r3
 800f6ea:	ea4b 0b00 	orr.w	fp, fp, r0
 800f6ee:	3304      	adds	r3, #4
 800f6f0:	e7ae      	b.n	800f650 <__gethex+0x15c>
 800f6f2:	45b1      	cmp	r9, r6
 800f6f4:	d8ea      	bhi.n	800f6cc <__gethex+0x1d8>
 800f6f6:	492b      	ldr	r1, [pc, #172]	@ (800f7a4 <__gethex+0x2b0>)
 800f6f8:	9303      	str	r3, [sp, #12]
 800f6fa:	2201      	movs	r2, #1
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	f7ff fe25 	bl	800f34c <strncmp>
 800f702:	9b03      	ldr	r3, [sp, #12]
 800f704:	2800      	cmp	r0, #0
 800f706:	d1e1      	bne.n	800f6cc <__gethex+0x1d8>
 800f708:	e7a2      	b.n	800f650 <__gethex+0x15c>
 800f70a:	1ea9      	subs	r1, r5, #2
 800f70c:	4620      	mov	r0, r4
 800f70e:	f7fe fdab 	bl	800e268 <__any_on>
 800f712:	2800      	cmp	r0, #0
 800f714:	d0c2      	beq.n	800f69c <__gethex+0x1a8>
 800f716:	f04f 0903 	mov.w	r9, #3
 800f71a:	e7c1      	b.n	800f6a0 <__gethex+0x1ac>
 800f71c:	da09      	bge.n	800f732 <__gethex+0x23e>
 800f71e:	1b75      	subs	r5, r6, r5
 800f720:	4621      	mov	r1, r4
 800f722:	9801      	ldr	r0, [sp, #4]
 800f724:	462a      	mov	r2, r5
 800f726:	f7fe fb69 	bl	800ddfc <__lshift>
 800f72a:	1b7f      	subs	r7, r7, r5
 800f72c:	4604      	mov	r4, r0
 800f72e:	f100 0a14 	add.w	sl, r0, #20
 800f732:	f04f 0900 	mov.w	r9, #0
 800f736:	e7b8      	b.n	800f6aa <__gethex+0x1b6>
 800f738:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f73c:	42bd      	cmp	r5, r7
 800f73e:	dd6f      	ble.n	800f820 <__gethex+0x32c>
 800f740:	1bed      	subs	r5, r5, r7
 800f742:	42ae      	cmp	r6, r5
 800f744:	dc34      	bgt.n	800f7b0 <__gethex+0x2bc>
 800f746:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f74a:	2b02      	cmp	r3, #2
 800f74c:	d022      	beq.n	800f794 <__gethex+0x2a0>
 800f74e:	2b03      	cmp	r3, #3
 800f750:	d024      	beq.n	800f79c <__gethex+0x2a8>
 800f752:	2b01      	cmp	r3, #1
 800f754:	d115      	bne.n	800f782 <__gethex+0x28e>
 800f756:	42ae      	cmp	r6, r5
 800f758:	d113      	bne.n	800f782 <__gethex+0x28e>
 800f75a:	2e01      	cmp	r6, #1
 800f75c:	d10b      	bne.n	800f776 <__gethex+0x282>
 800f75e:	9a02      	ldr	r2, [sp, #8]
 800f760:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f764:	6013      	str	r3, [r2, #0]
 800f766:	2301      	movs	r3, #1
 800f768:	6123      	str	r3, [r4, #16]
 800f76a:	f8ca 3000 	str.w	r3, [sl]
 800f76e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f770:	2562      	movs	r5, #98	@ 0x62
 800f772:	601c      	str	r4, [r3, #0]
 800f774:	e73a      	b.n	800f5ec <__gethex+0xf8>
 800f776:	1e71      	subs	r1, r6, #1
 800f778:	4620      	mov	r0, r4
 800f77a:	f7fe fd75 	bl	800e268 <__any_on>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d1ed      	bne.n	800f75e <__gethex+0x26a>
 800f782:	9801      	ldr	r0, [sp, #4]
 800f784:	4621      	mov	r1, r4
 800f786:	f7fe f921 	bl	800d9cc <_Bfree>
 800f78a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f78c:	2300      	movs	r3, #0
 800f78e:	6013      	str	r3, [r2, #0]
 800f790:	2550      	movs	r5, #80	@ 0x50
 800f792:	e72b      	b.n	800f5ec <__gethex+0xf8>
 800f794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1f3      	bne.n	800f782 <__gethex+0x28e>
 800f79a:	e7e0      	b.n	800f75e <__gethex+0x26a>
 800f79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1dd      	bne.n	800f75e <__gethex+0x26a>
 800f7a2:	e7ee      	b.n	800f782 <__gethex+0x28e>
 800f7a4:	08010878 	.word	0x08010878
 800f7a8:	0801070d 	.word	0x0801070d
 800f7ac:	08010a26 	.word	0x08010a26
 800f7b0:	1e6f      	subs	r7, r5, #1
 800f7b2:	f1b9 0f00 	cmp.w	r9, #0
 800f7b6:	d130      	bne.n	800f81a <__gethex+0x326>
 800f7b8:	b127      	cbz	r7, 800f7c4 <__gethex+0x2d0>
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f7fe fd53 	bl	800e268 <__any_on>
 800f7c2:	4681      	mov	r9, r0
 800f7c4:	117a      	asrs	r2, r7, #5
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f7cc:	f007 071f 	and.w	r7, r7, #31
 800f7d0:	40bb      	lsls	r3, r7
 800f7d2:	4213      	tst	r3, r2
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	bf18      	it	ne
 800f7da:	f049 0902 	orrne.w	r9, r9, #2
 800f7de:	f7ff fe21 	bl	800f424 <rshift>
 800f7e2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f7e6:	1b76      	subs	r6, r6, r5
 800f7e8:	2502      	movs	r5, #2
 800f7ea:	f1b9 0f00 	cmp.w	r9, #0
 800f7ee:	d047      	beq.n	800f880 <__gethex+0x38c>
 800f7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d015      	beq.n	800f824 <__gethex+0x330>
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	d017      	beq.n	800f82c <__gethex+0x338>
 800f7fc:	2b01      	cmp	r3, #1
 800f7fe:	d109      	bne.n	800f814 <__gethex+0x320>
 800f800:	f019 0f02 	tst.w	r9, #2
 800f804:	d006      	beq.n	800f814 <__gethex+0x320>
 800f806:	f8da 3000 	ldr.w	r3, [sl]
 800f80a:	ea49 0903 	orr.w	r9, r9, r3
 800f80e:	f019 0f01 	tst.w	r9, #1
 800f812:	d10e      	bne.n	800f832 <__gethex+0x33e>
 800f814:	f045 0510 	orr.w	r5, r5, #16
 800f818:	e032      	b.n	800f880 <__gethex+0x38c>
 800f81a:	f04f 0901 	mov.w	r9, #1
 800f81e:	e7d1      	b.n	800f7c4 <__gethex+0x2d0>
 800f820:	2501      	movs	r5, #1
 800f822:	e7e2      	b.n	800f7ea <__gethex+0x2f6>
 800f824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f826:	f1c3 0301 	rsb	r3, r3, #1
 800f82a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d0f0      	beq.n	800f814 <__gethex+0x320>
 800f832:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f836:	f104 0314 	add.w	r3, r4, #20
 800f83a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f83e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f842:	f04f 0c00 	mov.w	ip, #0
 800f846:	4618      	mov	r0, r3
 800f848:	f853 2b04 	ldr.w	r2, [r3], #4
 800f84c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f850:	d01b      	beq.n	800f88a <__gethex+0x396>
 800f852:	3201      	adds	r2, #1
 800f854:	6002      	str	r2, [r0, #0]
 800f856:	2d02      	cmp	r5, #2
 800f858:	f104 0314 	add.w	r3, r4, #20
 800f85c:	d13c      	bne.n	800f8d8 <__gethex+0x3e4>
 800f85e:	f8d8 2000 	ldr.w	r2, [r8]
 800f862:	3a01      	subs	r2, #1
 800f864:	42b2      	cmp	r2, r6
 800f866:	d109      	bne.n	800f87c <__gethex+0x388>
 800f868:	1171      	asrs	r1, r6, #5
 800f86a:	2201      	movs	r2, #1
 800f86c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f870:	f006 061f 	and.w	r6, r6, #31
 800f874:	fa02 f606 	lsl.w	r6, r2, r6
 800f878:	421e      	tst	r6, r3
 800f87a:	d13a      	bne.n	800f8f2 <__gethex+0x3fe>
 800f87c:	f045 0520 	orr.w	r5, r5, #32
 800f880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f882:	601c      	str	r4, [r3, #0]
 800f884:	9b02      	ldr	r3, [sp, #8]
 800f886:	601f      	str	r7, [r3, #0]
 800f888:	e6b0      	b.n	800f5ec <__gethex+0xf8>
 800f88a:	4299      	cmp	r1, r3
 800f88c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f890:	d8d9      	bhi.n	800f846 <__gethex+0x352>
 800f892:	68a3      	ldr	r3, [r4, #8]
 800f894:	459b      	cmp	fp, r3
 800f896:	db17      	blt.n	800f8c8 <__gethex+0x3d4>
 800f898:	6861      	ldr	r1, [r4, #4]
 800f89a:	9801      	ldr	r0, [sp, #4]
 800f89c:	3101      	adds	r1, #1
 800f89e:	f7fe f855 	bl	800d94c <_Balloc>
 800f8a2:	4681      	mov	r9, r0
 800f8a4:	b918      	cbnz	r0, 800f8ae <__gethex+0x3ba>
 800f8a6:	4b1a      	ldr	r3, [pc, #104]	@ (800f910 <__gethex+0x41c>)
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	2184      	movs	r1, #132	@ 0x84
 800f8ac:	e6c5      	b.n	800f63a <__gethex+0x146>
 800f8ae:	6922      	ldr	r2, [r4, #16]
 800f8b0:	3202      	adds	r2, #2
 800f8b2:	f104 010c 	add.w	r1, r4, #12
 800f8b6:	0092      	lsls	r2, r2, #2
 800f8b8:	300c      	adds	r0, #12
 800f8ba:	f7ff fd69 	bl	800f390 <memcpy>
 800f8be:	4621      	mov	r1, r4
 800f8c0:	9801      	ldr	r0, [sp, #4]
 800f8c2:	f7fe f883 	bl	800d9cc <_Bfree>
 800f8c6:	464c      	mov	r4, r9
 800f8c8:	6923      	ldr	r3, [r4, #16]
 800f8ca:	1c5a      	adds	r2, r3, #1
 800f8cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f8d0:	6122      	str	r2, [r4, #16]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	615a      	str	r2, [r3, #20]
 800f8d6:	e7be      	b.n	800f856 <__gethex+0x362>
 800f8d8:	6922      	ldr	r2, [r4, #16]
 800f8da:	455a      	cmp	r2, fp
 800f8dc:	dd0b      	ble.n	800f8f6 <__gethex+0x402>
 800f8de:	2101      	movs	r1, #1
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f7ff fd9f 	bl	800f424 <rshift>
 800f8e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8ea:	3701      	adds	r7, #1
 800f8ec:	42bb      	cmp	r3, r7
 800f8ee:	f6ff aee0 	blt.w	800f6b2 <__gethex+0x1be>
 800f8f2:	2501      	movs	r5, #1
 800f8f4:	e7c2      	b.n	800f87c <__gethex+0x388>
 800f8f6:	f016 061f 	ands.w	r6, r6, #31
 800f8fa:	d0fa      	beq.n	800f8f2 <__gethex+0x3fe>
 800f8fc:	4453      	add	r3, sl
 800f8fe:	f1c6 0620 	rsb	r6, r6, #32
 800f902:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f906:	f7fe f913 	bl	800db30 <__hi0bits>
 800f90a:	42b0      	cmp	r0, r6
 800f90c:	dbe7      	blt.n	800f8de <__gethex+0x3ea>
 800f90e:	e7f0      	b.n	800f8f2 <__gethex+0x3fe>
 800f910:	0801070d 	.word	0x0801070d

0800f914 <L_shift>:
 800f914:	f1c2 0208 	rsb	r2, r2, #8
 800f918:	0092      	lsls	r2, r2, #2
 800f91a:	b570      	push	{r4, r5, r6, lr}
 800f91c:	f1c2 0620 	rsb	r6, r2, #32
 800f920:	6843      	ldr	r3, [r0, #4]
 800f922:	6804      	ldr	r4, [r0, #0]
 800f924:	fa03 f506 	lsl.w	r5, r3, r6
 800f928:	432c      	orrs	r4, r5
 800f92a:	40d3      	lsrs	r3, r2
 800f92c:	6004      	str	r4, [r0, #0]
 800f92e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f932:	4288      	cmp	r0, r1
 800f934:	d3f4      	bcc.n	800f920 <L_shift+0xc>
 800f936:	bd70      	pop	{r4, r5, r6, pc}

0800f938 <__match>:
 800f938:	b530      	push	{r4, r5, lr}
 800f93a:	6803      	ldr	r3, [r0, #0]
 800f93c:	3301      	adds	r3, #1
 800f93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f942:	b914      	cbnz	r4, 800f94a <__match+0x12>
 800f944:	6003      	str	r3, [r0, #0]
 800f946:	2001      	movs	r0, #1
 800f948:	bd30      	pop	{r4, r5, pc}
 800f94a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f94e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f952:	2d19      	cmp	r5, #25
 800f954:	bf98      	it	ls
 800f956:	3220      	addls	r2, #32
 800f958:	42a2      	cmp	r2, r4
 800f95a:	d0f0      	beq.n	800f93e <__match+0x6>
 800f95c:	2000      	movs	r0, #0
 800f95e:	e7f3      	b.n	800f948 <__match+0x10>

0800f960 <__hexnan>:
 800f960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f964:	680b      	ldr	r3, [r1, #0]
 800f966:	6801      	ldr	r1, [r0, #0]
 800f968:	115e      	asrs	r6, r3, #5
 800f96a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f96e:	f013 031f 	ands.w	r3, r3, #31
 800f972:	b087      	sub	sp, #28
 800f974:	bf18      	it	ne
 800f976:	3604      	addne	r6, #4
 800f978:	2500      	movs	r5, #0
 800f97a:	1f37      	subs	r7, r6, #4
 800f97c:	4682      	mov	sl, r0
 800f97e:	4690      	mov	r8, r2
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	f846 5c04 	str.w	r5, [r6, #-4]
 800f986:	46b9      	mov	r9, r7
 800f988:	463c      	mov	r4, r7
 800f98a:	9502      	str	r5, [sp, #8]
 800f98c:	46ab      	mov	fp, r5
 800f98e:	784a      	ldrb	r2, [r1, #1]
 800f990:	1c4b      	adds	r3, r1, #1
 800f992:	9303      	str	r3, [sp, #12]
 800f994:	b342      	cbz	r2, 800f9e8 <__hexnan+0x88>
 800f996:	4610      	mov	r0, r2
 800f998:	9105      	str	r1, [sp, #20]
 800f99a:	9204      	str	r2, [sp, #16]
 800f99c:	f7ff fd94 	bl	800f4c8 <__hexdig_fun>
 800f9a0:	2800      	cmp	r0, #0
 800f9a2:	d151      	bne.n	800fa48 <__hexnan+0xe8>
 800f9a4:	9a04      	ldr	r2, [sp, #16]
 800f9a6:	9905      	ldr	r1, [sp, #20]
 800f9a8:	2a20      	cmp	r2, #32
 800f9aa:	d818      	bhi.n	800f9de <__hexnan+0x7e>
 800f9ac:	9b02      	ldr	r3, [sp, #8]
 800f9ae:	459b      	cmp	fp, r3
 800f9b0:	dd13      	ble.n	800f9da <__hexnan+0x7a>
 800f9b2:	454c      	cmp	r4, r9
 800f9b4:	d206      	bcs.n	800f9c4 <__hexnan+0x64>
 800f9b6:	2d07      	cmp	r5, #7
 800f9b8:	dc04      	bgt.n	800f9c4 <__hexnan+0x64>
 800f9ba:	462a      	mov	r2, r5
 800f9bc:	4649      	mov	r1, r9
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f7ff ffa8 	bl	800f914 <L_shift>
 800f9c4:	4544      	cmp	r4, r8
 800f9c6:	d952      	bls.n	800fa6e <__hexnan+0x10e>
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	f1a4 0904 	sub.w	r9, r4, #4
 800f9ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9d2:	f8cd b008 	str.w	fp, [sp, #8]
 800f9d6:	464c      	mov	r4, r9
 800f9d8:	461d      	mov	r5, r3
 800f9da:	9903      	ldr	r1, [sp, #12]
 800f9dc:	e7d7      	b.n	800f98e <__hexnan+0x2e>
 800f9de:	2a29      	cmp	r2, #41	@ 0x29
 800f9e0:	d157      	bne.n	800fa92 <__hexnan+0x132>
 800f9e2:	3102      	adds	r1, #2
 800f9e4:	f8ca 1000 	str.w	r1, [sl]
 800f9e8:	f1bb 0f00 	cmp.w	fp, #0
 800f9ec:	d051      	beq.n	800fa92 <__hexnan+0x132>
 800f9ee:	454c      	cmp	r4, r9
 800f9f0:	d206      	bcs.n	800fa00 <__hexnan+0xa0>
 800f9f2:	2d07      	cmp	r5, #7
 800f9f4:	dc04      	bgt.n	800fa00 <__hexnan+0xa0>
 800f9f6:	462a      	mov	r2, r5
 800f9f8:	4649      	mov	r1, r9
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f7ff ff8a 	bl	800f914 <L_shift>
 800fa00:	4544      	cmp	r4, r8
 800fa02:	d936      	bls.n	800fa72 <__hexnan+0x112>
 800fa04:	f1a8 0204 	sub.w	r2, r8, #4
 800fa08:	4623      	mov	r3, r4
 800fa0a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fa0e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fa12:	429f      	cmp	r7, r3
 800fa14:	d2f9      	bcs.n	800fa0a <__hexnan+0xaa>
 800fa16:	1b3b      	subs	r3, r7, r4
 800fa18:	f023 0303 	bic.w	r3, r3, #3
 800fa1c:	3304      	adds	r3, #4
 800fa1e:	3401      	adds	r4, #1
 800fa20:	3e03      	subs	r6, #3
 800fa22:	42b4      	cmp	r4, r6
 800fa24:	bf88      	it	hi
 800fa26:	2304      	movhi	r3, #4
 800fa28:	4443      	add	r3, r8
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f843 2b04 	str.w	r2, [r3], #4
 800fa30:	429f      	cmp	r7, r3
 800fa32:	d2fb      	bcs.n	800fa2c <__hexnan+0xcc>
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	b91b      	cbnz	r3, 800fa40 <__hexnan+0xe0>
 800fa38:	4547      	cmp	r7, r8
 800fa3a:	d128      	bne.n	800fa8e <__hexnan+0x12e>
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	603b      	str	r3, [r7, #0]
 800fa40:	2005      	movs	r0, #5
 800fa42:	b007      	add	sp, #28
 800fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	3501      	adds	r5, #1
 800fa4a:	2d08      	cmp	r5, #8
 800fa4c:	f10b 0b01 	add.w	fp, fp, #1
 800fa50:	dd06      	ble.n	800fa60 <__hexnan+0x100>
 800fa52:	4544      	cmp	r4, r8
 800fa54:	d9c1      	bls.n	800f9da <__hexnan+0x7a>
 800fa56:	2300      	movs	r3, #0
 800fa58:	f844 3c04 	str.w	r3, [r4, #-4]
 800fa5c:	2501      	movs	r5, #1
 800fa5e:	3c04      	subs	r4, #4
 800fa60:	6822      	ldr	r2, [r4, #0]
 800fa62:	f000 000f 	and.w	r0, r0, #15
 800fa66:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fa6a:	6020      	str	r0, [r4, #0]
 800fa6c:	e7b5      	b.n	800f9da <__hexnan+0x7a>
 800fa6e:	2508      	movs	r5, #8
 800fa70:	e7b3      	b.n	800f9da <__hexnan+0x7a>
 800fa72:	9b01      	ldr	r3, [sp, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d0dd      	beq.n	800fa34 <__hexnan+0xd4>
 800fa78:	f1c3 0320 	rsb	r3, r3, #32
 800fa7c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa80:	40da      	lsrs	r2, r3
 800fa82:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fa86:	4013      	ands	r3, r2
 800fa88:	f846 3c04 	str.w	r3, [r6, #-4]
 800fa8c:	e7d2      	b.n	800fa34 <__hexnan+0xd4>
 800fa8e:	3f04      	subs	r7, #4
 800fa90:	e7d0      	b.n	800fa34 <__hexnan+0xd4>
 800fa92:	2004      	movs	r0, #4
 800fa94:	e7d5      	b.n	800fa42 <__hexnan+0xe2>

0800fa96 <__ascii_mbtowc>:
 800fa96:	b082      	sub	sp, #8
 800fa98:	b901      	cbnz	r1, 800fa9c <__ascii_mbtowc+0x6>
 800fa9a:	a901      	add	r1, sp, #4
 800fa9c:	b142      	cbz	r2, 800fab0 <__ascii_mbtowc+0x1a>
 800fa9e:	b14b      	cbz	r3, 800fab4 <__ascii_mbtowc+0x1e>
 800faa0:	7813      	ldrb	r3, [r2, #0]
 800faa2:	600b      	str	r3, [r1, #0]
 800faa4:	7812      	ldrb	r2, [r2, #0]
 800faa6:	1e10      	subs	r0, r2, #0
 800faa8:	bf18      	it	ne
 800faaa:	2001      	movne	r0, #1
 800faac:	b002      	add	sp, #8
 800faae:	4770      	bx	lr
 800fab0:	4610      	mov	r0, r2
 800fab2:	e7fb      	b.n	800faac <__ascii_mbtowc+0x16>
 800fab4:	f06f 0001 	mvn.w	r0, #1
 800fab8:	e7f8      	b.n	800faac <__ascii_mbtowc+0x16>

0800faba <_realloc_r>:
 800faba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fabe:	4680      	mov	r8, r0
 800fac0:	4615      	mov	r5, r2
 800fac2:	460c      	mov	r4, r1
 800fac4:	b921      	cbnz	r1, 800fad0 <_realloc_r+0x16>
 800fac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800faca:	4611      	mov	r1, r2
 800facc:	f7fd beb2 	b.w	800d834 <_malloc_r>
 800fad0:	b92a      	cbnz	r2, 800fade <_realloc_r+0x24>
 800fad2:	f7fd fe3b 	bl	800d74c <_free_r>
 800fad6:	2400      	movs	r4, #0
 800fad8:	4620      	mov	r0, r4
 800fada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fade:	f000 f840 	bl	800fb62 <_malloc_usable_size_r>
 800fae2:	4285      	cmp	r5, r0
 800fae4:	4606      	mov	r6, r0
 800fae6:	d802      	bhi.n	800faee <_realloc_r+0x34>
 800fae8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800faec:	d8f4      	bhi.n	800fad8 <_realloc_r+0x1e>
 800faee:	4629      	mov	r1, r5
 800faf0:	4640      	mov	r0, r8
 800faf2:	f7fd fe9f 	bl	800d834 <_malloc_r>
 800faf6:	4607      	mov	r7, r0
 800faf8:	2800      	cmp	r0, #0
 800fafa:	d0ec      	beq.n	800fad6 <_realloc_r+0x1c>
 800fafc:	42b5      	cmp	r5, r6
 800fafe:	462a      	mov	r2, r5
 800fb00:	4621      	mov	r1, r4
 800fb02:	bf28      	it	cs
 800fb04:	4632      	movcs	r2, r6
 800fb06:	f7ff fc43 	bl	800f390 <memcpy>
 800fb0a:	4621      	mov	r1, r4
 800fb0c:	4640      	mov	r0, r8
 800fb0e:	f7fd fe1d 	bl	800d74c <_free_r>
 800fb12:	463c      	mov	r4, r7
 800fb14:	e7e0      	b.n	800fad8 <_realloc_r+0x1e>

0800fb16 <__ascii_wctomb>:
 800fb16:	4603      	mov	r3, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	b141      	cbz	r1, 800fb2e <__ascii_wctomb+0x18>
 800fb1c:	2aff      	cmp	r2, #255	@ 0xff
 800fb1e:	d904      	bls.n	800fb2a <__ascii_wctomb+0x14>
 800fb20:	228a      	movs	r2, #138	@ 0x8a
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	f04f 30ff 	mov.w	r0, #4294967295
 800fb28:	4770      	bx	lr
 800fb2a:	700a      	strb	r2, [r1, #0]
 800fb2c:	2001      	movs	r0, #1
 800fb2e:	4770      	bx	lr

0800fb30 <fiprintf>:
 800fb30:	b40e      	push	{r1, r2, r3}
 800fb32:	b503      	push	{r0, r1, lr}
 800fb34:	4601      	mov	r1, r0
 800fb36:	ab03      	add	r3, sp, #12
 800fb38:	4805      	ldr	r0, [pc, #20]	@ (800fb50 <fiprintf+0x20>)
 800fb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb3e:	6800      	ldr	r0, [r0, #0]
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	f000 f83f 	bl	800fbc4 <_vfiprintf_r>
 800fb46:	b002      	add	sp, #8
 800fb48:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb4c:	b003      	add	sp, #12
 800fb4e:	4770      	bx	lr
 800fb50:	24000020 	.word	0x24000020

0800fb54 <abort>:
 800fb54:	b508      	push	{r3, lr}
 800fb56:	2006      	movs	r0, #6
 800fb58:	f000 fa08 	bl	800ff6c <raise>
 800fb5c:	2001      	movs	r0, #1
 800fb5e:	f7f2 fd1b 	bl	8002598 <_exit>

0800fb62 <_malloc_usable_size_r>:
 800fb62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb66:	1f18      	subs	r0, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	bfbc      	itt	lt
 800fb6c:	580b      	ldrlt	r3, [r1, r0]
 800fb6e:	18c0      	addlt	r0, r0, r3
 800fb70:	4770      	bx	lr

0800fb72 <__sfputc_r>:
 800fb72:	6893      	ldr	r3, [r2, #8]
 800fb74:	3b01      	subs	r3, #1
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	b410      	push	{r4}
 800fb7a:	6093      	str	r3, [r2, #8]
 800fb7c:	da08      	bge.n	800fb90 <__sfputc_r+0x1e>
 800fb7e:	6994      	ldr	r4, [r2, #24]
 800fb80:	42a3      	cmp	r3, r4
 800fb82:	db01      	blt.n	800fb88 <__sfputc_r+0x16>
 800fb84:	290a      	cmp	r1, #10
 800fb86:	d103      	bne.n	800fb90 <__sfputc_r+0x1e>
 800fb88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb8c:	f000 b932 	b.w	800fdf4 <__swbuf_r>
 800fb90:	6813      	ldr	r3, [r2, #0]
 800fb92:	1c58      	adds	r0, r3, #1
 800fb94:	6010      	str	r0, [r2, #0]
 800fb96:	7019      	strb	r1, [r3, #0]
 800fb98:	4608      	mov	r0, r1
 800fb9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <__sfputs_r>:
 800fba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba2:	4606      	mov	r6, r0
 800fba4:	460f      	mov	r7, r1
 800fba6:	4614      	mov	r4, r2
 800fba8:	18d5      	adds	r5, r2, r3
 800fbaa:	42ac      	cmp	r4, r5
 800fbac:	d101      	bne.n	800fbb2 <__sfputs_r+0x12>
 800fbae:	2000      	movs	r0, #0
 800fbb0:	e007      	b.n	800fbc2 <__sfputs_r+0x22>
 800fbb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb6:	463a      	mov	r2, r7
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f7ff ffda 	bl	800fb72 <__sfputc_r>
 800fbbe:	1c43      	adds	r3, r0, #1
 800fbc0:	d1f3      	bne.n	800fbaa <__sfputs_r+0xa>
 800fbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fbc4 <_vfiprintf_r>:
 800fbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbc8:	460d      	mov	r5, r1
 800fbca:	b09d      	sub	sp, #116	@ 0x74
 800fbcc:	4614      	mov	r4, r2
 800fbce:	4698      	mov	r8, r3
 800fbd0:	4606      	mov	r6, r0
 800fbd2:	b118      	cbz	r0, 800fbdc <_vfiprintf_r+0x18>
 800fbd4:	6a03      	ldr	r3, [r0, #32]
 800fbd6:	b90b      	cbnz	r3, 800fbdc <_vfiprintf_r+0x18>
 800fbd8:	f7fc fe86 	bl	800c8e8 <__sinit>
 800fbdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbde:	07d9      	lsls	r1, r3, #31
 800fbe0:	d405      	bmi.n	800fbee <_vfiprintf_r+0x2a>
 800fbe2:	89ab      	ldrh	r3, [r5, #12]
 800fbe4:	059a      	lsls	r2, r3, #22
 800fbe6:	d402      	bmi.n	800fbee <_vfiprintf_r+0x2a>
 800fbe8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbea:	f7fc ffc8 	bl	800cb7e <__retarget_lock_acquire_recursive>
 800fbee:	89ab      	ldrh	r3, [r5, #12]
 800fbf0:	071b      	lsls	r3, r3, #28
 800fbf2:	d501      	bpl.n	800fbf8 <_vfiprintf_r+0x34>
 800fbf4:	692b      	ldr	r3, [r5, #16]
 800fbf6:	b99b      	cbnz	r3, 800fc20 <_vfiprintf_r+0x5c>
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	4630      	mov	r0, r6
 800fbfc:	f000 f938 	bl	800fe70 <__swsetup_r>
 800fc00:	b170      	cbz	r0, 800fc20 <_vfiprintf_r+0x5c>
 800fc02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc04:	07dc      	lsls	r4, r3, #31
 800fc06:	d504      	bpl.n	800fc12 <_vfiprintf_r+0x4e>
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	b01d      	add	sp, #116	@ 0x74
 800fc0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc12:	89ab      	ldrh	r3, [r5, #12]
 800fc14:	0598      	lsls	r0, r3, #22
 800fc16:	d4f7      	bmi.n	800fc08 <_vfiprintf_r+0x44>
 800fc18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc1a:	f7fc ffb1 	bl	800cb80 <__retarget_lock_release_recursive>
 800fc1e:	e7f3      	b.n	800fc08 <_vfiprintf_r+0x44>
 800fc20:	2300      	movs	r3, #0
 800fc22:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc24:	2320      	movs	r3, #32
 800fc26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc2e:	2330      	movs	r3, #48	@ 0x30
 800fc30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fde0 <_vfiprintf_r+0x21c>
 800fc34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc38:	f04f 0901 	mov.w	r9, #1
 800fc3c:	4623      	mov	r3, r4
 800fc3e:	469a      	mov	sl, r3
 800fc40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc44:	b10a      	cbz	r2, 800fc4a <_vfiprintf_r+0x86>
 800fc46:	2a25      	cmp	r2, #37	@ 0x25
 800fc48:	d1f9      	bne.n	800fc3e <_vfiprintf_r+0x7a>
 800fc4a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc4e:	d00b      	beq.n	800fc68 <_vfiprintf_r+0xa4>
 800fc50:	465b      	mov	r3, fp
 800fc52:	4622      	mov	r2, r4
 800fc54:	4629      	mov	r1, r5
 800fc56:	4630      	mov	r0, r6
 800fc58:	f7ff ffa2 	bl	800fba0 <__sfputs_r>
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	f000 80a7 	beq.w	800fdb0 <_vfiprintf_r+0x1ec>
 800fc62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fc64:	445a      	add	r2, fp
 800fc66:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc68:	f89a 3000 	ldrb.w	r3, [sl]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 809f 	beq.w	800fdb0 <_vfiprintf_r+0x1ec>
 800fc72:	2300      	movs	r3, #0
 800fc74:	f04f 32ff 	mov.w	r2, #4294967295
 800fc78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc7c:	f10a 0a01 	add.w	sl, sl, #1
 800fc80:	9304      	str	r3, [sp, #16]
 800fc82:	9307      	str	r3, [sp, #28]
 800fc84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fc88:	931a      	str	r3, [sp, #104]	@ 0x68
 800fc8a:	4654      	mov	r4, sl
 800fc8c:	2205      	movs	r2, #5
 800fc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc92:	4853      	ldr	r0, [pc, #332]	@ (800fde0 <_vfiprintf_r+0x21c>)
 800fc94:	f7f0 fb24 	bl	80002e0 <memchr>
 800fc98:	9a04      	ldr	r2, [sp, #16]
 800fc9a:	b9d8      	cbnz	r0, 800fcd4 <_vfiprintf_r+0x110>
 800fc9c:	06d1      	lsls	r1, r2, #27
 800fc9e:	bf44      	itt	mi
 800fca0:	2320      	movmi	r3, #32
 800fca2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fca6:	0713      	lsls	r3, r2, #28
 800fca8:	bf44      	itt	mi
 800fcaa:	232b      	movmi	r3, #43	@ 0x2b
 800fcac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcb0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcb6:	d015      	beq.n	800fce4 <_vfiprintf_r+0x120>
 800fcb8:	9a07      	ldr	r2, [sp, #28]
 800fcba:	4654      	mov	r4, sl
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	f04f 0c0a 	mov.w	ip, #10
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fcc8:	3b30      	subs	r3, #48	@ 0x30
 800fcca:	2b09      	cmp	r3, #9
 800fccc:	d94b      	bls.n	800fd66 <_vfiprintf_r+0x1a2>
 800fcce:	b1b0      	cbz	r0, 800fcfe <_vfiprintf_r+0x13a>
 800fcd0:	9207      	str	r2, [sp, #28]
 800fcd2:	e014      	b.n	800fcfe <_vfiprintf_r+0x13a>
 800fcd4:	eba0 0308 	sub.w	r3, r0, r8
 800fcd8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	9304      	str	r3, [sp, #16]
 800fce0:	46a2      	mov	sl, r4
 800fce2:	e7d2      	b.n	800fc8a <_vfiprintf_r+0xc6>
 800fce4:	9b03      	ldr	r3, [sp, #12]
 800fce6:	1d19      	adds	r1, r3, #4
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	9103      	str	r1, [sp, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	bfbb      	ittet	lt
 800fcf0:	425b      	neglt	r3, r3
 800fcf2:	f042 0202 	orrlt.w	r2, r2, #2
 800fcf6:	9307      	strge	r3, [sp, #28]
 800fcf8:	9307      	strlt	r3, [sp, #28]
 800fcfa:	bfb8      	it	lt
 800fcfc:	9204      	strlt	r2, [sp, #16]
 800fcfe:	7823      	ldrb	r3, [r4, #0]
 800fd00:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd02:	d10a      	bne.n	800fd1a <_vfiprintf_r+0x156>
 800fd04:	7863      	ldrb	r3, [r4, #1]
 800fd06:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd08:	d132      	bne.n	800fd70 <_vfiprintf_r+0x1ac>
 800fd0a:	9b03      	ldr	r3, [sp, #12]
 800fd0c:	1d1a      	adds	r2, r3, #4
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	9203      	str	r2, [sp, #12]
 800fd12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd16:	3402      	adds	r4, #2
 800fd18:	9305      	str	r3, [sp, #20]
 800fd1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fdf0 <_vfiprintf_r+0x22c>
 800fd1e:	7821      	ldrb	r1, [r4, #0]
 800fd20:	2203      	movs	r2, #3
 800fd22:	4650      	mov	r0, sl
 800fd24:	f7f0 fadc 	bl	80002e0 <memchr>
 800fd28:	b138      	cbz	r0, 800fd3a <_vfiprintf_r+0x176>
 800fd2a:	9b04      	ldr	r3, [sp, #16]
 800fd2c:	eba0 000a 	sub.w	r0, r0, sl
 800fd30:	2240      	movs	r2, #64	@ 0x40
 800fd32:	4082      	lsls	r2, r0
 800fd34:	4313      	orrs	r3, r2
 800fd36:	3401      	adds	r4, #1
 800fd38:	9304      	str	r3, [sp, #16]
 800fd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd3e:	4829      	ldr	r0, [pc, #164]	@ (800fde4 <_vfiprintf_r+0x220>)
 800fd40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd44:	2206      	movs	r2, #6
 800fd46:	f7f0 facb 	bl	80002e0 <memchr>
 800fd4a:	2800      	cmp	r0, #0
 800fd4c:	d03f      	beq.n	800fdce <_vfiprintf_r+0x20a>
 800fd4e:	4b26      	ldr	r3, [pc, #152]	@ (800fde8 <_vfiprintf_r+0x224>)
 800fd50:	bb1b      	cbnz	r3, 800fd9a <_vfiprintf_r+0x1d6>
 800fd52:	9b03      	ldr	r3, [sp, #12]
 800fd54:	3307      	adds	r3, #7
 800fd56:	f023 0307 	bic.w	r3, r3, #7
 800fd5a:	3308      	adds	r3, #8
 800fd5c:	9303      	str	r3, [sp, #12]
 800fd5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd60:	443b      	add	r3, r7
 800fd62:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd64:	e76a      	b.n	800fc3c <_vfiprintf_r+0x78>
 800fd66:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	2001      	movs	r0, #1
 800fd6e:	e7a8      	b.n	800fcc2 <_vfiprintf_r+0xfe>
 800fd70:	2300      	movs	r3, #0
 800fd72:	3401      	adds	r4, #1
 800fd74:	9305      	str	r3, [sp, #20]
 800fd76:	4619      	mov	r1, r3
 800fd78:	f04f 0c0a 	mov.w	ip, #10
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd82:	3a30      	subs	r2, #48	@ 0x30
 800fd84:	2a09      	cmp	r2, #9
 800fd86:	d903      	bls.n	800fd90 <_vfiprintf_r+0x1cc>
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d0c6      	beq.n	800fd1a <_vfiprintf_r+0x156>
 800fd8c:	9105      	str	r1, [sp, #20]
 800fd8e:	e7c4      	b.n	800fd1a <_vfiprintf_r+0x156>
 800fd90:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd94:	4604      	mov	r4, r0
 800fd96:	2301      	movs	r3, #1
 800fd98:	e7f0      	b.n	800fd7c <_vfiprintf_r+0x1b8>
 800fd9a:	ab03      	add	r3, sp, #12
 800fd9c:	9300      	str	r3, [sp, #0]
 800fd9e:	462a      	mov	r2, r5
 800fda0:	4b12      	ldr	r3, [pc, #72]	@ (800fdec <_vfiprintf_r+0x228>)
 800fda2:	a904      	add	r1, sp, #16
 800fda4:	4630      	mov	r0, r6
 800fda6:	f7fb ff5f 	bl	800bc68 <_printf_float>
 800fdaa:	4607      	mov	r7, r0
 800fdac:	1c78      	adds	r0, r7, #1
 800fdae:	d1d6      	bne.n	800fd5e <_vfiprintf_r+0x19a>
 800fdb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdb2:	07d9      	lsls	r1, r3, #31
 800fdb4:	d405      	bmi.n	800fdc2 <_vfiprintf_r+0x1fe>
 800fdb6:	89ab      	ldrh	r3, [r5, #12]
 800fdb8:	059a      	lsls	r2, r3, #22
 800fdba:	d402      	bmi.n	800fdc2 <_vfiprintf_r+0x1fe>
 800fdbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdbe:	f7fc fedf 	bl	800cb80 <__retarget_lock_release_recursive>
 800fdc2:	89ab      	ldrh	r3, [r5, #12]
 800fdc4:	065b      	lsls	r3, r3, #25
 800fdc6:	f53f af1f 	bmi.w	800fc08 <_vfiprintf_r+0x44>
 800fdca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fdcc:	e71e      	b.n	800fc0c <_vfiprintf_r+0x48>
 800fdce:	ab03      	add	r3, sp, #12
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	462a      	mov	r2, r5
 800fdd4:	4b05      	ldr	r3, [pc, #20]	@ (800fdec <_vfiprintf_r+0x228>)
 800fdd6:	a904      	add	r1, sp, #16
 800fdd8:	4630      	mov	r0, r6
 800fdda:	f7fc f9cd 	bl	800c178 <_printf_i>
 800fdde:	e7e4      	b.n	800fdaa <_vfiprintf_r+0x1e6>
 800fde0:	080109d1 	.word	0x080109d1
 800fde4:	080109db 	.word	0x080109db
 800fde8:	0800bc69 	.word	0x0800bc69
 800fdec:	0800fba1 	.word	0x0800fba1
 800fdf0:	080109d7 	.word	0x080109d7

0800fdf4 <__swbuf_r>:
 800fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdf6:	460e      	mov	r6, r1
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	4605      	mov	r5, r0
 800fdfc:	b118      	cbz	r0, 800fe06 <__swbuf_r+0x12>
 800fdfe:	6a03      	ldr	r3, [r0, #32]
 800fe00:	b90b      	cbnz	r3, 800fe06 <__swbuf_r+0x12>
 800fe02:	f7fc fd71 	bl	800c8e8 <__sinit>
 800fe06:	69a3      	ldr	r3, [r4, #24]
 800fe08:	60a3      	str	r3, [r4, #8]
 800fe0a:	89a3      	ldrh	r3, [r4, #12]
 800fe0c:	071a      	lsls	r2, r3, #28
 800fe0e:	d501      	bpl.n	800fe14 <__swbuf_r+0x20>
 800fe10:	6923      	ldr	r3, [r4, #16]
 800fe12:	b943      	cbnz	r3, 800fe26 <__swbuf_r+0x32>
 800fe14:	4621      	mov	r1, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	f000 f82a 	bl	800fe70 <__swsetup_r>
 800fe1c:	b118      	cbz	r0, 800fe26 <__swbuf_r+0x32>
 800fe1e:	f04f 37ff 	mov.w	r7, #4294967295
 800fe22:	4638      	mov	r0, r7
 800fe24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe26:	6823      	ldr	r3, [r4, #0]
 800fe28:	6922      	ldr	r2, [r4, #16]
 800fe2a:	1a98      	subs	r0, r3, r2
 800fe2c:	6963      	ldr	r3, [r4, #20]
 800fe2e:	b2f6      	uxtb	r6, r6
 800fe30:	4283      	cmp	r3, r0
 800fe32:	4637      	mov	r7, r6
 800fe34:	dc05      	bgt.n	800fe42 <__swbuf_r+0x4e>
 800fe36:	4621      	mov	r1, r4
 800fe38:	4628      	mov	r0, r5
 800fe3a:	f7ff fa45 	bl	800f2c8 <_fflush_r>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d1ed      	bne.n	800fe1e <__swbuf_r+0x2a>
 800fe42:	68a3      	ldr	r3, [r4, #8]
 800fe44:	3b01      	subs	r3, #1
 800fe46:	60a3      	str	r3, [r4, #8]
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	6022      	str	r2, [r4, #0]
 800fe4e:	701e      	strb	r6, [r3, #0]
 800fe50:	6962      	ldr	r2, [r4, #20]
 800fe52:	1c43      	adds	r3, r0, #1
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d004      	beq.n	800fe62 <__swbuf_r+0x6e>
 800fe58:	89a3      	ldrh	r3, [r4, #12]
 800fe5a:	07db      	lsls	r3, r3, #31
 800fe5c:	d5e1      	bpl.n	800fe22 <__swbuf_r+0x2e>
 800fe5e:	2e0a      	cmp	r6, #10
 800fe60:	d1df      	bne.n	800fe22 <__swbuf_r+0x2e>
 800fe62:	4621      	mov	r1, r4
 800fe64:	4628      	mov	r0, r5
 800fe66:	f7ff fa2f 	bl	800f2c8 <_fflush_r>
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d0d9      	beq.n	800fe22 <__swbuf_r+0x2e>
 800fe6e:	e7d6      	b.n	800fe1e <__swbuf_r+0x2a>

0800fe70 <__swsetup_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	4b29      	ldr	r3, [pc, #164]	@ (800ff18 <__swsetup_r+0xa8>)
 800fe74:	4605      	mov	r5, r0
 800fe76:	6818      	ldr	r0, [r3, #0]
 800fe78:	460c      	mov	r4, r1
 800fe7a:	b118      	cbz	r0, 800fe84 <__swsetup_r+0x14>
 800fe7c:	6a03      	ldr	r3, [r0, #32]
 800fe7e:	b90b      	cbnz	r3, 800fe84 <__swsetup_r+0x14>
 800fe80:	f7fc fd32 	bl	800c8e8 <__sinit>
 800fe84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe88:	0719      	lsls	r1, r3, #28
 800fe8a:	d422      	bmi.n	800fed2 <__swsetup_r+0x62>
 800fe8c:	06da      	lsls	r2, r3, #27
 800fe8e:	d407      	bmi.n	800fea0 <__swsetup_r+0x30>
 800fe90:	2209      	movs	r2, #9
 800fe92:	602a      	str	r2, [r5, #0]
 800fe94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe98:	81a3      	strh	r3, [r4, #12]
 800fe9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9e:	e033      	b.n	800ff08 <__swsetup_r+0x98>
 800fea0:	0758      	lsls	r0, r3, #29
 800fea2:	d512      	bpl.n	800feca <__swsetup_r+0x5a>
 800fea4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fea6:	b141      	cbz	r1, 800feba <__swsetup_r+0x4a>
 800fea8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800feac:	4299      	cmp	r1, r3
 800feae:	d002      	beq.n	800feb6 <__swsetup_r+0x46>
 800feb0:	4628      	mov	r0, r5
 800feb2:	f7fd fc4b 	bl	800d74c <_free_r>
 800feb6:	2300      	movs	r3, #0
 800feb8:	6363      	str	r3, [r4, #52]	@ 0x34
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	2300      	movs	r3, #0
 800fec4:	6063      	str	r3, [r4, #4]
 800fec6:	6923      	ldr	r3, [r4, #16]
 800fec8:	6023      	str	r3, [r4, #0]
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	f043 0308 	orr.w	r3, r3, #8
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	6923      	ldr	r3, [r4, #16]
 800fed4:	b94b      	cbnz	r3, 800feea <__swsetup_r+0x7a>
 800fed6:	89a3      	ldrh	r3, [r4, #12]
 800fed8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fedc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fee0:	d003      	beq.n	800feea <__swsetup_r+0x7a>
 800fee2:	4621      	mov	r1, r4
 800fee4:	4628      	mov	r0, r5
 800fee6:	f000 f883 	bl	800fff0 <__smakebuf_r>
 800feea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feee:	f013 0201 	ands.w	r2, r3, #1
 800fef2:	d00a      	beq.n	800ff0a <__swsetup_r+0x9a>
 800fef4:	2200      	movs	r2, #0
 800fef6:	60a2      	str	r2, [r4, #8]
 800fef8:	6962      	ldr	r2, [r4, #20]
 800fefa:	4252      	negs	r2, r2
 800fefc:	61a2      	str	r2, [r4, #24]
 800fefe:	6922      	ldr	r2, [r4, #16]
 800ff00:	b942      	cbnz	r2, 800ff14 <__swsetup_r+0xa4>
 800ff02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff06:	d1c5      	bne.n	800fe94 <__swsetup_r+0x24>
 800ff08:	bd38      	pop	{r3, r4, r5, pc}
 800ff0a:	0799      	lsls	r1, r3, #30
 800ff0c:	bf58      	it	pl
 800ff0e:	6962      	ldrpl	r2, [r4, #20]
 800ff10:	60a2      	str	r2, [r4, #8]
 800ff12:	e7f4      	b.n	800fefe <__swsetup_r+0x8e>
 800ff14:	2000      	movs	r0, #0
 800ff16:	e7f7      	b.n	800ff08 <__swsetup_r+0x98>
 800ff18:	24000020 	.word	0x24000020

0800ff1c <_raise_r>:
 800ff1c:	291f      	cmp	r1, #31
 800ff1e:	b538      	push	{r3, r4, r5, lr}
 800ff20:	4605      	mov	r5, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	d904      	bls.n	800ff30 <_raise_r+0x14>
 800ff26:	2316      	movs	r3, #22
 800ff28:	6003      	str	r3, [r0, #0]
 800ff2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff32:	b112      	cbz	r2, 800ff3a <_raise_r+0x1e>
 800ff34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff38:	b94b      	cbnz	r3, 800ff4e <_raise_r+0x32>
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	f000 f830 	bl	800ffa0 <_getpid_r>
 800ff40:	4622      	mov	r2, r4
 800ff42:	4601      	mov	r1, r0
 800ff44:	4628      	mov	r0, r5
 800ff46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff4a:	f000 b817 	b.w	800ff7c <_kill_r>
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d00a      	beq.n	800ff68 <_raise_r+0x4c>
 800ff52:	1c59      	adds	r1, r3, #1
 800ff54:	d103      	bne.n	800ff5e <_raise_r+0x42>
 800ff56:	2316      	movs	r3, #22
 800ff58:	6003      	str	r3, [r0, #0]
 800ff5a:	2001      	movs	r0, #1
 800ff5c:	e7e7      	b.n	800ff2e <_raise_r+0x12>
 800ff5e:	2100      	movs	r1, #0
 800ff60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ff64:	4620      	mov	r0, r4
 800ff66:	4798      	blx	r3
 800ff68:	2000      	movs	r0, #0
 800ff6a:	e7e0      	b.n	800ff2e <_raise_r+0x12>

0800ff6c <raise>:
 800ff6c:	4b02      	ldr	r3, [pc, #8]	@ (800ff78 <raise+0xc>)
 800ff6e:	4601      	mov	r1, r0
 800ff70:	6818      	ldr	r0, [r3, #0]
 800ff72:	f7ff bfd3 	b.w	800ff1c <_raise_r>
 800ff76:	bf00      	nop
 800ff78:	24000020 	.word	0x24000020

0800ff7c <_kill_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	@ (800ff9c <_kill_r+0x20>)
 800ff80:	2300      	movs	r3, #0
 800ff82:	4604      	mov	r4, r0
 800ff84:	4608      	mov	r0, r1
 800ff86:	4611      	mov	r1, r2
 800ff88:	602b      	str	r3, [r5, #0]
 800ff8a:	f7f2 faf5 	bl	8002578 <_kill>
 800ff8e:	1c43      	adds	r3, r0, #1
 800ff90:	d102      	bne.n	800ff98 <_kill_r+0x1c>
 800ff92:	682b      	ldr	r3, [r5, #0]
 800ff94:	b103      	cbz	r3, 800ff98 <_kill_r+0x1c>
 800ff96:	6023      	str	r3, [r4, #0]
 800ff98:	bd38      	pop	{r3, r4, r5, pc}
 800ff9a:	bf00      	nop
 800ff9c:	24000788 	.word	0x24000788

0800ffa0 <_getpid_r>:
 800ffa0:	f7f2 bae2 	b.w	8002568 <_getpid>

0800ffa4 <__swhatbuf_r>:
 800ffa4:	b570      	push	{r4, r5, r6, lr}
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffac:	2900      	cmp	r1, #0
 800ffae:	b096      	sub	sp, #88	@ 0x58
 800ffb0:	4615      	mov	r5, r2
 800ffb2:	461e      	mov	r6, r3
 800ffb4:	da0d      	bge.n	800ffd2 <__swhatbuf_r+0x2e>
 800ffb6:	89a3      	ldrh	r3, [r4, #12]
 800ffb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ffbc:	f04f 0100 	mov.w	r1, #0
 800ffc0:	bf14      	ite	ne
 800ffc2:	2340      	movne	r3, #64	@ 0x40
 800ffc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ffc8:	2000      	movs	r0, #0
 800ffca:	6031      	str	r1, [r6, #0]
 800ffcc:	602b      	str	r3, [r5, #0]
 800ffce:	b016      	add	sp, #88	@ 0x58
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}
 800ffd2:	466a      	mov	r2, sp
 800ffd4:	f000 f848 	bl	8010068 <_fstat_r>
 800ffd8:	2800      	cmp	r0, #0
 800ffda:	dbec      	blt.n	800ffb6 <__swhatbuf_r+0x12>
 800ffdc:	9901      	ldr	r1, [sp, #4]
 800ffde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ffe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ffe6:	4259      	negs	r1, r3
 800ffe8:	4159      	adcs	r1, r3
 800ffea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ffee:	e7eb      	b.n	800ffc8 <__swhatbuf_r+0x24>

0800fff0 <__smakebuf_r>:
 800fff0:	898b      	ldrh	r3, [r1, #12]
 800fff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fff4:	079d      	lsls	r5, r3, #30
 800fff6:	4606      	mov	r6, r0
 800fff8:	460c      	mov	r4, r1
 800fffa:	d507      	bpl.n	801000c <__smakebuf_r+0x1c>
 800fffc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	6123      	str	r3, [r4, #16]
 8010004:	2301      	movs	r3, #1
 8010006:	6163      	str	r3, [r4, #20]
 8010008:	b003      	add	sp, #12
 801000a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801000c:	ab01      	add	r3, sp, #4
 801000e:	466a      	mov	r2, sp
 8010010:	f7ff ffc8 	bl	800ffa4 <__swhatbuf_r>
 8010014:	9f00      	ldr	r7, [sp, #0]
 8010016:	4605      	mov	r5, r0
 8010018:	4639      	mov	r1, r7
 801001a:	4630      	mov	r0, r6
 801001c:	f7fd fc0a 	bl	800d834 <_malloc_r>
 8010020:	b948      	cbnz	r0, 8010036 <__smakebuf_r+0x46>
 8010022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010026:	059a      	lsls	r2, r3, #22
 8010028:	d4ee      	bmi.n	8010008 <__smakebuf_r+0x18>
 801002a:	f023 0303 	bic.w	r3, r3, #3
 801002e:	f043 0302 	orr.w	r3, r3, #2
 8010032:	81a3      	strh	r3, [r4, #12]
 8010034:	e7e2      	b.n	800fffc <__smakebuf_r+0xc>
 8010036:	89a3      	ldrh	r3, [r4, #12]
 8010038:	6020      	str	r0, [r4, #0]
 801003a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801003e:	81a3      	strh	r3, [r4, #12]
 8010040:	9b01      	ldr	r3, [sp, #4]
 8010042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010046:	b15b      	cbz	r3, 8010060 <__smakebuf_r+0x70>
 8010048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801004c:	4630      	mov	r0, r6
 801004e:	f000 f81d 	bl	801008c <_isatty_r>
 8010052:	b128      	cbz	r0, 8010060 <__smakebuf_r+0x70>
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	f023 0303 	bic.w	r3, r3, #3
 801005a:	f043 0301 	orr.w	r3, r3, #1
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	89a3      	ldrh	r3, [r4, #12]
 8010062:	431d      	orrs	r5, r3
 8010064:	81a5      	strh	r5, [r4, #12]
 8010066:	e7cf      	b.n	8010008 <__smakebuf_r+0x18>

08010068 <_fstat_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	4d07      	ldr	r5, [pc, #28]	@ (8010088 <_fstat_r+0x20>)
 801006c:	2300      	movs	r3, #0
 801006e:	4604      	mov	r4, r0
 8010070:	4608      	mov	r0, r1
 8010072:	4611      	mov	r1, r2
 8010074:	602b      	str	r3, [r5, #0]
 8010076:	f7f2 fac3 	bl	8002600 <_fstat>
 801007a:	1c43      	adds	r3, r0, #1
 801007c:	d102      	bne.n	8010084 <_fstat_r+0x1c>
 801007e:	682b      	ldr	r3, [r5, #0]
 8010080:	b103      	cbz	r3, 8010084 <_fstat_r+0x1c>
 8010082:	6023      	str	r3, [r4, #0]
 8010084:	bd38      	pop	{r3, r4, r5, pc}
 8010086:	bf00      	nop
 8010088:	24000788 	.word	0x24000788

0801008c <_isatty_r>:
 801008c:	b538      	push	{r3, r4, r5, lr}
 801008e:	4d06      	ldr	r5, [pc, #24]	@ (80100a8 <_isatty_r+0x1c>)
 8010090:	2300      	movs	r3, #0
 8010092:	4604      	mov	r4, r0
 8010094:	4608      	mov	r0, r1
 8010096:	602b      	str	r3, [r5, #0]
 8010098:	f7f2 fac2 	bl	8002620 <_isatty>
 801009c:	1c43      	adds	r3, r0, #1
 801009e:	d102      	bne.n	80100a6 <_isatty_r+0x1a>
 80100a0:	682b      	ldr	r3, [r5, #0]
 80100a2:	b103      	cbz	r3, 80100a6 <_isatty_r+0x1a>
 80100a4:	6023      	str	r3, [r4, #0]
 80100a6:	bd38      	pop	{r3, r4, r5, pc}
 80100a8:	24000788 	.word	0x24000788

080100ac <asinf>:
 80100ac:	b508      	push	{r3, lr}
 80100ae:	ed2d 8b02 	vpush	{d8}
 80100b2:	eeb0 8a40 	vmov.f32	s16, s0
 80100b6:	f000 f82f 	bl	8010118 <__ieee754_asinf>
 80100ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80100be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100c2:	eef0 8a40 	vmov.f32	s17, s0
 80100c6:	d615      	bvs.n	80100f4 <asinf+0x48>
 80100c8:	eeb0 0a48 	vmov.f32	s0, s16
 80100cc:	f000 f81c 	bl	8010108 <fabsf>
 80100d0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80100d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80100d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100dc:	dd0a      	ble.n	80100f4 <asinf+0x48>
 80100de:	f7fc fd23 	bl	800cb28 <__errno>
 80100e2:	ecbd 8b02 	vpop	{d8}
 80100e6:	2321      	movs	r3, #33	@ 0x21
 80100e8:	6003      	str	r3, [r0, #0]
 80100ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80100ee:	4804      	ldr	r0, [pc, #16]	@ (8010100 <asinf+0x54>)
 80100f0:	f7fc bd48 	b.w	800cb84 <nanf>
 80100f4:	eeb0 0a68 	vmov.f32	s0, s17
 80100f8:	ecbd 8b02 	vpop	{d8}
 80100fc:	bd08      	pop	{r3, pc}
 80100fe:	bf00      	nop
 8010100:	08010a25 	.word	0x08010a25

08010104 <atan2f>:
 8010104:	f000 b8ee 	b.w	80102e4 <__ieee754_atan2f>

08010108 <fabsf>:
 8010108:	ee10 3a10 	vmov	r3, s0
 801010c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010110:	ee00 3a10 	vmov	s0, r3
 8010114:	4770      	bx	lr
	...

08010118 <__ieee754_asinf>:
 8010118:	b538      	push	{r3, r4, r5, lr}
 801011a:	ee10 5a10 	vmov	r5, s0
 801011e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8010122:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8010126:	ed2d 8b04 	vpush	{d8-d9}
 801012a:	d10c      	bne.n	8010146 <__ieee754_asinf+0x2e>
 801012c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80102a4 <__ieee754_asinf+0x18c>
 8010130:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80102a8 <__ieee754_asinf+0x190>
 8010134:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010138:	eee0 7a07 	vfma.f32	s15, s0, s14
 801013c:	eeb0 0a67 	vmov.f32	s0, s15
 8010140:	ecbd 8b04 	vpop	{d8-d9}
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	d904      	bls.n	8010152 <__ieee754_asinf+0x3a>
 8010148:	ee70 7a40 	vsub.f32	s15, s0, s0
 801014c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8010150:	e7f6      	b.n	8010140 <__ieee754_asinf+0x28>
 8010152:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010156:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801015a:	d20b      	bcs.n	8010174 <__ieee754_asinf+0x5c>
 801015c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8010160:	d252      	bcs.n	8010208 <__ieee754_asinf+0xf0>
 8010162:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80102ac <__ieee754_asinf+0x194>
 8010166:	ee70 7a27 	vadd.f32	s15, s0, s15
 801016a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801016e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010172:	dce5      	bgt.n	8010140 <__ieee754_asinf+0x28>
 8010174:	f7ff ffc8 	bl	8010108 <fabsf>
 8010178:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801017c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010180:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010184:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80102b0 <__ieee754_asinf+0x198>
 8010188:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80102b4 <__ieee754_asinf+0x19c>
 801018c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80102b8 <__ieee754_asinf+0x1a0>
 8010190:	eea8 7a27 	vfma.f32	s14, s16, s15
 8010194:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80102bc <__ieee754_asinf+0x1a4>
 8010198:	eee7 7a08 	vfma.f32	s15, s14, s16
 801019c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80102c0 <__ieee754_asinf+0x1a8>
 80101a0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80101a4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80102c4 <__ieee754_asinf+0x1ac>
 80101a8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80101ac:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80102c8 <__ieee754_asinf+0x1b0>
 80101b0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80101b4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80102cc <__ieee754_asinf+0x1b4>
 80101b8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80101bc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80102d0 <__ieee754_asinf+0x1b8>
 80101c0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80101c4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80102d4 <__ieee754_asinf+0x1bc>
 80101c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80101cc:	eeb0 0a48 	vmov.f32	s0, s16
 80101d0:	eee7 8a88 	vfma.f32	s17, s15, s16
 80101d4:	f000 f9f8 	bl	80105c8 <__ieee754_sqrtf>
 80101d8:	4b3f      	ldr	r3, [pc, #252]	@ (80102d8 <__ieee754_asinf+0x1c0>)
 80101da:	ee29 9a08 	vmul.f32	s18, s18, s16
 80101de:	429c      	cmp	r4, r3
 80101e0:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80101e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80101e8:	d93d      	bls.n	8010266 <__ieee754_asinf+0x14e>
 80101ea:	eea0 0a06 	vfma.f32	s0, s0, s12
 80101ee:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80102dc <__ieee754_asinf+0x1c4>
 80101f2:	eee0 7a26 	vfma.f32	s15, s0, s13
 80101f6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80102a8 <__ieee754_asinf+0x190>
 80101fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80101fe:	2d00      	cmp	r5, #0
 8010200:	bfd8      	it	le
 8010202:	eeb1 0a40 	vnegle.f32	s0, s0
 8010206:	e79b      	b.n	8010140 <__ieee754_asinf+0x28>
 8010208:	ee60 7a00 	vmul.f32	s15, s0, s0
 801020c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80102b4 <__ieee754_asinf+0x19c>
 8010210:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80102b0 <__ieee754_asinf+0x198>
 8010214:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80102c8 <__ieee754_asinf+0x1b0>
 8010218:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801021c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80102bc <__ieee754_asinf+0x1a4>
 8010220:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010224:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80102c0 <__ieee754_asinf+0x1a8>
 8010228:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801022c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80102c4 <__ieee754_asinf+0x1ac>
 8010230:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010234:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80102b8 <__ieee754_asinf+0x1a0>
 8010238:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801023c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80102cc <__ieee754_asinf+0x1b4>
 8010240:	eee7 6a86 	vfma.f32	s13, s15, s12
 8010244:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80102d0 <__ieee754_asinf+0x1b8>
 8010248:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801024c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80102d4 <__ieee754_asinf+0x1bc>
 8010250:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010258:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801025c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8010260:	eea0 0a27 	vfma.f32	s0, s0, s15
 8010264:	e76c      	b.n	8010140 <__ieee754_asinf+0x28>
 8010266:	ee10 3a10 	vmov	r3, s0
 801026a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801026e:	f023 030f 	bic.w	r3, r3, #15
 8010272:	ee07 3a10 	vmov	s14, r3
 8010276:	eea7 8a47 	vfms.f32	s16, s14, s14
 801027a:	ee70 5a00 	vadd.f32	s11, s0, s0
 801027e:	ee30 0a07 	vadd.f32	s0, s0, s14
 8010282:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80102a4 <__ieee754_asinf+0x18c>
 8010286:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801028a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80102e0 <__ieee754_asinf+0x1c8>
 801028e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8010292:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8010296:	eeb0 6a40 	vmov.f32	s12, s0
 801029a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801029e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80102a2:	e7aa      	b.n	80101fa <__ieee754_asinf+0xe2>
 80102a4:	b33bbd2e 	.word	0xb33bbd2e
 80102a8:	3fc90fdb 	.word	0x3fc90fdb
 80102ac:	7149f2ca 	.word	0x7149f2ca
 80102b0:	3a4f7f04 	.word	0x3a4f7f04
 80102b4:	3811ef08 	.word	0x3811ef08
 80102b8:	3e2aaaab 	.word	0x3e2aaaab
 80102bc:	bd241146 	.word	0xbd241146
 80102c0:	3e4e0aa8 	.word	0x3e4e0aa8
 80102c4:	bea6b090 	.word	0xbea6b090
 80102c8:	3d9dc62e 	.word	0x3d9dc62e
 80102cc:	bf303361 	.word	0xbf303361
 80102d0:	4001572d 	.word	0x4001572d
 80102d4:	c019d139 	.word	0xc019d139
 80102d8:	3f799999 	.word	0x3f799999
 80102dc:	333bbd2e 	.word	0x333bbd2e
 80102e0:	3f490fdb 	.word	0x3f490fdb

080102e4 <__ieee754_atan2f>:
 80102e4:	ee10 2a90 	vmov	r2, s1
 80102e8:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80102ec:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80102f0:	b510      	push	{r4, lr}
 80102f2:	eef0 7a40 	vmov.f32	s15, s0
 80102f6:	d806      	bhi.n	8010306 <__ieee754_atan2f+0x22>
 80102f8:	ee10 0a10 	vmov	r0, s0
 80102fc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010300:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010304:	d904      	bls.n	8010310 <__ieee754_atan2f+0x2c>
 8010306:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801030a:	eeb0 0a67 	vmov.f32	s0, s15
 801030e:	bd10      	pop	{r4, pc}
 8010310:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010314:	d103      	bne.n	801031e <__ieee754_atan2f+0x3a>
 8010316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801031a:	f000 b881 	b.w	8010420 <atanf>
 801031e:	1794      	asrs	r4, r2, #30
 8010320:	f004 0402 	and.w	r4, r4, #2
 8010324:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010328:	b93b      	cbnz	r3, 801033a <__ieee754_atan2f+0x56>
 801032a:	2c02      	cmp	r4, #2
 801032c:	d05c      	beq.n	80103e8 <__ieee754_atan2f+0x104>
 801032e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80103fc <__ieee754_atan2f+0x118>
 8010332:	2c03      	cmp	r4, #3
 8010334:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8010338:	e7e7      	b.n	801030a <__ieee754_atan2f+0x26>
 801033a:	b939      	cbnz	r1, 801034c <__ieee754_atan2f+0x68>
 801033c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8010400 <__ieee754_atan2f+0x11c>
 8010340:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010404 <__ieee754_atan2f+0x120>
 8010344:	2800      	cmp	r0, #0
 8010346:	fe67 7a87 	vselge.f32	s15, s15, s14
 801034a:	e7de      	b.n	801030a <__ieee754_atan2f+0x26>
 801034c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010350:	d110      	bne.n	8010374 <__ieee754_atan2f+0x90>
 8010352:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010356:	f104 34ff 	add.w	r4, r4, #4294967295
 801035a:	d107      	bne.n	801036c <__ieee754_atan2f+0x88>
 801035c:	2c02      	cmp	r4, #2
 801035e:	d846      	bhi.n	80103ee <__ieee754_atan2f+0x10a>
 8010360:	4b29      	ldr	r3, [pc, #164]	@ (8010408 <__ieee754_atan2f+0x124>)
 8010362:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010366:	edd3 7a00 	vldr	s15, [r3]
 801036a:	e7ce      	b.n	801030a <__ieee754_atan2f+0x26>
 801036c:	2c02      	cmp	r4, #2
 801036e:	d841      	bhi.n	80103f4 <__ieee754_atan2f+0x110>
 8010370:	4b26      	ldr	r3, [pc, #152]	@ (801040c <__ieee754_atan2f+0x128>)
 8010372:	e7f6      	b.n	8010362 <__ieee754_atan2f+0x7e>
 8010374:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010378:	d0e0      	beq.n	801033c <__ieee754_atan2f+0x58>
 801037a:	1a5b      	subs	r3, r3, r1
 801037c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010380:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010384:	da1a      	bge.n	80103bc <__ieee754_atan2f+0xd8>
 8010386:	2a00      	cmp	r2, #0
 8010388:	da01      	bge.n	801038e <__ieee754_atan2f+0xaa>
 801038a:	313c      	adds	r1, #60	@ 0x3c
 801038c:	db19      	blt.n	80103c2 <__ieee754_atan2f+0xde>
 801038e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010392:	f7ff feb9 	bl	8010108 <fabsf>
 8010396:	f000 f843 	bl	8010420 <atanf>
 801039a:	eef0 7a40 	vmov.f32	s15, s0
 801039e:	2c01      	cmp	r4, #1
 80103a0:	d012      	beq.n	80103c8 <__ieee754_atan2f+0xe4>
 80103a2:	2c02      	cmp	r4, #2
 80103a4:	d017      	beq.n	80103d6 <__ieee754_atan2f+0xf2>
 80103a6:	2c00      	cmp	r4, #0
 80103a8:	d0af      	beq.n	801030a <__ieee754_atan2f+0x26>
 80103aa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010410 <__ieee754_atan2f+0x12c>
 80103ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103b2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010414 <__ieee754_atan2f+0x130>
 80103b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103ba:	e7a6      	b.n	801030a <__ieee754_atan2f+0x26>
 80103bc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8010400 <__ieee754_atan2f+0x11c>
 80103c0:	e7ed      	b.n	801039e <__ieee754_atan2f+0xba>
 80103c2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010418 <__ieee754_atan2f+0x134>
 80103c6:	e7ea      	b.n	801039e <__ieee754_atan2f+0xba>
 80103c8:	ee17 3a90 	vmov	r3, s15
 80103cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80103d0:	ee07 3a90 	vmov	s15, r3
 80103d4:	e799      	b.n	801030a <__ieee754_atan2f+0x26>
 80103d6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010410 <__ieee754_atan2f+0x12c>
 80103da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103de:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010414 <__ieee754_atan2f+0x130>
 80103e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80103e6:	e790      	b.n	801030a <__ieee754_atan2f+0x26>
 80103e8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010414 <__ieee754_atan2f+0x130>
 80103ec:	e78d      	b.n	801030a <__ieee754_atan2f+0x26>
 80103ee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801041c <__ieee754_atan2f+0x138>
 80103f2:	e78a      	b.n	801030a <__ieee754_atan2f+0x26>
 80103f4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010418 <__ieee754_atan2f+0x134>
 80103f8:	e787      	b.n	801030a <__ieee754_atan2f+0x26>
 80103fa:	bf00      	nop
 80103fc:	c0490fdb 	.word	0xc0490fdb
 8010400:	3fc90fdb 	.word	0x3fc90fdb
 8010404:	bfc90fdb 	.word	0xbfc90fdb
 8010408:	08010a94 	.word	0x08010a94
 801040c:	08010a88 	.word	0x08010a88
 8010410:	33bbbd2e 	.word	0x33bbbd2e
 8010414:	40490fdb 	.word	0x40490fdb
 8010418:	00000000 	.word	0x00000000
 801041c:	3f490fdb 	.word	0x3f490fdb

08010420 <atanf>:
 8010420:	b538      	push	{r3, r4, r5, lr}
 8010422:	ee10 5a10 	vmov	r5, s0
 8010426:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801042a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801042e:	eef0 7a40 	vmov.f32	s15, s0
 8010432:	d30f      	bcc.n	8010454 <atanf+0x34>
 8010434:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8010438:	d904      	bls.n	8010444 <atanf+0x24>
 801043a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801043e:	eeb0 0a67 	vmov.f32	s0, s15
 8010442:	bd38      	pop	{r3, r4, r5, pc}
 8010444:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801057c <atanf+0x15c>
 8010448:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010580 <atanf+0x160>
 801044c:	2d00      	cmp	r5, #0
 801044e:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8010452:	e7f4      	b.n	801043e <atanf+0x1e>
 8010454:	4b4b      	ldr	r3, [pc, #300]	@ (8010584 <atanf+0x164>)
 8010456:	429c      	cmp	r4, r3
 8010458:	d810      	bhi.n	801047c <atanf+0x5c>
 801045a:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801045e:	d20a      	bcs.n	8010476 <atanf+0x56>
 8010460:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010588 <atanf+0x168>
 8010464:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801046c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010474:	dce3      	bgt.n	801043e <atanf+0x1e>
 8010476:	f04f 33ff 	mov.w	r3, #4294967295
 801047a:	e013      	b.n	80104a4 <atanf+0x84>
 801047c:	f7ff fe44 	bl	8010108 <fabsf>
 8010480:	4b42      	ldr	r3, [pc, #264]	@ (801058c <atanf+0x16c>)
 8010482:	429c      	cmp	r4, r3
 8010484:	d84f      	bhi.n	8010526 <atanf+0x106>
 8010486:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801048a:	429c      	cmp	r4, r3
 801048c:	d841      	bhi.n	8010512 <atanf+0xf2>
 801048e:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8010492:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010496:	eea0 7a27 	vfma.f32	s14, s0, s15
 801049a:	2300      	movs	r3, #0
 801049c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80104a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104a4:	1c5a      	adds	r2, r3, #1
 80104a6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80104aa:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8010590 <atanf+0x170>
 80104ae:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8010594 <atanf+0x174>
 80104b2:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8010598 <atanf+0x178>
 80104b6:	ee66 6a06 	vmul.f32	s13, s12, s12
 80104ba:	eee6 5a87 	vfma.f32	s11, s13, s14
 80104be:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 801059c <atanf+0x17c>
 80104c2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80104c6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80105a0 <atanf+0x180>
 80104ca:	eee7 5a26 	vfma.f32	s11, s14, s13
 80104ce:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80105a4 <atanf+0x184>
 80104d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80104d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80105a8 <atanf+0x188>
 80104da:	eee7 5a26 	vfma.f32	s11, s14, s13
 80104de:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80105ac <atanf+0x18c>
 80104e2:	eea6 5a87 	vfma.f32	s10, s13, s14
 80104e6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80105b0 <atanf+0x190>
 80104ea:	eea5 7a26 	vfma.f32	s14, s10, s13
 80104ee:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80105b4 <atanf+0x194>
 80104f2:	eea7 5a26 	vfma.f32	s10, s14, s13
 80104f6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80105b8 <atanf+0x198>
 80104fa:	eea5 7a26 	vfma.f32	s14, s10, s13
 80104fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010502:	eea5 7a86 	vfma.f32	s14, s11, s12
 8010506:	ee27 7a87 	vmul.f32	s14, s15, s14
 801050a:	d121      	bne.n	8010550 <atanf+0x130>
 801050c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010510:	e795      	b.n	801043e <atanf+0x1e>
 8010512:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010516:	ee30 7a67 	vsub.f32	s14, s0, s15
 801051a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801051e:	2301      	movs	r3, #1
 8010520:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010524:	e7be      	b.n	80104a4 <atanf+0x84>
 8010526:	4b25      	ldr	r3, [pc, #148]	@ (80105bc <atanf+0x19c>)
 8010528:	429c      	cmp	r4, r3
 801052a:	d80b      	bhi.n	8010544 <atanf+0x124>
 801052c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010534:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010538:	2302      	movs	r3, #2
 801053a:	ee70 6a67 	vsub.f32	s13, s0, s15
 801053e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010542:	e7af      	b.n	80104a4 <atanf+0x84>
 8010544:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010548:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801054c:	2303      	movs	r3, #3
 801054e:	e7a9      	b.n	80104a4 <atanf+0x84>
 8010550:	4a1b      	ldr	r2, [pc, #108]	@ (80105c0 <atanf+0x1a0>)
 8010552:	491c      	ldr	r1, [pc, #112]	@ (80105c4 <atanf+0x1a4>)
 8010554:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010558:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801055c:	edd3 6a00 	vldr	s13, [r3]
 8010560:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010564:	2d00      	cmp	r5, #0
 8010566:	ee37 7a67 	vsub.f32	s14, s14, s15
 801056a:	edd2 7a00 	vldr	s15, [r2]
 801056e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010572:	bfb8      	it	lt
 8010574:	eef1 7a67 	vneglt.f32	s15, s15
 8010578:	e761      	b.n	801043e <atanf+0x1e>
 801057a:	bf00      	nop
 801057c:	bfc90fdb 	.word	0xbfc90fdb
 8010580:	3fc90fdb 	.word	0x3fc90fdb
 8010584:	3edfffff 	.word	0x3edfffff
 8010588:	7149f2ca 	.word	0x7149f2ca
 801058c:	3f97ffff 	.word	0x3f97ffff
 8010590:	3c8569d7 	.word	0x3c8569d7
 8010594:	3d4bda59 	.word	0x3d4bda59
 8010598:	bd6ef16b 	.word	0xbd6ef16b
 801059c:	3d886b35 	.word	0x3d886b35
 80105a0:	3dba2e6e 	.word	0x3dba2e6e
 80105a4:	3e124925 	.word	0x3e124925
 80105a8:	3eaaaaab 	.word	0x3eaaaaab
 80105ac:	bd15a221 	.word	0xbd15a221
 80105b0:	bd9d8795 	.word	0xbd9d8795
 80105b4:	bde38e38 	.word	0xbde38e38
 80105b8:	be4ccccd 	.word	0xbe4ccccd
 80105bc:	401bffff 	.word	0x401bffff
 80105c0:	08010ab0 	.word	0x08010ab0
 80105c4:	08010aa0 	.word	0x08010aa0

080105c8 <__ieee754_sqrtf>:
 80105c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80105cc:	4770      	bx	lr
	...

080105d0 <_init>:
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	bf00      	nop
 80105d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105d6:	bc08      	pop	{r3}
 80105d8:	469e      	mov	lr, r3
 80105da:	4770      	bx	lr

080105dc <_fini>:
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105de:	bf00      	nop
 80105e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e2:	bc08      	pop	{r3}
 80105e4:	469e      	mov	lr, r3
 80105e6:	4770      	bx	lr
