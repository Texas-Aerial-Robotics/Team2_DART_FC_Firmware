
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c170  0800c170  0000d170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c620  0800c620  0000d620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c628  0800c628  0000d628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c62c  0800c62c  0000d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000278  24000000  0800c630  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000314  24000278  0800c8a8  0000e278  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400058c  0800c8a8  0000e58c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017df3  00000000  00000000  0000e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002b5e  00000000  00000000  00026099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001280  00000000  00000000  00028bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e6d  00000000  00000000  00029e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038830  00000000  00000000  0002ace5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000183c4  00000000  00000000  00063515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016851c  00000000  00000000  0007b8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e3df5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006384  00000000  00000000  001e3e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001ea1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000278 	.word	0x24000278
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c154 	.word	0x0800c154

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400027c 	.word	0x2400027c
 80002dc:	0800c154 	.word	0x0800c154

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a70:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a74:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000a80:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a84:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000a88:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00b      	beq.n	8000aa8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000a90:	e000      	b.n	8000a94 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000a92:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000a94:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f9      	beq.n	8000a92 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000a9e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	@ 0x50
 8000abc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000abe:	f000 fa93 	bl	8000fe8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f001 f84f 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f87b 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 f9e7 	bl	8000e9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 f999 	bl	8000e04 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ad2:	f000 f8f1 	bl	8000cb8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ad6:	f000 f947 	bl	8000d68 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8000ada:	4831      	ldr	r0, [pc, #196]	@ (8000ba0 <main+0xe8>)
 8000adc:	f005 f966 	bl	8005dac <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2224      	movs	r2, #36	@ 0x24
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f007 fef5 	bl	80088da <memset>
  mpu9250_setup();
 8000af0:	f000 fb04 	bl	80010fc <mpu9250_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 8000af4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba4 <main+0xec>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d004      	beq.n	8000b08 <main+0x50>
	  {
		  timer_flag = 0;	//reset timer flag
 8000afe:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <main+0xec>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]

		  mpu9250_getRawAngle();
 8000b04:	f000 fb0c 	bl	8001120 <mpu9250_getRawAngle>
	  }

	  double dt = get_dt();
 8000b08:	f000 fa0e 	bl	8000f28 <get_dt>
 8000b0c:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

	  double pitch_angle = kalman_getAngle(&KalmanPitch, imu_angles.pitch, imu_processed_data.gyro_y, dt);
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <main+0xf0>)
 8000b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <main+0xf4>)
 8000b1c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b20:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b24:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8000b28:	eeb0 1b46 	vmov.f64	d1, d6
 8000b2c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b30:	481f      	ldr	r0, [pc, #124]	@ (8000bb0 <main+0xf8>)
 8000b32:	f000 fc4b 	bl	80013cc <kalman_getAngle>
 8000b36:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	  double roll_angle = kalman_getAngle(&KalmanRoll, imu_angles.roll, imu_processed_data.gyro_x, dt);
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <main+0xf0>)
 8000b3c:	edd3 7a00 	vldr	s15, [r3]
 8000b40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b44:	4b19      	ldr	r3, [pc, #100]	@ (8000bac <main+0xf4>)
 8000b46:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b4a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000b4e:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 8000b52:	eeb0 1b46 	vmov.f64	d1, d6
 8000b56:	eeb0 0b47 	vmov.f64	d0, d7
 8000b5a:	4816      	ldr	r0, [pc, #88]	@ (8000bb4 <main+0xfc>)
 8000b5c:	f000 fc36 	bl	80013cc <kalman_getAngle>
 8000b60:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	  //send data through UART
	  snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", pitch_angle, roll_angle);
 8000b64:	4638      	mov	r0, r7
 8000b66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000b6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000b6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000b72:	e9cd 2300 	strd	r2, r3, [sp]
 8000b76:	4a10      	ldr	r2, [pc, #64]	@ (8000bb8 <main+0x100>)
 8000b78:	2128      	movs	r1, #40	@ 0x28
 8000b7a:	f007 fe17 	bl	80087ac <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fbfd 	bl	8000380 <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b90:	480a      	ldr	r0, [pc, #40]	@ (8000bbc <main+0x104>)
 8000b92:	f005 fdeb 	bl	800676c <HAL_UART_Transmit>
	  HAL_Delay(5);
 8000b96:	2005      	movs	r0, #5
 8000b98:	f001 f876 	bl	8001c88 <HAL_Delay>
  {
 8000b9c:	e7aa      	b.n	8000af4 <main+0x3c>
 8000b9e:	bf00      	nop
 8000ba0:	2400031c 	.word	0x2400031c
 8000ba4:	24000408 	.word	0x24000408
 8000ba8:	24000430 	.word	0x24000430
 8000bac:	24000418 	.word	0x24000418
 8000bb0:	24000000 	.word	0x24000000
 8000bb4:	24000050 	.word	0x24000050
 8000bb8:	0800c170 	.word	0x0800c170
 8000bbc:	24000368 	.word	0x24000368

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09c      	sub	sp, #112	@ 0x70
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	224c      	movs	r2, #76	@ 0x4c
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f007 fe83 	bl	80088da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 fe7d 	bl	80088da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f001 fbd3 	bl	800238c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <SystemClock_Config+0xf0>)
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	4a30      	ldr	r2, [pc, #192]	@ (8000cb0 <SystemClock_Config+0xf0>)
 8000bf0:	f023 0301 	bic.w	r3, r3, #1
 8000bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8000cb0 <SystemClock_Config+0xf0>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4b2c      	ldr	r3, [pc, #176]	@ (8000cb4 <SystemClock_Config+0xf4>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c08:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb4 <SystemClock_Config+0xf4>)
 8000c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c0e:	6193      	str	r3, [r2, #24]
 8000c10:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <SystemClock_Config+0xf4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c1c:	bf00      	nop
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <SystemClock_Config+0xf4>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c2a:	d1f8      	bne.n	8000c1e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	2340      	movs	r3, #64	@ 0x40
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c40:	2304      	movs	r3, #4
 8000c42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c44:	230a      	movs	r3, #10
 8000c46:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c54:	230c      	movs	r3, #12
 8000c56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fbcb 	bl	8002400 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c70:	f000 f9e6 	bl	8001040 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	233f      	movs	r3, #63	@ 0x3f
 8000c76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c88:	2340      	movs	r3, #64	@ 0x40
 8000c8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f002 f80b 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000ca4:	f000 f9cc 	bl	8001040 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3770      	adds	r7, #112	@ 0x70
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58000400 	.word	0x58000400
 8000cb4:	58024800 	.word	0x58024800

08000cb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cbc:	4b28      	ldr	r3, [pc, #160]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cbe:	4a29      	ldr	r2, [pc, #164]	@ (8000d64 <MX_SPI1_Init+0xac>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cd6:	4b22      	ldr	r3, [pc, #136]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000cdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000ce8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cf0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cf4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d08:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_SPI1_Init+0xa8>)
 8000d4e:	f004 f969 	bl	8005024 <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8000d58:	f000 f972 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	24000294 	.word	0x24000294
 8000d64:	40013000 	.word	0x40013000

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d90:	f240 321f 	movw	r2, #799	@ 0x31f
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d9c:	4b18      	ldr	r3, [pc, #96]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d9e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db0:	4813      	ldr	r0, [pc, #76]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000db2:	f004 ffa4 	bl	8005cfe <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f940 	bl	8001040 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000dce:	f005 f96d 	bl	80060ac <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dd8:	f000 f932 	bl	8001040 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000dea:	f005 fbc3 	bl	8006574 <HAL_TIMEx_MasterConfigSynchronization>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 f924 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2400031c 	.word	0x2400031c

08000e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <MX_USART2_UART_Init+0x94>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4c:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e4e:	f005 fc3d 	bl	80066cc <HAL_UART_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e58:	f000 f8f2 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e60:	f006 fcd3 	bl	800780a <HAL_UARTEx_SetTxFifoThreshold>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e6a:	f000 f8e9 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4808      	ldr	r0, [pc, #32]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e72:	f006 fd08 	bl	8007886 <HAL_UARTEx_SetRxFifoThreshold>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e7c:	f000 f8e0 	bl	8001040 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_USART2_UART_Init+0x90>)
 8000e82:	f006 fc89 	bl	8007798 <HAL_UARTEx_DisableFifoMode>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e8c:	f000 f8d8 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	24000368 	.word	0x24000368
 8000e98:	40004400 	.word	0x40004400

08000e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	4a18      	ldr	r2, [pc, #96]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	4a11      	ldr	r2, [pc, #68]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_GPIO_Init+0x80>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	480b      	ldr	r0, [pc, #44]	@ (8000f20 <MX_GPIO_Init+0x84>)
 8000ef4:	f001 fa30 	bl	8002358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000ef8:	2320      	movs	r3, #32
 8000efa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 030c 	add.w	r3, r7, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	@ (8000f20 <MX_GPIO_Init+0x84>)
 8000f10:	f001 f872 	bl	8001ff8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f14:	bf00      	nop
 8000f16:	3720      	adds	r7, #32
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	58024400 	.word	0x58024400
 8000f20:	58020000 	.word	0x58020000
 8000f24:	00000000 	.word	0x00000000

08000f28 <get_dt>:

/* USER CODE BEGIN 4 */
double get_dt()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
    double current_time = HAL_GetTick() / 1000.0;  // Get time in seconds
 8000f2e:	f000 fe9f 	bl	8001c70 <HAL_GetTick>
 8000f32:	ee07 0a90 	vmov	s15, r0
 8000f36:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000f3a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000f78 <get_dt+0x50>
 8000f3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f42:	ed87 7b02 	vstr	d7, [r7, #8]
    double dt = current_time - previous_time;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <get_dt+0x58>)
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	ed97 6b02 	vldr	d6, [r7, #8]
 8000f50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f54:	ed87 7b00 	vstr	d7, [r7]
    previous_time = current_time;  // Update for the next call
 8000f58:	4909      	ldr	r1, [pc, #36]	@ (8000f80 <get_dt+0x58>)
 8000f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f5e:	e9c1 2300 	strd	r2, r3, [r1]
    return dt;
 8000f62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f66:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	00000000 	.word	0x00000000
 8000f7c:	408f4000 	.word	0x408f4000
 8000f80:	24000400 	.word	0x24000400

08000f84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a06      	ldr	r2, [pc, #24]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
	}
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2400031c 	.word	0x2400031c
 8000fac:	24000408 	.word	0x24000408

08000fb0 <_write>:
int _write(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e009      	b.n	8000fd6 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60ba      	str	r2, [r7, #8]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd4c 	bl	8000a68 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbf1      	blt.n	8000fc2 <_write+0x12>
	}
	return len;
 8000fde:	687b      	ldr	r3, [r7, #4]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ffa:	f000 ff85 	bl	8001f08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001002:	2300      	movs	r3, #0
 8001004:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800100a:	231f      	movs	r3, #31
 800100c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800100e:	2387      	movs	r3, #135	@ 0x87
 8001010:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001012:	2300      	movs	r3, #0
 8001014:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001016:	2300      	movs	r3, #0
 8001018:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800101a:	2301      	movs	r3, #1
 800101c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800101e:	2301      	movs	r3, #1
 8001020:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800102a:	463b      	mov	r3, r7
 800102c:	4618      	mov	r0, r3
 800102e:	f000 ffa3 	bl	8001f78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001032:	2004      	movs	r0, #4
 8001034:	f000 ff80 	bl	8001f38 <HAL_MPU_Enable>

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <Error_Handler+0x8>

0800104c <mpu9250_write_reg>:
		.R_measure = 0.03f
};


void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2120      	movs	r1, #32
 8001060:	480b      	ldr	r0, [pc, #44]	@ (8001090 <mpu9250_write_reg+0x44>)
 8001062:	f001 f979 	bl	8002358 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001066:	1df9      	adds	r1, r7, #7
 8001068:	2364      	movs	r3, #100	@ 0x64
 800106a:	2201      	movs	r2, #1
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <mpu9250_write_reg+0x48>)
 800106e:	f004 f8fd 	bl	800526c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001072:	1db9      	adds	r1, r7, #6
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	2201      	movs	r2, #1
 8001078:	4806      	ldr	r0, [pc, #24]	@ (8001094 <mpu9250_write_reg+0x48>)
 800107a:	f004 f8f7 	bl	800526c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2120      	movs	r1, #32
 8001082:	4803      	ldr	r0, [pc, #12]	@ (8001090 <mpu9250_write_reg+0x44>)
 8001084:	f001 f968 	bl	8002358 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	58020000 	.word	0x58020000
 8001094:	24000294 	.word	0x24000294

08001098 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	480f      	ldr	r0, [pc, #60]	@ (80010f4 <mpu9250_read_reg+0x5c>)
 80010b8:	f001 f94e 	bl	8002358 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80010bc:	f107 010e 	add.w	r1, r7, #14
 80010c0:	2364      	movs	r3, #100	@ 0x64
 80010c2:	2201      	movs	r2, #1
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <mpu9250_read_reg+0x60>)
 80010c6:	f004 f8d1 	bl	800526c <HAL_SPI_Transmit>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	2364      	movs	r3, #100	@ 0x64
 80010d4:	6839      	ldr	r1, [r7, #0]
 80010d6:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <mpu9250_read_reg+0x60>)
 80010d8:	f004 fab6 	bl	8005648 <HAL_SPI_Receive>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2120      	movs	r1, #32
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <mpu9250_read_reg+0x5c>)
 80010e6:	f001 f937 	bl	8002358 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	58020000 	.word	0x58020000
 80010f8:	24000294 	.word	0x24000294

080010fc <mpu9250_setup>:

void mpu9250_setup()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001100:	2105      	movs	r1, #5
 8001102:	201a      	movs	r0, #26
 8001104:	f7ff ffa2 	bl	800104c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001108:	2110      	movs	r1, #16
 800110a:	201c      	movs	r0, #28
 800110c:	f7ff ff9e 	bl	800104c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001110:	2108      	movs	r1, #8
 8001112:	201b      	movs	r0, #27
 8001114:	f7ff ff9a 	bl	800104c <mpu9250_write_reg>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0000      	movs	r0, r0
	...

08001120 <mpu9250_getRawAngle>:


void mpu9250_getRawAngle()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	ed2d 8b02 	vpush	{d8}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 800112a:	463b      	mov	r3, r7
 800112c:	2206      	movs	r2, #6
 800112e:	4619      	mov	r1, r3
 8001130:	203b      	movs	r0, #59	@ 0x3b
 8001132:	f7ff ffb1 	bl	8001098 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001136:	783b      	ldrb	r3, [r7, #0]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b9e      	ldr	r3, [pc, #632]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001146:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	78fb      	ldrb	r3, [r7, #3]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b9a      	ldr	r3, [pc, #616]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001158:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 800115a:	793b      	ldrb	r3, [r7, #4]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	797b      	ldrb	r3, [r7, #5]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b95      	ldr	r3, [pc, #596]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 800116a:	809a      	strh	r2, [r3, #4]

	  imu_processed_data.accel_x = (float)imu_raw_data.accel_x/4096.0;
 800116c:	4b94      	ldr	r3, [pc, #592]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	b21b      	sxth	r3, r3
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800117e:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 80013a8 <mpu9250_getRawAngle+0x288>
 8001182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001186:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800118a:	4b8e      	ldr	r3, [pc, #568]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
	  imu_processed_data.accel_y = (float)imu_raw_data.accel_y/4096.0;
 8001190:	4b8b      	ldr	r3, [pc, #556]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001192:	885b      	ldrh	r3, [r3, #2]
 8001194:	b21b      	sxth	r3, r3
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011a2:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 80013a8 <mpu9250_getRawAngle+0x288>
 80011a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ae:	4b85      	ldr	r3, [pc, #532]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80011b0:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_processed_data.accel_z = (float)imu_raw_data.accel_z/4096.0;
 80011b4:	4b82      	ldr	r3, [pc, #520]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 80011b6:	889b      	ldrh	r3, [r3, #4]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	ee07 3a90 	vmov	s15, r3
 80011be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011c6:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 80013a8 <mpu9250_getRawAngle+0x288>
 80011ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011d2:	4b7c      	ldr	r3, [pc, #496]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80011d4:	edc3 7a02 	vstr	s15, [r3, #8]
	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0
 80011d8:	4b7a      	ldr	r3, [pc, #488]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80011da:	edd3 7a02 	vldr	s15, [r3, #8]
 80011de:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80011e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011e6:	4b77      	ldr	r3, [pc, #476]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80011e8:	edc3 7a02 	vstr	s15, [r3, #8]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 80011ec:	463b      	mov	r3, r7
 80011ee:	2206      	movs	r2, #6
 80011f0:	4619      	mov	r1, r3
 80011f2:	2043      	movs	r0, #67	@ 0x43
 80011f4:	f7ff ff50 	bl	8001098 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 80011f8:	783b      	ldrb	r3, [r7, #0]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b6e      	ldr	r3, [pc, #440]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001208:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 800120a:	78bb      	ldrb	r3, [r7, #2]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b69      	ldr	r3, [pc, #420]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 800121a:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 800121c:	793b      	ldrb	r3, [r7, #4]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	797b      	ldrb	r3, [r7, #5]
 8001224:	b21b      	sxth	r3, r3
 8001226:	4313      	orrs	r3, r2
 8001228:	b21a      	sxth	r2, r3
 800122a:	4b65      	ldr	r3, [pc, #404]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 800122c:	815a      	strh	r2, [r3, #10]

	  imu_processed_data.gyro_x = (float)imu_raw_data.gyro_x/65.5;
 800122e:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001230:	88db      	ldrh	r3, [r3, #6]
 8001232:	b21b      	sxth	r3, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001240:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 80013b0 <mpu9250_getRawAngle+0x290>
 8001244:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001248:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800124c:	4b5d      	ldr	r3, [pc, #372]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 800124e:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y = (float)imu_raw_data.gyro_y/65.5;
 8001252:	4b5b      	ldr	r3, [pc, #364]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001254:	891b      	ldrh	r3, [r3, #8]
 8001256:	b21b      	sxth	r3, r3
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001264:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 80013b0 <mpu9250_getRawAngle+0x290>
 8001268:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800126c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001270:	4b54      	ldr	r3, [pc, #336]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001272:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z = (float)imu_raw_data.gyro_z/65.5;
 8001276:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <mpu9250_getRawAngle+0x2a0>)
 8001278:	895b      	ldrh	r3, [r3, #10]
 800127a:	b21b      	sxth	r3, r3
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001284:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001288:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80013b0 <mpu9250_getRawAngle+0x290>
 800128c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001290:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001294:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001296:	edc3 7a05 	vstr	s15, [r3, #20]
	  imu_processed_data.gyro_x -= 4;	//offset GyroX to be around 0
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 800129c:	edd3 7a03 	vldr	s15, [r3, #12]
 80012a0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80012a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012a8:	4b46      	ldr	r3, [pc, #280]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012aa:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y += 20;	//offset GyroY to be around 0
 80012ae:	4b45      	ldr	r3, [pc, #276]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80012b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012bc:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012be:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z += 5;	//offset GyroZ to be around 0
 80012c2:	4b40      	ldr	r3, [pc, #256]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80012cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012d2:	edc3 7a05 	vstr	s15, [r3, #20]

	  imu_angles.roll=atan(imu_processed_data.accel_y/sqrt((imu_processed_data.accel_x*imu_processed_data.accel_x)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012dc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80012e0:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012e2:	ed93 7a00 	vldr	s14, [r3]
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f0:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80012f6:	4b33      	ldr	r3, [pc, #204]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 80012f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001308:	eeb0 0b47 	vmov.f64	d0, d7
 800130c:	f00a fdfc 	bl	800bf08 <sqrt>
 8001310:	eeb0 6b40 	vmov.f64	d6, d0
 8001314:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001318:	eeb0 0b47 	vmov.f64	d0, d7
 800131c:	f00a fe14 	bl	800bf48 <atan>
 8001320:	eeb0 6b40 	vmov.f64	d6, d0
 8001324:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 80013b8 <mpu9250_getRawAngle+0x298>
 8001328:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800132c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <mpu9250_getRawAngle+0x2a8>)
 8001332:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.pitch=-atan(imu_processed_data.accel_x/sqrt((imu_processed_data.accel_y*imu_processed_data.accel_y)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001342:	ed93 7a01 	vldr	s14, [r3, #4]
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001348:	edd3 7a01 	vldr	s15, [r3, #4]
 800134c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001352:	edd3 6a02 	vldr	s13, [r3, #8]
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <mpu9250_getRawAngle+0x2a4>)
 8001358:	edd3 7a02 	vldr	s15, [r3, #8]
 800135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001368:	eeb0 0b47 	vmov.f64	d0, d7
 800136c:	f00a fdcc 	bl	800bf08 <sqrt>
 8001370:	eeb0 6b40 	vmov.f64	d6, d0
 8001374:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001378:	eeb0 0b47 	vmov.f64	d0, d7
 800137c:	f00a fde4 	bl	800bf48 <atan>
 8001380:	eeb0 7b40 	vmov.f64	d7, d0
 8001384:	eeb1 6b47 	vneg.f64	d6, d7
 8001388:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80013b8 <mpu9250_getRawAngle+0x298>
 800138c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001390:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001394:	4b0c      	ldr	r3, [pc, #48]	@ (80013c8 <mpu9250_getRawAngle+0x2a8>)
 8001396:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	ecbd 8b02 	vpop	{d8}
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	00000000 	.word	0x00000000
 80013ac:	40b00000 	.word	0x40b00000
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40506000 	.word	0x40506000
 80013b8:	80fa7e3f 	.word	0x80fa7e3f
 80013bc:	3f91dfde 	.word	0x3f91dfde
 80013c0:	2400040c 	.word	0x2400040c
 80013c4:	24000418 	.word	0x24000418
 80013c8:	24000430 	.word	0x24000430

080013cc <kalman_getAngle>:

double kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b097      	sub	sp, #92	@ 0x5c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	61f8      	str	r0, [r7, #28]
 80013d4:	ed87 0b04 	vstr	d0, [r7, #16]
 80013d8:	ed87 1b02 	vstr	d1, [r7, #8]
 80013dc:	ed87 2b00 	vstr	d2, [r7]
	//Step 1: State Prediction
	double rate = newRate - Kalman->bias;	//newRate is the newest gyro measurement
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80013e6:	ed97 6b02 	vldr	d6, [r7, #8]
 80013ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013ee:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	Kalman->angle += dt * rate;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	ed93 6b00 	vldr	d6, [r3]
 80013f8:	ed97 5b00 	vldr	d5, [r7]
 80013fc:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001400:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001404:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	ed83 7b00 	vstr	d7, [r3]

	//Step 2: Covariance Prediction
	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[1][0] - Kalman->P[0][1] + Kalman->Q_angle);
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	ed93 6b06 	vldr	d6, [r3, #24]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 800141a:	ed97 7b00 	vldr	d7, [r7]
 800141e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001428:	ee35 5b47 	vsub.f64	d5, d5, d7
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001432:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800143c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001440:	ed97 7b00 	vldr	d7, [r7]
 8001444:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001448:	ee36 7b07 	vadd.f64	d7, d6, d7
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	ed93 6b08 	vldr	d6, [r3, #32]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 800145e:	ed97 7b00 	vldr	d7, [r7]
 8001462:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001466:	ee36 7b47 	vsub.f64	d7, d6, d7
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 800147c:	ed97 7b00 	vldr	d7, [r7]
 8001480:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001484:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800149a:	ed97 7b00 	vldr	d7, [r7]
 800149e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	//Step 3: Innovation (calculate angle difference)
	double y = newAngle - Kalman->angle;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	ed93 7b00 	vldr	d7, [r3]
 80014b2:	ed97 6b04 	vldr	d6, [r7, #16]
 80014b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014ba:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	//Step 4: Innovation covariance	(estimate error)
	double S = Kalman->P[0][0] + Kalman->R_measure;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	ed93 6b06 	vldr	d6, [r3, #24]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80014ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014ce:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

	//Step 5: Kalman Gain
	double K[2];	//2x1 vector
	K[0] = Kalman->P[0][0] / S;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	ed93 5b06 	vldr	d5, [r3, #24]
 80014d8:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 80014dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014e0:	ed87 7b08 	vstr	d7, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 80014ea:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 80014ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014f2:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28

	//Step 6: Update Angle
	Kalman->angle += K[0] * y;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	ed93 6b00 	vldr	d6, [r3]
 80014fc:	ed97 5b08 	vldr	d5, [r7, #32]
 8001500:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001504:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001508:	ee36 7b07 	vadd.f64	d7, d6, d7
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	ed83 7b00 	vstr	d7, [r3]
	Kalman->bias += K[1] * y;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	ed93 6b02 	vldr	d6, [r3, #8]
 8001518:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 800151c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001520:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001524:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	ed83 7b02 	vstr	d7, [r3, #8]

	//Step 7: Update Covariance
	double P00_temp = Kalman->P[0][0];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001534:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = Kalman->P[0][1];
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800153e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	ed93 6b06 	vldr	d6, [r3, #24]
 8001548:	ed97 5b08 	vldr	d5, [r7, #32]
 800154c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001550:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001554:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= K[0] * P01_temp;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	ed93 6b08 	vldr	d6, [r3, #32]
 8001564:	ed97 5b08 	vldr	d5, [r7, #32]
 8001568:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 800156c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001570:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= K[1] * P00_temp;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001580:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001584:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001588:	ee25 7b07 	vmul.f64	d7, d5, d7
 800158c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 800159c:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 80015a0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	return Kalman->angle;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	ec43 2b17 	vmov	d7, r2, r3
}
 80015bc:	eeb0 0b47 	vmov.f64	d0, d7
 80015c0:	375c      	adds	r7, #92	@ 0x5c
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_MspInit+0x30>)
 80015d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015d8:	4a08      	ldr	r2, [pc, #32]	@ (80015fc <HAL_MspInit+0x30>)
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_MspInit+0x30>)
 80015e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	58024400 	.word	0x58024400

08001600 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0bc      	sub	sp, #240	@ 0xf0
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	22c0      	movs	r2, #192	@ 0xc0
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f007 f95a 	bl	80088da <memset>
  if(hspi->Instance==SPI1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a38      	ldr	r2, [pc, #224]	@ (800170c <HAL_SPI_MspInit+0x10c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d168      	bne.n	8001702 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001630:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800163c:	2300      	movs	r3, #0
 800163e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001640:	f107 0318 	add.w	r3, r7, #24
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fec1 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001650:	f7ff fcf6 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001654:	4b2e      	ldr	r3, [pc, #184]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800165a:	4a2d      	ldr	r2, [pc, #180]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 800165c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001660:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001664:	4b2a      	ldr	r3, [pc, #168]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001666:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800166a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b27      	ldr	r3, [pc, #156]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001678:	4a25      	ldr	r2, [pc, #148]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001682:	4b23      	ldr	r3, [pc, #140]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001690:	4b1f      	ldr	r3, [pc, #124]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001696:	4a1e      	ldr	r2, [pc, #120]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_SPI_MspInit+0x110>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016ae:	2380      	movs	r3, #128	@ 0x80
 80016b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016d0:	4619      	mov	r1, r3
 80016d2:	4810      	ldr	r0, [pc, #64]	@ (8001714 <HAL_SPI_MspInit+0x114>)
 80016d4:	f000 fc90 	bl	8001ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80016d8:	2318      	movs	r3, #24
 80016da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f0:	2305      	movs	r3, #5
 80016f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016fa:	4619      	mov	r1, r3
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <HAL_SPI_MspInit+0x118>)
 80016fe:	f000 fc7b 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001702:	bf00      	nop
 8001704:	37f0      	adds	r7, #240	@ 0xf0
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40013000 	.word	0x40013000
 8001710:	58024400 	.word	0x58024400
 8001714:	58020000 	.word	0x58020000
 8001718:	58020400 	.word	0x58020400

0800171c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800172c:	d116      	bne.n	800175c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001734:	4a0b      	ldr	r2, [pc, #44]	@ (8001764 <HAL_TIM_Base_MspInit+0x48>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_TIM_Base_MspInit+0x48>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	201c      	movs	r0, #28
 8001752:	f000 fba4 	bl	8001e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fbbb 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400

08001768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b0ba      	sub	sp, #232	@ 0xe8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	22c0      	movs	r2, #192	@ 0xc0
 8001786:	2100      	movs	r1, #0
 8001788:	4618      	mov	r0, r3
 800178a:	f007 f8a6 	bl	80088da <memset>
  if(huart->Instance==USART2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a26      	ldr	r2, [pc, #152]	@ (800182c <HAL_UART_MspInit+0xc4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d145      	bne.n	8001824 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001798:	f04f 0202 	mov.w	r2, #2
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 fe0c 	bl	80033cc <HAL_RCCEx_PeriphCLKConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80017ba:	f7ff fc41 	bl	8001040 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017be:	4b1c      	ldr	r3, [pc, #112]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a13      	ldr	r2, [pc, #76]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_UART_MspInit+0xc8>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fa:	230c      	movs	r3, #12
 80017fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_UART_MspInit+0xcc>)
 8001820:	f000 fbea 	bl	8001ff8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001824:	bf00      	nop
 8001826:	37e8      	adds	r7, #232	@ 0xe8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40004400 	.word	0x40004400
 8001830:	58024400 	.word	0x58024400
 8001834:	58020000 	.word	0x58020000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <NMI_Handler+0x4>

08001840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <HardFault_Handler+0x4>

08001848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <MemManage_Handler+0x4>

08001850 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <UsageFault_Handler+0x4>

08001860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188e:	f000 f9db 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800189c:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <TIM2_IRQHandler+0x10>)
 800189e:	f004 fafd 	bl	8005e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	2400031c 	.word	0x2400031c

080018ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_kill>:

int _kill(int pid, int sig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c6:	f007 f85b 	bl	8008980 <__errno>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2216      	movs	r2, #22
 80018ce:	601a      	str	r2, [r3, #0]
  return -1;
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <_exit>:

void _exit (int status)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffe7 	bl	80018bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ee:	bf00      	nop
 80018f0:	e7fd      	b.n	80018ee <_exit+0x12>

080018f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e00a      	b.n	800191a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001904:	f3af 8000 	nop.w
 8001908:	4601      	mov	r1, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	60ba      	str	r2, [r7, #8]
 8001910:	b2ca      	uxtb	r2, r1
 8001912:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf0      	blt.n	8001904 <_read+0x12>
  }

  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:
  }
  return len;
}

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001954:	605a      	str	r2, [r3, #4]
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f006 ffdc 	bl	8008980 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24080000 	.word	0x24080000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	24000438 	.word	0x24000438
 80019fc:	24000590 	.word	0x24000590

08001a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a04:	4b37      	ldr	r3, [pc, #220]	@ (8001ae4 <SystemInit+0xe4>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ae4 <SystemInit+0xe4>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a14:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <SystemInit+0xe8>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d807      	bhi.n	8001a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <SystemInit+0xe8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 030f 	bic.w	r3, r3, #15
 8001a28:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae8 <SystemInit+0xe8>)
 8001a2a:	f043 0307 	orr.w	r3, r3, #7
 8001a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a30:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <SystemInit+0xec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2d      	ldr	r2, [pc, #180]	@ (8001aec <SystemInit+0xec>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <SystemInit+0xec>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <SystemInit+0xec>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4929      	ldr	r1, [pc, #164]	@ (8001aec <SystemInit+0xec>)
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <SystemInit+0xf0>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <SystemInit+0xe8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <SystemInit+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 030f 	bic.w	r3, r3, #15
 8001a62:	4a21      	ldr	r2, [pc, #132]	@ (8001ae8 <SystemInit+0xe8>)
 8001a64:	f043 0307 	orr.w	r3, r3, #7
 8001a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a6a:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <SystemInit+0xec>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	@ (8001aec <SystemInit+0xec>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <SystemInit+0xec>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <SystemInit+0xec>)
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <SystemInit+0xf4>)
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <SystemInit+0xec>)
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <SystemInit+0xf8>)
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <SystemInit+0xec>)
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001afc <SystemInit+0xfc>)
 8001a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <SystemInit+0xec>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a94:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <SystemInit+0xec>)
 8001a96:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <SystemInit+0xfc>)
 8001a98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <SystemInit+0xec>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <SystemInit+0xec>)
 8001aa2:	4a16      	ldr	r2, [pc, #88]	@ (8001afc <SystemInit+0xfc>)
 8001aa4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aa6:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <SystemInit+0xec>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aac:	4b0f      	ldr	r3, [pc, #60]	@ (8001aec <SystemInit+0xec>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	@ (8001aec <SystemInit+0xec>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <SystemInit+0xec>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <SystemInit+0x100>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <SystemInit+0x104>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001aca:	d202      	bcs.n	8001ad2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <SystemInit+0x108>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <SystemInit+0x10c>)
 8001ad4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001ad8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	52002000 	.word	0x52002000
 8001aec:	58024400 	.word	0x58024400
 8001af0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001af4:	02020200 	.word	0x02020200
 8001af8:	01ff0000 	.word	0x01ff0000
 8001afc:	01010280 	.word	0x01010280
 8001b00:	5c001000 	.word	0x5c001000
 8001b04:	ffff0000 	.word	0xffff0000
 8001b08:	51008108 	.word	0x51008108
 8001b0c:	52004000 	.word	0x52004000

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b14:	f7ff ff74 	bl	8001a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f006 ff25 	bl	800898c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7fe ffb9 	bl	8000ab8 <main>
  bx  lr
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b48:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b4c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b50:	24000278 	.word	0x24000278
  ldr r2, =_sidata
 8001b54:	0800c630 	.word	0x0800c630
  ldr r2, =_sbss
 8001b58:	24000278 	.word	0x24000278
  ldr r4, =_ebss
 8001b5c:	2400058c 	.word	0x2400058c

08001b60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC3_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f000 f98c 	bl	8001e88 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b70:	f001 fa56 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_Init+0x68>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	4913      	ldr	r1, [pc, #76]	@ (8001bd0 <HAL_Init+0x6c>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bcc <HAL_Init+0x68>)
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd0 <HAL_Init+0x6c>)
 8001b98:	5cd3      	ldrb	r3, [r2, r3]
 8001b9a:	f003 031f 	and.w	r3, r3, #31
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd4 <HAL_Init+0x70>)
 8001ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bd8 <HAL_Init+0x74>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bae:	200f      	movs	r0, #15
 8001bb0:	f000 f814 	bl	8001bdc <HAL_InitTick>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e002      	b.n	8001bc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbe:	f7ff fd05 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	0800c17c 	.word	0x0800c17c
 8001bd4:	240000a4 	.word	0x240000a4
 8001bd8:	240000a0 	.word	0x240000a0

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001be4:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_InitTick+0x60>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e021      	b.n	8001c34 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bf0:	4b13      	ldr	r3, [pc, #76]	@ (8001c40 <HAL_InitTick+0x64>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f971 	bl	8001eee <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f93b 	bl	8001e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	@ (8001c44 <HAL_InitTick+0x68>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	240000ac 	.word	0x240000ac
 8001c40:	240000a0 	.word	0x240000a0
 8001c44:	240000a8 	.word	0x240000a8

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	@ (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	240000ac 	.word	0x240000ac
 8001c6c:	2400043c 	.word	0x2400043c

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2400043c 	.word	0x2400043c

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	240000ac 	.word	0x240000ac

08001cd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_GetREVID+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	0c1b      	lsrs	r3, r3, #16
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	5c001000 	.word	0x5c001000

08001ce8 <__NVIC_SetPriorityGrouping>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x40>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <__NVIC_SetPriorityGrouping+0x44>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x40>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00
 8001d2c:	05fa0000 	.word	0x05fa0000

08001d30 <__NVIC_GetPriorityGrouping>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d34:	4b04      	ldr	r3, [pc, #16]	@ (8001d48 <__NVIC_GetPriorityGrouping+0x18>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	f003 0307 	and.w	r3, r3, #7
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <__NVIC_EnableIRQ>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	db0b      	blt.n	8001d76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4907      	ldr	r1, [pc, #28]	@ (8001d84 <__NVIC_EnableIRQ+0x38>)
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	2001      	movs	r0, #1
 8001d6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000e100 	.word	0xe000e100

08001d88 <__NVIC_SetPriority>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6039      	str	r1, [r7, #0]
 8001d92:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	db0a      	blt.n	8001db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	490c      	ldr	r1, [pc, #48]	@ (8001dd4 <__NVIC_SetPriority+0x4c>)
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	0112      	lsls	r2, r2, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	440b      	add	r3, r1
 8001dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001db0:	e00a      	b.n	8001dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4908      	ldr	r1, [pc, #32]	@ (8001dd8 <__NVIC_SetPriority+0x50>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	3b04      	subs	r3, #4
 8001dc0:	0112      	lsls	r2, r2, #4
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	761a      	strb	r2, [r3, #24]
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <NVIC_EncodePriority>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f1c3 0307 	rsb	r3, r3, #7
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	bf28      	it	cs
 8001dfa:	2304      	movcs	r3, #4
 8001dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	3304      	adds	r3, #4
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d902      	bls.n	8001e0c <NVIC_EncodePriority+0x30>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3b03      	subs	r3, #3
 8001e0a:	e000      	b.n	8001e0e <NVIC_EncodePriority+0x32>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	401a      	ands	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e34:	4313      	orrs	r3, r2
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SysTick_Config>:
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e54:	d301      	bcc.n	8001e5a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00f      	b.n	8001e7a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e84 <SysTick_Config+0x40>)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e62:	210f      	movs	r1, #15
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f7ff ff8e 	bl	8001d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <SysTick_Config+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	@ (8001e84 <SysTick_Config+0x40>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff29 	bl	8001ce8 <__NVIC_SetPriorityGrouping>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff40 	bl	8001d30 <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff90 	bl	8001ddc <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5f 	bl	8001d88 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff33 	bl	8001d4c <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa4 	bl	8001e44 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f0c:	f3bf 8f5f 	dmb	sy
}
 8001f10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001f12:	4b07      	ldr	r3, [pc, #28]	@ (8001f30 <HAL_MPU_Disable+0x28>)
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	4a06      	ldr	r2, [pc, #24]	@ (8001f30 <HAL_MPU_Disable+0x28>)
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <HAL_MPU_Disable+0x2c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	605a      	str	r2, [r3, #4]
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00
 8001f34:	e000ed90 	.word	0xe000ed90

08001f38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_MPU_Enable+0x38>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_MPU_Enable+0x3c>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <HAL_MPU_Enable+0x3c>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f56:	f3bf 8f4f 	dsb	sy
}
 8001f5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f5c:	f3bf 8f6f 	isb	sy
}
 8001f60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed90 	.word	0xe000ed90
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	785a      	ldrb	r2, [r3, #1]
 8001f84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	4a19      	ldr	r2, [pc, #100]	@ (8001ff4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001f94:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <HAL_MPU_ConfigRegion+0x7c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7b1b      	ldrb	r3, [r3, #12]
 8001fa0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7adb      	ldrb	r3, [r3, #11]
 8001fa6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7a9b      	ldrb	r3, [r3, #10]
 8001fae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001fb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7b5b      	ldrb	r3, [r3, #13]
 8001fb6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001fb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7b9b      	ldrb	r3, [r3, #14]
 8001fbe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001fc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7bdb      	ldrb	r3, [r3, #15]
 8001fc6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	7a5b      	ldrb	r3, [r3, #9]
 8001fce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7a1b      	ldrb	r3, [r3, #8]
 8001fd6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fd8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fe2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fe4:	6113      	str	r3, [r2, #16]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed90 	.word	0xe000ed90

08001ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002006:	4b89      	ldr	r3, [pc, #548]	@ (800222c <HAL_GPIO_Init+0x234>)
 8002008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800200a:	e194      	b.n	8002336 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8186 	beq.w	8002330 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d005      	beq.n	800203c <HAL_GPIO_Init+0x44>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d130      	bne.n	800209e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002072:	2201      	movs	r2, #1
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	091b      	lsrs	r3, r3, #4
 8002088:	f003 0201 	and.w	r2, r3, #1
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d017      	beq.n	80020da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d123      	bne.n	800212e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	08da      	lsrs	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3208      	adds	r2, #8
 80020ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691a      	ldr	r2, [r3, #16]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	2203      	movs	r2, #3
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 0203 	and.w	r2, r3, #3
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80e0 	beq.w	8002330 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002170:	4b2f      	ldr	r3, [pc, #188]	@ (8002230 <HAL_GPIO_Init+0x238>)
 8002172:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002176:	4a2e      	ldr	r2, [pc, #184]	@ (8002230 <HAL_GPIO_Init+0x238>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002180:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_GPIO_Init+0x238>)
 8002182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218e:	4a29      	ldr	r2, [pc, #164]	@ (8002234 <HAL_GPIO_Init+0x23c>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a20      	ldr	r2, [pc, #128]	@ (8002238 <HAL_GPIO_Init+0x240>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d052      	beq.n	8002260 <HAL_GPIO_Init+0x268>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1f      	ldr	r2, [pc, #124]	@ (800223c <HAL_GPIO_Init+0x244>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d031      	beq.n	8002226 <HAL_GPIO_Init+0x22e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <HAL_GPIO_Init+0x248>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x22a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <HAL_GPIO_Init+0x24c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x226>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002248 <HAL_GPIO_Init+0x250>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x222>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1b      	ldr	r2, [pc, #108]	@ (800224c <HAL_GPIO_Init+0x254>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x21e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002250 <HAL_GPIO_Init+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x21a>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a19      	ldr	r2, [pc, #100]	@ (8002254 <HAL_GPIO_Init+0x25c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x216>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a18      	ldr	r2, [pc, #96]	@ (8002258 <HAL_GPIO_Init+0x260>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x212>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a17      	ldr	r2, [pc, #92]	@ (800225c <HAL_GPIO_Init+0x264>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x20e>
 8002202:	2309      	movs	r3, #9
 8002204:	e02d      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 8002206:	230a      	movs	r3, #10
 8002208:	e02b      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 800220a:	2308      	movs	r3, #8
 800220c:	e029      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 800220e:	2307      	movs	r3, #7
 8002210:	e027      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 8002212:	2306      	movs	r3, #6
 8002214:	e025      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 8002216:	2305      	movs	r3, #5
 8002218:	e023      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 800221a:	2304      	movs	r3, #4
 800221c:	e021      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 800221e:	2303      	movs	r3, #3
 8002220:	e01f      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 8002222:	2302      	movs	r3, #2
 8002224:	e01d      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 8002226:	2301      	movs	r3, #1
 8002228:	e01b      	b.n	8002262 <HAL_GPIO_Init+0x26a>
 800222a:	bf00      	nop
 800222c:	58000080 	.word	0x58000080
 8002230:	58024400 	.word	0x58024400
 8002234:	58000400 	.word	0x58000400
 8002238:	58020000 	.word	0x58020000
 800223c:	58020400 	.word	0x58020400
 8002240:	58020800 	.word	0x58020800
 8002244:	58020c00 	.word	0x58020c00
 8002248:	58021000 	.word	0x58021000
 800224c:	58021400 	.word	0x58021400
 8002250:	58021800 	.word	0x58021800
 8002254:	58021c00 	.word	0x58021c00
 8002258:	58022000 	.word	0x58022000
 800225c:	58022400 	.word	0x58022400
 8002260:	2300      	movs	r3, #0
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	f002 0203 	and.w	r2, r2, #3
 8002268:	0092      	lsls	r2, r2, #2
 800226a:	4093      	lsls	r3, r2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002272:	4938      	ldr	r1, [pc, #224]	@ (8002354 <HAL_GPIO_Init+0x35c>)
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	089b      	lsrs	r3, r3, #2
 8002278:	3302      	adds	r3, #2
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3301      	adds	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	f47f ae63 	bne.w	800200c <HAL_GPIO_Init+0x14>
  }
}
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	3724      	adds	r7, #36	@ 0x24
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	58000400 	.word	0x58000400

08002358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
 8002364:	4613      	mov	r3, r2
 8002366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002368:	787b      	ldrb	r3, [r7, #1]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002374:	e003      	b.n	800237e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	041a      	lsls	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	619a      	str	r2, [r3, #24]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_PWREx_ConfigSupply+0x70>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d00a      	beq.n	80023b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023a0:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_PWREx_ConfigSupply+0x70>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e01f      	b.n	80023f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e01d      	b.n	80023f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <HAL_PWREx_ConfigSupply+0x70>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 0207 	bic.w	r2, r3, #7
 80023be:	490f      	ldr	r1, [pc, #60]	@ (80023fc <HAL_PWREx_ConfigSupply+0x70>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023c6:	f7ff fc53 	bl	8001c70 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023cc:	e009      	b.n	80023e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023ce:	f7ff fc4f 	bl	8001c70 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023dc:	d901      	bls.n	80023e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e007      	b.n	80023f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e2:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_PWREx_ConfigSupply+0x70>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ee:	d1ee      	bne.n	80023ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	58024800 	.word	0x58024800

08002400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08c      	sub	sp, #48	@ 0x30
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d102      	bne.n	8002414 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 bc48 	b.w	8002ca4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8088 	beq.w	8002532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002422:	4b99      	ldr	r3, [pc, #612]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800242a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800242c:	4b96      	ldr	r3, [pc, #600]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002434:	2b10      	cmp	r3, #16
 8002436:	d007      	beq.n	8002448 <HAL_RCC_OscConfig+0x48>
 8002438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800243a:	2b18      	cmp	r3, #24
 800243c:	d111      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
 800243e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d10c      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	4b8f      	ldr	r3, [pc, #572]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d06d      	beq.n	8002530 <HAL_RCC_OscConfig+0x130>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d169      	bne.n	8002530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	f000 bc21 	b.w	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x7a>
 800246c:	4b86      	ldr	r3, [pc, #536]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a85      	ldr	r2, [pc, #532]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x9c>
 8002482:	4b81      	ldr	r3, [pc, #516]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a80      	ldr	r2, [pc, #512]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b7e      	ldr	r3, [pc, #504]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7d      	ldr	r2, [pc, #500]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0xc0>
 80024a6:	4b78      	ldr	r3, [pc, #480]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a77      	ldr	r2, [pc, #476]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b75      	ldr	r3, [pc, #468]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a74      	ldr	r2, [pc, #464]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xd8>
 80024c0:	4b71      	ldr	r3, [pc, #452]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a70      	ldr	r2, [pc, #448]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b6e      	ldr	r3, [pc, #440]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6d      	ldr	r2, [pc, #436]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7ff fbc6 	bl	8001c70 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fbc2 	bl	8001c70 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	@ 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e3d4      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fa:	4b63      	ldr	r3, [pc, #396]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xe8>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7ff fbb2 	bl	8001c70 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fbae 	bl	8001c70 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e3c0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002522:	4b59      	ldr	r3, [pc, #356]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x110>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80ca 	beq.w	80026d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002540:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002548:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800254c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_RCC_OscConfig+0x166>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b18      	cmp	r3, #24
 800255a:	d156      	bne.n	800260a <HAL_RCC_OscConfig+0x20a>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d151      	bne.n	800260a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002566:	4b48      	ldr	r3, [pc, #288]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d005      	beq.n	800257e <HAL_RCC_OscConfig+0x17e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e392      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800257e:	4b42      	ldr	r3, [pc, #264]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0219 	bic.w	r2, r3, #25
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	493f      	ldr	r1, [pc, #252]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff fb6e 	bl	8001c70 <HAL_GetTick>
 8002594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002598:	f7ff fb6a 	bl	8001c70 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e37c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025aa:	4b37      	ldr	r3, [pc, #220]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0f0      	beq.n	8002598 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	f7ff fb8b 	bl	8001cd0 <HAL_GetREVID>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d817      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x1f4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d108      	bne.n	80025de <HAL_RCC_OscConfig+0x1de>
 80025cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	e07a      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b2a      	ldr	r3, [pc, #168]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	031b      	lsls	r3, r3, #12
 80025ec:	4926      	ldr	r1, [pc, #152]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f2:	e06f      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f4:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4921      	ldr	r1, [pc, #132]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002608:	e064      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d047      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0219 	bic.w	r2, r3, #25
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	491a      	ldr	r1, [pc, #104]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7ff fb24 	bl	8001c70 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262c:	f7ff fb20 	bl	8001c70 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e332      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263e:	4b12      	ldr	r3, [pc, #72]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264a:	f7ff fb41 	bl	8001cd0 <HAL_GetREVID>
 800264e:	4603      	mov	r3, r0
 8002650:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002654:	4293      	cmp	r3, r2
 8002656:	d819      	bhi.n	800268c <HAL_RCC_OscConfig+0x28c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b40      	cmp	r3, #64	@ 0x40
 800265e:	d108      	bne.n	8002672 <HAL_RCC_OscConfig+0x272>
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266e:	6053      	str	r3, [r2, #4]
 8002670:	e030      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
 8002672:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	031b      	lsls	r3, r3, #12
 8002680:	4901      	ldr	r1, [pc, #4]	@ (8002688 <HAL_RCC_OscConfig+0x288>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e025      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
 8002688:	58024400 	.word	0x58024400
 800268c:	4b9a      	ldr	r3, [pc, #616]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	4997      	ldr	r1, [pc, #604]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
 80026a0:	e018      	b.n	80026d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a2:	4b95      	ldr	r3, [pc, #596]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a94      	ldr	r2, [pc, #592]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7ff fadf 	bl	8001c70 <HAL_GetTick>
 80026b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b6:	f7ff fadb 	bl	8001c70 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e2ed      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026c8:	4b8b      	ldr	r3, [pc, #556]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a9 	beq.w	8002834 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e2:	4b85      	ldr	r3, [pc, #532]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ec:	4b82      	ldr	r3, [pc, #520]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_OscConfig+0x308>
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b18      	cmp	r3, #24
 80026fc:	d13a      	bne.n	8002774 <HAL_RCC_OscConfig+0x374>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	2b01      	cmp	r3, #1
 8002706:	d135      	bne.n	8002774 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002708:	4b7b      	ldr	r3, [pc, #492]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_OscConfig+0x320>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	2b80      	cmp	r3, #128	@ 0x80
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e2c1      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002720:	f7ff fad6 	bl	8001cd0 <HAL_GetREVID>
 8002724:	4603      	mov	r3, r0
 8002726:	f241 0203 	movw	r2, #4099	@ 0x1003
 800272a:	4293      	cmp	r3, r2
 800272c:	d817      	bhi.n	800275e <HAL_RCC_OscConfig+0x35e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	2b20      	cmp	r3, #32
 8002734:	d108      	bne.n	8002748 <HAL_RCC_OscConfig+0x348>
 8002736:	4b70      	ldr	r3, [pc, #448]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800273e:	4a6e      	ldr	r2, [pc, #440]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002744:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002746:	e075      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002748:	4b6b      	ldr	r3, [pc, #428]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	069b      	lsls	r3, r3, #26
 8002756:	4968      	ldr	r1, [pc, #416]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800275c:	e06a      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800275e:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	4962      	ldr	r1, [pc, #392]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	4313      	orrs	r3, r2
 8002770:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002772:	e05f      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d042      	beq.n	8002802 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800277c:	4b5e      	ldr	r3, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7ff fa72 	bl	8001c70 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002790:	f7ff fa6e 	bl	8001c70 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e280      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027a2:	4b55      	ldr	r3, [pc, #340]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ae:	f7ff fa8f 	bl	8001cd0 <HAL_GetREVID>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d817      	bhi.n	80027ec <HAL_RCC_OscConfig+0x3ec>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d108      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3d6>
 80027c4:	4b4c      	ldr	r3, [pc, #304]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027cc:	4a4a      	ldr	r2, [pc, #296]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027d2:	6053      	str	r3, [r2, #4]
 80027d4:	e02e      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
 80027d6:	4b48      	ldr	r3, [pc, #288]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	069b      	lsls	r3, r3, #26
 80027e4:	4944      	ldr	r1, [pc, #272]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	604b      	str	r3, [r1, #4]
 80027ea:	e023      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
 80027ec:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	493f      	ldr	r1, [pc, #252]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60cb      	str	r3, [r1, #12]
 8002800:	e018      	b.n	8002834 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002802:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3c      	ldr	r2, [pc, #240]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002808:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7ff fa2f 	bl	8001c70 <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002816:	f7ff fa2b 	bl	8001c70 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e23d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002828:	4b33      	ldr	r3, [pc, #204]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f0      	bne.n	8002816 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d036      	beq.n	80028ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d019      	beq.n	800287c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002848:	4b2b      	ldr	r3, [pc, #172]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284c:	4a2a      	ldr	r2, [pc, #168]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7ff fa0c 	bl	8001c70 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285c:	f7ff fa08 	bl	8001c70 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e21a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800286e:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x45c>
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287c:	4b1e      	ldr	r3, [pc, #120]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 800287e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002880:	4a1d      	ldr	r2, [pc, #116]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7ff f9f2 	bl	8001c70 <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002890:	f7ff f9ee 	bl	8001c70 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e200      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028a2:	4b15      	ldr	r3, [pc, #84]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d039      	beq.n	800292e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01c      	beq.n	80028fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c2:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80028c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ce:	f7ff f9cf 	bl	8001c70 <HAL_GetTick>
 80028d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d6:	f7ff f9cb 	bl	8001c70 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e1dd      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x4d6>
 80028f4:	e01b      	b.n	800292e <HAL_RCC_OscConfig+0x52e>
 80028f6:	bf00      	nop
 80028f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028fc:	4b9b      	ldr	r3, [pc, #620]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a9a      	ldr	r2, [pc, #616]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002906:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002908:	f7ff f9b2 	bl	8001c70 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002910:	f7ff f9ae 	bl	8001c70 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1c0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002922:	4b92      	ldr	r3, [pc, #584]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 8081 	beq.w	8002a3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800293c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b70 <HAL_RCC_OscConfig+0x770>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a8b      	ldr	r2, [pc, #556]	@ (8002b70 <HAL_RCC_OscConfig+0x770>)
 8002942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002946:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002948:	f7ff f992 	bl	8001c70 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7ff f98e 	bl	8001c70 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e1a0      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002962:	4b83      	ldr	r3, [pc, #524]	@ (8002b70 <HAL_RCC_OscConfig+0x770>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d106      	bne.n	8002984 <HAL_RCC_OscConfig+0x584>
 8002976:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	e02d      	b.n	80029e0 <HAL_RCC_OscConfig+0x5e0>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10c      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5a6>
 800298c:	4b77      	ldr	r3, [pc, #476]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002990:	4a76      	ldr	r2, [pc, #472]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	6713      	str	r3, [r2, #112]	@ 0x70
 8002998:	4b74      	ldr	r3, [pc, #464]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a73      	ldr	r2, [pc, #460]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	e01c      	b.n	80029e0 <HAL_RCC_OscConfig+0x5e0>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c8>
 80029ae:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	4a6e      	ldr	r2, [pc, #440]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ba:	4b6c      	ldr	r3, [pc, #432]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a6b      	ldr	r2, [pc, #428]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0x5e0>
 80029c8:	4b68      	ldr	r3, [pc, #416]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029cc:	4a67      	ldr	r2, [pc, #412]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d4:	4b65      	ldr	r3, [pc, #404]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	4a64      	ldr	r2, [pc, #400]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 80029da:	f023 0304 	bic.w	r3, r3, #4
 80029de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d015      	beq.n	8002a14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff f942 	bl	8001c70 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7ff f93e 	bl	8001c70 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e14e      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a06:	4b59      	ldr	r3, [pc, #356]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ee      	beq.n	80029f0 <HAL_RCC_OscConfig+0x5f0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7ff f92c 	bl	8001c70 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7ff f928 	bl	8001c70 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e138      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a32:	4b4e      	ldr	r3, [pc, #312]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1ee      	bne.n	8002a1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 812d 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a48:	4b48      	ldr	r3, [pc, #288]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a50:	2b18      	cmp	r3, #24
 8002a52:	f000 80bd 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	f040 809e 	bne.w	8002b9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b42      	ldr	r3, [pc, #264]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a41      	ldr	r2, [pc, #260]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f900 	bl	8001c70 <HAL_GetTick>
 8002a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f8fc 	bl	8001c70 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e10e      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a86:	4b39      	ldr	r3, [pc, #228]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b36      	ldr	r3, [pc, #216]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002a94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCC_OscConfig+0x774>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002aa2:	0112      	lsls	r2, r2, #4
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4931      	ldr	r1, [pc, #196]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	628b      	str	r3, [r1, #40]	@ 0x28
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	3b01      	subs	r3, #1
 8002abc:	025b      	lsls	r3, r3, #9
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	041b      	lsls	r3, r3, #16
 8002aca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	061b      	lsls	r3, r3, #24
 8002ad8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002adc:	4923      	ldr	r1, [pc, #140]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4a21      	ldr	r2, [pc, #132]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aee:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002af2:	4b21      	ldr	r3, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x778>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002afa:	00d2      	lsls	r2, r2, #3
 8002afc:	491b      	ldr	r1, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b02:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b06:	f023 020c 	bic.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	4917      	ldr	r1, [pc, #92]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b14:	4b15      	ldr	r3, [pc, #84]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	f023 0202 	bic.w	r2, r3, #2
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	4912      	ldr	r1, [pc, #72]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	4a10      	ldr	r2, [pc, #64]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	4a0d      	ldr	r2, [pc, #52]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	4a0a      	ldr	r2, [pc, #40]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b4a:	4b08      	ldr	r3, [pc, #32]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4e:	4a07      	ldr	r2, [pc, #28]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b56:	4b05      	ldr	r3, [pc, #20]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <HAL_RCC_OscConfig+0x76c>)
 8002b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7ff f885 	bl	8001c70 <HAL_GetTick>
 8002b66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b68:	e011      	b.n	8002b8e <HAL_RCC_OscConfig+0x78e>
 8002b6a:	bf00      	nop
 8002b6c:	58024400 	.word	0x58024400
 8002b70:	58024800 	.word	0x58024800
 8002b74:	fffffc0c 	.word	0xfffffc0c
 8002b78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7ff f878 	bl	8001c70 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e08a      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b8e:	4b47      	ldr	r3, [pc, #284]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d0f0      	beq.n	8002b7c <HAL_RCC_OscConfig+0x77c>
 8002b9a:	e082      	b.n	8002ca2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b43      	ldr	r3, [pc, #268]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a42      	ldr	r2, [pc, #264]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002ba2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff f862 	bl	8001c70 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f85e 	bl	8001c70 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e070      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x7b0>
 8002bce:	e068      	b.n	8002ca2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bd0:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bd6:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d031      	beq.n	8002c48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f003 0203 	and.w	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d12a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d122      	bne.n	8002c48 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d11a      	bne.n	8002c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0a5b      	lsrs	r3, r3, #9
 8002c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d111      	bne.n	8002c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c30:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d108      	bne.n	8002c48 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	0e1b      	lsrs	r3, r3, #24
 8002c3a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c42:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d001      	beq.n	8002c4c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e02b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c4c:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c50:	08db      	lsrs	r3, r3, #3
 8002c52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c56:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d01f      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c62:	4b12      	ldr	r3, [pc, #72]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c66:	4a11      	ldr	r2, [pc, #68]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c6e:	f7fe ffff 	bl	8001c70 <HAL_GetTick>
 8002c72:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c74:	bf00      	nop
 8002c76:	f7fe fffb 	bl	8001c70 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d0f9      	beq.n	8002c76 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c86:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb0 <HAL_RCC_OscConfig+0x8b0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c8e:	00d2      	lsls	r2, r2, #3
 8002c90:	4906      	ldr	r1, [pc, #24]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c96:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	4a04      	ldr	r2, [pc, #16]	@ (8002cac <HAL_RCC_OscConfig+0x8ac>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3730      	adds	r7, #48	@ 0x30
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	ffff0007 	.word	0xffff0007

08002cb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e19c      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d910      	bls.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b87      	ldr	r3, [pc, #540]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	4985      	ldr	r1, [pc, #532]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b83      	ldr	r3, [pc, #524]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e184      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0304 	and.w	r3, r3, #4
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d010      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d908      	bls.n	8002d26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d14:	4b78      	ldr	r3, [pc, #480]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4975      	ldr	r1, [pc, #468]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	4b70      	ldr	r3, [pc, #448]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d908      	bls.n	8002d54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d42:	4b6d      	ldr	r3, [pc, #436]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	496a      	ldr	r1, [pc, #424]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699a      	ldr	r2, [r3, #24]
 8002d64:	4b64      	ldr	r3, [pc, #400]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d70:	4b61      	ldr	r3, [pc, #388]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	495e      	ldr	r1, [pc, #376]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	4b59      	ldr	r3, [pc, #356]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d9e:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4953      	ldr	r1, [pc, #332]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f023 020f 	bic.w	r2, r3, #15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4947      	ldr	r1, [pc, #284]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d055      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4940      	ldr	r1, [pc, #256]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d121      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0f6      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d107      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d115      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0ea      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e34:	4b30      	ldr	r3, [pc, #192]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e0de      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e44:	4b2c      	ldr	r3, [pc, #176]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0d6      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e54:	4b28      	ldr	r3, [pc, #160]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f023 0207 	bic.w	r2, r3, #7
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4925      	ldr	r1, [pc, #148]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e66:	f7fe ff03 	bl	8001c70 <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6e:	f7fe feff 	bl	8001c70 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e0be      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e84:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d1eb      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d208      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f023 020f 	bic.w	r2, r3, #15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	490e      	ldr	r1, [pc, #56]	@ (8002ef8 <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d214      	bcs.n	8002efc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed2:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 020f 	bic.w	r2, r3, #15
 8002eda:	4906      	ldr	r1, [pc, #24]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b04      	ldr	r3, [pc, #16]	@ (8002ef4 <HAL_RCC_ClockConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e086      	b.n	8003002 <HAL_RCC_ClockConfig+0x34e>
 8002ef4:	52002000 	.word	0x52002000
 8002ef8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691a      	ldr	r2, [r3, #16]
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d208      	bcs.n	8002f2a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f18:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	4939      	ldr	r1, [pc, #228]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0308 	and.w	r3, r3, #8
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695a      	ldr	r2, [r3, #20]
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d208      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	492e      	ldr	r1, [pc, #184]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699a      	ldr	r2, [r3, #24]
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	4922      	ldr	r1, [pc, #136]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4917      	ldr	r1, [pc, #92]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb4:	f000 f834 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4912      	ldr	r1, [pc, #72]	@ (8003010 <HAL_RCC_ClockConfig+0x35c>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x358>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a0d      	ldr	r2, [pc, #52]	@ (8003010 <HAL_RCC_ClockConfig+0x35c>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8003014 <HAL_RCC_ClockConfig+0x360>)
 8002fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fec:	4a0a      	ldr	r2, [pc, #40]	@ (8003018 <HAL_RCC_ClockConfig+0x364>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_RCC_ClockConfig+0x368>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe fdf0 	bl	8001bdc <HAL_InitTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
 8003010:	0800c17c 	.word	0x0800c17c
 8003014:	240000a4 	.word	0x240000a4
 8003018:	240000a0 	.word	0x240000a0
 800301c:	240000a8 	.word	0x240000a8

08003020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	@ 0x24
 8003024:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003026:	4bb3      	ldr	r3, [pc, #716]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800302e:	2b18      	cmp	r3, #24
 8003030:	f200 8155 	bhi.w	80032de <HAL_RCC_GetSysClockFreq+0x2be>
 8003034:	a201      	add	r2, pc, #4	@ (adr r2, 800303c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080032df 	.word	0x080032df
 8003044:	080032df 	.word	0x080032df
 8003048:	080032df 	.word	0x080032df
 800304c:	080032df 	.word	0x080032df
 8003050:	080032df 	.word	0x080032df
 8003054:	080032df 	.word	0x080032df
 8003058:	080032df 	.word	0x080032df
 800305c:	080030c7 	.word	0x080030c7
 8003060:	080032df 	.word	0x080032df
 8003064:	080032df 	.word	0x080032df
 8003068:	080032df 	.word	0x080032df
 800306c:	080032df 	.word	0x080032df
 8003070:	080032df 	.word	0x080032df
 8003074:	080032df 	.word	0x080032df
 8003078:	080032df 	.word	0x080032df
 800307c:	080030cd 	.word	0x080030cd
 8003080:	080032df 	.word	0x080032df
 8003084:	080032df 	.word	0x080032df
 8003088:	080032df 	.word	0x080032df
 800308c:	080032df 	.word	0x080032df
 8003090:	080032df 	.word	0x080032df
 8003094:	080032df 	.word	0x080032df
 8003098:	080032df 	.word	0x080032df
 800309c:	080030d3 	.word	0x080030d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a0:	4b94      	ldr	r3, [pc, #592]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0320 	and.w	r3, r3, #32
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d009      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030ac:	4b91      	ldr	r3, [pc, #580]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	08db      	lsrs	r3, r3, #3
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	4a90      	ldr	r2, [pc, #576]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
 80030bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80030be:	e111      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c0:	4b8d      	ldr	r3, [pc, #564]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030c2:	61bb      	str	r3, [r7, #24]
      break;
 80030c4:	e10e      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030c6:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030c8:	61bb      	str	r3, [r7, #24]
      break;
 80030ca:	e10b      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003300 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030ce:	61bb      	str	r3, [r7, #24]
      break;
 80030d0:	e108      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d2:	4b88      	ldr	r3, [pc, #544]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030dc:	4b85      	ldr	r3, [pc, #532]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030e8:	4b82      	ldr	r3, [pc, #520]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030f2:	4b80      	ldr	r3, [pc, #512]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 80e1 	beq.w	80032d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	f000 8083 	beq.w	8003224 <HAL_RCC_GetSysClockFreq+0x204>
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b02      	cmp	r3, #2
 8003122:	f200 80a1 	bhi.w	8003268 <HAL_RCC_GetSysClockFreq+0x248>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0x114>
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d056      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003132:	e099      	b.n	8003268 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003134:	4b6f      	ldr	r3, [pc, #444]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d02d      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003140:	4b6c      	ldr	r3, [pc, #432]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	4a6b      	ldr	r2, [pc, #428]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800316a:	4b62      	ldr	r3, [pc, #392]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800317a:	ed97 6a02 	vldr	s12, [r7, #8]
 800317e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800318a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800318e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003196:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800319a:	e087      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003308 <HAL_RCC_GetSysClockFreq+0x2e8>
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a02 	vldr	s12, [r7, #8]
 80031c2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031de:	e065      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f2:	4b40      	ldr	r3, [pc, #256]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003202:	ed97 6a02 	vldr	s12, [r7, #8]
 8003206:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800320a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003222:	e043      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003310 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003236:	4b2f      	ldr	r3, [pc, #188]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003246:	ed97 6a02 	vldr	s12, [r7, #8]
 800324a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 800324e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003266:	e021      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003272:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800330c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b1e      	ldr	r3, [pc, #120]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a02 	vldr	s12, [r7, #8]
 800328e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003304 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80032ac:	4b11      	ldr	r3, [pc, #68]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	0a5b      	lsrs	r3, r3, #9
 80032b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b6:	3301      	adds	r3, #1
 80032b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	ee07 3a90 	vmov	s15, r3
 80032c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80032c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d0:	ee17 3a90 	vmov	r3, s15
 80032d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032d6:	e005      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61bb      	str	r3, [r7, #24]
      break;
 80032dc:	e002      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032de:	4b07      	ldr	r3, [pc, #28]	@ (80032fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032e0:	61bb      	str	r3, [r7, #24]
      break;
 80032e2:	bf00      	nop
  }

  return sysclockfreq;
 80032e4:	69bb      	ldr	r3, [r7, #24]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	@ 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
 80032f8:	03d09000 	.word	0x03d09000
 80032fc:	003d0900 	.word	0x003d0900
 8003300:	017d7840 	.word	0x017d7840
 8003304:	46000000 	.word	0x46000000
 8003308:	4c742400 	.word	0x4c742400
 800330c:	4a742400 	.word	0x4a742400
 8003310:	4bbebc20 	.word	0x4bbebc20

08003314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800331a:	f7ff fe81 	bl	8003020 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x50>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490f      	ldr	r1, [pc, #60]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x54>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	fa22 f303 	lsr.w	r3, r2, r3
 8003336:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_RCC_GetHCLKFreq+0x50>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	4a09      	ldr	r2, [pc, #36]	@ (8003368 <HAL_RCC_GetHCLKFreq+0x54>)
 8003342:	5cd3      	ldrb	r3, [r2, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a07      	ldr	r2, [pc, #28]	@ (800336c <HAL_RCC_GetHCLKFreq+0x58>)
 8003350:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003352:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003358:	4b04      	ldr	r3, [pc, #16]	@ (800336c <HAL_RCC_GetHCLKFreq+0x58>)
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	58024400 	.word	0x58024400
 8003368:	0800c17c 	.word	0x0800c17c
 800336c:	240000a4 	.word	0x240000a4
 8003370:	240000a0 	.word	0x240000a0

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003378:	f7ff ffcc 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4904      	ldr	r1, [pc, #16]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x28>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	0800c17c 	.word	0x0800c17c

080033a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80033a4:	f7ff ffb6 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 80033a8:	4602      	mov	r2, r0
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	0a1b      	lsrs	r3, r3, #8
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033b6:	5ccb      	ldrb	r3, [r1, r3]
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	58024400 	.word	0x58024400
 80033c8:	0800c17c 	.word	0x0800c17c

080033cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b0ca      	sub	sp, #296	@ 0x128
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033f0:	2500      	movs	r5, #0
 80033f2:	ea54 0305 	orrs.w	r3, r4, r5
 80033f6:	d049      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003402:	d02f      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003404:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003408:	d828      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800340a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800340e:	d01a      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003410:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003414:	d822      	bhi.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800341e:	d007      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003420:	e01c      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003422:	4bb8      	ldr	r3, [pc, #736]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	4ab7      	ldr	r2, [pc, #732]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342e:	e01a      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	3308      	adds	r3, #8
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fc8f 	bl	8004d5c <RCCEx_PLL2_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003444:	e00f      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	3328      	adds	r3, #40	@ 0x28
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f001 fd36 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003466:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800346e:	4ba5      	ldr	r3, [pc, #660]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003472:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800347c:	4aa1      	ldr	r2, [pc, #644]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347e:	430b      	orrs	r3, r1
 8003480:	6513      	str	r3, [r2, #80]	@ 0x50
 8003482:	e003      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003498:	f04f 0900 	mov.w	r9, #0
 800349c:	ea58 0309 	orrs.w	r3, r8, r9
 80034a0:	d047      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d82a      	bhi.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80034ac:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034ed 	.word	0x080034ed
 80034c0:	0800350b 	.word	0x0800350b
 80034c4:	0800350b 	.word	0x0800350b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	4a8d      	ldr	r2, [pc, #564]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d4:	e01a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	3308      	adds	r3, #8
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fc3c 	bl	8004d5c <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034ea:	e00f      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	3328      	adds	r3, #40	@ 0x28
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fce3 	bl	8004ec0 <RCCEx_PLL3_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b7b      	ldr	r3, [pc, #492]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003518:	f023 0107 	bic.w	r1, r3, #7
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	4a78      	ldr	r2, [pc, #480]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6513      	str	r3, [r2, #80]	@ 0x50
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800353e:	f04f 0b00 	mov.w	fp, #0
 8003542:	ea5a 030b 	orrs.w	r3, sl, fp
 8003546:	d04c      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003552:	d030      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003554:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003558:	d829      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800355a:	2bc0      	cmp	r3, #192	@ 0xc0
 800355c:	d02d      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800355e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003560:	d825      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003562:	2b80      	cmp	r3, #128	@ 0x80
 8003564:	d018      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003566:	2b80      	cmp	r3, #128	@ 0x80
 8003568:	d821      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d007      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003572:	e01c      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4b63      	ldr	r3, [pc, #396]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	4a62      	ldr	r2, [pc, #392]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003580:	e01c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003586:	3308      	adds	r3, #8
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fbe6 	bl	8004d5c <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003596:	e011      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fc8d 	bl	8004ec0 <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035ac:	e006      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b4:	e002      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d2:	4a4c      	ldr	r2, [pc, #304]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d4:	430b      	orrs	r3, r1
 80035d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80035ee:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80035f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d053      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800360a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800360e:	d035      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003610:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003614:	d82e      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003616:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800361a:	d031      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800361c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003620:	d828      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003626:	d01a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362c:	d822      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003632:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003636:	d007      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003638:	e01c      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800363a:	4b32      	ldr	r3, [pc, #200]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363e:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003646:	e01c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	3308      	adds	r3, #8
 800364e:	2100      	movs	r1, #0
 8003650:	4618      	mov	r0, r3
 8003652:	f001 fb83 	bl	8004d5c <RCCEx_PLL2_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800365c:	e011      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	3328      	adds	r3, #40	@ 0x28
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fc2a 	bl	8004ec0 <RCCEx_PLL3_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003672:	e006      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367a:	e002      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800367c:	bf00      	nop
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800368a:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003696:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800369a:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369c:	430b      	orrs	r3, r1
 800369e:	6593      	str	r3, [r2, #88]	@ 0x58
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80036b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80036c0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d056      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036d6:	d038      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036dc:	d831      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036e2:	d034      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036e8:	d82b      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ee:	d01d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036f4:	d825      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003700:	e01f      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003702:	bf00      	nop
 8003704:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003708:	4ba2      	ldr	r3, [pc, #648]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370c:	4aa1      	ldr	r2, [pc, #644]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800370e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003714:	e01c      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	3308      	adds	r3, #8
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f001 fb1c 	bl	8004d5c <RCCEx_PLL2_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800372a:	e011      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	3328      	adds	r3, #40	@ 0x28
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fbc3 	bl	8004ec0 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003740:	e006      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003748:	e002      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003758:	4b8e      	ldr	r3, [pc, #568]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003768:	4a8a      	ldr	r2, [pc, #552]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6593      	str	r3, [r2, #88]	@ 0x58
 800376e:	e003      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003770:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003774:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800378e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	d03a      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379e:	2b30      	cmp	r3, #48	@ 0x30
 80037a0:	d01f      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80037a2:	2b30      	cmp	r3, #48	@ 0x30
 80037a4:	d819      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d00c      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d815      	bhi.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d019      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d111      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b6:	4b77      	ldr	r3, [pc, #476]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ba:	4a76      	ldr	r2, [pc, #472]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037c2:	e011      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3308      	adds	r3, #8
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fac5 	bl	8004d5c <RCCEx_PLL2_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037d8:	e006      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10a      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037f0:	4b68      	ldr	r3, [pc, #416]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fe:	4a65      	ldr	r2, [pc, #404]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003800:	430b      	orrs	r3, r1
 8003802:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800381a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003824:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d051      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003838:	d035      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383e:	d82e      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003840:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003844:	d031      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003846:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800384a:	d828      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003850:	d01a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003856:	d822      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003860:	d007      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003862:	e01c      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003868:	4a4a      	ldr	r2, [pc, #296]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003870:	e01c      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	3308      	adds	r3, #8
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fa6e 	bl	8004d5c <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003886:	e011      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	3328      	adds	r3, #40	@ 0x28
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fb15 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800389c:	e006      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038a4:	e002      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038a6:	bf00      	nop
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80038aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038b4:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80038bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	4a34      	ldr	r2, [pc, #208]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038c8:	e003      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038e2:	2300      	movs	r3, #0
 80038e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038e8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038ec:	460b      	mov	r3, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	d056      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038fc:	d033      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003902:	d82c      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003904:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003908:	d02f      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800390a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800390e:	d826      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003910:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003914:	d02b      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003916:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800391a:	d820      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800391c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003920:	d012      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003922:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003926:	d81a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003928:	2b00      	cmp	r3, #0
 800392a:	d022      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003930:	d115      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	3308      	adds	r3, #8
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fa0e 	bl	8004d5c <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003946:	e015      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394c:	3328      	adds	r3, #40	@ 0x28
 800394e:	2101      	movs	r1, #1
 8003950:	4618      	mov	r0, r3
 8003952:	f001 fab5 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003956:	4603      	mov	r3, r0
 8003958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003966:	bf00      	nop
 8003968:	e004      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800396a:	bf00      	nop
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800397c:	4b05      	ldr	r3, [pc, #20]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003980:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398a:	4a02      	ldr	r2, [pc, #8]	@ (8003994 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398c:	430b      	orrs	r3, r1
 800398e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003990:	e006      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003992:	bf00      	nop
 8003994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800399c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d055      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039cc:	d033      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039d2:	d82c      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d8:	d02f      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039de:	d826      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039e4:	d02b      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039ea:	d820      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f0:	d012      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f6:	d81a      	bhi.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d022      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a00:	d115      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a06:	3308      	adds	r3, #8
 8003a08:	2101      	movs	r1, #1
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f9a6 	bl	8004d5c <RCCEx_PLL2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a16:	e015      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1c:	3328      	adds	r3, #40	@ 0x28
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4618      	mov	r0, r3
 8003a22:	f001 fa4d 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a2c:	e00a      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a34:	e006      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a36:	bf00      	nop
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a4c:	4ba3      	ldr	r3, [pc, #652]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a5c:	4a9f      	ldr	r2, [pc, #636]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d037      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a96:	d00e      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9c:	d816      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d018      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003aa2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa6:	d111      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa8:	4b8c      	ldr	r3, [pc, #560]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	4a8b      	ldr	r2, [pc, #556]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ab4:	e00f      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	3308      	adds	r3, #8
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 f94c 	bl	8004d5c <RCCEx_PLL2_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003aca:	e004      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10a      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ade:	4b7f      	ldr	r3, [pc, #508]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a7b      	ldr	r2, [pc, #492]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	6513      	str	r3, [r2, #80]	@ 0x50
 8003af2:	e003      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d039      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d81c      	bhi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b26:	a201      	add	r2, pc, #4	@ (adr r2, 8003b2c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2c:	08003b69 	.word	0x08003b69
 8003b30:	08003b3d 	.word	0x08003b3d
 8003b34:	08003b4b 	.word	0x08003b4b
 8003b38:	08003b69 	.word	0x08003b69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3c:	4b67      	ldr	r3, [pc, #412]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	4a66      	ldr	r2, [pc, #408]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b48:	e00f      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	3308      	adds	r3, #8
 8003b50:	2102      	movs	r1, #2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f902 	bl	8004d5c <RCCEx_PLL2_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10a      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b72:	4b5a      	ldr	r3, [pc, #360]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b76:	f023 0103 	bic.w	r1, r3, #3
 8003b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b80:	4a56      	ldr	r2, [pc, #344]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b86:	e003      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ba6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003baa:	460b      	mov	r3, r1
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f000 809f 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bbe:	f7fe f857 	bl	8001c70 <HAL_GetTick>
 8003bc2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7fe f852 	bl	8001c70 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	@ 0x64
 8003bd6:	d903      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bde:	e005      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003be0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0ed      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d179      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bf4:	4b39      	ldr	r3, [pc, #228]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c00:	4053      	eors	r3, r2
 8003c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d015      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c0a:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c16:	4b31      	ldr	r3, [pc, #196]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1a:	4a30      	ldr	r2, [pc, #192]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c22:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c26:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c42:	d118      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe f814 	bl	8001c70 <HAL_GetTick>
 8003c48:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c4c:	e00d      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe f80f 	bl	8001c70 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c58:	1ad2      	subs	r2, r2, r3
 8003c5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d903      	bls.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003c68:	e005      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0eb      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d129      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8e:	d10e      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c90:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ca0:	091a      	lsrs	r2, r3, #4
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	430b      	orrs	r3, r1
 8003caa:	6113      	str	r3, [r2, #16]
 8003cac:	e005      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003cae:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cb8:	6113      	str	r3, [r2, #16]
 8003cba:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cbc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cca:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	58024800 	.word	0x58024800
 8003ce4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f002 0301 	and.w	r3, r2, #1
 8003cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d00:	2300      	movs	r3, #0
 8003d02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f000 8089 	beq.w	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d18:	2b28      	cmp	r3, #40	@ 0x28
 8003d1a:	d86b      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003dfd 	.word	0x08003dfd
 8003d28:	08003df5 	.word	0x08003df5
 8003d2c:	08003df5 	.word	0x08003df5
 8003d30:	08003df5 	.word	0x08003df5
 8003d34:	08003df5 	.word	0x08003df5
 8003d38:	08003df5 	.word	0x08003df5
 8003d3c:	08003df5 	.word	0x08003df5
 8003d40:	08003df5 	.word	0x08003df5
 8003d44:	08003dc9 	.word	0x08003dc9
 8003d48:	08003df5 	.word	0x08003df5
 8003d4c:	08003df5 	.word	0x08003df5
 8003d50:	08003df5 	.word	0x08003df5
 8003d54:	08003df5 	.word	0x08003df5
 8003d58:	08003df5 	.word	0x08003df5
 8003d5c:	08003df5 	.word	0x08003df5
 8003d60:	08003df5 	.word	0x08003df5
 8003d64:	08003ddf 	.word	0x08003ddf
 8003d68:	08003df5 	.word	0x08003df5
 8003d6c:	08003df5 	.word	0x08003df5
 8003d70:	08003df5 	.word	0x08003df5
 8003d74:	08003df5 	.word	0x08003df5
 8003d78:	08003df5 	.word	0x08003df5
 8003d7c:	08003df5 	.word	0x08003df5
 8003d80:	08003df5 	.word	0x08003df5
 8003d84:	08003dfd 	.word	0x08003dfd
 8003d88:	08003df5 	.word	0x08003df5
 8003d8c:	08003df5 	.word	0x08003df5
 8003d90:	08003df5 	.word	0x08003df5
 8003d94:	08003df5 	.word	0x08003df5
 8003d98:	08003df5 	.word	0x08003df5
 8003d9c:	08003df5 	.word	0x08003df5
 8003da0:	08003df5 	.word	0x08003df5
 8003da4:	08003dfd 	.word	0x08003dfd
 8003da8:	08003df5 	.word	0x08003df5
 8003dac:	08003df5 	.word	0x08003df5
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003df5 	.word	0x08003df5
 8003db8:	08003df5 	.word	0x08003df5
 8003dbc:	08003df5 	.word	0x08003df5
 8003dc0:	08003df5 	.word	0x08003df5
 8003dc4:	08003dfd 	.word	0x08003dfd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dcc:	3308      	adds	r3, #8
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 ffc3 	bl	8004d5c <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3328      	adds	r3, #40	@ 0x28
 8003de4:	2101      	movs	r1, #1
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f86a 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e06:	4bbf      	ldr	r3, [pc, #764]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e14:	4abb      	ldr	r2, [pc, #748]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f002 0302 	and.w	r3, r2, #2
 8003e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	d041      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d824      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003ea1 	.word	0x08003ea1
 8003e58:	08003e6d 	.word	0x08003e6d
 8003e5c:	08003e83 	.word	0x08003e83
 8003e60:	08003ea1 	.word	0x08003ea1
 8003e64:	08003ea1 	.word	0x08003ea1
 8003e68:	08003ea1 	.word	0x08003ea1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e70:	3308      	adds	r3, #8
 8003e72:	2101      	movs	r1, #1
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 ff71 	bl	8004d5c <RCCEx_PLL2_Config>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e80:	e00f      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	3328      	adds	r3, #40	@ 0x28
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f001 f818 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e96:	e004      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9e:	e000      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10a      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003eaa:	4b96      	ldr	r3, [pc, #600]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	f023 0107 	bic.w	r1, r3, #7
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eb8:	4a92      	ldr	r2, [pc, #584]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ebe:	e003      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	f002 0304 	and.w	r3, r2, #4
 8003ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ede:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	d044      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d825      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efa:	bf00      	nop
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f15 	.word	0x08003f15
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f49 	.word	0x08003f49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 ff1d 	bl	8004d5c <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f28:	e00f      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ffc4 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f52:	4b6c      	ldr	r3, [pc, #432]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f023 0107 	bic.w	r1, r3, #7
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f62:	4a68      	ldr	r2, [pc, #416]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f002 0320 	and.w	r3, r2, #32
 8003f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d055      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f9e:	d033      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fa4:	d82c      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003faa:	d02f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d826      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fb2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fb6:	d02b      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003fb8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fbc:	d820      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc2:	d012      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fc8:	d81a      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d022      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fd2:	d115      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 febd 	bl	8004d5c <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fe8:	e015      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fee:	3328      	adds	r3, #40	@ 0x28
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 ff64 	bl	8004ec0 <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004006:	e006      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004008:	bf00      	nop
 800400a:	e004      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800400c:	bf00      	nop
 800400e:	e002      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004010:	bf00      	nop
 8004012:	e000      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004014:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401e:	4b39      	ldr	r3, [pc, #228]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004022:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402e:	4a35      	ldr	r2, [pc, #212]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6553      	str	r3, [r2, #84]	@ 0x54
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800403a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800404a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004054:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d058      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004066:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800406a:	d033      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800406c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004070:	d82c      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004076:	d02f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800407c:	d826      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800407e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004082:	d02b      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004084:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004088:	d820      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800408a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800408e:	d012      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004094:	d81a      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d022      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409e:	d115      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3308      	adds	r3, #8
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe57 	bl	8004d5c <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040b4:	e015      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3328      	adds	r3, #40	@ 0x28
 80040bc:	2102      	movs	r1, #2
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fefe 	bl	8004ec0 <RCCEx_PLL3_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80040ca:	e00a      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d2:	e006      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040d4:	bf00      	nop
 80040d6:	e004      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040d8:	bf00      	nop
 80040da:	e002      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10e      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040ea:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040fa:	4a02      	ldr	r2, [pc, #8]	@ (8004104 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004100:	e006      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800411c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004126:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	d055      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004134:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004138:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800413c:	d033      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800413e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004142:	d82c      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004148:	d02f      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800414a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800414e:	d826      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004150:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004154:	d02b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004156:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800415a:	d820      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800415c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004160:	d012      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004166:	d81a      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d022      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800416c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004170:	d115      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	3308      	adds	r3, #8
 8004178:	2100      	movs	r1, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fdee 	bl	8004d5c <RCCEx_PLL2_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004186:	e015      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	3328      	adds	r3, #40	@ 0x28
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fe95 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800419c:	e00a      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a4:	e006      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041a6:	bf00      	nop
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80041b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041cc:	4a9d      	ldr	r2, [pc, #628]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ce:	430b      	orrs	r3, r1
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 0308 	and.w	r3, r2, #8
 80041e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80041f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	d01e      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004208:	d10c      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	3328      	adds	r3, #40	@ 0x28
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fe54 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004224:	4b87      	ldr	r3, [pc, #540]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004228:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004234:	4a83      	ldr	r2, [pc, #524]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004236:	430b      	orrs	r3, r1
 8004238:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800423a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f002 0310 	and.w	r3, r2, #16
 8004246:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004250:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004254:	460b      	mov	r3, r1
 8004256:	4313      	orrs	r3, r2
 8004258:	d01e      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800425a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004266:	d10c      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	3328      	adds	r3, #40	@ 0x28
 800426e:	2102      	movs	r1, #2
 8004270:	4618      	mov	r0, r3
 8004272:	f000 fe25 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004282:	4b70      	ldr	r3, [pc, #448]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004292:	4a6c      	ldr	r2, [pc, #432]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004294:	430b      	orrs	r3, r1
 8004296:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80042a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042a8:	2300      	movs	r3, #0
 80042aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042ae:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042b2:	460b      	mov	r3, r1
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d03e      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80042c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c4:	d022      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80042c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042ca:	d81b      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d4:	d00b      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042d6:	e015      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	3308      	adds	r3, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd3b 	bl	8004d5c <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ec:	e00f      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	3328      	adds	r3, #40	@ 0x28
 80042f4:	2102      	movs	r1, #2
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fde2 	bl	8004ec0 <RCCEx_PLL3_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10b      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004316:	4b4b      	ldr	r3, [pc, #300]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004326:	4a47      	ldr	r2, [pc, #284]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004328:	430b      	orrs	r3, r1
 800432a:	6593      	str	r3, [r2, #88]	@ 0x58
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004342:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004344:	2300      	movs	r3, #0
 8004346:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004348:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800434c:	460b      	mov	r3, r1
 800434e:	4313      	orrs	r3, r2
 8004350:	d03b      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800435e:	d01f      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004360:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004364:	d818      	bhi.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436a:	d003      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800436c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004370:	d007      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004372:	e011      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004374:	4b33      	ldr	r3, [pc, #204]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	4a32      	ldr	r2, [pc, #200]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800437e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004380:	e00f      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	3328      	adds	r3, #40	@ 0x28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fd98 	bl	8004ec0 <RCCEx_PLL3_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004396:	e004      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439e:	e000      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80043a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10b      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043aa:	4b26      	ldr	r3, [pc, #152]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	4a22      	ldr	r2, [pc, #136]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6553      	str	r3, [r2, #84]	@ 0x54
 80043c0:	e003      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80043d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80043d8:	2300      	movs	r3, #0
 80043da:	677b      	str	r3, [r7, #116]	@ 0x74
 80043dc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d034      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f4:	d007      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043f6:	e011      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f8:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	4a11      	ldr	r2, [pc, #68]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004402:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004404:	e00e      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	3308      	adds	r3, #8
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fca4 	bl	8004d5c <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800441a:	e003      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004430:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	4a02      	ldr	r2, [pc, #8]	@ (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443c:	430b      	orrs	r3, r1
 800443e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004440:	e006      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004442:	bf00      	nop
 8004444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800445c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800445e:	2300      	movs	r3, #0
 8004460:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004462:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d00c      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	3328      	adds	r3, #40	@ 0x28
 8004472:	2102      	movs	r1, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd23 	bl	8004ec0 <RCCEx_PLL3_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004492:	663b      	str	r3, [r7, #96]	@ 0x60
 8004494:	2300      	movs	r3, #0
 8004496:	667b      	str	r3, [r7, #100]	@ 0x64
 8004498:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d038      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ae:	d018      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80044b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044b4:	d811      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ba:	d014      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80044bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c0:	d80b      	bhi.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d011      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ca:	d106      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044cc:	4bc3      	ldr	r3, [pc, #780]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	4ac2      	ldr	r2, [pc, #776]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044d8:	e008      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e0:	e004      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f4:	4bb9      	ldr	r3, [pc, #740]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004504:	4ab5      	ldr	r2, [pc, #724]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004506:	430b      	orrs	r3, r1
 8004508:	6553      	str	r3, [r2, #84]	@ 0x54
 800450a:	e003      	b.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004520:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004522:	2300      	movs	r3, #0
 8004524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004526:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800452a:	460b      	mov	r3, r1
 800452c:	4313      	orrs	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004530:	4baa      	ldr	r3, [pc, #680]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004534:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	4aa7      	ldr	r2, [pc, #668]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004540:	430b      	orrs	r3, r1
 8004542:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004550:	653b      	str	r3, [r7, #80]	@ 0x50
 8004552:	2300      	movs	r3, #0
 8004554:	657b      	str	r3, [r7, #84]	@ 0x54
 8004556:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800455a:	460b      	mov	r3, r1
 800455c:	4313      	orrs	r3, r2
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004560:	4b9e      	ldr	r3, [pc, #632]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004570:	4a9a      	ldr	r2, [pc, #616]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004584:	2300      	movs	r3, #0
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d009      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004592:	4b92      	ldr	r3, [pc, #584]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004596:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045a0:	4a8e      	ldr	r2, [pc, #568]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a2:	430b      	orrs	r3, r1
 80045a4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80045b4:	2300      	movs	r3, #0
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c2:	4b86      	ldr	r3, [pc, #536]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	4a85      	ldr	r2, [pc, #532]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80045cc:	6113      	str	r3, [r2, #16]
 80045ce:	4b83      	ldr	r3, [pc, #524]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80045da:	4a80      	ldr	r2, [pc, #512]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045ee:	2300      	movs	r3, #0
 80045f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045fc:	4b77      	ldr	r3, [pc, #476]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004600:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	4a74      	ldr	r2, [pc, #464]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460c:	430b      	orrs	r3, r1
 800460e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	2300      	movs	r3, #0
 8004620:	637b      	str	r3, [r7, #52]	@ 0x34
 8004622:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800462c:	4b6b      	ldr	r3, [pc, #428]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004630:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800463c:	4a67      	ldr	r2, [pc, #412]	@ (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463e:	430b      	orrs	r3, r1
 8004640:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	2100      	movs	r1, #0
 800464c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004654:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004658:	460b      	mov	r3, r1
 800465a:	4313      	orrs	r3, r2
 800465c:	d011      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	3308      	adds	r3, #8
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb78 	bl	8004d5c <RCCEx_PLL2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800467a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	2100      	movs	r1, #0
 800468c:	6239      	str	r1, [r7, #32]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004698:	460b      	mov	r3, r1
 800469a:	4313      	orrs	r3, r2
 800469c:	d011      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	3308      	adds	r3, #8
 80046a4:	2101      	movs	r1, #1
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb58 	bl	8004d5c <RCCEx_PLL2_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	2100      	movs	r1, #0
 80046cc:	61b9      	str	r1, [r7, #24]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046d8:	460b      	mov	r3, r1
 80046da:	4313      	orrs	r3, r2
 80046dc:	d011      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	3308      	adds	r3, #8
 80046e4:	2102      	movs	r1, #2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fb38 	bl	8004d5c <RCCEx_PLL2_Config>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	2100      	movs	r1, #0
 800470c:	6139      	str	r1, [r7, #16]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d011      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	3328      	adds	r3, #40	@ 0x28
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fbca 	bl	8004ec0 <RCCEx_PLL3_Config>
 800472c:	4603      	mov	r3, r0
 800472e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004732:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	2100      	movs	r1, #0
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004758:	460b      	mov	r3, r1
 800475a:	4313      	orrs	r3, r2
 800475c:	d011      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	3328      	adds	r3, #40	@ 0x28
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fbaa 	bl	8004ec0 <RCCEx_PLL3_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004772:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	2100      	movs	r1, #0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004798:	460b      	mov	r3, r1
 800479a:	4313      	orrs	r3, r2
 800479c:	d011      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	3328      	adds	r3, #40	@ 0x28
 80047a4:	2102      	movs	r1, #2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb8a 	bl	8004ec0 <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80047c2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047dc:	58024400 	.word	0x58024400

080047e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047e4:	f7fe fd96 	bl	8003314 <HAL_RCC_GetHCLKFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	4904      	ldr	r1, [pc, #16]	@ (8004808 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004800:	4618      	mov	r0, r3
 8004802:	bd80      	pop	{r7, pc}
 8004804:	58024400 	.word	0x58024400
 8004808:	0800c17c 	.word	0x0800c17c

0800480c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004814:	4ba1      	ldr	r3, [pc, #644]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800481e:	4b9f      	ldr	r3, [pc, #636]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004822:	0b1b      	lsrs	r3, r3, #12
 8004824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004828:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800482a:	4b9c      	ldr	r3, [pc, #624]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004836:	4b99      	ldr	r3, [pc, #612]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483a:	08db      	lsrs	r3, r3, #3
 800483c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	fb02 f303 	mul.w	r3, r2, r3
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8111 	beq.w	8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b02      	cmp	r3, #2
 800485e:	f000 8083 	beq.w	8004968 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	2b02      	cmp	r3, #2
 8004866:	f200 80a1 	bhi.w	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d056      	beq.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004876:	e099      	b.n	80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004878:	4b88      	ldr	r3, [pc, #544]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d02d      	beq.n	80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004884:	4b85      	ldr	r3, [pc, #532]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	08db      	lsrs	r3, r3, #3
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	4a84      	ldr	r2, [pc, #528]	@ (8004aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	ee07 3a90 	vmov	s15, r3
 800489c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ae:	4b7b      	ldr	r3, [pc, #492]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048be:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048de:	e087      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004902:	ed97 6a03 	vldr	s12, [r7, #12]
 8004906:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800490a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004912:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004916:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800491a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004922:	e065      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004936:	4b59      	ldr	r3, [pc, #356]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004946:	ed97 6a03 	vldr	s12, [r7, #12]
 800494a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800494e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800495a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004962:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004966:	e043      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800497a:	4b48      	ldr	r3, [pc, #288]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800498a:	ed97 6a03 	vldr	s12, [r7, #12]
 800498e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800499a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049aa:	e021      	b.n	80049f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	ee07 3a90 	vmov	s15, r3
 80049b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004aac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049be:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049f0:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	0a5b      	lsrs	r3, r3, #9
 80049f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a44:	ee17 2a90 	vmov	r2, s15
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	0e1b      	lsrs	r3, r3, #24
 8004a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a72:	ee17 2a90 	vmov	r2, s15
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a7a:	e008      	b.n	8004a8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	58024400 	.word	0x58024400
 8004aa0:	03d09000 	.word	0x03d09000
 8004aa4:	46000000 	.word	0x46000000
 8004aa8:	4c742400 	.word	0x4c742400
 8004aac:	4a742400 	.word	0x4a742400
 8004ab0:	4bbebc20 	.word	0x4bbebc20

08004ab4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b089      	sub	sp, #36	@ 0x24
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004abc:	4ba1      	ldr	r3, [pc, #644]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	f003 0303 	and.w	r3, r3, #3
 8004ac4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ac6:	4b9f      	ldr	r3, [pc, #636]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aca:	0d1b      	lsrs	r3, r3, #20
 8004acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad6:	0a1b      	lsrs	r3, r3, #8
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ade:	4b99      	ldr	r3, [pc, #612]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	fb02 f303 	mul.w	r3, r2, r3
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8111 	beq.w	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f000 8083 	beq.w	8004c10 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d056      	beq.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b1e:	e099      	b.n	8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b20:	4b88      	ldr	r3, [pc, #544]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02d      	beq.n	8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b2c:	4b85      	ldr	r3, [pc, #532]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	4a84      	ldr	r2, [pc, #528]	@ (8004d48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	ee07 3a90 	vmov	s15, r3
 8004b44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b7b      	ldr	r3, [pc, #492]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b86:	e087      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bca:	e065      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c0e:	e043      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c22:	4b48      	ldr	r3, [pc, #288]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c36:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c52:	e021      	b.n	8004c98 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c66:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d4c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c96:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c98:	4b2a      	ldr	r3, [pc, #168]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004caa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbe:	ee17 2a90 	vmov	r2, s15
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cec:	ee17 2a90 	vmov	r2, s15
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	0e1b      	lsrs	r3, r3, #24
 8004cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1a:	ee17 2a90 	vmov	r2, s15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d22:	e008      	b.n	8004d36 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
}
 8004d36:	bf00      	nop
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	58024400 	.word	0x58024400
 8004d48:	03d09000 	.word	0x03d09000
 8004d4c:	46000000 	.word	0x46000000
 8004d50:	4c742400 	.word	0x4c742400
 8004d54:	4a742400 	.word	0x4a742400
 8004d58:	4bbebc20 	.word	0x4bbebc20

08004d5c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6a:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d101      	bne.n	8004d7a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e099      	b.n	8004eae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004d80:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fc ff73 	bl	8001c70 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d8e:	f7fc ff6f 	bl	8001c70 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e086      	b.n	8004eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004da0:	4b45      	ldr	r3, [pc, #276]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004dac:	4b42      	ldr	r3, [pc, #264]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	031b      	lsls	r3, r3, #12
 8004dba:	493f      	ldr	r1, [pc, #252]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	025b      	lsls	r3, r3, #9
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004df0:	4931      	ldr	r1, [pc, #196]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004df6:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	492d      	ldr	r1, [pc, #180]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	f023 0220 	bic.w	r2, r3, #32
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4928      	ldr	r1, [pc, #160]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e20:	f023 0310 	bic.w	r3, r3, #16
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <RCCEx_PLL2_Config+0x160>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	69d2      	ldr	r2, [r2, #28]
 8004e32:	00d2      	lsls	r2, r2, #3
 8004e34:	4920      	ldr	r1, [pc, #128]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	f043 0310 	orr.w	r3, r3, #16
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e58:	e00f      	b.n	8004e7a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e60:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	4a14      	ldr	r2, [pc, #80]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e6c:	e005      	b.n	8004e7a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a11      	ldr	r2, [pc, #68]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004e80:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc fef3 	bl	8001c70 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e8e:	f7fc feef 	bl	8001c70 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e006      	b.n	8004eae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	ffff0007 	.word	0xffff0007

08004ec0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ece:	4b53      	ldr	r3, [pc, #332]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed2:	f003 0303 	and.w	r3, r3, #3
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d101      	bne.n	8004ede <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e099      	b.n	8005012 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ede:	4b4f      	ldr	r3, [pc, #316]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a4e      	ldr	r2, [pc, #312]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eea:	f7fc fec1 	bl	8001c70 <HAL_GetTick>
 8004eee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ef0:	e008      	b.n	8004f04 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ef2:	f7fc febd 	bl	8001c70 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d901      	bls.n	8004f04 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e086      	b.n	8005012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f04:	4b45      	ldr	r3, [pc, #276]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1f0      	bne.n	8004ef2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f10:	4b42      	ldr	r3, [pc, #264]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f14:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	493f      	ldr	r1, [pc, #252]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	041b      	lsls	r3, r3, #16
 8004f42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f54:	4931      	ldr	r1, [pc, #196]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f5a:	4b30      	ldr	r3, [pc, #192]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	492d      	ldr	r1, [pc, #180]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	4928      	ldr	r1, [pc, #160]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f7e:	4b27      	ldr	r3, [pc, #156]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	4a26      	ldr	r2, [pc, #152]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f8a:	4b24      	ldr	r3, [pc, #144]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <RCCEx_PLL3_Config+0x160>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	69d2      	ldr	r2, [r2, #28]
 8004f96:	00d2      	lsls	r2, r2, #3
 8004f98:	4920      	ldr	r1, [pc, #128]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fbc:	e00f      	b.n	8004fde <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc4:	4b15      	ldr	r3, [pc, #84]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc8:	4a14      	ldr	r2, [pc, #80]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd0:	e005      	b.n	8004fde <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fd2:	4b12      	ldr	r3, [pc, #72]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a11      	ldr	r2, [pc, #68]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fde:	4b0f      	ldr	r3, [pc, #60]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fc fe41 	bl	8001c70 <HAL_GetTick>
 8004fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ff0:	e008      	b.n	8005004 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff2:	f7fc fe3d 	bl	8001c70 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d901      	bls.n	8005004 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005004:	4b05      	ldr	r3, [pc, #20]	@ (800501c <RCCEx_PLL3_Config+0x15c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0f0      	beq.n	8004ff2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	58024400 	.word	0x58024400
 8005020:	ffff0007 	.word	0xffff0007

08005024 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e10f      	b.n	8005256 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a87      	ldr	r2, [pc, #540]	@ (8005260 <HAL_SPI_Init+0x23c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <HAL_SPI_Init+0x42>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a86      	ldr	r2, [pc, #536]	@ (8005264 <HAL_SPI_Init+0x240>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00a      	beq.n	8005066 <HAL_SPI_Init+0x42>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a84      	ldr	r2, [pc, #528]	@ (8005268 <HAL_SPI_Init+0x244>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d005      	beq.n	8005066 <HAL_SPI_Init+0x42>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	2b0f      	cmp	r3, #15
 8005060:	d901      	bls.n	8005066 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0f7      	b.n	8005256 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fe2e 	bl	8005cc8 <SPI_GetPacketSize>
 800506c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7b      	ldr	r2, [pc, #492]	@ (8005260 <HAL_SPI_Init+0x23c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00c      	beq.n	8005092 <HAL_SPI_Init+0x6e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a79      	ldr	r2, [pc, #484]	@ (8005264 <HAL_SPI_Init+0x240>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d007      	beq.n	8005092 <HAL_SPI_Init+0x6e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a78      	ldr	r2, [pc, #480]	@ (8005268 <HAL_SPI_Init+0x244>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d002      	beq.n	8005092 <HAL_SPI_Init+0x6e>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d811      	bhi.n	80050b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005096:	4a72      	ldr	r2, [pc, #456]	@ (8005260 <HAL_SPI_Init+0x23c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a70      	ldr	r2, [pc, #448]	@ (8005264 <HAL_SPI_Init+0x240>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_SPI_Init+0x8c>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6f      	ldr	r2, [pc, #444]	@ (8005268 <HAL_SPI_Init+0x244>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d104      	bne.n	80050ba <HAL_SPI_Init+0x96>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b10      	cmp	r3, #16
 80050b4:	d901      	bls.n	80050ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e0cd      	b.n	8005256 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d106      	bne.n	80050d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fc fa96 	bl	8001600 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0201 	bic.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80050f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005100:	d119      	bne.n	8005136 <HAL_SPI_Init+0x112>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510a:	d103      	bne.n	8005114 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005110:	2b00      	cmp	r3, #0
 8005112:	d008      	beq.n	8005126 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10c      	bne.n	8005136 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005124:	d107      	bne.n	8005136 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005134:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00f      	beq.n	8005162 <HAL_SPI_Init+0x13e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d90b      	bls.n	8005162 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e007      	b.n	8005172 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005170:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69da      	ldr	r2, [r3, #28]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	431a      	orrs	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	ea42 0103 	orr.w	r1, r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d2:	ea42 0103 	orr.w	r1, r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d113      	bne.n	8005212 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005210:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40013000 	.word	0x40013000
 8005264:	40003800 	.word	0x40003800
 8005268:	40003c00 	.word	0x40003c00

0800526c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3320      	adds	r3, #32
 8005282:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005284:	f7fc fcf4 	bl	8001c70 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b01      	cmp	r3, #1
 8005294:	d001      	beq.n	800529a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005296:	2302      	movs	r3, #2
 8005298:	e1d1      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_SPI_Transmit+0x3a>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e1c9      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_SPI_Transmit+0x4c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e1c2      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005310:	d108      	bne.n	8005324 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e009      	b.n	8005338 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005336:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4b96      	ldr	r3, [pc, #600]	@ (8005598 <HAL_SPI_Transmit+0x32c>)
 8005340:	4013      	ands	r3, r2
 8005342:	88f9      	ldrh	r1, [r7, #6]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005364:	d107      	bne.n	8005376 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d947      	bls.n	800540e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800537e:	e03f      	b.n	8005400 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b02      	cmp	r3, #2
 800538c:	d114      	bne.n	80053b8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6812      	ldr	r2, [r2, #0]
 8005398:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80053b6:	e023      	b.n	8005400 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053b8:	f7fc fc5a 	bl	8001c70 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d803      	bhi.n	80053d0 <HAL_SPI_Transmit+0x164>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d102      	bne.n	80053d6 <HAL_SPI_Transmit+0x16a>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d114      	bne.n	8005400 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fba8 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e11e      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1b9      	bne.n	8005380 <HAL_SPI_Transmit+0x114>
 800540c:	e0f1      	b.n	80055f2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b07      	cmp	r3, #7
 8005414:	f240 80e6 	bls.w	80055e4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005418:	e05d      	b.n	80054d6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b02      	cmp	r3, #2
 8005426:	d132      	bne.n	800548e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d918      	bls.n	8005466 <HAL_SPI_Transmit+0x1fa>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d014      	beq.n	8005466 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6812      	ldr	r2, [r2, #0]
 8005446:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544c:	1d1a      	adds	r2, r3, #4
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b02      	subs	r3, #2
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005464:	e037      	b.n	80054d6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546a:	881a      	ldrh	r2, [r3, #0]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800548c:	e023      	b.n	80054d6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548e:	f7fc fbef 	bl	8001c70 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d803      	bhi.n	80054a6 <HAL_SPI_Transmit+0x23a>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a4:	d102      	bne.n	80054ac <HAL_SPI_Transmit+0x240>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d114      	bne.n	80054d6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fb3d 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e0b3      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d19b      	bne.n	800541a <HAL_SPI_Transmit+0x1ae>
 80054e2:	e086      	b.n	80055f2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d154      	bne.n	800559c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d918      	bls.n	8005530 <HAL_SPI_Transmit+0x2c4>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d914      	bls.n	8005530 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005516:	1d1a      	adds	r2, r3, #4
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005522:	b29b      	uxth	r3, r3
 8005524:	3b04      	subs	r3, #4
 8005526:	b29a      	uxth	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800552e:	e059      	b.n	80055e4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b01      	cmp	r3, #1
 800553a:	d917      	bls.n	800556c <HAL_SPI_Transmit+0x300>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005548:	881a      	ldrh	r2, [r3, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005552:	1c9a      	adds	r2, r3, #2
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800555e:	b29b      	uxth	r3, r3
 8005560:	3b02      	subs	r3, #2
 8005562:	b29a      	uxth	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800556a:	e03b      	b.n	80055e4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3320      	adds	r3, #32
 8005576:	7812      	ldrb	r2, [r2, #0]
 8005578:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005596:	e025      	b.n	80055e4 <HAL_SPI_Transmit+0x378>
 8005598:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559c:	f7fc fb68 	bl	8001c70 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d803      	bhi.n	80055b4 <HAL_SPI_Transmit+0x348>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b2:	d102      	bne.n	80055ba <HAL_SPI_Transmit+0x34e>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d114      	bne.n	80055e4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fab6 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e02c      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f47f af79 	bne.w	80054e4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2108      	movs	r1, #8
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	f000 fb35 	bl	8005c6c <SPI_WaitOnFlagUntilTimeout>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005618:	68f8      	ldr	r0, [r7, #12]
 800561a:	f000 fa87 	bl	8005b2c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800563c:	2300      	movs	r3, #0
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop

08005648 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	4613      	mov	r3, r2
 8005656:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	b29b      	uxth	r3, r3
 8005660:	3301      	adds	r3, #1
 8005662:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3330      	adds	r3, #48	@ 0x30
 800566a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800566c:	f7fc fb00 	bl	8001c70 <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800567e:	2302      	movs	r3, #2
 8005680:	e250      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_Receive+0x46>
 8005688:	88fb      	ldrh	r3, [r7, #6]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e248      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_SPI_Receive+0x58>
 800569c:	2302      	movs	r3, #2
 800569e:	e241      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2204      	movs	r2, #4
 80056ac:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80056f8:	d108      	bne.n	800570c <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e009      	b.n	8005720 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800571e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b95      	ldr	r3, [pc, #596]	@ (800597c <HAL_SPI_Receive+0x334>)
 8005728:	4013      	ands	r3, r2
 800572a:	88f9      	ldrh	r1, [r7, #6]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	430b      	orrs	r3, r1
 8005732:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800574c:	d107      	bne.n	800575e <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d96c      	bls.n	8005840 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005766:	e064      	b.n	8005832 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b01      	cmp	r3, #1
 800577c:	d114      	bne.n	80057a8 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005786:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005788:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800579a:	b29b      	uxth	r3, r3
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80057a6:	e044      	b.n	8005832 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	8bfa      	ldrh	r2, [r7, #30]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d919      	bls.n	80057ea <HAL_SPI_Receive+0x1a2>
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d014      	beq.n	80057ea <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057ca:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d0:	1d1a      	adds	r2, r3, #4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80057e8:	e023      	b.n	8005832 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ea:	f7fc fa41 	bl	8001c70 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d803      	bhi.n	8005802 <HAL_SPI_Receive+0x1ba>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d102      	bne.n	8005808 <HAL_SPI_Receive+0x1c0>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d114      	bne.n	8005832 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f98f 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005814:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e178      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d194      	bne.n	8005768 <HAL_SPI_Receive+0x120>
 800583e:	e15e      	b.n	8005afe <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b07      	cmp	r3, #7
 8005846:	f240 8153 	bls.w	8005af0 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800584a:	e08f      	b.n	800596c <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b01      	cmp	r3, #1
 8005860:	d114      	bne.n	800588c <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	8812      	ldrh	r2, [r2, #0]
 800586a:	b292      	uxth	r2, r2
 800586c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005872:	1c9a      	adds	r2, r3, #2
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800588a:	e06f      	b.n	800596c <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005892:	b29b      	uxth	r3, r3
 8005894:	8bfa      	ldrh	r2, [r7, #30]
 8005896:	429a      	cmp	r2, r3
 8005898:	d924      	bls.n	80058e4 <HAL_SPI_Receive+0x29c>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01f      	beq.n	80058e4 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	8812      	ldrh	r2, [r2, #0]
 80058ac:	b292      	uxth	r2, r2
 80058ae:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b4:	1c9a      	adds	r2, r3, #2
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	b292      	uxth	r2, r2
 80058c4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058ca:	1c9a      	adds	r2, r3, #2
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b02      	subs	r3, #2
 80058da:	b29a      	uxth	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80058e2:	e043      	b.n	800596c <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d119      	bne.n	8005924 <HAL_SPI_Receive+0x2dc>
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d014      	beq.n	8005924 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	8812      	ldrh	r2, [r2, #0]
 8005902:	b292      	uxth	r2, r2
 8005904:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800590a:	1c9a      	adds	r2, r3, #2
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005922:	e023      	b.n	800596c <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005924:	f7fc f9a4 	bl	8001c70 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d803      	bhi.n	800593c <HAL_SPI_Receive+0x2f4>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d102      	bne.n	8005942 <HAL_SPI_Receive+0x2fa>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d114      	bne.n	800596c <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f000 f8f2 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800594e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e0db      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	f47f af69 	bne.w	800584c <HAL_SPI_Receive+0x204>
 800597a:	e0c0      	b.n	8005afe <HAL_SPI_Receive+0x4b6>
 800597c:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d117      	bne.n	80059c6 <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059a2:	7812      	ldrb	r2, [r2, #0]
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80059c4:	e094      	b.n	8005af0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	8bfa      	ldrh	r2, [r7, #30]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d946      	bls.n	8005a62 <HAL_SPI_Receive+0x41a>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d041      	beq.n	8005a62 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ea:	7812      	ldrb	r2, [r2, #0]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b04      	subs	r3, #4
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005a60:	e046      	b.n	8005af0 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d81c      	bhi.n	8005aa8 <HAL_SPI_Receive+0x460>
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d017      	beq.n	8005aa8 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005aa6:	e023      	b.n	8005af0 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aa8:	f7fc f8e2 	bl	8001c70 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	683a      	ldr	r2, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d803      	bhi.n	8005ac0 <HAL_SPI_Receive+0x478>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d102      	bne.n	8005ac6 <HAL_SPI_Receive+0x47e>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d114      	bne.n	8005af0 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f830 	bl	8005b2c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ad2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e019      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f af41 	bne.w	8005980 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f814 	bl	8005b2c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e000      	b.n	8005b24 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3720      	adds	r7, #32
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0208 	orr.w	r2, r2, #8
 8005b4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0210 	orr.w	r2, r2, #16
 8005b5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f022 0201 	bic.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6919      	ldr	r1, [r3, #16]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b3c      	ldr	r3, [pc, #240]	@ (8005c68 <SPI_CloseTransfer+0x13c>)
 8005b78:	400b      	ands	r3, r1
 8005b7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005b8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d014      	beq.n	8005bc2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ba8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0220 	orr.w	r2, r2, #32
 8005bc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d014      	beq.n	8005bf8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00f      	beq.n	8005bf8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bde:	f043 0204 	orr.w	r2, r3, #4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	699a      	ldr	r2, [r3, #24]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00f      	beq.n	8005c22 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00f      	beq.n	8005c4c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c32:	f043 0208 	orr.w	r2, r3, #8
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8005c5c:	bf00      	nop
 8005c5e:	3714      	adds	r7, #20
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr
 8005c68:	fffffc90 	.word	0xfffffc90

08005c6c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c7c:	e010      	b.n	8005ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c7e:	f7fb fff7 	bl	8001c70 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d803      	bhi.n	8005c96 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d102      	bne.n	8005c9c <SPI_WaitOnFlagUntilTimeout+0x30>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e00f      	b.n	8005cc0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695a      	ldr	r2, [r3, #20]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d0df      	beq.n	8005c7e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd4:	095b      	lsrs	r3, r3, #5
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	3307      	adds	r3, #7
 8005ce6:	08db      	lsrs	r3, r3, #3
 8005ce8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e049      	b.n	8005da4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7fb fcf9 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	f000 fad5 	bl	80062ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d001      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e054      	b.n	8005e6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	@ (8005e7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dee:	d01d      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a22      	ldr	r2, [pc, #136]	@ (8005e80 <HAL_TIM_Base_Start_IT+0xd4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a21      	ldr	r2, [pc, #132]	@ (8005e84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1f      	ldr	r2, [pc, #124]	@ (8005e88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1e      	ldr	r2, [pc, #120]	@ (8005e8c <HAL_TIM_Base_Start_IT+0xe0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e90 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x80>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a1b      	ldr	r2, [pc, #108]	@ (8005e94 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d115      	bne.n	8005e58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <HAL_TIM_Base_Start_IT+0xec>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d015      	beq.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e44:	d011      	beq.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	e008      	b.n	8005e6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40010400 	.word	0x40010400
 8005e90:	40001800 	.word	0x40001800
 8005e94:	40014000 	.word	0x40014000
 8005e98:	00010007 	.word	0x00010007

08005e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d020      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0202 	mvn.w	r2, #2
 8005ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9e2 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f9d4 	bl	800629c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f9e5 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0204 	mvn.w	r2, #4
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2202      	movs	r2, #2
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9bc 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9ae 	bl	800629c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9bf 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d020      	beq.n	8005f98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d01b      	beq.n	8005f98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0208 	mvn.w	r2, #8
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f996 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f988 	bl	800629c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f999 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d020      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f003 0310 	and.w	r3, r3, #16
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0210 	mvn.w	r2, #16
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2208      	movs	r2, #8
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f970 	bl	80062b0 <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f962 	bl	800629c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f973 	bl	80062c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00c      	beq.n	8006008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0201 	mvn.w	r2, #1
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fa ffbe 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00c      	beq.n	8006036 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fb37 	bl	80066a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fb2f 	bl	80066b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00c      	beq.n	800607e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f92d 	bl	80062d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0220 	mvn.w	r2, #32
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 faf7 	bl	8006690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a2:	bf00      	nop
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIM_ConfigClockSource+0x1c>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0dc      	b.n	8006282 <HAL_TIM_ConfigClockSource+0x1d6>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	4b6a      	ldr	r3, [pc, #424]	@ (800628c <HAL_TIM_ConfigClockSource+0x1e0>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a64      	ldr	r2, [pc, #400]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1e4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	f000 80a9 	beq.w	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006104:	4a62      	ldr	r2, [pc, #392]	@ (8006290 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	f200 80ae 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800610c:	4a61      	ldr	r2, [pc, #388]	@ (8006294 <HAL_TIM_ConfigClockSource+0x1e8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	f000 80a1 	beq.w	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006114:	4a5f      	ldr	r2, [pc, #380]	@ (8006294 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	f200 80a6 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800611c:	4a5e      	ldr	r2, [pc, #376]	@ (8006298 <HAL_TIM_ConfigClockSource+0x1ec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	f000 8099 	beq.w	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006124:	4a5c      	ldr	r2, [pc, #368]	@ (8006298 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006126:	4293      	cmp	r3, r2
 8006128:	f200 809e 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800612c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006130:	f000 8091 	beq.w	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006134:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006138:	f200 8096 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800613c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006140:	f000 8089 	beq.w	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006148:	f200 808e 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800614c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006150:	d03e      	beq.n	80061d0 <HAL_TIM_ConfigClockSource+0x124>
 8006152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006156:	f200 8087 	bhi.w	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 800615a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800615e:	f000 8086 	beq.w	800626e <HAL_TIM_ConfigClockSource+0x1c2>
 8006162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006166:	d87f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006168:	2b70      	cmp	r3, #112	@ 0x70
 800616a:	d01a      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0xf6>
 800616c:	2b70      	cmp	r3, #112	@ 0x70
 800616e:	d87b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006170:	2b60      	cmp	r3, #96	@ 0x60
 8006172:	d050      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x16a>
 8006174:	2b60      	cmp	r3, #96	@ 0x60
 8006176:	d877      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006178:	2b50      	cmp	r3, #80	@ 0x50
 800617a:	d03c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x14a>
 800617c:	2b50      	cmp	r3, #80	@ 0x50
 800617e:	d873      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006180:	2b40      	cmp	r3, #64	@ 0x40
 8006182:	d058      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0x18a>
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d86f      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006188:	2b30      	cmp	r3, #48	@ 0x30
 800618a:	d064      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 800618c:	2b30      	cmp	r3, #48	@ 0x30
 800618e:	d86b      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d060      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 8006194:	2b20      	cmp	r3, #32
 8006196:	d867      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d05c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d05a      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0x1aa>
 80061a0:	e062      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061b2:	f000 f9bf 	bl	8006534 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80061c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	609a      	str	r2, [r3, #8]
      break;
 80061ce:	e04f      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061e0:	f000 f9a8 	bl	8006534 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061f2:	609a      	str	r2, [r3, #8]
      break;
 80061f4:	e03c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f918 	bl	8006438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2150      	movs	r1, #80	@ 0x50
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f972 	bl	80064f8 <TIM_ITRx_SetConfig>
      break;
 8006214:	e02c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006222:	461a      	mov	r2, r3
 8006224:	f000 f937 	bl	8006496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2160      	movs	r1, #96	@ 0x60
 800622e:	4618      	mov	r0, r3
 8006230:	f000 f962 	bl	80064f8 <TIM_ITRx_SetConfig>
      break;
 8006234:	e01c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006242:	461a      	mov	r2, r3
 8006244:	f000 f8f8 	bl	8006438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2140      	movs	r1, #64	@ 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f000 f952 	bl	80064f8 <TIM_ITRx_SetConfig>
      break;
 8006254:	e00c      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 f949 	bl	80064f8 <TIM_ITRx_SetConfig>
      break;
 8006266:	e003      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
      break;
 800626c:	e000      	b.n	8006270 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800626e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	ffceff88 	.word	0xffceff88
 8006290:	00100040 	.word	0x00100040
 8006294:	00100030 	.word	0x00100030
 8006298:	00100020 	.word	0x00100020

0800629c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a46      	ldr	r2, [pc, #280]	@ (8006418 <TIM_Base_SetConfig+0x12c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d013      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800630a:	d00f      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a43      	ldr	r2, [pc, #268]	@ (800641c <TIM_Base_SetConfig+0x130>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00b      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a42      	ldr	r2, [pc, #264]	@ (8006420 <TIM_Base_SetConfig+0x134>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a41      	ldr	r2, [pc, #260]	@ (8006424 <TIM_Base_SetConfig+0x138>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_Base_SetConfig+0x40>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a40      	ldr	r2, [pc, #256]	@ (8006428 <TIM_Base_SetConfig+0x13c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d108      	bne.n	800633e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a35      	ldr	r2, [pc, #212]	@ (8006418 <TIM_Base_SetConfig+0x12c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01f      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634c:	d01b      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a32      	ldr	r2, [pc, #200]	@ (800641c <TIM_Base_SetConfig+0x130>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d017      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a31      	ldr	r2, [pc, #196]	@ (8006420 <TIM_Base_SetConfig+0x134>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a30      	ldr	r2, [pc, #192]	@ (8006424 <TIM_Base_SetConfig+0x138>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00f      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a2f      	ldr	r2, [pc, #188]	@ (8006428 <TIM_Base_SetConfig+0x13c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d00b      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a2e      	ldr	r2, [pc, #184]	@ (800642c <TIM_Base_SetConfig+0x140>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d007      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2d      	ldr	r2, [pc, #180]	@ (8006430 <TIM_Base_SetConfig+0x144>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d003      	beq.n	8006386 <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2c      	ldr	r2, [pc, #176]	@ (8006434 <TIM_Base_SetConfig+0x148>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d108      	bne.n	8006398 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800638c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4313      	orrs	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689a      	ldr	r2, [r3, #8]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a16      	ldr	r2, [pc, #88]	@ (8006418 <TIM_Base_SetConfig+0x12c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00f      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <TIM_Base_SetConfig+0x13c>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00b      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <TIM_Base_SetConfig+0x140>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a16      	ldr	r2, [pc, #88]	@ (8006430 <TIM_Base_SetConfig+0x144>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_Base_SetConfig+0xf8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a15      	ldr	r2, [pc, #84]	@ (8006434 <TIM_Base_SetConfig+0x148>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d103      	bne.n	80063ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f023 0201 	bic.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]
  }
}
 800640a:	bf00      	nop
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40010000 	.word	0x40010000
 800641c:	40000400 	.word	0x40000400
 8006420:	40000800 	.word	0x40000800
 8006424:	40000c00 	.word	0x40000c00
 8006428:	40010400 	.word	0x40010400
 800642c:	40014000 	.word	0x40014000
 8006430:	40014400 	.word	0x40014400
 8006434:	40014800 	.word	0x40014800

08006438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f023 030a 	bic.w	r3, r3, #10
 8006474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4313      	orrs	r3, r2
 800647c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	621a      	str	r2, [r3, #32]
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f023 0210 	bic.w	r2, r3, #16
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	031b      	lsls	r3, r3, #12
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80064d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
	...

080064f8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <TIM_ITRx_SetConfig+0x38>)
 800650c:	4013      	ands	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	f043 0307 	orr.w	r3, r3, #7
 800651a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	609a      	str	r2, [r3, #8]
}
 8006522:	bf00      	nop
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	ffcfff8f 	.word	0xffcfff8f

08006534 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800654e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	021a      	lsls	r2, r3, #8
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	431a      	orrs	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	609a      	str	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006584:	2b01      	cmp	r3, #1
 8006586:	d101      	bne.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006588:	2302      	movs	r3, #2
 800658a:	e06d      	b.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a30      	ldr	r2, [pc, #192]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d004      	beq.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2f      	ldr	r2, [pc, #188]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d108      	bne.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a20      	ldr	r2, [pc, #128]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d022      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065fe:	d01d      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1d      	ldr	r2, [pc, #116]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1c      	ldr	r2, [pc, #112]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d013      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1a      	ldr	r2, [pc, #104]	@ (8006684 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a15      	ldr	r2, [pc, #84]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a16      	ldr	r2, [pc, #88]	@ (8006688 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a15      	ldr	r2, [pc, #84]	@ (800668c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d10c      	bne.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	40010000 	.word	0x40010000
 8006678:	40010400 	.word	0x40010400
 800667c:	40000400 	.word	0x40000400
 8006680:	40000800 	.word	0x40000800
 8006684:	40000c00 	.word	0x40000c00
 8006688:	40001800 	.word	0x40001800
 800668c:	40014000 	.word	0x40014000

08006690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e042      	b.n	8006764 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fb f839 	bl	8001768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2224      	movs	r2, #36	@ 0x24
 80066fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fe1e 	bl	8007358 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f8b3 	bl	8006888 <UART_SetConfig>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d101      	bne.n	800672c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e01b      	b.n	8006764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800673a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689a      	ldr	r2, [r3, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800674a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fe9d 	bl	800749c <UART_CheckIdleState>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b08a      	sub	sp, #40	@ 0x28
 8006770:	af02      	add	r7, sp, #8
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006782:	2b20      	cmp	r3, #32
 8006784:	d17b      	bne.n	800687e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <HAL_UART_Transmit+0x26>
 800678c:	88fb      	ldrh	r3, [r7, #6]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e074      	b.n	8006880 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2221      	movs	r2, #33	@ 0x21
 80067a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067a6:	f7fb fa63 	bl	8001c70 <HAL_GetTick>
 80067aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	88fa      	ldrh	r2, [r7, #6]
 80067b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c4:	d108      	bne.n	80067d8 <HAL_UART_Transmit+0x6c>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	e003      	b.n	80067e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e0:	e030      	b.n	8006844 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2200      	movs	r2, #0
 80067ea:	2180      	movs	r1, #128	@ 0x80
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 feff 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e03d      	b.n	8006880 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10b      	bne.n	8006822 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	881b      	ldrh	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006818:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	3302      	adds	r3, #2
 800681e:	61bb      	str	r3, [r7, #24]
 8006820:	e007      	b.n	8006832 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	781a      	ldrb	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	3301      	adds	r3, #1
 8006830:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006838:	b29b      	uxth	r3, r3
 800683a:	3b01      	subs	r3, #1
 800683c:	b29a      	uxth	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1c8      	bne.n	80067e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2200      	movs	r2, #0
 8006858:	2140      	movs	r1, #64	@ 0x40
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 fec8 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e006      	b.n	8006880 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2220      	movs	r2, #32
 8006876:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800687e:	2302      	movs	r3, #2
  }
}
 8006880:	4618      	mov	r0, r3
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800688c:	b092      	sub	sp, #72	@ 0x48
 800688e:	af00      	add	r7, sp, #0
 8006890:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	431a      	orrs	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	4bbe      	ldr	r3, [pc, #760]	@ (8006bb0 <UART_SetConfig+0x328>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	6812      	ldr	r2, [r2, #0]
 80068be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4ab3      	ldr	r2, [pc, #716]	@ (8006bb4 <UART_SetConfig+0x32c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068f0:	4313      	orrs	r3, r2
 80068f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	4baf      	ldr	r3, [pc, #700]	@ (8006bb8 <UART_SetConfig+0x330>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006904:	430b      	orrs	r3, r1
 8006906:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690e:	f023 010f 	bic.w	r1, r3, #15
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4aa6      	ldr	r2, [pc, #664]	@ (8006bbc <UART_SetConfig+0x334>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d177      	bne.n	8006a18 <UART_SetConfig+0x190>
 8006928:	4ba5      	ldr	r3, [pc, #660]	@ (8006bc0 <UART_SetConfig+0x338>)
 800692a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800692c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006930:	2b28      	cmp	r3, #40	@ 0x28
 8006932:	d86d      	bhi.n	8006a10 <UART_SetConfig+0x188>
 8006934:	a201      	add	r2, pc, #4	@ (adr r2, 800693c <UART_SetConfig+0xb4>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	080069e1 	.word	0x080069e1
 8006940:	08006a11 	.word	0x08006a11
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	080069e9 	.word	0x080069e9
 8006960:	08006a11 	.word	0x08006a11
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	080069f1 	.word	0x080069f1
 8006980:	08006a11 	.word	0x08006a11
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	080069f9 	.word	0x080069f9
 80069a0:	08006a11 	.word	0x08006a11
 80069a4:	08006a11 	.word	0x08006a11
 80069a8:	08006a11 	.word	0x08006a11
 80069ac:	08006a11 	.word	0x08006a11
 80069b0:	08006a11 	.word	0x08006a11
 80069b4:	08006a11 	.word	0x08006a11
 80069b8:	08006a11 	.word	0x08006a11
 80069bc:	08006a01 	.word	0x08006a01
 80069c0:	08006a11 	.word	0x08006a11
 80069c4:	08006a11 	.word	0x08006a11
 80069c8:	08006a11 	.word	0x08006a11
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a11 	.word	0x08006a11
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a11 	.word	0x08006a11
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069e6:	e222      	b.n	8006e2e <UART_SetConfig+0x5a6>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069ee:	e21e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069f6:	e21a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80069fe:	e216      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a00:	2320      	movs	r3, #32
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a06:	e212      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a08:	2340      	movs	r3, #64	@ 0x40
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a0e:	e20e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a10:	2380      	movs	r3, #128	@ 0x80
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a16:	e20a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a69      	ldr	r2, [pc, #420]	@ (8006bc4 <UART_SetConfig+0x33c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d130      	bne.n	8006a84 <UART_SetConfig+0x1fc>
 8006a22:	4b67      	ldr	r3, [pc, #412]	@ (8006bc0 <UART_SetConfig+0x338>)
 8006a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a26:	f003 0307 	and.w	r3, r3, #7
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d826      	bhi.n	8006a7c <UART_SetConfig+0x1f4>
 8006a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <UART_SetConfig+0x1ac>)
 8006a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a34:	08006a4d 	.word	0x08006a4d
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a5d 	.word	0x08006a5d
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e1ec      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e1e8      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e1e4      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e1e0      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e1dc      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a74:	2340      	movs	r3, #64	@ 0x40
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e1d8      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e1d4      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a4f      	ldr	r2, [pc, #316]	@ (8006bc8 <UART_SetConfig+0x340>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d130      	bne.n	8006af0 <UART_SetConfig+0x268>
 8006a8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006bc0 <UART_SetConfig+0x338>)
 8006a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d826      	bhi.n	8006ae8 <UART_SetConfig+0x260>
 8006a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <UART_SetConfig+0x218>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab9 	.word	0x08006ab9
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e1b6      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	e1b2      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e1ae      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e1aa      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e1a6      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ae0:	2340      	movs	r3, #64	@ 0x40
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e1a2      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e19e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a35      	ldr	r2, [pc, #212]	@ (8006bcc <UART_SetConfig+0x344>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d130      	bne.n	8006b5c <UART_SetConfig+0x2d4>
 8006afa:	4b31      	ldr	r3, [pc, #196]	@ (8006bc0 <UART_SetConfig+0x338>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d826      	bhi.n	8006b54 <UART_SetConfig+0x2cc>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <UART_SetConfig+0x284>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e180      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b32:	e17c      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3a:	e178      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e174      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b44:	2320      	movs	r3, #32
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e170      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b4c:	2340      	movs	r3, #64	@ 0x40
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e16c      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b54:	2380      	movs	r3, #128	@ 0x80
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e168      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a1b      	ldr	r2, [pc, #108]	@ (8006bd0 <UART_SetConfig+0x348>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d142      	bne.n	8006bec <UART_SetConfig+0x364>
 8006b66:	4b16      	ldr	r3, [pc, #88]	@ (8006bc0 <UART_SetConfig+0x338>)
 8006b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d838      	bhi.n	8006be4 <UART_SetConfig+0x35c>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0x2f0>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006bd5 	.word	0x08006bd5
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	2300      	movs	r3, #0
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e14a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	e146      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e142      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e13e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006bb0:	cfff69f3 	.word	0xcfff69f3
 8006bb4:	58000c00 	.word	0x58000c00
 8006bb8:	11fff4ff 	.word	0x11fff4ff
 8006bbc:	40011000 	.word	0x40011000
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	40004400 	.word	0x40004400
 8006bc8:	40004800 	.word	0x40004800
 8006bcc:	40004c00 	.word	0x40004c00
 8006bd0:	40005000 	.word	0x40005000
 8006bd4:	2320      	movs	r3, #32
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bda:	e128      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006bdc:	2340      	movs	r3, #64	@ 0x40
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006be2:	e124      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006be4:	2380      	movs	r3, #128	@ 0x80
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bea:	e120      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4acb      	ldr	r2, [pc, #812]	@ (8006f20 <UART_SetConfig+0x698>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d176      	bne.n	8006ce4 <UART_SetConfig+0x45c>
 8006bf6:	4bcb      	ldr	r3, [pc, #812]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bfe:	2b28      	cmp	r3, #40	@ 0x28
 8006c00:	d86c      	bhi.n	8006cdc <UART_SetConfig+0x454>
 8006c02:	a201      	add	r2, pc, #4	@ (adr r2, 8006c08 <UART_SetConfig+0x380>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006cad 	.word	0x08006cad
 8006c0c:	08006cdd 	.word	0x08006cdd
 8006c10:	08006cdd 	.word	0x08006cdd
 8006c14:	08006cdd 	.word	0x08006cdd
 8006c18:	08006cdd 	.word	0x08006cdd
 8006c1c:	08006cdd 	.word	0x08006cdd
 8006c20:	08006cdd 	.word	0x08006cdd
 8006c24:	08006cdd 	.word	0x08006cdd
 8006c28:	08006cb5 	.word	0x08006cb5
 8006c2c:	08006cdd 	.word	0x08006cdd
 8006c30:	08006cdd 	.word	0x08006cdd
 8006c34:	08006cdd 	.word	0x08006cdd
 8006c38:	08006cdd 	.word	0x08006cdd
 8006c3c:	08006cdd 	.word	0x08006cdd
 8006c40:	08006cdd 	.word	0x08006cdd
 8006c44:	08006cdd 	.word	0x08006cdd
 8006c48:	08006cbd 	.word	0x08006cbd
 8006c4c:	08006cdd 	.word	0x08006cdd
 8006c50:	08006cdd 	.word	0x08006cdd
 8006c54:	08006cdd 	.word	0x08006cdd
 8006c58:	08006cdd 	.word	0x08006cdd
 8006c5c:	08006cdd 	.word	0x08006cdd
 8006c60:	08006cdd 	.word	0x08006cdd
 8006c64:	08006cdd 	.word	0x08006cdd
 8006c68:	08006cc5 	.word	0x08006cc5
 8006c6c:	08006cdd 	.word	0x08006cdd
 8006c70:	08006cdd 	.word	0x08006cdd
 8006c74:	08006cdd 	.word	0x08006cdd
 8006c78:	08006cdd 	.word	0x08006cdd
 8006c7c:	08006cdd 	.word	0x08006cdd
 8006c80:	08006cdd 	.word	0x08006cdd
 8006c84:	08006cdd 	.word	0x08006cdd
 8006c88:	08006ccd 	.word	0x08006ccd
 8006c8c:	08006cdd 	.word	0x08006cdd
 8006c90:	08006cdd 	.word	0x08006cdd
 8006c94:	08006cdd 	.word	0x08006cdd
 8006c98:	08006cdd 	.word	0x08006cdd
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cdd 	.word	0x08006cdd
 8006ca4:	08006cdd 	.word	0x08006cdd
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cb2:	e0bc      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cba:	e0b8      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cc2:	e0b4      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e0b0      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ccc:	2320      	movs	r3, #32
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e0ac      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006cd4:	2340      	movs	r3, #64	@ 0x40
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cda:	e0a8      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006cdc:	2380      	movs	r3, #128	@ 0x80
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e0a4      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a8f      	ldr	r2, [pc, #572]	@ (8006f28 <UART_SetConfig+0x6a0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d130      	bne.n	8006d50 <UART_SetConfig+0x4c8>
 8006cee:	4b8d      	ldr	r3, [pc, #564]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cf2:	f003 0307 	and.w	r3, r3, #7
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d826      	bhi.n	8006d48 <UART_SetConfig+0x4c0>
 8006cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8006d00 <UART_SetConfig+0x478>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d21 	.word	0x08006d21
 8006d08:	08006d29 	.word	0x08006d29
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d39 	.word	0x08006d39
 8006d14:	08006d41 	.word	0x08006d41
 8006d18:	2300      	movs	r3, #0
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e086      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d20:	2304      	movs	r3, #4
 8006d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d26:	e082      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d28:	2308      	movs	r3, #8
 8006d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d2e:	e07e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d30:	2310      	movs	r3, #16
 8006d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d36:	e07a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d38:	2320      	movs	r3, #32
 8006d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d3e:	e076      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d40:	2340      	movs	r3, #64	@ 0x40
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d46:	e072      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d48:	2380      	movs	r3, #128	@ 0x80
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d4e:	e06e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a75      	ldr	r2, [pc, #468]	@ (8006f2c <UART_SetConfig+0x6a4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d130      	bne.n	8006dbc <UART_SetConfig+0x534>
 8006d5a:	4b72      	ldr	r3, [pc, #456]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b05      	cmp	r3, #5
 8006d64:	d826      	bhi.n	8006db4 <UART_SetConfig+0x52c>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <UART_SetConfig+0x4e4>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d85 	.word	0x08006d85
 8006d70:	08006d8d 	.word	0x08006d8d
 8006d74:	08006d95 	.word	0x08006d95
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e050      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e04c      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e048      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e044      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006da4:	2320      	movs	r3, #32
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e040      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006dac:	2340      	movs	r3, #64	@ 0x40
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006db2:	e03c      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006db4:	2380      	movs	r3, #128	@ 0x80
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dba:	e038      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a5b      	ldr	r2, [pc, #364]	@ (8006f30 <UART_SetConfig+0x6a8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d130      	bne.n	8006e28 <UART_SetConfig+0x5a0>
 8006dc6:	4b57      	ldr	r3, [pc, #348]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	d826      	bhi.n	8006e20 <UART_SetConfig+0x598>
 8006dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dd8 <UART_SetConfig+0x550>)
 8006dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd8:	08006df1 	.word	0x08006df1
 8006ddc:	08006df9 	.word	0x08006df9
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	2302      	movs	r3, #2
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e01a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006df8:	2304      	movs	r3, #4
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e016      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e00:	2308      	movs	r3, #8
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e012      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e08:	2310      	movs	r3, #16
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e00e      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e10:	2320      	movs	r3, #32
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e00a      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e18:	2340      	movs	r3, #64	@ 0x40
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e1e:	e006      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e20:	2380      	movs	r3, #128	@ 0x80
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x5a6>
 8006e28:	2380      	movs	r3, #128	@ 0x80
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a3f      	ldr	r2, [pc, #252]	@ (8006f30 <UART_SetConfig+0x6a8>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	f040 80f8 	bne.w	800702a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	dc46      	bgt.n	8006ed0 <UART_SetConfig+0x648>
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	f2c0 8082 	blt.w	8006f4c <UART_SetConfig+0x6c4>
 8006e48:	3b02      	subs	r3, #2
 8006e4a:	2b1e      	cmp	r3, #30
 8006e4c:	d87e      	bhi.n	8006f4c <UART_SetConfig+0x6c4>
 8006e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e54 <UART_SetConfig+0x5cc>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006ed7 	.word	0x08006ed7
 8006e58:	08006f4d 	.word	0x08006f4d
 8006e5c:	08006edf 	.word	0x08006edf
 8006e60:	08006f4d 	.word	0x08006f4d
 8006e64:	08006f4d 	.word	0x08006f4d
 8006e68:	08006f4d 	.word	0x08006f4d
 8006e6c:	08006eef 	.word	0x08006eef
 8006e70:	08006f4d 	.word	0x08006f4d
 8006e74:	08006f4d 	.word	0x08006f4d
 8006e78:	08006f4d 	.word	0x08006f4d
 8006e7c:	08006f4d 	.word	0x08006f4d
 8006e80:	08006f4d 	.word	0x08006f4d
 8006e84:	08006f4d 	.word	0x08006f4d
 8006e88:	08006f4d 	.word	0x08006f4d
 8006e8c:	08006eff 	.word	0x08006eff
 8006e90:	08006f4d 	.word	0x08006f4d
 8006e94:	08006f4d 	.word	0x08006f4d
 8006e98:	08006f4d 	.word	0x08006f4d
 8006e9c:	08006f4d 	.word	0x08006f4d
 8006ea0:	08006f4d 	.word	0x08006f4d
 8006ea4:	08006f4d 	.word	0x08006f4d
 8006ea8:	08006f4d 	.word	0x08006f4d
 8006eac:	08006f4d 	.word	0x08006f4d
 8006eb0:	08006f4d 	.word	0x08006f4d
 8006eb4:	08006f4d 	.word	0x08006f4d
 8006eb8:	08006f4d 	.word	0x08006f4d
 8006ebc:	08006f4d 	.word	0x08006f4d
 8006ec0:	08006f4d 	.word	0x08006f4d
 8006ec4:	08006f4d 	.word	0x08006f4d
 8006ec8:	08006f4d 	.word	0x08006f4d
 8006ecc:	08006f3f 	.word	0x08006f3f
 8006ed0:	2b40      	cmp	r3, #64	@ 0x40
 8006ed2:	d037      	beq.n	8006f44 <UART_SetConfig+0x6bc>
 8006ed4:	e03a      	b.n	8006f4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006ed6:	f7fd fc83 	bl	80047e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006eda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006edc:	e03c      	b.n	8006f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fd fc92 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eec:	e034      	b.n	8006f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eee:	f107 0318 	add.w	r3, r7, #24
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fdde 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006efc:	e02c      	b.n	8006f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efe:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d016      	beq.n	8006f38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f0a:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <UART_SetConfig+0x69c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	08db      	lsrs	r3, r3, #3
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	4a07      	ldr	r2, [pc, #28]	@ (8006f34 <UART_SetConfig+0x6ac>)
 8006f16:	fa22 f303 	lsr.w	r3, r2, r3
 8006f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f1c:	e01c      	b.n	8006f58 <UART_SetConfig+0x6d0>
 8006f1e:	bf00      	nop
 8006f20:	40011400 	.word	0x40011400
 8006f24:	58024400 	.word	0x58024400
 8006f28:	40007800 	.word	0x40007800
 8006f2c:	40007c00 	.word	0x40007c00
 8006f30:	58000c00 	.word	0x58000c00
 8006f34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006f38:	4b9d      	ldr	r3, [pc, #628]	@ (80071b0 <UART_SetConfig+0x928>)
 8006f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f3c:	e00c      	b.n	8006f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f3e:	4b9d      	ldr	r3, [pc, #628]	@ (80071b4 <UART_SetConfig+0x92c>)
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f42:	e009      	b.n	8006f58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	e005      	b.n	8006f58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006f56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 81de 	beq.w	800731c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	4a94      	ldr	r2, [pc, #592]	@ (80071b8 <UART_SetConfig+0x930>)
 8006f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d305      	bcc.n	8006f90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d903      	bls.n	8006f98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f96:	e1c1      	b.n	800731c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	60fa      	str	r2, [r7, #12]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	4a84      	ldr	r2, [pc, #528]	@ (80071b8 <UART_SetConfig+0x930>)
 8006fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	2200      	movs	r2, #0
 8006fae:	603b      	str	r3, [r7, #0]
 8006fb0:	607a      	str	r2, [r7, #4]
 8006fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fba:	f7f9 fba5 	bl	8000708 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	f04f 0300 	mov.w	r3, #0
 8006fce:	020b      	lsls	r3, r1, #8
 8006fd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006fd4:	0202      	lsls	r2, r0, #8
 8006fd6:	6979      	ldr	r1, [r7, #20]
 8006fd8:	6849      	ldr	r1, [r1, #4]
 8006fda:	0849      	lsrs	r1, r1, #1
 8006fdc:	2000      	movs	r0, #0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	eb12 0804 	adds.w	r8, r2, r4
 8006fe6:	eb43 0905 	adc.w	r9, r3, r5
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	469a      	mov	sl, r3
 8006ff2:	4693      	mov	fp, r2
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	465b      	mov	r3, fp
 8006ff8:	4640      	mov	r0, r8
 8006ffa:	4649      	mov	r1, r9
 8006ffc:	f7f9 fb84 	bl	8000708 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4613      	mov	r3, r2
 8007006:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800700e:	d308      	bcc.n	8007022 <UART_SetConfig+0x79a>
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007016:	d204      	bcs.n	8007022 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800701e:	60da      	str	r2, [r3, #12]
 8007020:	e17c      	b.n	800731c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007028:	e178      	b.n	800731c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007032:	f040 80c5 	bne.w	80071c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007036:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800703a:	2b20      	cmp	r3, #32
 800703c:	dc48      	bgt.n	80070d0 <UART_SetConfig+0x848>
 800703e:	2b00      	cmp	r3, #0
 8007040:	db7b      	blt.n	800713a <UART_SetConfig+0x8b2>
 8007042:	2b20      	cmp	r3, #32
 8007044:	d879      	bhi.n	800713a <UART_SetConfig+0x8b2>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <UART_SetConfig+0x7c4>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	080070d7 	.word	0x080070d7
 8007050:	080070df 	.word	0x080070df
 8007054:	0800713b 	.word	0x0800713b
 8007058:	0800713b 	.word	0x0800713b
 800705c:	080070e7 	.word	0x080070e7
 8007060:	0800713b 	.word	0x0800713b
 8007064:	0800713b 	.word	0x0800713b
 8007068:	0800713b 	.word	0x0800713b
 800706c:	080070f7 	.word	0x080070f7
 8007070:	0800713b 	.word	0x0800713b
 8007074:	0800713b 	.word	0x0800713b
 8007078:	0800713b 	.word	0x0800713b
 800707c:	0800713b 	.word	0x0800713b
 8007080:	0800713b 	.word	0x0800713b
 8007084:	0800713b 	.word	0x0800713b
 8007088:	0800713b 	.word	0x0800713b
 800708c:	08007107 	.word	0x08007107
 8007090:	0800713b 	.word	0x0800713b
 8007094:	0800713b 	.word	0x0800713b
 8007098:	0800713b 	.word	0x0800713b
 800709c:	0800713b 	.word	0x0800713b
 80070a0:	0800713b 	.word	0x0800713b
 80070a4:	0800713b 	.word	0x0800713b
 80070a8:	0800713b 	.word	0x0800713b
 80070ac:	0800713b 	.word	0x0800713b
 80070b0:	0800713b 	.word	0x0800713b
 80070b4:	0800713b 	.word	0x0800713b
 80070b8:	0800713b 	.word	0x0800713b
 80070bc:	0800713b 	.word	0x0800713b
 80070c0:	0800713b 	.word	0x0800713b
 80070c4:	0800713b 	.word	0x0800713b
 80070c8:	0800713b 	.word	0x0800713b
 80070cc:	0800712d 	.word	0x0800712d
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d02e      	beq.n	8007132 <UART_SetConfig+0x8aa>
 80070d4:	e031      	b.n	800713a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d6:	f7fc f94d 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80070da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070dc:	e033      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070de:	f7fc f95f 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 80070e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070e4:	e02f      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd fb8e 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e027      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070f6:	f107 0318 	add.w	r3, r7, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd fcda 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007104:	e01f      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007106:	4b2d      	ldr	r3, [pc, #180]	@ (80071bc <UART_SetConfig+0x934>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d009      	beq.n	8007126 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007112:	4b2a      	ldr	r3, [pc, #168]	@ (80071bc <UART_SetConfig+0x934>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	4a24      	ldr	r2, [pc, #144]	@ (80071b0 <UART_SetConfig+0x928>)
 800711e:	fa22 f303 	lsr.w	r3, r2, r3
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007124:	e00f      	b.n	8007146 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007126:	4b22      	ldr	r3, [pc, #136]	@ (80071b0 <UART_SetConfig+0x928>)
 8007128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800712a:	e00c      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800712c:	4b21      	ldr	r3, [pc, #132]	@ (80071b4 <UART_SetConfig+0x92c>)
 800712e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007130:	e009      	b.n	8007146 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007138:	e005      	b.n	8007146 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007144:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80e7 	beq.w	800731c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007152:	4a19      	ldr	r2, [pc, #100]	@ (80071b8 <UART_SetConfig+0x930>)
 8007154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007158:	461a      	mov	r2, r3
 800715a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007160:	005a      	lsls	r2, r3, #1
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	085b      	lsrs	r3, r3, #1
 8007168:	441a      	add	r2, r3
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d916      	bls.n	80071a8 <UART_SetConfig+0x920>
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007180:	d212      	bcs.n	80071a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	b29b      	uxth	r3, r3
 8007186:	f023 030f 	bic.w	r3, r3, #15
 800718a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800718c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718e:	085b      	lsrs	r3, r3, #1
 8007190:	b29b      	uxth	r3, r3
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	b29a      	uxth	r2, r3
 8007198:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800719a:	4313      	orrs	r3, r2
 800719c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	e0b9      	b.n	800731c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80071ae:	e0b5      	b.n	800731c <UART_SetConfig+0xa94>
 80071b0:	03d09000 	.word	0x03d09000
 80071b4:	003d0900 	.word	0x003d0900
 80071b8:	0800c18c 	.word	0x0800c18c
 80071bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80071c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	dc49      	bgt.n	800725c <UART_SetConfig+0x9d4>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	db7c      	blt.n	80072c6 <UART_SetConfig+0xa3e>
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	d87a      	bhi.n	80072c6 <UART_SetConfig+0xa3e>
 80071d0:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <UART_SetConfig+0x950>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	08007263 	.word	0x08007263
 80071dc:	0800726b 	.word	0x0800726b
 80071e0:	080072c7 	.word	0x080072c7
 80071e4:	080072c7 	.word	0x080072c7
 80071e8:	08007273 	.word	0x08007273
 80071ec:	080072c7 	.word	0x080072c7
 80071f0:	080072c7 	.word	0x080072c7
 80071f4:	080072c7 	.word	0x080072c7
 80071f8:	08007283 	.word	0x08007283
 80071fc:	080072c7 	.word	0x080072c7
 8007200:	080072c7 	.word	0x080072c7
 8007204:	080072c7 	.word	0x080072c7
 8007208:	080072c7 	.word	0x080072c7
 800720c:	080072c7 	.word	0x080072c7
 8007210:	080072c7 	.word	0x080072c7
 8007214:	080072c7 	.word	0x080072c7
 8007218:	08007293 	.word	0x08007293
 800721c:	080072c7 	.word	0x080072c7
 8007220:	080072c7 	.word	0x080072c7
 8007224:	080072c7 	.word	0x080072c7
 8007228:	080072c7 	.word	0x080072c7
 800722c:	080072c7 	.word	0x080072c7
 8007230:	080072c7 	.word	0x080072c7
 8007234:	080072c7 	.word	0x080072c7
 8007238:	080072c7 	.word	0x080072c7
 800723c:	080072c7 	.word	0x080072c7
 8007240:	080072c7 	.word	0x080072c7
 8007244:	080072c7 	.word	0x080072c7
 8007248:	080072c7 	.word	0x080072c7
 800724c:	080072c7 	.word	0x080072c7
 8007250:	080072c7 	.word	0x080072c7
 8007254:	080072c7 	.word	0x080072c7
 8007258:	080072b9 	.word	0x080072b9
 800725c:	2b40      	cmp	r3, #64	@ 0x40
 800725e:	d02e      	beq.n	80072be <UART_SetConfig+0xa36>
 8007260:	e031      	b.n	80072c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007262:	f7fc f887 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8007266:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007268:	e033      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800726a:	f7fc f899 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 800726e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007270:	e02f      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd fac8 	bl	800480c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007280:	e027      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007282:	f107 0318 	add.w	r3, r7, #24
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fc14 	bl	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007290:	e01f      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007292:	4b2d      	ldr	r3, [pc, #180]	@ (8007348 <UART_SetConfig+0xac0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800729e:	4b2a      	ldr	r3, [pc, #168]	@ (8007348 <UART_SetConfig+0xac0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	08db      	lsrs	r3, r3, #3
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	4a28      	ldr	r2, [pc, #160]	@ (800734c <UART_SetConfig+0xac4>)
 80072aa:	fa22 f303 	lsr.w	r3, r2, r3
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072b0:	e00f      	b.n	80072d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80072b2:	4b26      	ldr	r3, [pc, #152]	@ (800734c <UART_SetConfig+0xac4>)
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b6:	e00c      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072b8:	4b25      	ldr	r3, [pc, #148]	@ (8007350 <UART_SetConfig+0xac8>)
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072bc:	e009      	b.n	80072d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072c4:	e005      	b.n	80072d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072d0:	bf00      	nop
    }

    if (pclk != 0U)
 80072d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d021      	beq.n	800731c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007354 <UART_SetConfig+0xacc>)
 80072de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e2:	461a      	mov	r2, r3
 80072e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	085b      	lsrs	r3, r3, #1
 80072f0:	441a      	add	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fe:	2b0f      	cmp	r3, #15
 8007300:	d909      	bls.n	8007316 <UART_SetConfig+0xa8e>
 8007302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007308:	d205      	bcs.n	8007316 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800730a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730c:	b29a      	uxth	r2, r3
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	60da      	str	r2, [r3, #12]
 8007314:	e002      	b.n	800731c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2201      	movs	r2, #1
 8007320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2201      	movs	r2, #1
 8007328:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2200      	movs	r2, #0
 8007330:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007338:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800733c:	4618      	mov	r0, r3
 800733e:	3748      	adds	r7, #72	@ 0x48
 8007340:	46bd      	mov	sp, r7
 8007342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	03d09000 	.word	0x03d09000
 8007350:	003d0900 	.word	0x003d0900
 8007354:	0800c18c 	.word	0x0800c18c

08007358 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00a      	beq.n	8007382 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a8:	f003 0302 	and.w	r3, r3, #2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	430a      	orrs	r2, r1
 80073c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00a      	beq.n	80073e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ec:	f003 0310 	and.w	r3, r3, #16
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00a      	beq.n	800740a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01a      	beq.n	800746e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007456:	d10a      	bne.n	800746e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b098      	sub	sp, #96	@ 0x60
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074ac:	f7fa fbe0 	bl	8001c70 <HAL_GetTick>
 80074b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d12f      	bne.n	8007520 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c8:	2200      	movs	r2, #0
 80074ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f88e 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d022      	beq.n	8007520 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007500:	e841 2300 	strex	r3, r2, [r1]
 8007504:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007508:	2b00      	cmp	r3, #0
 800750a:	d1e6      	bne.n	80074da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2220      	movs	r2, #32
 8007510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e063      	b.n	80075e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b04      	cmp	r3, #4
 800752c:	d149      	bne.n	80075c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800752e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007536:	2200      	movs	r2, #0
 8007538:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f857 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d03c      	beq.n	80075c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	623b      	str	r3, [r7, #32]
   return(result);
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800755c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007566:	633b      	str	r3, [r7, #48]	@ 0x30
 8007568:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800756c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e6      	bne.n	8007548 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	60fb      	str	r3, [r7, #12]
   return(result);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800759a:	61fa      	str	r2, [r7, #28]
 800759c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	69b9      	ldr	r1, [r7, #24]
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	617b      	str	r3, [r7, #20]
   return(result);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e012      	b.n	80075e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3758      	adds	r7, #88	@ 0x58
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007600:	e04f      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d04b      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fa fb31 	bl	8001c70 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <UART_WaitOnFlagUntilTimeout+0x30>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e04e      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d037      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b80      	cmp	r3, #128	@ 0x80
 8007636:	d034      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2b40      	cmp	r3, #64	@ 0x40
 800763c:	d031      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b08      	cmp	r3, #8
 800764a:	d110      	bne.n	800766e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2208      	movs	r2, #8
 8007652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f839 	bl	80076cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2208      	movs	r2, #8
 800765e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e029      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800767c:	d111      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 f81f 	bl	80076cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2220      	movs	r2, #32
 8007692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e00f      	b.n	80076c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4013      	ands	r3, r2
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	bf0c      	ite	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	2300      	movne	r3, #0
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d0a0      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b095      	sub	sp, #84	@ 0x54
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	61fb      	str	r3, [r7, #28]
   return(result);
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	4b1e      	ldr	r3, [pc, #120]	@ (8007794 <UART_EndRxTransfer+0xc8>)
 800771a:	4013      	ands	r3, r2
 800771c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007726:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007728:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800773e:	2b01      	cmp	r3, #1
 8007740:	d118      	bne.n	8007774 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f023 0310 	bic.w	r3, r3, #16
 8007756:	647b      	str	r3, [r7, #68]	@ 0x44
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6979      	ldr	r1, [r7, #20]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	613b      	str	r3, [r7, #16]
   return(result);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e6      	bne.n	8007742 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007788:	bf00      	nop
 800778a:	3754      	adds	r7, #84	@ 0x54
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr
 8007794:	effffffe 	.word	0xeffffffe

08007798 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_UARTEx_DisableFifoMode+0x16>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e027      	b.n	80077fe <HAL_UARTEx_DisableFifoMode+0x66>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0201 	bic.w	r2, r2, #1
 80077d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800781e:	2302      	movs	r3, #2
 8007820:	e02d      	b.n	800787e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2224      	movs	r2, #36	@ 0x24
 800782e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f850 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b084      	sub	sp, #16
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
 800788e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800789a:	2302      	movs	r3, #2
 800789c:	e02d      	b.n	80078fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2224      	movs	r2, #36	@ 0x24
 80078aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0201 	bic.w	r2, r2, #1
 80078c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f812 	bl	8007904 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
	...

08007904 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007910:	2b00      	cmp	r3, #0
 8007912:	d108      	bne.n	8007926 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007924:	e031      	b.n	800798a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007926:	2310      	movs	r3, #16
 8007928:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800792a:	2310      	movs	r3, #16
 800792c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	0e5b      	lsrs	r3, r3, #25
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	0f5b      	lsrs	r3, r3, #29
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	7b3a      	ldrb	r2, [r7, #12]
 8007952:	4911      	ldr	r1, [pc, #68]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007954:	5c8a      	ldrb	r2, [r1, r2]
 8007956:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800795a:	7b3a      	ldrb	r2, [r7, #12]
 800795c:	490f      	ldr	r1, [pc, #60]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800795e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007960:	fb93 f3f2 	sdiv	r3, r3, r2
 8007964:	b29a      	uxth	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	7b7a      	ldrb	r2, [r7, #13]
 8007970:	4909      	ldr	r1, [pc, #36]	@ (8007998 <UARTEx_SetNbDataToProcess+0x94>)
 8007972:	5c8a      	ldrb	r2, [r1, r2]
 8007974:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007978:	7b7a      	ldrb	r2, [r7, #13]
 800797a:	4908      	ldr	r1, [pc, #32]	@ (800799c <UARTEx_SetNbDataToProcess+0x98>)
 800797c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800797e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007982:	b29a      	uxth	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	0800c1a4 	.word	0x0800c1a4
 800799c:	0800c1ac 	.word	0x0800c1ac

080079a0 <__cvt>:
 80079a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a2:	ed2d 8b02 	vpush	{d8}
 80079a6:	eeb0 8b40 	vmov.f64	d8, d0
 80079aa:	b085      	sub	sp, #20
 80079ac:	4617      	mov	r7, r2
 80079ae:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80079b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079b2:	ee18 2a90 	vmov	r2, s17
 80079b6:	f025 0520 	bic.w	r5, r5, #32
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	bfb6      	itet	lt
 80079be:	222d      	movlt	r2, #45	@ 0x2d
 80079c0:	2200      	movge	r2, #0
 80079c2:	eeb1 8b40 	vneglt.f64	d8, d0
 80079c6:	2d46      	cmp	r5, #70	@ 0x46
 80079c8:	460c      	mov	r4, r1
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	d004      	beq.n	80079d8 <__cvt+0x38>
 80079ce:	2d45      	cmp	r5, #69	@ 0x45
 80079d0:	d100      	bne.n	80079d4 <__cvt+0x34>
 80079d2:	3401      	adds	r4, #1
 80079d4:	2102      	movs	r1, #2
 80079d6:	e000      	b.n	80079da <__cvt+0x3a>
 80079d8:	2103      	movs	r1, #3
 80079da:	ab03      	add	r3, sp, #12
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	ab02      	add	r3, sp, #8
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	4622      	mov	r2, r4
 80079e4:	4633      	mov	r3, r6
 80079e6:	eeb0 0b48 	vmov.f64	d0, d8
 80079ea:	f001 f885 	bl	8008af8 <_dtoa_r>
 80079ee:	2d47      	cmp	r5, #71	@ 0x47
 80079f0:	d114      	bne.n	8007a1c <__cvt+0x7c>
 80079f2:	07fb      	lsls	r3, r7, #31
 80079f4:	d50a      	bpl.n	8007a0c <__cvt+0x6c>
 80079f6:	1902      	adds	r2, r0, r4
 80079f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80079fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a00:	bf08      	it	eq
 8007a02:	9203      	streq	r2, [sp, #12]
 8007a04:	2130      	movs	r1, #48	@ 0x30
 8007a06:	9b03      	ldr	r3, [sp, #12]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d319      	bcc.n	8007a40 <__cvt+0xa0>
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a10:	1a1b      	subs	r3, r3, r0
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	b005      	add	sp, #20
 8007a16:	ecbd 8b02 	vpop	{d8}
 8007a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1c:	2d46      	cmp	r5, #70	@ 0x46
 8007a1e:	eb00 0204 	add.w	r2, r0, r4
 8007a22:	d1e9      	bne.n	80079f8 <__cvt+0x58>
 8007a24:	7803      	ldrb	r3, [r0, #0]
 8007a26:	2b30      	cmp	r3, #48	@ 0x30
 8007a28:	d107      	bne.n	8007a3a <__cvt+0x9a>
 8007a2a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a32:	bf1c      	itt	ne
 8007a34:	f1c4 0401 	rsbne	r4, r4, #1
 8007a38:	6034      	strne	r4, [r6, #0]
 8007a3a:	6833      	ldr	r3, [r6, #0]
 8007a3c:	441a      	add	r2, r3
 8007a3e:	e7db      	b.n	80079f8 <__cvt+0x58>
 8007a40:	1c5c      	adds	r4, r3, #1
 8007a42:	9403      	str	r4, [sp, #12]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	e7de      	b.n	8007a06 <__cvt+0x66>

08007a48 <__exponent>:
 8007a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	bfba      	itte	lt
 8007a4e:	4249      	neglt	r1, r1
 8007a50:	232d      	movlt	r3, #45	@ 0x2d
 8007a52:	232b      	movge	r3, #43	@ 0x2b
 8007a54:	2909      	cmp	r1, #9
 8007a56:	7002      	strb	r2, [r0, #0]
 8007a58:	7043      	strb	r3, [r0, #1]
 8007a5a:	dd29      	ble.n	8007ab0 <__exponent+0x68>
 8007a5c:	f10d 0307 	add.w	r3, sp, #7
 8007a60:	461d      	mov	r5, r3
 8007a62:	270a      	movs	r7, #10
 8007a64:	461a      	mov	r2, r3
 8007a66:	fbb1 f6f7 	udiv	r6, r1, r7
 8007a6a:	fb07 1416 	mls	r4, r7, r6, r1
 8007a6e:	3430      	adds	r4, #48	@ 0x30
 8007a70:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007a74:	460c      	mov	r4, r1
 8007a76:	2c63      	cmp	r4, #99	@ 0x63
 8007a78:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	dcf1      	bgt.n	8007a64 <__exponent+0x1c>
 8007a80:	3130      	adds	r1, #48	@ 0x30
 8007a82:	1e94      	subs	r4, r2, #2
 8007a84:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a88:	1c41      	adds	r1, r0, #1
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	42ab      	cmp	r3, r5
 8007a8e:	d30a      	bcc.n	8007aa6 <__exponent+0x5e>
 8007a90:	f10d 0309 	add.w	r3, sp, #9
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	42ac      	cmp	r4, r5
 8007a98:	bf88      	it	hi
 8007a9a:	2300      	movhi	r3, #0
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	4403      	add	r3, r0
 8007aa0:	1a18      	subs	r0, r3, r0
 8007aa2:	b003      	add	sp, #12
 8007aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007aaa:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007aae:	e7ed      	b.n	8007a8c <__exponent+0x44>
 8007ab0:	2330      	movs	r3, #48	@ 0x30
 8007ab2:	3130      	adds	r1, #48	@ 0x30
 8007ab4:	7083      	strb	r3, [r0, #2]
 8007ab6:	70c1      	strb	r1, [r0, #3]
 8007ab8:	1d03      	adds	r3, r0, #4
 8007aba:	e7f1      	b.n	8007aa0 <__exponent+0x58>
 8007abc:	0000      	movs	r0, r0
	...

08007ac0 <_printf_float>:
 8007ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	b08d      	sub	sp, #52	@ 0x34
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007acc:	4616      	mov	r6, r2
 8007ace:	461f      	mov	r7, r3
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	f000 ff0b 	bl	80088ec <_localeconv_r>
 8007ad6:	f8d0 b000 	ldr.w	fp, [r0]
 8007ada:	4658      	mov	r0, fp
 8007adc:	f7f8 fc50 	bl	8000380 <strlen>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007aec:	6822      	ldr	r2, [r4, #0]
 8007aee:	9005      	str	r0, [sp, #20]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	f103 0108 	add.w	r1, r3, #8
 8007afa:	f8c8 1000 	str.w	r1, [r8]
 8007afe:	ed93 0b00 	vldr	d0, [r3]
 8007b02:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007d60 <_printf_float+0x2a0>
 8007b06:	eeb0 7bc0 	vabs.f64	d7, d0
 8007b0a:	eeb4 7b46 	vcmp.f64	d7, d6
 8007b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b12:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8007b16:	dd24      	ble.n	8007b62 <_printf_float+0xa2>
 8007b18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b20:	d502      	bpl.n	8007b28 <_printf_float+0x68>
 8007b22:	232d      	movs	r3, #45	@ 0x2d
 8007b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b28:	498f      	ldr	r1, [pc, #572]	@ (8007d68 <_printf_float+0x2a8>)
 8007b2a:	4b90      	ldr	r3, [pc, #576]	@ (8007d6c <_printf_float+0x2ac>)
 8007b2c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8007b30:	bf94      	ite	ls
 8007b32:	4688      	movls	r8, r1
 8007b34:	4698      	movhi	r8, r3
 8007b36:	f022 0204 	bic.w	r2, r2, #4
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	f04f 0a00 	mov.w	sl, #0
 8007b44:	9700      	str	r7, [sp, #0]
 8007b46:	4633      	mov	r3, r6
 8007b48:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 f9d1 	bl	8007ef4 <_printf_common>
 8007b52:	3001      	adds	r0, #1
 8007b54:	f040 8089 	bne.w	8007c6a <_printf_float+0x1aa>
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5c:	b00d      	add	sp, #52	@ 0x34
 8007b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b62:	eeb4 0b40 	vcmp.f64	d0, d0
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	d709      	bvc.n	8007b80 <_printf_float+0xc0>
 8007b6c:	ee10 3a90 	vmov	r3, s1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfbc      	itt	lt
 8007b74:	232d      	movlt	r3, #45	@ 0x2d
 8007b76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007b7a:	497d      	ldr	r1, [pc, #500]	@ (8007d70 <_printf_float+0x2b0>)
 8007b7c:	4b7d      	ldr	r3, [pc, #500]	@ (8007d74 <_printf_float+0x2b4>)
 8007b7e:	e7d5      	b.n	8007b2c <_printf_float+0x6c>
 8007b80:	6863      	ldr	r3, [r4, #4]
 8007b82:	1c59      	adds	r1, r3, #1
 8007b84:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007b88:	d139      	bne.n	8007bfe <_printf_float+0x13e>
 8007b8a:	2306      	movs	r3, #6
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b92:	2300      	movs	r3, #0
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	9303      	str	r3, [sp, #12]
 8007b98:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007b9e:	ab09      	add	r3, sp, #36	@ 0x24
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	6861      	ldr	r1, [r4, #4]
 8007ba4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007ba8:	4628      	mov	r0, r5
 8007baa:	f7ff fef9 	bl	80079a0 <__cvt>
 8007bae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	d129      	bne.n	8007c0c <_printf_float+0x14c>
 8007bb8:	1cc8      	adds	r0, r1, #3
 8007bba:	db02      	blt.n	8007bc2 <_printf_float+0x102>
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	4299      	cmp	r1, r3
 8007bc0:	dd41      	ble.n	8007c46 <_printf_float+0x186>
 8007bc2:	f1a9 0902 	sub.w	r9, r9, #2
 8007bc6:	fa5f f989 	uxtb.w	r9, r9
 8007bca:	3901      	subs	r1, #1
 8007bcc:	464a      	mov	r2, r9
 8007bce:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007bd2:	9109      	str	r1, [sp, #36]	@ 0x24
 8007bd4:	f7ff ff38 	bl	8007a48 <__exponent>
 8007bd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bda:	1813      	adds	r3, r2, r0
 8007bdc:	2a01      	cmp	r2, #1
 8007bde:	4682      	mov	sl, r0
 8007be0:	6123      	str	r3, [r4, #16]
 8007be2:	dc02      	bgt.n	8007bea <_printf_float+0x12a>
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	07d2      	lsls	r2, r2, #31
 8007be8:	d501      	bpl.n	8007bee <_printf_float+0x12e>
 8007bea:	3301      	adds	r3, #1
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0a6      	beq.n	8007b44 <_printf_float+0x84>
 8007bf6:	232d      	movs	r3, #45	@ 0x2d
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bfc:	e7a2      	b.n	8007b44 <_printf_float+0x84>
 8007bfe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c02:	d1c4      	bne.n	8007b8e <_printf_float+0xce>
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1c2      	bne.n	8007b8e <_printf_float+0xce>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7bf      	b.n	8007b8c <_printf_float+0xcc>
 8007c0c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007c10:	d9db      	bls.n	8007bca <_printf_float+0x10a>
 8007c12:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8007c16:	d118      	bne.n	8007c4a <_printf_float+0x18a>
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	6863      	ldr	r3, [r4, #4]
 8007c1c:	dd0b      	ble.n	8007c36 <_printf_float+0x176>
 8007c1e:	6121      	str	r1, [r4, #16]
 8007c20:	b913      	cbnz	r3, 8007c28 <_printf_float+0x168>
 8007c22:	6822      	ldr	r2, [r4, #0]
 8007c24:	07d0      	lsls	r0, r2, #31
 8007c26:	d502      	bpl.n	8007c2e <_printf_float+0x16e>
 8007c28:	3301      	adds	r3, #1
 8007c2a:	440b      	add	r3, r1
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007c30:	f04f 0a00 	mov.w	sl, #0
 8007c34:	e7db      	b.n	8007bee <_printf_float+0x12e>
 8007c36:	b913      	cbnz	r3, 8007c3e <_printf_float+0x17e>
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	07d2      	lsls	r2, r2, #31
 8007c3c:	d501      	bpl.n	8007c42 <_printf_float+0x182>
 8007c3e:	3302      	adds	r3, #2
 8007c40:	e7f4      	b.n	8007c2c <_printf_float+0x16c>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7f2      	b.n	8007c2c <_printf_float+0x16c>
 8007c46:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8007c4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	db05      	blt.n	8007c5c <_printf_float+0x19c>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	6121      	str	r1, [r4, #16]
 8007c54:	07d8      	lsls	r0, r3, #31
 8007c56:	d5ea      	bpl.n	8007c2e <_printf_float+0x16e>
 8007c58:	1c4b      	adds	r3, r1, #1
 8007c5a:	e7e7      	b.n	8007c2c <_printf_float+0x16c>
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	bfd4      	ite	le
 8007c60:	f1c1 0202 	rsble	r2, r1, #2
 8007c64:	2201      	movgt	r2, #1
 8007c66:	4413      	add	r3, r2
 8007c68:	e7e0      	b.n	8007c2c <_printf_float+0x16c>
 8007c6a:	6823      	ldr	r3, [r4, #0]
 8007c6c:	055a      	lsls	r2, r3, #21
 8007c6e:	d407      	bmi.n	8007c80 <_printf_float+0x1c0>
 8007c70:	6923      	ldr	r3, [r4, #16]
 8007c72:	4642      	mov	r2, r8
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d12a      	bne.n	8007cd4 <_printf_float+0x214>
 8007c7e:	e76b      	b.n	8007b58 <_printf_float+0x98>
 8007c80:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007c84:	f240 80e0 	bls.w	8007e48 <_printf_float+0x388>
 8007c88:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007c8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	d133      	bne.n	8007cfe <_printf_float+0x23e>
 8007c96:	4a38      	ldr	r2, [pc, #224]	@ (8007d78 <_printf_float+0x2b8>)
 8007c98:	2301      	movs	r3, #1
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	47b8      	blx	r7
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	f43f af59 	beq.w	8007b58 <_printf_float+0x98>
 8007ca6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007caa:	4543      	cmp	r3, r8
 8007cac:	db02      	blt.n	8007cb4 <_printf_float+0x1f4>
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	07d8      	lsls	r0, r3, #31
 8007cb2:	d50f      	bpl.n	8007cd4 <_printf_float+0x214>
 8007cb4:	9b05      	ldr	r3, [sp, #20]
 8007cb6:	465a      	mov	r2, fp
 8007cb8:	4631      	mov	r1, r6
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b8      	blx	r7
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	f43f af4a 	beq.w	8007b58 <_printf_float+0x98>
 8007cc4:	f04f 0900 	mov.w	r9, #0
 8007cc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ccc:	f104 0a1a 	add.w	sl, r4, #26
 8007cd0:	45c8      	cmp	r8, r9
 8007cd2:	dc09      	bgt.n	8007ce8 <_printf_float+0x228>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	079b      	lsls	r3, r3, #30
 8007cd8:	f100 8107 	bmi.w	8007eea <_printf_float+0x42a>
 8007cdc:	68e0      	ldr	r0, [r4, #12]
 8007cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ce0:	4298      	cmp	r0, r3
 8007ce2:	bfb8      	it	lt
 8007ce4:	4618      	movlt	r0, r3
 8007ce6:	e739      	b.n	8007b5c <_printf_float+0x9c>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	4652      	mov	r2, sl
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af30 	beq.w	8007b58 <_printf_float+0x98>
 8007cf8:	f109 0901 	add.w	r9, r9, #1
 8007cfc:	e7e8      	b.n	8007cd0 <_printf_float+0x210>
 8007cfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	dc3b      	bgt.n	8007d7c <_printf_float+0x2bc>
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <_printf_float+0x2b8>)
 8007d06:	2301      	movs	r3, #1
 8007d08:	4631      	mov	r1, r6
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	47b8      	blx	r7
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f43f af22 	beq.w	8007b58 <_printf_float+0x98>
 8007d14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007d18:	ea59 0303 	orrs.w	r3, r9, r3
 8007d1c:	d102      	bne.n	8007d24 <_printf_float+0x264>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	07d9      	lsls	r1, r3, #31
 8007d22:	d5d7      	bpl.n	8007cd4 <_printf_float+0x214>
 8007d24:	9b05      	ldr	r3, [sp, #20]
 8007d26:	465a      	mov	r2, fp
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	47b8      	blx	r7
 8007d2e:	3001      	adds	r0, #1
 8007d30:	f43f af12 	beq.w	8007b58 <_printf_float+0x98>
 8007d34:	f04f 0a00 	mov.w	sl, #0
 8007d38:	f104 0b1a 	add.w	fp, r4, #26
 8007d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d3e:	425b      	negs	r3, r3
 8007d40:	4553      	cmp	r3, sl
 8007d42:	dc01      	bgt.n	8007d48 <_printf_float+0x288>
 8007d44:	464b      	mov	r3, r9
 8007d46:	e794      	b.n	8007c72 <_printf_float+0x1b2>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	465a      	mov	r2, fp
 8007d4c:	4631      	mov	r1, r6
 8007d4e:	4628      	mov	r0, r5
 8007d50:	47b8      	blx	r7
 8007d52:	3001      	adds	r0, #1
 8007d54:	f43f af00 	beq.w	8007b58 <_printf_float+0x98>
 8007d58:	f10a 0a01 	add.w	sl, sl, #1
 8007d5c:	e7ee      	b.n	8007d3c <_printf_float+0x27c>
 8007d5e:	bf00      	nop
 8007d60:	ffffffff 	.word	0xffffffff
 8007d64:	7fefffff 	.word	0x7fefffff
 8007d68:	0800c1b4 	.word	0x0800c1b4
 8007d6c:	0800c1b8 	.word	0x0800c1b8
 8007d70:	0800c1bc 	.word	0x0800c1bc
 8007d74:	0800c1c0 	.word	0x0800c1c0
 8007d78:	0800c1c4 	.word	0x0800c1c4
 8007d7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d82:	4553      	cmp	r3, sl
 8007d84:	bfa8      	it	ge
 8007d86:	4653      	movge	r3, sl
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	4699      	mov	r9, r3
 8007d8c:	dc37      	bgt.n	8007dfe <_printf_float+0x33e>
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d96:	f104 021a 	add.w	r2, r4, #26
 8007d9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d9c:	9907      	ldr	r1, [sp, #28]
 8007d9e:	9306      	str	r3, [sp, #24]
 8007da0:	eba3 0309 	sub.w	r3, r3, r9
 8007da4:	428b      	cmp	r3, r1
 8007da6:	dc31      	bgt.n	8007e0c <_printf_float+0x34c>
 8007da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007daa:	459a      	cmp	sl, r3
 8007dac:	dc3b      	bgt.n	8007e26 <_printf_float+0x366>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	07da      	lsls	r2, r3, #31
 8007db2:	d438      	bmi.n	8007e26 <_printf_float+0x366>
 8007db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db6:	ebaa 0903 	sub.w	r9, sl, r3
 8007dba:	9b06      	ldr	r3, [sp, #24]
 8007dbc:	ebaa 0303 	sub.w	r3, sl, r3
 8007dc0:	4599      	cmp	r9, r3
 8007dc2:	bfa8      	it	ge
 8007dc4:	4699      	movge	r9, r3
 8007dc6:	f1b9 0f00 	cmp.w	r9, #0
 8007dca:	dc34      	bgt.n	8007e36 <_printf_float+0x376>
 8007dcc:	f04f 0800 	mov.w	r8, #0
 8007dd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dd4:	f104 0b1a 	add.w	fp, r4, #26
 8007dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dda:	ebaa 0303 	sub.w	r3, sl, r3
 8007dde:	eba3 0309 	sub.w	r3, r3, r9
 8007de2:	4543      	cmp	r3, r8
 8007de4:	f77f af76 	ble.w	8007cd4 <_printf_float+0x214>
 8007de8:	2301      	movs	r3, #1
 8007dea:	465a      	mov	r2, fp
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	47b8      	blx	r7
 8007df2:	3001      	adds	r0, #1
 8007df4:	f43f aeb0 	beq.w	8007b58 <_printf_float+0x98>
 8007df8:	f108 0801 	add.w	r8, r8, #1
 8007dfc:	e7ec      	b.n	8007dd8 <_printf_float+0x318>
 8007dfe:	4642      	mov	r2, r8
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	d1c1      	bne.n	8007d8e <_printf_float+0x2ce>
 8007e0a:	e6a5      	b.n	8007b58 <_printf_float+0x98>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	9206      	str	r2, [sp, #24]
 8007e14:	47b8      	blx	r7
 8007e16:	3001      	adds	r0, #1
 8007e18:	f43f ae9e 	beq.w	8007b58 <_printf_float+0x98>
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	9a06      	ldr	r2, [sp, #24]
 8007e20:	3301      	adds	r3, #1
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	e7b9      	b.n	8007d9a <_printf_float+0x2da>
 8007e26:	9b05      	ldr	r3, [sp, #20]
 8007e28:	465a      	mov	r2, fp
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	47b8      	blx	r7
 8007e30:	3001      	adds	r0, #1
 8007e32:	d1bf      	bne.n	8007db4 <_printf_float+0x2f4>
 8007e34:	e690      	b.n	8007b58 <_printf_float+0x98>
 8007e36:	9a06      	ldr	r2, [sp, #24]
 8007e38:	464b      	mov	r3, r9
 8007e3a:	4442      	add	r2, r8
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	4628      	mov	r0, r5
 8007e40:	47b8      	blx	r7
 8007e42:	3001      	adds	r0, #1
 8007e44:	d1c2      	bne.n	8007dcc <_printf_float+0x30c>
 8007e46:	e687      	b.n	8007b58 <_printf_float+0x98>
 8007e48:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007e4c:	f1b9 0f01 	cmp.w	r9, #1
 8007e50:	dc01      	bgt.n	8007e56 <_printf_float+0x396>
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d536      	bpl.n	8007ec4 <_printf_float+0x404>
 8007e56:	2301      	movs	r3, #1
 8007e58:	4642      	mov	r2, r8
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	f43f ae79 	beq.w	8007b58 <_printf_float+0x98>
 8007e66:	9b05      	ldr	r3, [sp, #20]
 8007e68:	465a      	mov	r2, fp
 8007e6a:	4631      	mov	r1, r6
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	47b8      	blx	r7
 8007e70:	3001      	adds	r0, #1
 8007e72:	f43f ae71 	beq.w	8007b58 <_printf_float+0x98>
 8007e76:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007e7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e82:	f109 39ff 	add.w	r9, r9, #4294967295
 8007e86:	d018      	beq.n	8007eba <_printf_float+0x3fa>
 8007e88:	464b      	mov	r3, r9
 8007e8a:	f108 0201 	add.w	r2, r8, #1
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d10c      	bne.n	8007eb2 <_printf_float+0x3f2>
 8007e98:	e65e      	b.n	8007b58 <_printf_float+0x98>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	465a      	mov	r2, fp
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	47b8      	blx	r7
 8007ea4:	3001      	adds	r0, #1
 8007ea6:	f43f ae57 	beq.w	8007b58 <_printf_float+0x98>
 8007eaa:	f108 0801 	add.w	r8, r8, #1
 8007eae:	45c8      	cmp	r8, r9
 8007eb0:	dbf3      	blt.n	8007e9a <_printf_float+0x3da>
 8007eb2:	4653      	mov	r3, sl
 8007eb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007eb8:	e6dc      	b.n	8007c74 <_printf_float+0x1b4>
 8007eba:	f04f 0800 	mov.w	r8, #0
 8007ebe:	f104 0b1a 	add.w	fp, r4, #26
 8007ec2:	e7f4      	b.n	8007eae <_printf_float+0x3ee>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4642      	mov	r2, r8
 8007ec8:	e7e1      	b.n	8007e8e <_printf_float+0x3ce>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	464a      	mov	r2, r9
 8007ece:	4631      	mov	r1, r6
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	47b8      	blx	r7
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	f43f ae3f 	beq.w	8007b58 <_printf_float+0x98>
 8007eda:	f108 0801 	add.w	r8, r8, #1
 8007ede:	68e3      	ldr	r3, [r4, #12]
 8007ee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ee2:	1a5b      	subs	r3, r3, r1
 8007ee4:	4543      	cmp	r3, r8
 8007ee6:	dcf0      	bgt.n	8007eca <_printf_float+0x40a>
 8007ee8:	e6f8      	b.n	8007cdc <_printf_float+0x21c>
 8007eea:	f04f 0800 	mov.w	r8, #0
 8007eee:	f104 0919 	add.w	r9, r4, #25
 8007ef2:	e7f4      	b.n	8007ede <_printf_float+0x41e>

08007ef4 <_printf_common>:
 8007ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	4616      	mov	r6, r2
 8007efa:	4698      	mov	r8, r3
 8007efc:	688a      	ldr	r2, [r1, #8]
 8007efe:	690b      	ldr	r3, [r1, #16]
 8007f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f04:	4293      	cmp	r3, r2
 8007f06:	bfb8      	it	lt
 8007f08:	4613      	movlt	r3, r2
 8007f0a:	6033      	str	r3, [r6, #0]
 8007f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f10:	4607      	mov	r7, r0
 8007f12:	460c      	mov	r4, r1
 8007f14:	b10a      	cbz	r2, 8007f1a <_printf_common+0x26>
 8007f16:	3301      	adds	r3, #1
 8007f18:	6033      	str	r3, [r6, #0]
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	0699      	lsls	r1, r3, #26
 8007f1e:	bf42      	ittt	mi
 8007f20:	6833      	ldrmi	r3, [r6, #0]
 8007f22:	3302      	addmi	r3, #2
 8007f24:	6033      	strmi	r3, [r6, #0]
 8007f26:	6825      	ldr	r5, [r4, #0]
 8007f28:	f015 0506 	ands.w	r5, r5, #6
 8007f2c:	d106      	bne.n	8007f3c <_printf_common+0x48>
 8007f2e:	f104 0a19 	add.w	sl, r4, #25
 8007f32:	68e3      	ldr	r3, [r4, #12]
 8007f34:	6832      	ldr	r2, [r6, #0]
 8007f36:	1a9b      	subs	r3, r3, r2
 8007f38:	42ab      	cmp	r3, r5
 8007f3a:	dc26      	bgt.n	8007f8a <_printf_common+0x96>
 8007f3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	3b00      	subs	r3, #0
 8007f44:	bf18      	it	ne
 8007f46:	2301      	movne	r3, #1
 8007f48:	0692      	lsls	r2, r2, #26
 8007f4a:	d42b      	bmi.n	8007fa4 <_printf_common+0xb0>
 8007f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f50:	4641      	mov	r1, r8
 8007f52:	4638      	mov	r0, r7
 8007f54:	47c8      	blx	r9
 8007f56:	3001      	adds	r0, #1
 8007f58:	d01e      	beq.n	8007f98 <_printf_common+0xa4>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	f003 0306 	and.w	r3, r3, #6
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	bf02      	ittt	eq
 8007f66:	68e5      	ldreq	r5, [r4, #12]
 8007f68:	6833      	ldreq	r3, [r6, #0]
 8007f6a:	1aed      	subeq	r5, r5, r3
 8007f6c:	68a3      	ldr	r3, [r4, #8]
 8007f6e:	bf0c      	ite	eq
 8007f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f74:	2500      	movne	r5, #0
 8007f76:	4293      	cmp	r3, r2
 8007f78:	bfc4      	itt	gt
 8007f7a:	1a9b      	subgt	r3, r3, r2
 8007f7c:	18ed      	addgt	r5, r5, r3
 8007f7e:	2600      	movs	r6, #0
 8007f80:	341a      	adds	r4, #26
 8007f82:	42b5      	cmp	r5, r6
 8007f84:	d11a      	bne.n	8007fbc <_printf_common+0xc8>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e008      	b.n	8007f9c <_printf_common+0xa8>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	4641      	mov	r1, r8
 8007f90:	4638      	mov	r0, r7
 8007f92:	47c8      	blx	r9
 8007f94:	3001      	adds	r0, #1
 8007f96:	d103      	bne.n	8007fa0 <_printf_common+0xac>
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	e7c6      	b.n	8007f32 <_printf_common+0x3e>
 8007fa4:	18e1      	adds	r1, r4, r3
 8007fa6:	1c5a      	adds	r2, r3, #1
 8007fa8:	2030      	movs	r0, #48	@ 0x30
 8007faa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007fae:	4422      	add	r2, r4
 8007fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007fb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007fb8:	3302      	adds	r3, #2
 8007fba:	e7c7      	b.n	8007f4c <_printf_common+0x58>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4622      	mov	r2, r4
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	47c8      	blx	r9
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d0e6      	beq.n	8007f98 <_printf_common+0xa4>
 8007fca:	3601      	adds	r6, #1
 8007fcc:	e7d9      	b.n	8007f82 <_printf_common+0x8e>
	...

08007fd0 <_printf_i>:
 8007fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	7e0f      	ldrb	r7, [r1, #24]
 8007fd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007fd8:	2f78      	cmp	r7, #120	@ 0x78
 8007fda:	4691      	mov	r9, r2
 8007fdc:	4680      	mov	r8, r0
 8007fde:	460c      	mov	r4, r1
 8007fe0:	469a      	mov	sl, r3
 8007fe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007fe6:	d807      	bhi.n	8007ff8 <_printf_i+0x28>
 8007fe8:	2f62      	cmp	r7, #98	@ 0x62
 8007fea:	d80a      	bhi.n	8008002 <_printf_i+0x32>
 8007fec:	2f00      	cmp	r7, #0
 8007fee:	f000 80d2 	beq.w	8008196 <_printf_i+0x1c6>
 8007ff2:	2f58      	cmp	r7, #88	@ 0x58
 8007ff4:	f000 80b9 	beq.w	800816a <_printf_i+0x19a>
 8007ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ffc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008000:	e03a      	b.n	8008078 <_printf_i+0xa8>
 8008002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008006:	2b15      	cmp	r3, #21
 8008008:	d8f6      	bhi.n	8007ff8 <_printf_i+0x28>
 800800a:	a101      	add	r1, pc, #4	@ (adr r1, 8008010 <_printf_i+0x40>)
 800800c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008010:	08008069 	.word	0x08008069
 8008014:	0800807d 	.word	0x0800807d
 8008018:	08007ff9 	.word	0x08007ff9
 800801c:	08007ff9 	.word	0x08007ff9
 8008020:	08007ff9 	.word	0x08007ff9
 8008024:	08007ff9 	.word	0x08007ff9
 8008028:	0800807d 	.word	0x0800807d
 800802c:	08007ff9 	.word	0x08007ff9
 8008030:	08007ff9 	.word	0x08007ff9
 8008034:	08007ff9 	.word	0x08007ff9
 8008038:	08007ff9 	.word	0x08007ff9
 800803c:	0800817d 	.word	0x0800817d
 8008040:	080080a7 	.word	0x080080a7
 8008044:	08008137 	.word	0x08008137
 8008048:	08007ff9 	.word	0x08007ff9
 800804c:	08007ff9 	.word	0x08007ff9
 8008050:	0800819f 	.word	0x0800819f
 8008054:	08007ff9 	.word	0x08007ff9
 8008058:	080080a7 	.word	0x080080a7
 800805c:	08007ff9 	.word	0x08007ff9
 8008060:	08007ff9 	.word	0x08007ff9
 8008064:	0800813f 	.word	0x0800813f
 8008068:	6833      	ldr	r3, [r6, #0]
 800806a:	1d1a      	adds	r2, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6032      	str	r2, [r6, #0]
 8008070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008078:	2301      	movs	r3, #1
 800807a:	e09d      	b.n	80081b8 <_printf_i+0x1e8>
 800807c:	6833      	ldr	r3, [r6, #0]
 800807e:	6820      	ldr	r0, [r4, #0]
 8008080:	1d19      	adds	r1, r3, #4
 8008082:	6031      	str	r1, [r6, #0]
 8008084:	0606      	lsls	r6, r0, #24
 8008086:	d501      	bpl.n	800808c <_printf_i+0xbc>
 8008088:	681d      	ldr	r5, [r3, #0]
 800808a:	e003      	b.n	8008094 <_printf_i+0xc4>
 800808c:	0645      	lsls	r5, r0, #25
 800808e:	d5fb      	bpl.n	8008088 <_printf_i+0xb8>
 8008090:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008094:	2d00      	cmp	r5, #0
 8008096:	da03      	bge.n	80080a0 <_printf_i+0xd0>
 8008098:	232d      	movs	r3, #45	@ 0x2d
 800809a:	426d      	negs	r5, r5
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a0:	4859      	ldr	r0, [pc, #356]	@ (8008208 <_printf_i+0x238>)
 80080a2:	230a      	movs	r3, #10
 80080a4:	e011      	b.n	80080ca <_printf_i+0xfa>
 80080a6:	6821      	ldr	r1, [r4, #0]
 80080a8:	6833      	ldr	r3, [r6, #0]
 80080aa:	0608      	lsls	r0, r1, #24
 80080ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80080b0:	d402      	bmi.n	80080b8 <_printf_i+0xe8>
 80080b2:	0649      	lsls	r1, r1, #25
 80080b4:	bf48      	it	mi
 80080b6:	b2ad      	uxthmi	r5, r5
 80080b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80080ba:	4853      	ldr	r0, [pc, #332]	@ (8008208 <_printf_i+0x238>)
 80080bc:	6033      	str	r3, [r6, #0]
 80080be:	bf14      	ite	ne
 80080c0:	230a      	movne	r3, #10
 80080c2:	2308      	moveq	r3, #8
 80080c4:	2100      	movs	r1, #0
 80080c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80080ca:	6866      	ldr	r6, [r4, #4]
 80080cc:	60a6      	str	r6, [r4, #8]
 80080ce:	2e00      	cmp	r6, #0
 80080d0:	bfa2      	ittt	ge
 80080d2:	6821      	ldrge	r1, [r4, #0]
 80080d4:	f021 0104 	bicge.w	r1, r1, #4
 80080d8:	6021      	strge	r1, [r4, #0]
 80080da:	b90d      	cbnz	r5, 80080e0 <_printf_i+0x110>
 80080dc:	2e00      	cmp	r6, #0
 80080de:	d04b      	beq.n	8008178 <_printf_i+0x1a8>
 80080e0:	4616      	mov	r6, r2
 80080e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80080e6:	fb03 5711 	mls	r7, r3, r1, r5
 80080ea:	5dc7      	ldrb	r7, [r0, r7]
 80080ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080f0:	462f      	mov	r7, r5
 80080f2:	42bb      	cmp	r3, r7
 80080f4:	460d      	mov	r5, r1
 80080f6:	d9f4      	bls.n	80080e2 <_printf_i+0x112>
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d10b      	bne.n	8008114 <_printf_i+0x144>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	07df      	lsls	r7, r3, #31
 8008100:	d508      	bpl.n	8008114 <_printf_i+0x144>
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	6861      	ldr	r1, [r4, #4]
 8008106:	4299      	cmp	r1, r3
 8008108:	bfde      	ittt	le
 800810a:	2330      	movle	r3, #48	@ 0x30
 800810c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008110:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008114:	1b92      	subs	r2, r2, r6
 8008116:	6122      	str	r2, [r4, #16]
 8008118:	f8cd a000 	str.w	sl, [sp]
 800811c:	464b      	mov	r3, r9
 800811e:	aa03      	add	r2, sp, #12
 8008120:	4621      	mov	r1, r4
 8008122:	4640      	mov	r0, r8
 8008124:	f7ff fee6 	bl	8007ef4 <_printf_common>
 8008128:	3001      	adds	r0, #1
 800812a:	d14a      	bne.n	80081c2 <_printf_i+0x1f2>
 800812c:	f04f 30ff 	mov.w	r0, #4294967295
 8008130:	b004      	add	sp, #16
 8008132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f043 0320 	orr.w	r3, r3, #32
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	4833      	ldr	r0, [pc, #204]	@ (800820c <_printf_i+0x23c>)
 8008140:	2778      	movs	r7, #120	@ 0x78
 8008142:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	6831      	ldr	r1, [r6, #0]
 800814a:	061f      	lsls	r7, r3, #24
 800814c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008150:	d402      	bmi.n	8008158 <_printf_i+0x188>
 8008152:	065f      	lsls	r7, r3, #25
 8008154:	bf48      	it	mi
 8008156:	b2ad      	uxthmi	r5, r5
 8008158:	6031      	str	r1, [r6, #0]
 800815a:	07d9      	lsls	r1, r3, #31
 800815c:	bf44      	itt	mi
 800815e:	f043 0320 	orrmi.w	r3, r3, #32
 8008162:	6023      	strmi	r3, [r4, #0]
 8008164:	b11d      	cbz	r5, 800816e <_printf_i+0x19e>
 8008166:	2310      	movs	r3, #16
 8008168:	e7ac      	b.n	80080c4 <_printf_i+0xf4>
 800816a:	4827      	ldr	r0, [pc, #156]	@ (8008208 <_printf_i+0x238>)
 800816c:	e7e9      	b.n	8008142 <_printf_i+0x172>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	f023 0320 	bic.w	r3, r3, #32
 8008174:	6023      	str	r3, [r4, #0]
 8008176:	e7f6      	b.n	8008166 <_printf_i+0x196>
 8008178:	4616      	mov	r6, r2
 800817a:	e7bd      	b.n	80080f8 <_printf_i+0x128>
 800817c:	6833      	ldr	r3, [r6, #0]
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	6961      	ldr	r1, [r4, #20]
 8008182:	1d18      	adds	r0, r3, #4
 8008184:	6030      	str	r0, [r6, #0]
 8008186:	062e      	lsls	r6, r5, #24
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	d501      	bpl.n	8008190 <_printf_i+0x1c0>
 800818c:	6019      	str	r1, [r3, #0]
 800818e:	e002      	b.n	8008196 <_printf_i+0x1c6>
 8008190:	0668      	lsls	r0, r5, #25
 8008192:	d5fb      	bpl.n	800818c <_printf_i+0x1bc>
 8008194:	8019      	strh	r1, [r3, #0]
 8008196:	2300      	movs	r3, #0
 8008198:	6123      	str	r3, [r4, #16]
 800819a:	4616      	mov	r6, r2
 800819c:	e7bc      	b.n	8008118 <_printf_i+0x148>
 800819e:	6833      	ldr	r3, [r6, #0]
 80081a0:	1d1a      	adds	r2, r3, #4
 80081a2:	6032      	str	r2, [r6, #0]
 80081a4:	681e      	ldr	r6, [r3, #0]
 80081a6:	6862      	ldr	r2, [r4, #4]
 80081a8:	2100      	movs	r1, #0
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7f8 f898 	bl	80002e0 <memchr>
 80081b0:	b108      	cbz	r0, 80081b6 <_printf_i+0x1e6>
 80081b2:	1b80      	subs	r0, r0, r6
 80081b4:	6060      	str	r0, [r4, #4]
 80081b6:	6863      	ldr	r3, [r4, #4]
 80081b8:	6123      	str	r3, [r4, #16]
 80081ba:	2300      	movs	r3, #0
 80081bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c0:	e7aa      	b.n	8008118 <_printf_i+0x148>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	4632      	mov	r2, r6
 80081c6:	4649      	mov	r1, r9
 80081c8:	4640      	mov	r0, r8
 80081ca:	47d0      	blx	sl
 80081cc:	3001      	adds	r0, #1
 80081ce:	d0ad      	beq.n	800812c <_printf_i+0x15c>
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	079b      	lsls	r3, r3, #30
 80081d4:	d413      	bmi.n	80081fe <_printf_i+0x22e>
 80081d6:	68e0      	ldr	r0, [r4, #12]
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	4298      	cmp	r0, r3
 80081dc:	bfb8      	it	lt
 80081de:	4618      	movlt	r0, r3
 80081e0:	e7a6      	b.n	8008130 <_printf_i+0x160>
 80081e2:	2301      	movs	r3, #1
 80081e4:	4632      	mov	r2, r6
 80081e6:	4649      	mov	r1, r9
 80081e8:	4640      	mov	r0, r8
 80081ea:	47d0      	blx	sl
 80081ec:	3001      	adds	r0, #1
 80081ee:	d09d      	beq.n	800812c <_printf_i+0x15c>
 80081f0:	3501      	adds	r5, #1
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	9903      	ldr	r1, [sp, #12]
 80081f6:	1a5b      	subs	r3, r3, r1
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	dcf2      	bgt.n	80081e2 <_printf_i+0x212>
 80081fc:	e7eb      	b.n	80081d6 <_printf_i+0x206>
 80081fe:	2500      	movs	r5, #0
 8008200:	f104 0619 	add.w	r6, r4, #25
 8008204:	e7f5      	b.n	80081f2 <_printf_i+0x222>
 8008206:	bf00      	nop
 8008208:	0800c1c6 	.word	0x0800c1c6
 800820c:	0800c1d7 	.word	0x0800c1d7

08008210 <_scanf_float>:
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	b087      	sub	sp, #28
 8008216:	4617      	mov	r7, r2
 8008218:	9303      	str	r3, [sp, #12]
 800821a:	688b      	ldr	r3, [r1, #8]
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008222:	bf81      	itttt	hi
 8008224:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008228:	eb03 0b05 	addhi.w	fp, r3, r5
 800822c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008230:	608b      	strhi	r3, [r1, #8]
 8008232:	680b      	ldr	r3, [r1, #0]
 8008234:	460a      	mov	r2, r1
 8008236:	f04f 0500 	mov.w	r5, #0
 800823a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800823e:	f842 3b1c 	str.w	r3, [r2], #28
 8008242:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008246:	4680      	mov	r8, r0
 8008248:	460c      	mov	r4, r1
 800824a:	bf98      	it	ls
 800824c:	f04f 0b00 	movls.w	fp, #0
 8008250:	9201      	str	r2, [sp, #4]
 8008252:	4616      	mov	r6, r2
 8008254:	46aa      	mov	sl, r5
 8008256:	46a9      	mov	r9, r5
 8008258:	9502      	str	r5, [sp, #8]
 800825a:	68a2      	ldr	r2, [r4, #8]
 800825c:	b152      	cbz	r2, 8008274 <_scanf_float+0x64>
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b4e      	cmp	r3, #78	@ 0x4e
 8008264:	d864      	bhi.n	8008330 <_scanf_float+0x120>
 8008266:	2b40      	cmp	r3, #64	@ 0x40
 8008268:	d83c      	bhi.n	80082e4 <_scanf_float+0xd4>
 800826a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800826e:	b2c8      	uxtb	r0, r1
 8008270:	280e      	cmp	r0, #14
 8008272:	d93a      	bls.n	80082ea <_scanf_float+0xda>
 8008274:	f1b9 0f00 	cmp.w	r9, #0
 8008278:	d003      	beq.n	8008282 <_scanf_float+0x72>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008286:	f1ba 0f01 	cmp.w	sl, #1
 800828a:	f200 8117 	bhi.w	80084bc <_scanf_float+0x2ac>
 800828e:	9b01      	ldr	r3, [sp, #4]
 8008290:	429e      	cmp	r6, r3
 8008292:	f200 8108 	bhi.w	80084a6 <_scanf_float+0x296>
 8008296:	2001      	movs	r0, #1
 8008298:	b007      	add	sp, #28
 800829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80082a2:	2a0d      	cmp	r2, #13
 80082a4:	d8e6      	bhi.n	8008274 <_scanf_float+0x64>
 80082a6:	a101      	add	r1, pc, #4	@ (adr r1, 80082ac <_scanf_float+0x9c>)
 80082a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80082ac:	080083f3 	.word	0x080083f3
 80082b0:	08008275 	.word	0x08008275
 80082b4:	08008275 	.word	0x08008275
 80082b8:	08008275 	.word	0x08008275
 80082bc:	08008453 	.word	0x08008453
 80082c0:	0800842b 	.word	0x0800842b
 80082c4:	08008275 	.word	0x08008275
 80082c8:	08008275 	.word	0x08008275
 80082cc:	08008401 	.word	0x08008401
 80082d0:	08008275 	.word	0x08008275
 80082d4:	08008275 	.word	0x08008275
 80082d8:	08008275 	.word	0x08008275
 80082dc:	08008275 	.word	0x08008275
 80082e0:	080083b9 	.word	0x080083b9
 80082e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80082e8:	e7db      	b.n	80082a2 <_scanf_float+0x92>
 80082ea:	290e      	cmp	r1, #14
 80082ec:	d8c2      	bhi.n	8008274 <_scanf_float+0x64>
 80082ee:	a001      	add	r0, pc, #4	@ (adr r0, 80082f4 <_scanf_float+0xe4>)
 80082f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80082f4:	080083a9 	.word	0x080083a9
 80082f8:	08008275 	.word	0x08008275
 80082fc:	080083a9 	.word	0x080083a9
 8008300:	0800843f 	.word	0x0800843f
 8008304:	08008275 	.word	0x08008275
 8008308:	08008351 	.word	0x08008351
 800830c:	0800838f 	.word	0x0800838f
 8008310:	0800838f 	.word	0x0800838f
 8008314:	0800838f 	.word	0x0800838f
 8008318:	0800838f 	.word	0x0800838f
 800831c:	0800838f 	.word	0x0800838f
 8008320:	0800838f 	.word	0x0800838f
 8008324:	0800838f 	.word	0x0800838f
 8008328:	0800838f 	.word	0x0800838f
 800832c:	0800838f 	.word	0x0800838f
 8008330:	2b6e      	cmp	r3, #110	@ 0x6e
 8008332:	d809      	bhi.n	8008348 <_scanf_float+0x138>
 8008334:	2b60      	cmp	r3, #96	@ 0x60
 8008336:	d8b2      	bhi.n	800829e <_scanf_float+0x8e>
 8008338:	2b54      	cmp	r3, #84	@ 0x54
 800833a:	d07b      	beq.n	8008434 <_scanf_float+0x224>
 800833c:	2b59      	cmp	r3, #89	@ 0x59
 800833e:	d199      	bne.n	8008274 <_scanf_float+0x64>
 8008340:	2d07      	cmp	r5, #7
 8008342:	d197      	bne.n	8008274 <_scanf_float+0x64>
 8008344:	2508      	movs	r5, #8
 8008346:	e02c      	b.n	80083a2 <_scanf_float+0x192>
 8008348:	2b74      	cmp	r3, #116	@ 0x74
 800834a:	d073      	beq.n	8008434 <_scanf_float+0x224>
 800834c:	2b79      	cmp	r3, #121	@ 0x79
 800834e:	e7f6      	b.n	800833e <_scanf_float+0x12e>
 8008350:	6821      	ldr	r1, [r4, #0]
 8008352:	05c8      	lsls	r0, r1, #23
 8008354:	d51b      	bpl.n	800838e <_scanf_float+0x17e>
 8008356:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800835a:	6021      	str	r1, [r4, #0]
 800835c:	f109 0901 	add.w	r9, r9, #1
 8008360:	f1bb 0f00 	cmp.w	fp, #0
 8008364:	d003      	beq.n	800836e <_scanf_float+0x15e>
 8008366:	3201      	adds	r2, #1
 8008368:	f10b 3bff 	add.w	fp, fp, #4294967295
 800836c:	60a2      	str	r2, [r4, #8]
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	3b01      	subs	r3, #1
 8008372:	60a3      	str	r3, [r4, #8]
 8008374:	6923      	ldr	r3, [r4, #16]
 8008376:	3301      	adds	r3, #1
 8008378:	6123      	str	r3, [r4, #16]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3b01      	subs	r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
 8008382:	f340 8087 	ble.w	8008494 <_scanf_float+0x284>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	603b      	str	r3, [r7, #0]
 800838c:	e765      	b.n	800825a <_scanf_float+0x4a>
 800838e:	eb1a 0105 	adds.w	r1, sl, r5
 8008392:	f47f af6f 	bne.w	8008274 <_scanf_float+0x64>
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	460d      	mov	r5, r1
 80083a0:	468a      	mov	sl, r1
 80083a2:	f806 3b01 	strb.w	r3, [r6], #1
 80083a6:	e7e2      	b.n	800836e <_scanf_float+0x15e>
 80083a8:	6822      	ldr	r2, [r4, #0]
 80083aa:	0610      	lsls	r0, r2, #24
 80083ac:	f57f af62 	bpl.w	8008274 <_scanf_float+0x64>
 80083b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	e7f4      	b.n	80083a2 <_scanf_float+0x192>
 80083b8:	f1ba 0f00 	cmp.w	sl, #0
 80083bc:	d10e      	bne.n	80083dc <_scanf_float+0x1cc>
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	d10e      	bne.n	80083e2 <_scanf_float+0x1d2>
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80083ca:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80083ce:	d108      	bne.n	80083e2 <_scanf_float+0x1d2>
 80083d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083d4:	6022      	str	r2, [r4, #0]
 80083d6:	f04f 0a01 	mov.w	sl, #1
 80083da:	e7e2      	b.n	80083a2 <_scanf_float+0x192>
 80083dc:	f1ba 0f02 	cmp.w	sl, #2
 80083e0:	d055      	beq.n	800848e <_scanf_float+0x27e>
 80083e2:	2d01      	cmp	r5, #1
 80083e4:	d002      	beq.n	80083ec <_scanf_float+0x1dc>
 80083e6:	2d04      	cmp	r5, #4
 80083e8:	f47f af44 	bne.w	8008274 <_scanf_float+0x64>
 80083ec:	3501      	adds	r5, #1
 80083ee:	b2ed      	uxtb	r5, r5
 80083f0:	e7d7      	b.n	80083a2 <_scanf_float+0x192>
 80083f2:	f1ba 0f01 	cmp.w	sl, #1
 80083f6:	f47f af3d 	bne.w	8008274 <_scanf_float+0x64>
 80083fa:	f04f 0a02 	mov.w	sl, #2
 80083fe:	e7d0      	b.n	80083a2 <_scanf_float+0x192>
 8008400:	b97d      	cbnz	r5, 8008422 <_scanf_float+0x212>
 8008402:	f1b9 0f00 	cmp.w	r9, #0
 8008406:	f47f af38 	bne.w	800827a <_scanf_float+0x6a>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008410:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008414:	f040 8101 	bne.w	800861a <_scanf_float+0x40a>
 8008418:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800841c:	6022      	str	r2, [r4, #0]
 800841e:	2501      	movs	r5, #1
 8008420:	e7bf      	b.n	80083a2 <_scanf_float+0x192>
 8008422:	2d03      	cmp	r5, #3
 8008424:	d0e2      	beq.n	80083ec <_scanf_float+0x1dc>
 8008426:	2d05      	cmp	r5, #5
 8008428:	e7de      	b.n	80083e8 <_scanf_float+0x1d8>
 800842a:	2d02      	cmp	r5, #2
 800842c:	f47f af22 	bne.w	8008274 <_scanf_float+0x64>
 8008430:	2503      	movs	r5, #3
 8008432:	e7b6      	b.n	80083a2 <_scanf_float+0x192>
 8008434:	2d06      	cmp	r5, #6
 8008436:	f47f af1d 	bne.w	8008274 <_scanf_float+0x64>
 800843a:	2507      	movs	r5, #7
 800843c:	e7b1      	b.n	80083a2 <_scanf_float+0x192>
 800843e:	6822      	ldr	r2, [r4, #0]
 8008440:	0591      	lsls	r1, r2, #22
 8008442:	f57f af17 	bpl.w	8008274 <_scanf_float+0x64>
 8008446:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800844a:	6022      	str	r2, [r4, #0]
 800844c:	f8cd 9008 	str.w	r9, [sp, #8]
 8008450:	e7a7      	b.n	80083a2 <_scanf_float+0x192>
 8008452:	6822      	ldr	r2, [r4, #0]
 8008454:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008458:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800845c:	d006      	beq.n	800846c <_scanf_float+0x25c>
 800845e:	0550      	lsls	r0, r2, #21
 8008460:	f57f af08 	bpl.w	8008274 <_scanf_float+0x64>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	f000 80d7 	beq.w	800861a <_scanf_float+0x40a>
 800846c:	0591      	lsls	r1, r2, #22
 800846e:	bf58      	it	pl
 8008470:	9902      	ldrpl	r1, [sp, #8]
 8008472:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008476:	bf58      	it	pl
 8008478:	eba9 0101 	subpl.w	r1, r9, r1
 800847c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008480:	bf58      	it	pl
 8008482:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	f04f 0900 	mov.w	r9, #0
 800848c:	e789      	b.n	80083a2 <_scanf_float+0x192>
 800848e:	f04f 0a03 	mov.w	sl, #3
 8008492:	e786      	b.n	80083a2 <_scanf_float+0x192>
 8008494:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008498:	4639      	mov	r1, r7
 800849a:	4640      	mov	r0, r8
 800849c:	4798      	blx	r3
 800849e:	2800      	cmp	r0, #0
 80084a0:	f43f aedb 	beq.w	800825a <_scanf_float+0x4a>
 80084a4:	e6e6      	b.n	8008274 <_scanf_float+0x64>
 80084a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084ae:	463a      	mov	r2, r7
 80084b0:	4640      	mov	r0, r8
 80084b2:	4798      	blx	r3
 80084b4:	6923      	ldr	r3, [r4, #16]
 80084b6:	3b01      	subs	r3, #1
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	e6e8      	b.n	800828e <_scanf_float+0x7e>
 80084bc:	1e6b      	subs	r3, r5, #1
 80084be:	2b06      	cmp	r3, #6
 80084c0:	d824      	bhi.n	800850c <_scanf_float+0x2fc>
 80084c2:	2d02      	cmp	r5, #2
 80084c4:	d836      	bhi.n	8008534 <_scanf_float+0x324>
 80084c6:	9b01      	ldr	r3, [sp, #4]
 80084c8:	429e      	cmp	r6, r3
 80084ca:	f67f aee4 	bls.w	8008296 <_scanf_float+0x86>
 80084ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80084d6:	463a      	mov	r2, r7
 80084d8:	4640      	mov	r0, r8
 80084da:	4798      	blx	r3
 80084dc:	6923      	ldr	r3, [r4, #16]
 80084de:	3b01      	subs	r3, #1
 80084e0:	6123      	str	r3, [r4, #16]
 80084e2:	e7f0      	b.n	80084c6 <_scanf_float+0x2b6>
 80084e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084e8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80084ec:	463a      	mov	r2, r7
 80084ee:	4640      	mov	r0, r8
 80084f0:	4798      	blx	r3
 80084f2:	6923      	ldr	r3, [r4, #16]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	6123      	str	r3, [r4, #16]
 80084f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084fc:	fa5f fa8a 	uxtb.w	sl, sl
 8008500:	f1ba 0f02 	cmp.w	sl, #2
 8008504:	d1ee      	bne.n	80084e4 <_scanf_float+0x2d4>
 8008506:	3d03      	subs	r5, #3
 8008508:	b2ed      	uxtb	r5, r5
 800850a:	1b76      	subs	r6, r6, r5
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	05da      	lsls	r2, r3, #23
 8008510:	d530      	bpl.n	8008574 <_scanf_float+0x364>
 8008512:	055b      	lsls	r3, r3, #21
 8008514:	d511      	bpl.n	800853a <_scanf_float+0x32a>
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	429e      	cmp	r6, r3
 800851a:	f67f aebc 	bls.w	8008296 <_scanf_float+0x86>
 800851e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008526:	463a      	mov	r2, r7
 8008528:	4640      	mov	r0, r8
 800852a:	4798      	blx	r3
 800852c:	6923      	ldr	r3, [r4, #16]
 800852e:	3b01      	subs	r3, #1
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	e7f0      	b.n	8008516 <_scanf_float+0x306>
 8008534:	46aa      	mov	sl, r5
 8008536:	46b3      	mov	fp, r6
 8008538:	e7de      	b.n	80084f8 <_scanf_float+0x2e8>
 800853a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	2965      	cmp	r1, #101	@ 0x65
 8008542:	f103 33ff 	add.w	r3, r3, #4294967295
 8008546:	f106 35ff 	add.w	r5, r6, #4294967295
 800854a:	6123      	str	r3, [r4, #16]
 800854c:	d00c      	beq.n	8008568 <_scanf_float+0x358>
 800854e:	2945      	cmp	r1, #69	@ 0x45
 8008550:	d00a      	beq.n	8008568 <_scanf_float+0x358>
 8008552:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008556:	463a      	mov	r2, r7
 8008558:	4640      	mov	r0, r8
 800855a:	4798      	blx	r3
 800855c:	6923      	ldr	r3, [r4, #16]
 800855e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008562:	3b01      	subs	r3, #1
 8008564:	1eb5      	subs	r5, r6, #2
 8008566:	6123      	str	r3, [r4, #16]
 8008568:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800856c:	463a      	mov	r2, r7
 800856e:	4640      	mov	r0, r8
 8008570:	4798      	blx	r3
 8008572:	462e      	mov	r6, r5
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	f012 0210 	ands.w	r2, r2, #16
 800857a:	d001      	beq.n	8008580 <_scanf_float+0x370>
 800857c:	2000      	movs	r0, #0
 800857e:	e68b      	b.n	8008298 <_scanf_float+0x88>
 8008580:	7032      	strb	r2, [r6, #0]
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008588:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800858c:	d11a      	bne.n	80085c4 <_scanf_float+0x3b4>
 800858e:	9b02      	ldr	r3, [sp, #8]
 8008590:	454b      	cmp	r3, r9
 8008592:	eba3 0209 	sub.w	r2, r3, r9
 8008596:	d121      	bne.n	80085dc <_scanf_float+0x3cc>
 8008598:	9901      	ldr	r1, [sp, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	4640      	mov	r0, r8
 800859e:	f002 fb61 	bl	800ac64 <_strtod_r>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	6821      	ldr	r1, [r4, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f011 0f02 	tst.w	r1, #2
 80085ac:	f103 0204 	add.w	r2, r3, #4
 80085b0:	d01f      	beq.n	80085f2 <_scanf_float+0x3e2>
 80085b2:	9903      	ldr	r1, [sp, #12]
 80085b4:	600a      	str	r2, [r1, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	ed83 0b00 	vstr	d0, [r3]
 80085bc:	68e3      	ldr	r3, [r4, #12]
 80085be:	3301      	adds	r3, #1
 80085c0:	60e3      	str	r3, [r4, #12]
 80085c2:	e7db      	b.n	800857c <_scanf_float+0x36c>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d0e6      	beq.n	8008598 <_scanf_float+0x388>
 80085ca:	9905      	ldr	r1, [sp, #20]
 80085cc:	230a      	movs	r3, #10
 80085ce:	3101      	adds	r1, #1
 80085d0:	4640      	mov	r0, r8
 80085d2:	f002 fbc7 	bl	800ad64 <_strtol_r>
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	9e05      	ldr	r6, [sp, #20]
 80085da:	1ac2      	subs	r2, r0, r3
 80085dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80085e0:	429e      	cmp	r6, r3
 80085e2:	bf28      	it	cs
 80085e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80085e8:	490d      	ldr	r1, [pc, #52]	@ (8008620 <_scanf_float+0x410>)
 80085ea:	4630      	mov	r0, r6
 80085ec:	f000 f912 	bl	8008814 <siprintf>
 80085f0:	e7d2      	b.n	8008598 <_scanf_float+0x388>
 80085f2:	f011 0f04 	tst.w	r1, #4
 80085f6:	9903      	ldr	r1, [sp, #12]
 80085f8:	600a      	str	r2, [r1, #0]
 80085fa:	d1dc      	bne.n	80085b6 <_scanf_float+0x3a6>
 80085fc:	eeb4 0b40 	vcmp.f64	d0, d0
 8008600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008604:	681d      	ldr	r5, [r3, #0]
 8008606:	d705      	bvc.n	8008614 <_scanf_float+0x404>
 8008608:	4806      	ldr	r0, [pc, #24]	@ (8008624 <_scanf_float+0x414>)
 800860a:	f000 f9e7 	bl	80089dc <nanf>
 800860e:	ed85 0a00 	vstr	s0, [r5]
 8008612:	e7d3      	b.n	80085bc <_scanf_float+0x3ac>
 8008614:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008618:	e7f9      	b.n	800860e <_scanf_float+0x3fe>
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	e630      	b.n	8008282 <_scanf_float+0x72>
 8008620:	0800c1e8 	.word	0x0800c1e8
 8008624:	0800c57d 	.word	0x0800c57d

08008628 <std>:
 8008628:	2300      	movs	r3, #0
 800862a:	b510      	push	{r4, lr}
 800862c:	4604      	mov	r4, r0
 800862e:	e9c0 3300 	strd	r3, r3, [r0]
 8008632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008636:	6083      	str	r3, [r0, #8]
 8008638:	8181      	strh	r1, [r0, #12]
 800863a:	6643      	str	r3, [r0, #100]	@ 0x64
 800863c:	81c2      	strh	r2, [r0, #14]
 800863e:	6183      	str	r3, [r0, #24]
 8008640:	4619      	mov	r1, r3
 8008642:	2208      	movs	r2, #8
 8008644:	305c      	adds	r0, #92	@ 0x5c
 8008646:	f000 f948 	bl	80088da <memset>
 800864a:	4b0d      	ldr	r3, [pc, #52]	@ (8008680 <std+0x58>)
 800864c:	6263      	str	r3, [r4, #36]	@ 0x24
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <std+0x5c>)
 8008650:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008652:	4b0d      	ldr	r3, [pc, #52]	@ (8008688 <std+0x60>)
 8008654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008656:	4b0d      	ldr	r3, [pc, #52]	@ (800868c <std+0x64>)
 8008658:	6323      	str	r3, [r4, #48]	@ 0x30
 800865a:	4b0d      	ldr	r3, [pc, #52]	@ (8008690 <std+0x68>)
 800865c:	6224      	str	r4, [r4, #32]
 800865e:	429c      	cmp	r4, r3
 8008660:	d006      	beq.n	8008670 <std+0x48>
 8008662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008666:	4294      	cmp	r4, r2
 8008668:	d002      	beq.n	8008670 <std+0x48>
 800866a:	33d0      	adds	r3, #208	@ 0xd0
 800866c:	429c      	cmp	r4, r3
 800866e:	d105      	bne.n	800867c <std+0x54>
 8008670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008678:	f000 b9ac 	b.w	80089d4 <__retarget_lock_init_recursive>
 800867c:	bd10      	pop	{r4, pc}
 800867e:	bf00      	nop
 8008680:	08008855 	.word	0x08008855
 8008684:	08008877 	.word	0x08008877
 8008688:	080088af 	.word	0x080088af
 800868c:	080088d3 	.word	0x080088d3
 8008690:	24000440 	.word	0x24000440

08008694 <stdio_exit_handler>:
 8008694:	4a02      	ldr	r2, [pc, #8]	@ (80086a0 <stdio_exit_handler+0xc>)
 8008696:	4903      	ldr	r1, [pc, #12]	@ (80086a4 <stdio_exit_handler+0x10>)
 8008698:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <stdio_exit_handler+0x14>)
 800869a:	f000 b869 	b.w	8008770 <_fwalk_sglue>
 800869e:	bf00      	nop
 80086a0:	240000b0 	.word	0x240000b0
 80086a4:	0800b121 	.word	0x0800b121
 80086a8:	240000c0 	.word	0x240000c0

080086ac <cleanup_stdio>:
 80086ac:	6841      	ldr	r1, [r0, #4]
 80086ae:	4b0c      	ldr	r3, [pc, #48]	@ (80086e0 <cleanup_stdio+0x34>)
 80086b0:	4299      	cmp	r1, r3
 80086b2:	b510      	push	{r4, lr}
 80086b4:	4604      	mov	r4, r0
 80086b6:	d001      	beq.n	80086bc <cleanup_stdio+0x10>
 80086b8:	f002 fd32 	bl	800b120 <_fflush_r>
 80086bc:	68a1      	ldr	r1, [r4, #8]
 80086be:	4b09      	ldr	r3, [pc, #36]	@ (80086e4 <cleanup_stdio+0x38>)
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <cleanup_stdio+0x1e>
 80086c4:	4620      	mov	r0, r4
 80086c6:	f002 fd2b 	bl	800b120 <_fflush_r>
 80086ca:	68e1      	ldr	r1, [r4, #12]
 80086cc:	4b06      	ldr	r3, [pc, #24]	@ (80086e8 <cleanup_stdio+0x3c>)
 80086ce:	4299      	cmp	r1, r3
 80086d0:	d004      	beq.n	80086dc <cleanup_stdio+0x30>
 80086d2:	4620      	mov	r0, r4
 80086d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086d8:	f002 bd22 	b.w	800b120 <_fflush_r>
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	24000440 	.word	0x24000440
 80086e4:	240004a8 	.word	0x240004a8
 80086e8:	24000510 	.word	0x24000510

080086ec <global_stdio_init.part.0>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	4b0b      	ldr	r3, [pc, #44]	@ (800871c <global_stdio_init.part.0+0x30>)
 80086f0:	4c0b      	ldr	r4, [pc, #44]	@ (8008720 <global_stdio_init.part.0+0x34>)
 80086f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008724 <global_stdio_init.part.0+0x38>)
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	4620      	mov	r0, r4
 80086f8:	2200      	movs	r2, #0
 80086fa:	2104      	movs	r1, #4
 80086fc:	f7ff ff94 	bl	8008628 <std>
 8008700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008704:	2201      	movs	r2, #1
 8008706:	2109      	movs	r1, #9
 8008708:	f7ff ff8e 	bl	8008628 <std>
 800870c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008710:	2202      	movs	r2, #2
 8008712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008716:	2112      	movs	r1, #18
 8008718:	f7ff bf86 	b.w	8008628 <std>
 800871c:	24000578 	.word	0x24000578
 8008720:	24000440 	.word	0x24000440
 8008724:	08008695 	.word	0x08008695

08008728 <__sfp_lock_acquire>:
 8008728:	4801      	ldr	r0, [pc, #4]	@ (8008730 <__sfp_lock_acquire+0x8>)
 800872a:	f000 b954 	b.w	80089d6 <__retarget_lock_acquire_recursive>
 800872e:	bf00      	nop
 8008730:	24000581 	.word	0x24000581

08008734 <__sfp_lock_release>:
 8008734:	4801      	ldr	r0, [pc, #4]	@ (800873c <__sfp_lock_release+0x8>)
 8008736:	f000 b94f 	b.w	80089d8 <__retarget_lock_release_recursive>
 800873a:	bf00      	nop
 800873c:	24000581 	.word	0x24000581

08008740 <__sinit>:
 8008740:	b510      	push	{r4, lr}
 8008742:	4604      	mov	r4, r0
 8008744:	f7ff fff0 	bl	8008728 <__sfp_lock_acquire>
 8008748:	6a23      	ldr	r3, [r4, #32]
 800874a:	b11b      	cbz	r3, 8008754 <__sinit+0x14>
 800874c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008750:	f7ff bff0 	b.w	8008734 <__sfp_lock_release>
 8008754:	4b04      	ldr	r3, [pc, #16]	@ (8008768 <__sinit+0x28>)
 8008756:	6223      	str	r3, [r4, #32]
 8008758:	4b04      	ldr	r3, [pc, #16]	@ (800876c <__sinit+0x2c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1f5      	bne.n	800874c <__sinit+0xc>
 8008760:	f7ff ffc4 	bl	80086ec <global_stdio_init.part.0>
 8008764:	e7f2      	b.n	800874c <__sinit+0xc>
 8008766:	bf00      	nop
 8008768:	080086ad 	.word	0x080086ad
 800876c:	24000578 	.word	0x24000578

08008770 <_fwalk_sglue>:
 8008770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008774:	4607      	mov	r7, r0
 8008776:	4688      	mov	r8, r1
 8008778:	4614      	mov	r4, r2
 800877a:	2600      	movs	r6, #0
 800877c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008780:	f1b9 0901 	subs.w	r9, r9, #1
 8008784:	d505      	bpl.n	8008792 <_fwalk_sglue+0x22>
 8008786:	6824      	ldr	r4, [r4, #0]
 8008788:	2c00      	cmp	r4, #0
 800878a:	d1f7      	bne.n	800877c <_fwalk_sglue+0xc>
 800878c:	4630      	mov	r0, r6
 800878e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008792:	89ab      	ldrh	r3, [r5, #12]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d907      	bls.n	80087a8 <_fwalk_sglue+0x38>
 8008798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800879c:	3301      	adds	r3, #1
 800879e:	d003      	beq.n	80087a8 <_fwalk_sglue+0x38>
 80087a0:	4629      	mov	r1, r5
 80087a2:	4638      	mov	r0, r7
 80087a4:	47c0      	blx	r8
 80087a6:	4306      	orrs	r6, r0
 80087a8:	3568      	adds	r5, #104	@ 0x68
 80087aa:	e7e9      	b.n	8008780 <_fwalk_sglue+0x10>

080087ac <sniprintf>:
 80087ac:	b40c      	push	{r2, r3}
 80087ae:	b530      	push	{r4, r5, lr}
 80087b0:	4b17      	ldr	r3, [pc, #92]	@ (8008810 <sniprintf+0x64>)
 80087b2:	1e0c      	subs	r4, r1, #0
 80087b4:	681d      	ldr	r5, [r3, #0]
 80087b6:	b09d      	sub	sp, #116	@ 0x74
 80087b8:	da08      	bge.n	80087cc <sniprintf+0x20>
 80087ba:	238b      	movs	r3, #139	@ 0x8b
 80087bc:	602b      	str	r3, [r5, #0]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	b01d      	add	sp, #116	@ 0x74
 80087c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c8:	b002      	add	sp, #8
 80087ca:	4770      	bx	lr
 80087cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80087d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087d4:	bf14      	ite	ne
 80087d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80087da:	4623      	moveq	r3, r4
 80087dc:	9304      	str	r3, [sp, #16]
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80087e4:	9002      	str	r0, [sp, #8]
 80087e6:	9006      	str	r0, [sp, #24]
 80087e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80087ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80087ee:	ab21      	add	r3, sp, #132	@ 0x84
 80087f0:	a902      	add	r1, sp, #8
 80087f2:	4628      	mov	r0, r5
 80087f4:	9301      	str	r3, [sp, #4]
 80087f6:	f002 fb13 	bl	800ae20 <_svfiprintf_r>
 80087fa:	1c43      	adds	r3, r0, #1
 80087fc:	bfbc      	itt	lt
 80087fe:	238b      	movlt	r3, #139	@ 0x8b
 8008800:	602b      	strlt	r3, [r5, #0]
 8008802:	2c00      	cmp	r4, #0
 8008804:	d0dd      	beq.n	80087c2 <sniprintf+0x16>
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
 800880c:	e7d9      	b.n	80087c2 <sniprintf+0x16>
 800880e:	bf00      	nop
 8008810:	240000bc 	.word	0x240000bc

08008814 <siprintf>:
 8008814:	b40e      	push	{r1, r2, r3}
 8008816:	b500      	push	{lr}
 8008818:	b09c      	sub	sp, #112	@ 0x70
 800881a:	ab1d      	add	r3, sp, #116	@ 0x74
 800881c:	9002      	str	r0, [sp, #8]
 800881e:	9006      	str	r0, [sp, #24]
 8008820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008824:	4809      	ldr	r0, [pc, #36]	@ (800884c <siprintf+0x38>)
 8008826:	9107      	str	r1, [sp, #28]
 8008828:	9104      	str	r1, [sp, #16]
 800882a:	4909      	ldr	r1, [pc, #36]	@ (8008850 <siprintf+0x3c>)
 800882c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008830:	9105      	str	r1, [sp, #20]
 8008832:	6800      	ldr	r0, [r0, #0]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	a902      	add	r1, sp, #8
 8008838:	f002 faf2 	bl	800ae20 <_svfiprintf_r>
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	b01c      	add	sp, #112	@ 0x70
 8008844:	f85d eb04 	ldr.w	lr, [sp], #4
 8008848:	b003      	add	sp, #12
 800884a:	4770      	bx	lr
 800884c:	240000bc 	.word	0x240000bc
 8008850:	ffff0208 	.word	0xffff0208

08008854 <__sread>:
 8008854:	b510      	push	{r4, lr}
 8008856:	460c      	mov	r4, r1
 8008858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885c:	f000 f86c 	bl	8008938 <_read_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	bfab      	itete	ge
 8008864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008866:	89a3      	ldrhlt	r3, [r4, #12]
 8008868:	181b      	addge	r3, r3, r0
 800886a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800886e:	bfac      	ite	ge
 8008870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008872:	81a3      	strhlt	r3, [r4, #12]
 8008874:	bd10      	pop	{r4, pc}

08008876 <__swrite>:
 8008876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887a:	461f      	mov	r7, r3
 800887c:	898b      	ldrh	r3, [r1, #12]
 800887e:	05db      	lsls	r3, r3, #23
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
 8008884:	4616      	mov	r6, r2
 8008886:	d505      	bpl.n	8008894 <__swrite+0x1e>
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	2302      	movs	r3, #2
 800888e:	2200      	movs	r2, #0
 8008890:	f000 f840 	bl	8008914 <_lseek_r>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	f000 b857 	b.w	800895c <_write_r>

080088ae <__sseek>:
 80088ae:	b510      	push	{r4, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b6:	f000 f82d 	bl	8008914 <_lseek_r>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	bf15      	itete	ne
 80088c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088ca:	81a3      	strheq	r3, [r4, #12]
 80088cc:	bf18      	it	ne
 80088ce:	81a3      	strhne	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__sclose>:
 80088d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d6:	f000 b80d 	b.w	80088f4 <_close_r>

080088da <memset>:
 80088da:	4402      	add	r2, r0
 80088dc:	4603      	mov	r3, r0
 80088de:	4293      	cmp	r3, r2
 80088e0:	d100      	bne.n	80088e4 <memset+0xa>
 80088e2:	4770      	bx	lr
 80088e4:	f803 1b01 	strb.w	r1, [r3], #1
 80088e8:	e7f9      	b.n	80088de <memset+0x4>
	...

080088ec <_localeconv_r>:
 80088ec:	4800      	ldr	r0, [pc, #0]	@ (80088f0 <_localeconv_r+0x4>)
 80088ee:	4770      	bx	lr
 80088f0:	240001fc 	.word	0x240001fc

080088f4 <_close_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d06      	ldr	r5, [pc, #24]	@ (8008910 <_close_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	f7f9 f814 	bl	800192c <_close>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_close_r+0x1a>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_close_r+0x1a>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	2400057c 	.word	0x2400057c

08008914 <_lseek_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_lseek_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f9 f829 	bl	800197a <_lseek>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_lseek_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_lseek_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	2400057c 	.word	0x2400057c

08008938 <_read_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_read_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f8 ffd3 	bl	80018f2 <_read>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_read_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_read_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	2400057c 	.word	0x2400057c

0800895c <_write_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	@ (800897c <_write_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f8 fb20 	bl	8000fb0 <_write>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_write_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_write_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	2400057c 	.word	0x2400057c

08008980 <__errno>:
 8008980:	4b01      	ldr	r3, [pc, #4]	@ (8008988 <__errno+0x8>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	240000bc 	.word	0x240000bc

0800898c <__libc_init_array>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4d0d      	ldr	r5, [pc, #52]	@ (80089c4 <__libc_init_array+0x38>)
 8008990:	4c0d      	ldr	r4, [pc, #52]	@ (80089c8 <__libc_init_array+0x3c>)
 8008992:	1b64      	subs	r4, r4, r5
 8008994:	10a4      	asrs	r4, r4, #2
 8008996:	2600      	movs	r6, #0
 8008998:	42a6      	cmp	r6, r4
 800899a:	d109      	bne.n	80089b0 <__libc_init_array+0x24>
 800899c:	4d0b      	ldr	r5, [pc, #44]	@ (80089cc <__libc_init_array+0x40>)
 800899e:	4c0c      	ldr	r4, [pc, #48]	@ (80089d0 <__libc_init_array+0x44>)
 80089a0:	f003 fbd8 	bl	800c154 <_init>
 80089a4:	1b64      	subs	r4, r4, r5
 80089a6:	10a4      	asrs	r4, r4, #2
 80089a8:	2600      	movs	r6, #0
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	d105      	bne.n	80089ba <__libc_init_array+0x2e>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b4:	4798      	blx	r3
 80089b6:	3601      	adds	r6, #1
 80089b8:	e7ee      	b.n	8008998 <__libc_init_array+0xc>
 80089ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80089be:	4798      	blx	r3
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7f2      	b.n	80089aa <__libc_init_array+0x1e>
 80089c4:	0800c628 	.word	0x0800c628
 80089c8:	0800c628 	.word	0x0800c628
 80089cc:	0800c628 	.word	0x0800c628
 80089d0:	0800c62c 	.word	0x0800c62c

080089d4 <__retarget_lock_init_recursive>:
 80089d4:	4770      	bx	lr

080089d6 <__retarget_lock_acquire_recursive>:
 80089d6:	4770      	bx	lr

080089d8 <__retarget_lock_release_recursive>:
 80089d8:	4770      	bx	lr
	...

080089dc <nanf>:
 80089dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80089e4 <nanf+0x8>
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	7fc00000 	.word	0x7fc00000

080089e8 <quorem>:
 80089e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	6903      	ldr	r3, [r0, #16]
 80089ee:	690c      	ldr	r4, [r1, #16]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	4607      	mov	r7, r0
 80089f4:	db7e      	blt.n	8008af4 <quorem+0x10c>
 80089f6:	3c01      	subs	r4, #1
 80089f8:	f101 0814 	add.w	r8, r1, #20
 80089fc:	00a3      	lsls	r3, r4, #2
 80089fe:	f100 0514 	add.w	r5, r0, #20
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a12:	3301      	adds	r3, #1
 8008a14:	429a      	cmp	r2, r3
 8008a16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a1e:	d32e      	bcc.n	8008a7e <quorem+0x96>
 8008a20:	f04f 0a00 	mov.w	sl, #0
 8008a24:	46c4      	mov	ip, r8
 8008a26:	46ae      	mov	lr, r5
 8008a28:	46d3      	mov	fp, sl
 8008a2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a2e:	b298      	uxth	r0, r3
 8008a30:	fb06 a000 	mla	r0, r6, r0, sl
 8008a34:	0c02      	lsrs	r2, r0, #16
 8008a36:	0c1b      	lsrs	r3, r3, #16
 8008a38:	fb06 2303 	mla	r3, r6, r3, r2
 8008a3c:	f8de 2000 	ldr.w	r2, [lr]
 8008a40:	b280      	uxth	r0, r0
 8008a42:	b292      	uxth	r2, r2
 8008a44:	1a12      	subs	r2, r2, r0
 8008a46:	445a      	add	r2, fp
 8008a48:	f8de 0000 	ldr.w	r0, [lr]
 8008a4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a5a:	b292      	uxth	r2, r2
 8008a5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a60:	45e1      	cmp	r9, ip
 8008a62:	f84e 2b04 	str.w	r2, [lr], #4
 8008a66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a6a:	d2de      	bcs.n	8008a2a <quorem+0x42>
 8008a6c:	9b00      	ldr	r3, [sp, #0]
 8008a6e:	58eb      	ldr	r3, [r5, r3]
 8008a70:	b92b      	cbnz	r3, 8008a7e <quorem+0x96>
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	3b04      	subs	r3, #4
 8008a76:	429d      	cmp	r5, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	d32f      	bcc.n	8008adc <quorem+0xf4>
 8008a7c:	613c      	str	r4, [r7, #16]
 8008a7e:	4638      	mov	r0, r7
 8008a80:	f001 f954 	bl	8009d2c <__mcmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	db25      	blt.n	8008ad4 <quorem+0xec>
 8008a88:	4629      	mov	r1, r5
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a90:	f8d1 c000 	ldr.w	ip, [r1]
 8008a94:	fa1f fe82 	uxth.w	lr, r2
 8008a98:	fa1f f38c 	uxth.w	r3, ip
 8008a9c:	eba3 030e 	sub.w	r3, r3, lr
 8008aa0:	4403      	add	r3, r0
 8008aa2:	0c12      	lsrs	r2, r2, #16
 8008aa4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008aa8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ab2:	45c1      	cmp	r9, r8
 8008ab4:	f841 3b04 	str.w	r3, [r1], #4
 8008ab8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008abc:	d2e6      	bcs.n	8008a8c <quorem+0xa4>
 8008abe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ac6:	b922      	cbnz	r2, 8008ad2 <quorem+0xea>
 8008ac8:	3b04      	subs	r3, #4
 8008aca:	429d      	cmp	r5, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	d30b      	bcc.n	8008ae8 <quorem+0x100>
 8008ad0:	613c      	str	r4, [r7, #16]
 8008ad2:	3601      	adds	r6, #1
 8008ad4:	4630      	mov	r0, r6
 8008ad6:	b003      	add	sp, #12
 8008ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	d1cb      	bne.n	8008a7c <quorem+0x94>
 8008ae4:	3c01      	subs	r4, #1
 8008ae6:	e7c6      	b.n	8008a76 <quorem+0x8e>
 8008ae8:	6812      	ldr	r2, [r2, #0]
 8008aea:	3b04      	subs	r3, #4
 8008aec:	2a00      	cmp	r2, #0
 8008aee:	d1ef      	bne.n	8008ad0 <quorem+0xe8>
 8008af0:	3c01      	subs	r4, #1
 8008af2:	e7ea      	b.n	8008aca <quorem+0xe2>
 8008af4:	2000      	movs	r0, #0
 8008af6:	e7ee      	b.n	8008ad6 <quorem+0xee>

08008af8 <_dtoa_r>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	ed2d 8b02 	vpush	{d8}
 8008b00:	69c7      	ldr	r7, [r0, #28]
 8008b02:	b091      	sub	sp, #68	@ 0x44
 8008b04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b08:	ec55 4b10 	vmov	r4, r5, d0
 8008b0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008b0e:	9107      	str	r1, [sp, #28]
 8008b10:	4681      	mov	r9, r0
 8008b12:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b14:	930d      	str	r3, [sp, #52]	@ 0x34
 8008b16:	b97f      	cbnz	r7, 8008b38 <_dtoa_r+0x40>
 8008b18:	2010      	movs	r0, #16
 8008b1a:	f000 fd8d 	bl	8009638 <malloc>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	f8c9 001c 	str.w	r0, [r9, #28]
 8008b24:	b920      	cbnz	r0, 8008b30 <_dtoa_r+0x38>
 8008b26:	4ba0      	ldr	r3, [pc, #640]	@ (8008da8 <_dtoa_r+0x2b0>)
 8008b28:	21ef      	movs	r1, #239	@ 0xef
 8008b2a:	48a0      	ldr	r0, [pc, #640]	@ (8008dac <_dtoa_r+0x2b4>)
 8008b2c:	f002 fb74 	bl	800b218 <__assert_func>
 8008b30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b34:	6007      	str	r7, [r0, #0]
 8008b36:	60c7      	str	r7, [r0, #12]
 8008b38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b3c:	6819      	ldr	r1, [r3, #0]
 8008b3e:	b159      	cbz	r1, 8008b58 <_dtoa_r+0x60>
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	604a      	str	r2, [r1, #4]
 8008b44:	2301      	movs	r3, #1
 8008b46:	4093      	lsls	r3, r2
 8008b48:	608b      	str	r3, [r1, #8]
 8008b4a:	4648      	mov	r0, r9
 8008b4c:	f000 fe6a 	bl	8009824 <_Bfree>
 8008b50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008b54:	2200      	movs	r2, #0
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	1e2b      	subs	r3, r5, #0
 8008b5a:	bfbb      	ittet	lt
 8008b5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b60:	9303      	strlt	r3, [sp, #12]
 8008b62:	2300      	movge	r3, #0
 8008b64:	2201      	movlt	r2, #1
 8008b66:	bfac      	ite	ge
 8008b68:	6033      	strge	r3, [r6, #0]
 8008b6a:	6032      	strlt	r2, [r6, #0]
 8008b6c:	4b90      	ldr	r3, [pc, #576]	@ (8008db0 <_dtoa_r+0x2b8>)
 8008b6e:	9e03      	ldr	r6, [sp, #12]
 8008b70:	43b3      	bics	r3, r6
 8008b72:	d110      	bne.n	8008b96 <_dtoa_r+0x9e>
 8008b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b76:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8008b80:	4323      	orrs	r3, r4
 8008b82:	f000 84de 	beq.w	8009542 <_dtoa_r+0xa4a>
 8008b86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008b88:	4f8a      	ldr	r7, [pc, #552]	@ (8008db4 <_dtoa_r+0x2bc>)
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 84e0 	beq.w	8009550 <_dtoa_r+0xa58>
 8008b90:	1cfb      	adds	r3, r7, #3
 8008b92:	f000 bcdb 	b.w	800954c <_dtoa_r+0xa54>
 8008b96:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008b9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	d10a      	bne.n	8008bba <_dtoa_r+0xc2>
 8008ba4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008bac:	b113      	cbz	r3, 8008bb4 <_dtoa_r+0xbc>
 8008bae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008bb0:	4b81      	ldr	r3, [pc, #516]	@ (8008db8 <_dtoa_r+0x2c0>)
 8008bb2:	6013      	str	r3, [r2, #0]
 8008bb4:	4f81      	ldr	r7, [pc, #516]	@ (8008dbc <_dtoa_r+0x2c4>)
 8008bb6:	f000 bccb 	b.w	8009550 <_dtoa_r+0xa58>
 8008bba:	aa0e      	add	r2, sp, #56	@ 0x38
 8008bbc:	a90f      	add	r1, sp, #60	@ 0x3c
 8008bbe:	4648      	mov	r0, r9
 8008bc0:	eeb0 0b48 	vmov.f64	d0, d8
 8008bc4:	f001 f9d2 	bl	8009f6c <__d2b>
 8008bc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8008bcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bce:	9001      	str	r0, [sp, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d045      	beq.n	8008c60 <_dtoa_r+0x168>
 8008bd4:	eeb0 7b48 	vmov.f64	d7, d8
 8008bd8:	ee18 1a90 	vmov	r1, s17
 8008bdc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008be0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008be4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008be8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008bec:	2500      	movs	r5, #0
 8008bee:	ee07 1a90 	vmov	s15, r1
 8008bf2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008bf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008d90 <_dtoa_r+0x298>
 8008bfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8008d98 <_dtoa_r+0x2a0>
 8008c02:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008c06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8008da0 <_dtoa_r+0x2a8>
 8008c0a:	ee07 3a90 	vmov	s15, r3
 8008c0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008c12:	eeb0 7b46 	vmov.f64	d7, d6
 8008c16:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008c1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008c1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c26:	ee16 8a90 	vmov	r8, s13
 8008c2a:	d508      	bpl.n	8008c3e <_dtoa_r+0x146>
 8008c2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008c30:	eeb4 6b47 	vcmp.f64	d6, d7
 8008c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c38:	bf18      	it	ne
 8008c3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8008c3e:	f1b8 0f16 	cmp.w	r8, #22
 8008c42:	d82b      	bhi.n	8008c9c <_dtoa_r+0x1a4>
 8008c44:	495e      	ldr	r1, [pc, #376]	@ (8008dc0 <_dtoa_r+0x2c8>)
 8008c46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8008c4a:	ed91 7b00 	vldr	d7, [r1]
 8008c4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c56:	d501      	bpl.n	8008c5c <_dtoa_r+0x164>
 8008c58:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	e01e      	b.n	8008c9e <_dtoa_r+0x1a6>
 8008c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c62:	4413      	add	r3, r2
 8008c64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8008c68:	2920      	cmp	r1, #32
 8008c6a:	bfc1      	itttt	gt
 8008c6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8008c70:	408e      	lslgt	r6, r1
 8008c72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8008c76:	fa24 f101 	lsrgt.w	r1, r4, r1
 8008c7a:	bfd6      	itet	le
 8008c7c:	f1c1 0120 	rsble	r1, r1, #32
 8008c80:	4331      	orrgt	r1, r6
 8008c82:	fa04 f101 	lslle.w	r1, r4, r1
 8008c86:	ee07 1a90 	vmov	s15, r1
 8008c8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	ee17 1a90 	vmov	r1, s15
 8008c94:	2501      	movs	r5, #1
 8008c96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8008c9a:	e7a8      	b.n	8008bee <_dtoa_r+0xf6>
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	1ad2      	subs	r2, r2, r3
 8008ca0:	1e53      	subs	r3, r2, #1
 8008ca2:	9306      	str	r3, [sp, #24]
 8008ca4:	bf45      	ittet	mi
 8008ca6:	f1c2 0301 	rsbmi	r3, r2, #1
 8008caa:	9305      	strmi	r3, [sp, #20]
 8008cac:	2300      	movpl	r3, #0
 8008cae:	2300      	movmi	r3, #0
 8008cb0:	bf4c      	ite	mi
 8008cb2:	9306      	strmi	r3, [sp, #24]
 8008cb4:	9305      	strpl	r3, [sp, #20]
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	910c      	str	r1, [sp, #48]	@ 0x30
 8008cbc:	db18      	blt.n	8008cf0 <_dtoa_r+0x1f8>
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008cc4:	4443      	add	r3, r8
 8008cc6:	9306      	str	r3, [sp, #24]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	9a07      	ldr	r2, [sp, #28]
 8008ccc:	2a09      	cmp	r2, #9
 8008cce:	d849      	bhi.n	8008d64 <_dtoa_r+0x26c>
 8008cd0:	2a05      	cmp	r2, #5
 8008cd2:	bfc4      	itt	gt
 8008cd4:	3a04      	subgt	r2, #4
 8008cd6:	9207      	strgt	r2, [sp, #28]
 8008cd8:	9a07      	ldr	r2, [sp, #28]
 8008cda:	f1a2 0202 	sub.w	r2, r2, #2
 8008cde:	bfcc      	ite	gt
 8008ce0:	2400      	movgt	r4, #0
 8008ce2:	2401      	movle	r4, #1
 8008ce4:	2a03      	cmp	r2, #3
 8008ce6:	d848      	bhi.n	8008d7a <_dtoa_r+0x282>
 8008ce8:	e8df f002 	tbb	[pc, r2]
 8008cec:	3a2c2e0b 	.word	0x3a2c2e0b
 8008cf0:	9b05      	ldr	r3, [sp, #20]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	eba3 0308 	sub.w	r3, r3, r8
 8008cf8:	9305      	str	r3, [sp, #20]
 8008cfa:	920a      	str	r2, [sp, #40]	@ 0x28
 8008cfc:	f1c8 0300 	rsb	r3, r8, #0
 8008d00:	e7e3      	b.n	8008cca <_dtoa_r+0x1d2>
 8008d02:	2200      	movs	r2, #0
 8008d04:	9208      	str	r2, [sp, #32]
 8008d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d08:	2a00      	cmp	r2, #0
 8008d0a:	dc39      	bgt.n	8008d80 <_dtoa_r+0x288>
 8008d0c:	f04f 0b01 	mov.w	fp, #1
 8008d10:	46da      	mov	sl, fp
 8008d12:	465a      	mov	r2, fp
 8008d14:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8008d18:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	2004      	movs	r0, #4
 8008d20:	f100 0614 	add.w	r6, r0, #20
 8008d24:	4296      	cmp	r6, r2
 8008d26:	d930      	bls.n	8008d8a <_dtoa_r+0x292>
 8008d28:	6079      	str	r1, [r7, #4]
 8008d2a:	4648      	mov	r0, r9
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	f000 fd39 	bl	80097a4 <_Balloc>
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	4607      	mov	r7, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d146      	bne.n	8008dc8 <_dtoa_r+0x2d0>
 8008d3a:	4b22      	ldr	r3, [pc, #136]	@ (8008dc4 <_dtoa_r+0x2cc>)
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008d42:	e6f2      	b.n	8008b2a <_dtoa_r+0x32>
 8008d44:	2201      	movs	r2, #1
 8008d46:	e7dd      	b.n	8008d04 <_dtoa_r+0x20c>
 8008d48:	2200      	movs	r2, #0
 8008d4a:	9208      	str	r2, [sp, #32]
 8008d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d4e:	eb08 0b02 	add.w	fp, r8, r2
 8008d52:	f10b 0a01 	add.w	sl, fp, #1
 8008d56:	4652      	mov	r2, sl
 8008d58:	2a01      	cmp	r2, #1
 8008d5a:	bfb8      	it	lt
 8008d5c:	2201      	movlt	r2, #1
 8008d5e:	e7db      	b.n	8008d18 <_dtoa_r+0x220>
 8008d60:	2201      	movs	r2, #1
 8008d62:	e7f2      	b.n	8008d4a <_dtoa_r+0x252>
 8008d64:	2401      	movs	r4, #1
 8008d66:	2200      	movs	r2, #0
 8008d68:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8008d6c:	f04f 3bff 	mov.w	fp, #4294967295
 8008d70:	2100      	movs	r1, #0
 8008d72:	46da      	mov	sl, fp
 8008d74:	2212      	movs	r2, #18
 8008d76:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d78:	e7ce      	b.n	8008d18 <_dtoa_r+0x220>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	9208      	str	r2, [sp, #32]
 8008d7e:	e7f5      	b.n	8008d6c <_dtoa_r+0x274>
 8008d80:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8008d84:	46da      	mov	sl, fp
 8008d86:	465a      	mov	r2, fp
 8008d88:	e7c6      	b.n	8008d18 <_dtoa_r+0x220>
 8008d8a:	3101      	adds	r1, #1
 8008d8c:	0040      	lsls	r0, r0, #1
 8008d8e:	e7c7      	b.n	8008d20 <_dtoa_r+0x228>
 8008d90:	636f4361 	.word	0x636f4361
 8008d94:	3fd287a7 	.word	0x3fd287a7
 8008d98:	8b60c8b3 	.word	0x8b60c8b3
 8008d9c:	3fc68a28 	.word	0x3fc68a28
 8008da0:	509f79fb 	.word	0x509f79fb
 8008da4:	3fd34413 	.word	0x3fd34413
 8008da8:	0800c1fa 	.word	0x0800c1fa
 8008dac:	0800c211 	.word	0x0800c211
 8008db0:	7ff00000 	.word	0x7ff00000
 8008db4:	0800c1f6 	.word	0x0800c1f6
 8008db8:	0800c1c5 	.word	0x0800c1c5
 8008dbc:	0800c1c4 	.word	0x0800c1c4
 8008dc0:	0800c308 	.word	0x0800c308
 8008dc4:	0800c269 	.word	0x0800c269
 8008dc8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008dcc:	f1ba 0f0e 	cmp.w	sl, #14
 8008dd0:	6010      	str	r0, [r2, #0]
 8008dd2:	d86f      	bhi.n	8008eb4 <_dtoa_r+0x3bc>
 8008dd4:	2c00      	cmp	r4, #0
 8008dd6:	d06d      	beq.n	8008eb4 <_dtoa_r+0x3bc>
 8008dd8:	f1b8 0f00 	cmp.w	r8, #0
 8008ddc:	f340 80c2 	ble.w	8008f64 <_dtoa_r+0x46c>
 8008de0:	4aca      	ldr	r2, [pc, #808]	@ (800910c <_dtoa_r+0x614>)
 8008de2:	f008 010f 	and.w	r1, r8, #15
 8008de6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008dea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008dee:	ed92 7b00 	vldr	d7, [r2]
 8008df2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008df6:	f000 80a9 	beq.w	8008f4c <_dtoa_r+0x454>
 8008dfa:	4ac5      	ldr	r2, [pc, #788]	@ (8009110 <_dtoa_r+0x618>)
 8008dfc:	ed92 6b08 	vldr	d6, [r2, #32]
 8008e00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008e04:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008e08:	f001 010f 	and.w	r1, r1, #15
 8008e0c:	2203      	movs	r2, #3
 8008e0e:	48c0      	ldr	r0, [pc, #768]	@ (8009110 <_dtoa_r+0x618>)
 8008e10:	2900      	cmp	r1, #0
 8008e12:	f040 809d 	bne.w	8008f50 <_dtoa_r+0x458>
 8008e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008e24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	f000 80c1 	beq.w	8008fb0 <_dtoa_r+0x4b8>
 8008e2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	f140 80b9 	bpl.w	8008fb0 <_dtoa_r+0x4b8>
 8008e3e:	f1ba 0f00 	cmp.w	sl, #0
 8008e42:	f000 80b5 	beq.w	8008fb0 <_dtoa_r+0x4b8>
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	dd31      	ble.n	8008eb0 <_dtoa_r+0x3b8>
 8008e4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e58:	f108 31ff 	add.w	r1, r8, #4294967295
 8008e5c:	9104      	str	r1, [sp, #16]
 8008e5e:	3201      	adds	r2, #1
 8008e60:	465c      	mov	r4, fp
 8008e62:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008e66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008e6a:	ee07 2a90 	vmov	s15, r2
 8008e6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008e72:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008e76:	ee15 2a90 	vmov	r2, s11
 8008e7a:	ec51 0b15 	vmov	r0, r1, d5
 8008e7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008e82:	2c00      	cmp	r4, #0
 8008e84:	f040 8098 	bne.w	8008fb8 <_dtoa_r+0x4c0>
 8008e88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008e8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008e90:	ec41 0b17 	vmov	d7, r0, r1
 8008e94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9c:	f300 8261 	bgt.w	8009362 <_dtoa_r+0x86a>
 8008ea0:	eeb1 7b47 	vneg.f64	d7, d7
 8008ea4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eac:	f100 80f5 	bmi.w	800909a <_dtoa_r+0x5a2>
 8008eb0:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008eb4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008eb6:	2a00      	cmp	r2, #0
 8008eb8:	f2c0 812c 	blt.w	8009114 <_dtoa_r+0x61c>
 8008ebc:	f1b8 0f0e 	cmp.w	r8, #14
 8008ec0:	f300 8128 	bgt.w	8009114 <_dtoa_r+0x61c>
 8008ec4:	4b91      	ldr	r3, [pc, #580]	@ (800910c <_dtoa_r+0x614>)
 8008ec6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008eca:	ed93 6b00 	vldr	d6, [r3]
 8008ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	da03      	bge.n	8008edc <_dtoa_r+0x3e4>
 8008ed4:	f1ba 0f00 	cmp.w	sl, #0
 8008ed8:	f340 80d2 	ble.w	8009080 <_dtoa_r+0x588>
 8008edc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ee4:	463e      	mov	r6, r7
 8008ee6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008eea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008eee:	ee15 3a10 	vmov	r3, s10
 8008ef2:	3330      	adds	r3, #48	@ 0x30
 8008ef4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ef8:	1bf3      	subs	r3, r6, r7
 8008efa:	459a      	cmp	sl, r3
 8008efc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008f00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008f04:	f040 80f8 	bne.w	80090f8 <_dtoa_r+0x600>
 8008f08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008f0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f14:	f300 80dd 	bgt.w	80090d2 <_dtoa_r+0x5da>
 8008f18:	eeb4 7b46 	vcmp.f64	d7, d6
 8008f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f20:	d104      	bne.n	8008f2c <_dtoa_r+0x434>
 8008f22:	ee15 3a10 	vmov	r3, s10
 8008f26:	07db      	lsls	r3, r3, #31
 8008f28:	f100 80d3 	bmi.w	80090d2 <_dtoa_r+0x5da>
 8008f2c:	9901      	ldr	r1, [sp, #4]
 8008f2e:	4648      	mov	r0, r9
 8008f30:	f000 fc78 	bl	8009824 <_Bfree>
 8008f34:	2300      	movs	r3, #0
 8008f36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f38:	7033      	strb	r3, [r6, #0]
 8008f3a:	f108 0301 	add.w	r3, r8, #1
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 8304 	beq.w	8009550 <_dtoa_r+0xa58>
 8008f48:	601e      	str	r6, [r3, #0]
 8008f4a:	e301      	b.n	8009550 <_dtoa_r+0xa58>
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	e75e      	b.n	8008e0e <_dtoa_r+0x316>
 8008f50:	07cc      	lsls	r4, r1, #31
 8008f52:	d504      	bpl.n	8008f5e <_dtoa_r+0x466>
 8008f54:	ed90 6b00 	vldr	d6, [r0]
 8008f58:	3201      	adds	r2, #1
 8008f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f5e:	1049      	asrs	r1, r1, #1
 8008f60:	3008      	adds	r0, #8
 8008f62:	e755      	b.n	8008e10 <_dtoa_r+0x318>
 8008f64:	d022      	beq.n	8008fac <_dtoa_r+0x4b4>
 8008f66:	f1c8 0100 	rsb	r1, r8, #0
 8008f6a:	4a68      	ldr	r2, [pc, #416]	@ (800910c <_dtoa_r+0x614>)
 8008f6c:	f001 000f 	and.w	r0, r1, #15
 8008f70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008f74:	ed92 7b00 	vldr	d7, [r2]
 8008f78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008f7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f80:	4863      	ldr	r0, [pc, #396]	@ (8009110 <_dtoa_r+0x618>)
 8008f82:	1109      	asrs	r1, r1, #4
 8008f84:	2400      	movs	r4, #0
 8008f86:	2202      	movs	r2, #2
 8008f88:	b929      	cbnz	r1, 8008f96 <_dtoa_r+0x49e>
 8008f8a:	2c00      	cmp	r4, #0
 8008f8c:	f43f af49 	beq.w	8008e22 <_dtoa_r+0x32a>
 8008f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008f94:	e745      	b.n	8008e22 <_dtoa_r+0x32a>
 8008f96:	07ce      	lsls	r6, r1, #31
 8008f98:	d505      	bpl.n	8008fa6 <_dtoa_r+0x4ae>
 8008f9a:	ed90 6b00 	vldr	d6, [r0]
 8008f9e:	3201      	adds	r2, #1
 8008fa0:	2401      	movs	r4, #1
 8008fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fa6:	1049      	asrs	r1, r1, #1
 8008fa8:	3008      	adds	r0, #8
 8008faa:	e7ed      	b.n	8008f88 <_dtoa_r+0x490>
 8008fac:	2202      	movs	r2, #2
 8008fae:	e738      	b.n	8008e22 <_dtoa_r+0x32a>
 8008fb0:	f8cd 8010 	str.w	r8, [sp, #16]
 8008fb4:	4654      	mov	r4, sl
 8008fb6:	e754      	b.n	8008e62 <_dtoa_r+0x36a>
 8008fb8:	4a54      	ldr	r2, [pc, #336]	@ (800910c <_dtoa_r+0x614>)
 8008fba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008fbe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008fc2:	9a08      	ldr	r2, [sp, #32]
 8008fc4:	ec41 0b17 	vmov	d7, r0, r1
 8008fc8:	443c      	add	r4, r7
 8008fca:	b34a      	cbz	r2, 8009020 <_dtoa_r+0x528>
 8008fcc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008fd0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008fd4:	463e      	mov	r6, r7
 8008fd6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008fda:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008fde:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008fe2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008fe6:	ee14 2a90 	vmov	r2, s9
 8008fea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008fee:	3230      	adds	r2, #48	@ 0x30
 8008ff0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008ff4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ffc:	f806 2b01 	strb.w	r2, [r6], #1
 8009000:	d438      	bmi.n	8009074 <_dtoa_r+0x57c>
 8009002:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009006:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800900a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800900e:	d462      	bmi.n	80090d6 <_dtoa_r+0x5de>
 8009010:	42a6      	cmp	r6, r4
 8009012:	f43f af4d 	beq.w	8008eb0 <_dtoa_r+0x3b8>
 8009016:	ee27 7b03 	vmul.f64	d7, d7, d3
 800901a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800901e:	e7e0      	b.n	8008fe2 <_dtoa_r+0x4ea>
 8009020:	4621      	mov	r1, r4
 8009022:	463e      	mov	r6, r7
 8009024:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009028:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800902c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009030:	ee14 2a90 	vmov	r2, s9
 8009034:	3230      	adds	r2, #48	@ 0x30
 8009036:	f806 2b01 	strb.w	r2, [r6], #1
 800903a:	42a6      	cmp	r6, r4
 800903c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009040:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009044:	d119      	bne.n	800907a <_dtoa_r+0x582>
 8009046:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800904a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800904e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009056:	dc3e      	bgt.n	80090d6 <_dtoa_r+0x5de>
 8009058:	ee35 5b47 	vsub.f64	d5, d5, d7
 800905c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009064:	f57f af24 	bpl.w	8008eb0 <_dtoa_r+0x3b8>
 8009068:	460e      	mov	r6, r1
 800906a:	3901      	subs	r1, #1
 800906c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009070:	2b30      	cmp	r3, #48	@ 0x30
 8009072:	d0f9      	beq.n	8009068 <_dtoa_r+0x570>
 8009074:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009078:	e758      	b.n	8008f2c <_dtoa_r+0x434>
 800907a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800907e:	e7d5      	b.n	800902c <_dtoa_r+0x534>
 8009080:	d10b      	bne.n	800909a <_dtoa_r+0x5a2>
 8009082:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009086:	ee26 6b07 	vmul.f64	d6, d6, d7
 800908a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800908e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009096:	f2c0 8161 	blt.w	800935c <_dtoa_r+0x864>
 800909a:	2400      	movs	r4, #0
 800909c:	4625      	mov	r5, r4
 800909e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a0:	43db      	mvns	r3, r3
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	463e      	mov	r6, r7
 80090a6:	f04f 0800 	mov.w	r8, #0
 80090aa:	4621      	mov	r1, r4
 80090ac:	4648      	mov	r0, r9
 80090ae:	f000 fbb9 	bl	8009824 <_Bfree>
 80090b2:	2d00      	cmp	r5, #0
 80090b4:	d0de      	beq.n	8009074 <_dtoa_r+0x57c>
 80090b6:	f1b8 0f00 	cmp.w	r8, #0
 80090ba:	d005      	beq.n	80090c8 <_dtoa_r+0x5d0>
 80090bc:	45a8      	cmp	r8, r5
 80090be:	d003      	beq.n	80090c8 <_dtoa_r+0x5d0>
 80090c0:	4641      	mov	r1, r8
 80090c2:	4648      	mov	r0, r9
 80090c4:	f000 fbae 	bl	8009824 <_Bfree>
 80090c8:	4629      	mov	r1, r5
 80090ca:	4648      	mov	r0, r9
 80090cc:	f000 fbaa 	bl	8009824 <_Bfree>
 80090d0:	e7d0      	b.n	8009074 <_dtoa_r+0x57c>
 80090d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80090d6:	4633      	mov	r3, r6
 80090d8:	461e      	mov	r6, r3
 80090da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090de:	2a39      	cmp	r2, #57	@ 0x39
 80090e0:	d106      	bne.n	80090f0 <_dtoa_r+0x5f8>
 80090e2:	429f      	cmp	r7, r3
 80090e4:	d1f8      	bne.n	80090d8 <_dtoa_r+0x5e0>
 80090e6:	9a04      	ldr	r2, [sp, #16]
 80090e8:	3201      	adds	r2, #1
 80090ea:	9204      	str	r2, [sp, #16]
 80090ec:	2230      	movs	r2, #48	@ 0x30
 80090ee:	703a      	strb	r2, [r7, #0]
 80090f0:	781a      	ldrb	r2, [r3, #0]
 80090f2:	3201      	adds	r2, #1
 80090f4:	701a      	strb	r2, [r3, #0]
 80090f6:	e7bd      	b.n	8009074 <_dtoa_r+0x57c>
 80090f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80090fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009104:	f47f aeef 	bne.w	8008ee6 <_dtoa_r+0x3ee>
 8009108:	e710      	b.n	8008f2c <_dtoa_r+0x434>
 800910a:	bf00      	nop
 800910c:	0800c308 	.word	0x0800c308
 8009110:	0800c2e0 	.word	0x0800c2e0
 8009114:	9908      	ldr	r1, [sp, #32]
 8009116:	2900      	cmp	r1, #0
 8009118:	f000 80e3 	beq.w	80092e2 <_dtoa_r+0x7ea>
 800911c:	9907      	ldr	r1, [sp, #28]
 800911e:	2901      	cmp	r1, #1
 8009120:	f300 80c8 	bgt.w	80092b4 <_dtoa_r+0x7bc>
 8009124:	2d00      	cmp	r5, #0
 8009126:	f000 80c1 	beq.w	80092ac <_dtoa_r+0x7b4>
 800912a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800912e:	9e05      	ldr	r6, [sp, #20]
 8009130:	461c      	mov	r4, r3
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	9b05      	ldr	r3, [sp, #20]
 8009136:	4413      	add	r3, r2
 8009138:	9305      	str	r3, [sp, #20]
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2101      	movs	r1, #1
 800913e:	4413      	add	r3, r2
 8009140:	4648      	mov	r0, r9
 8009142:	9306      	str	r3, [sp, #24]
 8009144:	f000 fc6c 	bl	8009a20 <__i2b>
 8009148:	9b04      	ldr	r3, [sp, #16]
 800914a:	4605      	mov	r5, r0
 800914c:	b166      	cbz	r6, 8009168 <_dtoa_r+0x670>
 800914e:	9a06      	ldr	r2, [sp, #24]
 8009150:	2a00      	cmp	r2, #0
 8009152:	dd09      	ble.n	8009168 <_dtoa_r+0x670>
 8009154:	42b2      	cmp	r2, r6
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	bfa8      	it	ge
 800915a:	4632      	movge	r2, r6
 800915c:	1a89      	subs	r1, r1, r2
 800915e:	9105      	str	r1, [sp, #20]
 8009160:	9906      	ldr	r1, [sp, #24]
 8009162:	1ab6      	subs	r6, r6, r2
 8009164:	1a8a      	subs	r2, r1, r2
 8009166:	9206      	str	r2, [sp, #24]
 8009168:	b1fb      	cbz	r3, 80091aa <_dtoa_r+0x6b2>
 800916a:	9a08      	ldr	r2, [sp, #32]
 800916c:	2a00      	cmp	r2, #0
 800916e:	f000 80bc 	beq.w	80092ea <_dtoa_r+0x7f2>
 8009172:	b19c      	cbz	r4, 800919c <_dtoa_r+0x6a4>
 8009174:	4629      	mov	r1, r5
 8009176:	4622      	mov	r2, r4
 8009178:	4648      	mov	r0, r9
 800917a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800917c:	f000 fd10 	bl	8009ba0 <__pow5mult>
 8009180:	9a01      	ldr	r2, [sp, #4]
 8009182:	4601      	mov	r1, r0
 8009184:	4605      	mov	r5, r0
 8009186:	4648      	mov	r0, r9
 8009188:	f000 fc60 	bl	8009a4c <__multiply>
 800918c:	9901      	ldr	r1, [sp, #4]
 800918e:	9004      	str	r0, [sp, #16]
 8009190:	4648      	mov	r0, r9
 8009192:	f000 fb47 	bl	8009824 <_Bfree>
 8009196:	9a04      	ldr	r2, [sp, #16]
 8009198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800919a:	9201      	str	r2, [sp, #4]
 800919c:	1b1a      	subs	r2, r3, r4
 800919e:	d004      	beq.n	80091aa <_dtoa_r+0x6b2>
 80091a0:	9901      	ldr	r1, [sp, #4]
 80091a2:	4648      	mov	r0, r9
 80091a4:	f000 fcfc 	bl	8009ba0 <__pow5mult>
 80091a8:	9001      	str	r0, [sp, #4]
 80091aa:	2101      	movs	r1, #1
 80091ac:	4648      	mov	r0, r9
 80091ae:	f000 fc37 	bl	8009a20 <__i2b>
 80091b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b4:	4604      	mov	r4, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 81d0 	beq.w	800955c <_dtoa_r+0xa64>
 80091bc:	461a      	mov	r2, r3
 80091be:	4601      	mov	r1, r0
 80091c0:	4648      	mov	r0, r9
 80091c2:	f000 fced 	bl	8009ba0 <__pow5mult>
 80091c6:	9b07      	ldr	r3, [sp, #28]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	4604      	mov	r4, r0
 80091cc:	f300 8095 	bgt.w	80092fa <_dtoa_r+0x802>
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f040 808b 	bne.w	80092ee <_dtoa_r+0x7f6>
 80091d8:	9b03      	ldr	r3, [sp, #12]
 80091da:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80091de:	2a00      	cmp	r2, #0
 80091e0:	f040 8087 	bne.w	80092f2 <_dtoa_r+0x7fa>
 80091e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80091e8:	0d12      	lsrs	r2, r2, #20
 80091ea:	0512      	lsls	r2, r2, #20
 80091ec:	2a00      	cmp	r2, #0
 80091ee:	f000 8082 	beq.w	80092f6 <_dtoa_r+0x7fe>
 80091f2:	9b05      	ldr	r3, [sp, #20]
 80091f4:	3301      	adds	r3, #1
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	9b06      	ldr	r3, [sp, #24]
 80091fa:	3301      	adds	r3, #1
 80091fc:	9306      	str	r3, [sp, #24]
 80091fe:	2301      	movs	r3, #1
 8009200:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 81af 	beq.w	8009568 <_dtoa_r+0xa70>
 800920a:	6922      	ldr	r2, [r4, #16]
 800920c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009210:	6910      	ldr	r0, [r2, #16]
 8009212:	f000 fbb9 	bl	8009988 <__hi0bits>
 8009216:	f1c0 0020 	rsb	r0, r0, #32
 800921a:	9b06      	ldr	r3, [sp, #24]
 800921c:	4418      	add	r0, r3
 800921e:	f010 001f 	ands.w	r0, r0, #31
 8009222:	d076      	beq.n	8009312 <_dtoa_r+0x81a>
 8009224:	f1c0 0220 	rsb	r2, r0, #32
 8009228:	2a04      	cmp	r2, #4
 800922a:	dd69      	ble.n	8009300 <_dtoa_r+0x808>
 800922c:	9b05      	ldr	r3, [sp, #20]
 800922e:	f1c0 001c 	rsb	r0, r0, #28
 8009232:	4403      	add	r3, r0
 8009234:	9305      	str	r3, [sp, #20]
 8009236:	9b06      	ldr	r3, [sp, #24]
 8009238:	4406      	add	r6, r0
 800923a:	4403      	add	r3, r0
 800923c:	9306      	str	r3, [sp, #24]
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	dd05      	ble.n	8009250 <_dtoa_r+0x758>
 8009244:	9901      	ldr	r1, [sp, #4]
 8009246:	461a      	mov	r2, r3
 8009248:	4648      	mov	r0, r9
 800924a:	f000 fd03 	bl	8009c54 <__lshift>
 800924e:	9001      	str	r0, [sp, #4]
 8009250:	9b06      	ldr	r3, [sp, #24]
 8009252:	2b00      	cmp	r3, #0
 8009254:	dd05      	ble.n	8009262 <_dtoa_r+0x76a>
 8009256:	4621      	mov	r1, r4
 8009258:	461a      	mov	r2, r3
 800925a:	4648      	mov	r0, r9
 800925c:	f000 fcfa 	bl	8009c54 <__lshift>
 8009260:	4604      	mov	r4, r0
 8009262:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009264:	2b00      	cmp	r3, #0
 8009266:	d056      	beq.n	8009316 <_dtoa_r+0x81e>
 8009268:	9801      	ldr	r0, [sp, #4]
 800926a:	4621      	mov	r1, r4
 800926c:	f000 fd5e 	bl	8009d2c <__mcmp>
 8009270:	2800      	cmp	r0, #0
 8009272:	da50      	bge.n	8009316 <_dtoa_r+0x81e>
 8009274:	f108 33ff 	add.w	r3, r8, #4294967295
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	9901      	ldr	r1, [sp, #4]
 800927c:	2300      	movs	r3, #0
 800927e:	220a      	movs	r2, #10
 8009280:	4648      	mov	r0, r9
 8009282:	f000 faf1 	bl	8009868 <__multadd>
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	9001      	str	r0, [sp, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 816e 	beq.w	800956c <_dtoa_r+0xa74>
 8009290:	4629      	mov	r1, r5
 8009292:	2300      	movs	r3, #0
 8009294:	220a      	movs	r2, #10
 8009296:	4648      	mov	r0, r9
 8009298:	f000 fae6 	bl	8009868 <__multadd>
 800929c:	f1bb 0f00 	cmp.w	fp, #0
 80092a0:	4605      	mov	r5, r0
 80092a2:	dc64      	bgt.n	800936e <_dtoa_r+0x876>
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	dc3e      	bgt.n	8009328 <_dtoa_r+0x830>
 80092aa:	e060      	b.n	800936e <_dtoa_r+0x876>
 80092ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092b2:	e73c      	b.n	800912e <_dtoa_r+0x636>
 80092b4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	bfbf      	itttt	lt
 80092bc:	1ae2      	sublt	r2, r4, r3
 80092be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80092c0:	189b      	addlt	r3, r3, r2
 80092c2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80092c4:	bfae      	itee	ge
 80092c6:	1b1c      	subge	r4, r3, r4
 80092c8:	4623      	movlt	r3, r4
 80092ca:	2400      	movlt	r4, #0
 80092cc:	f1ba 0f00 	cmp.w	sl, #0
 80092d0:	bfb5      	itete	lt
 80092d2:	9a05      	ldrlt	r2, [sp, #20]
 80092d4:	9e05      	ldrge	r6, [sp, #20]
 80092d6:	eba2 060a 	sublt.w	r6, r2, sl
 80092da:	4652      	movge	r2, sl
 80092dc:	bfb8      	it	lt
 80092de:	2200      	movlt	r2, #0
 80092e0:	e727      	b.n	8009132 <_dtoa_r+0x63a>
 80092e2:	9e05      	ldr	r6, [sp, #20]
 80092e4:	9d08      	ldr	r5, [sp, #32]
 80092e6:	461c      	mov	r4, r3
 80092e8:	e730      	b.n	800914c <_dtoa_r+0x654>
 80092ea:	461a      	mov	r2, r3
 80092ec:	e758      	b.n	80091a0 <_dtoa_r+0x6a8>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e786      	b.n	8009200 <_dtoa_r+0x708>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	e784      	b.n	8009200 <_dtoa_r+0x708>
 80092f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80092f8:	e783      	b.n	8009202 <_dtoa_r+0x70a>
 80092fa:	2300      	movs	r3, #0
 80092fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092fe:	e784      	b.n	800920a <_dtoa_r+0x712>
 8009300:	d09d      	beq.n	800923e <_dtoa_r+0x746>
 8009302:	9b05      	ldr	r3, [sp, #20]
 8009304:	321c      	adds	r2, #28
 8009306:	4413      	add	r3, r2
 8009308:	9305      	str	r3, [sp, #20]
 800930a:	9b06      	ldr	r3, [sp, #24]
 800930c:	4416      	add	r6, r2
 800930e:	4413      	add	r3, r2
 8009310:	e794      	b.n	800923c <_dtoa_r+0x744>
 8009312:	4602      	mov	r2, r0
 8009314:	e7f5      	b.n	8009302 <_dtoa_r+0x80a>
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	f8cd 8010 	str.w	r8, [sp, #16]
 800931e:	46d3      	mov	fp, sl
 8009320:	dc21      	bgt.n	8009366 <_dtoa_r+0x86e>
 8009322:	9b07      	ldr	r3, [sp, #28]
 8009324:	2b02      	cmp	r3, #2
 8009326:	dd1e      	ble.n	8009366 <_dtoa_r+0x86e>
 8009328:	f1bb 0f00 	cmp.w	fp, #0
 800932c:	f47f aeb7 	bne.w	800909e <_dtoa_r+0x5a6>
 8009330:	4621      	mov	r1, r4
 8009332:	465b      	mov	r3, fp
 8009334:	2205      	movs	r2, #5
 8009336:	4648      	mov	r0, r9
 8009338:	f000 fa96 	bl	8009868 <__multadd>
 800933c:	4601      	mov	r1, r0
 800933e:	4604      	mov	r4, r0
 8009340:	9801      	ldr	r0, [sp, #4]
 8009342:	f000 fcf3 	bl	8009d2c <__mcmp>
 8009346:	2800      	cmp	r0, #0
 8009348:	f77f aea9 	ble.w	800909e <_dtoa_r+0x5a6>
 800934c:	463e      	mov	r6, r7
 800934e:	2331      	movs	r3, #49	@ 0x31
 8009350:	f806 3b01 	strb.w	r3, [r6], #1
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	3301      	adds	r3, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	e6a4      	b.n	80090a6 <_dtoa_r+0x5ae>
 800935c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009360:	4654      	mov	r4, sl
 8009362:	4625      	mov	r5, r4
 8009364:	e7f2      	b.n	800934c <_dtoa_r+0x854>
 8009366:	9b08      	ldr	r3, [sp, #32]
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 8103 	beq.w	8009574 <_dtoa_r+0xa7c>
 800936e:	2e00      	cmp	r6, #0
 8009370:	dd05      	ble.n	800937e <_dtoa_r+0x886>
 8009372:	4629      	mov	r1, r5
 8009374:	4632      	mov	r2, r6
 8009376:	4648      	mov	r0, r9
 8009378:	f000 fc6c 	bl	8009c54 <__lshift>
 800937c:	4605      	mov	r5, r0
 800937e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d058      	beq.n	8009436 <_dtoa_r+0x93e>
 8009384:	6869      	ldr	r1, [r5, #4]
 8009386:	4648      	mov	r0, r9
 8009388:	f000 fa0c 	bl	80097a4 <_Balloc>
 800938c:	4606      	mov	r6, r0
 800938e:	b928      	cbnz	r0, 800939c <_dtoa_r+0x8a4>
 8009390:	4b82      	ldr	r3, [pc, #520]	@ (800959c <_dtoa_r+0xaa4>)
 8009392:	4602      	mov	r2, r0
 8009394:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009398:	f7ff bbc7 	b.w	8008b2a <_dtoa_r+0x32>
 800939c:	692a      	ldr	r2, [r5, #16]
 800939e:	3202      	adds	r2, #2
 80093a0:	0092      	lsls	r2, r2, #2
 80093a2:	f105 010c 	add.w	r1, r5, #12
 80093a6:	300c      	adds	r0, #12
 80093a8:	f001 ff1e 	bl	800b1e8 <memcpy>
 80093ac:	2201      	movs	r2, #1
 80093ae:	4631      	mov	r1, r6
 80093b0:	4648      	mov	r0, r9
 80093b2:	f000 fc4f 	bl	8009c54 <__lshift>
 80093b6:	1c7b      	adds	r3, r7, #1
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	eb07 030b 	add.w	r3, r7, fp
 80093be:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	46a8      	mov	r8, r5
 80093c8:	9308      	str	r3, [sp, #32]
 80093ca:	4605      	mov	r5, r0
 80093cc:	9b05      	ldr	r3, [sp, #20]
 80093ce:	9801      	ldr	r0, [sp, #4]
 80093d0:	4621      	mov	r1, r4
 80093d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80093d6:	f7ff fb07 	bl	80089e8 <quorem>
 80093da:	4641      	mov	r1, r8
 80093dc:	9002      	str	r0, [sp, #8]
 80093de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80093e2:	9801      	ldr	r0, [sp, #4]
 80093e4:	f000 fca2 	bl	8009d2c <__mcmp>
 80093e8:	462a      	mov	r2, r5
 80093ea:	9006      	str	r0, [sp, #24]
 80093ec:	4621      	mov	r1, r4
 80093ee:	4648      	mov	r0, r9
 80093f0:	f000 fcb8 	bl	8009d64 <__mdiff>
 80093f4:	68c2      	ldr	r2, [r0, #12]
 80093f6:	4606      	mov	r6, r0
 80093f8:	b9fa      	cbnz	r2, 800943a <_dtoa_r+0x942>
 80093fa:	4601      	mov	r1, r0
 80093fc:	9801      	ldr	r0, [sp, #4]
 80093fe:	f000 fc95 	bl	8009d2c <__mcmp>
 8009402:	4602      	mov	r2, r0
 8009404:	4631      	mov	r1, r6
 8009406:	4648      	mov	r0, r9
 8009408:	920a      	str	r2, [sp, #40]	@ 0x28
 800940a:	f000 fa0b 	bl	8009824 <_Bfree>
 800940e:	9b07      	ldr	r3, [sp, #28]
 8009410:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009412:	9e05      	ldr	r6, [sp, #20]
 8009414:	ea43 0102 	orr.w	r1, r3, r2
 8009418:	9b08      	ldr	r3, [sp, #32]
 800941a:	4319      	orrs	r1, r3
 800941c:	d10f      	bne.n	800943e <_dtoa_r+0x946>
 800941e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009422:	d028      	beq.n	8009476 <_dtoa_r+0x97e>
 8009424:	9b06      	ldr	r3, [sp, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	dd02      	ble.n	8009430 <_dtoa_r+0x938>
 800942a:	9b02      	ldr	r3, [sp, #8]
 800942c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009430:	f88b a000 	strb.w	sl, [fp]
 8009434:	e639      	b.n	80090aa <_dtoa_r+0x5b2>
 8009436:	4628      	mov	r0, r5
 8009438:	e7bd      	b.n	80093b6 <_dtoa_r+0x8be>
 800943a:	2201      	movs	r2, #1
 800943c:	e7e2      	b.n	8009404 <_dtoa_r+0x90c>
 800943e:	9b06      	ldr	r3, [sp, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	db04      	blt.n	800944e <_dtoa_r+0x956>
 8009444:	9907      	ldr	r1, [sp, #28]
 8009446:	430b      	orrs	r3, r1
 8009448:	9908      	ldr	r1, [sp, #32]
 800944a:	430b      	orrs	r3, r1
 800944c:	d120      	bne.n	8009490 <_dtoa_r+0x998>
 800944e:	2a00      	cmp	r2, #0
 8009450:	ddee      	ble.n	8009430 <_dtoa_r+0x938>
 8009452:	9901      	ldr	r1, [sp, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	4648      	mov	r0, r9
 8009458:	f000 fbfc 	bl	8009c54 <__lshift>
 800945c:	4621      	mov	r1, r4
 800945e:	9001      	str	r0, [sp, #4]
 8009460:	f000 fc64 	bl	8009d2c <__mcmp>
 8009464:	2800      	cmp	r0, #0
 8009466:	dc03      	bgt.n	8009470 <_dtoa_r+0x978>
 8009468:	d1e2      	bne.n	8009430 <_dtoa_r+0x938>
 800946a:	f01a 0f01 	tst.w	sl, #1
 800946e:	d0df      	beq.n	8009430 <_dtoa_r+0x938>
 8009470:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009474:	d1d9      	bne.n	800942a <_dtoa_r+0x932>
 8009476:	2339      	movs	r3, #57	@ 0x39
 8009478:	f88b 3000 	strb.w	r3, [fp]
 800947c:	4633      	mov	r3, r6
 800947e:	461e      	mov	r6, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009486:	2a39      	cmp	r2, #57	@ 0x39
 8009488:	d053      	beq.n	8009532 <_dtoa_r+0xa3a>
 800948a:	3201      	adds	r2, #1
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	e60c      	b.n	80090aa <_dtoa_r+0x5b2>
 8009490:	2a00      	cmp	r2, #0
 8009492:	dd07      	ble.n	80094a4 <_dtoa_r+0x9ac>
 8009494:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009498:	d0ed      	beq.n	8009476 <_dtoa_r+0x97e>
 800949a:	f10a 0301 	add.w	r3, sl, #1
 800949e:	f88b 3000 	strb.w	r3, [fp]
 80094a2:	e602      	b.n	80090aa <_dtoa_r+0x5b2>
 80094a4:	9b05      	ldr	r3, [sp, #20]
 80094a6:	9a05      	ldr	r2, [sp, #20]
 80094a8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80094ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d029      	beq.n	8009506 <_dtoa_r+0xa0e>
 80094b2:	9901      	ldr	r1, [sp, #4]
 80094b4:	2300      	movs	r3, #0
 80094b6:	220a      	movs	r2, #10
 80094b8:	4648      	mov	r0, r9
 80094ba:	f000 f9d5 	bl	8009868 <__multadd>
 80094be:	45a8      	cmp	r8, r5
 80094c0:	9001      	str	r0, [sp, #4]
 80094c2:	f04f 0300 	mov.w	r3, #0
 80094c6:	f04f 020a 	mov.w	r2, #10
 80094ca:	4641      	mov	r1, r8
 80094cc:	4648      	mov	r0, r9
 80094ce:	d107      	bne.n	80094e0 <_dtoa_r+0x9e8>
 80094d0:	f000 f9ca 	bl	8009868 <__multadd>
 80094d4:	4680      	mov	r8, r0
 80094d6:	4605      	mov	r5, r0
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	3301      	adds	r3, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	e775      	b.n	80093cc <_dtoa_r+0x8d4>
 80094e0:	f000 f9c2 	bl	8009868 <__multadd>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4680      	mov	r8, r0
 80094e8:	2300      	movs	r3, #0
 80094ea:	220a      	movs	r2, #10
 80094ec:	4648      	mov	r0, r9
 80094ee:	f000 f9bb 	bl	8009868 <__multadd>
 80094f2:	4605      	mov	r5, r0
 80094f4:	e7f0      	b.n	80094d8 <_dtoa_r+0x9e0>
 80094f6:	f1bb 0f00 	cmp.w	fp, #0
 80094fa:	bfcc      	ite	gt
 80094fc:	465e      	movgt	r6, fp
 80094fe:	2601      	movle	r6, #1
 8009500:	443e      	add	r6, r7
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	9901      	ldr	r1, [sp, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	4648      	mov	r0, r9
 800950c:	f000 fba2 	bl	8009c54 <__lshift>
 8009510:	4621      	mov	r1, r4
 8009512:	9001      	str	r0, [sp, #4]
 8009514:	f000 fc0a 	bl	8009d2c <__mcmp>
 8009518:	2800      	cmp	r0, #0
 800951a:	dcaf      	bgt.n	800947c <_dtoa_r+0x984>
 800951c:	d102      	bne.n	8009524 <_dtoa_r+0xa2c>
 800951e:	f01a 0f01 	tst.w	sl, #1
 8009522:	d1ab      	bne.n	800947c <_dtoa_r+0x984>
 8009524:	4633      	mov	r3, r6
 8009526:	461e      	mov	r6, r3
 8009528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800952c:	2a30      	cmp	r2, #48	@ 0x30
 800952e:	d0fa      	beq.n	8009526 <_dtoa_r+0xa2e>
 8009530:	e5bb      	b.n	80090aa <_dtoa_r+0x5b2>
 8009532:	429f      	cmp	r7, r3
 8009534:	d1a3      	bne.n	800947e <_dtoa_r+0x986>
 8009536:	9b04      	ldr	r3, [sp, #16]
 8009538:	3301      	adds	r3, #1
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	2331      	movs	r3, #49	@ 0x31
 800953e:	703b      	strb	r3, [r7, #0]
 8009540:	e5b3      	b.n	80090aa <_dtoa_r+0x5b2>
 8009542:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009544:	4f16      	ldr	r7, [pc, #88]	@ (80095a0 <_dtoa_r+0xaa8>)
 8009546:	b11b      	cbz	r3, 8009550 <_dtoa_r+0xa58>
 8009548:	f107 0308 	add.w	r3, r7, #8
 800954c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800954e:	6013      	str	r3, [r2, #0]
 8009550:	4638      	mov	r0, r7
 8009552:	b011      	add	sp, #68	@ 0x44
 8009554:	ecbd 8b02 	vpop	{d8}
 8009558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	2b01      	cmp	r3, #1
 8009560:	f77f ae36 	ble.w	80091d0 <_dtoa_r+0x6d8>
 8009564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009566:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009568:	2001      	movs	r0, #1
 800956a:	e656      	b.n	800921a <_dtoa_r+0x722>
 800956c:	f1bb 0f00 	cmp.w	fp, #0
 8009570:	f77f aed7 	ble.w	8009322 <_dtoa_r+0x82a>
 8009574:	463e      	mov	r6, r7
 8009576:	9801      	ldr	r0, [sp, #4]
 8009578:	4621      	mov	r1, r4
 800957a:	f7ff fa35 	bl	80089e8 <quorem>
 800957e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009582:	f806 ab01 	strb.w	sl, [r6], #1
 8009586:	1bf2      	subs	r2, r6, r7
 8009588:	4593      	cmp	fp, r2
 800958a:	ddb4      	ble.n	80094f6 <_dtoa_r+0x9fe>
 800958c:	9901      	ldr	r1, [sp, #4]
 800958e:	2300      	movs	r3, #0
 8009590:	220a      	movs	r2, #10
 8009592:	4648      	mov	r0, r9
 8009594:	f000 f968 	bl	8009868 <__multadd>
 8009598:	9001      	str	r0, [sp, #4]
 800959a:	e7ec      	b.n	8009576 <_dtoa_r+0xa7e>
 800959c:	0800c269 	.word	0x0800c269
 80095a0:	0800c1ed 	.word	0x0800c1ed

080095a4 <_free_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4605      	mov	r5, r0
 80095a8:	2900      	cmp	r1, #0
 80095aa:	d041      	beq.n	8009630 <_free_r+0x8c>
 80095ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b0:	1f0c      	subs	r4, r1, #4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	bfb8      	it	lt
 80095b6:	18e4      	addlt	r4, r4, r3
 80095b8:	f000 f8e8 	bl	800978c <__malloc_lock>
 80095bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009634 <_free_r+0x90>)
 80095be:	6813      	ldr	r3, [r2, #0]
 80095c0:	b933      	cbnz	r3, 80095d0 <_free_r+0x2c>
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	6014      	str	r4, [r2, #0]
 80095c6:	4628      	mov	r0, r5
 80095c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095cc:	f000 b8e4 	b.w	8009798 <__malloc_unlock>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d908      	bls.n	80095e6 <_free_r+0x42>
 80095d4:	6820      	ldr	r0, [r4, #0]
 80095d6:	1821      	adds	r1, r4, r0
 80095d8:	428b      	cmp	r3, r1
 80095da:	bf01      	itttt	eq
 80095dc:	6819      	ldreq	r1, [r3, #0]
 80095de:	685b      	ldreq	r3, [r3, #4]
 80095e0:	1809      	addeq	r1, r1, r0
 80095e2:	6021      	streq	r1, [r4, #0]
 80095e4:	e7ed      	b.n	80095c2 <_free_r+0x1e>
 80095e6:	461a      	mov	r2, r3
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	b10b      	cbz	r3, 80095f0 <_free_r+0x4c>
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d9fa      	bls.n	80095e6 <_free_r+0x42>
 80095f0:	6811      	ldr	r1, [r2, #0]
 80095f2:	1850      	adds	r0, r2, r1
 80095f4:	42a0      	cmp	r0, r4
 80095f6:	d10b      	bne.n	8009610 <_free_r+0x6c>
 80095f8:	6820      	ldr	r0, [r4, #0]
 80095fa:	4401      	add	r1, r0
 80095fc:	1850      	adds	r0, r2, r1
 80095fe:	4283      	cmp	r3, r0
 8009600:	6011      	str	r1, [r2, #0]
 8009602:	d1e0      	bne.n	80095c6 <_free_r+0x22>
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6053      	str	r3, [r2, #4]
 800960a:	4408      	add	r0, r1
 800960c:	6010      	str	r0, [r2, #0]
 800960e:	e7da      	b.n	80095c6 <_free_r+0x22>
 8009610:	d902      	bls.n	8009618 <_free_r+0x74>
 8009612:	230c      	movs	r3, #12
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	e7d6      	b.n	80095c6 <_free_r+0x22>
 8009618:	6820      	ldr	r0, [r4, #0]
 800961a:	1821      	adds	r1, r4, r0
 800961c:	428b      	cmp	r3, r1
 800961e:	bf04      	itt	eq
 8009620:	6819      	ldreq	r1, [r3, #0]
 8009622:	685b      	ldreq	r3, [r3, #4]
 8009624:	6063      	str	r3, [r4, #4]
 8009626:	bf04      	itt	eq
 8009628:	1809      	addeq	r1, r1, r0
 800962a:	6021      	streq	r1, [r4, #0]
 800962c:	6054      	str	r4, [r2, #4]
 800962e:	e7ca      	b.n	80095c6 <_free_r+0x22>
 8009630:	bd38      	pop	{r3, r4, r5, pc}
 8009632:	bf00      	nop
 8009634:	24000588 	.word	0x24000588

08009638 <malloc>:
 8009638:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <malloc+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f000 b825 	b.w	800968c <_malloc_r>
 8009642:	bf00      	nop
 8009644:	240000bc 	.word	0x240000bc

08009648 <sbrk_aligned>:
 8009648:	b570      	push	{r4, r5, r6, lr}
 800964a:	4e0f      	ldr	r6, [pc, #60]	@ (8009688 <sbrk_aligned+0x40>)
 800964c:	460c      	mov	r4, r1
 800964e:	6831      	ldr	r1, [r6, #0]
 8009650:	4605      	mov	r5, r0
 8009652:	b911      	cbnz	r1, 800965a <sbrk_aligned+0x12>
 8009654:	f001 fdb8 	bl	800b1c8 <_sbrk_r>
 8009658:	6030      	str	r0, [r6, #0]
 800965a:	4621      	mov	r1, r4
 800965c:	4628      	mov	r0, r5
 800965e:	f001 fdb3 	bl	800b1c8 <_sbrk_r>
 8009662:	1c43      	adds	r3, r0, #1
 8009664:	d103      	bne.n	800966e <sbrk_aligned+0x26>
 8009666:	f04f 34ff 	mov.w	r4, #4294967295
 800966a:	4620      	mov	r0, r4
 800966c:	bd70      	pop	{r4, r5, r6, pc}
 800966e:	1cc4      	adds	r4, r0, #3
 8009670:	f024 0403 	bic.w	r4, r4, #3
 8009674:	42a0      	cmp	r0, r4
 8009676:	d0f8      	beq.n	800966a <sbrk_aligned+0x22>
 8009678:	1a21      	subs	r1, r4, r0
 800967a:	4628      	mov	r0, r5
 800967c:	f001 fda4 	bl	800b1c8 <_sbrk_r>
 8009680:	3001      	adds	r0, #1
 8009682:	d1f2      	bne.n	800966a <sbrk_aligned+0x22>
 8009684:	e7ef      	b.n	8009666 <sbrk_aligned+0x1e>
 8009686:	bf00      	nop
 8009688:	24000584 	.word	0x24000584

0800968c <_malloc_r>:
 800968c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009690:	1ccd      	adds	r5, r1, #3
 8009692:	f025 0503 	bic.w	r5, r5, #3
 8009696:	3508      	adds	r5, #8
 8009698:	2d0c      	cmp	r5, #12
 800969a:	bf38      	it	cc
 800969c:	250c      	movcc	r5, #12
 800969e:	2d00      	cmp	r5, #0
 80096a0:	4606      	mov	r6, r0
 80096a2:	db01      	blt.n	80096a8 <_malloc_r+0x1c>
 80096a4:	42a9      	cmp	r1, r5
 80096a6:	d904      	bls.n	80096b2 <_malloc_r+0x26>
 80096a8:	230c      	movs	r3, #12
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009788 <_malloc_r+0xfc>
 80096b6:	f000 f869 	bl	800978c <__malloc_lock>
 80096ba:	f8d8 3000 	ldr.w	r3, [r8]
 80096be:	461c      	mov	r4, r3
 80096c0:	bb44      	cbnz	r4, 8009714 <_malloc_r+0x88>
 80096c2:	4629      	mov	r1, r5
 80096c4:	4630      	mov	r0, r6
 80096c6:	f7ff ffbf 	bl	8009648 <sbrk_aligned>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	4604      	mov	r4, r0
 80096ce:	d158      	bne.n	8009782 <_malloc_r+0xf6>
 80096d0:	f8d8 4000 	ldr.w	r4, [r8]
 80096d4:	4627      	mov	r7, r4
 80096d6:	2f00      	cmp	r7, #0
 80096d8:	d143      	bne.n	8009762 <_malloc_r+0xd6>
 80096da:	2c00      	cmp	r4, #0
 80096dc:	d04b      	beq.n	8009776 <_malloc_r+0xea>
 80096de:	6823      	ldr	r3, [r4, #0]
 80096e0:	4639      	mov	r1, r7
 80096e2:	4630      	mov	r0, r6
 80096e4:	eb04 0903 	add.w	r9, r4, r3
 80096e8:	f001 fd6e 	bl	800b1c8 <_sbrk_r>
 80096ec:	4581      	cmp	r9, r0
 80096ee:	d142      	bne.n	8009776 <_malloc_r+0xea>
 80096f0:	6821      	ldr	r1, [r4, #0]
 80096f2:	1a6d      	subs	r5, r5, r1
 80096f4:	4629      	mov	r1, r5
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7ff ffa6 	bl	8009648 <sbrk_aligned>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d03a      	beq.n	8009776 <_malloc_r+0xea>
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	442b      	add	r3, r5
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	f8d8 3000 	ldr.w	r3, [r8]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	bb62      	cbnz	r2, 8009768 <_malloc_r+0xdc>
 800970e:	f8c8 7000 	str.w	r7, [r8]
 8009712:	e00f      	b.n	8009734 <_malloc_r+0xa8>
 8009714:	6822      	ldr	r2, [r4, #0]
 8009716:	1b52      	subs	r2, r2, r5
 8009718:	d420      	bmi.n	800975c <_malloc_r+0xd0>
 800971a:	2a0b      	cmp	r2, #11
 800971c:	d917      	bls.n	800974e <_malloc_r+0xc2>
 800971e:	1961      	adds	r1, r4, r5
 8009720:	42a3      	cmp	r3, r4
 8009722:	6025      	str	r5, [r4, #0]
 8009724:	bf18      	it	ne
 8009726:	6059      	strne	r1, [r3, #4]
 8009728:	6863      	ldr	r3, [r4, #4]
 800972a:	bf08      	it	eq
 800972c:	f8c8 1000 	streq.w	r1, [r8]
 8009730:	5162      	str	r2, [r4, r5]
 8009732:	604b      	str	r3, [r1, #4]
 8009734:	4630      	mov	r0, r6
 8009736:	f000 f82f 	bl	8009798 <__malloc_unlock>
 800973a:	f104 000b 	add.w	r0, r4, #11
 800973e:	1d23      	adds	r3, r4, #4
 8009740:	f020 0007 	bic.w	r0, r0, #7
 8009744:	1ac2      	subs	r2, r0, r3
 8009746:	bf1c      	itt	ne
 8009748:	1a1b      	subne	r3, r3, r0
 800974a:	50a3      	strne	r3, [r4, r2]
 800974c:	e7af      	b.n	80096ae <_malloc_r+0x22>
 800974e:	6862      	ldr	r2, [r4, #4]
 8009750:	42a3      	cmp	r3, r4
 8009752:	bf0c      	ite	eq
 8009754:	f8c8 2000 	streq.w	r2, [r8]
 8009758:	605a      	strne	r2, [r3, #4]
 800975a:	e7eb      	b.n	8009734 <_malloc_r+0xa8>
 800975c:	4623      	mov	r3, r4
 800975e:	6864      	ldr	r4, [r4, #4]
 8009760:	e7ae      	b.n	80096c0 <_malloc_r+0x34>
 8009762:	463c      	mov	r4, r7
 8009764:	687f      	ldr	r7, [r7, #4]
 8009766:	e7b6      	b.n	80096d6 <_malloc_r+0x4a>
 8009768:	461a      	mov	r2, r3
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	42a3      	cmp	r3, r4
 800976e:	d1fb      	bne.n	8009768 <_malloc_r+0xdc>
 8009770:	2300      	movs	r3, #0
 8009772:	6053      	str	r3, [r2, #4]
 8009774:	e7de      	b.n	8009734 <_malloc_r+0xa8>
 8009776:	230c      	movs	r3, #12
 8009778:	6033      	str	r3, [r6, #0]
 800977a:	4630      	mov	r0, r6
 800977c:	f000 f80c 	bl	8009798 <__malloc_unlock>
 8009780:	e794      	b.n	80096ac <_malloc_r+0x20>
 8009782:	6005      	str	r5, [r0, #0]
 8009784:	e7d6      	b.n	8009734 <_malloc_r+0xa8>
 8009786:	bf00      	nop
 8009788:	24000588 	.word	0x24000588

0800978c <__malloc_lock>:
 800978c:	4801      	ldr	r0, [pc, #4]	@ (8009794 <__malloc_lock+0x8>)
 800978e:	f7ff b922 	b.w	80089d6 <__retarget_lock_acquire_recursive>
 8009792:	bf00      	nop
 8009794:	24000580 	.word	0x24000580

08009798 <__malloc_unlock>:
 8009798:	4801      	ldr	r0, [pc, #4]	@ (80097a0 <__malloc_unlock+0x8>)
 800979a:	f7ff b91d 	b.w	80089d8 <__retarget_lock_release_recursive>
 800979e:	bf00      	nop
 80097a0:	24000580 	.word	0x24000580

080097a4 <_Balloc>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	69c6      	ldr	r6, [r0, #28]
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	b976      	cbnz	r6, 80097cc <_Balloc+0x28>
 80097ae:	2010      	movs	r0, #16
 80097b0:	f7ff ff42 	bl	8009638 <malloc>
 80097b4:	4602      	mov	r2, r0
 80097b6:	61e0      	str	r0, [r4, #28]
 80097b8:	b920      	cbnz	r0, 80097c4 <_Balloc+0x20>
 80097ba:	4b18      	ldr	r3, [pc, #96]	@ (800981c <_Balloc+0x78>)
 80097bc:	4818      	ldr	r0, [pc, #96]	@ (8009820 <_Balloc+0x7c>)
 80097be:	216b      	movs	r1, #107	@ 0x6b
 80097c0:	f001 fd2a 	bl	800b218 <__assert_func>
 80097c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097c8:	6006      	str	r6, [r0, #0]
 80097ca:	60c6      	str	r6, [r0, #12]
 80097cc:	69e6      	ldr	r6, [r4, #28]
 80097ce:	68f3      	ldr	r3, [r6, #12]
 80097d0:	b183      	cbz	r3, 80097f4 <_Balloc+0x50>
 80097d2:	69e3      	ldr	r3, [r4, #28]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80097da:	b9b8      	cbnz	r0, 800980c <_Balloc+0x68>
 80097dc:	2101      	movs	r1, #1
 80097de:	fa01 f605 	lsl.w	r6, r1, r5
 80097e2:	1d72      	adds	r2, r6, #5
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	4620      	mov	r0, r4
 80097e8:	f001 fd34 	bl	800b254 <_calloc_r>
 80097ec:	b160      	cbz	r0, 8009808 <_Balloc+0x64>
 80097ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097f2:	e00e      	b.n	8009812 <_Balloc+0x6e>
 80097f4:	2221      	movs	r2, #33	@ 0x21
 80097f6:	2104      	movs	r1, #4
 80097f8:	4620      	mov	r0, r4
 80097fa:	f001 fd2b 	bl	800b254 <_calloc_r>
 80097fe:	69e3      	ldr	r3, [r4, #28]
 8009800:	60f0      	str	r0, [r6, #12]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d1e4      	bne.n	80097d2 <_Balloc+0x2e>
 8009808:	2000      	movs	r0, #0
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	6802      	ldr	r2, [r0, #0]
 800980e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009812:	2300      	movs	r3, #0
 8009814:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009818:	e7f7      	b.n	800980a <_Balloc+0x66>
 800981a:	bf00      	nop
 800981c:	0800c1fa 	.word	0x0800c1fa
 8009820:	0800c27a 	.word	0x0800c27a

08009824 <_Bfree>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	69c6      	ldr	r6, [r0, #28]
 8009828:	4605      	mov	r5, r0
 800982a:	460c      	mov	r4, r1
 800982c:	b976      	cbnz	r6, 800984c <_Bfree+0x28>
 800982e:	2010      	movs	r0, #16
 8009830:	f7ff ff02 	bl	8009638 <malloc>
 8009834:	4602      	mov	r2, r0
 8009836:	61e8      	str	r0, [r5, #28]
 8009838:	b920      	cbnz	r0, 8009844 <_Bfree+0x20>
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <_Bfree+0x3c>)
 800983c:	4809      	ldr	r0, [pc, #36]	@ (8009864 <_Bfree+0x40>)
 800983e:	218f      	movs	r1, #143	@ 0x8f
 8009840:	f001 fcea 	bl	800b218 <__assert_func>
 8009844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009848:	6006      	str	r6, [r0, #0]
 800984a:	60c6      	str	r6, [r0, #12]
 800984c:	b13c      	cbz	r4, 800985e <_Bfree+0x3a>
 800984e:	69eb      	ldr	r3, [r5, #28]
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009858:	6021      	str	r1, [r4, #0]
 800985a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	0800c1fa 	.word	0x0800c1fa
 8009864:	0800c27a 	.word	0x0800c27a

08009868 <__multadd>:
 8009868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986c:	690d      	ldr	r5, [r1, #16]
 800986e:	4607      	mov	r7, r0
 8009870:	460c      	mov	r4, r1
 8009872:	461e      	mov	r6, r3
 8009874:	f101 0c14 	add.w	ip, r1, #20
 8009878:	2000      	movs	r0, #0
 800987a:	f8dc 3000 	ldr.w	r3, [ip]
 800987e:	b299      	uxth	r1, r3
 8009880:	fb02 6101 	mla	r1, r2, r1, r6
 8009884:	0c1e      	lsrs	r6, r3, #16
 8009886:	0c0b      	lsrs	r3, r1, #16
 8009888:	fb02 3306 	mla	r3, r2, r6, r3
 800988c:	b289      	uxth	r1, r1
 800988e:	3001      	adds	r0, #1
 8009890:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009894:	4285      	cmp	r5, r0
 8009896:	f84c 1b04 	str.w	r1, [ip], #4
 800989a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800989e:	dcec      	bgt.n	800987a <__multadd+0x12>
 80098a0:	b30e      	cbz	r6, 80098e6 <__multadd+0x7e>
 80098a2:	68a3      	ldr	r3, [r4, #8]
 80098a4:	42ab      	cmp	r3, r5
 80098a6:	dc19      	bgt.n	80098dc <__multadd+0x74>
 80098a8:	6861      	ldr	r1, [r4, #4]
 80098aa:	4638      	mov	r0, r7
 80098ac:	3101      	adds	r1, #1
 80098ae:	f7ff ff79 	bl	80097a4 <_Balloc>
 80098b2:	4680      	mov	r8, r0
 80098b4:	b928      	cbnz	r0, 80098c2 <__multadd+0x5a>
 80098b6:	4602      	mov	r2, r0
 80098b8:	4b0c      	ldr	r3, [pc, #48]	@ (80098ec <__multadd+0x84>)
 80098ba:	480d      	ldr	r0, [pc, #52]	@ (80098f0 <__multadd+0x88>)
 80098bc:	21ba      	movs	r1, #186	@ 0xba
 80098be:	f001 fcab 	bl	800b218 <__assert_func>
 80098c2:	6922      	ldr	r2, [r4, #16]
 80098c4:	3202      	adds	r2, #2
 80098c6:	f104 010c 	add.w	r1, r4, #12
 80098ca:	0092      	lsls	r2, r2, #2
 80098cc:	300c      	adds	r0, #12
 80098ce:	f001 fc8b 	bl	800b1e8 <memcpy>
 80098d2:	4621      	mov	r1, r4
 80098d4:	4638      	mov	r0, r7
 80098d6:	f7ff ffa5 	bl	8009824 <_Bfree>
 80098da:	4644      	mov	r4, r8
 80098dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80098e0:	3501      	adds	r5, #1
 80098e2:	615e      	str	r6, [r3, #20]
 80098e4:	6125      	str	r5, [r4, #16]
 80098e6:	4620      	mov	r0, r4
 80098e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ec:	0800c269 	.word	0x0800c269
 80098f0:	0800c27a 	.word	0x0800c27a

080098f4 <__s2b>:
 80098f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f8:	460c      	mov	r4, r1
 80098fa:	4615      	mov	r5, r2
 80098fc:	461f      	mov	r7, r3
 80098fe:	2209      	movs	r2, #9
 8009900:	3308      	adds	r3, #8
 8009902:	4606      	mov	r6, r0
 8009904:	fb93 f3f2 	sdiv	r3, r3, r2
 8009908:	2100      	movs	r1, #0
 800990a:	2201      	movs	r2, #1
 800990c:	429a      	cmp	r2, r3
 800990e:	db09      	blt.n	8009924 <__s2b+0x30>
 8009910:	4630      	mov	r0, r6
 8009912:	f7ff ff47 	bl	80097a4 <_Balloc>
 8009916:	b940      	cbnz	r0, 800992a <__s2b+0x36>
 8009918:	4602      	mov	r2, r0
 800991a:	4b19      	ldr	r3, [pc, #100]	@ (8009980 <__s2b+0x8c>)
 800991c:	4819      	ldr	r0, [pc, #100]	@ (8009984 <__s2b+0x90>)
 800991e:	21d3      	movs	r1, #211	@ 0xd3
 8009920:	f001 fc7a 	bl	800b218 <__assert_func>
 8009924:	0052      	lsls	r2, r2, #1
 8009926:	3101      	adds	r1, #1
 8009928:	e7f0      	b.n	800990c <__s2b+0x18>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	6143      	str	r3, [r0, #20]
 800992e:	2d09      	cmp	r5, #9
 8009930:	f04f 0301 	mov.w	r3, #1
 8009934:	6103      	str	r3, [r0, #16]
 8009936:	dd16      	ble.n	8009966 <__s2b+0x72>
 8009938:	f104 0909 	add.w	r9, r4, #9
 800993c:	46c8      	mov	r8, r9
 800993e:	442c      	add	r4, r5
 8009940:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009944:	4601      	mov	r1, r0
 8009946:	3b30      	subs	r3, #48	@ 0x30
 8009948:	220a      	movs	r2, #10
 800994a:	4630      	mov	r0, r6
 800994c:	f7ff ff8c 	bl	8009868 <__multadd>
 8009950:	45a0      	cmp	r8, r4
 8009952:	d1f5      	bne.n	8009940 <__s2b+0x4c>
 8009954:	f1a5 0408 	sub.w	r4, r5, #8
 8009958:	444c      	add	r4, r9
 800995a:	1b2d      	subs	r5, r5, r4
 800995c:	1963      	adds	r3, r4, r5
 800995e:	42bb      	cmp	r3, r7
 8009960:	db04      	blt.n	800996c <__s2b+0x78>
 8009962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009966:	340a      	adds	r4, #10
 8009968:	2509      	movs	r5, #9
 800996a:	e7f6      	b.n	800995a <__s2b+0x66>
 800996c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009970:	4601      	mov	r1, r0
 8009972:	3b30      	subs	r3, #48	@ 0x30
 8009974:	220a      	movs	r2, #10
 8009976:	4630      	mov	r0, r6
 8009978:	f7ff ff76 	bl	8009868 <__multadd>
 800997c:	e7ee      	b.n	800995c <__s2b+0x68>
 800997e:	bf00      	nop
 8009980:	0800c269 	.word	0x0800c269
 8009984:	0800c27a 	.word	0x0800c27a

08009988 <__hi0bits>:
 8009988:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800998c:	4603      	mov	r3, r0
 800998e:	bf36      	itet	cc
 8009990:	0403      	lslcc	r3, r0, #16
 8009992:	2000      	movcs	r0, #0
 8009994:	2010      	movcc	r0, #16
 8009996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800999a:	bf3c      	itt	cc
 800999c:	021b      	lslcc	r3, r3, #8
 800999e:	3008      	addcc	r0, #8
 80099a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099a4:	bf3c      	itt	cc
 80099a6:	011b      	lslcc	r3, r3, #4
 80099a8:	3004      	addcc	r0, #4
 80099aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099ae:	bf3c      	itt	cc
 80099b0:	009b      	lslcc	r3, r3, #2
 80099b2:	3002      	addcc	r0, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	db05      	blt.n	80099c4 <__hi0bits+0x3c>
 80099b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80099bc:	f100 0001 	add.w	r0, r0, #1
 80099c0:	bf08      	it	eq
 80099c2:	2020      	moveq	r0, #32
 80099c4:	4770      	bx	lr

080099c6 <__lo0bits>:
 80099c6:	6803      	ldr	r3, [r0, #0]
 80099c8:	4602      	mov	r2, r0
 80099ca:	f013 0007 	ands.w	r0, r3, #7
 80099ce:	d00b      	beq.n	80099e8 <__lo0bits+0x22>
 80099d0:	07d9      	lsls	r1, r3, #31
 80099d2:	d421      	bmi.n	8009a18 <__lo0bits+0x52>
 80099d4:	0798      	lsls	r0, r3, #30
 80099d6:	bf49      	itett	mi
 80099d8:	085b      	lsrmi	r3, r3, #1
 80099da:	089b      	lsrpl	r3, r3, #2
 80099dc:	2001      	movmi	r0, #1
 80099de:	6013      	strmi	r3, [r2, #0]
 80099e0:	bf5c      	itt	pl
 80099e2:	6013      	strpl	r3, [r2, #0]
 80099e4:	2002      	movpl	r0, #2
 80099e6:	4770      	bx	lr
 80099e8:	b299      	uxth	r1, r3
 80099ea:	b909      	cbnz	r1, 80099f0 <__lo0bits+0x2a>
 80099ec:	0c1b      	lsrs	r3, r3, #16
 80099ee:	2010      	movs	r0, #16
 80099f0:	b2d9      	uxtb	r1, r3
 80099f2:	b909      	cbnz	r1, 80099f8 <__lo0bits+0x32>
 80099f4:	3008      	adds	r0, #8
 80099f6:	0a1b      	lsrs	r3, r3, #8
 80099f8:	0719      	lsls	r1, r3, #28
 80099fa:	bf04      	itt	eq
 80099fc:	091b      	lsreq	r3, r3, #4
 80099fe:	3004      	addeq	r0, #4
 8009a00:	0799      	lsls	r1, r3, #30
 8009a02:	bf04      	itt	eq
 8009a04:	089b      	lsreq	r3, r3, #2
 8009a06:	3002      	addeq	r0, #2
 8009a08:	07d9      	lsls	r1, r3, #31
 8009a0a:	d403      	bmi.n	8009a14 <__lo0bits+0x4e>
 8009a0c:	085b      	lsrs	r3, r3, #1
 8009a0e:	f100 0001 	add.w	r0, r0, #1
 8009a12:	d003      	beq.n	8009a1c <__lo0bits+0x56>
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	4770      	bx	lr
 8009a18:	2000      	movs	r0, #0
 8009a1a:	4770      	bx	lr
 8009a1c:	2020      	movs	r0, #32
 8009a1e:	4770      	bx	lr

08009a20 <__i2b>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	460c      	mov	r4, r1
 8009a24:	2101      	movs	r1, #1
 8009a26:	f7ff febd 	bl	80097a4 <_Balloc>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	b928      	cbnz	r0, 8009a3a <__i2b+0x1a>
 8009a2e:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <__i2b+0x24>)
 8009a30:	4805      	ldr	r0, [pc, #20]	@ (8009a48 <__i2b+0x28>)
 8009a32:	f240 1145 	movw	r1, #325	@ 0x145
 8009a36:	f001 fbef 	bl	800b218 <__assert_func>
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	6144      	str	r4, [r0, #20]
 8009a3e:	6103      	str	r3, [r0, #16]
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	bf00      	nop
 8009a44:	0800c269 	.word	0x0800c269
 8009a48:	0800c27a 	.word	0x0800c27a

08009a4c <__multiply>:
 8009a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a50:	4614      	mov	r4, r2
 8009a52:	690a      	ldr	r2, [r1, #16]
 8009a54:	6923      	ldr	r3, [r4, #16]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	bfa8      	it	ge
 8009a5a:	4623      	movge	r3, r4
 8009a5c:	460f      	mov	r7, r1
 8009a5e:	bfa4      	itt	ge
 8009a60:	460c      	movge	r4, r1
 8009a62:	461f      	movge	r7, r3
 8009a64:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009a68:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009a6c:	68a3      	ldr	r3, [r4, #8]
 8009a6e:	6861      	ldr	r1, [r4, #4]
 8009a70:	eb0a 0609 	add.w	r6, sl, r9
 8009a74:	42b3      	cmp	r3, r6
 8009a76:	b085      	sub	sp, #20
 8009a78:	bfb8      	it	lt
 8009a7a:	3101      	addlt	r1, #1
 8009a7c:	f7ff fe92 	bl	80097a4 <_Balloc>
 8009a80:	b930      	cbnz	r0, 8009a90 <__multiply+0x44>
 8009a82:	4602      	mov	r2, r0
 8009a84:	4b44      	ldr	r3, [pc, #272]	@ (8009b98 <__multiply+0x14c>)
 8009a86:	4845      	ldr	r0, [pc, #276]	@ (8009b9c <__multiply+0x150>)
 8009a88:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009a8c:	f001 fbc4 	bl	800b218 <__assert_func>
 8009a90:	f100 0514 	add.w	r5, r0, #20
 8009a94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009a98:	462b      	mov	r3, r5
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4543      	cmp	r3, r8
 8009a9e:	d321      	bcc.n	8009ae4 <__multiply+0x98>
 8009aa0:	f107 0114 	add.w	r1, r7, #20
 8009aa4:	f104 0214 	add.w	r2, r4, #20
 8009aa8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009aac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009ab0:	9302      	str	r3, [sp, #8]
 8009ab2:	1b13      	subs	r3, r2, r4
 8009ab4:	3b15      	subs	r3, #21
 8009ab6:	f023 0303 	bic.w	r3, r3, #3
 8009aba:	3304      	adds	r3, #4
 8009abc:	f104 0715 	add.w	r7, r4, #21
 8009ac0:	42ba      	cmp	r2, r7
 8009ac2:	bf38      	it	cc
 8009ac4:	2304      	movcc	r3, #4
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	9b02      	ldr	r3, [sp, #8]
 8009aca:	9103      	str	r1, [sp, #12]
 8009acc:	428b      	cmp	r3, r1
 8009ace:	d80c      	bhi.n	8009aea <__multiply+0x9e>
 8009ad0:	2e00      	cmp	r6, #0
 8009ad2:	dd03      	ble.n	8009adc <__multiply+0x90>
 8009ad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d05b      	beq.n	8009b94 <__multiply+0x148>
 8009adc:	6106      	str	r6, [r0, #16]
 8009ade:	b005      	add	sp, #20
 8009ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae4:	f843 2b04 	str.w	r2, [r3], #4
 8009ae8:	e7d8      	b.n	8009a9c <__multiply+0x50>
 8009aea:	f8b1 a000 	ldrh.w	sl, [r1]
 8009aee:	f1ba 0f00 	cmp.w	sl, #0
 8009af2:	d024      	beq.n	8009b3e <__multiply+0xf2>
 8009af4:	f104 0e14 	add.w	lr, r4, #20
 8009af8:	46a9      	mov	r9, r5
 8009afa:	f04f 0c00 	mov.w	ip, #0
 8009afe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b02:	f8d9 3000 	ldr.w	r3, [r9]
 8009b06:	fa1f fb87 	uxth.w	fp, r7
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b10:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b14:	f8d9 7000 	ldr.w	r7, [r9]
 8009b18:	4463      	add	r3, ip
 8009b1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b1e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b22:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b2c:	4572      	cmp	r2, lr
 8009b2e:	f849 3b04 	str.w	r3, [r9], #4
 8009b32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b36:	d8e2      	bhi.n	8009afe <__multiply+0xb2>
 8009b38:	9b01      	ldr	r3, [sp, #4]
 8009b3a:	f845 c003 	str.w	ip, [r5, r3]
 8009b3e:	9b03      	ldr	r3, [sp, #12]
 8009b40:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009b44:	3104      	adds	r1, #4
 8009b46:	f1b9 0f00 	cmp.w	r9, #0
 8009b4a:	d021      	beq.n	8009b90 <__multiply+0x144>
 8009b4c:	682b      	ldr	r3, [r5, #0]
 8009b4e:	f104 0c14 	add.w	ip, r4, #20
 8009b52:	46ae      	mov	lr, r5
 8009b54:	f04f 0a00 	mov.w	sl, #0
 8009b58:	f8bc b000 	ldrh.w	fp, [ip]
 8009b5c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009b60:	fb09 770b 	mla	r7, r9, fp, r7
 8009b64:	4457      	add	r7, sl
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b6c:	f84e 3b04 	str.w	r3, [lr], #4
 8009b70:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009b74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b78:	f8be 3000 	ldrh.w	r3, [lr]
 8009b7c:	fb09 330a 	mla	r3, r9, sl, r3
 8009b80:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009b84:	4562      	cmp	r2, ip
 8009b86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b8a:	d8e5      	bhi.n	8009b58 <__multiply+0x10c>
 8009b8c:	9f01      	ldr	r7, [sp, #4]
 8009b8e:	51eb      	str	r3, [r5, r7]
 8009b90:	3504      	adds	r5, #4
 8009b92:	e799      	b.n	8009ac8 <__multiply+0x7c>
 8009b94:	3e01      	subs	r6, #1
 8009b96:	e79b      	b.n	8009ad0 <__multiply+0x84>
 8009b98:	0800c269 	.word	0x0800c269
 8009b9c:	0800c27a 	.word	0x0800c27a

08009ba0 <__pow5mult>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	4615      	mov	r5, r2
 8009ba6:	f012 0203 	ands.w	r2, r2, #3
 8009baa:	4607      	mov	r7, r0
 8009bac:	460e      	mov	r6, r1
 8009bae:	d007      	beq.n	8009bc0 <__pow5mult+0x20>
 8009bb0:	4c25      	ldr	r4, [pc, #148]	@ (8009c48 <__pow5mult+0xa8>)
 8009bb2:	3a01      	subs	r2, #1
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009bba:	f7ff fe55 	bl	8009868 <__multadd>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	10ad      	asrs	r5, r5, #2
 8009bc2:	d03d      	beq.n	8009c40 <__pow5mult+0xa0>
 8009bc4:	69fc      	ldr	r4, [r7, #28]
 8009bc6:	b97c      	cbnz	r4, 8009be8 <__pow5mult+0x48>
 8009bc8:	2010      	movs	r0, #16
 8009bca:	f7ff fd35 	bl	8009638 <malloc>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	61f8      	str	r0, [r7, #28]
 8009bd2:	b928      	cbnz	r0, 8009be0 <__pow5mult+0x40>
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <__pow5mult+0xac>)
 8009bd6:	481e      	ldr	r0, [pc, #120]	@ (8009c50 <__pow5mult+0xb0>)
 8009bd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009bdc:	f001 fb1c 	bl	800b218 <__assert_func>
 8009be0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009be4:	6004      	str	r4, [r0, #0]
 8009be6:	60c4      	str	r4, [r0, #12]
 8009be8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009bec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009bf0:	b94c      	cbnz	r4, 8009c06 <__pow5mult+0x66>
 8009bf2:	f240 2171 	movw	r1, #625	@ 0x271
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f7ff ff12 	bl	8009a20 <__i2b>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c02:	4604      	mov	r4, r0
 8009c04:	6003      	str	r3, [r0, #0]
 8009c06:	f04f 0900 	mov.w	r9, #0
 8009c0a:	07eb      	lsls	r3, r5, #31
 8009c0c:	d50a      	bpl.n	8009c24 <__pow5mult+0x84>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4622      	mov	r2, r4
 8009c12:	4638      	mov	r0, r7
 8009c14:	f7ff ff1a 	bl	8009a4c <__multiply>
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	4638      	mov	r0, r7
 8009c1e:	f7ff fe01 	bl	8009824 <_Bfree>
 8009c22:	4646      	mov	r6, r8
 8009c24:	106d      	asrs	r5, r5, #1
 8009c26:	d00b      	beq.n	8009c40 <__pow5mult+0xa0>
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	b938      	cbnz	r0, 8009c3c <__pow5mult+0x9c>
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7ff ff0b 	bl	8009a4c <__multiply>
 8009c36:	6020      	str	r0, [r4, #0]
 8009c38:	f8c0 9000 	str.w	r9, [r0]
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	e7e4      	b.n	8009c0a <__pow5mult+0x6a>
 8009c40:	4630      	mov	r0, r6
 8009c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c46:	bf00      	nop
 8009c48:	0800c2d4 	.word	0x0800c2d4
 8009c4c:	0800c1fa 	.word	0x0800c1fa
 8009c50:	0800c27a 	.word	0x0800c27a

08009c54 <__lshift>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	460c      	mov	r4, r1
 8009c5a:	6849      	ldr	r1, [r1, #4]
 8009c5c:	6923      	ldr	r3, [r4, #16]
 8009c5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c62:	68a3      	ldr	r3, [r4, #8]
 8009c64:	4607      	mov	r7, r0
 8009c66:	4691      	mov	r9, r2
 8009c68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c6c:	f108 0601 	add.w	r6, r8, #1
 8009c70:	42b3      	cmp	r3, r6
 8009c72:	db0b      	blt.n	8009c8c <__lshift+0x38>
 8009c74:	4638      	mov	r0, r7
 8009c76:	f7ff fd95 	bl	80097a4 <_Balloc>
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b948      	cbnz	r0, 8009c92 <__lshift+0x3e>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b28      	ldr	r3, [pc, #160]	@ (8009d24 <__lshift+0xd0>)
 8009c82:	4829      	ldr	r0, [pc, #164]	@ (8009d28 <__lshift+0xd4>)
 8009c84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009c88:	f001 fac6 	bl	800b218 <__assert_func>
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	e7ee      	b.n	8009c70 <__lshift+0x1c>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f100 0114 	add.w	r1, r0, #20
 8009c98:	f100 0210 	add.w	r2, r0, #16
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4553      	cmp	r3, sl
 8009ca0:	db33      	blt.n	8009d0a <__lshift+0xb6>
 8009ca2:	6920      	ldr	r0, [r4, #16]
 8009ca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ca8:	f104 0314 	add.w	r3, r4, #20
 8009cac:	f019 091f 	ands.w	r9, r9, #31
 8009cb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009cb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009cb8:	d02b      	beq.n	8009d12 <__lshift+0xbe>
 8009cba:	f1c9 0e20 	rsb	lr, r9, #32
 8009cbe:	468a      	mov	sl, r1
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	fa00 f009 	lsl.w	r0, r0, r9
 8009cc8:	4310      	orrs	r0, r2
 8009cca:	f84a 0b04 	str.w	r0, [sl], #4
 8009cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cd2:	459c      	cmp	ip, r3
 8009cd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009cd8:	d8f3      	bhi.n	8009cc2 <__lshift+0x6e>
 8009cda:	ebac 0304 	sub.w	r3, ip, r4
 8009cde:	3b15      	subs	r3, #21
 8009ce0:	f023 0303 	bic.w	r3, r3, #3
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	f104 0015 	add.w	r0, r4, #21
 8009cea:	4584      	cmp	ip, r0
 8009cec:	bf38      	it	cc
 8009cee:	2304      	movcc	r3, #4
 8009cf0:	50ca      	str	r2, [r1, r3]
 8009cf2:	b10a      	cbz	r2, 8009cf8 <__lshift+0xa4>
 8009cf4:	f108 0602 	add.w	r6, r8, #2
 8009cf8:	3e01      	subs	r6, #1
 8009cfa:	4638      	mov	r0, r7
 8009cfc:	612e      	str	r6, [r5, #16]
 8009cfe:	4621      	mov	r1, r4
 8009d00:	f7ff fd90 	bl	8009824 <_Bfree>
 8009d04:	4628      	mov	r0, r5
 8009d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d0e:	3301      	adds	r3, #1
 8009d10:	e7c5      	b.n	8009c9e <__lshift+0x4a>
 8009d12:	3904      	subs	r1, #4
 8009d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d18:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d1c:	459c      	cmp	ip, r3
 8009d1e:	d8f9      	bhi.n	8009d14 <__lshift+0xc0>
 8009d20:	e7ea      	b.n	8009cf8 <__lshift+0xa4>
 8009d22:	bf00      	nop
 8009d24:	0800c269 	.word	0x0800c269
 8009d28:	0800c27a 	.word	0x0800c27a

08009d2c <__mcmp>:
 8009d2c:	690a      	ldr	r2, [r1, #16]
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6900      	ldr	r0, [r0, #16]
 8009d32:	1a80      	subs	r0, r0, r2
 8009d34:	b530      	push	{r4, r5, lr}
 8009d36:	d10e      	bne.n	8009d56 <__mcmp+0x2a>
 8009d38:	3314      	adds	r3, #20
 8009d3a:	3114      	adds	r1, #20
 8009d3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009d40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009d44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009d48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009d4c:	4295      	cmp	r5, r2
 8009d4e:	d003      	beq.n	8009d58 <__mcmp+0x2c>
 8009d50:	d205      	bcs.n	8009d5e <__mcmp+0x32>
 8009d52:	f04f 30ff 	mov.w	r0, #4294967295
 8009d56:	bd30      	pop	{r4, r5, pc}
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	d3f3      	bcc.n	8009d44 <__mcmp+0x18>
 8009d5c:	e7fb      	b.n	8009d56 <__mcmp+0x2a>
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7f9      	b.n	8009d56 <__mcmp+0x2a>
	...

08009d64 <__mdiff>:
 8009d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	4689      	mov	r9, r1
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4648      	mov	r0, r9
 8009d70:	4614      	mov	r4, r2
 8009d72:	f7ff ffdb 	bl	8009d2c <__mcmp>
 8009d76:	1e05      	subs	r5, r0, #0
 8009d78:	d112      	bne.n	8009da0 <__mdiff+0x3c>
 8009d7a:	4629      	mov	r1, r5
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f7ff fd11 	bl	80097a4 <_Balloc>
 8009d82:	4602      	mov	r2, r0
 8009d84:	b928      	cbnz	r0, 8009d92 <__mdiff+0x2e>
 8009d86:	4b3f      	ldr	r3, [pc, #252]	@ (8009e84 <__mdiff+0x120>)
 8009d88:	f240 2137 	movw	r1, #567	@ 0x237
 8009d8c:	483e      	ldr	r0, [pc, #248]	@ (8009e88 <__mdiff+0x124>)
 8009d8e:	f001 fa43 	bl	800b218 <__assert_func>
 8009d92:	2301      	movs	r3, #1
 8009d94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	b003      	add	sp, #12
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	bfbc      	itt	lt
 8009da2:	464b      	movlt	r3, r9
 8009da4:	46a1      	movlt	r9, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009dac:	bfba      	itte	lt
 8009dae:	461c      	movlt	r4, r3
 8009db0:	2501      	movlt	r5, #1
 8009db2:	2500      	movge	r5, #0
 8009db4:	f7ff fcf6 	bl	80097a4 <_Balloc>
 8009db8:	4602      	mov	r2, r0
 8009dba:	b918      	cbnz	r0, 8009dc4 <__mdiff+0x60>
 8009dbc:	4b31      	ldr	r3, [pc, #196]	@ (8009e84 <__mdiff+0x120>)
 8009dbe:	f240 2145 	movw	r1, #581	@ 0x245
 8009dc2:	e7e3      	b.n	8009d8c <__mdiff+0x28>
 8009dc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009dc8:	6926      	ldr	r6, [r4, #16]
 8009dca:	60c5      	str	r5, [r0, #12]
 8009dcc:	f109 0310 	add.w	r3, r9, #16
 8009dd0:	f109 0514 	add.w	r5, r9, #20
 8009dd4:	f104 0e14 	add.w	lr, r4, #20
 8009dd8:	f100 0b14 	add.w	fp, r0, #20
 8009ddc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009de0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	46d9      	mov	r9, fp
 8009de8:	f04f 0c00 	mov.w	ip, #0
 8009dec:	9b01      	ldr	r3, [sp, #4]
 8009dee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009df2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	fa1f f38a 	uxth.w	r3, sl
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	b283      	uxth	r3, r0
 8009e00:	1acb      	subs	r3, r1, r3
 8009e02:	0c00      	lsrs	r0, r0, #16
 8009e04:	4463      	add	r3, ip
 8009e06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e14:	4576      	cmp	r6, lr
 8009e16:	f849 3b04 	str.w	r3, [r9], #4
 8009e1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e1e:	d8e5      	bhi.n	8009dec <__mdiff+0x88>
 8009e20:	1b33      	subs	r3, r6, r4
 8009e22:	3b15      	subs	r3, #21
 8009e24:	f023 0303 	bic.w	r3, r3, #3
 8009e28:	3415      	adds	r4, #21
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	42a6      	cmp	r6, r4
 8009e2e:	bf38      	it	cc
 8009e30:	2304      	movcc	r3, #4
 8009e32:	441d      	add	r5, r3
 8009e34:	445b      	add	r3, fp
 8009e36:	461e      	mov	r6, r3
 8009e38:	462c      	mov	r4, r5
 8009e3a:	4544      	cmp	r4, r8
 8009e3c:	d30e      	bcc.n	8009e5c <__mdiff+0xf8>
 8009e3e:	f108 0103 	add.w	r1, r8, #3
 8009e42:	1b49      	subs	r1, r1, r5
 8009e44:	f021 0103 	bic.w	r1, r1, #3
 8009e48:	3d03      	subs	r5, #3
 8009e4a:	45a8      	cmp	r8, r5
 8009e4c:	bf38      	it	cc
 8009e4e:	2100      	movcc	r1, #0
 8009e50:	440b      	add	r3, r1
 8009e52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e56:	b191      	cbz	r1, 8009e7e <__mdiff+0x11a>
 8009e58:	6117      	str	r7, [r2, #16]
 8009e5a:	e79d      	b.n	8009d98 <__mdiff+0x34>
 8009e5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009e60:	46e6      	mov	lr, ip
 8009e62:	0c08      	lsrs	r0, r1, #16
 8009e64:	fa1c fc81 	uxtah	ip, ip, r1
 8009e68:	4471      	add	r1, lr
 8009e6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009e6e:	b289      	uxth	r1, r1
 8009e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e74:	f846 1b04 	str.w	r1, [r6], #4
 8009e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e7c:	e7dd      	b.n	8009e3a <__mdiff+0xd6>
 8009e7e:	3f01      	subs	r7, #1
 8009e80:	e7e7      	b.n	8009e52 <__mdiff+0xee>
 8009e82:	bf00      	nop
 8009e84:	0800c269 	.word	0x0800c269
 8009e88:	0800c27a 	.word	0x0800c27a

08009e8c <__ulp>:
 8009e8c:	b082      	sub	sp, #8
 8009e8e:	ed8d 0b00 	vstr	d0, [sp]
 8009e92:	9a01      	ldr	r2, [sp, #4]
 8009e94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <__ulp+0x48>)
 8009e96:	4013      	ands	r3, r2
 8009e98:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dc08      	bgt.n	8009eb2 <__ulp+0x26>
 8009ea0:	425b      	negs	r3, r3
 8009ea2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009ea6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009eaa:	da04      	bge.n	8009eb6 <__ulp+0x2a>
 8009eac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009eb0:	4113      	asrs	r3, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	e008      	b.n	8009ec8 <__ulp+0x3c>
 8009eb6:	f1a2 0314 	sub.w	r3, r2, #20
 8009eba:	2b1e      	cmp	r3, #30
 8009ebc:	bfda      	itte	le
 8009ebe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009ec2:	40da      	lsrle	r2, r3
 8009ec4:	2201      	movgt	r2, #1
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	ec41 0b10 	vmov	d0, r0, r1
 8009ed0:	b002      	add	sp, #8
 8009ed2:	4770      	bx	lr
 8009ed4:	7ff00000 	.word	0x7ff00000

08009ed8 <__b2d>:
 8009ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009edc:	6906      	ldr	r6, [r0, #16]
 8009ede:	f100 0814 	add.w	r8, r0, #20
 8009ee2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ee6:	1f37      	subs	r7, r6, #4
 8009ee8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009eec:	4610      	mov	r0, r2
 8009eee:	f7ff fd4b 	bl	8009988 <__hi0bits>
 8009ef2:	f1c0 0320 	rsb	r3, r0, #32
 8009ef6:	280a      	cmp	r0, #10
 8009ef8:	600b      	str	r3, [r1, #0]
 8009efa:	491b      	ldr	r1, [pc, #108]	@ (8009f68 <__b2d+0x90>)
 8009efc:	dc15      	bgt.n	8009f2a <__b2d+0x52>
 8009efe:	f1c0 0c0b 	rsb	ip, r0, #11
 8009f02:	fa22 f30c 	lsr.w	r3, r2, ip
 8009f06:	45b8      	cmp	r8, r7
 8009f08:	ea43 0501 	orr.w	r5, r3, r1
 8009f0c:	bf34      	ite	cc
 8009f0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f12:	2300      	movcs	r3, #0
 8009f14:	3015      	adds	r0, #21
 8009f16:	fa02 f000 	lsl.w	r0, r2, r0
 8009f1a:	fa23 f30c 	lsr.w	r3, r3, ip
 8009f1e:	4303      	orrs	r3, r0
 8009f20:	461c      	mov	r4, r3
 8009f22:	ec45 4b10 	vmov	d0, r4, r5
 8009f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2a:	45b8      	cmp	r8, r7
 8009f2c:	bf3a      	itte	cc
 8009f2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009f32:	f1a6 0708 	subcc.w	r7, r6, #8
 8009f36:	2300      	movcs	r3, #0
 8009f38:	380b      	subs	r0, #11
 8009f3a:	d012      	beq.n	8009f62 <__b2d+0x8a>
 8009f3c:	f1c0 0120 	rsb	r1, r0, #32
 8009f40:	fa23 f401 	lsr.w	r4, r3, r1
 8009f44:	4082      	lsls	r2, r0
 8009f46:	4322      	orrs	r2, r4
 8009f48:	4547      	cmp	r7, r8
 8009f4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009f4e:	bf8c      	ite	hi
 8009f50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009f54:	2200      	movls	r2, #0
 8009f56:	4083      	lsls	r3, r0
 8009f58:	40ca      	lsrs	r2, r1
 8009f5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	e7de      	b.n	8009f20 <__b2d+0x48>
 8009f62:	ea42 0501 	orr.w	r5, r2, r1
 8009f66:	e7db      	b.n	8009f20 <__b2d+0x48>
 8009f68:	3ff00000 	.word	0x3ff00000

08009f6c <__d2b>:
 8009f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f70:	460f      	mov	r7, r1
 8009f72:	2101      	movs	r1, #1
 8009f74:	ec59 8b10 	vmov	r8, r9, d0
 8009f78:	4616      	mov	r6, r2
 8009f7a:	f7ff fc13 	bl	80097a4 <_Balloc>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	b930      	cbnz	r0, 8009f90 <__d2b+0x24>
 8009f82:	4602      	mov	r2, r0
 8009f84:	4b23      	ldr	r3, [pc, #140]	@ (800a014 <__d2b+0xa8>)
 8009f86:	4824      	ldr	r0, [pc, #144]	@ (800a018 <__d2b+0xac>)
 8009f88:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f8c:	f001 f944 	bl	800b218 <__assert_func>
 8009f90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f98:	b10d      	cbz	r5, 8009f9e <__d2b+0x32>
 8009f9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fa4:	d023      	beq.n	8009fee <__d2b+0x82>
 8009fa6:	4668      	mov	r0, sp
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	f7ff fd0c 	bl	80099c6 <__lo0bits>
 8009fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fb2:	b1d0      	cbz	r0, 8009fea <__d2b+0x7e>
 8009fb4:	f1c0 0320 	rsb	r3, r0, #32
 8009fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	40c2      	lsrs	r2, r0
 8009fc0:	6163      	str	r3, [r4, #20]
 8009fc2:	9201      	str	r2, [sp, #4]
 8009fc4:	9b01      	ldr	r3, [sp, #4]
 8009fc6:	61a3      	str	r3, [r4, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	bf0c      	ite	eq
 8009fcc:	2201      	moveq	r2, #1
 8009fce:	2202      	movne	r2, #2
 8009fd0:	6122      	str	r2, [r4, #16]
 8009fd2:	b1a5      	cbz	r5, 8009ffe <__d2b+0x92>
 8009fd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009fd8:	4405      	add	r5, r0
 8009fda:	603d      	str	r5, [r7, #0]
 8009fdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009fe0:	6030      	str	r0, [r6, #0]
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	b003      	add	sp, #12
 8009fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fea:	6161      	str	r1, [r4, #20]
 8009fec:	e7ea      	b.n	8009fc4 <__d2b+0x58>
 8009fee:	a801      	add	r0, sp, #4
 8009ff0:	f7ff fce9 	bl	80099c6 <__lo0bits>
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	6163      	str	r3, [r4, #20]
 8009ff8:	3020      	adds	r0, #32
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	e7e8      	b.n	8009fd0 <__d2b+0x64>
 8009ffe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a006:	6038      	str	r0, [r7, #0]
 800a008:	6918      	ldr	r0, [r3, #16]
 800a00a:	f7ff fcbd 	bl	8009988 <__hi0bits>
 800a00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a012:	e7e5      	b.n	8009fe0 <__d2b+0x74>
 800a014:	0800c269 	.word	0x0800c269
 800a018:	0800c27a 	.word	0x0800c27a

0800a01c <__ratio>:
 800a01c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	4688      	mov	r8, r1
 800a022:	4669      	mov	r1, sp
 800a024:	4681      	mov	r9, r0
 800a026:	f7ff ff57 	bl	8009ed8 <__b2d>
 800a02a:	a901      	add	r1, sp, #4
 800a02c:	4640      	mov	r0, r8
 800a02e:	ec55 4b10 	vmov	r4, r5, d0
 800a032:	f7ff ff51 	bl	8009ed8 <__b2d>
 800a036:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a03a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a03e:	1ad2      	subs	r2, r2, r3
 800a040:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a044:	1a5b      	subs	r3, r3, r1
 800a046:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a04a:	ec57 6b10 	vmov	r6, r7, d0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfd6      	itet	le
 800a052:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a056:	462a      	movgt	r2, r5
 800a058:	463a      	movle	r2, r7
 800a05a:	46ab      	mov	fp, r5
 800a05c:	46a2      	mov	sl, r4
 800a05e:	bfce      	itee	gt
 800a060:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a064:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a068:	ee00 3a90 	vmovle	s1, r3
 800a06c:	ec4b ab17 	vmov	d7, sl, fp
 800a070:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a074:	b003      	add	sp, #12
 800a076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a07a <__copybits>:
 800a07a:	3901      	subs	r1, #1
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	1149      	asrs	r1, r1, #5
 800a080:	6914      	ldr	r4, [r2, #16]
 800a082:	3101      	adds	r1, #1
 800a084:	f102 0314 	add.w	r3, r2, #20
 800a088:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a08c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a090:	1f05      	subs	r5, r0, #4
 800a092:	42a3      	cmp	r3, r4
 800a094:	d30c      	bcc.n	800a0b0 <__copybits+0x36>
 800a096:	1aa3      	subs	r3, r4, r2
 800a098:	3b11      	subs	r3, #17
 800a09a:	f023 0303 	bic.w	r3, r3, #3
 800a09e:	3211      	adds	r2, #17
 800a0a0:	42a2      	cmp	r2, r4
 800a0a2:	bf88      	it	hi
 800a0a4:	2300      	movhi	r3, #0
 800a0a6:	4418      	add	r0, r3
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4288      	cmp	r0, r1
 800a0ac:	d305      	bcc.n	800a0ba <__copybits+0x40>
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a0b4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a0b8:	e7eb      	b.n	800a092 <__copybits+0x18>
 800a0ba:	f840 3b04 	str.w	r3, [r0], #4
 800a0be:	e7f4      	b.n	800a0aa <__copybits+0x30>

0800a0c0 <__any_on>:
 800a0c0:	f100 0214 	add.w	r2, r0, #20
 800a0c4:	6900      	ldr	r0, [r0, #16]
 800a0c6:	114b      	asrs	r3, r1, #5
 800a0c8:	4298      	cmp	r0, r3
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	db11      	blt.n	800a0f2 <__any_on+0x32>
 800a0ce:	dd0a      	ble.n	800a0e6 <__any_on+0x26>
 800a0d0:	f011 011f 	ands.w	r1, r1, #31
 800a0d4:	d007      	beq.n	800a0e6 <__any_on+0x26>
 800a0d6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a0da:	fa24 f001 	lsr.w	r0, r4, r1
 800a0de:	fa00 f101 	lsl.w	r1, r0, r1
 800a0e2:	428c      	cmp	r4, r1
 800a0e4:	d10b      	bne.n	800a0fe <__any_on+0x3e>
 800a0e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d803      	bhi.n	800a0f6 <__any_on+0x36>
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	e7f7      	b.n	800a0e6 <__any_on+0x26>
 800a0f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0fa:	2900      	cmp	r1, #0
 800a0fc:	d0f5      	beq.n	800a0ea <__any_on+0x2a>
 800a0fe:	2001      	movs	r0, #1
 800a100:	e7f6      	b.n	800a0f0 <__any_on+0x30>

0800a102 <sulp>:
 800a102:	b570      	push	{r4, r5, r6, lr}
 800a104:	4604      	mov	r4, r0
 800a106:	460d      	mov	r5, r1
 800a108:	4616      	mov	r6, r2
 800a10a:	ec45 4b10 	vmov	d0, r4, r5
 800a10e:	f7ff febd 	bl	8009e8c <__ulp>
 800a112:	b17e      	cbz	r6, 800a134 <sulp+0x32>
 800a114:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a118:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	dd09      	ble.n	800a134 <sulp+0x32>
 800a120:	051b      	lsls	r3, r3, #20
 800a122:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a126:	2000      	movs	r0, #0
 800a128:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a12c:	ec41 0b17 	vmov	d7, r0, r1
 800a130:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a134:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a138 <_strtod_l>:
 800a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a13c:	ed2d 8b0a 	vpush	{d8-d12}
 800a140:	b097      	sub	sp, #92	@ 0x5c
 800a142:	4688      	mov	r8, r1
 800a144:	920e      	str	r2, [sp, #56]	@ 0x38
 800a146:	2200      	movs	r2, #0
 800a148:	9212      	str	r2, [sp, #72]	@ 0x48
 800a14a:	9005      	str	r0, [sp, #20]
 800a14c:	f04f 0a00 	mov.w	sl, #0
 800a150:	f04f 0b00 	mov.w	fp, #0
 800a154:	460a      	mov	r2, r1
 800a156:	9211      	str	r2, [sp, #68]	@ 0x44
 800a158:	7811      	ldrb	r1, [r2, #0]
 800a15a:	292b      	cmp	r1, #43	@ 0x2b
 800a15c:	d04c      	beq.n	800a1f8 <_strtod_l+0xc0>
 800a15e:	d839      	bhi.n	800a1d4 <_strtod_l+0x9c>
 800a160:	290d      	cmp	r1, #13
 800a162:	d833      	bhi.n	800a1cc <_strtod_l+0x94>
 800a164:	2908      	cmp	r1, #8
 800a166:	d833      	bhi.n	800a1d0 <_strtod_l+0x98>
 800a168:	2900      	cmp	r1, #0
 800a16a:	d03c      	beq.n	800a1e6 <_strtod_l+0xae>
 800a16c:	2200      	movs	r2, #0
 800a16e:	9208      	str	r2, [sp, #32]
 800a170:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a172:	782a      	ldrb	r2, [r5, #0]
 800a174:	2a30      	cmp	r2, #48	@ 0x30
 800a176:	f040 80b5 	bne.w	800a2e4 <_strtod_l+0x1ac>
 800a17a:	786a      	ldrb	r2, [r5, #1]
 800a17c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a180:	2a58      	cmp	r2, #88	@ 0x58
 800a182:	d170      	bne.n	800a266 <_strtod_l+0x12e>
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	ab12      	add	r3, sp, #72	@ 0x48
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4a8b      	ldr	r2, [pc, #556]	@ (800a3bc <_strtod_l+0x284>)
 800a190:	9805      	ldr	r0, [sp, #20]
 800a192:	ab13      	add	r3, sp, #76	@ 0x4c
 800a194:	a911      	add	r1, sp, #68	@ 0x44
 800a196:	f001 f8d9 	bl	800b34c <__gethex>
 800a19a:	f010 060f 	ands.w	r6, r0, #15
 800a19e:	4604      	mov	r4, r0
 800a1a0:	d005      	beq.n	800a1ae <_strtod_l+0x76>
 800a1a2:	2e06      	cmp	r6, #6
 800a1a4:	d12a      	bne.n	800a1fc <_strtod_l+0xc4>
 800a1a6:	3501      	adds	r5, #1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9511      	str	r5, [sp, #68]	@ 0x44
 800a1ac:	9308      	str	r3, [sp, #32]
 800a1ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 852f 	bne.w	800ac14 <_strtod_l+0xadc>
 800a1b6:	9b08      	ldr	r3, [sp, #32]
 800a1b8:	ec4b ab10 	vmov	d0, sl, fp
 800a1bc:	b1cb      	cbz	r3, 800a1f2 <_strtod_l+0xba>
 800a1be:	eeb1 0b40 	vneg.f64	d0, d0
 800a1c2:	b017      	add	sp, #92	@ 0x5c
 800a1c4:	ecbd 8b0a 	vpop	{d8-d12}
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	2920      	cmp	r1, #32
 800a1ce:	d1cd      	bne.n	800a16c <_strtod_l+0x34>
 800a1d0:	3201      	adds	r2, #1
 800a1d2:	e7c0      	b.n	800a156 <_strtod_l+0x1e>
 800a1d4:	292d      	cmp	r1, #45	@ 0x2d
 800a1d6:	d1c9      	bne.n	800a16c <_strtod_l+0x34>
 800a1d8:	2101      	movs	r1, #1
 800a1da:	9108      	str	r1, [sp, #32]
 800a1dc:	1c51      	adds	r1, r2, #1
 800a1de:	9111      	str	r1, [sp, #68]	@ 0x44
 800a1e0:	7852      	ldrb	r2, [r2, #1]
 800a1e2:	2a00      	cmp	r2, #0
 800a1e4:	d1c4      	bne.n	800a170 <_strtod_l+0x38>
 800a1e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1e8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	f040 850f 	bne.w	800ac10 <_strtod_l+0xad8>
 800a1f2:	ec4b ab10 	vmov	d0, sl, fp
 800a1f6:	e7e4      	b.n	800a1c2 <_strtod_l+0x8a>
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	e7ee      	b.n	800a1da <_strtod_l+0xa2>
 800a1fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1fe:	b13a      	cbz	r2, 800a210 <_strtod_l+0xd8>
 800a200:	2135      	movs	r1, #53	@ 0x35
 800a202:	a814      	add	r0, sp, #80	@ 0x50
 800a204:	f7ff ff39 	bl	800a07a <__copybits>
 800a208:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a20a:	9805      	ldr	r0, [sp, #20]
 800a20c:	f7ff fb0a 	bl	8009824 <_Bfree>
 800a210:	1e73      	subs	r3, r6, #1
 800a212:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a214:	2b04      	cmp	r3, #4
 800a216:	d806      	bhi.n	800a226 <_strtod_l+0xee>
 800a218:	e8df f003 	tbb	[pc, r3]
 800a21c:	201d0314 	.word	0x201d0314
 800a220:	14          	.byte	0x14
 800a221:	00          	.byte	0x00
 800a222:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800a226:	05e3      	lsls	r3, r4, #23
 800a228:	bf48      	it	mi
 800a22a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a232:	0d1b      	lsrs	r3, r3, #20
 800a234:	051b      	lsls	r3, r3, #20
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1b9      	bne.n	800a1ae <_strtod_l+0x76>
 800a23a:	f7fe fba1 	bl	8008980 <__errno>
 800a23e:	2322      	movs	r3, #34	@ 0x22
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	e7b4      	b.n	800a1ae <_strtod_l+0x76>
 800a244:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800a248:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a24c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a250:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a254:	e7e7      	b.n	800a226 <_strtod_l+0xee>
 800a256:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800a3c4 <_strtod_l+0x28c>
 800a25a:	e7e4      	b.n	800a226 <_strtod_l+0xee>
 800a25c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a260:	f04f 3aff 	mov.w	sl, #4294967295
 800a264:	e7df      	b.n	800a226 <_strtod_l+0xee>
 800a266:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	9211      	str	r2, [sp, #68]	@ 0x44
 800a26c:	785b      	ldrb	r3, [r3, #1]
 800a26e:	2b30      	cmp	r3, #48	@ 0x30
 800a270:	d0f9      	beq.n	800a266 <_strtod_l+0x12e>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d09b      	beq.n	800a1ae <_strtod_l+0x76>
 800a276:	2301      	movs	r3, #1
 800a278:	2600      	movs	r6, #0
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a280:	46b1      	mov	r9, r6
 800a282:	4635      	mov	r5, r6
 800a284:	220a      	movs	r2, #10
 800a286:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800a288:	7804      	ldrb	r4, [r0, #0]
 800a28a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800a28e:	b2d9      	uxtb	r1, r3
 800a290:	2909      	cmp	r1, #9
 800a292:	d929      	bls.n	800a2e8 <_strtod_l+0x1b0>
 800a294:	494a      	ldr	r1, [pc, #296]	@ (800a3c0 <_strtod_l+0x288>)
 800a296:	2201      	movs	r2, #1
 800a298:	f000 ff84 	bl	800b1a4 <strncmp>
 800a29c:	b378      	cbz	r0, 800a2fe <_strtod_l+0x1c6>
 800a29e:	2000      	movs	r0, #0
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	9006      	str	r0, [sp, #24]
 800a2a8:	2a65      	cmp	r2, #101	@ 0x65
 800a2aa:	d001      	beq.n	800a2b0 <_strtod_l+0x178>
 800a2ac:	2a45      	cmp	r2, #69	@ 0x45
 800a2ae:	d117      	bne.n	800a2e0 <_strtod_l+0x1a8>
 800a2b0:	b91b      	cbnz	r3, 800a2ba <_strtod_l+0x182>
 800a2b2:	9b07      	ldr	r3, [sp, #28]
 800a2b4:	4303      	orrs	r3, r0
 800a2b6:	d096      	beq.n	800a1e6 <_strtod_l+0xae>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800a2be:	f108 0201 	add.w	r2, r8, #1
 800a2c2:	9211      	str	r2, [sp, #68]	@ 0x44
 800a2c4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a2c8:	2a2b      	cmp	r2, #43	@ 0x2b
 800a2ca:	d06b      	beq.n	800a3a4 <_strtod_l+0x26c>
 800a2cc:	2a2d      	cmp	r2, #45	@ 0x2d
 800a2ce:	d071      	beq.n	800a3b4 <_strtod_l+0x27c>
 800a2d0:	f04f 0e00 	mov.w	lr, #0
 800a2d4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a2d8:	2c09      	cmp	r4, #9
 800a2da:	d979      	bls.n	800a3d0 <_strtod_l+0x298>
 800a2dc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a2e0:	2400      	movs	r4, #0
 800a2e2:	e094      	b.n	800a40e <_strtod_l+0x2d6>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e7c7      	b.n	800a278 <_strtod_l+0x140>
 800a2e8:	2d08      	cmp	r5, #8
 800a2ea:	f100 0001 	add.w	r0, r0, #1
 800a2ee:	bfd4      	ite	le
 800a2f0:	fb02 3909 	mlale	r9, r2, r9, r3
 800a2f4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800a2f8:	3501      	adds	r5, #1
 800a2fa:	9011      	str	r0, [sp, #68]	@ 0x44
 800a2fc:	e7c3      	b.n	800a286 <_strtod_l+0x14e>
 800a2fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a300:	1c5a      	adds	r2, r3, #1
 800a302:	9211      	str	r2, [sp, #68]	@ 0x44
 800a304:	785a      	ldrb	r2, [r3, #1]
 800a306:	b375      	cbz	r5, 800a366 <_strtod_l+0x22e>
 800a308:	4607      	mov	r7, r0
 800a30a:	462b      	mov	r3, r5
 800a30c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a310:	2909      	cmp	r1, #9
 800a312:	d913      	bls.n	800a33c <_strtod_l+0x204>
 800a314:	2101      	movs	r1, #1
 800a316:	9106      	str	r1, [sp, #24]
 800a318:	e7c6      	b.n	800a2a8 <_strtod_l+0x170>
 800a31a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a320:	785a      	ldrb	r2, [r3, #1]
 800a322:	3001      	adds	r0, #1
 800a324:	2a30      	cmp	r2, #48	@ 0x30
 800a326:	d0f8      	beq.n	800a31a <_strtod_l+0x1e2>
 800a328:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	f200 8476 	bhi.w	800ac1e <_strtod_l+0xae6>
 800a332:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a334:	930a      	str	r3, [sp, #40]	@ 0x28
 800a336:	4607      	mov	r7, r0
 800a338:	2000      	movs	r0, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	3a30      	subs	r2, #48	@ 0x30
 800a33e:	f100 0101 	add.w	r1, r0, #1
 800a342:	d023      	beq.n	800a38c <_strtod_l+0x254>
 800a344:	440f      	add	r7, r1
 800a346:	eb00 0c03 	add.w	ip, r0, r3
 800a34a:	4619      	mov	r1, r3
 800a34c:	240a      	movs	r4, #10
 800a34e:	4561      	cmp	r1, ip
 800a350:	d10b      	bne.n	800a36a <_strtod_l+0x232>
 800a352:	1c5c      	adds	r4, r3, #1
 800a354:	4403      	add	r3, r0
 800a356:	2b08      	cmp	r3, #8
 800a358:	4404      	add	r4, r0
 800a35a:	dc11      	bgt.n	800a380 <_strtod_l+0x248>
 800a35c:	230a      	movs	r3, #10
 800a35e:	fb03 2909 	mla	r9, r3, r9, r2
 800a362:	2100      	movs	r1, #0
 800a364:	e013      	b.n	800a38e <_strtod_l+0x256>
 800a366:	4628      	mov	r0, r5
 800a368:	e7dc      	b.n	800a324 <_strtod_l+0x1ec>
 800a36a:	2908      	cmp	r1, #8
 800a36c:	f101 0101 	add.w	r1, r1, #1
 800a370:	dc02      	bgt.n	800a378 <_strtod_l+0x240>
 800a372:	fb04 f909 	mul.w	r9, r4, r9
 800a376:	e7ea      	b.n	800a34e <_strtod_l+0x216>
 800a378:	2910      	cmp	r1, #16
 800a37a:	bfd8      	it	le
 800a37c:	4366      	mulle	r6, r4
 800a37e:	e7e6      	b.n	800a34e <_strtod_l+0x216>
 800a380:	2b0f      	cmp	r3, #15
 800a382:	dcee      	bgt.n	800a362 <_strtod_l+0x22a>
 800a384:	230a      	movs	r3, #10
 800a386:	fb03 2606 	mla	r6, r3, r6, r2
 800a38a:	e7ea      	b.n	800a362 <_strtod_l+0x22a>
 800a38c:	461c      	mov	r4, r3
 800a38e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	9211      	str	r2, [sp, #68]	@ 0x44
 800a394:	785a      	ldrb	r2, [r3, #1]
 800a396:	4608      	mov	r0, r1
 800a398:	4623      	mov	r3, r4
 800a39a:	e7b7      	b.n	800a30c <_strtod_l+0x1d4>
 800a39c:	2301      	movs	r3, #1
 800a39e:	2700      	movs	r7, #0
 800a3a0:	9306      	str	r3, [sp, #24]
 800a3a2:	e786      	b.n	800a2b2 <_strtod_l+0x17a>
 800a3a4:	f04f 0e00 	mov.w	lr, #0
 800a3a8:	f108 0202 	add.w	r2, r8, #2
 800a3ac:	9211      	str	r2, [sp, #68]	@ 0x44
 800a3ae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a3b2:	e78f      	b.n	800a2d4 <_strtod_l+0x19c>
 800a3b4:	f04f 0e01 	mov.w	lr, #1
 800a3b8:	e7f6      	b.n	800a3a8 <_strtod_l+0x270>
 800a3ba:	bf00      	nop
 800a3bc:	0800c3e8 	.word	0x0800c3e8
 800a3c0:	0800c3d0 	.word	0x0800c3d0
 800a3c4:	7ff00000 	.word	0x7ff00000
 800a3c8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3ca:	1c54      	adds	r4, r2, #1
 800a3cc:	9411      	str	r4, [sp, #68]	@ 0x44
 800a3ce:	7852      	ldrb	r2, [r2, #1]
 800a3d0:	2a30      	cmp	r2, #48	@ 0x30
 800a3d2:	d0f9      	beq.n	800a3c8 <_strtod_l+0x290>
 800a3d4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a3d8:	2c08      	cmp	r4, #8
 800a3da:	d881      	bhi.n	800a2e0 <_strtod_l+0x1a8>
 800a3dc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a3e0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3e4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a3e6:	1c51      	adds	r1, r2, #1
 800a3e8:	9111      	str	r1, [sp, #68]	@ 0x44
 800a3ea:	7852      	ldrb	r2, [r2, #1]
 800a3ec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800a3f0:	2c09      	cmp	r4, #9
 800a3f2:	d938      	bls.n	800a466 <_strtod_l+0x32e>
 800a3f4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a3f6:	1b0c      	subs	r4, r1, r4
 800a3f8:	2c08      	cmp	r4, #8
 800a3fa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a3fe:	dc02      	bgt.n	800a406 <_strtod_l+0x2ce>
 800a400:	4564      	cmp	r4, ip
 800a402:	bfa8      	it	ge
 800a404:	4664      	movge	r4, ip
 800a406:	f1be 0f00 	cmp.w	lr, #0
 800a40a:	d000      	beq.n	800a40e <_strtod_l+0x2d6>
 800a40c:	4264      	negs	r4, r4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d14e      	bne.n	800a4b0 <_strtod_l+0x378>
 800a412:	9b07      	ldr	r3, [sp, #28]
 800a414:	4318      	orrs	r0, r3
 800a416:	f47f aeca 	bne.w	800a1ae <_strtod_l+0x76>
 800a41a:	9b06      	ldr	r3, [sp, #24]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f47f aee2 	bne.w	800a1e6 <_strtod_l+0xae>
 800a422:	2a69      	cmp	r2, #105	@ 0x69
 800a424:	d027      	beq.n	800a476 <_strtod_l+0x33e>
 800a426:	dc24      	bgt.n	800a472 <_strtod_l+0x33a>
 800a428:	2a49      	cmp	r2, #73	@ 0x49
 800a42a:	d024      	beq.n	800a476 <_strtod_l+0x33e>
 800a42c:	2a4e      	cmp	r2, #78	@ 0x4e
 800a42e:	f47f aeda 	bne.w	800a1e6 <_strtod_l+0xae>
 800a432:	4997      	ldr	r1, [pc, #604]	@ (800a690 <_strtod_l+0x558>)
 800a434:	a811      	add	r0, sp, #68	@ 0x44
 800a436:	f001 f9ab 	bl	800b790 <__match>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	f43f aed3 	beq.w	800a1e6 <_strtod_l+0xae>
 800a440:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	2b28      	cmp	r3, #40	@ 0x28
 800a446:	d12d      	bne.n	800a4a4 <_strtod_l+0x36c>
 800a448:	4992      	ldr	r1, [pc, #584]	@ (800a694 <_strtod_l+0x55c>)
 800a44a:	aa14      	add	r2, sp, #80	@ 0x50
 800a44c:	a811      	add	r0, sp, #68	@ 0x44
 800a44e:	f001 f9b3 	bl	800b7b8 <__hexnan>
 800a452:	2805      	cmp	r0, #5
 800a454:	d126      	bne.n	800a4a4 <_strtod_l+0x36c>
 800a456:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a458:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a45c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a460:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a464:	e6a3      	b.n	800a1ae <_strtod_l+0x76>
 800a466:	240a      	movs	r4, #10
 800a468:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a46c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a470:	e7b8      	b.n	800a3e4 <_strtod_l+0x2ac>
 800a472:	2a6e      	cmp	r2, #110	@ 0x6e
 800a474:	e7db      	b.n	800a42e <_strtod_l+0x2f6>
 800a476:	4988      	ldr	r1, [pc, #544]	@ (800a698 <_strtod_l+0x560>)
 800a478:	a811      	add	r0, sp, #68	@ 0x44
 800a47a:	f001 f989 	bl	800b790 <__match>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f43f aeb1 	beq.w	800a1e6 <_strtod_l+0xae>
 800a484:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a486:	4985      	ldr	r1, [pc, #532]	@ (800a69c <_strtod_l+0x564>)
 800a488:	3b01      	subs	r3, #1
 800a48a:	a811      	add	r0, sp, #68	@ 0x44
 800a48c:	9311      	str	r3, [sp, #68]	@ 0x44
 800a48e:	f001 f97f 	bl	800b790 <__match>
 800a492:	b910      	cbnz	r0, 800a49a <_strtod_l+0x362>
 800a494:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a496:	3301      	adds	r3, #1
 800a498:	9311      	str	r3, [sp, #68]	@ 0x44
 800a49a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a6b0 <_strtod_l+0x578>
 800a49e:	f04f 0a00 	mov.w	sl, #0
 800a4a2:	e684      	b.n	800a1ae <_strtod_l+0x76>
 800a4a4:	487e      	ldr	r0, [pc, #504]	@ (800a6a0 <_strtod_l+0x568>)
 800a4a6:	f000 feaf 	bl	800b208 <nan>
 800a4aa:	ec5b ab10 	vmov	sl, fp, d0
 800a4ae:	e67e      	b.n	800a1ae <_strtod_l+0x76>
 800a4b0:	ee07 9a90 	vmov	s15, r9
 800a4b4:	1be2      	subs	r2, r4, r7
 800a4b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a4ba:	2d00      	cmp	r5, #0
 800a4bc:	bf08      	it	eq
 800a4be:	461d      	moveq	r5, r3
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	bfa8      	it	ge
 800a4c8:	2210      	movge	r2, #16
 800a4ca:	2b09      	cmp	r3, #9
 800a4cc:	ec5b ab17 	vmov	sl, fp, d7
 800a4d0:	dc15      	bgt.n	800a4fe <_strtod_l+0x3c6>
 800a4d2:	1be1      	subs	r1, r4, r7
 800a4d4:	2900      	cmp	r1, #0
 800a4d6:	f43f ae6a 	beq.w	800a1ae <_strtod_l+0x76>
 800a4da:	eba4 0107 	sub.w	r1, r4, r7
 800a4de:	dd72      	ble.n	800a5c6 <_strtod_l+0x48e>
 800a4e0:	2916      	cmp	r1, #22
 800a4e2:	dc59      	bgt.n	800a598 <_strtod_l+0x460>
 800a4e4:	4b6f      	ldr	r3, [pc, #444]	@ (800a6a4 <_strtod_l+0x56c>)
 800a4e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ec:	ed93 7b00 	vldr	d7, [r3]
 800a4f0:	ec4b ab16 	vmov	d6, sl, fp
 800a4f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a4f8:	ec5b ab17 	vmov	sl, fp, d7
 800a4fc:	e657      	b.n	800a1ae <_strtod_l+0x76>
 800a4fe:	4969      	ldr	r1, [pc, #420]	@ (800a6a4 <_strtod_l+0x56c>)
 800a500:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a504:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a508:	ee06 6a90 	vmov	s13, r6
 800a50c:	2b0f      	cmp	r3, #15
 800a50e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a512:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a516:	ec5b ab16 	vmov	sl, fp, d6
 800a51a:	ddda      	ble.n	800a4d2 <_strtod_l+0x39a>
 800a51c:	1a9a      	subs	r2, r3, r2
 800a51e:	1be1      	subs	r1, r4, r7
 800a520:	440a      	add	r2, r1
 800a522:	2a00      	cmp	r2, #0
 800a524:	f340 8094 	ble.w	800a650 <_strtod_l+0x518>
 800a528:	f012 000f 	ands.w	r0, r2, #15
 800a52c:	d00a      	beq.n	800a544 <_strtod_l+0x40c>
 800a52e:	495d      	ldr	r1, [pc, #372]	@ (800a6a4 <_strtod_l+0x56c>)
 800a530:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a534:	ed91 7b00 	vldr	d7, [r1]
 800a538:	ec4b ab16 	vmov	d6, sl, fp
 800a53c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a540:	ec5b ab17 	vmov	sl, fp, d7
 800a544:	f032 020f 	bics.w	r2, r2, #15
 800a548:	d073      	beq.n	800a632 <_strtod_l+0x4fa>
 800a54a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a54e:	dd47      	ble.n	800a5e0 <_strtod_l+0x4a8>
 800a550:	2400      	movs	r4, #0
 800a552:	4625      	mov	r5, r4
 800a554:	9407      	str	r4, [sp, #28]
 800a556:	4626      	mov	r6, r4
 800a558:	9a05      	ldr	r2, [sp, #20]
 800a55a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a6b0 <_strtod_l+0x578>
 800a55e:	2322      	movs	r3, #34	@ 0x22
 800a560:	6013      	str	r3, [r2, #0]
 800a562:	f04f 0a00 	mov.w	sl, #0
 800a566:	9b07      	ldr	r3, [sp, #28]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f43f ae20 	beq.w	800a1ae <_strtod_l+0x76>
 800a56e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a570:	9805      	ldr	r0, [sp, #20]
 800a572:	f7ff f957 	bl	8009824 <_Bfree>
 800a576:	9805      	ldr	r0, [sp, #20]
 800a578:	4631      	mov	r1, r6
 800a57a:	f7ff f953 	bl	8009824 <_Bfree>
 800a57e:	9805      	ldr	r0, [sp, #20]
 800a580:	4629      	mov	r1, r5
 800a582:	f7ff f94f 	bl	8009824 <_Bfree>
 800a586:	9907      	ldr	r1, [sp, #28]
 800a588:	9805      	ldr	r0, [sp, #20]
 800a58a:	f7ff f94b 	bl	8009824 <_Bfree>
 800a58e:	9805      	ldr	r0, [sp, #20]
 800a590:	4621      	mov	r1, r4
 800a592:	f7ff f947 	bl	8009824 <_Bfree>
 800a596:	e60a      	b.n	800a1ae <_strtod_l+0x76>
 800a598:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a59c:	1be0      	subs	r0, r4, r7
 800a59e:	4281      	cmp	r1, r0
 800a5a0:	dbbc      	blt.n	800a51c <_strtod_l+0x3e4>
 800a5a2:	4a40      	ldr	r2, [pc, #256]	@ (800a6a4 <_strtod_l+0x56c>)
 800a5a4:	f1c3 030f 	rsb	r3, r3, #15
 800a5a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a5ac:	ed91 7b00 	vldr	d7, [r1]
 800a5b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a5b2:	ec4b ab16 	vmov	d6, sl, fp
 800a5b6:	1acb      	subs	r3, r1, r3
 800a5b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a5bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a5c0:	ed92 6b00 	vldr	d6, [r2]
 800a5c4:	e796      	b.n	800a4f4 <_strtod_l+0x3bc>
 800a5c6:	3116      	adds	r1, #22
 800a5c8:	dba8      	blt.n	800a51c <_strtod_l+0x3e4>
 800a5ca:	4b36      	ldr	r3, [pc, #216]	@ (800a6a4 <_strtod_l+0x56c>)
 800a5cc:	1b3c      	subs	r4, r7, r4
 800a5ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a5d2:	ed94 7b00 	vldr	d7, [r4]
 800a5d6:	ec4b ab16 	vmov	d6, sl, fp
 800a5da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a5de:	e78b      	b.n	800a4f8 <_strtod_l+0x3c0>
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	ec4b ab17 	vmov	d7, sl, fp
 800a5e6:	4e30      	ldr	r6, [pc, #192]	@ (800a6a8 <_strtod_l+0x570>)
 800a5e8:	1112      	asrs	r2, r2, #4
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	2a01      	cmp	r2, #1
 800a5ee:	dc23      	bgt.n	800a638 <_strtod_l+0x500>
 800a5f0:	b108      	cbz	r0, 800a5f6 <_strtod_l+0x4be>
 800a5f2:	ec5b ab17 	vmov	sl, fp, d7
 800a5f6:	4a2c      	ldr	r2, [pc, #176]	@ (800a6a8 <_strtod_l+0x570>)
 800a5f8:	482c      	ldr	r0, [pc, #176]	@ (800a6ac <_strtod_l+0x574>)
 800a5fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a5fe:	ed92 7b00 	vldr	d7, [r2]
 800a602:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a606:	ec4b ab16 	vmov	d6, sl, fp
 800a60a:	4a29      	ldr	r2, [pc, #164]	@ (800a6b0 <_strtod_l+0x578>)
 800a60c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a610:	ee17 1a90 	vmov	r1, s15
 800a614:	400a      	ands	r2, r1
 800a616:	4282      	cmp	r2, r0
 800a618:	ec5b ab17 	vmov	sl, fp, d7
 800a61c:	d898      	bhi.n	800a550 <_strtod_l+0x418>
 800a61e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a622:	4282      	cmp	r2, r0
 800a624:	bf86      	itte	hi
 800a626:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a6b4 <_strtod_l+0x57c>
 800a62a:	f04f 3aff 	movhi.w	sl, #4294967295
 800a62e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a632:	2200      	movs	r2, #0
 800a634:	9206      	str	r2, [sp, #24]
 800a636:	e076      	b.n	800a726 <_strtod_l+0x5ee>
 800a638:	f012 0f01 	tst.w	r2, #1
 800a63c:	d004      	beq.n	800a648 <_strtod_l+0x510>
 800a63e:	ed96 6b00 	vldr	d6, [r6]
 800a642:	2001      	movs	r0, #1
 800a644:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a648:	3101      	adds	r1, #1
 800a64a:	1052      	asrs	r2, r2, #1
 800a64c:	3608      	adds	r6, #8
 800a64e:	e7cd      	b.n	800a5ec <_strtod_l+0x4b4>
 800a650:	d0ef      	beq.n	800a632 <_strtod_l+0x4fa>
 800a652:	4252      	negs	r2, r2
 800a654:	f012 000f 	ands.w	r0, r2, #15
 800a658:	d00a      	beq.n	800a670 <_strtod_l+0x538>
 800a65a:	4912      	ldr	r1, [pc, #72]	@ (800a6a4 <_strtod_l+0x56c>)
 800a65c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a660:	ed91 7b00 	vldr	d7, [r1]
 800a664:	ec4b ab16 	vmov	d6, sl, fp
 800a668:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a66c:	ec5b ab17 	vmov	sl, fp, d7
 800a670:	1112      	asrs	r2, r2, #4
 800a672:	d0de      	beq.n	800a632 <_strtod_l+0x4fa>
 800a674:	2a1f      	cmp	r2, #31
 800a676:	dd1f      	ble.n	800a6b8 <_strtod_l+0x580>
 800a678:	2400      	movs	r4, #0
 800a67a:	4625      	mov	r5, r4
 800a67c:	9407      	str	r4, [sp, #28]
 800a67e:	4626      	mov	r6, r4
 800a680:	9a05      	ldr	r2, [sp, #20]
 800a682:	2322      	movs	r3, #34	@ 0x22
 800a684:	f04f 0a00 	mov.w	sl, #0
 800a688:	f04f 0b00 	mov.w	fp, #0
 800a68c:	6013      	str	r3, [r2, #0]
 800a68e:	e76a      	b.n	800a566 <_strtod_l+0x42e>
 800a690:	0800c1c1 	.word	0x0800c1c1
 800a694:	0800c3d4 	.word	0x0800c3d4
 800a698:	0800c1b9 	.word	0x0800c1b9
 800a69c:	0800c1f0 	.word	0x0800c1f0
 800a6a0:	0800c57d 	.word	0x0800c57d
 800a6a4:	0800c308 	.word	0x0800c308
 800a6a8:	0800c2e0 	.word	0x0800c2e0
 800a6ac:	7ca00000 	.word	0x7ca00000
 800a6b0:	7ff00000 	.word	0x7ff00000
 800a6b4:	7fefffff 	.word	0x7fefffff
 800a6b8:	f012 0110 	ands.w	r1, r2, #16
 800a6bc:	bf18      	it	ne
 800a6be:	216a      	movne	r1, #106	@ 0x6a
 800a6c0:	9106      	str	r1, [sp, #24]
 800a6c2:	ec4b ab17 	vmov	d7, sl, fp
 800a6c6:	49b0      	ldr	r1, [pc, #704]	@ (800a988 <_strtod_l+0x850>)
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	07d6      	lsls	r6, r2, #31
 800a6cc:	d504      	bpl.n	800a6d8 <_strtod_l+0x5a0>
 800a6ce:	ed91 6b00 	vldr	d6, [r1]
 800a6d2:	2001      	movs	r0, #1
 800a6d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a6d8:	1052      	asrs	r2, r2, #1
 800a6da:	f101 0108 	add.w	r1, r1, #8
 800a6de:	d1f4      	bne.n	800a6ca <_strtod_l+0x592>
 800a6e0:	b108      	cbz	r0, 800a6e6 <_strtod_l+0x5ae>
 800a6e2:	ec5b ab17 	vmov	sl, fp, d7
 800a6e6:	9a06      	ldr	r2, [sp, #24]
 800a6e8:	b1b2      	cbz	r2, 800a718 <_strtod_l+0x5e0>
 800a6ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a6ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	4658      	mov	r0, fp
 800a6f6:	dd0f      	ble.n	800a718 <_strtod_l+0x5e0>
 800a6f8:	2a1f      	cmp	r2, #31
 800a6fa:	dd55      	ble.n	800a7a8 <_strtod_l+0x670>
 800a6fc:	2a34      	cmp	r2, #52	@ 0x34
 800a6fe:	bfde      	ittt	le
 800a700:	f04f 32ff 	movle.w	r2, #4294967295
 800a704:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a708:	408a      	lslle	r2, r1
 800a70a:	f04f 0a00 	mov.w	sl, #0
 800a70e:	bfcc      	ite	gt
 800a710:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a714:	ea02 0b00 	andle.w	fp, r2, r0
 800a718:	ec4b ab17 	vmov	d7, sl, fp
 800a71c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a724:	d0a8      	beq.n	800a678 <_strtod_l+0x540>
 800a726:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a728:	9805      	ldr	r0, [sp, #20]
 800a72a:	f8cd 9000 	str.w	r9, [sp]
 800a72e:	462a      	mov	r2, r5
 800a730:	f7ff f8e0 	bl	80098f4 <__s2b>
 800a734:	9007      	str	r0, [sp, #28]
 800a736:	2800      	cmp	r0, #0
 800a738:	f43f af0a 	beq.w	800a550 <_strtod_l+0x418>
 800a73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a73e:	1b3f      	subs	r7, r7, r4
 800a740:	2b00      	cmp	r3, #0
 800a742:	bfb4      	ite	lt
 800a744:	463b      	movlt	r3, r7
 800a746:	2300      	movge	r3, #0
 800a748:	930a      	str	r3, [sp, #40]	@ 0x28
 800a74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800a978 <_strtod_l+0x840>
 800a750:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a754:	2400      	movs	r4, #0
 800a756:	930d      	str	r3, [sp, #52]	@ 0x34
 800a758:	4625      	mov	r5, r4
 800a75a:	9b07      	ldr	r3, [sp, #28]
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	6859      	ldr	r1, [r3, #4]
 800a760:	f7ff f820 	bl	80097a4 <_Balloc>
 800a764:	4606      	mov	r6, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	f43f aef6 	beq.w	800a558 <_strtod_l+0x420>
 800a76c:	9b07      	ldr	r3, [sp, #28]
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	ec4b ab19 	vmov	d9, sl, fp
 800a774:	3202      	adds	r2, #2
 800a776:	f103 010c 	add.w	r1, r3, #12
 800a77a:	0092      	lsls	r2, r2, #2
 800a77c:	300c      	adds	r0, #12
 800a77e:	f000 fd33 	bl	800b1e8 <memcpy>
 800a782:	eeb0 0b49 	vmov.f64	d0, d9
 800a786:	9805      	ldr	r0, [sp, #20]
 800a788:	aa14      	add	r2, sp, #80	@ 0x50
 800a78a:	a913      	add	r1, sp, #76	@ 0x4c
 800a78c:	f7ff fbee 	bl	8009f6c <__d2b>
 800a790:	9012      	str	r0, [sp, #72]	@ 0x48
 800a792:	2800      	cmp	r0, #0
 800a794:	f43f aee0 	beq.w	800a558 <_strtod_l+0x420>
 800a798:	9805      	ldr	r0, [sp, #20]
 800a79a:	2101      	movs	r1, #1
 800a79c:	f7ff f940 	bl	8009a20 <__i2b>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	b940      	cbnz	r0, 800a7b6 <_strtod_l+0x67e>
 800a7a4:	2500      	movs	r5, #0
 800a7a6:	e6d7      	b.n	800a558 <_strtod_l+0x420>
 800a7a8:	f04f 31ff 	mov.w	r1, #4294967295
 800a7ac:	fa01 f202 	lsl.w	r2, r1, r2
 800a7b0:	ea02 0a0a 	and.w	sl, r2, sl
 800a7b4:	e7b0      	b.n	800a718 <_strtod_l+0x5e0>
 800a7b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a7b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a7ba:	2f00      	cmp	r7, #0
 800a7bc:	bfab      	itete	ge
 800a7be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a7c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a7c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a7c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a7ca:	bfac      	ite	ge
 800a7cc:	eb07 0903 	addge.w	r9, r7, r3
 800a7d0:	eba3 0807 	sublt.w	r8, r3, r7
 800a7d4:	9b06      	ldr	r3, [sp, #24]
 800a7d6:	1aff      	subs	r7, r7, r3
 800a7d8:	4417      	add	r7, r2
 800a7da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a7de:	4a6b      	ldr	r2, [pc, #428]	@ (800a98c <_strtod_l+0x854>)
 800a7e0:	3f01      	subs	r7, #1
 800a7e2:	4297      	cmp	r7, r2
 800a7e4:	da51      	bge.n	800a88a <_strtod_l+0x752>
 800a7e6:	1bd1      	subs	r1, r2, r7
 800a7e8:	291f      	cmp	r1, #31
 800a7ea:	eba3 0301 	sub.w	r3, r3, r1
 800a7ee:	f04f 0201 	mov.w	r2, #1
 800a7f2:	dc3e      	bgt.n	800a872 <_strtod_l+0x73a>
 800a7f4:	408a      	lsls	r2, r1
 800a7f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a7fc:	eb09 0703 	add.w	r7, r9, r3
 800a800:	4498      	add	r8, r3
 800a802:	9b06      	ldr	r3, [sp, #24]
 800a804:	45b9      	cmp	r9, r7
 800a806:	4498      	add	r8, r3
 800a808:	464b      	mov	r3, r9
 800a80a:	bfa8      	it	ge
 800a80c:	463b      	movge	r3, r7
 800a80e:	4543      	cmp	r3, r8
 800a810:	bfa8      	it	ge
 800a812:	4643      	movge	r3, r8
 800a814:	2b00      	cmp	r3, #0
 800a816:	bfc2      	ittt	gt
 800a818:	1aff      	subgt	r7, r7, r3
 800a81a:	eba8 0803 	subgt.w	r8, r8, r3
 800a81e:	eba9 0903 	subgt.w	r9, r9, r3
 800a822:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a824:	2b00      	cmp	r3, #0
 800a826:	dd16      	ble.n	800a856 <_strtod_l+0x71e>
 800a828:	4629      	mov	r1, r5
 800a82a:	9805      	ldr	r0, [sp, #20]
 800a82c:	461a      	mov	r2, r3
 800a82e:	f7ff f9b7 	bl	8009ba0 <__pow5mult>
 800a832:	4605      	mov	r5, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	d0b5      	beq.n	800a7a4 <_strtod_l+0x66c>
 800a838:	4601      	mov	r1, r0
 800a83a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a83c:	9805      	ldr	r0, [sp, #20]
 800a83e:	f7ff f905 	bl	8009a4c <__multiply>
 800a842:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a844:	2800      	cmp	r0, #0
 800a846:	f43f ae87 	beq.w	800a558 <_strtod_l+0x420>
 800a84a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a84c:	9805      	ldr	r0, [sp, #20]
 800a84e:	f7fe ffe9 	bl	8009824 <_Bfree>
 800a852:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a854:	9312      	str	r3, [sp, #72]	@ 0x48
 800a856:	2f00      	cmp	r7, #0
 800a858:	dc1b      	bgt.n	800a892 <_strtod_l+0x75a>
 800a85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	dd21      	ble.n	800a8a4 <_strtod_l+0x76c>
 800a860:	4631      	mov	r1, r6
 800a862:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a864:	9805      	ldr	r0, [sp, #20]
 800a866:	f7ff f99b 	bl	8009ba0 <__pow5mult>
 800a86a:	4606      	mov	r6, r0
 800a86c:	b9d0      	cbnz	r0, 800a8a4 <_strtod_l+0x76c>
 800a86e:	2600      	movs	r6, #0
 800a870:	e672      	b.n	800a558 <_strtod_l+0x420>
 800a872:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800a876:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800a87a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800a87e:	37e2      	adds	r7, #226	@ 0xe2
 800a880:	fa02 f107 	lsl.w	r1, r2, r7
 800a884:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a886:	920c      	str	r2, [sp, #48]	@ 0x30
 800a888:	e7b8      	b.n	800a7fc <_strtod_l+0x6c4>
 800a88a:	2200      	movs	r2, #0
 800a88c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a88e:	2201      	movs	r2, #1
 800a890:	e7f9      	b.n	800a886 <_strtod_l+0x74e>
 800a892:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a894:	9805      	ldr	r0, [sp, #20]
 800a896:	463a      	mov	r2, r7
 800a898:	f7ff f9dc 	bl	8009c54 <__lshift>
 800a89c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a89e:	2800      	cmp	r0, #0
 800a8a0:	d1db      	bne.n	800a85a <_strtod_l+0x722>
 800a8a2:	e659      	b.n	800a558 <_strtod_l+0x420>
 800a8a4:	f1b8 0f00 	cmp.w	r8, #0
 800a8a8:	dd07      	ble.n	800a8ba <_strtod_l+0x782>
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	9805      	ldr	r0, [sp, #20]
 800a8ae:	4642      	mov	r2, r8
 800a8b0:	f7ff f9d0 	bl	8009c54 <__lshift>
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0d9      	beq.n	800a86e <_strtod_l+0x736>
 800a8ba:	f1b9 0f00 	cmp.w	r9, #0
 800a8be:	dd08      	ble.n	800a8d2 <_strtod_l+0x79a>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	9805      	ldr	r0, [sp, #20]
 800a8c4:	464a      	mov	r2, r9
 800a8c6:	f7ff f9c5 	bl	8009c54 <__lshift>
 800a8ca:	4605      	mov	r5, r0
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f43f ae43 	beq.w	800a558 <_strtod_l+0x420>
 800a8d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a8d4:	9805      	ldr	r0, [sp, #20]
 800a8d6:	4632      	mov	r2, r6
 800a8d8:	f7ff fa44 	bl	8009d64 <__mdiff>
 800a8dc:	4604      	mov	r4, r0
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f43f ae3a 	beq.w	800a558 <_strtod_l+0x420>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800a8ea:	60c3      	str	r3, [r0, #12]
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7ff fa1d 	bl	8009d2c <__mcmp>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	da4e      	bge.n	800a994 <_strtod_l+0x85c>
 800a8f6:	ea58 080a 	orrs.w	r8, r8, sl
 800a8fa:	d174      	bne.n	800a9e6 <_strtod_l+0x8ae>
 800a8fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a900:	2b00      	cmp	r3, #0
 800a902:	d170      	bne.n	800a9e6 <_strtod_l+0x8ae>
 800a904:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a908:	0d1b      	lsrs	r3, r3, #20
 800a90a:	051b      	lsls	r3, r3, #20
 800a90c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a910:	d969      	bls.n	800a9e6 <_strtod_l+0x8ae>
 800a912:	6963      	ldr	r3, [r4, #20]
 800a914:	b913      	cbnz	r3, 800a91c <_strtod_l+0x7e4>
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	dd64      	ble.n	800a9e6 <_strtod_l+0x8ae>
 800a91c:	4621      	mov	r1, r4
 800a91e:	2201      	movs	r2, #1
 800a920:	9805      	ldr	r0, [sp, #20]
 800a922:	f7ff f997 	bl	8009c54 <__lshift>
 800a926:	4629      	mov	r1, r5
 800a928:	4604      	mov	r4, r0
 800a92a:	f7ff f9ff 	bl	8009d2c <__mcmp>
 800a92e:	2800      	cmp	r0, #0
 800a930:	dd59      	ble.n	800a9e6 <_strtod_l+0x8ae>
 800a932:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a936:	9a06      	ldr	r2, [sp, #24]
 800a938:	0d1b      	lsrs	r3, r3, #20
 800a93a:	051b      	lsls	r3, r3, #20
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	d070      	beq.n	800aa22 <_strtod_l+0x8ea>
 800a940:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a944:	d86d      	bhi.n	800aa22 <_strtod_l+0x8ea>
 800a946:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a94a:	f67f ae99 	bls.w	800a680 <_strtod_l+0x548>
 800a94e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800a980 <_strtod_l+0x848>
 800a952:	ec4b ab16 	vmov	d6, sl, fp
 800a956:	4b0e      	ldr	r3, [pc, #56]	@ (800a990 <_strtod_l+0x858>)
 800a958:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a95c:	ee17 2a90 	vmov	r2, s15
 800a960:	4013      	ands	r3, r2
 800a962:	ec5b ab17 	vmov	sl, fp, d7
 800a966:	2b00      	cmp	r3, #0
 800a968:	f47f ae01 	bne.w	800a56e <_strtod_l+0x436>
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	2322      	movs	r3, #34	@ 0x22
 800a970:	6013      	str	r3, [r2, #0]
 800a972:	e5fc      	b.n	800a56e <_strtod_l+0x436>
 800a974:	f3af 8000 	nop.w
 800a978:	ffc00000 	.word	0xffc00000
 800a97c:	41dfffff 	.word	0x41dfffff
 800a980:	00000000 	.word	0x00000000
 800a984:	39500000 	.word	0x39500000
 800a988:	0800c400 	.word	0x0800c400
 800a98c:	fffffc02 	.word	0xfffffc02
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	46d9      	mov	r9, fp
 800a996:	d15d      	bne.n	800aa54 <_strtod_l+0x91c>
 800a998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a99c:	f1b8 0f00 	cmp.w	r8, #0
 800a9a0:	d02a      	beq.n	800a9f8 <_strtod_l+0x8c0>
 800a9a2:	4aab      	ldr	r2, [pc, #684]	@ (800ac50 <_strtod_l+0xb18>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d12a      	bne.n	800a9fe <_strtod_l+0x8c6>
 800a9a8:	9b06      	ldr	r3, [sp, #24]
 800a9aa:	4652      	mov	r2, sl
 800a9ac:	b1fb      	cbz	r3, 800a9ee <_strtod_l+0x8b6>
 800a9ae:	4ba9      	ldr	r3, [pc, #676]	@ (800ac54 <_strtod_l+0xb1c>)
 800a9b0:	ea0b 0303 	and.w	r3, fp, r3
 800a9b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a9b8:	f04f 31ff 	mov.w	r1, #4294967295
 800a9bc:	d81a      	bhi.n	800a9f4 <_strtod_l+0x8bc>
 800a9be:	0d1b      	lsrs	r3, r3, #20
 800a9c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d118      	bne.n	800a9fe <_strtod_l+0x8c6>
 800a9cc:	4ba2      	ldr	r3, [pc, #648]	@ (800ac58 <_strtod_l+0xb20>)
 800a9ce:	4599      	cmp	r9, r3
 800a9d0:	d102      	bne.n	800a9d8 <_strtod_l+0x8a0>
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	f43f adc0 	beq.w	800a558 <_strtod_l+0x420>
 800a9d8:	4b9e      	ldr	r3, [pc, #632]	@ (800ac54 <_strtod_l+0xb1c>)
 800a9da:	ea09 0303 	and.w	r3, r9, r3
 800a9de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a9e2:	f04f 0a00 	mov.w	sl, #0
 800a9e6:	9b06      	ldr	r3, [sp, #24]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1b0      	bne.n	800a94e <_strtod_l+0x816>
 800a9ec:	e5bf      	b.n	800a56e <_strtod_l+0x436>
 800a9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f2:	e7e9      	b.n	800a9c8 <_strtod_l+0x890>
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	e7e7      	b.n	800a9c8 <_strtod_l+0x890>
 800a9f8:	ea53 030a 	orrs.w	r3, r3, sl
 800a9fc:	d099      	beq.n	800a932 <_strtod_l+0x7fa>
 800a9fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa00:	b1c3      	cbz	r3, 800aa34 <_strtod_l+0x8fc>
 800aa02:	ea13 0f09 	tst.w	r3, r9
 800aa06:	d0ee      	beq.n	800a9e6 <_strtod_l+0x8ae>
 800aa08:	9a06      	ldr	r2, [sp, #24]
 800aa0a:	4650      	mov	r0, sl
 800aa0c:	4659      	mov	r1, fp
 800aa0e:	f1b8 0f00 	cmp.w	r8, #0
 800aa12:	d013      	beq.n	800aa3c <_strtod_l+0x904>
 800aa14:	f7ff fb75 	bl	800a102 <sulp>
 800aa18:	ee39 7b00 	vadd.f64	d7, d9, d0
 800aa1c:	ec5b ab17 	vmov	sl, fp, d7
 800aa20:	e7e1      	b.n	800a9e6 <_strtod_l+0x8ae>
 800aa22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa2e:	f04f 3aff 	mov.w	sl, #4294967295
 800aa32:	e7d8      	b.n	800a9e6 <_strtod_l+0x8ae>
 800aa34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa36:	ea13 0f0a 	tst.w	r3, sl
 800aa3a:	e7e4      	b.n	800aa06 <_strtod_l+0x8ce>
 800aa3c:	f7ff fb61 	bl	800a102 <sulp>
 800aa40:	ee39 0b40 	vsub.f64	d0, d9, d0
 800aa44:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4c:	ec5b ab10 	vmov	sl, fp, d0
 800aa50:	d1c9      	bne.n	800a9e6 <_strtod_l+0x8ae>
 800aa52:	e615      	b.n	800a680 <_strtod_l+0x548>
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff fae0 	bl	800a01c <__ratio>
 800aa5c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800aa60:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa68:	d85d      	bhi.n	800ab26 <_strtod_l+0x9ee>
 800aa6a:	f1b8 0f00 	cmp.w	r8, #0
 800aa6e:	d164      	bne.n	800ab3a <_strtod_l+0xa02>
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	d14b      	bne.n	800ab0e <_strtod_l+0x9d6>
 800aa76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa7a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d160      	bne.n	800ab44 <_strtod_l+0xa0c>
 800aa82:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800aa86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800aa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8e:	d401      	bmi.n	800aa94 <_strtod_l+0x95c>
 800aa90:	ee20 8b08 	vmul.f64	d8, d0, d8
 800aa94:	eeb1 ab48 	vneg.f64	d10, d8
 800aa98:	486e      	ldr	r0, [pc, #440]	@ (800ac54 <_strtod_l+0xb1c>)
 800aa9a:	4970      	ldr	r1, [pc, #448]	@ (800ac5c <_strtod_l+0xb24>)
 800aa9c:	ea09 0700 	and.w	r7, r9, r0
 800aaa0:	428f      	cmp	r7, r1
 800aaa2:	ec53 2b1a 	vmov	r2, r3, d10
 800aaa6:	d17d      	bne.n	800aba4 <_strtod_l+0xa6c>
 800aaa8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800aaac:	ec4b ab1c 	vmov	d12, sl, fp
 800aab0:	eeb0 0b4c 	vmov.f64	d0, d12
 800aab4:	f7ff f9ea 	bl	8009e8c <__ulp>
 800aab8:	4866      	ldr	r0, [pc, #408]	@ (800ac54 <_strtod_l+0xb1c>)
 800aaba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800aabe:	ee1c 3a90 	vmov	r3, s25
 800aac2:	4a67      	ldr	r2, [pc, #412]	@ (800ac60 <_strtod_l+0xb28>)
 800aac4:	ea03 0100 	and.w	r1, r3, r0
 800aac8:	4291      	cmp	r1, r2
 800aaca:	ec5b ab1c 	vmov	sl, fp, d12
 800aace:	d93c      	bls.n	800ab4a <_strtod_l+0xa12>
 800aad0:	ee19 2a90 	vmov	r2, s19
 800aad4:	4b60      	ldr	r3, [pc, #384]	@ (800ac58 <_strtod_l+0xb20>)
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d104      	bne.n	800aae4 <_strtod_l+0x9ac>
 800aada:	ee19 3a10 	vmov	r3, s18
 800aade:	3301      	adds	r3, #1
 800aae0:	f43f ad3a 	beq.w	800a558 <_strtod_l+0x420>
 800aae4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800ac58 <_strtod_l+0xb20>
 800aae8:	f04f 3aff 	mov.w	sl, #4294967295
 800aaec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aaee:	9805      	ldr	r0, [sp, #20]
 800aaf0:	f7fe fe98 	bl	8009824 <_Bfree>
 800aaf4:	9805      	ldr	r0, [sp, #20]
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	f7fe fe94 	bl	8009824 <_Bfree>
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	4629      	mov	r1, r5
 800ab00:	f7fe fe90 	bl	8009824 <_Bfree>
 800ab04:	9805      	ldr	r0, [sp, #20]
 800ab06:	4621      	mov	r1, r4
 800ab08:	f7fe fe8c 	bl	8009824 <_Bfree>
 800ab0c:	e625      	b.n	800a75a <_strtod_l+0x622>
 800ab0e:	f1ba 0f01 	cmp.w	sl, #1
 800ab12:	d103      	bne.n	800ab1c <_strtod_l+0x9e4>
 800ab14:	f1bb 0f00 	cmp.w	fp, #0
 800ab18:	f43f adb2 	beq.w	800a680 <_strtod_l+0x548>
 800ab1c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ab20:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800ab24:	e7b8      	b.n	800aa98 <_strtod_l+0x960>
 800ab26:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800ab2a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800ab2e:	f1b8 0f00 	cmp.w	r8, #0
 800ab32:	d0af      	beq.n	800aa94 <_strtod_l+0x95c>
 800ab34:	eeb0 ab48 	vmov.f64	d10, d8
 800ab38:	e7ae      	b.n	800aa98 <_strtod_l+0x960>
 800ab3a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800ab3e:	eeb0 8b4a 	vmov.f64	d8, d10
 800ab42:	e7a9      	b.n	800aa98 <_strtod_l+0x960>
 800ab44:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800ab48:	e7a6      	b.n	800aa98 <_strtod_l+0x960>
 800ab4a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ab4e:	9b06      	ldr	r3, [sp, #24]
 800ab50:	46d9      	mov	r9, fp
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1ca      	bne.n	800aaec <_strtod_l+0x9b4>
 800ab56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab5a:	0d1b      	lsrs	r3, r3, #20
 800ab5c:	051b      	lsls	r3, r3, #20
 800ab5e:	429f      	cmp	r7, r3
 800ab60:	d1c4      	bne.n	800aaec <_strtod_l+0x9b4>
 800ab62:	ec51 0b18 	vmov	r0, r1, d8
 800ab66:	f7f5 fde7 	bl	8000738 <__aeabi_d2lz>
 800ab6a:	f7f5 fd9f 	bl	80006ac <__aeabi_l2d>
 800ab6e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800ab72:	ec41 0b17 	vmov	d7, r0, r1
 800ab76:	ea49 090a 	orr.w	r9, r9, sl
 800ab7a:	ea59 0908 	orrs.w	r9, r9, r8
 800ab7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ab82:	d03c      	beq.n	800abfe <_strtod_l+0xac6>
 800ab84:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ac38 <_strtod_l+0xb00>
 800ab88:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ab8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab90:	f53f aced 	bmi.w	800a56e <_strtod_l+0x436>
 800ab94:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ac40 <_strtod_l+0xb08>
 800ab98:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ab9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba0:	dda4      	ble.n	800aaec <_strtod_l+0x9b4>
 800aba2:	e4e4      	b.n	800a56e <_strtod_l+0x436>
 800aba4:	9906      	ldr	r1, [sp, #24]
 800aba6:	b1e1      	cbz	r1, 800abe2 <_strtod_l+0xaaa>
 800aba8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800abac:	d819      	bhi.n	800abe2 <_strtod_l+0xaaa>
 800abae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb6:	d811      	bhi.n	800abdc <_strtod_l+0xaa4>
 800abb8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800abbc:	ee18 3a10 	vmov	r3, s16
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	bf38      	it	cc
 800abc4:	2301      	movcc	r3, #1
 800abc6:	ee08 3a10 	vmov	s16, r3
 800abca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800abce:	f1b8 0f00 	cmp.w	r8, #0
 800abd2:	d111      	bne.n	800abf8 <_strtod_l+0xac0>
 800abd4:	eeb1 7b48 	vneg.f64	d7, d8
 800abd8:	ec53 2b17 	vmov	r2, r3, d7
 800abdc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800abe0:	1bcb      	subs	r3, r1, r7
 800abe2:	eeb0 0b49 	vmov.f64	d0, d9
 800abe6:	ec43 2b1a 	vmov	d10, r2, r3
 800abea:	f7ff f94f 	bl	8009e8c <__ulp>
 800abee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800abf2:	ec5b ab19 	vmov	sl, fp, d9
 800abf6:	e7aa      	b.n	800ab4e <_strtod_l+0xa16>
 800abf8:	eeb0 7b48 	vmov.f64	d7, d8
 800abfc:	e7ec      	b.n	800abd8 <_strtod_l+0xaa0>
 800abfe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800ac48 <_strtod_l+0xb10>
 800ac02:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ac06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0a:	f57f af6f 	bpl.w	800aaec <_strtod_l+0x9b4>
 800ac0e:	e4ae      	b.n	800a56e <_strtod_l+0x436>
 800ac10:	2300      	movs	r3, #0
 800ac12:	9308      	str	r3, [sp, #32]
 800ac14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	f7ff bacc 	b.w	800a1b6 <_strtod_l+0x7e>
 800ac1e:	2a65      	cmp	r2, #101	@ 0x65
 800ac20:	f43f abbc 	beq.w	800a39c <_strtod_l+0x264>
 800ac24:	2a45      	cmp	r2, #69	@ 0x45
 800ac26:	f43f abb9 	beq.w	800a39c <_strtod_l+0x264>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	9306      	str	r3, [sp, #24]
 800ac2e:	f7ff bbf0 	b.w	800a412 <_strtod_l+0x2da>
 800ac32:	bf00      	nop
 800ac34:	f3af 8000 	nop.w
 800ac38:	94a03595 	.word	0x94a03595
 800ac3c:	3fdfffff 	.word	0x3fdfffff
 800ac40:	35afe535 	.word	0x35afe535
 800ac44:	3fe00000 	.word	0x3fe00000
 800ac48:	94a03595 	.word	0x94a03595
 800ac4c:	3fcfffff 	.word	0x3fcfffff
 800ac50:	000fffff 	.word	0x000fffff
 800ac54:	7ff00000 	.word	0x7ff00000
 800ac58:	7fefffff 	.word	0x7fefffff
 800ac5c:	7fe00000 	.word	0x7fe00000
 800ac60:	7c9fffff 	.word	0x7c9fffff

0800ac64 <_strtod_r>:
 800ac64:	4b01      	ldr	r3, [pc, #4]	@ (800ac6c <_strtod_r+0x8>)
 800ac66:	f7ff ba67 	b.w	800a138 <_strtod_l>
 800ac6a:	bf00      	nop
 800ac6c:	2400010c 	.word	0x2400010c

0800ac70 <_strtol_l.constprop.0>:
 800ac70:	2b24      	cmp	r3, #36	@ 0x24
 800ac72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac76:	4686      	mov	lr, r0
 800ac78:	4690      	mov	r8, r2
 800ac7a:	d801      	bhi.n	800ac80 <_strtol_l.constprop.0+0x10>
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d106      	bne.n	800ac8e <_strtol_l.constprop.0+0x1e>
 800ac80:	f7fd fe7e 	bl	8008980 <__errno>
 800ac84:	2316      	movs	r3, #22
 800ac86:	6003      	str	r3, [r0, #0]
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8e:	4834      	ldr	r0, [pc, #208]	@ (800ad60 <_strtol_l.constprop.0+0xf0>)
 800ac90:	460d      	mov	r5, r1
 800ac92:	462a      	mov	r2, r5
 800ac94:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac98:	5d06      	ldrb	r6, [r0, r4]
 800ac9a:	f016 0608 	ands.w	r6, r6, #8
 800ac9e:	d1f8      	bne.n	800ac92 <_strtol_l.constprop.0+0x22>
 800aca0:	2c2d      	cmp	r4, #45	@ 0x2d
 800aca2:	d12d      	bne.n	800ad00 <_strtol_l.constprop.0+0x90>
 800aca4:	782c      	ldrb	r4, [r5, #0]
 800aca6:	2601      	movs	r6, #1
 800aca8:	1c95      	adds	r5, r2, #2
 800acaa:	f033 0210 	bics.w	r2, r3, #16
 800acae:	d109      	bne.n	800acc4 <_strtol_l.constprop.0+0x54>
 800acb0:	2c30      	cmp	r4, #48	@ 0x30
 800acb2:	d12a      	bne.n	800ad0a <_strtol_l.constprop.0+0x9a>
 800acb4:	782a      	ldrb	r2, [r5, #0]
 800acb6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800acba:	2a58      	cmp	r2, #88	@ 0x58
 800acbc:	d125      	bne.n	800ad0a <_strtol_l.constprop.0+0x9a>
 800acbe:	786c      	ldrb	r4, [r5, #1]
 800acc0:	2310      	movs	r3, #16
 800acc2:	3502      	adds	r5, #2
 800acc4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acc8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800accc:	2200      	movs	r2, #0
 800acce:	fbbc f9f3 	udiv	r9, ip, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	fb03 ca19 	mls	sl, r3, r9, ip
 800acd8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acdc:	2f09      	cmp	r7, #9
 800acde:	d81b      	bhi.n	800ad18 <_strtol_l.constprop.0+0xa8>
 800ace0:	463c      	mov	r4, r7
 800ace2:	42a3      	cmp	r3, r4
 800ace4:	dd27      	ble.n	800ad36 <_strtol_l.constprop.0+0xc6>
 800ace6:	1c57      	adds	r7, r2, #1
 800ace8:	d007      	beq.n	800acfa <_strtol_l.constprop.0+0x8a>
 800acea:	4581      	cmp	r9, r0
 800acec:	d320      	bcc.n	800ad30 <_strtol_l.constprop.0+0xc0>
 800acee:	d101      	bne.n	800acf4 <_strtol_l.constprop.0+0x84>
 800acf0:	45a2      	cmp	sl, r4
 800acf2:	db1d      	blt.n	800ad30 <_strtol_l.constprop.0+0xc0>
 800acf4:	fb00 4003 	mla	r0, r0, r3, r4
 800acf8:	2201      	movs	r2, #1
 800acfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acfe:	e7eb      	b.n	800acd8 <_strtol_l.constprop.0+0x68>
 800ad00:	2c2b      	cmp	r4, #43	@ 0x2b
 800ad02:	bf04      	itt	eq
 800ad04:	782c      	ldrbeq	r4, [r5, #0]
 800ad06:	1c95      	addeq	r5, r2, #2
 800ad08:	e7cf      	b.n	800acaa <_strtol_l.constprop.0+0x3a>
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1da      	bne.n	800acc4 <_strtol_l.constprop.0+0x54>
 800ad0e:	2c30      	cmp	r4, #48	@ 0x30
 800ad10:	bf0c      	ite	eq
 800ad12:	2308      	moveq	r3, #8
 800ad14:	230a      	movne	r3, #10
 800ad16:	e7d5      	b.n	800acc4 <_strtol_l.constprop.0+0x54>
 800ad18:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad1c:	2f19      	cmp	r7, #25
 800ad1e:	d801      	bhi.n	800ad24 <_strtol_l.constprop.0+0xb4>
 800ad20:	3c37      	subs	r4, #55	@ 0x37
 800ad22:	e7de      	b.n	800ace2 <_strtol_l.constprop.0+0x72>
 800ad24:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad28:	2f19      	cmp	r7, #25
 800ad2a:	d804      	bhi.n	800ad36 <_strtol_l.constprop.0+0xc6>
 800ad2c:	3c57      	subs	r4, #87	@ 0x57
 800ad2e:	e7d8      	b.n	800ace2 <_strtol_l.constprop.0+0x72>
 800ad30:	f04f 32ff 	mov.w	r2, #4294967295
 800ad34:	e7e1      	b.n	800acfa <_strtol_l.constprop.0+0x8a>
 800ad36:	1c53      	adds	r3, r2, #1
 800ad38:	d108      	bne.n	800ad4c <_strtol_l.constprop.0+0xdc>
 800ad3a:	2322      	movs	r3, #34	@ 0x22
 800ad3c:	f8ce 3000 	str.w	r3, [lr]
 800ad40:	4660      	mov	r0, ip
 800ad42:	f1b8 0f00 	cmp.w	r8, #0
 800ad46:	d0a0      	beq.n	800ac8a <_strtol_l.constprop.0+0x1a>
 800ad48:	1e69      	subs	r1, r5, #1
 800ad4a:	e006      	b.n	800ad5a <_strtol_l.constprop.0+0xea>
 800ad4c:	b106      	cbz	r6, 800ad50 <_strtol_l.constprop.0+0xe0>
 800ad4e:	4240      	negs	r0, r0
 800ad50:	f1b8 0f00 	cmp.w	r8, #0
 800ad54:	d099      	beq.n	800ac8a <_strtol_l.constprop.0+0x1a>
 800ad56:	2a00      	cmp	r2, #0
 800ad58:	d1f6      	bne.n	800ad48 <_strtol_l.constprop.0+0xd8>
 800ad5a:	f8c8 1000 	str.w	r1, [r8]
 800ad5e:	e794      	b.n	800ac8a <_strtol_l.constprop.0+0x1a>
 800ad60:	0800c429 	.word	0x0800c429

0800ad64 <_strtol_r>:
 800ad64:	f7ff bf84 	b.w	800ac70 <_strtol_l.constprop.0>

0800ad68 <__ssputs_r>:
 800ad68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad6c:	688e      	ldr	r6, [r1, #8]
 800ad6e:	461f      	mov	r7, r3
 800ad70:	42be      	cmp	r6, r7
 800ad72:	680b      	ldr	r3, [r1, #0]
 800ad74:	4682      	mov	sl, r0
 800ad76:	460c      	mov	r4, r1
 800ad78:	4690      	mov	r8, r2
 800ad7a:	d82d      	bhi.n	800add8 <__ssputs_r+0x70>
 800ad7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad84:	d026      	beq.n	800add4 <__ssputs_r+0x6c>
 800ad86:	6965      	ldr	r5, [r4, #20]
 800ad88:	6909      	ldr	r1, [r1, #16]
 800ad8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad8e:	eba3 0901 	sub.w	r9, r3, r1
 800ad92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad96:	1c7b      	adds	r3, r7, #1
 800ad98:	444b      	add	r3, r9
 800ad9a:	106d      	asrs	r5, r5, #1
 800ad9c:	429d      	cmp	r5, r3
 800ad9e:	bf38      	it	cc
 800ada0:	461d      	movcc	r5, r3
 800ada2:	0553      	lsls	r3, r2, #21
 800ada4:	d527      	bpl.n	800adf6 <__ssputs_r+0x8e>
 800ada6:	4629      	mov	r1, r5
 800ada8:	f7fe fc70 	bl	800968c <_malloc_r>
 800adac:	4606      	mov	r6, r0
 800adae:	b360      	cbz	r0, 800ae0a <__ssputs_r+0xa2>
 800adb0:	6921      	ldr	r1, [r4, #16]
 800adb2:	464a      	mov	r2, r9
 800adb4:	f000 fa18 	bl	800b1e8 <memcpy>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	6126      	str	r6, [r4, #16]
 800adc6:	6165      	str	r5, [r4, #20]
 800adc8:	444e      	add	r6, r9
 800adca:	eba5 0509 	sub.w	r5, r5, r9
 800adce:	6026      	str	r6, [r4, #0]
 800add0:	60a5      	str	r5, [r4, #8]
 800add2:	463e      	mov	r6, r7
 800add4:	42be      	cmp	r6, r7
 800add6:	d900      	bls.n	800adda <__ssputs_r+0x72>
 800add8:	463e      	mov	r6, r7
 800adda:	6820      	ldr	r0, [r4, #0]
 800addc:	4632      	mov	r2, r6
 800adde:	4641      	mov	r1, r8
 800ade0:	f000 f9c6 	bl	800b170 <memmove>
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	1b9b      	subs	r3, r3, r6
 800ade8:	60a3      	str	r3, [r4, #8]
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	4433      	add	r3, r6
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	2000      	movs	r0, #0
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	462a      	mov	r2, r5
 800adf8:	f000 fd8b 	bl	800b912 <_realloc_r>
 800adfc:	4606      	mov	r6, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d1e0      	bne.n	800adc4 <__ssputs_r+0x5c>
 800ae02:	6921      	ldr	r1, [r4, #16]
 800ae04:	4650      	mov	r0, sl
 800ae06:	f7fe fbcd 	bl	80095a4 <_free_r>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	f8ca 3000 	str.w	r3, [sl]
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae16:	81a3      	strh	r3, [r4, #12]
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1c:	e7e9      	b.n	800adf2 <__ssputs_r+0x8a>
	...

0800ae20 <_svfiprintf_r>:
 800ae20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae24:	4698      	mov	r8, r3
 800ae26:	898b      	ldrh	r3, [r1, #12]
 800ae28:	061b      	lsls	r3, r3, #24
 800ae2a:	b09d      	sub	sp, #116	@ 0x74
 800ae2c:	4607      	mov	r7, r0
 800ae2e:	460d      	mov	r5, r1
 800ae30:	4614      	mov	r4, r2
 800ae32:	d510      	bpl.n	800ae56 <_svfiprintf_r+0x36>
 800ae34:	690b      	ldr	r3, [r1, #16]
 800ae36:	b973      	cbnz	r3, 800ae56 <_svfiprintf_r+0x36>
 800ae38:	2140      	movs	r1, #64	@ 0x40
 800ae3a:	f7fe fc27 	bl	800968c <_malloc_r>
 800ae3e:	6028      	str	r0, [r5, #0]
 800ae40:	6128      	str	r0, [r5, #16]
 800ae42:	b930      	cbnz	r0, 800ae52 <_svfiprintf_r+0x32>
 800ae44:	230c      	movs	r3, #12
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4c:	b01d      	add	sp, #116	@ 0x74
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae52:	2340      	movs	r3, #64	@ 0x40
 800ae54:	616b      	str	r3, [r5, #20]
 800ae56:	2300      	movs	r3, #0
 800ae58:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae5a:	2320      	movs	r3, #32
 800ae5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae64:	2330      	movs	r3, #48	@ 0x30
 800ae66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b004 <_svfiprintf_r+0x1e4>
 800ae6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae6e:	f04f 0901 	mov.w	r9, #1
 800ae72:	4623      	mov	r3, r4
 800ae74:	469a      	mov	sl, r3
 800ae76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae7a:	b10a      	cbz	r2, 800ae80 <_svfiprintf_r+0x60>
 800ae7c:	2a25      	cmp	r2, #37	@ 0x25
 800ae7e:	d1f9      	bne.n	800ae74 <_svfiprintf_r+0x54>
 800ae80:	ebba 0b04 	subs.w	fp, sl, r4
 800ae84:	d00b      	beq.n	800ae9e <_svfiprintf_r+0x7e>
 800ae86:	465b      	mov	r3, fp
 800ae88:	4622      	mov	r2, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	f7ff ff6b 	bl	800ad68 <__ssputs_r>
 800ae92:	3001      	adds	r0, #1
 800ae94:	f000 80a7 	beq.w	800afe6 <_svfiprintf_r+0x1c6>
 800ae98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae9a:	445a      	add	r2, fp
 800ae9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9e:	f89a 3000 	ldrb.w	r3, [sl]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 809f 	beq.w	800afe6 <_svfiprintf_r+0x1c6>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aeae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb2:	f10a 0a01 	add.w	sl, sl, #1
 800aeb6:	9304      	str	r3, [sp, #16]
 800aeb8:	9307      	str	r3, [sp, #28]
 800aeba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aebe:	931a      	str	r3, [sp, #104]	@ 0x68
 800aec0:	4654      	mov	r4, sl
 800aec2:	2205      	movs	r2, #5
 800aec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec8:	484e      	ldr	r0, [pc, #312]	@ (800b004 <_svfiprintf_r+0x1e4>)
 800aeca:	f7f5 fa09 	bl	80002e0 <memchr>
 800aece:	9a04      	ldr	r2, [sp, #16]
 800aed0:	b9d8      	cbnz	r0, 800af0a <_svfiprintf_r+0xea>
 800aed2:	06d0      	lsls	r0, r2, #27
 800aed4:	bf44      	itt	mi
 800aed6:	2320      	movmi	r3, #32
 800aed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aedc:	0711      	lsls	r1, r2, #28
 800aede:	bf44      	itt	mi
 800aee0:	232b      	movmi	r3, #43	@ 0x2b
 800aee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeea:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeec:	d015      	beq.n	800af1a <_svfiprintf_r+0xfa>
 800aeee:	9a07      	ldr	r2, [sp, #28]
 800aef0:	4654      	mov	r4, sl
 800aef2:	2000      	movs	r0, #0
 800aef4:	f04f 0c0a 	mov.w	ip, #10
 800aef8:	4621      	mov	r1, r4
 800aefa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefe:	3b30      	subs	r3, #48	@ 0x30
 800af00:	2b09      	cmp	r3, #9
 800af02:	d94b      	bls.n	800af9c <_svfiprintf_r+0x17c>
 800af04:	b1b0      	cbz	r0, 800af34 <_svfiprintf_r+0x114>
 800af06:	9207      	str	r2, [sp, #28]
 800af08:	e014      	b.n	800af34 <_svfiprintf_r+0x114>
 800af0a:	eba0 0308 	sub.w	r3, r0, r8
 800af0e:	fa09 f303 	lsl.w	r3, r9, r3
 800af12:	4313      	orrs	r3, r2
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	46a2      	mov	sl, r4
 800af18:	e7d2      	b.n	800aec0 <_svfiprintf_r+0xa0>
 800af1a:	9b03      	ldr	r3, [sp, #12]
 800af1c:	1d19      	adds	r1, r3, #4
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	9103      	str	r1, [sp, #12]
 800af22:	2b00      	cmp	r3, #0
 800af24:	bfbb      	ittet	lt
 800af26:	425b      	neglt	r3, r3
 800af28:	f042 0202 	orrlt.w	r2, r2, #2
 800af2c:	9307      	strge	r3, [sp, #28]
 800af2e:	9307      	strlt	r3, [sp, #28]
 800af30:	bfb8      	it	lt
 800af32:	9204      	strlt	r2, [sp, #16]
 800af34:	7823      	ldrb	r3, [r4, #0]
 800af36:	2b2e      	cmp	r3, #46	@ 0x2e
 800af38:	d10a      	bne.n	800af50 <_svfiprintf_r+0x130>
 800af3a:	7863      	ldrb	r3, [r4, #1]
 800af3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3e:	d132      	bne.n	800afa6 <_svfiprintf_r+0x186>
 800af40:	9b03      	ldr	r3, [sp, #12]
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9203      	str	r2, [sp, #12]
 800af48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af4c:	3402      	adds	r4, #2
 800af4e:	9305      	str	r3, [sp, #20]
 800af50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b014 <_svfiprintf_r+0x1f4>
 800af54:	7821      	ldrb	r1, [r4, #0]
 800af56:	2203      	movs	r2, #3
 800af58:	4650      	mov	r0, sl
 800af5a:	f7f5 f9c1 	bl	80002e0 <memchr>
 800af5e:	b138      	cbz	r0, 800af70 <_svfiprintf_r+0x150>
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	eba0 000a 	sub.w	r0, r0, sl
 800af66:	2240      	movs	r2, #64	@ 0x40
 800af68:	4082      	lsls	r2, r0
 800af6a:	4313      	orrs	r3, r2
 800af6c:	3401      	adds	r4, #1
 800af6e:	9304      	str	r3, [sp, #16]
 800af70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af74:	4824      	ldr	r0, [pc, #144]	@ (800b008 <_svfiprintf_r+0x1e8>)
 800af76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af7a:	2206      	movs	r2, #6
 800af7c:	f7f5 f9b0 	bl	80002e0 <memchr>
 800af80:	2800      	cmp	r0, #0
 800af82:	d036      	beq.n	800aff2 <_svfiprintf_r+0x1d2>
 800af84:	4b21      	ldr	r3, [pc, #132]	@ (800b00c <_svfiprintf_r+0x1ec>)
 800af86:	bb1b      	cbnz	r3, 800afd0 <_svfiprintf_r+0x1b0>
 800af88:	9b03      	ldr	r3, [sp, #12]
 800af8a:	3307      	adds	r3, #7
 800af8c:	f023 0307 	bic.w	r3, r3, #7
 800af90:	3308      	adds	r3, #8
 800af92:	9303      	str	r3, [sp, #12]
 800af94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af96:	4433      	add	r3, r6
 800af98:	9309      	str	r3, [sp, #36]	@ 0x24
 800af9a:	e76a      	b.n	800ae72 <_svfiprintf_r+0x52>
 800af9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa0:	460c      	mov	r4, r1
 800afa2:	2001      	movs	r0, #1
 800afa4:	e7a8      	b.n	800aef8 <_svfiprintf_r+0xd8>
 800afa6:	2300      	movs	r3, #0
 800afa8:	3401      	adds	r4, #1
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	4619      	mov	r1, r3
 800afae:	f04f 0c0a 	mov.w	ip, #10
 800afb2:	4620      	mov	r0, r4
 800afb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb8:	3a30      	subs	r2, #48	@ 0x30
 800afba:	2a09      	cmp	r2, #9
 800afbc:	d903      	bls.n	800afc6 <_svfiprintf_r+0x1a6>
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0c6      	beq.n	800af50 <_svfiprintf_r+0x130>
 800afc2:	9105      	str	r1, [sp, #20]
 800afc4:	e7c4      	b.n	800af50 <_svfiprintf_r+0x130>
 800afc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800afca:	4604      	mov	r4, r0
 800afcc:	2301      	movs	r3, #1
 800afce:	e7f0      	b.n	800afb2 <_svfiprintf_r+0x192>
 800afd0:	ab03      	add	r3, sp, #12
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	462a      	mov	r2, r5
 800afd6:	4b0e      	ldr	r3, [pc, #56]	@ (800b010 <_svfiprintf_r+0x1f0>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	4638      	mov	r0, r7
 800afdc:	f7fc fd70 	bl	8007ac0 <_printf_float>
 800afe0:	1c42      	adds	r2, r0, #1
 800afe2:	4606      	mov	r6, r0
 800afe4:	d1d6      	bne.n	800af94 <_svfiprintf_r+0x174>
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	065b      	lsls	r3, r3, #25
 800afea:	f53f af2d 	bmi.w	800ae48 <_svfiprintf_r+0x28>
 800afee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aff0:	e72c      	b.n	800ae4c <_svfiprintf_r+0x2c>
 800aff2:	ab03      	add	r3, sp, #12
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	462a      	mov	r2, r5
 800aff8:	4b05      	ldr	r3, [pc, #20]	@ (800b010 <_svfiprintf_r+0x1f0>)
 800affa:	a904      	add	r1, sp, #16
 800affc:	4638      	mov	r0, r7
 800affe:	f7fc ffe7 	bl	8007fd0 <_printf_i>
 800b002:	e7ed      	b.n	800afe0 <_svfiprintf_r+0x1c0>
 800b004:	0800c529 	.word	0x0800c529
 800b008:	0800c533 	.word	0x0800c533
 800b00c:	08007ac1 	.word	0x08007ac1
 800b010:	0800ad69 	.word	0x0800ad69
 800b014:	0800c52f 	.word	0x0800c52f

0800b018 <__sflush_r>:
 800b018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b020:	0716      	lsls	r6, r2, #28
 800b022:	4605      	mov	r5, r0
 800b024:	460c      	mov	r4, r1
 800b026:	d454      	bmi.n	800b0d2 <__sflush_r+0xba>
 800b028:	684b      	ldr	r3, [r1, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	dc02      	bgt.n	800b034 <__sflush_r+0x1c>
 800b02e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b030:	2b00      	cmp	r3, #0
 800b032:	dd48      	ble.n	800b0c6 <__sflush_r+0xae>
 800b034:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b036:	2e00      	cmp	r6, #0
 800b038:	d045      	beq.n	800b0c6 <__sflush_r+0xae>
 800b03a:	2300      	movs	r3, #0
 800b03c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b040:	682f      	ldr	r7, [r5, #0]
 800b042:	6a21      	ldr	r1, [r4, #32]
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	d030      	beq.n	800b0aa <__sflush_r+0x92>
 800b048:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	0759      	lsls	r1, r3, #29
 800b04e:	d505      	bpl.n	800b05c <__sflush_r+0x44>
 800b050:	6863      	ldr	r3, [r4, #4]
 800b052:	1ad2      	subs	r2, r2, r3
 800b054:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b056:	b10b      	cbz	r3, 800b05c <__sflush_r+0x44>
 800b058:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b05a:	1ad2      	subs	r2, r2, r3
 800b05c:	2300      	movs	r3, #0
 800b05e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b060:	6a21      	ldr	r1, [r4, #32]
 800b062:	4628      	mov	r0, r5
 800b064:	47b0      	blx	r6
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	d106      	bne.n	800b07a <__sflush_r+0x62>
 800b06c:	6829      	ldr	r1, [r5, #0]
 800b06e:	291d      	cmp	r1, #29
 800b070:	d82b      	bhi.n	800b0ca <__sflush_r+0xb2>
 800b072:	4a2a      	ldr	r2, [pc, #168]	@ (800b11c <__sflush_r+0x104>)
 800b074:	410a      	asrs	r2, r1
 800b076:	07d6      	lsls	r6, r2, #31
 800b078:	d427      	bmi.n	800b0ca <__sflush_r+0xb2>
 800b07a:	2200      	movs	r2, #0
 800b07c:	6062      	str	r2, [r4, #4]
 800b07e:	04d9      	lsls	r1, r3, #19
 800b080:	6922      	ldr	r2, [r4, #16]
 800b082:	6022      	str	r2, [r4, #0]
 800b084:	d504      	bpl.n	800b090 <__sflush_r+0x78>
 800b086:	1c42      	adds	r2, r0, #1
 800b088:	d101      	bne.n	800b08e <__sflush_r+0x76>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b903      	cbnz	r3, 800b090 <__sflush_r+0x78>
 800b08e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b092:	602f      	str	r7, [r5, #0]
 800b094:	b1b9      	cbz	r1, 800b0c6 <__sflush_r+0xae>
 800b096:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b09a:	4299      	cmp	r1, r3
 800b09c:	d002      	beq.n	800b0a4 <__sflush_r+0x8c>
 800b09e:	4628      	mov	r0, r5
 800b0a0:	f7fe fa80 	bl	80095a4 <_free_r>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0a8:	e00d      	b.n	800b0c6 <__sflush_r+0xae>
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	47b0      	blx	r6
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	1c50      	adds	r0, r2, #1
 800b0b4:	d1c9      	bne.n	800b04a <__sflush_r+0x32>
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d0c6      	beq.n	800b04a <__sflush_r+0x32>
 800b0bc:	2b1d      	cmp	r3, #29
 800b0be:	d001      	beq.n	800b0c4 <__sflush_r+0xac>
 800b0c0:	2b16      	cmp	r3, #22
 800b0c2:	d11e      	bne.n	800b102 <__sflush_r+0xea>
 800b0c4:	602f      	str	r7, [r5, #0]
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	e022      	b.n	800b110 <__sflush_r+0xf8>
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ce:	b21b      	sxth	r3, r3
 800b0d0:	e01b      	b.n	800b10a <__sflush_r+0xf2>
 800b0d2:	690f      	ldr	r7, [r1, #16]
 800b0d4:	2f00      	cmp	r7, #0
 800b0d6:	d0f6      	beq.n	800b0c6 <__sflush_r+0xae>
 800b0d8:	0793      	lsls	r3, r2, #30
 800b0da:	680e      	ldr	r6, [r1, #0]
 800b0dc:	bf08      	it	eq
 800b0de:	694b      	ldreq	r3, [r1, #20]
 800b0e0:	600f      	str	r7, [r1, #0]
 800b0e2:	bf18      	it	ne
 800b0e4:	2300      	movne	r3, #0
 800b0e6:	eba6 0807 	sub.w	r8, r6, r7
 800b0ea:	608b      	str	r3, [r1, #8]
 800b0ec:	f1b8 0f00 	cmp.w	r8, #0
 800b0f0:	dde9      	ble.n	800b0c6 <__sflush_r+0xae>
 800b0f2:	6a21      	ldr	r1, [r4, #32]
 800b0f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0f6:	4643      	mov	r3, r8
 800b0f8:	463a      	mov	r2, r7
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b0      	blx	r6
 800b0fe:	2800      	cmp	r0, #0
 800b100:	dc08      	bgt.n	800b114 <__sflush_r+0xfc>
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b10a:	81a3      	strh	r3, [r4, #12]
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b114:	4407      	add	r7, r0
 800b116:	eba8 0800 	sub.w	r8, r8, r0
 800b11a:	e7e7      	b.n	800b0ec <__sflush_r+0xd4>
 800b11c:	dfbffffe 	.word	0xdfbffffe

0800b120 <_fflush_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	690b      	ldr	r3, [r1, #16]
 800b124:	4605      	mov	r5, r0
 800b126:	460c      	mov	r4, r1
 800b128:	b913      	cbnz	r3, 800b130 <_fflush_r+0x10>
 800b12a:	2500      	movs	r5, #0
 800b12c:	4628      	mov	r0, r5
 800b12e:	bd38      	pop	{r3, r4, r5, pc}
 800b130:	b118      	cbz	r0, 800b13a <_fflush_r+0x1a>
 800b132:	6a03      	ldr	r3, [r0, #32]
 800b134:	b90b      	cbnz	r3, 800b13a <_fflush_r+0x1a>
 800b136:	f7fd fb03 	bl	8008740 <__sinit>
 800b13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0f3      	beq.n	800b12a <_fflush_r+0xa>
 800b142:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b144:	07d0      	lsls	r0, r2, #31
 800b146:	d404      	bmi.n	800b152 <_fflush_r+0x32>
 800b148:	0599      	lsls	r1, r3, #22
 800b14a:	d402      	bmi.n	800b152 <_fflush_r+0x32>
 800b14c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b14e:	f7fd fc42 	bl	80089d6 <__retarget_lock_acquire_recursive>
 800b152:	4628      	mov	r0, r5
 800b154:	4621      	mov	r1, r4
 800b156:	f7ff ff5f 	bl	800b018 <__sflush_r>
 800b15a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b15c:	07da      	lsls	r2, r3, #31
 800b15e:	4605      	mov	r5, r0
 800b160:	d4e4      	bmi.n	800b12c <_fflush_r+0xc>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	059b      	lsls	r3, r3, #22
 800b166:	d4e1      	bmi.n	800b12c <_fflush_r+0xc>
 800b168:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b16a:	f7fd fc35 	bl	80089d8 <__retarget_lock_release_recursive>
 800b16e:	e7dd      	b.n	800b12c <_fflush_r+0xc>

0800b170 <memmove>:
 800b170:	4288      	cmp	r0, r1
 800b172:	b510      	push	{r4, lr}
 800b174:	eb01 0402 	add.w	r4, r1, r2
 800b178:	d902      	bls.n	800b180 <memmove+0x10>
 800b17a:	4284      	cmp	r4, r0
 800b17c:	4623      	mov	r3, r4
 800b17e:	d807      	bhi.n	800b190 <memmove+0x20>
 800b180:	1e43      	subs	r3, r0, #1
 800b182:	42a1      	cmp	r1, r4
 800b184:	d008      	beq.n	800b198 <memmove+0x28>
 800b186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b18e:	e7f8      	b.n	800b182 <memmove+0x12>
 800b190:	4402      	add	r2, r0
 800b192:	4601      	mov	r1, r0
 800b194:	428a      	cmp	r2, r1
 800b196:	d100      	bne.n	800b19a <memmove+0x2a>
 800b198:	bd10      	pop	{r4, pc}
 800b19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1a2:	e7f7      	b.n	800b194 <memmove+0x24>

0800b1a4 <strncmp>:
 800b1a4:	b510      	push	{r4, lr}
 800b1a6:	b16a      	cbz	r2, 800b1c4 <strncmp+0x20>
 800b1a8:	3901      	subs	r1, #1
 800b1aa:	1884      	adds	r4, r0, r2
 800b1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d103      	bne.n	800b1c0 <strncmp+0x1c>
 800b1b8:	42a0      	cmp	r0, r4
 800b1ba:	d001      	beq.n	800b1c0 <strncmp+0x1c>
 800b1bc:	2a00      	cmp	r2, #0
 800b1be:	d1f5      	bne.n	800b1ac <strncmp+0x8>
 800b1c0:	1ad0      	subs	r0, r2, r3
 800b1c2:	bd10      	pop	{r4, pc}
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	e7fc      	b.n	800b1c2 <strncmp+0x1e>

0800b1c8 <_sbrk_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d06      	ldr	r5, [pc, #24]	@ (800b1e4 <_sbrk_r+0x1c>)
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	4608      	mov	r0, r1
 800b1d2:	602b      	str	r3, [r5, #0]
 800b1d4:	f7f6 fbde 	bl	8001994 <_sbrk>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	d102      	bne.n	800b1e2 <_sbrk_r+0x1a>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	b103      	cbz	r3, 800b1e2 <_sbrk_r+0x1a>
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	bd38      	pop	{r3, r4, r5, pc}
 800b1e4:	2400057c 	.word	0x2400057c

0800b1e8 <memcpy>:
 800b1e8:	440a      	add	r2, r1
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1f0:	d100      	bne.n	800b1f4 <memcpy+0xc>
 800b1f2:	4770      	bx	lr
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1fe:	4291      	cmp	r1, r2
 800b200:	d1f9      	bne.n	800b1f6 <memcpy+0xe>
 800b202:	bd10      	pop	{r4, pc}
 800b204:	0000      	movs	r0, r0
	...

0800b208 <nan>:
 800b208:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b210 <nan+0x8>
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	00000000 	.word	0x00000000
 800b214:	7ff80000 	.word	0x7ff80000

0800b218 <__assert_func>:
 800b218:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b21a:	4614      	mov	r4, r2
 800b21c:	461a      	mov	r2, r3
 800b21e:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <__assert_func+0x2c>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4605      	mov	r5, r0
 800b224:	68d8      	ldr	r0, [r3, #12]
 800b226:	b954      	cbnz	r4, 800b23e <__assert_func+0x26>
 800b228:	4b07      	ldr	r3, [pc, #28]	@ (800b248 <__assert_func+0x30>)
 800b22a:	461c      	mov	r4, r3
 800b22c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b230:	9100      	str	r1, [sp, #0]
 800b232:	462b      	mov	r3, r5
 800b234:	4905      	ldr	r1, [pc, #20]	@ (800b24c <__assert_func+0x34>)
 800b236:	f000 fba7 	bl	800b988 <fiprintf>
 800b23a:	f000 fbb7 	bl	800b9ac <abort>
 800b23e:	4b04      	ldr	r3, [pc, #16]	@ (800b250 <__assert_func+0x38>)
 800b240:	e7f4      	b.n	800b22c <__assert_func+0x14>
 800b242:	bf00      	nop
 800b244:	240000bc 	.word	0x240000bc
 800b248:	0800c57d 	.word	0x0800c57d
 800b24c:	0800c54f 	.word	0x0800c54f
 800b250:	0800c542 	.word	0x0800c542

0800b254 <_calloc_r>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	fba1 5402 	umull	r5, r4, r1, r2
 800b25a:	b93c      	cbnz	r4, 800b26c <_calloc_r+0x18>
 800b25c:	4629      	mov	r1, r5
 800b25e:	f7fe fa15 	bl	800968c <_malloc_r>
 800b262:	4606      	mov	r6, r0
 800b264:	b928      	cbnz	r0, 800b272 <_calloc_r+0x1e>
 800b266:	2600      	movs	r6, #0
 800b268:	4630      	mov	r0, r6
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	220c      	movs	r2, #12
 800b26e:	6002      	str	r2, [r0, #0]
 800b270:	e7f9      	b.n	800b266 <_calloc_r+0x12>
 800b272:	462a      	mov	r2, r5
 800b274:	4621      	mov	r1, r4
 800b276:	f7fd fb30 	bl	80088da <memset>
 800b27a:	e7f5      	b.n	800b268 <_calloc_r+0x14>

0800b27c <rshift>:
 800b27c:	6903      	ldr	r3, [r0, #16]
 800b27e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b286:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b28a:	f100 0414 	add.w	r4, r0, #20
 800b28e:	dd45      	ble.n	800b31c <rshift+0xa0>
 800b290:	f011 011f 	ands.w	r1, r1, #31
 800b294:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b298:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b29c:	d10c      	bne.n	800b2b8 <rshift+0x3c>
 800b29e:	f100 0710 	add.w	r7, r0, #16
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	42b1      	cmp	r1, r6
 800b2a6:	d334      	bcc.n	800b312 <rshift+0x96>
 800b2a8:	1a9b      	subs	r3, r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	1eea      	subs	r2, r5, #3
 800b2ae:	4296      	cmp	r6, r2
 800b2b0:	bf38      	it	cc
 800b2b2:	2300      	movcc	r3, #0
 800b2b4:	4423      	add	r3, r4
 800b2b6:	e015      	b.n	800b2e4 <rshift+0x68>
 800b2b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2bc:	f1c1 0820 	rsb	r8, r1, #32
 800b2c0:	40cf      	lsrs	r7, r1
 800b2c2:	f105 0e04 	add.w	lr, r5, #4
 800b2c6:	46a1      	mov	r9, r4
 800b2c8:	4576      	cmp	r6, lr
 800b2ca:	46f4      	mov	ip, lr
 800b2cc:	d815      	bhi.n	800b2fa <rshift+0x7e>
 800b2ce:	1a9a      	subs	r2, r3, r2
 800b2d0:	0092      	lsls	r2, r2, #2
 800b2d2:	3a04      	subs	r2, #4
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	42ae      	cmp	r6, r5
 800b2d8:	bf38      	it	cc
 800b2da:	2200      	movcc	r2, #0
 800b2dc:	18a3      	adds	r3, r4, r2
 800b2de:	50a7      	str	r7, [r4, r2]
 800b2e0:	b107      	cbz	r7, 800b2e4 <rshift+0x68>
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	1b1a      	subs	r2, r3, r4
 800b2e6:	42a3      	cmp	r3, r4
 800b2e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2ec:	bf08      	it	eq
 800b2ee:	2300      	moveq	r3, #0
 800b2f0:	6102      	str	r2, [r0, #16]
 800b2f2:	bf08      	it	eq
 800b2f4:	6143      	streq	r3, [r0, #20]
 800b2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2fa:	f8dc c000 	ldr.w	ip, [ip]
 800b2fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800b302:	ea4c 0707 	orr.w	r7, ip, r7
 800b306:	f849 7b04 	str.w	r7, [r9], #4
 800b30a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b30e:	40cf      	lsrs	r7, r1
 800b310:	e7da      	b.n	800b2c8 <rshift+0x4c>
 800b312:	f851 cb04 	ldr.w	ip, [r1], #4
 800b316:	f847 cf04 	str.w	ip, [r7, #4]!
 800b31a:	e7c3      	b.n	800b2a4 <rshift+0x28>
 800b31c:	4623      	mov	r3, r4
 800b31e:	e7e1      	b.n	800b2e4 <rshift+0x68>

0800b320 <__hexdig_fun>:
 800b320:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b324:	2b09      	cmp	r3, #9
 800b326:	d802      	bhi.n	800b32e <__hexdig_fun+0xe>
 800b328:	3820      	subs	r0, #32
 800b32a:	b2c0      	uxtb	r0, r0
 800b32c:	4770      	bx	lr
 800b32e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b332:	2b05      	cmp	r3, #5
 800b334:	d801      	bhi.n	800b33a <__hexdig_fun+0x1a>
 800b336:	3847      	subs	r0, #71	@ 0x47
 800b338:	e7f7      	b.n	800b32a <__hexdig_fun+0xa>
 800b33a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d801      	bhi.n	800b346 <__hexdig_fun+0x26>
 800b342:	3827      	subs	r0, #39	@ 0x27
 800b344:	e7f1      	b.n	800b32a <__hexdig_fun+0xa>
 800b346:	2000      	movs	r0, #0
 800b348:	4770      	bx	lr
	...

0800b34c <__gethex>:
 800b34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b350:	b085      	sub	sp, #20
 800b352:	468a      	mov	sl, r1
 800b354:	9302      	str	r3, [sp, #8]
 800b356:	680b      	ldr	r3, [r1, #0]
 800b358:	9001      	str	r0, [sp, #4]
 800b35a:	4690      	mov	r8, r2
 800b35c:	1c9c      	adds	r4, r3, #2
 800b35e:	46a1      	mov	r9, r4
 800b360:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b364:	2830      	cmp	r0, #48	@ 0x30
 800b366:	d0fa      	beq.n	800b35e <__gethex+0x12>
 800b368:	eba9 0303 	sub.w	r3, r9, r3
 800b36c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b370:	f7ff ffd6 	bl	800b320 <__hexdig_fun>
 800b374:	4605      	mov	r5, r0
 800b376:	2800      	cmp	r0, #0
 800b378:	d168      	bne.n	800b44c <__gethex+0x100>
 800b37a:	49a0      	ldr	r1, [pc, #640]	@ (800b5fc <__gethex+0x2b0>)
 800b37c:	2201      	movs	r2, #1
 800b37e:	4648      	mov	r0, r9
 800b380:	f7ff ff10 	bl	800b1a4 <strncmp>
 800b384:	4607      	mov	r7, r0
 800b386:	2800      	cmp	r0, #0
 800b388:	d167      	bne.n	800b45a <__gethex+0x10e>
 800b38a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b38e:	4626      	mov	r6, r4
 800b390:	f7ff ffc6 	bl	800b320 <__hexdig_fun>
 800b394:	2800      	cmp	r0, #0
 800b396:	d062      	beq.n	800b45e <__gethex+0x112>
 800b398:	4623      	mov	r3, r4
 800b39a:	7818      	ldrb	r0, [r3, #0]
 800b39c:	2830      	cmp	r0, #48	@ 0x30
 800b39e:	4699      	mov	r9, r3
 800b3a0:	f103 0301 	add.w	r3, r3, #1
 800b3a4:	d0f9      	beq.n	800b39a <__gethex+0x4e>
 800b3a6:	f7ff ffbb 	bl	800b320 <__hexdig_fun>
 800b3aa:	fab0 f580 	clz	r5, r0
 800b3ae:	096d      	lsrs	r5, r5, #5
 800b3b0:	f04f 0b01 	mov.w	fp, #1
 800b3b4:	464a      	mov	r2, r9
 800b3b6:	4616      	mov	r6, r2
 800b3b8:	3201      	adds	r2, #1
 800b3ba:	7830      	ldrb	r0, [r6, #0]
 800b3bc:	f7ff ffb0 	bl	800b320 <__hexdig_fun>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	d1f8      	bne.n	800b3b6 <__gethex+0x6a>
 800b3c4:	498d      	ldr	r1, [pc, #564]	@ (800b5fc <__gethex+0x2b0>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	f7ff feeb 	bl	800b1a4 <strncmp>
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d13f      	bne.n	800b452 <__gethex+0x106>
 800b3d2:	b944      	cbnz	r4, 800b3e6 <__gethex+0x9a>
 800b3d4:	1c74      	adds	r4, r6, #1
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	4616      	mov	r6, r2
 800b3da:	3201      	adds	r2, #1
 800b3dc:	7830      	ldrb	r0, [r6, #0]
 800b3de:	f7ff ff9f 	bl	800b320 <__hexdig_fun>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d1f8      	bne.n	800b3d8 <__gethex+0x8c>
 800b3e6:	1ba4      	subs	r4, r4, r6
 800b3e8:	00a7      	lsls	r7, r4, #2
 800b3ea:	7833      	ldrb	r3, [r6, #0]
 800b3ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b3f0:	2b50      	cmp	r3, #80	@ 0x50
 800b3f2:	d13e      	bne.n	800b472 <__gethex+0x126>
 800b3f4:	7873      	ldrb	r3, [r6, #1]
 800b3f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3f8:	d033      	beq.n	800b462 <__gethex+0x116>
 800b3fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3fc:	d034      	beq.n	800b468 <__gethex+0x11c>
 800b3fe:	1c71      	adds	r1, r6, #1
 800b400:	2400      	movs	r4, #0
 800b402:	7808      	ldrb	r0, [r1, #0]
 800b404:	f7ff ff8c 	bl	800b320 <__hexdig_fun>
 800b408:	1e43      	subs	r3, r0, #1
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	2b18      	cmp	r3, #24
 800b40e:	d830      	bhi.n	800b472 <__gethex+0x126>
 800b410:	f1a0 0210 	sub.w	r2, r0, #16
 800b414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b418:	f7ff ff82 	bl	800b320 <__hexdig_fun>
 800b41c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b420:	fa5f fc8c 	uxtb.w	ip, ip
 800b424:	f1bc 0f18 	cmp.w	ip, #24
 800b428:	f04f 030a 	mov.w	r3, #10
 800b42c:	d91e      	bls.n	800b46c <__gethex+0x120>
 800b42e:	b104      	cbz	r4, 800b432 <__gethex+0xe6>
 800b430:	4252      	negs	r2, r2
 800b432:	4417      	add	r7, r2
 800b434:	f8ca 1000 	str.w	r1, [sl]
 800b438:	b1ed      	cbz	r5, 800b476 <__gethex+0x12a>
 800b43a:	f1bb 0f00 	cmp.w	fp, #0
 800b43e:	bf0c      	ite	eq
 800b440:	2506      	moveq	r5, #6
 800b442:	2500      	movne	r5, #0
 800b444:	4628      	mov	r0, r5
 800b446:	b005      	add	sp, #20
 800b448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b44c:	2500      	movs	r5, #0
 800b44e:	462c      	mov	r4, r5
 800b450:	e7b0      	b.n	800b3b4 <__gethex+0x68>
 800b452:	2c00      	cmp	r4, #0
 800b454:	d1c7      	bne.n	800b3e6 <__gethex+0x9a>
 800b456:	4627      	mov	r7, r4
 800b458:	e7c7      	b.n	800b3ea <__gethex+0x9e>
 800b45a:	464e      	mov	r6, r9
 800b45c:	462f      	mov	r7, r5
 800b45e:	2501      	movs	r5, #1
 800b460:	e7c3      	b.n	800b3ea <__gethex+0x9e>
 800b462:	2400      	movs	r4, #0
 800b464:	1cb1      	adds	r1, r6, #2
 800b466:	e7cc      	b.n	800b402 <__gethex+0xb6>
 800b468:	2401      	movs	r4, #1
 800b46a:	e7fb      	b.n	800b464 <__gethex+0x118>
 800b46c:	fb03 0002 	mla	r0, r3, r2, r0
 800b470:	e7ce      	b.n	800b410 <__gethex+0xc4>
 800b472:	4631      	mov	r1, r6
 800b474:	e7de      	b.n	800b434 <__gethex+0xe8>
 800b476:	eba6 0309 	sub.w	r3, r6, r9
 800b47a:	3b01      	subs	r3, #1
 800b47c:	4629      	mov	r1, r5
 800b47e:	2b07      	cmp	r3, #7
 800b480:	dc0a      	bgt.n	800b498 <__gethex+0x14c>
 800b482:	9801      	ldr	r0, [sp, #4]
 800b484:	f7fe f98e 	bl	80097a4 <_Balloc>
 800b488:	4604      	mov	r4, r0
 800b48a:	b940      	cbnz	r0, 800b49e <__gethex+0x152>
 800b48c:	4b5c      	ldr	r3, [pc, #368]	@ (800b600 <__gethex+0x2b4>)
 800b48e:	4602      	mov	r2, r0
 800b490:	21e4      	movs	r1, #228	@ 0xe4
 800b492:	485c      	ldr	r0, [pc, #368]	@ (800b604 <__gethex+0x2b8>)
 800b494:	f7ff fec0 	bl	800b218 <__assert_func>
 800b498:	3101      	adds	r1, #1
 800b49a:	105b      	asrs	r3, r3, #1
 800b49c:	e7ef      	b.n	800b47e <__gethex+0x132>
 800b49e:	f100 0a14 	add.w	sl, r0, #20
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	4655      	mov	r5, sl
 800b4a6:	469b      	mov	fp, r3
 800b4a8:	45b1      	cmp	r9, r6
 800b4aa:	d337      	bcc.n	800b51c <__gethex+0x1d0>
 800b4ac:	f845 bb04 	str.w	fp, [r5], #4
 800b4b0:	eba5 050a 	sub.w	r5, r5, sl
 800b4b4:	10ad      	asrs	r5, r5, #2
 800b4b6:	6125      	str	r5, [r4, #16]
 800b4b8:	4658      	mov	r0, fp
 800b4ba:	f7fe fa65 	bl	8009988 <__hi0bits>
 800b4be:	016d      	lsls	r5, r5, #5
 800b4c0:	f8d8 6000 	ldr.w	r6, [r8]
 800b4c4:	1a2d      	subs	r5, r5, r0
 800b4c6:	42b5      	cmp	r5, r6
 800b4c8:	dd54      	ble.n	800b574 <__gethex+0x228>
 800b4ca:	1bad      	subs	r5, r5, r6
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f7fe fdf6 	bl	800a0c0 <__any_on>
 800b4d4:	4681      	mov	r9, r0
 800b4d6:	b178      	cbz	r0, 800b4f8 <__gethex+0x1ac>
 800b4d8:	1e6b      	subs	r3, r5, #1
 800b4da:	1159      	asrs	r1, r3, #5
 800b4dc:	f003 021f 	and.w	r2, r3, #31
 800b4e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4e4:	f04f 0901 	mov.w	r9, #1
 800b4e8:	fa09 f202 	lsl.w	r2, r9, r2
 800b4ec:	420a      	tst	r2, r1
 800b4ee:	d003      	beq.n	800b4f8 <__gethex+0x1ac>
 800b4f0:	454b      	cmp	r3, r9
 800b4f2:	dc36      	bgt.n	800b562 <__gethex+0x216>
 800b4f4:	f04f 0902 	mov.w	r9, #2
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	f7ff febe 	bl	800b27c <rshift>
 800b500:	442f      	add	r7, r5
 800b502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b506:	42bb      	cmp	r3, r7
 800b508:	da42      	bge.n	800b590 <__gethex+0x244>
 800b50a:	9801      	ldr	r0, [sp, #4]
 800b50c:	4621      	mov	r1, r4
 800b50e:	f7fe f989 	bl	8009824 <_Bfree>
 800b512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b514:	2300      	movs	r3, #0
 800b516:	6013      	str	r3, [r2, #0]
 800b518:	25a3      	movs	r5, #163	@ 0xa3
 800b51a:	e793      	b.n	800b444 <__gethex+0xf8>
 800b51c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b520:	2a2e      	cmp	r2, #46	@ 0x2e
 800b522:	d012      	beq.n	800b54a <__gethex+0x1fe>
 800b524:	2b20      	cmp	r3, #32
 800b526:	d104      	bne.n	800b532 <__gethex+0x1e6>
 800b528:	f845 bb04 	str.w	fp, [r5], #4
 800b52c:	f04f 0b00 	mov.w	fp, #0
 800b530:	465b      	mov	r3, fp
 800b532:	7830      	ldrb	r0, [r6, #0]
 800b534:	9303      	str	r3, [sp, #12]
 800b536:	f7ff fef3 	bl	800b320 <__hexdig_fun>
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	f000 000f 	and.w	r0, r0, #15
 800b540:	4098      	lsls	r0, r3
 800b542:	ea4b 0b00 	orr.w	fp, fp, r0
 800b546:	3304      	adds	r3, #4
 800b548:	e7ae      	b.n	800b4a8 <__gethex+0x15c>
 800b54a:	45b1      	cmp	r9, r6
 800b54c:	d8ea      	bhi.n	800b524 <__gethex+0x1d8>
 800b54e:	492b      	ldr	r1, [pc, #172]	@ (800b5fc <__gethex+0x2b0>)
 800b550:	9303      	str	r3, [sp, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff fe25 	bl	800b1a4 <strncmp>
 800b55a:	9b03      	ldr	r3, [sp, #12]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d1e1      	bne.n	800b524 <__gethex+0x1d8>
 800b560:	e7a2      	b.n	800b4a8 <__gethex+0x15c>
 800b562:	1ea9      	subs	r1, r5, #2
 800b564:	4620      	mov	r0, r4
 800b566:	f7fe fdab 	bl	800a0c0 <__any_on>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d0c2      	beq.n	800b4f4 <__gethex+0x1a8>
 800b56e:	f04f 0903 	mov.w	r9, #3
 800b572:	e7c1      	b.n	800b4f8 <__gethex+0x1ac>
 800b574:	da09      	bge.n	800b58a <__gethex+0x23e>
 800b576:	1b75      	subs	r5, r6, r5
 800b578:	4621      	mov	r1, r4
 800b57a:	9801      	ldr	r0, [sp, #4]
 800b57c:	462a      	mov	r2, r5
 800b57e:	f7fe fb69 	bl	8009c54 <__lshift>
 800b582:	1b7f      	subs	r7, r7, r5
 800b584:	4604      	mov	r4, r0
 800b586:	f100 0a14 	add.w	sl, r0, #20
 800b58a:	f04f 0900 	mov.w	r9, #0
 800b58e:	e7b8      	b.n	800b502 <__gethex+0x1b6>
 800b590:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b594:	42bd      	cmp	r5, r7
 800b596:	dd6f      	ble.n	800b678 <__gethex+0x32c>
 800b598:	1bed      	subs	r5, r5, r7
 800b59a:	42ae      	cmp	r6, r5
 800b59c:	dc34      	bgt.n	800b608 <__gethex+0x2bc>
 800b59e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5a2:	2b02      	cmp	r3, #2
 800b5a4:	d022      	beq.n	800b5ec <__gethex+0x2a0>
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d024      	beq.n	800b5f4 <__gethex+0x2a8>
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d115      	bne.n	800b5da <__gethex+0x28e>
 800b5ae:	42ae      	cmp	r6, r5
 800b5b0:	d113      	bne.n	800b5da <__gethex+0x28e>
 800b5b2:	2e01      	cmp	r6, #1
 800b5b4:	d10b      	bne.n	800b5ce <__gethex+0x282>
 800b5b6:	9a02      	ldr	r2, [sp, #8]
 800b5b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	2301      	movs	r3, #1
 800b5c0:	6123      	str	r3, [r4, #16]
 800b5c2:	f8ca 3000 	str.w	r3, [sl]
 800b5c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5c8:	2562      	movs	r5, #98	@ 0x62
 800b5ca:	601c      	str	r4, [r3, #0]
 800b5cc:	e73a      	b.n	800b444 <__gethex+0xf8>
 800b5ce:	1e71      	subs	r1, r6, #1
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f7fe fd75 	bl	800a0c0 <__any_on>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d1ed      	bne.n	800b5b6 <__gethex+0x26a>
 800b5da:	9801      	ldr	r0, [sp, #4]
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f7fe f921 	bl	8009824 <_Bfree>
 800b5e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	6013      	str	r3, [r2, #0]
 800b5e8:	2550      	movs	r5, #80	@ 0x50
 800b5ea:	e72b      	b.n	800b444 <__gethex+0xf8>
 800b5ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f3      	bne.n	800b5da <__gethex+0x28e>
 800b5f2:	e7e0      	b.n	800b5b6 <__gethex+0x26a>
 800b5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1dd      	bne.n	800b5b6 <__gethex+0x26a>
 800b5fa:	e7ee      	b.n	800b5da <__gethex+0x28e>
 800b5fc:	0800c3d0 	.word	0x0800c3d0
 800b600:	0800c269 	.word	0x0800c269
 800b604:	0800c57e 	.word	0x0800c57e
 800b608:	1e6f      	subs	r7, r5, #1
 800b60a:	f1b9 0f00 	cmp.w	r9, #0
 800b60e:	d130      	bne.n	800b672 <__gethex+0x326>
 800b610:	b127      	cbz	r7, 800b61c <__gethex+0x2d0>
 800b612:	4639      	mov	r1, r7
 800b614:	4620      	mov	r0, r4
 800b616:	f7fe fd53 	bl	800a0c0 <__any_on>
 800b61a:	4681      	mov	r9, r0
 800b61c:	117a      	asrs	r2, r7, #5
 800b61e:	2301      	movs	r3, #1
 800b620:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b624:	f007 071f 	and.w	r7, r7, #31
 800b628:	40bb      	lsls	r3, r7
 800b62a:	4213      	tst	r3, r2
 800b62c:	4629      	mov	r1, r5
 800b62e:	4620      	mov	r0, r4
 800b630:	bf18      	it	ne
 800b632:	f049 0902 	orrne.w	r9, r9, #2
 800b636:	f7ff fe21 	bl	800b27c <rshift>
 800b63a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b63e:	1b76      	subs	r6, r6, r5
 800b640:	2502      	movs	r5, #2
 800b642:	f1b9 0f00 	cmp.w	r9, #0
 800b646:	d047      	beq.n	800b6d8 <__gethex+0x38c>
 800b648:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d015      	beq.n	800b67c <__gethex+0x330>
 800b650:	2b03      	cmp	r3, #3
 800b652:	d017      	beq.n	800b684 <__gethex+0x338>
 800b654:	2b01      	cmp	r3, #1
 800b656:	d109      	bne.n	800b66c <__gethex+0x320>
 800b658:	f019 0f02 	tst.w	r9, #2
 800b65c:	d006      	beq.n	800b66c <__gethex+0x320>
 800b65e:	f8da 3000 	ldr.w	r3, [sl]
 800b662:	ea49 0903 	orr.w	r9, r9, r3
 800b666:	f019 0f01 	tst.w	r9, #1
 800b66a:	d10e      	bne.n	800b68a <__gethex+0x33e>
 800b66c:	f045 0510 	orr.w	r5, r5, #16
 800b670:	e032      	b.n	800b6d8 <__gethex+0x38c>
 800b672:	f04f 0901 	mov.w	r9, #1
 800b676:	e7d1      	b.n	800b61c <__gethex+0x2d0>
 800b678:	2501      	movs	r5, #1
 800b67a:	e7e2      	b.n	800b642 <__gethex+0x2f6>
 800b67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b67e:	f1c3 0301 	rsb	r3, r3, #1
 800b682:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0f0      	beq.n	800b66c <__gethex+0x320>
 800b68a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b68e:	f104 0314 	add.w	r3, r4, #20
 800b692:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b696:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b69a:	f04f 0c00 	mov.w	ip, #0
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b6a8:	d01b      	beq.n	800b6e2 <__gethex+0x396>
 800b6aa:	3201      	adds	r2, #1
 800b6ac:	6002      	str	r2, [r0, #0]
 800b6ae:	2d02      	cmp	r5, #2
 800b6b0:	f104 0314 	add.w	r3, r4, #20
 800b6b4:	d13c      	bne.n	800b730 <__gethex+0x3e4>
 800b6b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b6ba:	3a01      	subs	r2, #1
 800b6bc:	42b2      	cmp	r2, r6
 800b6be:	d109      	bne.n	800b6d4 <__gethex+0x388>
 800b6c0:	1171      	asrs	r1, r6, #5
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6c8:	f006 061f 	and.w	r6, r6, #31
 800b6cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b6d0:	421e      	tst	r6, r3
 800b6d2:	d13a      	bne.n	800b74a <__gethex+0x3fe>
 800b6d4:	f045 0520 	orr.w	r5, r5, #32
 800b6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6da:	601c      	str	r4, [r3, #0]
 800b6dc:	9b02      	ldr	r3, [sp, #8]
 800b6de:	601f      	str	r7, [r3, #0]
 800b6e0:	e6b0      	b.n	800b444 <__gethex+0xf8>
 800b6e2:	4299      	cmp	r1, r3
 800b6e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6e8:	d8d9      	bhi.n	800b69e <__gethex+0x352>
 800b6ea:	68a3      	ldr	r3, [r4, #8]
 800b6ec:	459b      	cmp	fp, r3
 800b6ee:	db17      	blt.n	800b720 <__gethex+0x3d4>
 800b6f0:	6861      	ldr	r1, [r4, #4]
 800b6f2:	9801      	ldr	r0, [sp, #4]
 800b6f4:	3101      	adds	r1, #1
 800b6f6:	f7fe f855 	bl	80097a4 <_Balloc>
 800b6fa:	4681      	mov	r9, r0
 800b6fc:	b918      	cbnz	r0, 800b706 <__gethex+0x3ba>
 800b6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b768 <__gethex+0x41c>)
 800b700:	4602      	mov	r2, r0
 800b702:	2184      	movs	r1, #132	@ 0x84
 800b704:	e6c5      	b.n	800b492 <__gethex+0x146>
 800b706:	6922      	ldr	r2, [r4, #16]
 800b708:	3202      	adds	r2, #2
 800b70a:	f104 010c 	add.w	r1, r4, #12
 800b70e:	0092      	lsls	r2, r2, #2
 800b710:	300c      	adds	r0, #12
 800b712:	f7ff fd69 	bl	800b1e8 <memcpy>
 800b716:	4621      	mov	r1, r4
 800b718:	9801      	ldr	r0, [sp, #4]
 800b71a:	f7fe f883 	bl	8009824 <_Bfree>
 800b71e:	464c      	mov	r4, r9
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b728:	6122      	str	r2, [r4, #16]
 800b72a:	2201      	movs	r2, #1
 800b72c:	615a      	str	r2, [r3, #20]
 800b72e:	e7be      	b.n	800b6ae <__gethex+0x362>
 800b730:	6922      	ldr	r2, [r4, #16]
 800b732:	455a      	cmp	r2, fp
 800b734:	dd0b      	ble.n	800b74e <__gethex+0x402>
 800b736:	2101      	movs	r1, #1
 800b738:	4620      	mov	r0, r4
 800b73a:	f7ff fd9f 	bl	800b27c <rshift>
 800b73e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b742:	3701      	adds	r7, #1
 800b744:	42bb      	cmp	r3, r7
 800b746:	f6ff aee0 	blt.w	800b50a <__gethex+0x1be>
 800b74a:	2501      	movs	r5, #1
 800b74c:	e7c2      	b.n	800b6d4 <__gethex+0x388>
 800b74e:	f016 061f 	ands.w	r6, r6, #31
 800b752:	d0fa      	beq.n	800b74a <__gethex+0x3fe>
 800b754:	4453      	add	r3, sl
 800b756:	f1c6 0620 	rsb	r6, r6, #32
 800b75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b75e:	f7fe f913 	bl	8009988 <__hi0bits>
 800b762:	42b0      	cmp	r0, r6
 800b764:	dbe7      	blt.n	800b736 <__gethex+0x3ea>
 800b766:	e7f0      	b.n	800b74a <__gethex+0x3fe>
 800b768:	0800c269 	.word	0x0800c269

0800b76c <L_shift>:
 800b76c:	f1c2 0208 	rsb	r2, r2, #8
 800b770:	0092      	lsls	r2, r2, #2
 800b772:	b570      	push	{r4, r5, r6, lr}
 800b774:	f1c2 0620 	rsb	r6, r2, #32
 800b778:	6843      	ldr	r3, [r0, #4]
 800b77a:	6804      	ldr	r4, [r0, #0]
 800b77c:	fa03 f506 	lsl.w	r5, r3, r6
 800b780:	432c      	orrs	r4, r5
 800b782:	40d3      	lsrs	r3, r2
 800b784:	6004      	str	r4, [r0, #0]
 800b786:	f840 3f04 	str.w	r3, [r0, #4]!
 800b78a:	4288      	cmp	r0, r1
 800b78c:	d3f4      	bcc.n	800b778 <L_shift+0xc>
 800b78e:	bd70      	pop	{r4, r5, r6, pc}

0800b790 <__match>:
 800b790:	b530      	push	{r4, r5, lr}
 800b792:	6803      	ldr	r3, [r0, #0]
 800b794:	3301      	adds	r3, #1
 800b796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b79a:	b914      	cbnz	r4, 800b7a2 <__match+0x12>
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	2001      	movs	r0, #1
 800b7a0:	bd30      	pop	{r4, r5, pc}
 800b7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b7aa:	2d19      	cmp	r5, #25
 800b7ac:	bf98      	it	ls
 800b7ae:	3220      	addls	r2, #32
 800b7b0:	42a2      	cmp	r2, r4
 800b7b2:	d0f0      	beq.n	800b796 <__match+0x6>
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	e7f3      	b.n	800b7a0 <__match+0x10>

0800b7b8 <__hexnan>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	680b      	ldr	r3, [r1, #0]
 800b7be:	6801      	ldr	r1, [r0, #0]
 800b7c0:	115e      	asrs	r6, r3, #5
 800b7c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7c6:	f013 031f 	ands.w	r3, r3, #31
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	bf18      	it	ne
 800b7ce:	3604      	addne	r6, #4
 800b7d0:	2500      	movs	r5, #0
 800b7d2:	1f37      	subs	r7, r6, #4
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	4690      	mov	r8, r2
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7de:	46b9      	mov	r9, r7
 800b7e0:	463c      	mov	r4, r7
 800b7e2:	9502      	str	r5, [sp, #8]
 800b7e4:	46ab      	mov	fp, r5
 800b7e6:	784a      	ldrb	r2, [r1, #1]
 800b7e8:	1c4b      	adds	r3, r1, #1
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	b342      	cbz	r2, 800b840 <__hexnan+0x88>
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	9105      	str	r1, [sp, #20]
 800b7f2:	9204      	str	r2, [sp, #16]
 800b7f4:	f7ff fd94 	bl	800b320 <__hexdig_fun>
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d151      	bne.n	800b8a0 <__hexnan+0xe8>
 800b7fc:	9a04      	ldr	r2, [sp, #16]
 800b7fe:	9905      	ldr	r1, [sp, #20]
 800b800:	2a20      	cmp	r2, #32
 800b802:	d818      	bhi.n	800b836 <__hexnan+0x7e>
 800b804:	9b02      	ldr	r3, [sp, #8]
 800b806:	459b      	cmp	fp, r3
 800b808:	dd13      	ble.n	800b832 <__hexnan+0x7a>
 800b80a:	454c      	cmp	r4, r9
 800b80c:	d206      	bcs.n	800b81c <__hexnan+0x64>
 800b80e:	2d07      	cmp	r5, #7
 800b810:	dc04      	bgt.n	800b81c <__hexnan+0x64>
 800b812:	462a      	mov	r2, r5
 800b814:	4649      	mov	r1, r9
 800b816:	4620      	mov	r0, r4
 800b818:	f7ff ffa8 	bl	800b76c <L_shift>
 800b81c:	4544      	cmp	r4, r8
 800b81e:	d952      	bls.n	800b8c6 <__hexnan+0x10e>
 800b820:	2300      	movs	r3, #0
 800b822:	f1a4 0904 	sub.w	r9, r4, #4
 800b826:	f844 3c04 	str.w	r3, [r4, #-4]
 800b82a:	f8cd b008 	str.w	fp, [sp, #8]
 800b82e:	464c      	mov	r4, r9
 800b830:	461d      	mov	r5, r3
 800b832:	9903      	ldr	r1, [sp, #12]
 800b834:	e7d7      	b.n	800b7e6 <__hexnan+0x2e>
 800b836:	2a29      	cmp	r2, #41	@ 0x29
 800b838:	d157      	bne.n	800b8ea <__hexnan+0x132>
 800b83a:	3102      	adds	r1, #2
 800b83c:	f8ca 1000 	str.w	r1, [sl]
 800b840:	f1bb 0f00 	cmp.w	fp, #0
 800b844:	d051      	beq.n	800b8ea <__hexnan+0x132>
 800b846:	454c      	cmp	r4, r9
 800b848:	d206      	bcs.n	800b858 <__hexnan+0xa0>
 800b84a:	2d07      	cmp	r5, #7
 800b84c:	dc04      	bgt.n	800b858 <__hexnan+0xa0>
 800b84e:	462a      	mov	r2, r5
 800b850:	4649      	mov	r1, r9
 800b852:	4620      	mov	r0, r4
 800b854:	f7ff ff8a 	bl	800b76c <L_shift>
 800b858:	4544      	cmp	r4, r8
 800b85a:	d936      	bls.n	800b8ca <__hexnan+0x112>
 800b85c:	f1a8 0204 	sub.w	r2, r8, #4
 800b860:	4623      	mov	r3, r4
 800b862:	f853 1b04 	ldr.w	r1, [r3], #4
 800b866:	f842 1f04 	str.w	r1, [r2, #4]!
 800b86a:	429f      	cmp	r7, r3
 800b86c:	d2f9      	bcs.n	800b862 <__hexnan+0xaa>
 800b86e:	1b3b      	subs	r3, r7, r4
 800b870:	f023 0303 	bic.w	r3, r3, #3
 800b874:	3304      	adds	r3, #4
 800b876:	3401      	adds	r4, #1
 800b878:	3e03      	subs	r6, #3
 800b87a:	42b4      	cmp	r4, r6
 800b87c:	bf88      	it	hi
 800b87e:	2304      	movhi	r3, #4
 800b880:	4443      	add	r3, r8
 800b882:	2200      	movs	r2, #0
 800b884:	f843 2b04 	str.w	r2, [r3], #4
 800b888:	429f      	cmp	r7, r3
 800b88a:	d2fb      	bcs.n	800b884 <__hexnan+0xcc>
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	b91b      	cbnz	r3, 800b898 <__hexnan+0xe0>
 800b890:	4547      	cmp	r7, r8
 800b892:	d128      	bne.n	800b8e6 <__hexnan+0x12e>
 800b894:	2301      	movs	r3, #1
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	2005      	movs	r0, #5
 800b89a:	b007      	add	sp, #28
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	2d08      	cmp	r5, #8
 800b8a4:	f10b 0b01 	add.w	fp, fp, #1
 800b8a8:	dd06      	ble.n	800b8b8 <__hexnan+0x100>
 800b8aa:	4544      	cmp	r4, r8
 800b8ac:	d9c1      	bls.n	800b832 <__hexnan+0x7a>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8b4:	2501      	movs	r5, #1
 800b8b6:	3c04      	subs	r4, #4
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	f000 000f 	and.w	r0, r0, #15
 800b8be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8c2:	6020      	str	r0, [r4, #0]
 800b8c4:	e7b5      	b.n	800b832 <__hexnan+0x7a>
 800b8c6:	2508      	movs	r5, #8
 800b8c8:	e7b3      	b.n	800b832 <__hexnan+0x7a>
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d0dd      	beq.n	800b88c <__hexnan+0xd4>
 800b8d0:	f1c3 0320 	rsb	r3, r3, #32
 800b8d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d8:	40da      	lsrs	r2, r3
 800b8da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8de:	4013      	ands	r3, r2
 800b8e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8e4:	e7d2      	b.n	800b88c <__hexnan+0xd4>
 800b8e6:	3f04      	subs	r7, #4
 800b8e8:	e7d0      	b.n	800b88c <__hexnan+0xd4>
 800b8ea:	2004      	movs	r0, #4
 800b8ec:	e7d5      	b.n	800b89a <__hexnan+0xe2>

0800b8ee <__ascii_mbtowc>:
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	b901      	cbnz	r1, 800b8f4 <__ascii_mbtowc+0x6>
 800b8f2:	a901      	add	r1, sp, #4
 800b8f4:	b142      	cbz	r2, 800b908 <__ascii_mbtowc+0x1a>
 800b8f6:	b14b      	cbz	r3, 800b90c <__ascii_mbtowc+0x1e>
 800b8f8:	7813      	ldrb	r3, [r2, #0]
 800b8fa:	600b      	str	r3, [r1, #0]
 800b8fc:	7812      	ldrb	r2, [r2, #0]
 800b8fe:	1e10      	subs	r0, r2, #0
 800b900:	bf18      	it	ne
 800b902:	2001      	movne	r0, #1
 800b904:	b002      	add	sp, #8
 800b906:	4770      	bx	lr
 800b908:	4610      	mov	r0, r2
 800b90a:	e7fb      	b.n	800b904 <__ascii_mbtowc+0x16>
 800b90c:	f06f 0001 	mvn.w	r0, #1
 800b910:	e7f8      	b.n	800b904 <__ascii_mbtowc+0x16>

0800b912 <_realloc_r>:
 800b912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b916:	4680      	mov	r8, r0
 800b918:	4615      	mov	r5, r2
 800b91a:	460c      	mov	r4, r1
 800b91c:	b921      	cbnz	r1, 800b928 <_realloc_r+0x16>
 800b91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b922:	4611      	mov	r1, r2
 800b924:	f7fd beb2 	b.w	800968c <_malloc_r>
 800b928:	b92a      	cbnz	r2, 800b936 <_realloc_r+0x24>
 800b92a:	f7fd fe3b 	bl	80095a4 <_free_r>
 800b92e:	2400      	movs	r4, #0
 800b930:	4620      	mov	r0, r4
 800b932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b936:	f000 f840 	bl	800b9ba <_malloc_usable_size_r>
 800b93a:	4285      	cmp	r5, r0
 800b93c:	4606      	mov	r6, r0
 800b93e:	d802      	bhi.n	800b946 <_realloc_r+0x34>
 800b940:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b944:	d8f4      	bhi.n	800b930 <_realloc_r+0x1e>
 800b946:	4629      	mov	r1, r5
 800b948:	4640      	mov	r0, r8
 800b94a:	f7fd fe9f 	bl	800968c <_malloc_r>
 800b94e:	4607      	mov	r7, r0
 800b950:	2800      	cmp	r0, #0
 800b952:	d0ec      	beq.n	800b92e <_realloc_r+0x1c>
 800b954:	42b5      	cmp	r5, r6
 800b956:	462a      	mov	r2, r5
 800b958:	4621      	mov	r1, r4
 800b95a:	bf28      	it	cs
 800b95c:	4632      	movcs	r2, r6
 800b95e:	f7ff fc43 	bl	800b1e8 <memcpy>
 800b962:	4621      	mov	r1, r4
 800b964:	4640      	mov	r0, r8
 800b966:	f7fd fe1d 	bl	80095a4 <_free_r>
 800b96a:	463c      	mov	r4, r7
 800b96c:	e7e0      	b.n	800b930 <_realloc_r+0x1e>

0800b96e <__ascii_wctomb>:
 800b96e:	4603      	mov	r3, r0
 800b970:	4608      	mov	r0, r1
 800b972:	b141      	cbz	r1, 800b986 <__ascii_wctomb+0x18>
 800b974:	2aff      	cmp	r2, #255	@ 0xff
 800b976:	d904      	bls.n	800b982 <__ascii_wctomb+0x14>
 800b978:	228a      	movs	r2, #138	@ 0x8a
 800b97a:	601a      	str	r2, [r3, #0]
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	4770      	bx	lr
 800b982:	700a      	strb	r2, [r1, #0]
 800b984:	2001      	movs	r0, #1
 800b986:	4770      	bx	lr

0800b988 <fiprintf>:
 800b988:	b40e      	push	{r1, r2, r3}
 800b98a:	b503      	push	{r0, r1, lr}
 800b98c:	4601      	mov	r1, r0
 800b98e:	ab03      	add	r3, sp, #12
 800b990:	4805      	ldr	r0, [pc, #20]	@ (800b9a8 <fiprintf+0x20>)
 800b992:	f853 2b04 	ldr.w	r2, [r3], #4
 800b996:	6800      	ldr	r0, [r0, #0]
 800b998:	9301      	str	r3, [sp, #4]
 800b99a:	f000 f83f 	bl	800ba1c <_vfiprintf_r>
 800b99e:	b002      	add	sp, #8
 800b9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9a4:	b003      	add	sp, #12
 800b9a6:	4770      	bx	lr
 800b9a8:	240000bc 	.word	0x240000bc

0800b9ac <abort>:
 800b9ac:	b508      	push	{r3, lr}
 800b9ae:	2006      	movs	r0, #6
 800b9b0:	f000 fa08 	bl	800bdc4 <raise>
 800b9b4:	2001      	movs	r0, #1
 800b9b6:	f7f5 ff91 	bl	80018dc <_exit>

0800b9ba <_malloc_usable_size_r>:
 800b9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9be:	1f18      	subs	r0, r3, #4
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	bfbc      	itt	lt
 800b9c4:	580b      	ldrlt	r3, [r1, r0]
 800b9c6:	18c0      	addlt	r0, r0, r3
 800b9c8:	4770      	bx	lr

0800b9ca <__sfputc_r>:
 800b9ca:	6893      	ldr	r3, [r2, #8]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	b410      	push	{r4}
 800b9d2:	6093      	str	r3, [r2, #8]
 800b9d4:	da08      	bge.n	800b9e8 <__sfputc_r+0x1e>
 800b9d6:	6994      	ldr	r4, [r2, #24]
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	db01      	blt.n	800b9e0 <__sfputc_r+0x16>
 800b9dc:	290a      	cmp	r1, #10
 800b9de:	d103      	bne.n	800b9e8 <__sfputc_r+0x1e>
 800b9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e4:	f000 b932 	b.w	800bc4c <__swbuf_r>
 800b9e8:	6813      	ldr	r3, [r2, #0]
 800b9ea:	1c58      	adds	r0, r3, #1
 800b9ec:	6010      	str	r0, [r2, #0]
 800b9ee:	7019      	strb	r1, [r3, #0]
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <__sfputs_r>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	4614      	mov	r4, r2
 800ba00:	18d5      	adds	r5, r2, r3
 800ba02:	42ac      	cmp	r4, r5
 800ba04:	d101      	bne.n	800ba0a <__sfputs_r+0x12>
 800ba06:	2000      	movs	r0, #0
 800ba08:	e007      	b.n	800ba1a <__sfputs_r+0x22>
 800ba0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0e:	463a      	mov	r2, r7
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff ffda 	bl	800b9ca <__sfputc_r>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d1f3      	bne.n	800ba02 <__sfputs_r+0xa>
 800ba1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba1c <_vfiprintf_r>:
 800ba1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba20:	460d      	mov	r5, r1
 800ba22:	b09d      	sub	sp, #116	@ 0x74
 800ba24:	4614      	mov	r4, r2
 800ba26:	4698      	mov	r8, r3
 800ba28:	4606      	mov	r6, r0
 800ba2a:	b118      	cbz	r0, 800ba34 <_vfiprintf_r+0x18>
 800ba2c:	6a03      	ldr	r3, [r0, #32]
 800ba2e:	b90b      	cbnz	r3, 800ba34 <_vfiprintf_r+0x18>
 800ba30:	f7fc fe86 	bl	8008740 <__sinit>
 800ba34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba36:	07d9      	lsls	r1, r3, #31
 800ba38:	d405      	bmi.n	800ba46 <_vfiprintf_r+0x2a>
 800ba3a:	89ab      	ldrh	r3, [r5, #12]
 800ba3c:	059a      	lsls	r2, r3, #22
 800ba3e:	d402      	bmi.n	800ba46 <_vfiprintf_r+0x2a>
 800ba40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba42:	f7fc ffc8 	bl	80089d6 <__retarget_lock_acquire_recursive>
 800ba46:	89ab      	ldrh	r3, [r5, #12]
 800ba48:	071b      	lsls	r3, r3, #28
 800ba4a:	d501      	bpl.n	800ba50 <_vfiprintf_r+0x34>
 800ba4c:	692b      	ldr	r3, [r5, #16]
 800ba4e:	b99b      	cbnz	r3, 800ba78 <_vfiprintf_r+0x5c>
 800ba50:	4629      	mov	r1, r5
 800ba52:	4630      	mov	r0, r6
 800ba54:	f000 f938 	bl	800bcc8 <__swsetup_r>
 800ba58:	b170      	cbz	r0, 800ba78 <_vfiprintf_r+0x5c>
 800ba5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba5c:	07dc      	lsls	r4, r3, #31
 800ba5e:	d504      	bpl.n	800ba6a <_vfiprintf_r+0x4e>
 800ba60:	f04f 30ff 	mov.w	r0, #4294967295
 800ba64:	b01d      	add	sp, #116	@ 0x74
 800ba66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6a:	89ab      	ldrh	r3, [r5, #12]
 800ba6c:	0598      	lsls	r0, r3, #22
 800ba6e:	d4f7      	bmi.n	800ba60 <_vfiprintf_r+0x44>
 800ba70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba72:	f7fc ffb1 	bl	80089d8 <__retarget_lock_release_recursive>
 800ba76:	e7f3      	b.n	800ba60 <_vfiprintf_r+0x44>
 800ba78:	2300      	movs	r3, #0
 800ba7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba7c:	2320      	movs	r3, #32
 800ba7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba86:	2330      	movs	r3, #48	@ 0x30
 800ba88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc38 <_vfiprintf_r+0x21c>
 800ba8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba90:	f04f 0901 	mov.w	r9, #1
 800ba94:	4623      	mov	r3, r4
 800ba96:	469a      	mov	sl, r3
 800ba98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba9c:	b10a      	cbz	r2, 800baa2 <_vfiprintf_r+0x86>
 800ba9e:	2a25      	cmp	r2, #37	@ 0x25
 800baa0:	d1f9      	bne.n	800ba96 <_vfiprintf_r+0x7a>
 800baa2:	ebba 0b04 	subs.w	fp, sl, r4
 800baa6:	d00b      	beq.n	800bac0 <_vfiprintf_r+0xa4>
 800baa8:	465b      	mov	r3, fp
 800baaa:	4622      	mov	r2, r4
 800baac:	4629      	mov	r1, r5
 800baae:	4630      	mov	r0, r6
 800bab0:	f7ff ffa2 	bl	800b9f8 <__sfputs_r>
 800bab4:	3001      	adds	r0, #1
 800bab6:	f000 80a7 	beq.w	800bc08 <_vfiprintf_r+0x1ec>
 800baba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800babc:	445a      	add	r2, fp
 800babe:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac0:	f89a 3000 	ldrb.w	r3, [sl]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f000 809f 	beq.w	800bc08 <_vfiprintf_r+0x1ec>
 800baca:	2300      	movs	r3, #0
 800bacc:	f04f 32ff 	mov.w	r2, #4294967295
 800bad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad4:	f10a 0a01 	add.w	sl, sl, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	9307      	str	r3, [sp, #28]
 800badc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bae2:	4654      	mov	r4, sl
 800bae4:	2205      	movs	r2, #5
 800bae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baea:	4853      	ldr	r0, [pc, #332]	@ (800bc38 <_vfiprintf_r+0x21c>)
 800baec:	f7f4 fbf8 	bl	80002e0 <memchr>
 800baf0:	9a04      	ldr	r2, [sp, #16]
 800baf2:	b9d8      	cbnz	r0, 800bb2c <_vfiprintf_r+0x110>
 800baf4:	06d1      	lsls	r1, r2, #27
 800baf6:	bf44      	itt	mi
 800baf8:	2320      	movmi	r3, #32
 800bafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bafe:	0713      	lsls	r3, r2, #28
 800bb00:	bf44      	itt	mi
 800bb02:	232b      	movmi	r3, #43	@ 0x2b
 800bb04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb08:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb0e:	d015      	beq.n	800bb3c <_vfiprintf_r+0x120>
 800bb10:	9a07      	ldr	r2, [sp, #28]
 800bb12:	4654      	mov	r4, sl
 800bb14:	2000      	movs	r0, #0
 800bb16:	f04f 0c0a 	mov.w	ip, #10
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb20:	3b30      	subs	r3, #48	@ 0x30
 800bb22:	2b09      	cmp	r3, #9
 800bb24:	d94b      	bls.n	800bbbe <_vfiprintf_r+0x1a2>
 800bb26:	b1b0      	cbz	r0, 800bb56 <_vfiprintf_r+0x13a>
 800bb28:	9207      	str	r2, [sp, #28]
 800bb2a:	e014      	b.n	800bb56 <_vfiprintf_r+0x13a>
 800bb2c:	eba0 0308 	sub.w	r3, r0, r8
 800bb30:	fa09 f303 	lsl.w	r3, r9, r3
 800bb34:	4313      	orrs	r3, r2
 800bb36:	9304      	str	r3, [sp, #16]
 800bb38:	46a2      	mov	sl, r4
 800bb3a:	e7d2      	b.n	800bae2 <_vfiprintf_r+0xc6>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	1d19      	adds	r1, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	9103      	str	r1, [sp, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	bfbb      	ittet	lt
 800bb48:	425b      	neglt	r3, r3
 800bb4a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb4e:	9307      	strge	r3, [sp, #28]
 800bb50:	9307      	strlt	r3, [sp, #28]
 800bb52:	bfb8      	it	lt
 800bb54:	9204      	strlt	r2, [sp, #16]
 800bb56:	7823      	ldrb	r3, [r4, #0]
 800bb58:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb5a:	d10a      	bne.n	800bb72 <_vfiprintf_r+0x156>
 800bb5c:	7863      	ldrb	r3, [r4, #1]
 800bb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb60:	d132      	bne.n	800bbc8 <_vfiprintf_r+0x1ac>
 800bb62:	9b03      	ldr	r3, [sp, #12]
 800bb64:	1d1a      	adds	r2, r3, #4
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	9203      	str	r2, [sp, #12]
 800bb6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb6e:	3402      	adds	r4, #2
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc48 <_vfiprintf_r+0x22c>
 800bb76:	7821      	ldrb	r1, [r4, #0]
 800bb78:	2203      	movs	r2, #3
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	f7f4 fbb0 	bl	80002e0 <memchr>
 800bb80:	b138      	cbz	r0, 800bb92 <_vfiprintf_r+0x176>
 800bb82:	9b04      	ldr	r3, [sp, #16]
 800bb84:	eba0 000a 	sub.w	r0, r0, sl
 800bb88:	2240      	movs	r2, #64	@ 0x40
 800bb8a:	4082      	lsls	r2, r0
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	3401      	adds	r4, #1
 800bb90:	9304      	str	r3, [sp, #16]
 800bb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb96:	4829      	ldr	r0, [pc, #164]	@ (800bc3c <_vfiprintf_r+0x220>)
 800bb98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb9c:	2206      	movs	r2, #6
 800bb9e:	f7f4 fb9f 	bl	80002e0 <memchr>
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d03f      	beq.n	800bc26 <_vfiprintf_r+0x20a>
 800bba6:	4b26      	ldr	r3, [pc, #152]	@ (800bc40 <_vfiprintf_r+0x224>)
 800bba8:	bb1b      	cbnz	r3, 800bbf2 <_vfiprintf_r+0x1d6>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	3307      	adds	r3, #7
 800bbae:	f023 0307 	bic.w	r3, r3, #7
 800bbb2:	3308      	adds	r3, #8
 800bbb4:	9303      	str	r3, [sp, #12]
 800bbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbb8:	443b      	add	r3, r7
 800bbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbbc:	e76a      	b.n	800ba94 <_vfiprintf_r+0x78>
 800bbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc2:	460c      	mov	r4, r1
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	e7a8      	b.n	800bb1a <_vfiprintf_r+0xfe>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	3401      	adds	r4, #1
 800bbcc:	9305      	str	r3, [sp, #20]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	f04f 0c0a 	mov.w	ip, #10
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbda:	3a30      	subs	r2, #48	@ 0x30
 800bbdc:	2a09      	cmp	r2, #9
 800bbde:	d903      	bls.n	800bbe8 <_vfiprintf_r+0x1cc>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0c6      	beq.n	800bb72 <_vfiprintf_r+0x156>
 800bbe4:	9105      	str	r1, [sp, #20]
 800bbe6:	e7c4      	b.n	800bb72 <_vfiprintf_r+0x156>
 800bbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbec:	4604      	mov	r4, r0
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e7f0      	b.n	800bbd4 <_vfiprintf_r+0x1b8>
 800bbf2:	ab03      	add	r3, sp, #12
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	462a      	mov	r2, r5
 800bbf8:	4b12      	ldr	r3, [pc, #72]	@ (800bc44 <_vfiprintf_r+0x228>)
 800bbfa:	a904      	add	r1, sp, #16
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fb ff5f 	bl	8007ac0 <_printf_float>
 800bc02:	4607      	mov	r7, r0
 800bc04:	1c78      	adds	r0, r7, #1
 800bc06:	d1d6      	bne.n	800bbb6 <_vfiprintf_r+0x19a>
 800bc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc0a:	07d9      	lsls	r1, r3, #31
 800bc0c:	d405      	bmi.n	800bc1a <_vfiprintf_r+0x1fe>
 800bc0e:	89ab      	ldrh	r3, [r5, #12]
 800bc10:	059a      	lsls	r2, r3, #22
 800bc12:	d402      	bmi.n	800bc1a <_vfiprintf_r+0x1fe>
 800bc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc16:	f7fc fedf 	bl	80089d8 <__retarget_lock_release_recursive>
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	065b      	lsls	r3, r3, #25
 800bc1e:	f53f af1f 	bmi.w	800ba60 <_vfiprintf_r+0x44>
 800bc22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc24:	e71e      	b.n	800ba64 <_vfiprintf_r+0x48>
 800bc26:	ab03      	add	r3, sp, #12
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	4b05      	ldr	r3, [pc, #20]	@ (800bc44 <_vfiprintf_r+0x228>)
 800bc2e:	a904      	add	r1, sp, #16
 800bc30:	4630      	mov	r0, r6
 800bc32:	f7fc f9cd 	bl	8007fd0 <_printf_i>
 800bc36:	e7e4      	b.n	800bc02 <_vfiprintf_r+0x1e6>
 800bc38:	0800c529 	.word	0x0800c529
 800bc3c:	0800c533 	.word	0x0800c533
 800bc40:	08007ac1 	.word	0x08007ac1
 800bc44:	0800b9f9 	.word	0x0800b9f9
 800bc48:	0800c52f 	.word	0x0800c52f

0800bc4c <__swbuf_r>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	460e      	mov	r6, r1
 800bc50:	4614      	mov	r4, r2
 800bc52:	4605      	mov	r5, r0
 800bc54:	b118      	cbz	r0, 800bc5e <__swbuf_r+0x12>
 800bc56:	6a03      	ldr	r3, [r0, #32]
 800bc58:	b90b      	cbnz	r3, 800bc5e <__swbuf_r+0x12>
 800bc5a:	f7fc fd71 	bl	8008740 <__sinit>
 800bc5e:	69a3      	ldr	r3, [r4, #24]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	d501      	bpl.n	800bc6c <__swbuf_r+0x20>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b943      	cbnz	r3, 800bc7e <__swbuf_r+0x32>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	4628      	mov	r0, r5
 800bc70:	f000 f82a 	bl	800bcc8 <__swsetup_r>
 800bc74:	b118      	cbz	r0, 800bc7e <__swbuf_r+0x32>
 800bc76:	f04f 37ff 	mov.w	r7, #4294967295
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	6922      	ldr	r2, [r4, #16]
 800bc82:	1a98      	subs	r0, r3, r2
 800bc84:	6963      	ldr	r3, [r4, #20]
 800bc86:	b2f6      	uxtb	r6, r6
 800bc88:	4283      	cmp	r3, r0
 800bc8a:	4637      	mov	r7, r6
 800bc8c:	dc05      	bgt.n	800bc9a <__swbuf_r+0x4e>
 800bc8e:	4621      	mov	r1, r4
 800bc90:	4628      	mov	r0, r5
 800bc92:	f7ff fa45 	bl	800b120 <_fflush_r>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d1ed      	bne.n	800bc76 <__swbuf_r+0x2a>
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	3b01      	subs	r3, #1
 800bc9e:	60a3      	str	r3, [r4, #8]
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	1c5a      	adds	r2, r3, #1
 800bca4:	6022      	str	r2, [r4, #0]
 800bca6:	701e      	strb	r6, [r3, #0]
 800bca8:	6962      	ldr	r2, [r4, #20]
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d004      	beq.n	800bcba <__swbuf_r+0x6e>
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	07db      	lsls	r3, r3, #31
 800bcb4:	d5e1      	bpl.n	800bc7a <__swbuf_r+0x2e>
 800bcb6:	2e0a      	cmp	r6, #10
 800bcb8:	d1df      	bne.n	800bc7a <__swbuf_r+0x2e>
 800bcba:	4621      	mov	r1, r4
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	f7ff fa2f 	bl	800b120 <_fflush_r>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d0d9      	beq.n	800bc7a <__swbuf_r+0x2e>
 800bcc6:	e7d6      	b.n	800bc76 <__swbuf_r+0x2a>

0800bcc8 <__swsetup_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4b29      	ldr	r3, [pc, #164]	@ (800bd70 <__swsetup_r+0xa8>)
 800bccc:	4605      	mov	r5, r0
 800bcce:	6818      	ldr	r0, [r3, #0]
 800bcd0:	460c      	mov	r4, r1
 800bcd2:	b118      	cbz	r0, 800bcdc <__swsetup_r+0x14>
 800bcd4:	6a03      	ldr	r3, [r0, #32]
 800bcd6:	b90b      	cbnz	r3, 800bcdc <__swsetup_r+0x14>
 800bcd8:	f7fc fd32 	bl	8008740 <__sinit>
 800bcdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce0:	0719      	lsls	r1, r3, #28
 800bce2:	d422      	bmi.n	800bd2a <__swsetup_r+0x62>
 800bce4:	06da      	lsls	r2, r3, #27
 800bce6:	d407      	bmi.n	800bcf8 <__swsetup_r+0x30>
 800bce8:	2209      	movs	r2, #9
 800bcea:	602a      	str	r2, [r5, #0]
 800bcec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf6:	e033      	b.n	800bd60 <__swsetup_r+0x98>
 800bcf8:	0758      	lsls	r0, r3, #29
 800bcfa:	d512      	bpl.n	800bd22 <__swsetup_r+0x5a>
 800bcfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcfe:	b141      	cbz	r1, 800bd12 <__swsetup_r+0x4a>
 800bd00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d002      	beq.n	800bd0e <__swsetup_r+0x46>
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7fd fc4b 	bl	80095a4 <_free_r>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd12:	89a3      	ldrh	r3, [r4, #12]
 800bd14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd18:	81a3      	strh	r3, [r4, #12]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	6063      	str	r3, [r4, #4]
 800bd1e:	6923      	ldr	r3, [r4, #16]
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	89a3      	ldrh	r3, [r4, #12]
 800bd24:	f043 0308 	orr.w	r3, r3, #8
 800bd28:	81a3      	strh	r3, [r4, #12]
 800bd2a:	6923      	ldr	r3, [r4, #16]
 800bd2c:	b94b      	cbnz	r3, 800bd42 <__swsetup_r+0x7a>
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd38:	d003      	beq.n	800bd42 <__swsetup_r+0x7a>
 800bd3a:	4621      	mov	r1, r4
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	f000 f883 	bl	800be48 <__smakebuf_r>
 800bd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd46:	f013 0201 	ands.w	r2, r3, #1
 800bd4a:	d00a      	beq.n	800bd62 <__swsetup_r+0x9a>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	60a2      	str	r2, [r4, #8]
 800bd50:	6962      	ldr	r2, [r4, #20]
 800bd52:	4252      	negs	r2, r2
 800bd54:	61a2      	str	r2, [r4, #24]
 800bd56:	6922      	ldr	r2, [r4, #16]
 800bd58:	b942      	cbnz	r2, 800bd6c <__swsetup_r+0xa4>
 800bd5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd5e:	d1c5      	bne.n	800bcec <__swsetup_r+0x24>
 800bd60:	bd38      	pop	{r3, r4, r5, pc}
 800bd62:	0799      	lsls	r1, r3, #30
 800bd64:	bf58      	it	pl
 800bd66:	6962      	ldrpl	r2, [r4, #20]
 800bd68:	60a2      	str	r2, [r4, #8]
 800bd6a:	e7f4      	b.n	800bd56 <__swsetup_r+0x8e>
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	e7f7      	b.n	800bd60 <__swsetup_r+0x98>
 800bd70:	240000bc 	.word	0x240000bc

0800bd74 <_raise_r>:
 800bd74:	291f      	cmp	r1, #31
 800bd76:	b538      	push	{r3, r4, r5, lr}
 800bd78:	4605      	mov	r5, r0
 800bd7a:	460c      	mov	r4, r1
 800bd7c:	d904      	bls.n	800bd88 <_raise_r+0x14>
 800bd7e:	2316      	movs	r3, #22
 800bd80:	6003      	str	r3, [r0, #0]
 800bd82:	f04f 30ff 	mov.w	r0, #4294967295
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd8a:	b112      	cbz	r2, 800bd92 <_raise_r+0x1e>
 800bd8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd90:	b94b      	cbnz	r3, 800bda6 <_raise_r+0x32>
 800bd92:	4628      	mov	r0, r5
 800bd94:	f000 f830 	bl	800bdf8 <_getpid_r>
 800bd98:	4622      	mov	r2, r4
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bda2:	f000 b817 	b.w	800bdd4 <_kill_r>
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d00a      	beq.n	800bdc0 <_raise_r+0x4c>
 800bdaa:	1c59      	adds	r1, r3, #1
 800bdac:	d103      	bne.n	800bdb6 <_raise_r+0x42>
 800bdae:	2316      	movs	r3, #22
 800bdb0:	6003      	str	r3, [r0, #0]
 800bdb2:	2001      	movs	r0, #1
 800bdb4:	e7e7      	b.n	800bd86 <_raise_r+0x12>
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4798      	blx	r3
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	e7e0      	b.n	800bd86 <_raise_r+0x12>

0800bdc4 <raise>:
 800bdc4:	4b02      	ldr	r3, [pc, #8]	@ (800bdd0 <raise+0xc>)
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	f7ff bfd3 	b.w	800bd74 <_raise_r>
 800bdce:	bf00      	nop
 800bdd0:	240000bc 	.word	0x240000bc

0800bdd4 <_kill_r>:
 800bdd4:	b538      	push	{r3, r4, r5, lr}
 800bdd6:	4d07      	ldr	r5, [pc, #28]	@ (800bdf4 <_kill_r+0x20>)
 800bdd8:	2300      	movs	r3, #0
 800bdda:	4604      	mov	r4, r0
 800bddc:	4608      	mov	r0, r1
 800bdde:	4611      	mov	r1, r2
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	f7f5 fd6b 	bl	80018bc <_kill>
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	d102      	bne.n	800bdf0 <_kill_r+0x1c>
 800bdea:	682b      	ldr	r3, [r5, #0]
 800bdec:	b103      	cbz	r3, 800bdf0 <_kill_r+0x1c>
 800bdee:	6023      	str	r3, [r4, #0]
 800bdf0:	bd38      	pop	{r3, r4, r5, pc}
 800bdf2:	bf00      	nop
 800bdf4:	2400057c 	.word	0x2400057c

0800bdf8 <_getpid_r>:
 800bdf8:	f7f5 bd58 	b.w	80018ac <_getpid>

0800bdfc <__swhatbuf_r>:
 800bdfc:	b570      	push	{r4, r5, r6, lr}
 800bdfe:	460c      	mov	r4, r1
 800be00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be04:	2900      	cmp	r1, #0
 800be06:	b096      	sub	sp, #88	@ 0x58
 800be08:	4615      	mov	r5, r2
 800be0a:	461e      	mov	r6, r3
 800be0c:	da0d      	bge.n	800be2a <__swhatbuf_r+0x2e>
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be14:	f04f 0100 	mov.w	r1, #0
 800be18:	bf14      	ite	ne
 800be1a:	2340      	movne	r3, #64	@ 0x40
 800be1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be20:	2000      	movs	r0, #0
 800be22:	6031      	str	r1, [r6, #0]
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	b016      	add	sp, #88	@ 0x58
 800be28:	bd70      	pop	{r4, r5, r6, pc}
 800be2a:	466a      	mov	r2, sp
 800be2c:	f000 f848 	bl	800bec0 <_fstat_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	dbec      	blt.n	800be0e <__swhatbuf_r+0x12>
 800be34:	9901      	ldr	r1, [sp, #4]
 800be36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be3e:	4259      	negs	r1, r3
 800be40:	4159      	adcs	r1, r3
 800be42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be46:	e7eb      	b.n	800be20 <__swhatbuf_r+0x24>

0800be48 <__smakebuf_r>:
 800be48:	898b      	ldrh	r3, [r1, #12]
 800be4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be4c:	079d      	lsls	r5, r3, #30
 800be4e:	4606      	mov	r6, r0
 800be50:	460c      	mov	r4, r1
 800be52:	d507      	bpl.n	800be64 <__smakebuf_r+0x1c>
 800be54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	6123      	str	r3, [r4, #16]
 800be5c:	2301      	movs	r3, #1
 800be5e:	6163      	str	r3, [r4, #20]
 800be60:	b003      	add	sp, #12
 800be62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be64:	ab01      	add	r3, sp, #4
 800be66:	466a      	mov	r2, sp
 800be68:	f7ff ffc8 	bl	800bdfc <__swhatbuf_r>
 800be6c:	9f00      	ldr	r7, [sp, #0]
 800be6e:	4605      	mov	r5, r0
 800be70:	4639      	mov	r1, r7
 800be72:	4630      	mov	r0, r6
 800be74:	f7fd fc0a 	bl	800968c <_malloc_r>
 800be78:	b948      	cbnz	r0, 800be8e <__smakebuf_r+0x46>
 800be7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be7e:	059a      	lsls	r2, r3, #22
 800be80:	d4ee      	bmi.n	800be60 <__smakebuf_r+0x18>
 800be82:	f023 0303 	bic.w	r3, r3, #3
 800be86:	f043 0302 	orr.w	r3, r3, #2
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	e7e2      	b.n	800be54 <__smakebuf_r+0xc>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	6020      	str	r0, [r4, #0]
 800be92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be9e:	b15b      	cbz	r3, 800beb8 <__smakebuf_r+0x70>
 800bea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea4:	4630      	mov	r0, r6
 800bea6:	f000 f81d 	bl	800bee4 <_isatty_r>
 800beaa:	b128      	cbz	r0, 800beb8 <__smakebuf_r+0x70>
 800beac:	89a3      	ldrh	r3, [r4, #12]
 800beae:	f023 0303 	bic.w	r3, r3, #3
 800beb2:	f043 0301 	orr.w	r3, r3, #1
 800beb6:	81a3      	strh	r3, [r4, #12]
 800beb8:	89a3      	ldrh	r3, [r4, #12]
 800beba:	431d      	orrs	r5, r3
 800bebc:	81a5      	strh	r5, [r4, #12]
 800bebe:	e7cf      	b.n	800be60 <__smakebuf_r+0x18>

0800bec0 <_fstat_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d07      	ldr	r5, [pc, #28]	@ (800bee0 <_fstat_r+0x20>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	4611      	mov	r1, r2
 800becc:	602b      	str	r3, [r5, #0]
 800bece:	f7f5 fd39 	bl	8001944 <_fstat>
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	d102      	bne.n	800bedc <_fstat_r+0x1c>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	b103      	cbz	r3, 800bedc <_fstat_r+0x1c>
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	bd38      	pop	{r3, r4, r5, pc}
 800bede:	bf00      	nop
 800bee0:	2400057c 	.word	0x2400057c

0800bee4 <_isatty_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	4d06      	ldr	r5, [pc, #24]	@ (800bf00 <_isatty_r+0x1c>)
 800bee8:	2300      	movs	r3, #0
 800beea:	4604      	mov	r4, r0
 800beec:	4608      	mov	r0, r1
 800beee:	602b      	str	r3, [r5, #0]
 800bef0:	f7f5 fd38 	bl	8001964 <_isatty>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_isatty_r+0x1a>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_isatty_r+0x1a>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	2400057c 	.word	0x2400057c
 800bf04:	00000000 	.word	0x00000000

0800bf08 <sqrt>:
 800bf08:	b508      	push	{r3, lr}
 800bf0a:	ed2d 8b04 	vpush	{d8-d9}
 800bf0e:	eeb0 8b40 	vmov.f64	d8, d0
 800bf12:	f000 f91b 	bl	800c14c <__ieee754_sqrt>
 800bf16:	eeb4 8b48 	vcmp.f64	d8, d8
 800bf1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1e:	d60c      	bvs.n	800bf3a <sqrt+0x32>
 800bf20:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800bf40 <sqrt+0x38>
 800bf24:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bf28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2c:	d505      	bpl.n	800bf3a <sqrt+0x32>
 800bf2e:	f7fc fd27 	bl	8008980 <__errno>
 800bf32:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800bf36:	2321      	movs	r3, #33	@ 0x21
 800bf38:	6003      	str	r3, [r0, #0]
 800bf3a:	ecbd 8b04 	vpop	{d8-d9}
 800bf3e:	bd08      	pop	{r3, pc}
	...

0800bf48 <atan>:
 800bf48:	b538      	push	{r3, r4, r5, lr}
 800bf4a:	eeb0 7b40 	vmov.f64	d7, d0
 800bf4e:	ee17 5a90 	vmov	r5, s15
 800bf52:	4b73      	ldr	r3, [pc, #460]	@ (800c120 <atan+0x1d8>)
 800bf54:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	d913      	bls.n	800bf84 <atan+0x3c>
 800bf5c:	4b71      	ldr	r3, [pc, #452]	@ (800c124 <atan+0x1dc>)
 800bf5e:	429c      	cmp	r4, r3
 800bf60:	d803      	bhi.n	800bf6a <atan+0x22>
 800bf62:	d107      	bne.n	800bf74 <atan+0x2c>
 800bf64:	ee10 3a10 	vmov	r3, s0
 800bf68:	b123      	cbz	r3, 800bf74 <atan+0x2c>
 800bf6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf6e:	eeb0 0b47 	vmov.f64	d0, d7
 800bf72:	bd38      	pop	{r3, r4, r5, pc}
 800bf74:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800c0b0 <atan+0x168>
 800bf78:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800c0b8 <atan+0x170>
 800bf7c:	2d00      	cmp	r5, #0
 800bf7e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800bf82:	e7f4      	b.n	800bf6e <atan+0x26>
 800bf84:	4b68      	ldr	r3, [pc, #416]	@ (800c128 <atan+0x1e0>)
 800bf86:	429c      	cmp	r4, r3
 800bf88:	d811      	bhi.n	800bfae <atan+0x66>
 800bf8a:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bf8e:	429c      	cmp	r4, r3
 800bf90:	d80a      	bhi.n	800bfa8 <atan+0x60>
 800bf92:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800bf96:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800c0c0 <atan+0x178>
 800bf9a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bf9e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa6:	dce2      	bgt.n	800bf6e <atan+0x26>
 800bfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfac:	e013      	b.n	800bfd6 <atan+0x8e>
 800bfae:	f000 f8c5 	bl	800c13c <fabs>
 800bfb2:	4b5e      	ldr	r3, [pc, #376]	@ (800c12c <atan+0x1e4>)
 800bfb4:	429c      	cmp	r4, r3
 800bfb6:	d84f      	bhi.n	800c058 <atan+0x110>
 800bfb8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bfbc:	429c      	cmp	r4, r3
 800bfbe:	d841      	bhi.n	800c044 <atan+0xfc>
 800bfc0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bfc4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800bfc8:	2300      	movs	r3, #0
 800bfca:	eea0 5b07 	vfma.f64	d5, d0, d7
 800bfce:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bfd2:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800bfd6:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c0c8 <atan+0x180>
 800bfda:	ee27 4b07 	vmul.f64	d4, d7, d7
 800bfde:	ee24 5b04 	vmul.f64	d5, d4, d4
 800bfe2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c0d0 <atan+0x188>
 800bfe6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800bfea:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c0d8 <atan+0x190>
 800bfee:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bff2:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c0e0 <atan+0x198>
 800bff6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bffa:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c0e8 <atan+0x1a0>
 800bffe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c002:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c0f0 <atan+0x1a8>
 800c006:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c0f8 <atan+0x1b0>
 800c00a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c00e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c100 <atan+0x1b8>
 800c012:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c016:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c108 <atan+0x1c0>
 800c01a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c01e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c110 <atan+0x1c8>
 800c022:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c026:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c118 <atan+0x1d0>
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c030:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c034:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c038:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c03c:	d121      	bne.n	800c082 <atan+0x13a>
 800c03e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c042:	e794      	b.n	800bf6e <atan+0x26>
 800c044:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800c048:	2301      	movs	r3, #1
 800c04a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c04e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c052:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c056:	e7be      	b.n	800bfd6 <atan+0x8e>
 800c058:	4b35      	ldr	r3, [pc, #212]	@ (800c130 <atan+0x1e8>)
 800c05a:	429c      	cmp	r4, r3
 800c05c:	d20b      	bcs.n	800c076 <atan+0x12e>
 800c05e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800c062:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c066:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c06a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c06e:	2302      	movs	r3, #2
 800c070:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c074:	e7af      	b.n	800bfd6 <atan+0x8e>
 800c076:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800c07a:	2303      	movs	r3, #3
 800c07c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c080:	e7a9      	b.n	800bfd6 <atan+0x8e>
 800c082:	4a2c      	ldr	r2, [pc, #176]	@ (800c134 <atan+0x1ec>)
 800c084:	492c      	ldr	r1, [pc, #176]	@ (800c138 <atan+0x1f0>)
 800c086:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c08a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c08e:	ed93 5b00 	vldr	d5, [r3]
 800c092:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c096:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c09a:	ed92 7b00 	vldr	d7, [r2]
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0a4:	bfb8      	it	lt
 800c0a6:	eeb1 7b47 	vneglt.f64	d7, d7
 800c0aa:	e760      	b.n	800bf6e <atan+0x26>
 800c0ac:	f3af 8000 	nop.w
 800c0b0:	54442d18 	.word	0x54442d18
 800c0b4:	bff921fb 	.word	0xbff921fb
 800c0b8:	54442d18 	.word	0x54442d18
 800c0bc:	3ff921fb 	.word	0x3ff921fb
 800c0c0:	8800759c 	.word	0x8800759c
 800c0c4:	7e37e43c 	.word	0x7e37e43c
 800c0c8:	e322da11 	.word	0xe322da11
 800c0cc:	3f90ad3a 	.word	0x3f90ad3a
 800c0d0:	24760deb 	.word	0x24760deb
 800c0d4:	3fa97b4b 	.word	0x3fa97b4b
 800c0d8:	a0d03d51 	.word	0xa0d03d51
 800c0dc:	3fb10d66 	.word	0x3fb10d66
 800c0e0:	c54c206e 	.word	0xc54c206e
 800c0e4:	3fb745cd 	.word	0x3fb745cd
 800c0e8:	920083ff 	.word	0x920083ff
 800c0ec:	3fc24924 	.word	0x3fc24924
 800c0f0:	5555550d 	.word	0x5555550d
 800c0f4:	3fd55555 	.word	0x3fd55555
 800c0f8:	52defd9a 	.word	0x52defd9a
 800c0fc:	bfadde2d 	.word	0xbfadde2d
 800c100:	2c6a6c2f 	.word	0x2c6a6c2f
 800c104:	bfa2b444 	.word	0xbfa2b444
 800c108:	af749a6d 	.word	0xaf749a6d
 800c10c:	bfb3b0f2 	.word	0xbfb3b0f2
 800c110:	fe231671 	.word	0xfe231671
 800c114:	bfbc71c6 	.word	0xbfbc71c6
 800c118:	9998ebc4 	.word	0x9998ebc4
 800c11c:	bfc99999 	.word	0xbfc99999
 800c120:	440fffff 	.word	0x440fffff
 800c124:	7ff00000 	.word	0x7ff00000
 800c128:	3fdbffff 	.word	0x3fdbffff
 800c12c:	3ff2ffff 	.word	0x3ff2ffff
 800c130:	40038000 	.word	0x40038000
 800c134:	0800c600 	.word	0x0800c600
 800c138:	0800c5e0 	.word	0x0800c5e0

0800c13c <fabs>:
 800c13c:	ec51 0b10 	vmov	r0, r1, d0
 800c140:	4602      	mov	r2, r0
 800c142:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c146:	ec43 2b10 	vmov	d0, r2, r3
 800c14a:	4770      	bx	lr

0800c14c <__ieee754_sqrt>:
 800c14c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c150:	4770      	bx	lr
	...

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
