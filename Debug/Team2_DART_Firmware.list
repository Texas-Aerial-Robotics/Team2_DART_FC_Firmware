
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800c978  0800c978  0000d978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ce38  0800ce38  0000de38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ce40  0800ce40  0000de40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ce44  0800ce44  0000de44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000278  24000000  0800ce48  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003fc  24000278  0800d0c0  0000e278  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000674  0800d0c0  0000e674  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e278  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018c85  00000000  00000000  0000e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002dd1  00000000  00000000  00026f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012e0  00000000  00000000  00029d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eb5  00000000  00000000  0002afe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038daa  00000000  00000000  0002be95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019187  00000000  00000000  00064c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00169513  00000000  00000000  0007ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e72d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064cc  00000000  00000000  001e731c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001ed7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000278 	.word	0x24000278
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c95c 	.word	0x0800c95c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400027c 	.word	0x2400027c
 80002dc:	0800c95c 	.word	0x0800c95c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <bmp388_quantize_calibration>:
BMP388_ProcessedData_t bmp388_processedData;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (float)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000a6c:	4b66      	ldr	r3, [pc, #408]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	ee07 3a90 	vmov	s15, r3
 8000a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a78:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8000c0c <bmp388_quantize_calibration+0x1a4>
 8000a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a80:	4b63      	ldr	r3, [pc, #396]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000a82:	edc3 7a00 	vstr	s15, [r3]
  quantized_bmp388_calib.par_t2 = (float)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000a86:	4b60      	ldr	r3, [pc, #384]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000a88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a8c:	ee07 3a90 	vmov	s15, r3
 8000a90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a94:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8000c14 <bmp388_quantize_calibration+0x1ac>
 8000a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a9c:	4b5c      	ldr	r3, [pc, #368]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000a9e:	edc3 7a01 	vstr	s15, [r3, #4]
  quantized_bmp388_calib.par_t3 = (float)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8000aa2:	4b59      	ldr	r3, [pc, #356]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000aa4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000aa8:	ee07 3a90 	vmov	s15, r3
 8000aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ab0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ab8:	4b55      	ldr	r3, [pc, #340]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000aba:	edc3 7a02 	vstr	s15, [r3, #8]

  quantized_bmp388_calib.par_p1 = ((float)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8000abe:	4b52      	ldr	r3, [pc, #328]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000ac0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ac4:	ee07 3a90 	vmov	s15, r3
 8000ac8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000acc:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8000c1c <bmp388_quantize_calibration+0x1b4>
 8000ad0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000ad4:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8000c20 <bmp388_quantize_calibration+0x1b8>
 8000ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000adc:	4b4c      	ldr	r3, [pc, #304]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000ade:	edc3 7a03 	vstr	s15, [r3, #12]
  quantized_bmp388_calib.par_p2 = ((float)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8000ae2:	4b49      	ldr	r3, [pc, #292]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ae8:	ee07 3a90 	vmov	s15, r3
 8000aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000af0:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8000c1c <bmp388_quantize_calibration+0x1b4>
 8000af4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000af8:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000c24 <bmp388_quantize_calibration+0x1bc>
 8000afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b00:	4b43      	ldr	r3, [pc, #268]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b02:	edc3 7a04 	vstr	s15, [r3, #16]
  quantized_bmp388_calib.par_p3 = (float)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 8000b06:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b08:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8000b0c:	ee07 3a90 	vmov	s15, r3
 8000b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b14:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8000c28 <bmp388_quantize_calibration+0x1c0>
 8000b18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b1e:	edc3 7a05 	vstr	s15, [r3, #20]
  quantized_bmp388_calib.par_p4 = (float)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8000b22:	4b39      	ldr	r3, [pc, #228]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b24:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b30:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8000c2c <bmp388_quantize_calibration+0x1c4>
 8000b34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b38:	4b35      	ldr	r3, [pc, #212]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b3a:	edc3 7a06 	vstr	s15, [r3, #24]
  quantized_bmp388_calib.par_p5 = (float)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 8000b3e:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b40:	899b      	ldrh	r3, [r3, #12]
 8000b42:	ee07 3a90 	vmov	s15, r3
 8000b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b4a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b54:	edc3 7a07 	vstr	s15, [r3, #28]
  quantized_bmp388_calib.par_p6 = (float)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b5a:	89db      	ldrh	r3, [r3, #14]
 8000b5c:	ee07 3a90 	vmov	s15, r3
 8000b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b64:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8000c30 <bmp388_quantize_calibration+0x1c8>
 8000b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b6c:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b6e:	edc3 7a08 	vstr	s15, [r3, #32]
  quantized_bmp388_calib.par_p7 = (float)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 8000b72:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b74:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b80:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8000c0c <bmp388_quantize_calibration+0x1a4>
 8000b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000b8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  quantized_bmp388_calib.par_p8 = (float)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 8000b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000b90:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b9c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8000c34 <bmp388_quantize_calibration+0x1cc>
 8000ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000ba6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p9 = (float)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8000baa:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000bac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bb8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bc2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  quantized_bmp388_calib.par_p10 = (float)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000bc8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bd4:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000c18 <bmp388_quantize_calibration+0x1b0>
 8000bd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bde:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p11 = (float)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <bmp388_quantize_calibration+0x1a0>)
 8000be4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf0:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000c38 <bmp388_quantize_calibration+0x1d0>
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <bmp388_quantize_calibration+0x1a8>)
 8000bfa:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	24000294 	.word	0x24000294
 8000c0c:	43800000 	.word	0x43800000
 8000c10:	240002ac 	.word	0x240002ac
 8000c14:	4e800000 	.word	0x4e800000
 8000c18:	57800000 	.word	0x57800000
 8000c1c:	46800000 	.word	0x46800000
 8000c20:	49800000 	.word	0x49800000
 8000c24:	4e000000 	.word	0x4e000000
 8000c28:	4f800000 	.word	0x4f800000
 8000c2c:	52000000 	.word	0x52000000
 8000c30:	42800000 	.word	0x42800000
 8000c34:	47000000 	.word	0x47000000
 8000c38:	60000000 	.word	0x60000000

08000c3c <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	71fb      	strb	r3, [r7, #7]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2140      	movs	r1, #64	@ 0x40
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <bmp388_write_reg+0x44>)
 8000c52:	f001 ff8d 	bl	8002b70 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 8000c56:	1df9      	adds	r1, r7, #7
 8000c58:	2364      	movs	r3, #100	@ 0x64
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <bmp388_write_reg+0x48>)
 8000c5e:	f004 ff11 	bl	8005a84 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000c62:	1db9      	adds	r1, r7, #6
 8000c64:	2364      	movs	r3, #100	@ 0x64
 8000c66:	2201      	movs	r2, #1
 8000c68:	4806      	ldr	r0, [pc, #24]	@ (8000c84 <bmp388_write_reg+0x48>)
 8000c6a:	f004 ff0b 	bl	8005a84 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2140      	movs	r1, #64	@ 0x40
 8000c72:	4803      	ldr	r0, [pc, #12]	@ (8000c80 <bmp388_write_reg+0x44>)
 8000c74:	f001 ff7c 	bl	8002b70 <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58020000 	.word	0x58020000
 8000c84:	24000380 	.word	0x24000380

08000c88 <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
  uint8_t temp_data = 0x80 | reg;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	73bb      	strb	r3, [r7, #14]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	4814      	ldr	r0, [pc, #80]	@ (8000cf8 <bmp388_read_reg+0x70>)
 8000ca8:	f001 ff62 	bl	8002b70 <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8000cac:	f107 010e 	add.w	r1, r7, #14
 8000cb0:	2364      	movs	r3, #100	@ 0x64
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4811      	ldr	r0, [pc, #68]	@ (8000cfc <bmp388_read_reg+0x74>)
 8000cb6:	f004 fee5 	bl	8005a84 <HAL_SPI_Transmit>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <bmp388_read_reg+0x40>
    Error_Handler();
 8000cc4:	f000 fd54 	bl	8001770 <Error_Handler>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	2364      	movs	r3, #100	@ 0x64
 8000cce:	6839      	ldr	r1, [r7, #0]
 8000cd0:	480a      	ldr	r0, [pc, #40]	@ (8000cfc <bmp388_read_reg+0x74>)
 8000cd2:	f005 f8c5 	bl	8005e60 <HAL_SPI_Receive>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <bmp388_read_reg+0x5c>
    Error_Handler();
 8000ce0:	f000 fd46 	bl	8001770 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2140      	movs	r1, #64	@ 0x40
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <bmp388_read_reg+0x70>)
 8000cea:	f001 ff41 	bl	8002b70 <HAL_GPIO_WritePin>
}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	58020000 	.word	0x58020000
 8000cfc:	24000380 	.word	0x24000380

08000d00 <bmp388_setup>:
void bmp388_setup()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
  uint8_t calib_data[21];
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_read_reg(0x31, calib_data, 21);
 8000d06:	463b      	mov	r3, r7
 8000d08:	2215      	movs	r2, #21
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	2031      	movs	r0, #49	@ 0x31
 8000d0e:	f7ff ffbb 	bl	8000c88 <bmp388_read_reg>
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 8000d12:	783b      	ldrb	r3, [r7, #0]
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	787b      	ldrb	r3, [r7, #1]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	4b34      	ldr	r3, [pc, #208]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d24:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 8000d26:	78bb      	ldrb	r3, [r7, #2]
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d36:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 8000d38:	793b      	ldrb	r3, [r7, #4]
 8000d3a:	b25a      	sxtb	r2, r3
 8000d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d3e:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	79bb      	ldrb	r3, [r7, #6]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d50:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b21a      	sxth	r2, r3
 8000d56:	7a3b      	ldrb	r3, [r7, #8]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d62:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8000d64:	7a7b      	ldrb	r3, [r7, #9]
 8000d66:	b25a      	sxtb	r2, r3
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d6a:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 8000d6c:	7abb      	ldrb	r3, [r7, #10]
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d72:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8000d74:	7afb      	ldrb	r3, [r7, #11]
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	7b3b      	ldrb	r3, [r7, #12]
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	b21b      	sxth	r3, r3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	b29a      	uxth	r2, r3
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d86:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8000d88:	7b7b      	ldrb	r3, [r7, #13]
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	7bbb      	ldrb	r3, [r7, #14]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b21b      	sxth	r3, r3
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <bmp388_setup+0xf4>)
 8000d9a:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	b25a      	sxtb	r2, r3
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <bmp388_setup+0xf4>)
 8000da2:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8000da4:	7c3b      	ldrb	r3, [r7, #16]
 8000da6:	b25a      	sxtb	r2, r3
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <bmp388_setup+0xf4>)
 8000daa:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 8000dac:	7c7b      	ldrb	r3, [r7, #17]
 8000dae:	b21a      	sxth	r2, r3
 8000db0:	7cbb      	ldrb	r3, [r7, #18]
 8000db2:	021b      	lsls	r3, r3, #8
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	4313      	orrs	r3, r2
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <bmp388_setup+0xf4>)
 8000dbc:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 8000dbe:	7cfb      	ldrb	r3, [r7, #19]
 8000dc0:	b25a      	sxtb	r2, r3
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <bmp388_setup+0xf4>)
 8000dc4:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8000dc6:	7d3b      	ldrb	r3, [r7, #20]
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <bmp388_setup+0xf4>)
 8000dcc:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 8000dce:	f7ff fe4b 	bl	8000a68 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1B, 0x30);  // normal mode, temp pressure on by default with it
 8000dd2:	2130      	movs	r1, #48	@ 0x30
 8000dd4:	201b      	movs	r0, #27
 8000dd6:	f7ff ff31 	bl	8000c3c <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x09);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 8000dda:	2109      	movs	r1, #9
 8000ddc:	201c      	movs	r0, #28
 8000dde:	f7ff ff2d 	bl	8000c3c <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x00);  // coefficient for IIR filter, ideally low value for the dart
 8000de2:	2100      	movs	r1, #0
 8000de4:	201f      	movs	r0, #31
 8000de6:	f7ff ff29 	bl	8000c3c <bmp388_write_reg>
}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	24000294 	.word	0x24000294

08000df8 <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2206      	movs	r2, #6
 8000e02:	4619      	mov	r1, r3
 8000e04:	2004      	movs	r0, #4
 8000e06:	f7ff ff3f 	bl	8000c88 <bmp388_read_reg>

  // annoying bit shift because both are 20 bit values
  bmp388_rawData.pressure = (((int32_t)data[0] << 16) | ((int32_t)data[1] << 8) | data[2]) >> 4;
 8000e0a:	783b      	ldrb	r3, [r7, #0]
 8000e0c:	041a      	lsls	r2, r3, #16
 8000e0e:	787b      	ldrb	r3, [r7, #1]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	4313      	orrs	r3, r2
 8000e14:	78ba      	ldrb	r2, [r7, #2]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	111b      	asrs	r3, r3, #4
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <bmp388_read_raw_data+0x48>)
 8000e1e:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[3] << 16) | ((int32_t)data[4] << 8) | data[5]) >> 4;
 8000e20:	78fb      	ldrb	r3, [r7, #3]
 8000e22:	041a      	lsls	r2, r3, #16
 8000e24:	793b      	ldrb	r3, [r7, #4]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	797a      	ldrb	r2, [r7, #5]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	111b      	asrs	r3, r3, #4
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <bmp388_read_raw_data+0x48>)
 8000e34:	601a      	str	r2, [r3, #0]

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	240002e8 	.word	0x240002e8

08000e44 <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static float bmp388_compensated_temperature(uint32_t raw_temp)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  float partial_data1 = (float)(raw_temp)-quantized_bmp388_calib.par_t1;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e56:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <bmp388_compensated_temperature+0x68>)
 8000e58:	edd3 7a00 	vldr	s15, [r3]
 8000e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e60:	edc7 7a03 	vstr	s15, [r7, #12]
  float partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 8000e64:	4b11      	ldr	r3, [pc, #68]	@ (8000eac <bmp388_compensated_temperature+0x68>)
 8000e66:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e72:	edc7 7a02 	vstr	s15, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 8000e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000eac <bmp388_compensated_temperature+0x68>)
 8000e80:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e88:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <bmp388_compensated_temperature+0x68>)
 8000e92:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  return quantized_bmp388_calib.t_lin;
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <bmp388_compensated_temperature+0x68>)
 8000e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e9a:	ee07 3a90 	vmov	s15, r3
}
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	240002ac 	.word	0x240002ac

08000eb0 <bmp388_compensated_pressure>:

static float bmp388_compensated_pressure(uint32_t raw_pressure)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b08b      	sub	sp, #44	@ 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  float pressure;
  float partial_data1, partial_data2, partial_data3, partial_data4;
  float partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8000eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000eba:	ed93 7a08 	vldr	s14, [r3, #32]
 8000ebe:	4b6c      	ldr	r3, [pc, #432]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000ec0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000ecc:	4b68      	ldr	r3, [pc, #416]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000ece:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000ed2:	4b67      	ldr	r3, [pc, #412]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000ed4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000edc:	4b64      	ldr	r3, [pc, #400]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000ede:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee6:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000eea:	4b61      	ldr	r3, [pc, #388]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000eec:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000ef0:	4b5f      	ldr	r3, [pc, #380]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000ef2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000efa:	4b5d      	ldr	r3, [pc, #372]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000efc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f04:	4b5a      	ldr	r3, [pc, #360]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f06:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0e:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 8000f12:	4b57      	ldr	r3, [pc, #348]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f14:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f18:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f20:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f28:	ed97 7a07 	vldr	s14, [r7, #28]
 8000f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f30:	edc7 7a06 	vstr	s15, [r7, #24]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8000f34:	4b4e      	ldr	r3, [pc, #312]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f36:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f3c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f48:	4b49      	ldr	r3, [pc, #292]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f4a:	ed93 7a05 	vldr	s14, [r3, #20]
 8000f4e:	4b48      	ldr	r3, [pc, #288]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f50:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f58:	4b45      	ldr	r3, [pc, #276]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f5a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f62:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8000f66:	4b42      	ldr	r3, [pc, #264]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f68:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f6c:	4b40      	ldr	r3, [pc, #256]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f6e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f76:	4b3e      	ldr	r3, [pc, #248]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f78:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f80:	4b3b      	ldr	r3, [pc, #236]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f82:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8a:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_out2 = (float)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f98:	4b35      	ldr	r3, [pc, #212]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000f9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f9e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000faa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fae:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fba:	edc7 7a05 	vstr	s15, [r7, #20]

  partial_data1 = (float)raw_pressure * (float)raw_pressure;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	ee07 3a90 	vmov	s15, r3
 8000fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 8000fda:	4b25      	ldr	r3, [pc, #148]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000fdc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000fe0:	4b23      	ldr	r3, [pc, #140]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000fe2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8000fe6:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8000fe8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	edc7 7a08 	vstr	s15, [r7, #32]
  partial_data3 = partial_data1 * partial_data2;
 8000ff8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000ffc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	edc7 7a07 	vstr	s15, [r7, #28]
  partial_data4 = ((float)raw_pressure * (float)raw_pressure * (float)raw_pressure) * quantized_bmp388_calib.par_p11;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <bmp388_compensated_pressure+0x1c0>)
 8001030:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001038:	edc7 7a04 	vstr	s15, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data3 + partial_data4;
 800103c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001040:	edd7 7a05 	vldr	s15, [r7, #20]
 8001044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001048:	edd7 7a07 	vldr	s15, [r7, #28]
 800104c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001050:	ed97 7a04 	vldr	s14, [r7, #16]
 8001054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001058:	edc7 7a03 	vstr	s15, [r7, #12]

  return pressure;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	ee07 3a90 	vmov	s15, r3
}
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	372c      	adds	r7, #44	@ 0x2c
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	240002ac 	.word	0x240002ac

08001074 <bmp388_getData>:

void bmp388_getData()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 8001078:	f7ff febe 	bl	8000df8 <bmp388_read_raw_data>
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <bmp388_getData+0x34>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff15 	bl	8000eb0 <bmp388_compensated_pressure>
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <bmp388_getData+0x38>)
 800108c:	edc3 7a01 	vstr	s15, [r3, #4]
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 8001090:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <bmp388_getData+0x34>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fed5 	bl	8000e44 <bmp388_compensated_temperature>
 800109a:	eef0 7a40 	vmov.f32	s15, s0
 800109e:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <bmp388_getData+0x38>)
 80010a0:	edc3 7a00 	vstr	s15, [r3]
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	240002e8 	.word	0x240002e8
 80010ac:	240002f0 	.word	0x240002f0

080010b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80010d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00b      	beq.n	80010f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010d8:	e000      	b.n	80010dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80010da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010dc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f9      	beq.n	80010da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010e6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	@ 0x50
 8001104:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001106:	f000 fb07 	bl	8001718 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110a:	f001 f937 	bl	800237c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110e:	f000 f899 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001112:	f000 fa5b 	bl	80015cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001116:	f000 fa0d 	bl	8001534 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800111a:	f000 f90f 	bl	800133c <MX_SPI1_Init>
  MX_TIM2_Init();
 800111e:	f000 f9bb 	bl	8001498 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001122:	f000 f963 	bl	80013ec <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 8001126:	483d      	ldr	r0, [pc, #244]	@ (800121c <main+0x11c>)
 8001128:	f005 fa4c 	bl	80065c4 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2224      	movs	r2, #36	@ 0x24
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f007 ffd3 	bl	80090e2 <memset>
  mpu9250_setup();
 800113c:	f000 fb76 	bl	800182c <mpu9250_setup>
  bmp388_setup();
 8001140:	f7ff fdde 	bl	8000d00 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 8001144:	4b36      	ldr	r3, [pc, #216]	@ (8001220 <main+0x120>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <main+0x5c>
	  {
		  timer_flag = 0;	//reset timer flag
 800114e:	4b34      	ldr	r3, [pc, #208]	@ (8001220 <main+0x120>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

		  mpu9250_getRawAngle();
 8001154:	f000 fb7c 	bl	8001850 <mpu9250_getRawAngle>
		  bmp388_getData();
 8001158:	f7ff ff8c 	bl	8001074 <bmp388_getData>
	  }

	  double dt = get_dt();
 800115c:	f000 fa7c 	bl	8001658 <get_dt>
 8001160:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38

	  double pitch_angle = kalman_getAngle(&KalmanPitch, imu_angles.pitch, imu_processed_data.gyro_y, dt);
 8001164:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <main+0x124>)
 8001166:	edd3 7a01 	vldr	s15, [r3, #4]
 800116a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116e:	4b2e      	ldr	r3, [pc, #184]	@ (8001228 <main+0x128>)
 8001170:	edd3 6a04 	vldr	s13, [r3, #16]
 8001174:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001178:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 800117c:	eeb0 1b46 	vmov.f64	d1, d6
 8001180:	eeb0 0b47 	vmov.f64	d0, d7
 8001184:	4829      	ldr	r0, [pc, #164]	@ (800122c <main+0x12c>)
 8001186:	f000 fcb9 	bl	8001afc <kalman_getAngle>
 800118a:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
	  double roll_angle = kalman_getAngle(&KalmanRoll, imu_angles.roll, imu_processed_data.gyro_x, dt);
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <main+0x124>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001198:	4b23      	ldr	r3, [pc, #140]	@ (8001228 <main+0x128>)
 800119a:	edd3 6a03 	vldr	s13, [r3, #12]
 800119e:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011a2:	ed97 2b0e 	vldr	d2, [r7, #56]	@ 0x38
 80011a6:	eeb0 1b46 	vmov.f64	d1, d6
 80011aa:	eeb0 0b47 	vmov.f64	d0, d7
 80011ae:	4820      	ldr	r0, [pc, #128]	@ (8001230 <main+0x130>)
 80011b0:	f000 fca4 	bl	8001afc <kalman_getAngle>
 80011b4:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

	  //send data through UART
	  snprintf(buffer, sizeof(buffer), "%.4f,%.4f\n", pitch_angle, roll_angle);
 80011b8:	4638      	mov	r0, r7
 80011ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80011be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80011c6:	e9cd 2300 	strd	r2, r3, [sp]
 80011ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001234 <main+0x134>)
 80011cc:	2128      	movs	r1, #40	@ 0x28
 80011ce:	f007 fef1 	bl	8008fb4 <sniprintf>
	  snprintf(buffer, sizeof(buffer), "%.4f, %.4f\n", bmp388_processedData.temperature, bmp388_processedData.pressure);
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <main+0x138>)
 80011d4:	edd3 7a00 	vldr	s15, [r3]
 80011d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <main+0x138>)
 80011de:	edd3 6a01 	vldr	s13, [r3, #4]
 80011e2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80011e6:	463b      	mov	r3, r7
 80011e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80011ec:	ed8d 7b00 	vstr	d7, [sp]
 80011f0:	4a12      	ldr	r2, [pc, #72]	@ (800123c <main+0x13c>)
 80011f2:	2128      	movs	r1, #40	@ 0x28
 80011f4:	4618      	mov	r0, r3
 80011f6:	f007 fedd 	bl	8008fb4 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80011fa:	463b      	mov	r3, r7
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f8bf 	bl	8000380 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	b29a      	uxth	r2, r3
 8001206:	4639      	mov	r1, r7
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <main+0x140>)
 800120e:	f005 feb3 	bl	8006f78 <HAL_UART_Transmit>
	  HAL_Delay(5);
 8001212:	2005      	movs	r0, #5
 8001214:	f001 f944 	bl	80024a0 <HAL_Delay>
  {
 8001218:	e794      	b.n	8001144 <main+0x44>
 800121a:	bf00      	nop
 800121c:	24000408 	.word	0x24000408
 8001220:	240004f0 	.word	0x240004f0
 8001224:	24000518 	.word	0x24000518
 8001228:	24000500 	.word	0x24000500
 800122c:	24000000 	.word	0x24000000
 8001230:	24000050 	.word	0x24000050
 8001234:	0800c978 	.word	0x0800c978
 8001238:	240002f0 	.word	0x240002f0
 800123c:	0800c984 	.word	0x0800c984
 8001240:	24000454 	.word	0x24000454

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09c      	sub	sp, #112	@ 0x70
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124e:	224c      	movs	r2, #76	@ 0x4c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 ff45 	bl	80090e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2220      	movs	r2, #32
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f007 ff3f 	bl	80090e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001264:	2002      	movs	r0, #2
 8001266:	f001 fc9d 	bl	8002ba4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <SystemClock_Config+0xf0>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a30      	ldr	r2, [pc, #192]	@ (8001334 <SystemClock_Config+0xf0>)
 8001274:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <SystemClock_Config+0xf0>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4b2c      	ldr	r3, [pc, #176]	@ (8001338 <SystemClock_Config+0xf4>)
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	4a2b      	ldr	r2, [pc, #172]	@ (8001338 <SystemClock_Config+0xf4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <SystemClock_Config+0xf4>)
 8001292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800129c:	bf00      	nop
 800129e:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <SystemClock_Config+0xf0>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80012aa:	d1f8      	bne.n	800129e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80012b0:	2301      	movs	r3, #1
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2340      	movs	r3, #64	@ 0x40
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c0:	2304      	movs	r3, #4
 80012c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80012c4:	233c      	movs	r3, #60	@ 0x3c
 80012c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80012cc:	2305      	movs	r3, #5
 80012ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012d4:	230c      	movs	r3, #12
 80012d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012d8:	2300      	movs	r3, #0
 80012da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fc97 	bl	8002c18 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012f0:	f000 fa3e 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	233f      	movs	r3, #63	@ 0x3f
 80012f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001300:	2308      	movs	r3, #8
 8001302:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001308:	2340      	movs	r3, #64	@ 0x40
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001316:	1d3b      	adds	r3, r7, #4
 8001318:	2104      	movs	r1, #4
 800131a:	4618      	mov	r0, r3
 800131c:	f002 f8d6 	bl	80034cc <HAL_RCC_ClockConfig>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001326:	f000 fa23 	bl	8001770 <Error_Handler>
  }
}
 800132a:	bf00      	nop
 800132c:	3770      	adds	r7, #112	@ 0x70
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	58024800 	.word	0x58024800
 8001338:	58000400 	.word	0x58000400

0800133c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <MX_SPI1_Init+0xac>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001348:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800134c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b23      	ldr	r3, [pc, #140]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001356:	2207      	movs	r2, #7
 8001358:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800135a:	4b22      	ldr	r3, [pc, #136]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 800135c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001362:	4b20      	ldr	r3, [pc, #128]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001364:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001368:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800136a:	4b1e      	ldr	r3, [pc, #120]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 800136c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001370:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001372:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001374:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001378:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800137a:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001386:	4b17      	ldr	r3, [pc, #92]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 800138e:	2200      	movs	r2, #0
 8001390:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001392:	4b14      	ldr	r3, [pc, #80]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 8001394:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013a0:	4b10      	ldr	r3, [pc, #64]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013ac:	4b0d      	ldr	r3, [pc, #52]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <MX_SPI1_Init+0xa8>)
 80013d2:	f004 fa33 	bl	800583c <HAL_SPI_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80013dc:	f000 f9c8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	240002f8 	.word	0x240002f8
 80013e8:	40013000 	.word	0x40013000

080013ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <MX_SPI2_Init+0xa4>)
 80013f2:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <MX_SPI2_Init+0xa8>)
 80013f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <MX_SPI2_Init+0xa4>)
 80013f8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013fe:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001406:	2203      	movs	r2, #3
 8001408:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140a:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001410:	4b1f      	ldr	r3, [pc, #124]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001418:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800141c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001420:	2200      	movs	r2, #0
 8001422:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800143e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001442:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001464:	2200      	movs	r2, #0
 8001466:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001468:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800146a:	2200      	movs	r2, #0
 800146c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001470:	2200      	movs	r2, #0
 8001472:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_SPI2_Init+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800147a:	4805      	ldr	r0, [pc, #20]	@ (8001490 <MX_SPI2_Init+0xa4>)
 800147c:	f004 f9de 	bl	800583c <HAL_SPI_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001486:	f000 f973 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	24000380 	.word	0x24000380
 8001494:	40003800 	.word	0x40003800

08001498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014c0:	f240 321f 	movw	r2, #799	@ 0x31f
 80014c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014e2:	f005 f818 	bl	8006516 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f940 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0310 	add.w	r3, r7, #16
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM2_Init+0x98>)
 80014fe:	f005 f9e1 	bl	80068c4 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001508:	f000 f932 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM2_Init+0x98>)
 800151a:	f005 fc31 	bl	8006d80 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001524:	f000 f924 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3720      	adds	r7, #32
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	24000408 	.word	0x24000408

08001534 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 800153a:	4a23      	ldr	r2, [pc, #140]	@ (80015c8 <MX_USART2_UART_Init+0x94>)
 800153c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800153e:	4b21      	ldr	r3, [pc, #132]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001544:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 800155a:	220c      	movs	r2, #12
 800155c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155e:	4b19      	ldr	r3, [pc, #100]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001564:	4b17      	ldr	r3, [pc, #92]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800156a:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001570:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001576:	4b13      	ldr	r3, [pc, #76]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157c:	4811      	ldr	r0, [pc, #68]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 800157e:	f005 fcab 	bl	8006ed8 <HAL_UART_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001588:	f000 f8f2 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800158c:	2100      	movs	r1, #0
 800158e:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 8001590:	f006 fd41 	bl	8008016 <HAL_UARTEx_SetTxFifoThreshold>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800159a:	f000 f8e9 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 80015a2:	f006 fd76 	bl	8008092 <HAL_UARTEx_SetRxFifoThreshold>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015ac:	f000 f8e0 	bl	8001770 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_USART2_UART_Init+0x90>)
 80015b2:	f006 fcf7 	bl	8007fa4 <HAL_UARTEx_DisableFifoMode>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80015bc:	f000 f8d8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	24000454 	.word	0x24000454
 80015c8:	40004400 	.word	0x40004400

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_GPIO_Init+0x80>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <MX_GPIO_Init+0x80>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_GPIO_Init+0x80>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_GPIO_Init+0x80>)
 8001602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001606:	4a11      	ldr	r2, [pc, #68]	@ (800164c <MX_GPIO_Init+0x80>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_GPIO_Init+0x80>)
 8001612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	2160      	movs	r1, #96	@ 0x60
 8001622:	480b      	ldr	r0, [pc, #44]	@ (8001650 <MX_GPIO_Init+0x84>)
 8001624:	f001 faa4 	bl	8002b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001628:	2360      	movs	r3, #96	@ 0x60
 800162a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4804      	ldr	r0, [pc, #16]	@ (8001650 <MX_GPIO_Init+0x84>)
 8001640:	f001 f8e6 	bl	8002810 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	58024400 	.word	0x58024400
 8001650:	58020000 	.word	0x58020000
 8001654:	00000000 	.word	0x00000000

08001658 <get_dt>:

/* USER CODE BEGIN 4 */
double get_dt()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
    double current_time = HAL_GetTick() / 1000.0;  // Get time in seconds
 800165e:	f000 ff13 	bl	8002488 <HAL_GetTick>
 8001662:	ee07 0a90 	vmov	s15, r0
 8001666:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800166a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 80016a8 <get_dt+0x50>
 800166e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001672:	ed87 7b02 	vstr	d7, [r7, #8]
    double dt = current_time - previous_time;
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <get_dt+0x58>)
 8001678:	ed93 7b00 	vldr	d7, [r3]
 800167c:	ed97 6b02 	vldr	d6, [r7, #8]
 8001680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001684:	ed87 7b00 	vstr	d7, [r7]
    previous_time = current_time;  // Update for the next call
 8001688:	4909      	ldr	r1, [pc, #36]	@ (80016b0 <get_dt+0x58>)
 800168a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168e:	e9c1 2300 	strd	r2, r3, [r1]
    return dt;
 8001692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001696:	ec43 2b17 	vmov	d7, r2, r3
}
 800169a:	eeb0 0b47 	vmov.f64	d0, d7
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	00000000 	.word	0x00000000
 80016ac:	408f4000 	.word	0x408f4000
 80016b0:	240004e8 	.word	0x240004e8

080016b4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a06      	ldr	r2, [pc, #24]	@ (80016d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d102      	bne.n	80016ca <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	701a      	strb	r2, [r3, #0]
	}
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	24000408 	.word	0x24000408
 80016dc:	240004f0 	.word	0x240004f0

080016e0 <_write>:
int _write(int file, char *ptr, int len)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	e009      	b.n	8001706 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	60ba      	str	r2, [r7, #8]
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fcd8 	bl	80010b0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbf1      	blt.n	80016f2 <_write+0x12>
	}
	return len;
 800170e:	687b      	ldr	r3, [r7, #4]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800172a:	f000 fff9 	bl	8002720 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800172e:	2301      	movs	r3, #1
 8001730:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001732:	2300      	movs	r3, #0
 8001734:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800173a:	231f      	movs	r3, #31
 800173c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800173e:	2387      	movs	r3, #135	@ 0x87
 8001740:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001742:	2300      	movs	r3, #0
 8001744:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001746:	2300      	movs	r3, #0
 8001748:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800174a:	2301      	movs	r3, #1
 800174c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f001 f817 	bl	8002790 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001762:	2004      	movs	r0, #4
 8001764:	f000 fff4 	bl	8002750 <HAL_MPU_Enable>

}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <mpu9250_write_reg>:
		.R_measure = 0.03f
};


void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	460a      	mov	r2, r1
 8001786:	71fb      	strb	r3, [r7, #7]
 8001788:	4613      	mov	r3, r2
 800178a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <mpu9250_write_reg+0x44>)
 8001792:	f001 f9ed 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001796:	1df9      	adds	r1, r7, #7
 8001798:	2364      	movs	r3, #100	@ 0x64
 800179a:	2201      	movs	r2, #1
 800179c:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <mpu9250_write_reg+0x48>)
 800179e:	f004 f971 	bl	8005a84 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80017a2:	1db9      	adds	r1, r7, #6
 80017a4:	2364      	movs	r3, #100	@ 0x64
 80017a6:	2201      	movs	r2, #1
 80017a8:	4806      	ldr	r0, [pc, #24]	@ (80017c4 <mpu9250_write_reg+0x48>)
 80017aa:	f004 f96b 	bl	8005a84 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2120      	movs	r1, #32
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <mpu9250_write_reg+0x44>)
 80017b4:	f001 f9dc 	bl	8002b70 <HAL_GPIO_WritePin>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58020000 	.word	0x58020000
 80017c4:	240002f8 	.word	0x240002f8

080017c8 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	71fb      	strb	r3, [r7, #7]
 80017d4:	4613      	mov	r3, r2
 80017d6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2120      	movs	r1, #32
 80017e6:	480f      	ldr	r0, [pc, #60]	@ (8001824 <mpu9250_read_reg+0x5c>)
 80017e8:	f001 f9c2 	bl	8002b70 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 80017ec:	f107 010e 	add.w	r1, r7, #14
 80017f0:	2364      	movs	r3, #100	@ 0x64
 80017f2:	2201      	movs	r2, #1
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <mpu9250_read_reg+0x60>)
 80017f6:	f004 f945 	bl	8005a84 <HAL_SPI_Transmit>
 80017fa:	4603      	mov	r3, r0
 80017fc:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	b29a      	uxth	r2, r3
 8001802:	2364      	movs	r3, #100	@ 0x64
 8001804:	6839      	ldr	r1, [r7, #0]
 8001806:	4808      	ldr	r0, [pc, #32]	@ (8001828 <mpu9250_read_reg+0x60>)
 8001808:	f004 fb2a 	bl	8005e60 <HAL_SPI_Receive>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
		Error_Handler;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2120      	movs	r1, #32
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <mpu9250_read_reg+0x5c>)
 8001816:	f001 f9ab 	bl	8002b70 <HAL_GPIO_WritePin>
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	58020000 	.word	0x58020000
 8001828:	240002f8 	.word	0x240002f8

0800182c <mpu9250_setup>:

void mpu9250_setup()
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001830:	2105      	movs	r1, #5
 8001832:	201a      	movs	r0, #26
 8001834:	f7ff ffa2 	bl	800177c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001838:	2110      	movs	r1, #16
 800183a:	201c      	movs	r0, #28
 800183c:	f7ff ff9e 	bl	800177c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001840:	2108      	movs	r1, #8
 8001842:	201b      	movs	r0, #27
 8001844:	f7ff ff9a 	bl	800177c <mpu9250_write_reg>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	0000      	movs	r0, r0
	...

08001850 <mpu9250_getRawAngle>:


void mpu9250_getRawAngle()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 800185a:	463b      	mov	r3, r7
 800185c:	2206      	movs	r2, #6
 800185e:	4619      	mov	r1, r3
 8001860:	203b      	movs	r0, #59	@ 0x3b
 8001862:	f7ff ffb1 	bl	80017c8 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001866:	783b      	ldrb	r3, [r7, #0]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b21a      	sxth	r2, r3
 800186c:	787b      	ldrb	r3, [r7, #1]
 800186e:	b21b      	sxth	r3, r3
 8001870:	4313      	orrs	r3, r2
 8001872:	b21a      	sxth	r2, r3
 8001874:	4b9e      	ldr	r3, [pc, #632]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 8001876:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001878:	78bb      	ldrb	r3, [r7, #2]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b21a      	sxth	r2, r3
 800187e:	78fb      	ldrb	r3, [r7, #3]
 8001880:	b21b      	sxth	r3, r3
 8001882:	4313      	orrs	r3, r2
 8001884:	b21a      	sxth	r2, r3
 8001886:	4b9a      	ldr	r3, [pc, #616]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 8001888:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 800188a:	793b      	ldrb	r3, [r7, #4]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	797b      	ldrb	r3, [r7, #5]
 8001892:	b21b      	sxth	r3, r3
 8001894:	4313      	orrs	r3, r2
 8001896:	b21a      	sxth	r2, r3
 8001898:	4b95      	ldr	r3, [pc, #596]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 800189a:	809a      	strh	r2, [r3, #4]

	  imu_processed_data.accel_x = (float)imu_raw_data.accel_x/4096.0;
 800189c:	4b94      	ldr	r3, [pc, #592]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018aa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018ae:	ed9f 5b8a 	vldr	d5, [pc, #552]	@ 8001ad8 <mpu9250_getRawAngle+0x288>
 80018b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ba:	4b8e      	ldr	r3, [pc, #568]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]
	  imu_processed_data.accel_y = (float)imu_raw_data.accel_y/4096.0;
 80018c0:	4b8b      	ldr	r3, [pc, #556]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 80018c2:	885b      	ldrh	r3, [r3, #2]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ce:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018d2:	ed9f 5b81 	vldr	d5, [pc, #516]	@ 8001ad8 <mpu9250_getRawAngle+0x288>
 80018d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018de:	4b85      	ldr	r3, [pc, #532]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80018e0:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_processed_data.accel_z = (float)imu_raw_data.accel_z/4096.0;
 80018e4:	4b82      	ldr	r3, [pc, #520]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 80018e6:	889b      	ldrh	r3, [r3, #4]
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018f2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018f6:	ed9f 5b78 	vldr	d5, [pc, #480]	@ 8001ad8 <mpu9250_getRawAngle+0x288>
 80018fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001902:	4b7c      	ldr	r3, [pc, #496]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001904:	edc3 7a02 	vstr	s15, [r3, #8]
	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0
 8001908:	4b7a      	ldr	r3, [pc, #488]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 800190a:	edd3 7a02 	vldr	s15, [r3, #8]
 800190e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001916:	4b77      	ldr	r3, [pc, #476]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001918:	edc3 7a02 	vstr	s15, [r3, #8]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 800191c:	463b      	mov	r3, r7
 800191e:	2206      	movs	r2, #6
 8001920:	4619      	mov	r1, r3
 8001922:	2043      	movs	r0, #67	@ 0x43
 8001924:	f7ff ff50 	bl	80017c8 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001928:	783b      	ldrb	r3, [r7, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21a      	sxth	r2, r3
 800192e:	787b      	ldrb	r3, [r7, #1]
 8001930:	b21b      	sxth	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b6e      	ldr	r3, [pc, #440]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 8001938:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 800193a:	78bb      	ldrb	r3, [r7, #2]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	b21a      	sxth	r2, r3
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b69      	ldr	r3, [pc, #420]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 800194a:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 800194c:	793b      	ldrb	r3, [r7, #4]
 800194e:	021b      	lsls	r3, r3, #8
 8001950:	b21a      	sxth	r2, r3
 8001952:	797b      	ldrb	r3, [r7, #5]
 8001954:	b21b      	sxth	r3, r3
 8001956:	4313      	orrs	r3, r2
 8001958:	b21a      	sxth	r2, r3
 800195a:	4b65      	ldr	r3, [pc, #404]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 800195c:	815a      	strh	r2, [r3, #10]

	  imu_processed_data.gyro_x = (float)imu_raw_data.gyro_x/65.5;
 800195e:	4b64      	ldr	r3, [pc, #400]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 8001960:	88db      	ldrh	r3, [r3, #6]
 8001962:	b21b      	sxth	r3, r3
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001970:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 8001ae0 <mpu9250_getRawAngle+0x290>
 8001974:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800197c:	4b5d      	ldr	r3, [pc, #372]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 800197e:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y = (float)imu_raw_data.gyro_y/65.5;
 8001982:	4b5b      	ldr	r3, [pc, #364]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 8001984:	891b      	ldrh	r3, [r3, #8]
 8001986:	b21b      	sxth	r3, r3
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001990:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001994:	ed9f 5b52 	vldr	d5, [pc, #328]	@ 8001ae0 <mpu9250_getRawAngle+0x290>
 8001998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800199c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019a0:	4b54      	ldr	r3, [pc, #336]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019a2:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z = (float)imu_raw_data.gyro_z/65.5;
 80019a6:	4b52      	ldr	r3, [pc, #328]	@ (8001af0 <mpu9250_getRawAngle+0x2a0>)
 80019a8:	895b      	ldrh	r3, [r3, #10]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80019b8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001ae0 <mpu9250_getRawAngle+0x290>
 80019bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c4:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019c6:	edc3 7a05 	vstr	s15, [r3, #20]
	  imu_processed_data.gyro_x -= 4;	//offset GyroX to be around 0
 80019ca:	4b4a      	ldr	r3, [pc, #296]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80019d0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80019d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019d8:	4b46      	ldr	r3, [pc, #280]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019da:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.gyro_y += 20;	//offset GyroY to be around 0
 80019de:	4b45      	ldr	r3, [pc, #276]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019ec:	4b41      	ldr	r3, [pc, #260]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019ee:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.gyro_z += 5;	//offset GyroZ to be around 0
 80019f2:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 80019f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80019f8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80019fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a00:	4b3c      	ldr	r3, [pc, #240]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a02:	edc3 7a05 	vstr	s15, [r3, #20]

	  imu_angles.roll=atan(imu_processed_data.accel_y/sqrt((imu_processed_data.accel_x*imu_processed_data.accel_x)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a08:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a0c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a10:	4b38      	ldr	r3, [pc, #224]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	4b37      	ldr	r3, [pc, #220]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a20:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a22:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a26:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a28:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a38:	eeb0 0b47 	vmov.f64	d0, d7
 8001a3c:	f00a fe68 	bl	800c710 <sqrt>
 8001a40:	eeb0 6b40 	vmov.f64	d6, d0
 8001a44:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001a48:	eeb0 0b47 	vmov.f64	d0, d7
 8001a4c:	f00a fe80 	bl	800c750 <atan>
 8001a50:	eeb0 6b40 	vmov.f64	d6, d0
 8001a54:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001ae8 <mpu9250_getRawAngle+0x298>
 8001a58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a60:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <mpu9250_getRawAngle+0x2a8>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
	  imu_angles.pitch=-atan(imu_processed_data.accel_x/sqrt((imu_processed_data.accel_y*imu_processed_data.accel_y)+(imu_processed_data.accel_z*imu_processed_data.accel_z)))*1/(3.142/180);
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a72:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a80:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a82:	edd3 6a02 	vldr	s13, [r3, #8]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <mpu9250_getRawAngle+0x2a4>)
 8001a88:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a98:	eeb0 0b47 	vmov.f64	d0, d7
 8001a9c:	f00a fe38 	bl	800c710 <sqrt>
 8001aa0:	eeb0 6b40 	vmov.f64	d6, d0
 8001aa4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8001aac:	f00a fe50 	bl	800c750 <atan>
 8001ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ab4:	eeb1 6b47 	vneg.f64	d6, d7
 8001ab8:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8001ae8 <mpu9250_getRawAngle+0x298>
 8001abc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <mpu9250_getRawAngle+0x2a8>)
 8001ac6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	ecbd 8b02 	vpop	{d8}
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	40b00000 	.word	0x40b00000
 8001ae0:	00000000 	.word	0x00000000
 8001ae4:	40506000 	.word	0x40506000
 8001ae8:	80fa7e3f 	.word	0x80fa7e3f
 8001aec:	3f91dfde 	.word	0x3f91dfde
 8001af0:	240004f4 	.word	0x240004f4
 8001af4:	24000500 	.word	0x24000500
 8001af8:	24000518 	.word	0x24000518

08001afc <kalman_getAngle>:

double kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b097      	sub	sp, #92	@ 0x5c
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	61f8      	str	r0, [r7, #28]
 8001b04:	ed87 0b04 	vstr	d0, [r7, #16]
 8001b08:	ed87 1b02 	vstr	d1, [r7, #8]
 8001b0c:	ed87 2b00 	vstr	d2, [r7]
	//Step 1: State Prediction
	double rate = newRate - Kalman->bias;	//newRate is the newest gyro measurement
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	ed93 7b02 	vldr	d7, [r3, #8]
 8001b16:	ed97 6b02 	vldr	d6, [r7, #8]
 8001b1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b1e:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
	Kalman->angle += dt * rate;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	ed93 6b00 	vldr	d6, [r3]
 8001b28:	ed97 5b00 	vldr	d5, [r7]
 8001b2c:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8001b30:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	ed83 7b00 	vstr	d7, [r3]

	//Step 2: Covariance Prediction
	Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[1][0] - Kalman->P[0][1] + Kalman->Q_angle);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	ed93 6b06 	vldr	d6, [r3, #24]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001b4a:	ed97 7b00 	vldr	d7, [r7]
 8001b4e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8001b58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001b62:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8001b6c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001b70:	ed97 7b00 	vldr	d7, [r7]
 8001b74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	ed93 6b08 	vldr	d6, [r3, #32]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001b8e:	ed97 7b00 	vldr	d7, [r7]
 8001b92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	ed93 5b0c 	vldr	d5, [r3, #48]	@ 0x30
 8001bac:	ed97 7b00 	vldr	d7, [r7]
 8001bb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8001bca:	ed97 7b00 	vldr	d7, [r7]
 8001bce:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	//Step 3: Innovation (calculate angle difference)
	double y = newAngle - Kalman->angle;
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	ed93 7b00 	vldr	d7, [r3]
 8001be2:	ed97 6b04 	vldr	d6, [r7, #16]
 8001be6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001bea:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48

	//Step 4: Innovation covariance	(estimate error)
	double S = Kalman->P[0][0] + Kalman->R_measure;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	ed93 6b06 	vldr	d6, [r3, #24]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8001bfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bfe:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40

	//Step 5: Kalman Gain
	double K[2];	//2x1 vector
	K[0] = Kalman->P[0][0] / S;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	ed93 5b06 	vldr	d5, [r3, #24]
 8001c08:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001c0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c10:	ed87 7b08 	vstr	d7, [r7, #32]
	K[1] = Kalman->P[1][0] / S;
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 8001c1a:	ed97 6b10 	vldr	d6, [r7, #64]	@ 0x40
 8001c1e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001c22:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28

	//Step 6: Update Angle
	Kalman->angle += K[0] * y;
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	ed93 6b00 	vldr	d6, [r3]
 8001c2c:	ed97 5b08 	vldr	d5, [r7, #32]
 8001c30:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001c34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	ed83 7b00 	vstr	d7, [r3]
	Kalman->bias += K[1] * y;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	ed93 6b02 	vldr	d6, [r3, #8]
 8001c48:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001c4c:	ed97 7b12 	vldr	d7, [r7, #72]	@ 0x48
 8001c50:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	ed83 7b02 	vstr	d7, [r3, #8]

	//Step 7: Update Covariance
	double P00_temp = Kalman->P[0][0];
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001c64:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	double P01_temp = Kalman->P[0][1];
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c6e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

	Kalman->P[0][0] -= K[0] * P00_temp;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	ed93 6b06 	vldr	d6, [r3, #24]
 8001c78:	ed97 5b08 	vldr	d5, [r7, #32]
 8001c7c:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001c80:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c84:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	ed83 7b06 	vstr	d7, [r3, #24]
	Kalman->P[0][1] -= K[0] * P01_temp;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	ed93 6b08 	vldr	d6, [r3, #32]
 8001c94:	ed97 5b08 	vldr	d5, [r7, #32]
 8001c98:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001c9c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ca0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	ed83 7b08 	vstr	d7, [r3, #32]
	Kalman->P[1][0] -= K[1] * P00_temp;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8001cb0:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001cb4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8001cb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
	Kalman->P[1][1] -= K[1] * P01_temp;
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001ccc:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8001cd0:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001cd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30

	return Kalman->angle;
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cec:	eeb0 0b47 	vmov.f64	d0, d7
 8001cf0:	375c      	adds	r7, #92	@ 0x5c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	4b0a      	ldr	r3, [pc, #40]	@ (8001d2c <HAL_MspInit+0x30>)
 8001d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d08:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <HAL_MspInit+0x30>)
 8001d0a:	f043 0302 	orr.w	r3, r3, #2
 8001d0e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d12:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_MspInit+0x30>)
 8001d14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	58024400 	.word	0x58024400

08001d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0be      	sub	sp, #248	@ 0xf8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d48:	f107 0320 	add.w	r3, r7, #32
 8001d4c:	22c0      	movs	r2, #192	@ 0xc0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 f9c6 	bl	80090e2 <memset>
  if(hspi->Instance==SPI1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a71      	ldr	r2, [pc, #452]	@ (8001f20 <HAL_SPI_MspInit+0x1f0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d16a      	bne.n	8001e36 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 ff34 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001d82:	f7ff fcf5 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d86:	4b67      	ldr	r3, [pc, #412]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d8c:	4a65      	ldr	r2, [pc, #404]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001d8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001d96:	4b63      	ldr	r3, [pc, #396]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001daa:	4a5e      	ldr	r2, [pc, #376]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001db4:	4b5b      	ldr	r3, [pc, #364]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b58      	ldr	r3, [pc, #352]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc8:	4a56      	ldr	r2, [pc, #344]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd2:	4b54      	ldr	r3, [pc, #336]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e02:	4619      	mov	r1, r3
 8001e04:	4848      	ldr	r0, [pc, #288]	@ (8001f28 <HAL_SPI_MspInit+0x1f8>)
 8001e06:	f000 fd03 	bl	8002810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001e0a:	2318      	movs	r3, #24
 8001e0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	483f      	ldr	r0, [pc, #252]	@ (8001f2c <HAL_SPI_MspInit+0x1fc>)
 8001e30:	f000 fcee 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e34:	e070      	b.n	8001f18 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f30 <HAL_SPI_MspInit+0x200>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d16b      	bne.n	8001f18 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001e40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e52:	f107 0320 	add.w	r3, r7, #32
 8001e56:	4618      	mov	r0, r3
 8001e58:	f001 fec4 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 8001e62:	f7ff fc85 	bl	8001770 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e66:	4b2f      	ldr	r3, [pc, #188]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e76:	4b2b      	ldr	r3, [pc, #172]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8a:	4a26      	ldr	r2, [pc, #152]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e94:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f24 <HAL_SPI_MspInit+0x1f4>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001ec0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ec4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eda:	2305      	movs	r3, #5
 8001edc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4811      	ldr	r0, [pc, #68]	@ (8001f2c <HAL_SPI_MspInit+0x1fc>)
 8001ee8:	f000 fc92 	bl	8002810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f06:	2305      	movs	r3, #5
 8001f08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <HAL_SPI_MspInit+0x1f8>)
 8001f14:	f000 fc7c 	bl	8002810 <HAL_GPIO_Init>
}
 8001f18:	bf00      	nop
 8001f1a:	37f8      	adds	r7, #248	@ 0xf8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40013000 	.word	0x40013000
 8001f24:	58024400 	.word	0x58024400
 8001f28:	58020000 	.word	0x58020000
 8001f2c:	58020400 	.word	0x58020400
 8001f30:	40003800 	.word	0x40003800

08001f34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d116      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_TIM_Base_MspInit+0x48>)
 8001f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <HAL_TIM_Base_MspInit+0x48>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_TIM_Base_MspInit+0x48>)
 8001f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	201c      	movs	r0, #28
 8001f6a:	f000 fba4 	bl	80026b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f6e:	201c      	movs	r0, #28
 8001f70:	f000 fbbb 	bl	80026ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	58024400 	.word	0x58024400

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b0ba      	sub	sp, #232	@ 0xe8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	22c0      	movs	r2, #192	@ 0xc0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f007 f89e 	bl	80090e2 <memset>
  if(huart->Instance==USART2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a26      	ldr	r2, [pc, #152]	@ (8002044 <HAL_UART_MspInit+0xc4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d145      	bne.n	800203c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fb0:	f04f 0202 	mov.w	r2, #2
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fc2:	f107 0310 	add.w	r3, r7, #16
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fe0c 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001fd2:	f7ff fbcd 	bl	8001770 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8001fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8001fde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8001fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ffa:	4a13      	ldr	r2, [pc, #76]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <HAL_UART_MspInit+0xc8>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002012:	230c      	movs	r3, #12
 8002014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800202a:	2307      	movs	r3, #7
 800202c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002034:	4619      	mov	r1, r3
 8002036:	4805      	ldr	r0, [pc, #20]	@ (800204c <HAL_UART_MspInit+0xcc>)
 8002038:	f000 fbea 	bl	8002810 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800203c:	bf00      	nop
 800203e:	37e8      	adds	r7, #232	@ 0xe8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40004400 	.word	0x40004400
 8002048:	58024400 	.word	0x58024400
 800204c:	58020000 	.word	0x58020000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <NMI_Handler+0x4>

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <MemManage_Handler+0x4>

08002068 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a6:	f000 f9db 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <TIM2_IRQHandler+0x10>)
 80020b6:	f004 fafd 	bl	80066b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	24000408 	.word	0x24000408

080020c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return 1;
 80020c8:	2301      	movs	r3, #1
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_kill>:

int _kill(int pid, int sig)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020de:	f007 f853 	bl	8009188 <__errno>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_exit>:

void _exit (int status)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ffe7 	bl	80020d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002106:	bf00      	nop
 8002108:	e7fd      	b.n	8002106 <_exit+0x12>

0800210a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002116:	2300      	movs	r3, #0
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e00a      	b.n	8002132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800211c:	f3af 8000 	nop.w
 8002120:	4601      	mov	r1, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	60ba      	str	r2, [r7, #8]
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	429a      	cmp	r2, r3
 8002138:	dbf0      	blt.n	800211c <_read+0x12>
  }

  return len;
 800213a:	687b      	ldr	r3, [r7, #4]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800216c:	605a      	str	r2, [r3, #4]
  return 0;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <_isatty>:

int _isatty(int file)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b4:	4a14      	ldr	r2, [pc, #80]	@ (8002208 <_sbrk+0x5c>)
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <_sbrk+0x60>)
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c0:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <_sbrk+0x64>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <_sbrk+0x68>)
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <_sbrk+0x64>)
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021dc:	f006 ffd4 	bl	8009188 <__errno>
 80021e0:	4603      	mov	r3, r0
 80021e2:	220c      	movs	r2, #12
 80021e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ea:	e009      	b.n	8002200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	4a05      	ldr	r2, [pc, #20]	@ (8002210 <_sbrk+0x64>)
 80021fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021fe:	68fb      	ldr	r3, [r7, #12]
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	24080000 	.word	0x24080000
 800220c:	00000400 	.word	0x00000400
 8002210:	24000520 	.word	0x24000520
 8002214:	24000678 	.word	0x24000678

08002218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800221c:	4b37      	ldr	r3, [pc, #220]	@ (80022fc <SystemInit+0xe4>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	4a36      	ldr	r2, [pc, #216]	@ (80022fc <SystemInit+0xe4>)
 8002224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800222c:	4b34      	ldr	r3, [pc, #208]	@ (8002300 <SystemInit+0xe8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	2b06      	cmp	r3, #6
 8002236:	d807      	bhi.n	8002248 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002238:	4b31      	ldr	r3, [pc, #196]	@ (8002300 <SystemInit+0xe8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 030f 	bic.w	r3, r3, #15
 8002240:	4a2f      	ldr	r2, [pc, #188]	@ (8002300 <SystemInit+0xe8>)
 8002242:	f043 0307 	orr.w	r3, r3, #7
 8002246:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002248:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <SystemInit+0xec>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2d      	ldr	r2, [pc, #180]	@ (8002304 <SystemInit+0xec>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002254:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <SystemInit+0xec>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800225a:	4b2a      	ldr	r3, [pc, #168]	@ (8002304 <SystemInit+0xec>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	4929      	ldr	r1, [pc, #164]	@ (8002304 <SystemInit+0xec>)
 8002260:	4b29      	ldr	r3, [pc, #164]	@ (8002308 <SystemInit+0xf0>)
 8002262:	4013      	ands	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002266:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <SystemInit+0xe8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <SystemInit+0xe8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 030f 	bic.w	r3, r3, #15
 800227a:	4a21      	ldr	r2, [pc, #132]	@ (8002300 <SystemInit+0xe8>)
 800227c:	f043 0307 	orr.w	r3, r3, #7
 8002280:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002282:	4b20      	ldr	r3, [pc, #128]	@ (8002304 <SystemInit+0xec>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002288:	4b1e      	ldr	r3, [pc, #120]	@ (8002304 <SystemInit+0xec>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <SystemInit+0xec>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002294:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <SystemInit+0xec>)
 8002296:	4a1d      	ldr	r2, [pc, #116]	@ (800230c <SystemInit+0xf4>)
 8002298:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800229a:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <SystemInit+0xec>)
 800229c:	4a1c      	ldr	r2, [pc, #112]	@ (8002310 <SystemInit+0xf8>)
 800229e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <SystemInit+0xec>)
 80022a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002314 <SystemInit+0xfc>)
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <SystemInit+0xec>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <SystemInit+0xec>)
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <SystemInit+0xfc>)
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022b2:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <SystemInit+0xec>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022b8:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <SystemInit+0xec>)
 80022ba:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <SystemInit+0xfc>)
 80022bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022be:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <SystemInit+0xec>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <SystemInit+0xec>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002304 <SystemInit+0xec>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <SystemInit+0xec>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <SystemInit+0x100>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <SystemInit+0x104>)
 80022dc:	4013      	ands	r3, r2
 80022de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022e2:	d202      	bcs.n	80022ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <SystemInit+0x108>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <SystemInit+0x10c>)
 80022ec:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80022f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	52002000 	.word	0x52002000
 8002304:	58024400 	.word	0x58024400
 8002308:	eaf6ed7f 	.word	0xeaf6ed7f
 800230c:	02020200 	.word	0x02020200
 8002310:	01ff0000 	.word	0x01ff0000
 8002314:	01010280 	.word	0x01010280
 8002318:	5c001000 	.word	0x5c001000
 800231c:	ffff0000 	.word	0xffff0000
 8002320:	51008108 	.word	0x51008108
 8002324:	52004000 	.word	0x52004000

08002328 <Reset_Handler>:
 8002328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002360 <LoopFillZerobss+0xe>
 800232c:	f7ff ff74 	bl	8002218 <SystemInit>
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <LoopFillZerobss+0x12>)
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <LoopFillZerobss+0x16>)
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <LoopFillZerobss+0x1a>)
 8002336:	2300      	movs	r3, #0
 8002338:	e002      	b.n	8002340 <LoopCopyDataInit>

0800233a <CopyDataInit>:
 800233a:	58d4      	ldr	r4, [r2, r3]
 800233c:	50c4      	str	r4, [r0, r3]
 800233e:	3304      	adds	r3, #4

08002340 <LoopCopyDataInit>:
 8002340:	18c4      	adds	r4, r0, r3
 8002342:	428c      	cmp	r4, r1
 8002344:	d3f9      	bcc.n	800233a <CopyDataInit>
 8002346:	4a0a      	ldr	r2, [pc, #40]	@ (8002370 <LoopFillZerobss+0x1e>)
 8002348:	4c0a      	ldr	r4, [pc, #40]	@ (8002374 <LoopFillZerobss+0x22>)
 800234a:	2300      	movs	r3, #0
 800234c:	e001      	b.n	8002352 <LoopFillZerobss>

0800234e <FillZerobss>:
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	3204      	adds	r2, #4

08002352 <LoopFillZerobss>:
 8002352:	42a2      	cmp	r2, r4
 8002354:	d3fb      	bcc.n	800234e <FillZerobss>
 8002356:	f006 ff1d 	bl	8009194 <__libc_init_array>
 800235a:	f7fe fed1 	bl	8001100 <main>
 800235e:	4770      	bx	lr
 8002360:	24080000 	.word	0x24080000
 8002364:	24000000 	.word	0x24000000
 8002368:	24000278 	.word	0x24000278
 800236c:	0800ce48 	.word	0x0800ce48
 8002370:	24000278 	.word	0x24000278
 8002374:	24000674 	.word	0x24000674

08002378 <ADC3_IRQHandler>:
 8002378:	e7fe      	b.n	8002378 <ADC3_IRQHandler>
	...

0800237c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002382:	2003      	movs	r0, #3
 8002384:	f000 f98c 	bl	80026a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002388:	f001 fa56 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <HAL_Init+0x68>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	0a1b      	lsrs	r3, r3, #8
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4913      	ldr	r1, [pc, #76]	@ (80023e8 <HAL_Init+0x6c>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023a6:	4b0f      	ldr	r3, [pc, #60]	@ (80023e4 <HAL_Init+0x68>)
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	4a0e      	ldr	r2, [pc, #56]	@ (80023e8 <HAL_Init+0x6c>)
 80023b0:	5cd3      	ldrb	r3, [r2, r3]
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a0b      	ldr	r2, [pc, #44]	@ (80023ec <HAL_Init+0x70>)
 80023be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c0:	4a0b      	ldr	r2, [pc, #44]	@ (80023f0 <HAL_Init+0x74>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c6:	200f      	movs	r0, #15
 80023c8:	f000 f814 	bl	80023f4 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e002      	b.n	80023dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023d6:	f7ff fc91 	bl	8001cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	58024400 	.word	0x58024400
 80023e8:	0800c990 	.word	0x0800c990
 80023ec:	240000a4 	.word	0x240000a4
 80023f0:	240000a0 	.word	0x240000a0

080023f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_InitTick+0x60>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e021      	b.n	800244c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_InitTick+0x64>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_InitTick+0x60>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002416:	fbb3 f3f1 	udiv	r3, r3, r1
 800241a:	fbb2 f3f3 	udiv	r3, r2, r3
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f971 	bl	8002706 <HAL_SYSTICK_Config>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e00e      	b.n	800244c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d80a      	bhi.n	800244a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002434:	2200      	movs	r2, #0
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	f04f 30ff 	mov.w	r0, #4294967295
 800243c:	f000 f93b 	bl	80026b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002440:	4a06      	ldr	r2, [pc, #24]	@ (800245c <HAL_InitTick+0x68>)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	e000      	b.n	800244c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	240000ac 	.word	0x240000ac
 8002458:	240000a0 	.word	0x240000a0
 800245c:	240000a8 	.word	0x240000a8

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	@ (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	240000ac 	.word	0x240000ac
 8002484:	24000524 	.word	0x24000524

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	24000524 	.word	0x24000524

080024a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff ffee 	bl	8002488 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b8:	d005      	beq.n	80024c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_Delay+0x44>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c6:	bf00      	nop
 80024c8:	f7ff ffde 	bl	8002488 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d8f7      	bhi.n	80024c8 <HAL_Delay+0x28>
  {
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	240000ac 	.word	0x240000ac

080024e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_GetREVID+0x14>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	0c1b      	lsrs	r3, r3, #16
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	5c001000 	.word	0x5c001000

08002500 <__NVIC_SetPriorityGrouping>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <__NVIC_SetPriorityGrouping+0x40>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 800252a:	4313      	orrs	r3, r2
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	@ (8002540 <__NVIC_SetPriorityGrouping+0x40>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00
 8002544:	05fa0000 	.word	0x05fa0000

08002548 <__NVIC_GetPriorityGrouping>:
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4907      	ldr	r1, [pc, #28]	@ (800259c <__NVIC_EnableIRQ+0x38>)
 800257e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	e000e100 	.word	0xe000e100

080025a0 <__NVIC_SetPriority>:
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	db0a      	blt.n	80025ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	490c      	ldr	r1, [pc, #48]	@ (80025ec <__NVIC_SetPriority+0x4c>)
 80025ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025be:	0112      	lsls	r2, r2, #4
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	440b      	add	r3, r1
 80025c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80025c8:	e00a      	b.n	80025e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4908      	ldr	r1, [pc, #32]	@ (80025f0 <__NVIC_SetPriority+0x50>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	3b04      	subs	r3, #4
 80025d8:	0112      	lsls	r2, r2, #4
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	440b      	add	r3, r1
 80025de:	761a      	strb	r2, [r3, #24]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <NVIC_EncodePriority>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2b04      	cmp	r3, #4
 8002610:	bf28      	it	cs
 8002612:	2304      	movcs	r3, #4
 8002614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3304      	adds	r3, #4
 800261a:	2b06      	cmp	r3, #6
 800261c:	d902      	bls.n	8002624 <NVIC_EncodePriority+0x30>
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3b03      	subs	r3, #3
 8002622:	e000      	b.n	8002626 <NVIC_EncodePriority+0x32>
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002628:	f04f 32ff 	mov.w	r2, #4294967295
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	401a      	ands	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800263c:	f04f 31ff 	mov.w	r1, #4294967295
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	43d9      	mvns	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800264c:	4313      	orrs	r3, r2
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <SysTick_Config>:
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800266c:	d301      	bcc.n	8002672 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800266e:	2301      	movs	r3, #1
 8002670:	e00f      	b.n	8002692 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002672:	4a0a      	ldr	r2, [pc, #40]	@ (800269c <SysTick_Config+0x40>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3b01      	subs	r3, #1
 8002678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267a:	210f      	movs	r1, #15
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f7ff ff8e 	bl	80025a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <SysTick_Config+0x40>)
 8002686:	2200      	movs	r2, #0
 8002688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268a:	4b04      	ldr	r3, [pc, #16]	@ (800269c <SysTick_Config+0x40>)
 800268c:	2207      	movs	r2, #7
 800268e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	e000e010 	.word	0xe000e010

080026a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff29 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026ae:	bf00      	nop
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff40 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff90 	bl	80025f4 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5f 	bl	80025a0 <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff33 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa4 	bl	800265c <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002724:	f3bf 8f5f 	dmb	sy
}
 8002728:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800272a:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <HAL_MPU_Disable+0x28>)
 800272c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800272e:	4a06      	ldr	r2, [pc, #24]	@ (8002748 <HAL_MPU_Disable+0x28>)
 8002730:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002734:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_MPU_Disable+0x2c>)
 8002738:	2200      	movs	r2, #0
 800273a:	605a      	str	r2, [r3, #4]
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000ed00 	.word	0xe000ed00
 800274c:	e000ed90 	.word	0xe000ed90

08002750 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002758:	4a0b      	ldr	r2, [pc, #44]	@ (8002788 <HAL_MPU_Enable+0x38>)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_MPU_Enable+0x3c>)
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	4a09      	ldr	r2, [pc, #36]	@ (800278c <HAL_MPU_Enable+0x3c>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800276e:	f3bf 8f4f 	dsb	sy
}
 8002772:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002774:	f3bf 8f6f 	isb	sy
}
 8002778:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed90 	.word	0xe000ed90
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	785a      	ldrb	r2, [r3, #1]
 800279c:	4b1b      	ldr	r3, [pc, #108]	@ (800280c <HAL_MPU_ConfigRegion+0x7c>)
 800279e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80027a0:	4b1a      	ldr	r3, [pc, #104]	@ (800280c <HAL_MPU_ConfigRegion+0x7c>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4a19      	ldr	r2, [pc, #100]	@ (800280c <HAL_MPU_ConfigRegion+0x7c>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80027ac:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_MPU_ConfigRegion+0x7c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7b1b      	ldrb	r3, [r3, #12]
 80027b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	7adb      	ldrb	r3, [r3, #11]
 80027be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	7a9b      	ldrb	r3, [r3, #10]
 80027c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80027c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7b5b      	ldrb	r3, [r3, #13]
 80027ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80027d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7b9b      	ldrb	r3, [r3, #14]
 80027d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80027d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	7bdb      	ldrb	r3, [r3, #15]
 80027de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80027e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7a5b      	ldrb	r3, [r3, #9]
 80027e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80027e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	7a1b      	ldrb	r3, [r3, #8]
 80027ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80027f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	7812      	ldrb	r2, [r2, #0]
 80027f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027f8:	4a04      	ldr	r2, [pc, #16]	@ (800280c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80027fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80027fc:	6113      	str	r3, [r2, #16]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000ed90 	.word	0xe000ed90

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800281e:	4b89      	ldr	r3, [pc, #548]	@ (8002a44 <HAL_GPIO_Init+0x234>)
 8002820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002822:	e194      	b.n	8002b4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8186 	beq.w	8002b48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d005      	beq.n	8002854 <HAL_GPIO_Init+0x44>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d130      	bne.n	80028b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288a:	2201      	movs	r2, #1
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0201 	and.w	r2, r3, #1
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d017      	beq.n	80028f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d123      	bne.n	8002946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80e0 	beq.w	8002b48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 800298a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800298e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 800299a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_GPIO_Init+0x23c>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a20      	ldr	r2, [pc, #128]	@ (8002a50 <HAL_GPIO_Init+0x240>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d052      	beq.n	8002a78 <HAL_GPIO_Init+0x268>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <HAL_GPIO_Init+0x244>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_GPIO_Init+0x22e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_GPIO_Init+0x248>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_GPIO_Init+0x22a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_GPIO_Init+0x24c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d025      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_GPIO_Init+0x250>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01f      	beq.n	8002a32 <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_GPIO_Init+0x254>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_GPIO_Init+0x258>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <HAL_GPIO_Init+0x25c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <HAL_GPIO_Init+0x260>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <HAL_GPIO_Init+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x20e>
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	e02d      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a1e:	230a      	movs	r3, #10
 8002a20:	e02b      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a22:	2308      	movs	r3, #8
 8002a24:	e029      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e027      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e025      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e023      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e021      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e01f      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e01d      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01b      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a42:	bf00      	nop
 8002a44:	58000080 	.word	0x58000080
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58000400 	.word	0x58000400
 8002a50:	58020000 	.word	0x58020000
 8002a54:	58020400 	.word	0x58020400
 8002a58:	58020800 	.word	0x58020800
 8002a5c:	58020c00 	.word	0x58020c00
 8002a60:	58021000 	.word	0x58021000
 8002a64:	58021400 	.word	0x58021400
 8002a68:	58021800 	.word	0x58021800
 8002a6c:	58021c00 	.word	0x58021c00
 8002a70:	58022000 	.word	0x58022000
 8002a74:	58022400 	.word	0x58022400
 8002a78:	2300      	movs	r3, #0
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8a:	4938      	ldr	r1, [pc, #224]	@ (8002b6c <HAL_GPIO_Init+0x35c>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f ae63 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	3724      	adds	r7, #36	@ 0x24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	58000400 	.word	0x58000400

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_PWREx_ConfigSupply+0x70>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d00a      	beq.n	8002bce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002bb8:	4b16      	ldr	r3, [pc, #88]	@ (8002c14 <HAL_PWREx_ConfigSupply+0x70>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e01f      	b.n	8002c0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e01d      	b.n	8002c0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_PWREx_ConfigSupply+0x70>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	490f      	ldr	r1, [pc, #60]	@ (8002c14 <HAL_PWREx_ConfigSupply+0x70>)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002bde:	f7ff fc53 	bl	8002488 <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002be4:	e009      	b.n	8002bfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002be6:	f7ff fc4f 	bl	8002488 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bf4:	d901      	bls.n	8002bfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bfa:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_PWREx_ConfigSupply+0x70>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c06:	d1ee      	bne.n	8002be6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	58024800 	.word	0x58024800

08002c18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08c      	sub	sp, #48	@ 0x30
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f000 bc48 	b.w	80034bc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8088 	beq.w	8002d4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c3a:	4b99      	ldr	r3, [pc, #612]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c44:	4b96      	ldr	r3, [pc, #600]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d007      	beq.n	8002c60 <HAL_RCC_OscConfig+0x48>
 8002c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c52:	2b18      	cmp	r3, #24
 8002c54:	d111      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62>
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	4b8f      	ldr	r3, [pc, #572]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d06d      	beq.n	8002d48 <HAL_RCC_OscConfig+0x130>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d169      	bne.n	8002d48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f000 bc21 	b.w	80034bc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c82:	d106      	bne.n	8002c92 <HAL_RCC_OscConfig+0x7a>
 8002c84:	4b86      	ldr	r3, [pc, #536]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a85      	ldr	r2, [pc, #532]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	e02e      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10c      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x9c>
 8002c9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a80      	ldr	r2, [pc, #512]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002ca0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca4:	6013      	str	r3, [r2, #0]
 8002ca6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xc0>
 8002cbe:	4b78      	ldr	r3, [pc, #480]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a77      	ldr	r2, [pc, #476]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b75      	ldr	r3, [pc, #468]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a74      	ldr	r2, [pc, #464]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xd8>
 8002cd8:	4b71      	ldr	r3, [pc, #452]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a70      	ldr	r2, [pc, #448]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6d      	ldr	r2, [pc, #436]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fbc6 	bl	8002488 <HAL_GetTick>
 8002cfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d00:	f7ff fbc2 	bl	8002488 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	@ 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e3d4      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d12:	4b63      	ldr	r3, [pc, #396]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe8>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fbb2 	bl	8002488 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d28:	f7ff fbae 	bl	8002488 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	@ 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e3c0      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3a:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x110>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 80ca 	beq.w	8002eec <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d58:	4b51      	ldr	r3, [pc, #324]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d62:	4b4f      	ldr	r3, [pc, #316]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d007      	beq.n	8002d7e <HAL_RCC_OscConfig+0x166>
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	2b18      	cmp	r3, #24
 8002d72:	d156      	bne.n	8002e22 <HAL_RCC_OscConfig+0x20a>
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d151      	bne.n	8002e22 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d7e:	4b48      	ldr	r3, [pc, #288]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x17e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e392      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d96:	4b42      	ldr	r3, [pc, #264]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 0219 	bic.w	r2, r3, #25
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	493f      	ldr	r1, [pc, #252]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7ff fb6e 	bl	8002488 <HAL_GetTick>
 8002dac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7ff fb6a 	bl	8002488 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e37c      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dc2:	4b37      	ldr	r3, [pc, #220]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dce:	f7ff fb8b 	bl	80024e8 <HAL_GetREVID>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d817      	bhi.n	8002e0c <HAL_RCC_OscConfig+0x1f4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	d108      	bne.n	8002df6 <HAL_RCC_OscConfig+0x1de>
 8002de4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002dec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002dee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df4:	e07a      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	031b      	lsls	r3, r3, #12
 8002e04:	4926      	ldr	r1, [pc, #152]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e0a:	e06f      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e0c:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	061b      	lsls	r3, r3, #24
 8002e1a:	4921      	ldr	r1, [pc, #132]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e20:	e064      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d047      	beq.n	8002eba <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0219 	bic.w	r2, r3, #25
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	491a      	ldr	r1, [pc, #104]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fb24 	bl	8002488 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e44:	f7ff fb20 	bl	8002488 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e332      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e62:	f7ff fb41 	bl	80024e8 <HAL_GetREVID>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d819      	bhi.n	8002ea4 <HAL_RCC_OscConfig+0x28c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d108      	bne.n	8002e8a <HAL_RCC_OscConfig+0x272>
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e80:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e86:	6053      	str	r3, [r2, #4]
 8002e88:	e030      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	031b      	lsls	r3, r3, #12
 8002e98:	4901      	ldr	r1, [pc, #4]	@ (8002ea0 <HAL_RCC_OscConfig+0x288>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e025      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
 8002ea0:	58024400 	.word	0x58024400
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4997      	ldr	r1, [pc, #604]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
 8002eb8:	e018      	b.n	8002eec <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b95      	ldr	r3, [pc, #596]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a94      	ldr	r2, [pc, #592]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec6:	f7ff fadf 	bl	8002488 <HAL_GetTick>
 8002eca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ece:	f7ff fadb 	bl	8002488 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e2ed      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002ee0:	4b8b      	ldr	r3, [pc, #556]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1f0      	bne.n	8002ece <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80a9 	beq.w	800304c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002efa:	4b85      	ldr	r3, [pc, #532]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f04:	4b82      	ldr	r3, [pc, #520]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d007      	beq.n	8002f20 <HAL_RCC_OscConfig+0x308>
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	2b18      	cmp	r3, #24
 8002f14:	d13a      	bne.n	8002f8c <HAL_RCC_OscConfig+0x374>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d135      	bne.n	8002f8c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f20:	4b7b      	ldr	r3, [pc, #492]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_OscConfig+0x320>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b80      	cmp	r3, #128	@ 0x80
 8002f32:	d001      	beq.n	8002f38 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e2c1      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f38:	f7ff fad6 	bl	80024e8 <HAL_GetREVID>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d817      	bhi.n	8002f76 <HAL_RCC_OscConfig+0x35e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	d108      	bne.n	8002f60 <HAL_RCC_OscConfig+0x348>
 8002f4e:	4b70      	ldr	r3, [pc, #448]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f56:	4a6e      	ldr	r2, [pc, #440]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f5c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f5e:	e075      	b.n	800304c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f60:	4b6b      	ldr	r3, [pc, #428]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	069b      	lsls	r3, r3, #26
 8002f6e:	4968      	ldr	r1, [pc, #416]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f74:	e06a      	b.n	800304c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f76:	4b66      	ldr	r3, [pc, #408]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	061b      	lsls	r3, r3, #24
 8002f84:	4962      	ldr	r1, [pc, #392]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f8a:	e05f      	b.n	800304c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d042      	beq.n	800301a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f94:	4b5e      	ldr	r3, [pc, #376]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a5d      	ldr	r2, [pc, #372]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7ff fa72 	bl	8002488 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fa8:	f7ff fa6e 	bl	8002488 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e280      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fba:	4b55      	ldr	r3, [pc, #340]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002fc6:	f7ff fa8f 	bl	80024e8 <HAL_GetREVID>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d817      	bhi.n	8003004 <HAL_RCC_OscConfig+0x3ec>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d108      	bne.n	8002fee <HAL_RCC_OscConfig+0x3d6>
 8002fdc:	4b4c      	ldr	r3, [pc, #304]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002fe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fea:	6053      	str	r3, [r2, #4]
 8002fec:	e02e      	b.n	800304c <HAL_RCC_OscConfig+0x434>
 8002fee:	4b48      	ldr	r3, [pc, #288]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	069b      	lsls	r3, r3, #26
 8002ffc:	4944      	ldr	r1, [pc, #272]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
 8003002:	e023      	b.n	800304c <HAL_RCC_OscConfig+0x434>
 8003004:	4b42      	ldr	r3, [pc, #264]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	061b      	lsls	r3, r3, #24
 8003012:	493f      	ldr	r1, [pc, #252]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	60cb      	str	r3, [r1, #12]
 8003018:	e018      	b.n	800304c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3c      	ldr	r2, [pc, #240]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003020:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003026:	f7ff fa2f 	bl	8002488 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800302e:	f7ff fa2b 	bl	8002488 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e23d      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003040:	4b33      	ldr	r3, [pc, #204]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d036      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d019      	beq.n	8003094 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003060:	4b2b      	ldr	r3, [pc, #172]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003064:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7ff fa0c 	bl	8002488 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7ff fa08 	bl	8002488 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e21a      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003086:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0x45c>
 8003092:	e018      	b.n	80030c6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003094:	4b1e      	ldr	r3, [pc, #120]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003098:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a0:	f7ff f9f2 	bl	8002488 <HAL_GetTick>
 80030a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a8:	f7ff f9ee 	bl	8002488 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e200      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030ba:	4b15      	ldr	r3, [pc, #84]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 80030bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0320 	and.w	r3, r3, #32
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d039      	beq.n	8003146 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01c      	beq.n	8003114 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a0c      	ldr	r2, [pc, #48]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030e6:	f7ff f9cf 	bl	8002488 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ee:	f7ff f9cb 	bl	8002488 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e1dd      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003100:	4b03      	ldr	r3, [pc, #12]	@ (8003110 <HAL_RCC_OscConfig+0x4f8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x4d6>
 800310c:	e01b      	b.n	8003146 <HAL_RCC_OscConfig+0x52e>
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003114:	4b9b      	ldr	r3, [pc, #620]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a9a      	ldr	r2, [pc, #616]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800311a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800311e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003120:	f7ff f9b2 	bl	8002488 <HAL_GetTick>
 8003124:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003128:	f7ff f9ae 	bl	8002488 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1c0      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800313a:	4b92      	ldr	r3, [pc, #584]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8081 	beq.w	8003256 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003154:	4b8c      	ldr	r3, [pc, #560]	@ (8003388 <HAL_RCC_OscConfig+0x770>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a8b      	ldr	r2, [pc, #556]	@ (8003388 <HAL_RCC_OscConfig+0x770>)
 800315a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800315e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003160:	f7ff f992 	bl	8002488 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003168:	f7ff f98e 	bl	8002488 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e1a0      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800317a:	4b83      	ldr	r3, [pc, #524]	@ (8003388 <HAL_RCC_OscConfig+0x770>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d106      	bne.n	800319c <HAL_RCC_OscConfig+0x584>
 800318e:	4b7d      	ldr	r3, [pc, #500]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003192:	4a7c      	ldr	r2, [pc, #496]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6713      	str	r3, [r2, #112]	@ 0x70
 800319a:	e02d      	b.n	80031f8 <HAL_RCC_OscConfig+0x5e0>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10c      	bne.n	80031be <HAL_RCC_OscConfig+0x5a6>
 80031a4:	4b77      	ldr	r3, [pc, #476]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a8:	4a76      	ldr	r2, [pc, #472]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b0:	4b74      	ldr	r3, [pc, #464]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b4:	4a73      	ldr	r2, [pc, #460]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031b6:	f023 0304 	bic.w	r3, r3, #4
 80031ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80031bc:	e01c      	b.n	80031f8 <HAL_RCC_OscConfig+0x5e0>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x5c8>
 80031c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031de:	e00b      	b.n	80031f8 <HAL_RCC_OscConfig+0x5e0>
 80031e0:	4b68      	ldr	r3, [pc, #416]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e4:	4a67      	ldr	r2, [pc, #412]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031e6:	f023 0301 	bic.w	r3, r3, #1
 80031ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ec:	4b65      	ldr	r3, [pc, #404]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f0:	4a64      	ldr	r2, [pc, #400]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80031f2:	f023 0304 	bic.w	r3, r3, #4
 80031f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d015      	beq.n	800322c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7ff f942 	bl	8002488 <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003206:	e00a      	b.n	800321e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003208:	f7ff f93e 	bl	8002488 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e14e      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800321e:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0ee      	beq.n	8003208 <HAL_RCC_OscConfig+0x5f0>
 800322a:	e014      	b.n	8003256 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7ff f92c 	bl	8002488 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7ff f928 	bl	8002488 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e138      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800324a:	4b4e      	ldr	r3, [pc, #312]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1ee      	bne.n	8003234 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 812d 	beq.w	80034ba <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003260:	4b48      	ldr	r3, [pc, #288]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003268:	2b18      	cmp	r3, #24
 800326a:	f000 80bd 	beq.w	80033e8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	2b02      	cmp	r3, #2
 8003274:	f040 809e 	bne.w	80033b4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003278:	4b42      	ldr	r3, [pc, #264]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a41      	ldr	r2, [pc, #260]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800327e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7ff f900 	bl	8002488 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7ff f8fc 	bl	8002488 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e10e      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800329e:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032aa:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80032ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032ae:	4b37      	ldr	r3, [pc, #220]	@ (800338c <HAL_RCC_OscConfig+0x774>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	430a      	orrs	r2, r1
 80032be:	4931      	ldr	r1, [pc, #196]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c8:	3b01      	subs	r3, #1
 80032ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d2:	3b01      	subs	r3, #1
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032de:	3b01      	subs	r3, #1
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ec:	3b01      	subs	r3, #1
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80032f4:	4923      	ldr	r1, [pc, #140]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032fa:	4b22      	ldr	r3, [pc, #136]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fe:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003306:	4b1f      	ldr	r3, [pc, #124]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003308:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800330a:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_RCC_OscConfig+0x778>)
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003312:	00d2      	lsls	r2, r2, #3
 8003314:	491b      	ldr	r1, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003316:	4313      	orrs	r3, r2
 8003318:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800331a:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	f023 020c 	bic.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	4917      	ldr	r1, [pc, #92]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800332c:	4b15      	ldr	r3, [pc, #84]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800332e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003330:	f023 0202 	bic.w	r2, r3, #2
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003338:	4912      	ldr	r1, [pc, #72]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800333e:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800334a:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	4a0d      	ldr	r2, [pc, #52]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003354:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003356:	4b0b      	ldr	r3, [pc, #44]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	4a0a      	ldr	r2, [pc, #40]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 800335c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003362:	4b08      	ldr	r3, [pc, #32]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	4a07      	ldr	r2, [pc, #28]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800336e:	4b05      	ldr	r3, [pc, #20]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a04      	ldr	r2, [pc, #16]	@ (8003384 <HAL_RCC_OscConfig+0x76c>)
 8003374:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7ff f885 	bl	8002488 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003380:	e011      	b.n	80033a6 <HAL_RCC_OscConfig+0x78e>
 8003382:	bf00      	nop
 8003384:	58024400 	.word	0x58024400
 8003388:	58024800 	.word	0x58024800
 800338c:	fffffc0c 	.word	0xfffffc0c
 8003390:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7ff f878 	bl	8002488 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e08a      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0x77c>
 80033b2:	e082      	b.n	80034ba <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b4:	4b43      	ldr	r3, [pc, #268]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a42      	ldr	r2, [pc, #264]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7ff f862 	bl	8002488 <HAL_GetTick>
 80033c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7ff f85e 	bl	8002488 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e070      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033da:	4b3a      	ldr	r3, [pc, #232]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x7b0>
 80033e6:	e068      	b.n	80034ba <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033ee:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d031      	beq.n	8003460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d12a      	bne.n	8003460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d122      	bne.n	8003460 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d11a      	bne.n	8003460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003436:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d111      	bne.n	8003460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003448:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800344a:	429a      	cmp	r2, r3
 800344c:	d108      	bne.n	8003460 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0e1b      	lsrs	r3, r3, #24
 8003452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e02b      	b.n	80034bc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003464:	4b17      	ldr	r3, [pc, #92]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	08db      	lsrs	r3, r3, #3
 800346a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800346e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d01f      	beq.n	80034ba <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800347a:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	4a11      	ldr	r2, [pc, #68]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003486:	f7fe ffff 	bl	8002488 <HAL_GetTick>
 800348a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800348c:	bf00      	nop
 800348e:	f7fe fffb 	bl	8002488 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	4293      	cmp	r3, r2
 8003498:	d0f9      	beq.n	800348e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 800349c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349e:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_RCC_OscConfig+0x8b0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034a6:	00d2      	lsls	r2, r2, #3
 80034a8:	4906      	ldr	r1, [pc, #24]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80034ae:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	4a04      	ldr	r2, [pc, #16]	@ (80034c4 <HAL_RCC_OscConfig+0x8ac>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3730      	adds	r7, #48	@ 0x30
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58024400 	.word	0x58024400
 80034c8:	ffff0007 	.word	0xffff0007

080034cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e19c      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b8a      	ldr	r3, [pc, #552]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d910      	bls.n	8003510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b87      	ldr	r3, [pc, #540]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 020f 	bic.w	r2, r3, #15
 80034f6:	4985      	ldr	r1, [pc, #532]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b83      	ldr	r3, [pc, #524]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e184      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	4b7b      	ldr	r3, [pc, #492]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003528:	429a      	cmp	r2, r3
 800352a:	d908      	bls.n	800353e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800352c:	4b78      	ldr	r3, [pc, #480]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	4975      	ldr	r1, [pc, #468]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	2b00      	cmp	r3, #0
 8003548:	d010      	beq.n	800356c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	4b70      	ldr	r3, [pc, #448]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003556:	429a      	cmp	r2, r3
 8003558:	d908      	bls.n	800356c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800355a:	4b6d      	ldr	r3, [pc, #436]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	496a      	ldr	r1, [pc, #424]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003568:	4313      	orrs	r3, r2
 800356a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d010      	beq.n	800359a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	4b64      	ldr	r3, [pc, #400]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003584:	429a      	cmp	r2, r3
 8003586:	d908      	bls.n	800359a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003588:	4b61      	ldr	r3, [pc, #388]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	495e      	ldr	r1, [pc, #376]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003596:	4313      	orrs	r3, r2
 8003598:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d010      	beq.n	80035c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	4b59      	ldr	r3, [pc, #356]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035b6:	4b56      	ldr	r3, [pc, #344]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	4953      	ldr	r1, [pc, #332]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d010      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d908      	bls.n	80035f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f023 020f 	bic.w	r2, r3, #15
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4947      	ldr	r1, [pc, #284]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d055      	beq.n	80036ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4940      	ldr	r1, [pc, #256]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003610:	4313      	orrs	r3, r2
 8003612:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d107      	bne.n	800362c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800361c:	4b3c      	ldr	r3, [pc, #240]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d121      	bne.n	800366c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0f6      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d107      	bne.n	8003644 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003634:	4b36      	ldr	r3, [pc, #216]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d115      	bne.n	800366c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0ea      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800364c:	4b30      	ldr	r3, [pc, #192]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0de      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800365c:	4b2c      	ldr	r3, [pc, #176]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0d6      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800366c:	4b28      	ldr	r3, [pc, #160]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f023 0207 	bic.w	r2, r3, #7
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4925      	ldr	r1, [pc, #148]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367e:	f7fe ff03 	bl	8002488 <HAL_GetTick>
 8003682:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003684:	e00a      	b.n	800369c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003686:	f7fe feff 	bl	8002488 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003694:	4293      	cmp	r3, r2
 8003696:	d901      	bls.n	800369c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e0be      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369c:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d1eb      	bne.n	8003686 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d208      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036ca:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f023 020f 	bic.w	r2, r3, #15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	490e      	ldr	r1, [pc, #56]	@ (8003710 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d214      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b08      	ldr	r3, [pc, #32]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 020f 	bic.w	r2, r3, #15
 80036f2:	4906      	ldr	r1, [pc, #24]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b04      	ldr	r3, [pc, #16]	@ (800370c <HAL_RCC_ClockConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e086      	b.n	800381a <HAL_RCC_ClockConfig+0x34e>
 800370c:	52002000 	.word	0x52002000
 8003710:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800372c:	429a      	cmp	r2, r3
 800372e:	d208      	bcs.n	8003742 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003730:	4b3c      	ldr	r3, [pc, #240]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	4939      	ldr	r1, [pc, #228]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 800373e:	4313      	orrs	r3, r2
 8003740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	4b34      	ldr	r3, [pc, #208]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800375a:	429a      	cmp	r2, r3
 800375c:	d208      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800375e:	4b31      	ldr	r3, [pc, #196]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	492e      	ldr	r1, [pc, #184]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 800376c:	4313      	orrs	r3, r2
 800376e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	4b28      	ldr	r3, [pc, #160]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003788:	429a      	cmp	r2, r3
 800378a:	d208      	bcs.n	800379e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800378c:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	4922      	ldr	r1, [pc, #136]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 800379a:	4313      	orrs	r3, r2
 800379c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d010      	beq.n	80037cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d208      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4917      	ldr	r1, [pc, #92]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037cc:	f000 f834 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037d0:	4602      	mov	r2, r0
 80037d2:	4b14      	ldr	r3, [pc, #80]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	4912      	ldr	r1, [pc, #72]	@ (8003828 <HAL_RCC_ClockConfig+0x35c>)
 80037de:	5ccb      	ldrb	r3, [r1, r3]
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003824 <HAL_RCC_ClockConfig+0x358>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003828 <HAL_RCC_ClockConfig+0x35c>)
 80037f4:	5cd3      	ldrb	r3, [r2, r3]
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003800:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <HAL_RCC_ClockConfig+0x360>)
 8003802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_RCC_ClockConfig+0x364>)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_RCC_ClockConfig+0x368>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fdf0 	bl	80023f4 <HAL_InitTick>
 8003814:	4603      	mov	r3, r0
 8003816:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
 8003828:	0800c990 	.word	0x0800c990
 800382c:	240000a4 	.word	0x240000a4
 8003830:	240000a0 	.word	0x240000a0
 8003834:	240000a8 	.word	0x240000a8

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	@ 0x24
 800383c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383e:	4bb3      	ldr	r3, [pc, #716]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003846:	2b18      	cmp	r3, #24
 8003848:	f200 8155 	bhi.w	8003af6 <HAL_RCC_GetSysClockFreq+0x2be>
 800384c:	a201      	add	r2, pc, #4	@ (adr r2, 8003854 <HAL_RCC_GetSysClockFreq+0x1c>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	080038b9 	.word	0x080038b9
 8003858:	08003af7 	.word	0x08003af7
 800385c:	08003af7 	.word	0x08003af7
 8003860:	08003af7 	.word	0x08003af7
 8003864:	08003af7 	.word	0x08003af7
 8003868:	08003af7 	.word	0x08003af7
 800386c:	08003af7 	.word	0x08003af7
 8003870:	08003af7 	.word	0x08003af7
 8003874:	080038df 	.word	0x080038df
 8003878:	08003af7 	.word	0x08003af7
 800387c:	08003af7 	.word	0x08003af7
 8003880:	08003af7 	.word	0x08003af7
 8003884:	08003af7 	.word	0x08003af7
 8003888:	08003af7 	.word	0x08003af7
 800388c:	08003af7 	.word	0x08003af7
 8003890:	08003af7 	.word	0x08003af7
 8003894:	080038e5 	.word	0x080038e5
 8003898:	08003af7 	.word	0x08003af7
 800389c:	08003af7 	.word	0x08003af7
 80038a0:	08003af7 	.word	0x08003af7
 80038a4:	08003af7 	.word	0x08003af7
 80038a8:	08003af7 	.word	0x08003af7
 80038ac:	08003af7 	.word	0x08003af7
 80038b0:	08003af7 	.word	0x08003af7
 80038b4:	080038eb 	.word	0x080038eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b8:	4b94      	ldr	r3, [pc, #592]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038c4:	4b91      	ldr	r3, [pc, #580]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	08db      	lsrs	r3, r3, #3
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	4a90      	ldr	r2, [pc, #576]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
 80038d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038d6:	e111      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038d8:	4b8d      	ldr	r3, [pc, #564]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038da:	61bb      	str	r3, [r7, #24]
      break;
 80038dc:	e10e      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038de:	4b8d      	ldr	r3, [pc, #564]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038e0:	61bb      	str	r3, [r7, #24]
      break;
 80038e2:	e10b      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038e6:	61bb      	str	r3, [r7, #24]
      break;
 80038e8:	e108      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038ea:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038f4:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003900:	4b82      	ldr	r3, [pc, #520]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800390a:	4b80      	ldr	r3, [pc, #512]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800390c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390e:	08db      	lsrs	r3, r3, #3
 8003910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80e1 	beq.w	8003af0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2b02      	cmp	r3, #2
 8003932:	f000 8083 	beq.w	8003a3c <HAL_RCC_GetSysClockFreq+0x204>
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b02      	cmp	r3, #2
 800393a:	f200 80a1 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x248>
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCC_GetSysClockFreq+0x114>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d056      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800394a:	e099      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800394c:	4b6f      	ldr	r3, [pc, #444]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02d      	beq.n	80039b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003958:	4b6c      	ldr	r3, [pc, #432]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	4a6b      	ldr	r2, [pc, #428]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
 8003968:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003982:	4b62      	ldr	r3, [pc, #392]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003992:	ed97 6a02 	vldr	s12, [r7, #8]
 8003996:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 800399a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039b2:	e087      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003b20 <HAL_RCC_GetSysClockFreq+0x2e8>
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039f6:	e065      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0a:	4b40      	ldr	r3, [pc, #256]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a1e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a3a:	e043      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a62:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a7e:	e021      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003b24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	4b1e      	ldr	r3, [pc, #120]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003aa6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003b1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ac2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ace:	3301      	adds	r3, #1
 8003ad0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	ee07 3a90 	vmov	s15, r3
 8003ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae8:	ee17 3a90 	vmov	r3, s15
 8003aec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003aee:	e005      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
      break;
 8003af4:	e002      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003af6:	4b07      	ldr	r3, [pc, #28]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003af8:	61bb      	str	r3, [r7, #24]
      break;
 8003afa:	bf00      	nop
  }

  return sysclockfreq;
 8003afc:	69bb      	ldr	r3, [r7, #24]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	@ 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	03d09000 	.word	0x03d09000
 8003b14:	003d0900 	.word	0x003d0900
 8003b18:	017d7840 	.word	0x017d7840
 8003b1c:	46000000 	.word	0x46000000
 8003b20:	4c742400 	.word	0x4c742400
 8003b24:	4a742400 	.word	0x4a742400
 8003b28:	4bbebc20 	.word	0x4bbebc20

08003b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b32:	f7ff fe81 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 8003b36:	4602      	mov	r2, r0
 8003b38:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	490f      	ldr	r1, [pc, #60]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b44:	5ccb      	ldrb	r3, [r1, r3]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b50:	4b0a      	ldr	r3, [pc, #40]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b6a:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	58024400 	.word	0x58024400
 8003b80:	0800c990 	.word	0x0800c990
 8003b84:	240000a4 	.word	0x240000a4
 8003b88:	240000a0 	.word	0x240000a0

08003b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b90:	f7ff ffcc 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003b94:	4602      	mov	r2, r0
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	091b      	lsrs	r3, r3, #4
 8003b9c:	f003 0307 	and.w	r3, r3, #7
 8003ba0:	4904      	ldr	r1, [pc, #16]	@ (8003bb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ba2:	5ccb      	ldrb	r3, [r1, r3]
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	58024400 	.word	0x58024400
 8003bb4:	0800c990 	.word	0x0800c990

08003bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bbc:	f7ff ffb6 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	0a1b      	lsrs	r3, r3, #8
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4904      	ldr	r1, [pc, #16]	@ (8003be0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	0800c990 	.word	0x0800c990

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b0ca      	sub	sp, #296	@ 0x128
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c08:	2500      	movs	r5, #0
 8003c0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003c0e:	d049      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c1a:	d02f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c22:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4bb8      	ldr	r3, [pc, #736]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3e:	4ab7      	ldr	r2, [pc, #732]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c46:	e01a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 fc8f 	bl	8005574 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fd36 	bl	80056d8 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c86:	4ba5      	ldr	r3, [pc, #660]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c8a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c94:	4aa1      	ldr	r2, [pc, #644]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003cb0:	f04f 0900 	mov.w	r9, #0
 8003cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cb8:	d047      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d82a      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d23 	.word	0x08003d23
 8003cdc:	08003d23 	.word	0x08003d23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	4a8d      	ldr	r2, [pc, #564]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e01a      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fc3c 	bl	8005574 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d02:	e00f      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	3328      	adds	r3, #40	@ 0x28
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 fce3 	bl	80056d8 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	f023 0107 	bic.w	r1, r3, #7
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d3a:	4a78      	ldr	r2, [pc, #480]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d56:	f04f 0b00 	mov.w	fp, #0
 8003d5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d5e:	d04c      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6a:	d030      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d70:	d829      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d72:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d74:	d02d      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d78:	d825      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d7a:	2b80      	cmp	r3, #128	@ 0x80
 8003d7c:	d018      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d821      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d86:	2b40      	cmp	r3, #64	@ 0x40
 8003d88:	d007      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d8a:	e01c      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d8c:	4b63      	ldr	r3, [pc, #396]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	4a62      	ldr	r2, [pc, #392]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d98:	e01c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	3308      	adds	r3, #8
 8003da0:	2100      	movs	r1, #0
 8003da2:	4618      	mov	r0, r3
 8003da4:	f001 fbe6 	bl	8005574 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dae:	e011      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	3328      	adds	r3, #40	@ 0x28
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fc8d 	bl	80056d8 <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003dc4:	e006      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dcc:	e002      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dea:	4a4c      	ldr	r2, [pc, #304]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6513      	str	r3, [r2, #80]	@ 0x50
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003df6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e02:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e06:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003e10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003e14:	460b      	mov	r3, r1
 8003e16:	4313      	orrs	r3, r2
 8003e18:	d053      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e26:	d035      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003e28:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e2c:	d82e      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e2e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e32:	d031      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e34:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e38:	d828      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e3e:	d01a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e44:	d822      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4e:	d007      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e50:	e01c      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e52:	4b32      	ldr	r3, [pc, #200]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	4a31      	ldr	r2, [pc, #196]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e5e:	e01c      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e64:	3308      	adds	r3, #8
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 fb83 	bl	8005574 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e74:	e011      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	3328      	adds	r3, #40	@ 0x28
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f001 fc2a 	bl	80056d8 <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e8a:	e006      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e92:	e002      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e94:	bf00      	nop
 8003e96:	e000      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ea6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb4:	430b      	orrs	r3, r1
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eb8:	e003      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ece:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ed8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003edc:	460b      	mov	r3, r1
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	d056      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003eea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eee:	d038      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ef4:	d831      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ef6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003efa:	d034      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003efc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f00:	d82b      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f06:	d01d      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f0c:	d825      	bhi.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d006      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003f12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003f18:	e01f      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f1a:	bf00      	nop
 8003f1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f20:	4ba2      	ldr	r3, [pc, #648]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	4aa1      	ldr	r2, [pc, #644]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	3308      	adds	r3, #8
 8003f34:	2100      	movs	r1, #0
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fb1c 	bl	8005574 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f42:	e011      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	3328      	adds	r3, #40	@ 0x28
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fbc3 	bl	80056d8 <RCCEx_PLL3_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f58:	e006      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f60:	e002      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f70:	4b8e      	ldr	r3, [pc, #568]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f80:	4a8a      	ldr	r2, [pc, #552]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f82:	430b      	orrs	r3, r1
 8003f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f86:	e003      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003fa6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d03a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb6:	2b30      	cmp	r3, #48	@ 0x30
 8003fb8:	d01f      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003fba:	2b30      	cmp	r3, #48	@ 0x30
 8003fbc:	d819      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d00c      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d815      	bhi.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d019      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d111      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fce:	4b77      	ldr	r3, [pc, #476]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	4a76      	ldr	r2, [pc, #472]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fac5 	bl	8005574 <RCCEx_PLL2_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ffa:	bf00      	nop
 8003ffc:	e000      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003ffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004000:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004008:	4b68      	ldr	r3, [pc, #416]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800400a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800400c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	4a65      	ldr	r2, [pc, #404]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004018:	430b      	orrs	r3, r1
 800401a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004032:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800403c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d051      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004050:	d035      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004056:	d82e      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004058:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800405c:	d031      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800405e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004062:	d828      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004068:	d01a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800406a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800406e:	d822      	bhi.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004078:	d007      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800407a:	e01c      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407c:	4b4b      	ldr	r3, [pc, #300]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	4a4a      	ldr	r2, [pc, #296]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004086:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004088:	e01c      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	3308      	adds	r3, #8
 8004090:	2100      	movs	r1, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fa6e 	bl	8005574 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800409e:	e011      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f001 fb15 	bl	80056d8 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040b4:	e006      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80040c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040cc:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040d0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040da:	4a34      	ldr	r2, [pc, #208]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6513      	str	r3, [r2, #80]	@ 0x50
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004100:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d056      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004114:	d033      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004116:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800411a:	d82c      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800411c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004120:	d02f      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004122:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004126:	d826      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004128:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800412c:	d02b      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800412e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004132:	d820      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004138:	d012      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800413a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800413e:	d81a      	bhi.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d115      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800414a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414e:	3308      	adds	r3, #8
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fa0e 	bl	8005574 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800415e:	e015      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	3328      	adds	r3, #40	@ 0x28
 8004166:	2101      	movs	r1, #1
 8004168:	4618      	mov	r0, r3
 800416a:	f001 fab5 	bl	80056d8 <RCCEx_PLL3_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004174:	e00a      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417c:	e006      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800417e:	bf00      	nop
 8004180:	e004      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004182:	bf00      	nop
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004186:	bf00      	nop
 8004188:	e000      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800418a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004198:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800419c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a2:	4a02      	ldr	r2, [pc, #8]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80041c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80041ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d055      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041e4:	d033      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041ea:	d82c      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f0:	d02f      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f6:	d826      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041fc:	d02b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004202:	d820      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004208:	d012      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800420a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800420e:	d81a      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004218:	d115      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	3308      	adds	r3, #8
 8004220:	2101      	movs	r1, #1
 8004222:	4618      	mov	r0, r3
 8004224:	f001 f9a6 	bl	8005574 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800422e:	e015      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	3328      	adds	r3, #40	@ 0x28
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fa4d 	bl	80056d8 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800424e:	bf00      	nop
 8004250:	e004      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004264:	4ba3      	ldr	r3, [pc, #652]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004274:	4a9f      	ldr	r2, [pc, #636]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004276:	430b      	orrs	r3, r1
 8004278:	6593      	str	r3, [r2, #88]	@ 0x58
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004290:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800429a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d037      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042ae:	d00e      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80042b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042b4:	d816      	bhi.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 80042ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042be:	d111      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042c0:	4b8c      	ldr	r3, [pc, #560]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	4a8b      	ldr	r2, [pc, #556]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042cc:	e00f      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d2:	3308      	adds	r3, #8
 80042d4:	2101      	movs	r1, #1
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 f94c 	bl	8005574 <RCCEx_PLL2_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042e2:	e004      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042ea:	e000      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80042ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042f6:	4b7f      	ldr	r3, [pc, #508]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004304:	4a7b      	ldr	r2, [pc, #492]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004306:	430b      	orrs	r3, r1
 8004308:	6513      	str	r3, [r2, #80]	@ 0x50
 800430a:	e003      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004324:	2300      	movs	r3, #0
 8004326:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800432a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d039      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433a:	2b03      	cmp	r3, #3
 800433c:	d81c      	bhi.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800433e:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004344:	08004381 	.word	0x08004381
 8004348:	08004355 	.word	0x08004355
 800434c:	08004363 	.word	0x08004363
 8004350:	08004381 	.word	0x08004381
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004354:	4b67      	ldr	r3, [pc, #412]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	4a66      	ldr	r2, [pc, #408]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800435a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800435e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004360:	e00f      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	3308      	adds	r3, #8
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f001 f902 	bl	8005574 <RCCEx_PLL2_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800438a:	4b5a      	ldr	r3, [pc, #360]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800438c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800438e:	f023 0103 	bic.w	r1, r3, #3
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	4a56      	ldr	r2, [pc, #344]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800439a:	430b      	orrs	r3, r1
 800439c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439e:	e003      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80043b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b8:	2300      	movs	r3, #0
 80043ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80043c2:	460b      	mov	r3, r1
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f000 809f 	beq.w	8004508 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ca:	4b4b      	ldr	r3, [pc, #300]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043d6:	f7fe f857 	bl	8002488 <HAL_GetTick>
 80043da:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043de:	e00b      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e0:	f7fe f852 	bl	8002488 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b64      	cmp	r3, #100	@ 0x64
 80043ee:	d903      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043f6:	e005      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f8:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0ed      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004408:	2b00      	cmp	r3, #0
 800440a:	d179      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800440c:	4b39      	ldr	r3, [pc, #228]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800440e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004414:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004418:	4053      	eors	r3, r2
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d015      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004422:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b31      	ldr	r3, [pc, #196]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a30      	ldr	r2, [pc, #192]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800443a:	4b2e      	ldr	r3, [pc, #184]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a2d      	ldr	r2, [pc, #180]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004446:	4a2b      	ldr	r2, [pc, #172]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004448:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800444c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800444e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004452:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800445a:	d118      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fe f814 	bl	8002488 <HAL_GetTick>
 8004460:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004464:	e00d      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fe f80f 	bl	8002488 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004470:	1ad2      	subs	r2, r2, r3
 8004472:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004476:	429a      	cmp	r2, r3
 8004478:	d903      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004480:	e005      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004482:	4b1c      	ldr	r3, [pc, #112]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0eb      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d129      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800449e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044a6:	d10e      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80044b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044b8:	091a      	lsrs	r2, r3, #4
 80044ba:	4b10      	ldr	r3, [pc, #64]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80044bc:	4013      	ands	r3, r2
 80044be:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6113      	str	r3, [r2, #16]
 80044c4:	e005      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	4a0a      	ldr	r2, [pc, #40]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80044d0:	6113      	str	r3, [r2, #16]
 80044d2:	4b08      	ldr	r3, [pc, #32]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044d4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e2:	4a04      	ldr	r2, [pc, #16]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e8:	e00e      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80044f2:	e009      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044f4:	58024400 	.word	0x58024400
 80044f8:	58024800 	.word	0x58024800
 80044fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004504:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f002 0301 	and.w	r3, r2, #1
 8004514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004518:	2300      	movs	r3, #0
 800451a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800451e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004522:	460b      	mov	r3, r1
 8004524:	4313      	orrs	r3, r2
 8004526:	f000 8089 	beq.w	800463c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004530:	2b28      	cmp	r3, #40	@ 0x28
 8004532:	d86b      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004534:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	08004615 	.word	0x08004615
 8004540:	0800460d 	.word	0x0800460d
 8004544:	0800460d 	.word	0x0800460d
 8004548:	0800460d 	.word	0x0800460d
 800454c:	0800460d 	.word	0x0800460d
 8004550:	0800460d 	.word	0x0800460d
 8004554:	0800460d 	.word	0x0800460d
 8004558:	0800460d 	.word	0x0800460d
 800455c:	080045e1 	.word	0x080045e1
 8004560:	0800460d 	.word	0x0800460d
 8004564:	0800460d 	.word	0x0800460d
 8004568:	0800460d 	.word	0x0800460d
 800456c:	0800460d 	.word	0x0800460d
 8004570:	0800460d 	.word	0x0800460d
 8004574:	0800460d 	.word	0x0800460d
 8004578:	0800460d 	.word	0x0800460d
 800457c:	080045f7 	.word	0x080045f7
 8004580:	0800460d 	.word	0x0800460d
 8004584:	0800460d 	.word	0x0800460d
 8004588:	0800460d 	.word	0x0800460d
 800458c:	0800460d 	.word	0x0800460d
 8004590:	0800460d 	.word	0x0800460d
 8004594:	0800460d 	.word	0x0800460d
 8004598:	0800460d 	.word	0x0800460d
 800459c:	08004615 	.word	0x08004615
 80045a0:	0800460d 	.word	0x0800460d
 80045a4:	0800460d 	.word	0x0800460d
 80045a8:	0800460d 	.word	0x0800460d
 80045ac:	0800460d 	.word	0x0800460d
 80045b0:	0800460d 	.word	0x0800460d
 80045b4:	0800460d 	.word	0x0800460d
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	08004615 	.word	0x08004615
 80045c0:	0800460d 	.word	0x0800460d
 80045c4:	0800460d 	.word	0x0800460d
 80045c8:	0800460d 	.word	0x0800460d
 80045cc:	0800460d 	.word	0x0800460d
 80045d0:	0800460d 	.word	0x0800460d
 80045d4:	0800460d 	.word	0x0800460d
 80045d8:	0800460d 	.word	0x0800460d
 80045dc:	08004615 	.word	0x08004615
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	3308      	adds	r3, #8
 80045e6:	2101      	movs	r1, #1
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ffc3 	bl	8005574 <RCCEx_PLL2_Config>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045f4:	e00f      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	3328      	adds	r3, #40	@ 0x28
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f86a 	bl	80056d8 <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800460a:	e004      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800461e:	4bbf      	ldr	r3, [pc, #764]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004622:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800462c:	4abb      	ldr	r2, [pc, #748]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800462e:	430b      	orrs	r3, r1
 8004630:	6553      	str	r3, [r2, #84]	@ 0x54
 8004632:	e003      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 0302 	and.w	r3, r2, #2
 8004648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800464c:	2300      	movs	r3, #0
 800464e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004652:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004656:	460b      	mov	r3, r1
 8004658:	4313      	orrs	r3, r2
 800465a:	d041      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800465c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004662:	2b05      	cmp	r3, #5
 8004664:	d824      	bhi.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004666:	a201      	add	r2, pc, #4	@ (adr r2, 800466c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	080046b9 	.word	0x080046b9
 8004670:	08004685 	.word	0x08004685
 8004674:	0800469b 	.word	0x0800469b
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
 8004680:	080046b9 	.word	0x080046b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004688:	3308      	adds	r3, #8
 800468a:	2101      	movs	r1, #1
 800468c:	4618      	mov	r0, r3
 800468e:	f000 ff71 	bl	8005574 <RCCEx_PLL2_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004698:	e00f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3328      	adds	r3, #40	@ 0x28
 80046a0:	2101      	movs	r1, #1
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 f818 	bl	80056d8 <RCCEx_PLL3_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80046b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80046c2:	4b96      	ldr	r3, [pc, #600]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c6:	f023 0107 	bic.w	r1, r3, #7
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046d0:	4a92      	ldr	r2, [pc, #584]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046d2:	430b      	orrs	r3, r1
 80046d4:	6553      	str	r3, [r2, #84]	@ 0x54
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e8:	f002 0304 	and.w	r3, r2, #4
 80046ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f0:	2300      	movs	r3, #0
 80046f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d044      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004708:	2b05      	cmp	r3, #5
 800470a:	d825      	bhi.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800470c:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004761 	.word	0x08004761
 8004718:	0800472d 	.word	0x0800472d
 800471c:	08004743 	.word	0x08004743
 8004720:	08004761 	.word	0x08004761
 8004724:	08004761 	.word	0x08004761
 8004728:	08004761 	.word	0x08004761
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	3308      	adds	r3, #8
 8004732:	2101      	movs	r1, #1
 8004734:	4618      	mov	r0, r3
 8004736:	f000 ff1d 	bl	8005574 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004740:	e00f      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	3328      	adds	r3, #40	@ 0x28
 8004748:	2101      	movs	r1, #1
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ffc4 	bl	80056d8 <RCCEx_PLL3_Config>
 8004750:	4603      	mov	r3, r0
 8004752:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004756:	e004      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800476a:	4b6c      	ldr	r3, [pc, #432]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800476c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476e:	f023 0107 	bic.w	r1, r3, #7
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800477a:	4a68      	ldr	r2, [pc, #416]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800477c:	430b      	orrs	r3, r1
 800477e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004780:	e003      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f002 0320 	and.w	r3, r2, #32
 8004796:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800479a:	2300      	movs	r3, #0
 800479c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80047a4:	460b      	mov	r3, r1
 80047a6:	4313      	orrs	r3, r2
 80047a8:	d055      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047b6:	d033      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047bc:	d82c      	bhi.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c2:	d02f      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c8:	d826      	bhi.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047ce:	d02b      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80047d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047d4:	d820      	bhi.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047da:	d012      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047e0:	d81a      	bhi.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d022      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047ea:	d115      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f0:	3308      	adds	r3, #8
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 febd 	bl	8005574 <RCCEx_PLL2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004800:	e015      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3328      	adds	r3, #40	@ 0x28
 8004808:	2102      	movs	r1, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 ff64 	bl	80056d8 <RCCEx_PLL3_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004816:	e00a      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481e:	e006      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004820:	bf00      	nop
 8004822:	e004      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004824:	bf00      	nop
 8004826:	e002      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004828:	bf00      	nop
 800482a:	e000      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800482c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800482e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004836:	4b39      	ldr	r3, [pc, #228]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800483e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004846:	4a35      	ldr	r2, [pc, #212]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004848:	430b      	orrs	r3, r1
 800484a:	6553      	str	r3, [r2, #84]	@ 0x54
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004866:	2300      	movs	r3, #0
 8004868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800486c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004870:	460b      	mov	r3, r1
 8004872:	4313      	orrs	r3, r2
 8004874:	d058      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800487a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800487e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004882:	d033      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004884:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004888:	d82c      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800488a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800488e:	d02f      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004894:	d826      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004896:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800489a:	d02b      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800489c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048a0:	d820      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a6:	d012      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ac:	d81a      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d022      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80048b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b6:	d115      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048bc:	3308      	adds	r3, #8
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fe57 	bl	8005574 <RCCEx_PLL2_Config>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048cc:	e015      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d2:	3328      	adds	r3, #40	@ 0x28
 80048d4:	2102      	movs	r1, #2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fefe 	bl	80056d8 <RCCEx_PLL3_Config>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048e2:	e00a      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048ea:	e006      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048ec:	bf00      	nop
 80048ee:	e004      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048f0:	bf00      	nop
 80048f2:	e002      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10e      	bne.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004912:	4a02      	ldr	r2, [pc, #8]	@ (800491c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004914:	430b      	orrs	r3, r1
 8004916:	6593      	str	r3, [r2, #88]	@ 0x58
 8004918:	e006      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800491a:	bf00      	nop
 800491c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800493e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d055      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004950:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004954:	d033      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004956:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800495a:	d82c      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800495c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004960:	d02f      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004966:	d826      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004968:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800496c:	d02b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800496e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004972:	d820      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004974:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004978:	d012      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800497a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800497e:	d81a      	bhi.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d022      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004988:	d115      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	3308      	adds	r3, #8
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fdee 	bl	8005574 <RCCEx_PLL2_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800499e:	e015      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a4:	3328      	adds	r3, #40	@ 0x28
 80049a6:	2102      	movs	r1, #2
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 fe95 	bl	80056d8 <RCCEx_PLL3_Config>
 80049ae:	4603      	mov	r3, r0
 80049b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80049b4:	e00a      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049bc:	e006      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049be:	bf00      	nop
 80049c0:	e004      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80049ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10b      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049d4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049e4:	4a9d      	ldr	r2, [pc, #628]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e6:	430b      	orrs	r3, r1
 80049e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80049ea:	e003      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	f002 0308 	and.w	r3, r2, #8
 8004a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a04:	2300      	movs	r3, #0
 8004a06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4313      	orrs	r3, r2
 8004a12:	d01e      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	3328      	adds	r3, #40	@ 0x28
 8004a28:	2102      	movs	r1, #2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fe54 	bl	80056d8 <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a3c:	4b87      	ldr	r3, [pc, #540]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a40:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a4c:	4a83      	ldr	r2, [pc, #524]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a5a:	f002 0310 	and.w	r3, r2, #16
 8004a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	d01e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a84:	3328      	adds	r3, #40	@ 0x28
 8004a86:	2102      	movs	r1, #2
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fe25 	bl	80056d8 <RCCEx_PLL3_Config>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a9a:	4b70      	ldr	r3, [pc, #448]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004aac:	430b      	orrs	r3, r1
 8004aae:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004abc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ac6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004aca:	460b      	mov	r3, r1
 8004acc:	4313      	orrs	r3, r2
 8004ace:	d03e      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ad8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004adc:	d022      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004ade:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae2:	d81b      	bhi.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aec:	d00b      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004aee:	e015      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	3308      	adds	r3, #8
 8004af6:	2100      	movs	r1, #0
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 fd3b 	bl	8005574 <RCCEx_PLL2_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b04:	e00f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b0a:	3328      	adds	r3, #40	@ 0x28
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fde2 	bl	80056d8 <RCCEx_PLL3_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b1a:	e004      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b22:	e000      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b3e:	4a47      	ldr	r2, [pc, #284]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b40:	430b      	orrs	r3, r1
 8004b42:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b44:	e003      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d03b      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b76:	d01f      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b78:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b7c:	d818      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b82:	d003      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b84:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b88:	d007      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b8c:	4b33      	ldr	r3, [pc, #204]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b90:	4a32      	ldr	r2, [pc, #200]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b98:	e00f      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	3328      	adds	r3, #40	@ 0x28
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fd98 	bl	80056d8 <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bae:	e004      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bb6:	e000      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004bb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bc2:	4b26      	ldr	r3, [pc, #152]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd2:	4a22      	ldr	r2, [pc, #136]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bd4:	430b      	orrs	r3, r1
 8004bd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004bee:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	d034      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c0c:	d007      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004c0e:	e011      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c10:	4b12      	ldr	r3, [pc, #72]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	4a11      	ldr	r2, [pc, #68]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c1c:	e00e      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	3308      	adds	r3, #8
 8004c24:	2102      	movs	r1, #2
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 fca4 	bl	8005574 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c32:	e003      	b.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c48:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c52:	4a02      	ldr	r2, [pc, #8]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c58:	e006      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c5a:	bf00      	nop
 8004c5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c76:	2300      	movs	r3, #0
 8004c78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4313      	orrs	r3, r2
 8004c82:	d00c      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c88:	3328      	adds	r3, #40	@ 0x28
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fd23 	bl	80056d8 <RCCEx_PLL3_Config>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004caa:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cac:	2300      	movs	r3, #0
 8004cae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004cb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	d038      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cc6:	d018      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004cc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ccc:	d811      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd2:	d014      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004cd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cd8:	d80b      	bhi.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ce4:	4bc3      	ldr	r3, [pc, #780]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce8:	4ac2      	ldr	r2, [pc, #776]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cf8:	e004      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e002      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cfe:	bf00      	nop
 8004d00:	e000      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d0c:	4bb9      	ldr	r3, [pc, #740]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d10:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d1c:	4ab5      	ldr	r2, [pc, #724]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d22:	e003      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d34:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d42:	460b      	mov	r3, r1
 8004d44:	4313      	orrs	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d48:	4baa      	ldr	r3, [pc, #680]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d56:	4aa7      	ldr	r2, [pc, #668]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d68:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d72:	460b      	mov	r3, r1
 8004d74:	4313      	orrs	r3, r2
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d78:	4b9e      	ldr	r3, [pc, #632]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d88:	4a9a      	ldr	r2, [pc, #616]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004daa:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dae:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db8:	4a8e      	ldr	r2, [pc, #568]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dba:	430b      	orrs	r3, r1
 8004dbc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dcc:	2300      	movs	r3, #0
 8004dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dda:	4b86      	ldr	r3, [pc, #536]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	4a85      	ldr	r2, [pc, #532]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004de4:	6113      	str	r3, [r2, #16]
 8004de6:	4b83      	ldr	r3, [pc, #524]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de8:	6919      	ldr	r1, [r3, #16]
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004df2:	4a80      	ldr	r2, [pc, #512]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e06:	2300      	movs	r3, #0
 8004e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e14:	4b77      	ldr	r3, [pc, #476]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e18:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e22:	4a74      	ldr	r2, [pc, #464]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e24:	430b      	orrs	r3, r1
 8004e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e36:	2300      	movs	r3, #0
 8004e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4313      	orrs	r3, r2
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e44:	4b6b      	ldr	r3, [pc, #428]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e48:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	4a67      	ldr	r2, [pc, #412]	@ (8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e56:	430b      	orrs	r3, r1
 8004e58:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	2100      	movs	r1, #0
 8004e64:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d011      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb78 	bl	8005574 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	6239      	str	r1, [r7, #32]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	d011      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eba:	3308      	adds	r3, #8
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fb58 	bl	8005574 <RCCEx_PLL2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004eca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	61b9      	str	r1, [r7, #24]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	d011      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	3308      	adds	r3, #8
 8004efc:	2102      	movs	r1, #2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb38 	bl	8005574 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	2100      	movs	r1, #0
 8004f24:	6139      	str	r1, [r7, #16]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f30:	460b      	mov	r3, r1
 8004f32:	4313      	orrs	r3, r2
 8004f34:	d011      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	3328      	adds	r3, #40	@ 0x28
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fbca 	bl	80056d8 <RCCEx_PLL3_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	2100      	movs	r1, #0
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f70:	460b      	mov	r3, r1
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	3328      	adds	r3, #40	@ 0x28
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fbaa 	bl	80056d8 <RCCEx_PLL3_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6039      	str	r1, [r7, #0]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	3328      	adds	r3, #40	@ 0x28
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb8a 	bl	80056d8 <RCCEx_PLL3_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004fda:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff4:	58024400 	.word	0x58024400

08004ff8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ffc:	f7fe fd96 	bl	8003b2c <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4904      	ldr	r1, [pc, #16]	@ (8005020 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	58024400 	.word	0x58024400
 8005020:	0800c990 	.word	0x0800c990

08005024 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005024:	b480      	push	{r7}
 8005026:	b089      	sub	sp, #36	@ 0x24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800502c:	4ba1      	ldr	r3, [pc, #644]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005036:	4b9f      	ldr	r3, [pc, #636]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	0b1b      	lsrs	r3, r3, #12
 800503c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005040:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005042:	4b9c      	ldr	r3, [pc, #624]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800504e:	4b99      	ldr	r3, [pc, #612]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8111 	beq.w	8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b02      	cmp	r3, #2
 8005076:	f000 8083 	beq.w	8005180 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f200 80a1 	bhi.w	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d056      	beq.n	800513c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800508e:	e099      	b.n	80051c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005090:	4b88      	ldr	r3, [pc, #544]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02d      	beq.n	80050f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800509c:	4b85      	ldr	r3, [pc, #532]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a84      	ldr	r2, [pc, #528]	@ (80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	ee07 3a90 	vmov	s15, r3
 80050be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c6:	4b7b      	ldr	r3, [pc, #492]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050da:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050f6:	e087      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510a:	4b6a      	ldr	r3, [pc, #424]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800510c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800510e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511a:	ed97 6a03 	vldr	s12, [r7, #12]
 800511e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800512e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800513a:	e065      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005146:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800514a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514e:	4b59      	ldr	r3, [pc, #356]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005162:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800517e:	e043      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80052c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800518e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005192:	4b48      	ldr	r3, [pc, #288]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519a:	ee07 3a90 	vmov	s15, r3
 800519e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c2:	e021      	b.n	8005208 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d6:	4b37      	ldr	r3, [pc, #220]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005206:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005208:	4b2a      	ldr	r3, [pc, #168]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	0a5b      	lsrs	r3, r3, #9
 800520e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800521e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005222:	edd7 6a07 	vldr	s13, [r7, #28]
 8005226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800522a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522e:	ee17 2a90 	vmov	r2, s15
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005236:	4b1f      	ldr	r3, [pc, #124]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800524c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005250:	edd7 6a07 	vldr	s13, [r7, #28]
 8005254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525c:	ee17 2a90 	vmov	r2, s15
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	0e1b      	lsrs	r3, r3, #24
 800526a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800527a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800528a:	ee17 2a90 	vmov	r2, s15
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005292:	e008      	b.n	80052a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
}
 80052a6:	bf00      	nop
 80052a8:	3724      	adds	r7, #36	@ 0x24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	03d09000 	.word	0x03d09000
 80052bc:	46000000 	.word	0x46000000
 80052c0:	4c742400 	.word	0x4c742400
 80052c4:	4a742400 	.word	0x4a742400
 80052c8:	4bbebc20 	.word	0x4bbebc20

080052cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	@ 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d4:	4ba1      	ldr	r3, [pc, #644]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052de:	4b9f      	ldr	r3, [pc, #636]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e2:	0d1b      	lsrs	r3, r3, #20
 80052e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052ea:	4b9c      	ldr	r3, [pc, #624]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	0a1b      	lsrs	r3, r3, #8
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052f6:	4b99      	ldr	r3, [pc, #612]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8111 	beq.w	800553c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f000 8083 	beq.w	8005428 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f200 80a1 	bhi.w	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d056      	beq.n	80053e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005336:	e099      	b.n	800546c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005338:	4b88      	ldr	r3, [pc, #544]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02d      	beq.n	80053a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005344:	4b85      	ldr	r3, [pc, #532]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	4a84      	ldr	r2, [pc, #528]	@ (8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b7b      	ldr	r3, [pc, #492]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005382:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800539e:	e087      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b6a      	ldr	r3, [pc, #424]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053e2:	e065      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b59      	ldr	r3, [pc, #356]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a03 	vldr	s12, [r7, #12]
 800540a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005426:	e043      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543a:	4b48      	ldr	r3, [pc, #288]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544a:	ed97 6a03 	vldr	s12, [r7, #12]
 800544e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800546a:	e021      	b.n	80054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b37      	ldr	r3, [pc, #220]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005492:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054b0:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	0a5b      	lsrs	r3, r3, #9
 80054b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d6:	ee17 2a90 	vmov	r2, s15
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054de:	4b1f      	ldr	r3, [pc, #124]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	0c1b      	lsrs	r3, r3, #16
 80054e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005504:	ee17 2a90 	vmov	r2, s15
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800550c:	4b13      	ldr	r3, [pc, #76]	@ (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005526:	edd7 6a07 	vldr	s13, [r7, #28]
 800552a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005532:	ee17 2a90 	vmov	r2, s15
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800553a:	e008      	b.n	800554e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	609a      	str	r2, [r3, #8]
}
 800554e:	bf00      	nop
 8005550:	3724      	adds	r7, #36	@ 0x24
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	58024400 	.word	0x58024400
 8005560:	03d09000 	.word	0x03d09000
 8005564:	46000000 	.word	0x46000000
 8005568:	4c742400 	.word	0x4c742400
 800556c:	4a742400 	.word	0x4a742400
 8005570:	4bbebc20 	.word	0x4bbebc20

08005574 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005582:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b03      	cmp	r3, #3
 800558c:	d101      	bne.n	8005592 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e099      	b.n	80056c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005592:	4b4f      	ldr	r3, [pc, #316]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4e      	ldr	r2, [pc, #312]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005598:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800559c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800559e:	f7fc ff73 	bl	8002488 <HAL_GetTick>
 80055a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055a4:	e008      	b.n	80055b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055a6:	f7fc ff6f 	bl	8002488 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e086      	b.n	80056c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055b8:	4b45      	ldr	r3, [pc, #276]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f0      	bne.n	80055a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055c4:	4b42      	ldr	r3, [pc, #264]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	493f      	ldr	r1, [pc, #252]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	3b01      	subs	r3, #1
 80055de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	025b      	lsls	r3, r3, #9
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	3b01      	subs	r3, #1
 8005602:	061b      	lsls	r3, r3, #24
 8005604:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005608:	4931      	ldr	r1, [pc, #196]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800560a:	4313      	orrs	r3, r2
 800560c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800560e:	4b30      	ldr	r3, [pc, #192]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	492d      	ldr	r1, [pc, #180]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800561c:	4313      	orrs	r3, r2
 800561e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005620:	4b2b      	ldr	r3, [pc, #172]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005624:	f023 0220 	bic.w	r2, r3, #32
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	4928      	ldr	r1, [pc, #160]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800562e:	4313      	orrs	r3, r2
 8005630:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005632:	4b27      	ldr	r3, [pc, #156]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005638:	f023 0310 	bic.w	r3, r3, #16
 800563c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800563e:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005642:	4b24      	ldr	r3, [pc, #144]	@ (80056d4 <RCCEx_PLL2_Config+0x160>)
 8005644:	4013      	ands	r3, r2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	69d2      	ldr	r2, [r2, #28]
 800564a:	00d2      	lsls	r2, r2, #3
 800564c:	4920      	ldr	r1, [pc, #128]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005652:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005658:	f043 0310 	orr.w	r3, r3, #16
 800565c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005664:	4b1a      	ldr	r3, [pc, #104]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005668:	4a19      	ldr	r2, [pc, #100]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800566a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800566e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005670:	e00f      	b.n	8005692 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d106      	bne.n	8005686 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005678:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a14      	ldr	r2, [pc, #80]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800567e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005682:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005684:	e005      	b.n	8005692 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005686:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568a:	4a11      	ldr	r2, [pc, #68]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 800568c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005690:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005692:	4b0f      	ldr	r3, [pc, #60]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a0e      	ldr	r2, [pc, #56]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 8005698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800569c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800569e:	f7fc fef3 	bl	8002488 <HAL_GetTick>
 80056a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056a4:	e008      	b.n	80056b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056a6:	f7fc feef 	bl	8002488 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e006      	b.n	80056c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <RCCEx_PLL2_Config+0x15c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	58024400 	.word	0x58024400
 80056d4:	ffff0007 	.word	0xffff0007

080056d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056e6:	4b53      	ldr	r3, [pc, #332]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80056e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d101      	bne.n	80056f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e099      	b.n	800582a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005702:	f7fc fec1 	bl	8002488 <HAL_GetTick>
 8005706:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005708:	e008      	b.n	800571c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800570a:	f7fc febd 	bl	8002488 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e086      	b.n	800582a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800571c:	4b45      	ldr	r3, [pc, #276]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005728:	4b42      	ldr	r3, [pc, #264]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	051b      	lsls	r3, r3, #20
 8005736:	493f      	ldr	r1, [pc, #252]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005738:	4313      	orrs	r3, r2
 800573a:	628b      	str	r3, [r1, #40]	@ 0x28
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	3b01      	subs	r3, #1
 8005742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	3b01      	subs	r3, #1
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	b29b      	uxth	r3, r3
 8005750:	431a      	orrs	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	041b      	lsls	r3, r3, #16
 800575a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	3b01      	subs	r3, #1
 8005766:	061b      	lsls	r3, r3, #24
 8005768:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800576c:	4931      	ldr	r1, [pc, #196]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 800576e:	4313      	orrs	r3, r2
 8005770:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005772:	4b30      	ldr	r3, [pc, #192]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	492d      	ldr	r1, [pc, #180]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005780:	4313      	orrs	r3, r2
 8005782:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005784:	4b2b      	ldr	r3, [pc, #172]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	4928      	ldr	r1, [pc, #160]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005796:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	4a26      	ldr	r2, [pc, #152]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 800579c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057a2:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057a6:	4b24      	ldr	r3, [pc, #144]	@ (8005838 <RCCEx_PLL3_Config+0x160>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	69d2      	ldr	r2, [r2, #28]
 80057ae:	00d2      	lsls	r2, r2, #3
 80057b0:	4920      	ldr	r1, [pc, #128]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	4313      	orrs	r3, r2
 80057b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d106      	bne.n	80057d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057cc:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057d4:	e00f      	b.n	80057f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d106      	bne.n	80057ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057dc:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e0:	4a14      	ldr	r2, [pc, #80]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057e8:	e005      	b.n	80057f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057ea:	4b12      	ldr	r3, [pc, #72]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	4a11      	ldr	r2, [pc, #68]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 80057fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005802:	f7fc fe41 	bl	8002488 <HAL_GetTick>
 8005806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005808:	e008      	b.n	800581c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800580a:	f7fc fe3d 	bl	8002488 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800581c:	4b05      	ldr	r3, [pc, #20]	@ (8005834 <RCCEx_PLL3_Config+0x15c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005828:	7bfb      	ldrb	r3, [r7, #15]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	58024400 	.word	0x58024400
 8005838:	ffff0007 	.word	0xffff0007

0800583c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e10f      	b.n	8005a6e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a87      	ldr	r2, [pc, #540]	@ (8005a78 <HAL_SPI_Init+0x23c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00f      	beq.n	800587e <HAL_SPI_Init+0x42>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a86      	ldr	r2, [pc, #536]	@ (8005a7c <HAL_SPI_Init+0x240>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00a      	beq.n	800587e <HAL_SPI_Init+0x42>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a84      	ldr	r2, [pc, #528]	@ (8005a80 <HAL_SPI_Init+0x244>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d005      	beq.n	800587e <HAL_SPI_Init+0x42>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d901      	bls.n	800587e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e0f7      	b.n	8005a6e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fe2e 	bl	80064e0 <SPI_GetPacketSize>
 8005884:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a78 <HAL_SPI_Init+0x23c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00c      	beq.n	80058aa <HAL_SPI_Init+0x6e>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a79      	ldr	r2, [pc, #484]	@ (8005a7c <HAL_SPI_Init+0x240>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d007      	beq.n	80058aa <HAL_SPI_Init+0x6e>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a78      	ldr	r2, [pc, #480]	@ (8005a80 <HAL_SPI_Init+0x244>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_Init+0x6e>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2b08      	cmp	r3, #8
 80058a8:	d811      	bhi.n	80058ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80058ae:	4a72      	ldr	r2, [pc, #456]	@ (8005a78 <HAL_SPI_Init+0x23c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a70      	ldr	r2, [pc, #448]	@ (8005a7c <HAL_SPI_Init+0x240>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d004      	beq.n	80058c8 <HAL_SPI_Init+0x8c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a6f      	ldr	r2, [pc, #444]	@ (8005a80 <HAL_SPI_Init+0x244>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d104      	bne.n	80058d2 <HAL_SPI_Init+0x96>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d901      	bls.n	80058d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0cd      	b.n	8005a6e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fa22 	bl	8001d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800590e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005918:	d119      	bne.n	800594e <HAL_SPI_Init+0x112>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005922:	d103      	bne.n	800592c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10c      	bne.n	800594e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800593c:	d107      	bne.n	800594e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800594c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00f      	beq.n	800597a <HAL_SPI_Init+0x13e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d90b      	bls.n	800597a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e007      	b.n	800598a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005988:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005992:	431a      	orrs	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599c:	ea42 0103 	orr.w	r1, r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	431a      	orrs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	695b      	ldr	r3, [r3, #20]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059ea:	ea42 0103 	orr.w	r1, r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d113      	bne.n	8005a2a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40013000 	.word	0x40013000
 8005a7c:	40003800 	.word	0x40003800
 8005a80:	40003c00 	.word	0x40003c00

08005a84 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	603b      	str	r3, [r7, #0]
 8005a90:	4613      	mov	r3, r2
 8005a92:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3320      	adds	r3, #32
 8005a9a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9c:	f7fc fcf4 	bl	8002488 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d001      	beq.n	8005ab2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e1d1      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_SPI_Transmit+0x3a>
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e1c9      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_SPI_Transmit+0x4c>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e1c2      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2203      	movs	r2, #3
 8005adc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	88fa      	ldrh	r2, [r7, #6]
 8005af2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005b28:	d108      	bne.n	8005b3c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	e009      	b.n	8005b50 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005b4e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4b96      	ldr	r3, [pc, #600]	@ (8005db0 <HAL_SPI_Transmit+0x32c>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	88f9      	ldrh	r1, [r7, #6]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	430b      	orrs	r3, r1
 8005b62:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b7c:	d107      	bne.n	8005b8e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d947      	bls.n	8005c26 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005b96:	e03f      	b.n	8005c18 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d114      	bne.n	8005bd0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6812      	ldr	r2, [r2, #0]
 8005bb0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005bce:	e023      	b.n	8005c18 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bd0:	f7fc fc5a 	bl	8002488 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d803      	bhi.n	8005be8 <HAL_SPI_Transmit+0x164>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be6:	d102      	bne.n	8005bee <HAL_SPI_Transmit+0x16a>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d114      	bne.n	8005c18 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fba8 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e11e      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1b9      	bne.n	8005b98 <HAL_SPI_Transmit+0x114>
 8005c24:	e0f1      	b.n	8005e0a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	2b07      	cmp	r3, #7
 8005c2c:	f240 80e6 	bls.w	8005dfc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005c30:	e05d      	b.n	8005cee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d132      	bne.n	8005ca6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d918      	bls.n	8005c7e <HAL_SPI_Transmit+0x1fa>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d014      	beq.n	8005c7e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b02      	subs	r3, #2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005c7c:	e037      	b.n	8005cee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c82:	881a      	ldrh	r2, [r3, #0]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8c:	1c9a      	adds	r2, r3, #2
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005ca4:	e023      	b.n	8005cee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca6:	f7fc fbef 	bl	8002488 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d803      	bhi.n	8005cbe <HAL_SPI_Transmit+0x23a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d102      	bne.n	8005cc4 <HAL_SPI_Transmit+0x240>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d114      	bne.n	8005cee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fb3d 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0b3      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d19b      	bne.n	8005c32 <HAL_SPI_Transmit+0x1ae>
 8005cfa:	e086      	b.n	8005e0a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d154      	bne.n	8005db4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d918      	bls.n	8005d48 <HAL_SPI_Transmit+0x2c4>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1a:	2b40      	cmp	r3, #64	@ 0x40
 8005d1c:	d914      	bls.n	8005d48 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6812      	ldr	r2, [r2, #0]
 8005d28:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2e:	1d1a      	adds	r2, r3, #4
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	3b04      	subs	r3, #4
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d46:	e059      	b.n	8005dfc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d917      	bls.n	8005d84 <HAL_SPI_Transmit+0x300>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d013      	beq.n	8005d84 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d60:	881a      	ldrh	r2, [r3, #0]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6a:	1c9a      	adds	r2, r3, #2
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b02      	subs	r3, #2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005d82:	e03b      	b.n	8005dfc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3320      	adds	r3, #32
 8005d8e:	7812      	ldrb	r2, [r2, #0]
 8005d90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8005dae:	e025      	b.n	8005dfc <HAL_SPI_Transmit+0x378>
 8005db0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db4:	f7fc fb68 	bl	8002488 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d803      	bhi.n	8005dcc <HAL_SPI_Transmit+0x348>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d102      	bne.n	8005dd2 <HAL_SPI_Transmit+0x34e>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d114      	bne.n	8005dfc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fab6 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e02c      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f47f af79 	bne.w	8005cfc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2108      	movs	r1, #8
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 fb35 	bl	8006484 <SPI_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d007      	beq.n	8005e30 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e26:	f043 0220 	orr.w	r2, r3, #32
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fa87 	bl	8006344 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e000      	b.n	8005e56 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
  }
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop

08005e60 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3301      	adds	r3, #1
 8005e7a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3330      	adds	r3, #48	@ 0x30
 8005e82:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e84:	f7fc fb00 	bl	8002488 <HAL_GetTick>
 8005e88:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d001      	beq.n	8005e9a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8005e96:	2302      	movs	r3, #2
 8005e98:	e250      	b.n	800633c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SPI_Receive+0x46>
 8005ea0:	88fb      	ldrh	r3, [r7, #6]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e248      	b.n	800633c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_SPI_Receive+0x58>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e241      	b.n	800633c <HAL_SPI_Receive+0x4dc>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005f10:	d108      	bne.n	8005f24 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	e009      	b.n	8005f38 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005f36:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	4b95      	ldr	r3, [pc, #596]	@ (8006194 <HAL_SPI_Receive+0x334>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	88f9      	ldrh	r1, [r7, #6]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	6812      	ldr	r2, [r2, #0]
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f64:	d107      	bne.n	8005f76 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d96c      	bls.n	8006058 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005f7e:	e064      	b.n	800604a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d114      	bne.n	8005fc0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f9e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fa0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa6:	1d1a      	adds	r2, r3, #4
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8005fbe:	e044      	b.n	800604a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8bfa      	ldrh	r2, [r7, #30]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d919      	bls.n	8006002 <HAL_SPI_Receive+0x1a2>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d014      	beq.n	8006002 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005fe2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe8:	1d1a      	adds	r2, r3, #4
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006000:	e023      	b.n	800604a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006002:	f7fc fa41 	bl	8002488 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d803      	bhi.n	800601a <HAL_SPI_Receive+0x1ba>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006018:	d102      	bne.n	8006020 <HAL_SPI_Receive+0x1c0>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d114      	bne.n	800604a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f98f 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800602c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e178      	b.n	800633c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	d194      	bne.n	8005f80 <HAL_SPI_Receive+0x120>
 8006056:	e15e      	b.n	8006316 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b07      	cmp	r3, #7
 800605e:	f240 8153 	bls.w	8006308 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006062:	e08f      	b.n	8006184 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b01      	cmp	r3, #1
 8006078:	d114      	bne.n	80060a4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	8812      	ldrh	r2, [r2, #0]
 8006082:	b292      	uxth	r2, r2
 8006084:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800608a:	1c9a      	adds	r2, r3, #2
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006096:	b29b      	uxth	r3, r3
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060a2:	e06f      	b.n	8006184 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	8bfa      	ldrh	r2, [r7, #30]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d924      	bls.n	80060fc <HAL_SPI_Receive+0x29c>
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01f      	beq.n	80060fc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	8812      	ldrh	r2, [r2, #0]
 80060c4:	b292      	uxth	r2, r2
 80060c6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	8812      	ldrh	r2, [r2, #0]
 80060da:	b292      	uxth	r2, r2
 80060dc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060e2:	1c9a      	adds	r2, r3, #2
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b02      	subs	r3, #2
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80060fa:	e043      	b.n	8006184 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d119      	bne.n	800613c <HAL_SPI_Receive+0x2dc>
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d014      	beq.n	800613c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	b292      	uxth	r2, r2
 800611c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006122:	1c9a      	adds	r2, r3, #2
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800613a:	e023      	b.n	8006184 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800613c:	f7fc f9a4 	bl	8002488 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d803      	bhi.n	8006154 <HAL_SPI_Receive+0x2f4>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d102      	bne.n	800615a <HAL_SPI_Receive+0x2fa>
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d114      	bne.n	8006184 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f8f2 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006166:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e0db      	b.n	800633c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f af69 	bne.w	8006064 <HAL_SPI_Receive+0x204>
 8006192:	e0c0      	b.n	8006316 <HAL_SPI_Receive+0x4b6>
 8006194:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d117      	bne.n	80061de <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061dc:	e094      	b.n	8006308 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	8bfa      	ldrh	r2, [r7, #30]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d946      	bls.n	800627a <HAL_SPI_Receive+0x41a>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d041      	beq.n	800627a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006202:	7812      	ldrb	r2, [r2, #0]
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800620c:	1c5a      	adds	r2, r3, #1
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800621e:	7812      	ldrb	r2, [r2, #0]
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006228:	1c5a      	adds	r2, r3, #1
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623a:	7812      	ldrb	r2, [r2, #0]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	b2d2      	uxtb	r2, r2
 800625a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b04      	subs	r3, #4
 8006270:	b29a      	uxth	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006278:	e046      	b.n	8006308 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b03      	cmp	r3, #3
 8006284:	d81c      	bhi.n	80062c0 <HAL_SPI_Receive+0x460>
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d017      	beq.n	80062c0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800629c:	7812      	ldrb	r2, [r2, #0]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80062be:	e023      	b.n	8006308 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c0:	f7fc f8e2 	bl	8002488 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d803      	bhi.n	80062d8 <HAL_SPI_Receive+0x478>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d102      	bne.n	80062de <HAL_SPI_Receive+0x47e>
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d114      	bne.n	8006308 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f830 	bl	8006344 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e019      	b.n	800633c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	f47f af41 	bne.w	8006198 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f814 	bl	8006344 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006332:	2b00      	cmp	r3, #0
 8006334:	d001      	beq.n	800633a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800633a:	2300      	movs	r3, #0
  }
}
 800633c:	4618      	mov	r0, r3
 800633e:	3720      	adds	r7, #32
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0208 	orr.w	r2, r2, #8
 8006362:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f042 0210 	orr.w	r2, r2, #16
 8006372:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6919      	ldr	r1, [r3, #16]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	4b3c      	ldr	r3, [pc, #240]	@ (8006480 <SPI_CloseTransfer+0x13c>)
 8006390:	400b      	ands	r3, r1
 8006392:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80063a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d014      	beq.n	80063da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00f      	beq.n	80063da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699a      	ldr	r2, [r3, #24]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0220 	orr.w	r2, r2, #32
 80063d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d014      	beq.n	8006410 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00f      	beq.n	8006410 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063f6:	f043 0204 	orr.w	r2, r3, #4
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699a      	ldr	r2, [r3, #24]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800640e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00f      	beq.n	800643a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006420:	f043 0201 	orr.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006438:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800644a:	f043 0208 	orr.w	r2, r3, #8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699a      	ldr	r2, [r3, #24]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006462:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	fffffc90 	.word	0xfffffc90

08006484 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006494:	e010      	b.n	80064b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006496:	f7fb fff7 	bl	8002488 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d803      	bhi.n	80064ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ac:	d102      	bne.n	80064b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e00f      	b.n	80064d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d0df      	beq.n	8006496 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3307      	adds	r3, #7
 80064fe:	08db      	lsrs	r3, r3, #3
 8006500:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	fb02 f303 	mul.w	r3, r2, r3
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr

08006516 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e049      	b.n	80065bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800652e:	b2db      	uxtb	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7fb fcf9 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	3304      	adds	r3, #4
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f000 fad5 	bl	8006b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d001      	beq.n	80065dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e054      	b.n	8006686 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <HAL_TIM_Base_Start_IT+0xd0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d022      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006606:	d01d      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a22      	ldr	r2, [pc, #136]	@ (8006698 <HAL_TIM_Base_Start_IT+0xd4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d018      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a21      	ldr	r2, [pc, #132]	@ (800669c <HAL_TIM_Base_Start_IT+0xd8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d013      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1f      	ldr	r2, [pc, #124]	@ (80066a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00e      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d009      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIM_Base_Start_IT+0x80>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1b      	ldr	r2, [pc, #108]	@ (80066ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d115      	bne.n	8006670 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	4b19      	ldr	r3, [pc, #100]	@ (80066b0 <HAL_TIM_Base_Start_IT+0xec>)
 800664c:	4013      	ands	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b06      	cmp	r3, #6
 8006654:	d015      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0xbe>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665c:	d011      	beq.n	8006682 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0201 	orr.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666e:	e008      	b.n	8006682 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e000      	b.n	8006684 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006682:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	40010000 	.word	0x40010000
 8006698:	40000400 	.word	0x40000400
 800669c:	40000800 	.word	0x40000800
 80066a0:	40000c00 	.word	0x40000c00
 80066a4:	40010400 	.word	0x40010400
 80066a8:	40001800 	.word	0x40001800
 80066ac:	40014000 	.word	0x40014000
 80066b0:	00010007 	.word	0x00010007

080066b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d020      	beq.n	8006718 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01b      	beq.n	8006718 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0202 	mvn.w	r2, #2
 80066e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2201      	movs	r2, #1
 80066ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	f003 0303 	and.w	r3, r3, #3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d003      	beq.n	8006706 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f9e2 	bl	8006ac8 <HAL_TIM_IC_CaptureCallback>
 8006704:	e005      	b.n	8006712 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9d4 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f9e5 	bl	8006adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0304 	and.w	r3, r3, #4
 800671e:	2b00      	cmp	r3, #0
 8006720:	d020      	beq.n	8006764 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01b      	beq.n	8006764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0204 	mvn.w	r2, #4
 8006734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f9bc 	bl	8006ac8 <HAL_TIM_IC_CaptureCallback>
 8006750:	e005      	b.n	800675e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9ae 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f9bf 	bl	8006adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d020      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01b      	beq.n	80067b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0208 	mvn.w	r2, #8
 8006780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2204      	movs	r2, #4
 8006786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f996 	bl	8006ac8 <HAL_TIM_IC_CaptureCallback>
 800679c:	e005      	b.n	80067aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 f988 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f999 	bl	8006adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f003 0310 	and.w	r3, r3, #16
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d020      	beq.n	80067fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01b      	beq.n	80067fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0210 	mvn.w	r2, #16
 80067cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2208      	movs	r2, #8
 80067d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f970 	bl	8006ac8 <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f962 	bl	8006ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f973 	bl	8006adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0201 	mvn.w	r2, #1
 8006818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7fa ff4a 	bl	80016b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d104      	bne.n	8006834 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00c      	beq.n	800684e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb31 	bl	8006eb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800686a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb29 	bl	8006ec4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00c      	beq.n	8006896 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800688e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f92d 	bl	8006af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f003 0320 	and.w	r3, r3, #32
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00c      	beq.n	80068ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0320 	and.w	r3, r3, #32
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f06f 0220 	mvn.w	r2, #32
 80068b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 faf1 	bl	8006e9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIM_ConfigClockSource+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e0dc      	b.n	8006a9a <HAL_TIM_ConfigClockSource+0x1d6>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa4 <HAL_TIM_ConfigClockSource+0x1e0>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006906:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a64      	ldr	r2, [pc, #400]	@ (8006aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	f000 80a9 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800691c:	4a62      	ldr	r2, [pc, #392]	@ (8006aa8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	f200 80ae 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006924:	4a61      	ldr	r2, [pc, #388]	@ (8006aac <HAL_TIM_ConfigClockSource+0x1e8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	f000 80a1 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800692c:	4a5f      	ldr	r2, [pc, #380]	@ (8006aac <HAL_TIM_ConfigClockSource+0x1e8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	f200 80a6 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006934:	4a5e      	ldr	r2, [pc, #376]	@ (8006ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006936:	4293      	cmp	r3, r2
 8006938:	f000 8099 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800693c:	4a5c      	ldr	r2, [pc, #368]	@ (8006ab0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800693e:	4293      	cmp	r3, r2
 8006940:	f200 809e 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006944:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006948:	f000 8091 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800694c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006950:	f200 8096 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006958:	f000 8089 	beq.w	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 800695c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006960:	f200 808e 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006964:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006968:	d03e      	beq.n	80069e8 <HAL_TIM_ConfigClockSource+0x124>
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800696e:	f200 8087 	bhi.w	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006976:	f000 8086 	beq.w	8006a86 <HAL_TIM_ConfigClockSource+0x1c2>
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800697e:	d87f      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006980:	2b70      	cmp	r3, #112	@ 0x70
 8006982:	d01a      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0xf6>
 8006984:	2b70      	cmp	r3, #112	@ 0x70
 8006986:	d87b      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006988:	2b60      	cmp	r3, #96	@ 0x60
 800698a:	d050      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x16a>
 800698c:	2b60      	cmp	r3, #96	@ 0x60
 800698e:	d877      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006990:	2b50      	cmp	r3, #80	@ 0x50
 8006992:	d03c      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x14a>
 8006994:	2b50      	cmp	r3, #80	@ 0x50
 8006996:	d873      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 8006998:	2b40      	cmp	r3, #64	@ 0x40
 800699a:	d058      	beq.n	8006a4e <HAL_TIM_ConfigClockSource+0x18a>
 800699c:	2b40      	cmp	r3, #64	@ 0x40
 800699e:	d86f      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80069a0:	2b30      	cmp	r3, #48	@ 0x30
 80069a2:	d064      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80069a4:	2b30      	cmp	r3, #48	@ 0x30
 80069a6:	d86b      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80069a8:	2b20      	cmp	r3, #32
 80069aa:	d060      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80069ac:	2b20      	cmp	r3, #32
 80069ae:	d867      	bhi.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d05c      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d05a      	beq.n	8006a6e <HAL_TIM_ConfigClockSource+0x1aa>
 80069b8:	e062      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069ca:	f000 f9b9 	bl	8006d40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80069dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	609a      	str	r2, [r3, #8]
      break;
 80069e6:	e04f      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069f8:	f000 f9a2 	bl	8006d40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689a      	ldr	r2, [r3, #8]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a0a:	609a      	str	r2, [r3, #8]
      break;
 8006a0c:	e03c      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 f912 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2150      	movs	r1, #80	@ 0x50
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f96c 	bl	8006d04 <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e02c      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f000 f931 	bl	8006ca2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2160      	movs	r1, #96	@ 0x60
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f95c 	bl	8006d04 <TIM_ITRx_SetConfig>
      break;
 8006a4c:	e01c      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f000 f8f2 	bl	8006c44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2140      	movs	r1, #64	@ 0x40
 8006a66:	4618      	mov	r0, r3
 8006a68:	f000 f94c 	bl	8006d04 <TIM_ITRx_SetConfig>
      break;
 8006a6c:	e00c      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f000 f943 	bl	8006d04 <TIM_ITRx_SetConfig>
      break;
 8006a7e:	e003      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	73fb      	strb	r3, [r7, #15]
      break;
 8006a84:	e000      	b.n	8006a88 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006a86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	ffceff88 	.word	0xffceff88
 8006aa8:	00100040 	.word	0x00100040
 8006aac:	00100030 	.word	0x00100030
 8006ab0:	00100020 	.word	0x00100020

08006ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a43      	ldr	r2, [pc, #268]	@ (8006c24 <TIM_Base_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d013      	beq.n	8006b44 <TIM_Base_SetConfig+0x40>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b22:	d00f      	beq.n	8006b44 <TIM_Base_SetConfig+0x40>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a40      	ldr	r2, [pc, #256]	@ (8006c28 <TIM_Base_SetConfig+0x124>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d00b      	beq.n	8006b44 <TIM_Base_SetConfig+0x40>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a3f      	ldr	r2, [pc, #252]	@ (8006c2c <TIM_Base_SetConfig+0x128>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d007      	beq.n	8006b44 <TIM_Base_SetConfig+0x40>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a3e      	ldr	r2, [pc, #248]	@ (8006c30 <TIM_Base_SetConfig+0x12c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_Base_SetConfig+0x40>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8006c34 <TIM_Base_SetConfig+0x130>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d108      	bne.n	8006b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a32      	ldr	r2, [pc, #200]	@ (8006c24 <TIM_Base_SetConfig+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01f      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b64:	d01b      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a2f      	ldr	r2, [pc, #188]	@ (8006c28 <TIM_Base_SetConfig+0x124>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d017      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2e      	ldr	r2, [pc, #184]	@ (8006c2c <TIM_Base_SetConfig+0x128>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2d      	ldr	r2, [pc, #180]	@ (8006c30 <TIM_Base_SetConfig+0x12c>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00f      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a2c      	ldr	r2, [pc, #176]	@ (8006c34 <TIM_Base_SetConfig+0x130>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00b      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2b      	ldr	r2, [pc, #172]	@ (8006c38 <TIM_Base_SetConfig+0x134>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a2a      	ldr	r2, [pc, #168]	@ (8006c3c <TIM_Base_SetConfig+0x138>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0x9a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a29      	ldr	r2, [pc, #164]	@ (8006c40 <TIM_Base_SetConfig+0x13c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d108      	bne.n	8006bb0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ba4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a14      	ldr	r2, [pc, #80]	@ (8006c24 <TIM_Base_SetConfig+0x120>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0xf2>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a16      	ldr	r2, [pc, #88]	@ (8006c34 <TIM_Base_SetConfig+0x130>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0xf2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a15      	ldr	r2, [pc, #84]	@ (8006c38 <TIM_Base_SetConfig+0x134>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0xf2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a14      	ldr	r2, [pc, #80]	@ (8006c3c <TIM_Base_SetConfig+0x138>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0xf2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a13      	ldr	r2, [pc, #76]	@ (8006c40 <TIM_Base_SetConfig+0x13c>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d103      	bne.n	8006bfe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f043 0204 	orr.w	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40014400 	.word	0x40014400
 8006c40:	40014800 	.word	0x40014800

08006c44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 030a 	bic.w	r3, r3, #10
 8006c80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	b087      	sub	sp, #28
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f023 0210 	bic.w	r2, r3, #16
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ccc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	031b      	lsls	r3, r3, #12
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <TIM_ITRx_SetConfig+0x38>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	f043 0307 	orr.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	609a      	str	r2, [r3, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	3714      	adds	r7, #20
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	ffcfff8f 	.word	0xffcfff8f

08006d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	021a      	lsls	r2, r3, #8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	609a      	str	r2, [r3, #8]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d101      	bne.n	8006d98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d94:	2302      	movs	r3, #2
 8006d96:	e06d      	b.n	8006e74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a30      	ldr	r2, [pc, #192]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d108      	bne.n	8006dde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006dd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a20      	ldr	r2, [pc, #128]	@ (8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d022      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e0a:	d01d      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a1d      	ldr	r2, [pc, #116]	@ (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d018      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d013      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00e      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a15      	ldr	r2, [pc, #84]	@ (8006e84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d009      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d004      	beq.n	8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a15      	ldr	r2, [pc, #84]	@ (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d10c      	bne.n	8006e62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40010400 	.word	0x40010400
 8006e88:	40000400 	.word	0x40000400
 8006e8c:	40000800 	.word	0x40000800
 8006e90:	40000c00 	.word	0x40000c00
 8006e94:	40001800 	.word	0x40001800
 8006e98:	40014000 	.word	0x40014000

08006e9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e042      	b.n	8006f70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fb f83f 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2224      	movs	r2, #36	@ 0x24
 8006f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fe1e 	bl	8007b64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f8b3 	bl	8007094 <UART_SetConfig>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d101      	bne.n	8006f38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e01b      	b.n	8006f70 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fe9d 	bl	8007ca8 <UART_CheckIdleState>
 8006f6e:	4603      	mov	r3, r0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08a      	sub	sp, #40	@ 0x28
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d17b      	bne.n	800708a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_UART_Transmit+0x26>
 8006f98:	88fb      	ldrh	r3, [r7, #6]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e074      	b.n	800708c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2221      	movs	r2, #33	@ 0x21
 8006fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fb2:	f7fb fa69 	bl	8002488 <HAL_GetTick>
 8006fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	88fa      	ldrh	r2, [r7, #6]
 8006fbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd0:	d108      	bne.n	8006fe4 <HAL_UART_Transmit+0x6c>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	e003      	b.n	8006fec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fec:	e030      	b.n	8007050 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	2180      	movs	r1, #128	@ 0x80
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 feff 	bl	8007dfc <UART_WaitOnFlagUntilTimeout>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e03d      	b.n	800708c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007024:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	3302      	adds	r3, #2
 800702a:	61bb      	str	r3, [r7, #24]
 800702c:	e007      	b.n	800703e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	3301      	adds	r3, #1
 800703c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b01      	subs	r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007056:	b29b      	uxth	r3, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1c8      	bne.n	8006fee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2200      	movs	r2, #0
 8007064:	2140      	movs	r1, #64	@ 0x40
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 fec8 	bl	8007dfc <UART_WaitOnFlagUntilTimeout>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e006      	b.n	800708c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800708a:	2302      	movs	r3, #2
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007098:	b092      	sub	sp, #72	@ 0x48
 800709a:	af00      	add	r7, sp, #0
 800709c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	4bbe      	ldr	r3, [pc, #760]	@ (80073bc <UART_SetConfig+0x328>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	6812      	ldr	r2, [r2, #0]
 80070ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	68da      	ldr	r2, [r3, #12]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4ab3      	ldr	r2, [pc, #716]	@ (80073c0 <UART_SetConfig+0x32c>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d004      	beq.n	8007100 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070fc:	4313      	orrs	r3, r2
 80070fe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	4baf      	ldr	r3, [pc, #700]	@ (80073c4 <UART_SetConfig+0x330>)
 8007108:	4013      	ands	r3, r2
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	6812      	ldr	r2, [r2, #0]
 800710e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007110:	430b      	orrs	r3, r1
 8007112:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	f023 010f 	bic.w	r1, r3, #15
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	430a      	orrs	r2, r1
 8007128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4aa6      	ldr	r2, [pc, #664]	@ (80073c8 <UART_SetConfig+0x334>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d177      	bne.n	8007224 <UART_SetConfig+0x190>
 8007134:	4ba5      	ldr	r3, [pc, #660]	@ (80073cc <UART_SetConfig+0x338>)
 8007136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007138:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800713c:	2b28      	cmp	r3, #40	@ 0x28
 800713e:	d86d      	bhi.n	800721c <UART_SetConfig+0x188>
 8007140:	a201      	add	r2, pc, #4	@ (adr r2, 8007148 <UART_SetConfig+0xb4>)
 8007142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007146:	bf00      	nop
 8007148:	080071ed 	.word	0x080071ed
 800714c:	0800721d 	.word	0x0800721d
 8007150:	0800721d 	.word	0x0800721d
 8007154:	0800721d 	.word	0x0800721d
 8007158:	0800721d 	.word	0x0800721d
 800715c:	0800721d 	.word	0x0800721d
 8007160:	0800721d 	.word	0x0800721d
 8007164:	0800721d 	.word	0x0800721d
 8007168:	080071f5 	.word	0x080071f5
 800716c:	0800721d 	.word	0x0800721d
 8007170:	0800721d 	.word	0x0800721d
 8007174:	0800721d 	.word	0x0800721d
 8007178:	0800721d 	.word	0x0800721d
 800717c:	0800721d 	.word	0x0800721d
 8007180:	0800721d 	.word	0x0800721d
 8007184:	0800721d 	.word	0x0800721d
 8007188:	080071fd 	.word	0x080071fd
 800718c:	0800721d 	.word	0x0800721d
 8007190:	0800721d 	.word	0x0800721d
 8007194:	0800721d 	.word	0x0800721d
 8007198:	0800721d 	.word	0x0800721d
 800719c:	0800721d 	.word	0x0800721d
 80071a0:	0800721d 	.word	0x0800721d
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	08007205 	.word	0x08007205
 80071ac:	0800721d 	.word	0x0800721d
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	0800721d 	.word	0x0800721d
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	0800721d 	.word	0x0800721d
 80071c0:	0800721d 	.word	0x0800721d
 80071c4:	0800721d 	.word	0x0800721d
 80071c8:	0800720d 	.word	0x0800720d
 80071cc:	0800721d 	.word	0x0800721d
 80071d0:	0800721d 	.word	0x0800721d
 80071d4:	0800721d 	.word	0x0800721d
 80071d8:	0800721d 	.word	0x0800721d
 80071dc:	0800721d 	.word	0x0800721d
 80071e0:	0800721d 	.word	0x0800721d
 80071e4:	0800721d 	.word	0x0800721d
 80071e8:	08007215 	.word	0x08007215
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071f2:	e222      	b.n	800763a <UART_SetConfig+0x5a6>
 80071f4:	2304      	movs	r3, #4
 80071f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071fa:	e21e      	b.n	800763a <UART_SetConfig+0x5a6>
 80071fc:	2308      	movs	r3, #8
 80071fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007202:	e21a      	b.n	800763a <UART_SetConfig+0x5a6>
 8007204:	2310      	movs	r3, #16
 8007206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800720a:	e216      	b.n	800763a <UART_SetConfig+0x5a6>
 800720c:	2320      	movs	r3, #32
 800720e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007212:	e212      	b.n	800763a <UART_SetConfig+0x5a6>
 8007214:	2340      	movs	r3, #64	@ 0x40
 8007216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800721a:	e20e      	b.n	800763a <UART_SetConfig+0x5a6>
 800721c:	2380      	movs	r3, #128	@ 0x80
 800721e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007222:	e20a      	b.n	800763a <UART_SetConfig+0x5a6>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a69      	ldr	r2, [pc, #420]	@ (80073d0 <UART_SetConfig+0x33c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d130      	bne.n	8007290 <UART_SetConfig+0x1fc>
 800722e:	4b67      	ldr	r3, [pc, #412]	@ (80073cc <UART_SetConfig+0x338>)
 8007230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	2b05      	cmp	r3, #5
 8007238:	d826      	bhi.n	8007288 <UART_SetConfig+0x1f4>
 800723a:	a201      	add	r2, pc, #4	@ (adr r2, 8007240 <UART_SetConfig+0x1ac>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007259 	.word	0x08007259
 8007244:	08007261 	.word	0x08007261
 8007248:	08007269 	.word	0x08007269
 800724c:	08007271 	.word	0x08007271
 8007250:	08007279 	.word	0x08007279
 8007254:	08007281 	.word	0x08007281
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800725e:	e1ec      	b.n	800763a <UART_SetConfig+0x5a6>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007266:	e1e8      	b.n	800763a <UART_SetConfig+0x5a6>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800726e:	e1e4      	b.n	800763a <UART_SetConfig+0x5a6>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007276:	e1e0      	b.n	800763a <UART_SetConfig+0x5a6>
 8007278:	2320      	movs	r3, #32
 800727a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800727e:	e1dc      	b.n	800763a <UART_SetConfig+0x5a6>
 8007280:	2340      	movs	r3, #64	@ 0x40
 8007282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007286:	e1d8      	b.n	800763a <UART_SetConfig+0x5a6>
 8007288:	2380      	movs	r3, #128	@ 0x80
 800728a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800728e:	e1d4      	b.n	800763a <UART_SetConfig+0x5a6>
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a4f      	ldr	r2, [pc, #316]	@ (80073d4 <UART_SetConfig+0x340>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d130      	bne.n	80072fc <UART_SetConfig+0x268>
 800729a:	4b4c      	ldr	r3, [pc, #304]	@ (80073cc <UART_SetConfig+0x338>)
 800729c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d826      	bhi.n	80072f4 <UART_SetConfig+0x260>
 80072a6:	a201      	add	r2, pc, #4	@ (adr r2, 80072ac <UART_SetConfig+0x218>)
 80072a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ac:	080072c5 	.word	0x080072c5
 80072b0:	080072cd 	.word	0x080072cd
 80072b4:	080072d5 	.word	0x080072d5
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	2300      	movs	r3, #0
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ca:	e1b6      	b.n	800763a <UART_SetConfig+0x5a6>
 80072cc:	2304      	movs	r3, #4
 80072ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072d2:	e1b2      	b.n	800763a <UART_SetConfig+0x5a6>
 80072d4:	2308      	movs	r3, #8
 80072d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072da:	e1ae      	b.n	800763a <UART_SetConfig+0x5a6>
 80072dc:	2310      	movs	r3, #16
 80072de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072e2:	e1aa      	b.n	800763a <UART_SetConfig+0x5a6>
 80072e4:	2320      	movs	r3, #32
 80072e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072ea:	e1a6      	b.n	800763a <UART_SetConfig+0x5a6>
 80072ec:	2340      	movs	r3, #64	@ 0x40
 80072ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072f2:	e1a2      	b.n	800763a <UART_SetConfig+0x5a6>
 80072f4:	2380      	movs	r3, #128	@ 0x80
 80072f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80072fa:	e19e      	b.n	800763a <UART_SetConfig+0x5a6>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a35      	ldr	r2, [pc, #212]	@ (80073d8 <UART_SetConfig+0x344>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d130      	bne.n	8007368 <UART_SetConfig+0x2d4>
 8007306:	4b31      	ldr	r3, [pc, #196]	@ (80073cc <UART_SetConfig+0x338>)
 8007308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	2b05      	cmp	r3, #5
 8007310:	d826      	bhi.n	8007360 <UART_SetConfig+0x2cc>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <UART_SetConfig+0x284>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007331 	.word	0x08007331
 800731c:	08007339 	.word	0x08007339
 8007320:	08007341 	.word	0x08007341
 8007324:	08007349 	.word	0x08007349
 8007328:	08007351 	.word	0x08007351
 800732c:	08007359 	.word	0x08007359
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007336:	e180      	b.n	800763a <UART_SetConfig+0x5a6>
 8007338:	2304      	movs	r3, #4
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800733e:	e17c      	b.n	800763a <UART_SetConfig+0x5a6>
 8007340:	2308      	movs	r3, #8
 8007342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007346:	e178      	b.n	800763a <UART_SetConfig+0x5a6>
 8007348:	2310      	movs	r3, #16
 800734a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800734e:	e174      	b.n	800763a <UART_SetConfig+0x5a6>
 8007350:	2320      	movs	r3, #32
 8007352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007356:	e170      	b.n	800763a <UART_SetConfig+0x5a6>
 8007358:	2340      	movs	r3, #64	@ 0x40
 800735a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800735e:	e16c      	b.n	800763a <UART_SetConfig+0x5a6>
 8007360:	2380      	movs	r3, #128	@ 0x80
 8007362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007366:	e168      	b.n	800763a <UART_SetConfig+0x5a6>
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1b      	ldr	r2, [pc, #108]	@ (80073dc <UART_SetConfig+0x348>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d142      	bne.n	80073f8 <UART_SetConfig+0x364>
 8007372:	4b16      	ldr	r3, [pc, #88]	@ (80073cc <UART_SetConfig+0x338>)
 8007374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	2b05      	cmp	r3, #5
 800737c:	d838      	bhi.n	80073f0 <UART_SetConfig+0x35c>
 800737e:	a201      	add	r2, pc, #4	@ (adr r2, 8007384 <UART_SetConfig+0x2f0>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	0800739d 	.word	0x0800739d
 8007388:	080073a5 	.word	0x080073a5
 800738c:	080073ad 	.word	0x080073ad
 8007390:	080073b5 	.word	0x080073b5
 8007394:	080073e1 	.word	0x080073e1
 8007398:	080073e9 	.word	0x080073e9
 800739c:	2300      	movs	r3, #0
 800739e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073a2:	e14a      	b.n	800763a <UART_SetConfig+0x5a6>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073aa:	e146      	b.n	800763a <UART_SetConfig+0x5a6>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073b2:	e142      	b.n	800763a <UART_SetConfig+0x5a6>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ba:	e13e      	b.n	800763a <UART_SetConfig+0x5a6>
 80073bc:	cfff69f3 	.word	0xcfff69f3
 80073c0:	58000c00 	.word	0x58000c00
 80073c4:	11fff4ff 	.word	0x11fff4ff
 80073c8:	40011000 	.word	0x40011000
 80073cc:	58024400 	.word	0x58024400
 80073d0:	40004400 	.word	0x40004400
 80073d4:	40004800 	.word	0x40004800
 80073d8:	40004c00 	.word	0x40004c00
 80073dc:	40005000 	.word	0x40005000
 80073e0:	2320      	movs	r3, #32
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e128      	b.n	800763a <UART_SetConfig+0x5a6>
 80073e8:	2340      	movs	r3, #64	@ 0x40
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e124      	b.n	800763a <UART_SetConfig+0x5a6>
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e120      	b.n	800763a <UART_SetConfig+0x5a6>
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4acb      	ldr	r2, [pc, #812]	@ (800772c <UART_SetConfig+0x698>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d176      	bne.n	80074f0 <UART_SetConfig+0x45c>
 8007402:	4bcb      	ldr	r3, [pc, #812]	@ (8007730 <UART_SetConfig+0x69c>)
 8007404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007406:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800740a:	2b28      	cmp	r3, #40	@ 0x28
 800740c:	d86c      	bhi.n	80074e8 <UART_SetConfig+0x454>
 800740e:	a201      	add	r2, pc, #4	@ (adr r2, 8007414 <UART_SetConfig+0x380>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	080074b9 	.word	0x080074b9
 8007418:	080074e9 	.word	0x080074e9
 800741c:	080074e9 	.word	0x080074e9
 8007420:	080074e9 	.word	0x080074e9
 8007424:	080074e9 	.word	0x080074e9
 8007428:	080074e9 	.word	0x080074e9
 800742c:	080074e9 	.word	0x080074e9
 8007430:	080074e9 	.word	0x080074e9
 8007434:	080074c1 	.word	0x080074c1
 8007438:	080074e9 	.word	0x080074e9
 800743c:	080074e9 	.word	0x080074e9
 8007440:	080074e9 	.word	0x080074e9
 8007444:	080074e9 	.word	0x080074e9
 8007448:	080074e9 	.word	0x080074e9
 800744c:	080074e9 	.word	0x080074e9
 8007450:	080074e9 	.word	0x080074e9
 8007454:	080074c9 	.word	0x080074c9
 8007458:	080074e9 	.word	0x080074e9
 800745c:	080074e9 	.word	0x080074e9
 8007460:	080074e9 	.word	0x080074e9
 8007464:	080074e9 	.word	0x080074e9
 8007468:	080074e9 	.word	0x080074e9
 800746c:	080074e9 	.word	0x080074e9
 8007470:	080074e9 	.word	0x080074e9
 8007474:	080074d1 	.word	0x080074d1
 8007478:	080074e9 	.word	0x080074e9
 800747c:	080074e9 	.word	0x080074e9
 8007480:	080074e9 	.word	0x080074e9
 8007484:	080074e9 	.word	0x080074e9
 8007488:	080074e9 	.word	0x080074e9
 800748c:	080074e9 	.word	0x080074e9
 8007490:	080074e9 	.word	0x080074e9
 8007494:	080074d9 	.word	0x080074d9
 8007498:	080074e9 	.word	0x080074e9
 800749c:	080074e9 	.word	0x080074e9
 80074a0:	080074e9 	.word	0x080074e9
 80074a4:	080074e9 	.word	0x080074e9
 80074a8:	080074e9 	.word	0x080074e9
 80074ac:	080074e9 	.word	0x080074e9
 80074b0:	080074e9 	.word	0x080074e9
 80074b4:	080074e1 	.word	0x080074e1
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e0bc      	b.n	800763a <UART_SetConfig+0x5a6>
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e0b8      	b.n	800763a <UART_SetConfig+0x5a6>
 80074c8:	2308      	movs	r3, #8
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e0b4      	b.n	800763a <UART_SetConfig+0x5a6>
 80074d0:	2310      	movs	r3, #16
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e0b0      	b.n	800763a <UART_SetConfig+0x5a6>
 80074d8:	2320      	movs	r3, #32
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e0ac      	b.n	800763a <UART_SetConfig+0x5a6>
 80074e0:	2340      	movs	r3, #64	@ 0x40
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e0a8      	b.n	800763a <UART_SetConfig+0x5a6>
 80074e8:	2380      	movs	r3, #128	@ 0x80
 80074ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ee:	e0a4      	b.n	800763a <UART_SetConfig+0x5a6>
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a8f      	ldr	r2, [pc, #572]	@ (8007734 <UART_SetConfig+0x6a0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d130      	bne.n	800755c <UART_SetConfig+0x4c8>
 80074fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007730 <UART_SetConfig+0x69c>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fe:	f003 0307 	and.w	r3, r3, #7
 8007502:	2b05      	cmp	r3, #5
 8007504:	d826      	bhi.n	8007554 <UART_SetConfig+0x4c0>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <UART_SetConfig+0x478>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007525 	.word	0x08007525
 8007510:	0800752d 	.word	0x0800752d
 8007514:	08007535 	.word	0x08007535
 8007518:	0800753d 	.word	0x0800753d
 800751c:	08007545 	.word	0x08007545
 8007520:	0800754d 	.word	0x0800754d
 8007524:	2300      	movs	r3, #0
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e086      	b.n	800763a <UART_SetConfig+0x5a6>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e082      	b.n	800763a <UART_SetConfig+0x5a6>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e07e      	b.n	800763a <UART_SetConfig+0x5a6>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e07a      	b.n	800763a <UART_SetConfig+0x5a6>
 8007544:	2320      	movs	r3, #32
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e076      	b.n	800763a <UART_SetConfig+0x5a6>
 800754c:	2340      	movs	r3, #64	@ 0x40
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e072      	b.n	800763a <UART_SetConfig+0x5a6>
 8007554:	2380      	movs	r3, #128	@ 0x80
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e06e      	b.n	800763a <UART_SetConfig+0x5a6>
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a75      	ldr	r2, [pc, #468]	@ (8007738 <UART_SetConfig+0x6a4>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d130      	bne.n	80075c8 <UART_SetConfig+0x534>
 8007566:	4b72      	ldr	r3, [pc, #456]	@ (8007730 <UART_SetConfig+0x69c>)
 8007568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	2b05      	cmp	r3, #5
 8007570:	d826      	bhi.n	80075c0 <UART_SetConfig+0x52c>
 8007572:	a201      	add	r2, pc, #4	@ (adr r2, 8007578 <UART_SetConfig+0x4e4>)
 8007574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007578:	08007591 	.word	0x08007591
 800757c:	08007599 	.word	0x08007599
 8007580:	080075a1 	.word	0x080075a1
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b9 	.word	0x080075b9
 8007590:	2300      	movs	r3, #0
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e050      	b.n	800763a <UART_SetConfig+0x5a6>
 8007598:	2304      	movs	r3, #4
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e04c      	b.n	800763a <UART_SetConfig+0x5a6>
 80075a0:	2308      	movs	r3, #8
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e048      	b.n	800763a <UART_SetConfig+0x5a6>
 80075a8:	2310      	movs	r3, #16
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e044      	b.n	800763a <UART_SetConfig+0x5a6>
 80075b0:	2320      	movs	r3, #32
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e040      	b.n	800763a <UART_SetConfig+0x5a6>
 80075b8:	2340      	movs	r3, #64	@ 0x40
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e03c      	b.n	800763a <UART_SetConfig+0x5a6>
 80075c0:	2380      	movs	r3, #128	@ 0x80
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e038      	b.n	800763a <UART_SetConfig+0x5a6>
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a5b      	ldr	r2, [pc, #364]	@ (800773c <UART_SetConfig+0x6a8>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d130      	bne.n	8007634 <UART_SetConfig+0x5a0>
 80075d2:	4b57      	ldr	r3, [pc, #348]	@ (8007730 <UART_SetConfig+0x69c>)
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b05      	cmp	r3, #5
 80075dc:	d826      	bhi.n	800762c <UART_SetConfig+0x598>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <UART_SetConfig+0x550>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	080075fd 	.word	0x080075fd
 80075e8:	08007605 	.word	0x08007605
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800761d 	.word	0x0800761d
 80075f8:	08007625 	.word	0x08007625
 80075fc:	2302      	movs	r3, #2
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e01a      	b.n	800763a <UART_SetConfig+0x5a6>
 8007604:	2304      	movs	r3, #4
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e016      	b.n	800763a <UART_SetConfig+0x5a6>
 800760c:	2308      	movs	r3, #8
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e012      	b.n	800763a <UART_SetConfig+0x5a6>
 8007614:	2310      	movs	r3, #16
 8007616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761a:	e00e      	b.n	800763a <UART_SetConfig+0x5a6>
 800761c:	2320      	movs	r3, #32
 800761e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007622:	e00a      	b.n	800763a <UART_SetConfig+0x5a6>
 8007624:	2340      	movs	r3, #64	@ 0x40
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e006      	b.n	800763a <UART_SetConfig+0x5a6>
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e002      	b.n	800763a <UART_SetConfig+0x5a6>
 8007634:	2380      	movs	r3, #128	@ 0x80
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a3f      	ldr	r2, [pc, #252]	@ (800773c <UART_SetConfig+0x6a8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	f040 80f8 	bne.w	8007836 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007646:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800764a:	2b20      	cmp	r3, #32
 800764c:	dc46      	bgt.n	80076dc <UART_SetConfig+0x648>
 800764e:	2b02      	cmp	r3, #2
 8007650:	f2c0 8082 	blt.w	8007758 <UART_SetConfig+0x6c4>
 8007654:	3b02      	subs	r3, #2
 8007656:	2b1e      	cmp	r3, #30
 8007658:	d87e      	bhi.n	8007758 <UART_SetConfig+0x6c4>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <UART_SetConfig+0x5cc>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	080076e3 	.word	0x080076e3
 8007664:	08007759 	.word	0x08007759
 8007668:	080076eb 	.word	0x080076eb
 800766c:	08007759 	.word	0x08007759
 8007670:	08007759 	.word	0x08007759
 8007674:	08007759 	.word	0x08007759
 8007678:	080076fb 	.word	0x080076fb
 800767c:	08007759 	.word	0x08007759
 8007680:	08007759 	.word	0x08007759
 8007684:	08007759 	.word	0x08007759
 8007688:	08007759 	.word	0x08007759
 800768c:	08007759 	.word	0x08007759
 8007690:	08007759 	.word	0x08007759
 8007694:	08007759 	.word	0x08007759
 8007698:	0800770b 	.word	0x0800770b
 800769c:	08007759 	.word	0x08007759
 80076a0:	08007759 	.word	0x08007759
 80076a4:	08007759 	.word	0x08007759
 80076a8:	08007759 	.word	0x08007759
 80076ac:	08007759 	.word	0x08007759
 80076b0:	08007759 	.word	0x08007759
 80076b4:	08007759 	.word	0x08007759
 80076b8:	08007759 	.word	0x08007759
 80076bc:	08007759 	.word	0x08007759
 80076c0:	08007759 	.word	0x08007759
 80076c4:	08007759 	.word	0x08007759
 80076c8:	08007759 	.word	0x08007759
 80076cc:	08007759 	.word	0x08007759
 80076d0:	08007759 	.word	0x08007759
 80076d4:	08007759 	.word	0x08007759
 80076d8:	0800774b 	.word	0x0800774b
 80076dc:	2b40      	cmp	r3, #64	@ 0x40
 80076de:	d037      	beq.n	8007750 <UART_SetConfig+0x6bc>
 80076e0:	e03a      	b.n	8007758 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80076e2:	f7fd fc89 	bl	8004ff8 <HAL_RCCEx_GetD3PCLK1Freq>
 80076e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076e8:	e03c      	b.n	8007764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fd fc98 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80076f8:	e034      	b.n	8007764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076fa:	f107 0318 	add.w	r3, r7, #24
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd fde4 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007708:	e02c      	b.n	8007764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800770a:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <UART_SetConfig+0x69c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0320 	and.w	r3, r3, #32
 8007712:	2b00      	cmp	r3, #0
 8007714:	d016      	beq.n	8007744 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <UART_SetConfig+0x69c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	08db      	lsrs	r3, r3, #3
 800771c:	f003 0303 	and.w	r3, r3, #3
 8007720:	4a07      	ldr	r2, [pc, #28]	@ (8007740 <UART_SetConfig+0x6ac>)
 8007722:	fa22 f303 	lsr.w	r3, r2, r3
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007728:	e01c      	b.n	8007764 <UART_SetConfig+0x6d0>
 800772a:	bf00      	nop
 800772c:	40011400 	.word	0x40011400
 8007730:	58024400 	.word	0x58024400
 8007734:	40007800 	.word	0x40007800
 8007738:	40007c00 	.word	0x40007c00
 800773c:	58000c00 	.word	0x58000c00
 8007740:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007744:	4b9d      	ldr	r3, [pc, #628]	@ (80079bc <UART_SetConfig+0x928>)
 8007746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007748:	e00c      	b.n	8007764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800774a:	4b9d      	ldr	r3, [pc, #628]	@ (80079c0 <UART_SetConfig+0x92c>)
 800774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800774e:	e009      	b.n	8007764 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007756:	e005      	b.n	8007764 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007762:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 81de 	beq.w	8007b28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	4a94      	ldr	r2, [pc, #592]	@ (80079c4 <UART_SetConfig+0x930>)
 8007772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007776:	461a      	mov	r2, r3
 8007778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800777a:	fbb3 f3f2 	udiv	r3, r3, r2
 800777e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	4613      	mov	r3, r2
 8007786:	005b      	lsls	r3, r3, #1
 8007788:	4413      	add	r3, r2
 800778a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778c:	429a      	cmp	r2, r3
 800778e:	d305      	bcc.n	800779c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007798:	429a      	cmp	r2, r3
 800779a:	d903      	bls.n	80077a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80077a2:	e1c1      	b.n	8007b28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a6:	2200      	movs	r2, #0
 80077a8:	60bb      	str	r3, [r7, #8]
 80077aa:	60fa      	str	r2, [r7, #12]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	4a84      	ldr	r2, [pc, #528]	@ (80079c4 <UART_SetConfig+0x930>)
 80077b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2200      	movs	r2, #0
 80077ba:	603b      	str	r3, [r7, #0]
 80077bc:	607a      	str	r2, [r7, #4]
 80077be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077c6:	f7f8 ff9f 	bl	8000708 <__aeabi_uldivmod>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	4610      	mov	r0, r2
 80077d0:	4619      	mov	r1, r3
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	020b      	lsls	r3, r1, #8
 80077dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077e0:	0202      	lsls	r2, r0, #8
 80077e2:	6979      	ldr	r1, [r7, #20]
 80077e4:	6849      	ldr	r1, [r1, #4]
 80077e6:	0849      	lsrs	r1, r1, #1
 80077e8:	2000      	movs	r0, #0
 80077ea:	460c      	mov	r4, r1
 80077ec:	4605      	mov	r5, r0
 80077ee:	eb12 0804 	adds.w	r8, r2, r4
 80077f2:	eb43 0905 	adc.w	r9, r3, r5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	469a      	mov	sl, r3
 80077fe:	4693      	mov	fp, r2
 8007800:	4652      	mov	r2, sl
 8007802:	465b      	mov	r3, fp
 8007804:	4640      	mov	r0, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7f8 ff7e 	bl	8000708 <__aeabi_uldivmod>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4613      	mov	r3, r2
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800781a:	d308      	bcc.n	800782e <UART_SetConfig+0x79a>
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007822:	d204      	bcs.n	800782e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	e17c      	b.n	8007b28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007834:	e178      	b.n	8007b28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800783e:	f040 80c5 	bne.w	80079cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007842:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007846:	2b20      	cmp	r3, #32
 8007848:	dc48      	bgt.n	80078dc <UART_SetConfig+0x848>
 800784a:	2b00      	cmp	r3, #0
 800784c:	db7b      	blt.n	8007946 <UART_SetConfig+0x8b2>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d879      	bhi.n	8007946 <UART_SetConfig+0x8b2>
 8007852:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <UART_SetConfig+0x7c4>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	080078e3 	.word	0x080078e3
 800785c:	080078eb 	.word	0x080078eb
 8007860:	08007947 	.word	0x08007947
 8007864:	08007947 	.word	0x08007947
 8007868:	080078f3 	.word	0x080078f3
 800786c:	08007947 	.word	0x08007947
 8007870:	08007947 	.word	0x08007947
 8007874:	08007947 	.word	0x08007947
 8007878:	08007903 	.word	0x08007903
 800787c:	08007947 	.word	0x08007947
 8007880:	08007947 	.word	0x08007947
 8007884:	08007947 	.word	0x08007947
 8007888:	08007947 	.word	0x08007947
 800788c:	08007947 	.word	0x08007947
 8007890:	08007947 	.word	0x08007947
 8007894:	08007947 	.word	0x08007947
 8007898:	08007913 	.word	0x08007913
 800789c:	08007947 	.word	0x08007947
 80078a0:	08007947 	.word	0x08007947
 80078a4:	08007947 	.word	0x08007947
 80078a8:	08007947 	.word	0x08007947
 80078ac:	08007947 	.word	0x08007947
 80078b0:	08007947 	.word	0x08007947
 80078b4:	08007947 	.word	0x08007947
 80078b8:	08007947 	.word	0x08007947
 80078bc:	08007947 	.word	0x08007947
 80078c0:	08007947 	.word	0x08007947
 80078c4:	08007947 	.word	0x08007947
 80078c8:	08007947 	.word	0x08007947
 80078cc:	08007947 	.word	0x08007947
 80078d0:	08007947 	.word	0x08007947
 80078d4:	08007947 	.word	0x08007947
 80078d8:	08007939 	.word	0x08007939
 80078dc:	2b40      	cmp	r3, #64	@ 0x40
 80078de:	d02e      	beq.n	800793e <UART_SetConfig+0x8aa>
 80078e0:	e031      	b.n	8007946 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e2:	f7fc f953 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 80078e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078e8:	e033      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ea:	f7fc f965 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 80078ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078f0:	e02f      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fd fb94 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007900:	e027      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007902:	f107 0318 	add.w	r3, r7, #24
 8007906:	4618      	mov	r0, r3
 8007908:	f7fd fce0 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007910:	e01f      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007912:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <UART_SetConfig+0x934>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d009      	beq.n	8007932 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800791e:	4b2a      	ldr	r3, [pc, #168]	@ (80079c8 <UART_SetConfig+0x934>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	08db      	lsrs	r3, r3, #3
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	4a24      	ldr	r2, [pc, #144]	@ (80079bc <UART_SetConfig+0x928>)
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007930:	e00f      	b.n	8007952 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007932:	4b22      	ldr	r3, [pc, #136]	@ (80079bc <UART_SetConfig+0x928>)
 8007934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007936:	e00c      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007938:	4b21      	ldr	r3, [pc, #132]	@ (80079c0 <UART_SetConfig+0x92c>)
 800793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800793c:	e009      	b.n	8007952 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007944:	e005      	b.n	8007952 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007950:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80e7 	beq.w	8007b28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795e:	4a19      	ldr	r2, [pc, #100]	@ (80079c4 <UART_SetConfig+0x930>)
 8007960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007964:	461a      	mov	r2, r3
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007968:	fbb3 f3f2 	udiv	r3, r3, r2
 800796c:	005a      	lsls	r2, r3, #1
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	085b      	lsrs	r3, r3, #1
 8007974:	441a      	add	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	fbb2 f3f3 	udiv	r3, r2, r3
 800797e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007982:	2b0f      	cmp	r3, #15
 8007984:	d916      	bls.n	80079b4 <UART_SetConfig+0x920>
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800798c:	d212      	bcs.n	80079b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007990:	b29b      	uxth	r3, r3
 8007992:	f023 030f 	bic.w	r3, r3, #15
 8007996:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	085b      	lsrs	r3, r3, #1
 800799c:	b29b      	uxth	r3, r3
 800799e:	f003 0307 	and.w	r3, r3, #7
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80079a6:	4313      	orrs	r3, r2
 80079a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	e0b9      	b.n	8007b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079ba:	e0b5      	b.n	8007b28 <UART_SetConfig+0xa94>
 80079bc:	03d09000 	.word	0x03d09000
 80079c0:	003d0900 	.word	0x003d0900
 80079c4:	0800c9a0 	.word	0x0800c9a0
 80079c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80079cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079d0:	2b20      	cmp	r3, #32
 80079d2:	dc49      	bgt.n	8007a68 <UART_SetConfig+0x9d4>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	db7c      	blt.n	8007ad2 <UART_SetConfig+0xa3e>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d87a      	bhi.n	8007ad2 <UART_SetConfig+0xa3e>
 80079dc:	a201      	add	r2, pc, #4	@ (adr r2, 80079e4 <UART_SetConfig+0x950>)
 80079de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e2:	bf00      	nop
 80079e4:	08007a6f 	.word	0x08007a6f
 80079e8:	08007a77 	.word	0x08007a77
 80079ec:	08007ad3 	.word	0x08007ad3
 80079f0:	08007ad3 	.word	0x08007ad3
 80079f4:	08007a7f 	.word	0x08007a7f
 80079f8:	08007ad3 	.word	0x08007ad3
 80079fc:	08007ad3 	.word	0x08007ad3
 8007a00:	08007ad3 	.word	0x08007ad3
 8007a04:	08007a8f 	.word	0x08007a8f
 8007a08:	08007ad3 	.word	0x08007ad3
 8007a0c:	08007ad3 	.word	0x08007ad3
 8007a10:	08007ad3 	.word	0x08007ad3
 8007a14:	08007ad3 	.word	0x08007ad3
 8007a18:	08007ad3 	.word	0x08007ad3
 8007a1c:	08007ad3 	.word	0x08007ad3
 8007a20:	08007ad3 	.word	0x08007ad3
 8007a24:	08007a9f 	.word	0x08007a9f
 8007a28:	08007ad3 	.word	0x08007ad3
 8007a2c:	08007ad3 	.word	0x08007ad3
 8007a30:	08007ad3 	.word	0x08007ad3
 8007a34:	08007ad3 	.word	0x08007ad3
 8007a38:	08007ad3 	.word	0x08007ad3
 8007a3c:	08007ad3 	.word	0x08007ad3
 8007a40:	08007ad3 	.word	0x08007ad3
 8007a44:	08007ad3 	.word	0x08007ad3
 8007a48:	08007ad3 	.word	0x08007ad3
 8007a4c:	08007ad3 	.word	0x08007ad3
 8007a50:	08007ad3 	.word	0x08007ad3
 8007a54:	08007ad3 	.word	0x08007ad3
 8007a58:	08007ad3 	.word	0x08007ad3
 8007a5c:	08007ad3 	.word	0x08007ad3
 8007a60:	08007ad3 	.word	0x08007ad3
 8007a64:	08007ac5 	.word	0x08007ac5
 8007a68:	2b40      	cmp	r3, #64	@ 0x40
 8007a6a:	d02e      	beq.n	8007aca <UART_SetConfig+0xa36>
 8007a6c:	e031      	b.n	8007ad2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a6e:	f7fc f88d 	bl	8003b8c <HAL_RCC_GetPCLK1Freq>
 8007a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a74:	e033      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a76:	f7fc f89f 	bl	8003bb8 <HAL_RCC_GetPCLK2Freq>
 8007a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a7c:	e02f      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd face 	bl	8005024 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a8c:	e027      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a8e:	f107 0318 	add.w	r3, r7, #24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd fc1a 	bl	80052cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a9c:	e01f      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b54 <UART_SetConfig+0xac0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8007b54 <UART_SetConfig+0xac0>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	08db      	lsrs	r3, r3, #3
 8007ab0:	f003 0303 	and.w	r3, r3, #3
 8007ab4:	4a28      	ldr	r2, [pc, #160]	@ (8007b58 <UART_SetConfig+0xac4>)
 8007ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007abc:	e00f      	b.n	8007ade <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007abe:	4b26      	ldr	r3, [pc, #152]	@ (8007b58 <UART_SetConfig+0xac4>)
 8007ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac2:	e00c      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ac4:	4b25      	ldr	r3, [pc, #148]	@ (8007b5c <UART_SetConfig+0xac8>)
 8007ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ac8:	e009      	b.n	8007ade <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ad0:	e005      	b.n	8007ade <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007adc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d021      	beq.n	8007b28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <UART_SetConfig+0xacc>)
 8007aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aee:	461a      	mov	r2, r3
 8007af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007af2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	085b      	lsrs	r3, r3, #1
 8007afc:	441a      	add	r2, r3
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b0a:	2b0f      	cmp	r3, #15
 8007b0c:	d909      	bls.n	8007b22 <UART_SetConfig+0xa8e>
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b14:	d205      	bcs.n	8007b22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60da      	str	r2, [r3, #12]
 8007b20:	e002      	b.n	8007b28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	2200      	movs	r2, #0
 8007b42:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007b44:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3748      	adds	r7, #72	@ 0x48
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	03d09000 	.word	0x03d09000
 8007b5c:	003d0900 	.word	0x003d0900
 8007b60:	0800c9a0 	.word	0x0800c9a0

08007b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b70:	f003 0308 	and.w	r3, r3, #8
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd6:	f003 0304 	and.w	r3, r3, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01a      	beq.n	8007c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c62:	d10a      	bne.n	8007c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b098      	sub	sp, #96	@ 0x60
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cb8:	f7fa fbe6 	bl	8002488 <HAL_GetTick>
 8007cbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d12f      	bne.n	8007d2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ccc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f88e 	bl	8007dfc <UART_WaitOnFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d022      	beq.n	8007d2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d06:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e6      	bne.n	8007ce6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2220      	movs	r2, #32
 8007d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e063      	b.n	8007df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0304 	and.w	r3, r3, #4
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	d149      	bne.n	8007dce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d42:	2200      	movs	r2, #0
 8007d44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f857 	bl	8007dfc <UART_WaitOnFlagUntilTimeout>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d03c      	beq.n	8007dce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	e853 3f00 	ldrex	r3, [r3]
 8007d60:	623b      	str	r3, [r7, #32]
   return(result);
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1e6      	bne.n	8007d54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da6:	61fa      	str	r2, [r7, #28]
 8007da8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007daa:	69b9      	ldr	r1, [r7, #24]
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	617b      	str	r3, [r7, #20]
   return(result);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1e5      	bne.n	8007d86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e012      	b.n	8007df4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3758      	adds	r7, #88	@ 0x58
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e0c:	e04f      	b.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d04b      	beq.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e16:	f7fa fb37 	bl	8002488 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d302      	bcc.n	8007e2c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e04e      	b.n	8007ece <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d037      	beq.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b80      	cmp	r3, #128	@ 0x80
 8007e42:	d034      	beq.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b40      	cmp	r3, #64	@ 0x40
 8007e48:	d031      	beq.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	f003 0308 	and.w	r3, r3, #8
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d110      	bne.n	8007e7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 f839 	bl	8007ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2208      	movs	r2, #8
 8007e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e029      	b.n	8007ece <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e88:	d111      	bne.n	8007eae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 f81f 	bl	8007ed8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e00f      	b.n	8007ece <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69da      	ldr	r2, [r3, #28]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	bf0c      	ite	eq
 8007ebe:	2301      	moveq	r3, #1
 8007ec0:	2300      	movne	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d0a0      	beq.n	8007e0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b095      	sub	sp, #84	@ 0x54
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee8:	e853 3f00 	ldrex	r3, [r3]
 8007eec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e6      	bne.n	8007ee0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3308      	adds	r3, #8
 8007f18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	4b1e      	ldr	r3, [pc, #120]	@ (8007fa0 <UART_EndRxTransfer+0xc8>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3308      	adds	r3, #8
 8007f30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f3a:	e841 2300 	strex	r3, r2, [r1]
 8007f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1e5      	bne.n	8007f12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d118      	bne.n	8007f80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f023 0310 	bic.w	r3, r3, #16
 8007f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	6979      	ldr	r1, [r7, #20]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	613b      	str	r3, [r7, #16]
   return(result);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f94:	bf00      	nop
 8007f96:	3754      	adds	r7, #84	@ 0x54
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr
 8007fa0:	effffffe 	.word	0xeffffffe

08007fa4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d101      	bne.n	8007fba <HAL_UARTEx_DisableFifoMode+0x16>
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	e027      	b.n	800800a <HAL_UARTEx_DisableFifoMode+0x66>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2224      	movs	r2, #36	@ 0x24
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fe8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
 800801e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800802a:	2302      	movs	r3, #2
 800802c:	e02d      	b.n	800808a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2224      	movs	r2, #36	@ 0x24
 800803a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	683a      	ldr	r2, [r7, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f850 	bl	8008110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d101      	bne.n	80080aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080a6:	2302      	movs	r3, #2
 80080a8:	e02d      	b.n	8008106 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2224      	movs	r2, #36	@ 0x24
 80080b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0201 	bic.w	r2, r2, #1
 80080d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f812 	bl	8008110 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2220      	movs	r2, #32
 80080f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
	...

08008110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800811c:	2b00      	cmp	r3, #0
 800811e:	d108      	bne.n	8008132 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008130:	e031      	b.n	8008196 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008132:	2310      	movs	r3, #16
 8008134:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008136:	2310      	movs	r3, #16
 8008138:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	0e5b      	lsrs	r3, r3, #25
 8008142:	b2db      	uxtb	r3, r3
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	0f5b      	lsrs	r3, r3, #29
 8008152:	b2db      	uxtb	r3, r3
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	7b3a      	ldrb	r2, [r7, #12]
 800815e:	4911      	ldr	r1, [pc, #68]	@ (80081a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008160:	5c8a      	ldrb	r2, [r1, r2]
 8008162:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008166:	7b3a      	ldrb	r2, [r7, #12]
 8008168:	490f      	ldr	r1, [pc, #60]	@ (80081a8 <UARTEx_SetNbDataToProcess+0x98>)
 800816a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800816c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008170:	b29a      	uxth	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	7b7a      	ldrb	r2, [r7, #13]
 800817c:	4909      	ldr	r1, [pc, #36]	@ (80081a4 <UARTEx_SetNbDataToProcess+0x94>)
 800817e:	5c8a      	ldrb	r2, [r1, r2]
 8008180:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008184:	7b7a      	ldrb	r2, [r7, #13]
 8008186:	4908      	ldr	r1, [pc, #32]	@ (80081a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008188:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800818a:	fb93 f3f2 	sdiv	r3, r3, r2
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	0800c9b8 	.word	0x0800c9b8
 80081a8:	0800c9c0 	.word	0x0800c9c0

080081ac <__cvt>:
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	ed2d 8b02 	vpush	{d8}
 80081b2:	eeb0 8b40 	vmov.f64	d8, d0
 80081b6:	b085      	sub	sp, #20
 80081b8:	4617      	mov	r7, r2
 80081ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80081bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081be:	ee18 2a90 	vmov	r2, s17
 80081c2:	f025 0520 	bic.w	r5, r5, #32
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	bfb6      	itet	lt
 80081ca:	222d      	movlt	r2, #45	@ 0x2d
 80081cc:	2200      	movge	r2, #0
 80081ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80081d2:	2d46      	cmp	r5, #70	@ 0x46
 80081d4:	460c      	mov	r4, r1
 80081d6:	701a      	strb	r2, [r3, #0]
 80081d8:	d004      	beq.n	80081e4 <__cvt+0x38>
 80081da:	2d45      	cmp	r5, #69	@ 0x45
 80081dc:	d100      	bne.n	80081e0 <__cvt+0x34>
 80081de:	3401      	adds	r4, #1
 80081e0:	2102      	movs	r1, #2
 80081e2:	e000      	b.n	80081e6 <__cvt+0x3a>
 80081e4:	2103      	movs	r1, #3
 80081e6:	ab03      	add	r3, sp, #12
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	ab02      	add	r3, sp, #8
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	4622      	mov	r2, r4
 80081f0:	4633      	mov	r3, r6
 80081f2:	eeb0 0b48 	vmov.f64	d0, d8
 80081f6:	f001 f883 	bl	8009300 <_dtoa_r>
 80081fa:	2d47      	cmp	r5, #71	@ 0x47
 80081fc:	d114      	bne.n	8008228 <__cvt+0x7c>
 80081fe:	07fb      	lsls	r3, r7, #31
 8008200:	d50a      	bpl.n	8008218 <__cvt+0x6c>
 8008202:	1902      	adds	r2, r0, r4
 8008204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820c:	bf08      	it	eq
 800820e:	9203      	streq	r2, [sp, #12]
 8008210:	2130      	movs	r1, #48	@ 0x30
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4293      	cmp	r3, r2
 8008216:	d319      	bcc.n	800824c <__cvt+0xa0>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800821c:	1a1b      	subs	r3, r3, r0
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	b005      	add	sp, #20
 8008222:	ecbd 8b02 	vpop	{d8}
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008228:	2d46      	cmp	r5, #70	@ 0x46
 800822a:	eb00 0204 	add.w	r2, r0, r4
 800822e:	d1e9      	bne.n	8008204 <__cvt+0x58>
 8008230:	7803      	ldrb	r3, [r0, #0]
 8008232:	2b30      	cmp	r3, #48	@ 0x30
 8008234:	d107      	bne.n	8008246 <__cvt+0x9a>
 8008236:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800823a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823e:	bf1c      	itt	ne
 8008240:	f1c4 0401 	rsbne	r4, r4, #1
 8008244:	6034      	strne	r4, [r6, #0]
 8008246:	6833      	ldr	r3, [r6, #0]
 8008248:	441a      	add	r2, r3
 800824a:	e7db      	b.n	8008204 <__cvt+0x58>
 800824c:	1c5c      	adds	r4, r3, #1
 800824e:	9403      	str	r4, [sp, #12]
 8008250:	7019      	strb	r1, [r3, #0]
 8008252:	e7de      	b.n	8008212 <__cvt+0x66>

08008254 <__exponent>:
 8008254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	bfba      	itte	lt
 800825a:	4249      	neglt	r1, r1
 800825c:	232d      	movlt	r3, #45	@ 0x2d
 800825e:	232b      	movge	r3, #43	@ 0x2b
 8008260:	2909      	cmp	r1, #9
 8008262:	7002      	strb	r2, [r0, #0]
 8008264:	7043      	strb	r3, [r0, #1]
 8008266:	dd29      	ble.n	80082bc <__exponent+0x68>
 8008268:	f10d 0307 	add.w	r3, sp, #7
 800826c:	461d      	mov	r5, r3
 800826e:	270a      	movs	r7, #10
 8008270:	461a      	mov	r2, r3
 8008272:	fbb1 f6f7 	udiv	r6, r1, r7
 8008276:	fb07 1416 	mls	r4, r7, r6, r1
 800827a:	3430      	adds	r4, #48	@ 0x30
 800827c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008280:	460c      	mov	r4, r1
 8008282:	2c63      	cmp	r4, #99	@ 0x63
 8008284:	f103 33ff 	add.w	r3, r3, #4294967295
 8008288:	4631      	mov	r1, r6
 800828a:	dcf1      	bgt.n	8008270 <__exponent+0x1c>
 800828c:	3130      	adds	r1, #48	@ 0x30
 800828e:	1e94      	subs	r4, r2, #2
 8008290:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008294:	1c41      	adds	r1, r0, #1
 8008296:	4623      	mov	r3, r4
 8008298:	42ab      	cmp	r3, r5
 800829a:	d30a      	bcc.n	80082b2 <__exponent+0x5e>
 800829c:	f10d 0309 	add.w	r3, sp, #9
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	42ac      	cmp	r4, r5
 80082a4:	bf88      	it	hi
 80082a6:	2300      	movhi	r3, #0
 80082a8:	3302      	adds	r3, #2
 80082aa:	4403      	add	r3, r0
 80082ac:	1a18      	subs	r0, r3, r0
 80082ae:	b003      	add	sp, #12
 80082b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80082ba:	e7ed      	b.n	8008298 <__exponent+0x44>
 80082bc:	2330      	movs	r3, #48	@ 0x30
 80082be:	3130      	adds	r1, #48	@ 0x30
 80082c0:	7083      	strb	r3, [r0, #2]
 80082c2:	70c1      	strb	r1, [r0, #3]
 80082c4:	1d03      	adds	r3, r0, #4
 80082c6:	e7f1      	b.n	80082ac <__exponent+0x58>

080082c8 <_printf_float>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	b08d      	sub	sp, #52	@ 0x34
 80082ce:	460c      	mov	r4, r1
 80082d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082d4:	4616      	mov	r6, r2
 80082d6:	461f      	mov	r7, r3
 80082d8:	4605      	mov	r5, r0
 80082da:	f000 ff0b 	bl	80090f4 <_localeconv_r>
 80082de:	f8d0 b000 	ldr.w	fp, [r0]
 80082e2:	4658      	mov	r0, fp
 80082e4:	f7f8 f84c 	bl	8000380 <strlen>
 80082e8:	2300      	movs	r3, #0
 80082ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80082ec:	f8d8 3000 	ldr.w	r3, [r8]
 80082f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	9005      	str	r0, [sp, #20]
 80082f8:	3307      	adds	r3, #7
 80082fa:	f023 0307 	bic.w	r3, r3, #7
 80082fe:	f103 0108 	add.w	r1, r3, #8
 8008302:	f8c8 1000 	str.w	r1, [r8]
 8008306:	ed93 0b00 	vldr	d0, [r3]
 800830a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008568 <_printf_float+0x2a0>
 800830e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008312:	eeb4 7b46 	vcmp.f64	d7, d6
 8008316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800831e:	dd24      	ble.n	800836a <_printf_float+0xa2>
 8008320:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008328:	d502      	bpl.n	8008330 <_printf_float+0x68>
 800832a:	232d      	movs	r3, #45	@ 0x2d
 800832c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008330:	498f      	ldr	r1, [pc, #572]	@ (8008570 <_printf_float+0x2a8>)
 8008332:	4b90      	ldr	r3, [pc, #576]	@ (8008574 <_printf_float+0x2ac>)
 8008334:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008338:	bf94      	ite	ls
 800833a:	4688      	movls	r8, r1
 800833c:	4698      	movhi	r8, r3
 800833e:	f022 0204 	bic.w	r2, r2, #4
 8008342:	2303      	movs	r3, #3
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	f04f 0a00 	mov.w	sl, #0
 800834c:	9700      	str	r7, [sp, #0]
 800834e:	4633      	mov	r3, r6
 8008350:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008352:	4621      	mov	r1, r4
 8008354:	4628      	mov	r0, r5
 8008356:	f000 f9d1 	bl	80086fc <_printf_common>
 800835a:	3001      	adds	r0, #1
 800835c:	f040 8089 	bne.w	8008472 <_printf_float+0x1aa>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	b00d      	add	sp, #52	@ 0x34
 8008366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800836a:	eeb4 0b40 	vcmp.f64	d0, d0
 800836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008372:	d709      	bvc.n	8008388 <_printf_float+0xc0>
 8008374:	ee10 3a90 	vmov	r3, s1
 8008378:	2b00      	cmp	r3, #0
 800837a:	bfbc      	itt	lt
 800837c:	232d      	movlt	r3, #45	@ 0x2d
 800837e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008382:	497d      	ldr	r1, [pc, #500]	@ (8008578 <_printf_float+0x2b0>)
 8008384:	4b7d      	ldr	r3, [pc, #500]	@ (800857c <_printf_float+0x2b4>)
 8008386:	e7d5      	b.n	8008334 <_printf_float+0x6c>
 8008388:	6863      	ldr	r3, [r4, #4]
 800838a:	1c59      	adds	r1, r3, #1
 800838c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008390:	d139      	bne.n	8008406 <_printf_float+0x13e>
 8008392:	2306      	movs	r3, #6
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800839a:	2300      	movs	r3, #0
 800839c:	6022      	str	r2, [r4, #0]
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80083a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80083a6:	ab09      	add	r3, sp, #36	@ 0x24
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	6861      	ldr	r1, [r4, #4]
 80083ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083b0:	4628      	mov	r0, r5
 80083b2:	f7ff fefb 	bl	80081ac <__cvt>
 80083b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083bc:	4680      	mov	r8, r0
 80083be:	d129      	bne.n	8008414 <_printf_float+0x14c>
 80083c0:	1cc8      	adds	r0, r1, #3
 80083c2:	db02      	blt.n	80083ca <_printf_float+0x102>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	4299      	cmp	r1, r3
 80083c8:	dd41      	ble.n	800844e <_printf_float+0x186>
 80083ca:	f1a9 0902 	sub.w	r9, r9, #2
 80083ce:	fa5f f989 	uxtb.w	r9, r9
 80083d2:	3901      	subs	r1, #1
 80083d4:	464a      	mov	r2, r9
 80083d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083da:	9109      	str	r1, [sp, #36]	@ 0x24
 80083dc:	f7ff ff3a 	bl	8008254 <__exponent>
 80083e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083e2:	1813      	adds	r3, r2, r0
 80083e4:	2a01      	cmp	r2, #1
 80083e6:	4682      	mov	sl, r0
 80083e8:	6123      	str	r3, [r4, #16]
 80083ea:	dc02      	bgt.n	80083f2 <_printf_float+0x12a>
 80083ec:	6822      	ldr	r2, [r4, #0]
 80083ee:	07d2      	lsls	r2, r2, #31
 80083f0:	d501      	bpl.n	80083f6 <_printf_float+0x12e>
 80083f2:	3301      	adds	r3, #1
 80083f4:	6123      	str	r3, [r4, #16]
 80083f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0a6      	beq.n	800834c <_printf_float+0x84>
 80083fe:	232d      	movs	r3, #45	@ 0x2d
 8008400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008404:	e7a2      	b.n	800834c <_printf_float+0x84>
 8008406:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800840a:	d1c4      	bne.n	8008396 <_printf_float+0xce>
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1c2      	bne.n	8008396 <_printf_float+0xce>
 8008410:	2301      	movs	r3, #1
 8008412:	e7bf      	b.n	8008394 <_printf_float+0xcc>
 8008414:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008418:	d9db      	bls.n	80083d2 <_printf_float+0x10a>
 800841a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800841e:	d118      	bne.n	8008452 <_printf_float+0x18a>
 8008420:	2900      	cmp	r1, #0
 8008422:	6863      	ldr	r3, [r4, #4]
 8008424:	dd0b      	ble.n	800843e <_printf_float+0x176>
 8008426:	6121      	str	r1, [r4, #16]
 8008428:	b913      	cbnz	r3, 8008430 <_printf_float+0x168>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	07d0      	lsls	r0, r2, #31
 800842e:	d502      	bpl.n	8008436 <_printf_float+0x16e>
 8008430:	3301      	adds	r3, #1
 8008432:	440b      	add	r3, r1
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008438:	f04f 0a00 	mov.w	sl, #0
 800843c:	e7db      	b.n	80083f6 <_printf_float+0x12e>
 800843e:	b913      	cbnz	r3, 8008446 <_printf_float+0x17e>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	07d2      	lsls	r2, r2, #31
 8008444:	d501      	bpl.n	800844a <_printf_float+0x182>
 8008446:	3302      	adds	r3, #2
 8008448:	e7f4      	b.n	8008434 <_printf_float+0x16c>
 800844a:	2301      	movs	r3, #1
 800844c:	e7f2      	b.n	8008434 <_printf_float+0x16c>
 800844e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008452:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008454:	4299      	cmp	r1, r3
 8008456:	db05      	blt.n	8008464 <_printf_float+0x19c>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6121      	str	r1, [r4, #16]
 800845c:	07d8      	lsls	r0, r3, #31
 800845e:	d5ea      	bpl.n	8008436 <_printf_float+0x16e>
 8008460:	1c4b      	adds	r3, r1, #1
 8008462:	e7e7      	b.n	8008434 <_printf_float+0x16c>
 8008464:	2900      	cmp	r1, #0
 8008466:	bfd4      	ite	le
 8008468:	f1c1 0202 	rsble	r2, r1, #2
 800846c:	2201      	movgt	r2, #1
 800846e:	4413      	add	r3, r2
 8008470:	e7e0      	b.n	8008434 <_printf_float+0x16c>
 8008472:	6823      	ldr	r3, [r4, #0]
 8008474:	055a      	lsls	r2, r3, #21
 8008476:	d407      	bmi.n	8008488 <_printf_float+0x1c0>
 8008478:	6923      	ldr	r3, [r4, #16]
 800847a:	4642      	mov	r2, r8
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	d12a      	bne.n	80084dc <_printf_float+0x214>
 8008486:	e76b      	b.n	8008360 <_printf_float+0x98>
 8008488:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800848c:	f240 80e0 	bls.w	8008650 <_printf_float+0x388>
 8008490:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008494:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849c:	d133      	bne.n	8008506 <_printf_float+0x23e>
 800849e:	4a38      	ldr	r2, [pc, #224]	@ (8008580 <_printf_float+0x2b8>)
 80084a0:	2301      	movs	r3, #1
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	f43f af59 	beq.w	8008360 <_printf_float+0x98>
 80084ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084b2:	4543      	cmp	r3, r8
 80084b4:	db02      	blt.n	80084bc <_printf_float+0x1f4>
 80084b6:	6823      	ldr	r3, [r4, #0]
 80084b8:	07d8      	lsls	r0, r3, #31
 80084ba:	d50f      	bpl.n	80084dc <_printf_float+0x214>
 80084bc:	9b05      	ldr	r3, [sp, #20]
 80084be:	465a      	mov	r2, fp
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f af4a 	beq.w	8008360 <_printf_float+0x98>
 80084cc:	f04f 0900 	mov.w	r9, #0
 80084d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80084d4:	f104 0a1a 	add.w	sl, r4, #26
 80084d8:	45c8      	cmp	r8, r9
 80084da:	dc09      	bgt.n	80084f0 <_printf_float+0x228>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	079b      	lsls	r3, r3, #30
 80084e0:	f100 8107 	bmi.w	80086f2 <_printf_float+0x42a>
 80084e4:	68e0      	ldr	r0, [r4, #12]
 80084e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084e8:	4298      	cmp	r0, r3
 80084ea:	bfb8      	it	lt
 80084ec:	4618      	movlt	r0, r3
 80084ee:	e739      	b.n	8008364 <_printf_float+0x9c>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f af30 	beq.w	8008360 <_printf_float+0x98>
 8008500:	f109 0901 	add.w	r9, r9, #1
 8008504:	e7e8      	b.n	80084d8 <_printf_float+0x210>
 8008506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	dc3b      	bgt.n	8008584 <_printf_float+0x2bc>
 800850c:	4a1c      	ldr	r2, [pc, #112]	@ (8008580 <_printf_float+0x2b8>)
 800850e:	2301      	movs	r3, #1
 8008510:	4631      	mov	r1, r6
 8008512:	4628      	mov	r0, r5
 8008514:	47b8      	blx	r7
 8008516:	3001      	adds	r0, #1
 8008518:	f43f af22 	beq.w	8008360 <_printf_float+0x98>
 800851c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008520:	ea59 0303 	orrs.w	r3, r9, r3
 8008524:	d102      	bne.n	800852c <_printf_float+0x264>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	07d9      	lsls	r1, r3, #31
 800852a:	d5d7      	bpl.n	80084dc <_printf_float+0x214>
 800852c:	9b05      	ldr	r3, [sp, #20]
 800852e:	465a      	mov	r2, fp
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f af12 	beq.w	8008360 <_printf_float+0x98>
 800853c:	f04f 0a00 	mov.w	sl, #0
 8008540:	f104 0b1a 	add.w	fp, r4, #26
 8008544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008546:	425b      	negs	r3, r3
 8008548:	4553      	cmp	r3, sl
 800854a:	dc01      	bgt.n	8008550 <_printf_float+0x288>
 800854c:	464b      	mov	r3, r9
 800854e:	e794      	b.n	800847a <_printf_float+0x1b2>
 8008550:	2301      	movs	r3, #1
 8008552:	465a      	mov	r2, fp
 8008554:	4631      	mov	r1, r6
 8008556:	4628      	mov	r0, r5
 8008558:	47b8      	blx	r7
 800855a:	3001      	adds	r0, #1
 800855c:	f43f af00 	beq.w	8008360 <_printf_float+0x98>
 8008560:	f10a 0a01 	add.w	sl, sl, #1
 8008564:	e7ee      	b.n	8008544 <_printf_float+0x27c>
 8008566:	bf00      	nop
 8008568:	ffffffff 	.word	0xffffffff
 800856c:	7fefffff 	.word	0x7fefffff
 8008570:	0800c9c8 	.word	0x0800c9c8
 8008574:	0800c9cc 	.word	0x0800c9cc
 8008578:	0800c9d0 	.word	0x0800c9d0
 800857c:	0800c9d4 	.word	0x0800c9d4
 8008580:	0800c9d8 	.word	0x0800c9d8
 8008584:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008586:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800858a:	4553      	cmp	r3, sl
 800858c:	bfa8      	it	ge
 800858e:	4653      	movge	r3, sl
 8008590:	2b00      	cmp	r3, #0
 8008592:	4699      	mov	r9, r3
 8008594:	dc37      	bgt.n	8008606 <_printf_float+0x33e>
 8008596:	2300      	movs	r3, #0
 8008598:	9307      	str	r3, [sp, #28]
 800859a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800859e:	f104 021a 	add.w	r2, r4, #26
 80085a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085a4:	9907      	ldr	r1, [sp, #28]
 80085a6:	9306      	str	r3, [sp, #24]
 80085a8:	eba3 0309 	sub.w	r3, r3, r9
 80085ac:	428b      	cmp	r3, r1
 80085ae:	dc31      	bgt.n	8008614 <_printf_float+0x34c>
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	459a      	cmp	sl, r3
 80085b4:	dc3b      	bgt.n	800862e <_printf_float+0x366>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	07da      	lsls	r2, r3, #31
 80085ba:	d438      	bmi.n	800862e <_printf_float+0x366>
 80085bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085be:	ebaa 0903 	sub.w	r9, sl, r3
 80085c2:	9b06      	ldr	r3, [sp, #24]
 80085c4:	ebaa 0303 	sub.w	r3, sl, r3
 80085c8:	4599      	cmp	r9, r3
 80085ca:	bfa8      	it	ge
 80085cc:	4699      	movge	r9, r3
 80085ce:	f1b9 0f00 	cmp.w	r9, #0
 80085d2:	dc34      	bgt.n	800863e <_printf_float+0x376>
 80085d4:	f04f 0800 	mov.w	r8, #0
 80085d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085dc:	f104 0b1a 	add.w	fp, r4, #26
 80085e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e2:	ebaa 0303 	sub.w	r3, sl, r3
 80085e6:	eba3 0309 	sub.w	r3, r3, r9
 80085ea:	4543      	cmp	r3, r8
 80085ec:	f77f af76 	ble.w	80084dc <_printf_float+0x214>
 80085f0:	2301      	movs	r3, #1
 80085f2:	465a      	mov	r2, fp
 80085f4:	4631      	mov	r1, r6
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b8      	blx	r7
 80085fa:	3001      	adds	r0, #1
 80085fc:	f43f aeb0 	beq.w	8008360 <_printf_float+0x98>
 8008600:	f108 0801 	add.w	r8, r8, #1
 8008604:	e7ec      	b.n	80085e0 <_printf_float+0x318>
 8008606:	4642      	mov	r2, r8
 8008608:	4631      	mov	r1, r6
 800860a:	4628      	mov	r0, r5
 800860c:	47b8      	blx	r7
 800860e:	3001      	adds	r0, #1
 8008610:	d1c1      	bne.n	8008596 <_printf_float+0x2ce>
 8008612:	e6a5      	b.n	8008360 <_printf_float+0x98>
 8008614:	2301      	movs	r3, #1
 8008616:	4631      	mov	r1, r6
 8008618:	4628      	mov	r0, r5
 800861a:	9206      	str	r2, [sp, #24]
 800861c:	47b8      	blx	r7
 800861e:	3001      	adds	r0, #1
 8008620:	f43f ae9e 	beq.w	8008360 <_printf_float+0x98>
 8008624:	9b07      	ldr	r3, [sp, #28]
 8008626:	9a06      	ldr	r2, [sp, #24]
 8008628:	3301      	adds	r3, #1
 800862a:	9307      	str	r3, [sp, #28]
 800862c:	e7b9      	b.n	80085a2 <_printf_float+0x2da>
 800862e:	9b05      	ldr	r3, [sp, #20]
 8008630:	465a      	mov	r2, fp
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	d1bf      	bne.n	80085bc <_printf_float+0x2f4>
 800863c:	e690      	b.n	8008360 <_printf_float+0x98>
 800863e:	9a06      	ldr	r2, [sp, #24]
 8008640:	464b      	mov	r3, r9
 8008642:	4442      	add	r2, r8
 8008644:	4631      	mov	r1, r6
 8008646:	4628      	mov	r0, r5
 8008648:	47b8      	blx	r7
 800864a:	3001      	adds	r0, #1
 800864c:	d1c2      	bne.n	80085d4 <_printf_float+0x30c>
 800864e:	e687      	b.n	8008360 <_printf_float+0x98>
 8008650:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008654:	f1b9 0f01 	cmp.w	r9, #1
 8008658:	dc01      	bgt.n	800865e <_printf_float+0x396>
 800865a:	07db      	lsls	r3, r3, #31
 800865c:	d536      	bpl.n	80086cc <_printf_float+0x404>
 800865e:	2301      	movs	r3, #1
 8008660:	4642      	mov	r2, r8
 8008662:	4631      	mov	r1, r6
 8008664:	4628      	mov	r0, r5
 8008666:	47b8      	blx	r7
 8008668:	3001      	adds	r0, #1
 800866a:	f43f ae79 	beq.w	8008360 <_printf_float+0x98>
 800866e:	9b05      	ldr	r3, [sp, #20]
 8008670:	465a      	mov	r2, fp
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	f43f ae71 	beq.w	8008360 <_printf_float+0x98>
 800867e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008682:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800868a:	f109 39ff 	add.w	r9, r9, #4294967295
 800868e:	d018      	beq.n	80086c2 <_printf_float+0x3fa>
 8008690:	464b      	mov	r3, r9
 8008692:	f108 0201 	add.w	r2, r8, #1
 8008696:	4631      	mov	r1, r6
 8008698:	4628      	mov	r0, r5
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	d10c      	bne.n	80086ba <_printf_float+0x3f2>
 80086a0:	e65e      	b.n	8008360 <_printf_float+0x98>
 80086a2:	2301      	movs	r3, #1
 80086a4:	465a      	mov	r2, fp
 80086a6:	4631      	mov	r1, r6
 80086a8:	4628      	mov	r0, r5
 80086aa:	47b8      	blx	r7
 80086ac:	3001      	adds	r0, #1
 80086ae:	f43f ae57 	beq.w	8008360 <_printf_float+0x98>
 80086b2:	f108 0801 	add.w	r8, r8, #1
 80086b6:	45c8      	cmp	r8, r9
 80086b8:	dbf3      	blt.n	80086a2 <_printf_float+0x3da>
 80086ba:	4653      	mov	r3, sl
 80086bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086c0:	e6dc      	b.n	800847c <_printf_float+0x1b4>
 80086c2:	f04f 0800 	mov.w	r8, #0
 80086c6:	f104 0b1a 	add.w	fp, r4, #26
 80086ca:	e7f4      	b.n	80086b6 <_printf_float+0x3ee>
 80086cc:	2301      	movs	r3, #1
 80086ce:	4642      	mov	r2, r8
 80086d0:	e7e1      	b.n	8008696 <_printf_float+0x3ce>
 80086d2:	2301      	movs	r3, #1
 80086d4:	464a      	mov	r2, r9
 80086d6:	4631      	mov	r1, r6
 80086d8:	4628      	mov	r0, r5
 80086da:	47b8      	blx	r7
 80086dc:	3001      	adds	r0, #1
 80086de:	f43f ae3f 	beq.w	8008360 <_printf_float+0x98>
 80086e2:	f108 0801 	add.w	r8, r8, #1
 80086e6:	68e3      	ldr	r3, [r4, #12]
 80086e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086ea:	1a5b      	subs	r3, r3, r1
 80086ec:	4543      	cmp	r3, r8
 80086ee:	dcf0      	bgt.n	80086d2 <_printf_float+0x40a>
 80086f0:	e6f8      	b.n	80084e4 <_printf_float+0x21c>
 80086f2:	f04f 0800 	mov.w	r8, #0
 80086f6:	f104 0919 	add.w	r9, r4, #25
 80086fa:	e7f4      	b.n	80086e6 <_printf_float+0x41e>

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4698      	mov	r8, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc26      	bgt.n	8008792 <_printf_common+0x96>
 8008744:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008748:	6822      	ldr	r2, [r4, #0]
 800874a:	3b00      	subs	r3, #0
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42b      	bmi.n	80087ac <_printf_common+0xb0>
 8008754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008758:	4641      	mov	r1, r8
 800875a:	4638      	mov	r0, r7
 800875c:	47c8      	blx	r9
 800875e:	3001      	adds	r0, #1
 8008760:	d01e      	beq.n	80087a0 <_printf_common+0xa4>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	f003 0306 	and.w	r3, r3, #6
 800876a:	2b04      	cmp	r3, #4
 800876c:	bf02      	ittt	eq
 800876e:	68e5      	ldreq	r5, [r4, #12]
 8008770:	6833      	ldreq	r3, [r6, #0]
 8008772:	1aed      	subeq	r5, r5, r3
 8008774:	68a3      	ldr	r3, [r4, #8]
 8008776:	bf0c      	ite	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	2500      	movne	r5, #0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfc4      	itt	gt
 8008782:	1a9b      	subgt	r3, r3, r2
 8008784:	18ed      	addgt	r5, r5, r3
 8008786:	2600      	movs	r6, #0
 8008788:	341a      	adds	r4, #26
 800878a:	42b5      	cmp	r5, r6
 800878c:	d11a      	bne.n	80087c4 <_printf_common+0xc8>
 800878e:	2000      	movs	r0, #0
 8008790:	e008      	b.n	80087a4 <_printf_common+0xa8>
 8008792:	2301      	movs	r3, #1
 8008794:	4652      	mov	r2, sl
 8008796:	4641      	mov	r1, r8
 8008798:	4638      	mov	r0, r7
 800879a:	47c8      	blx	r9
 800879c:	3001      	adds	r0, #1
 800879e:	d103      	bne.n	80087a8 <_printf_common+0xac>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7c6      	b.n	800873a <_printf_common+0x3e>
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	2030      	movs	r0, #48	@ 0x30
 80087b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087b6:	4422      	add	r2, r4
 80087b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087c0:	3302      	adds	r3, #2
 80087c2:	e7c7      	b.n	8008754 <_printf_common+0x58>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4622      	mov	r2, r4
 80087c8:	4641      	mov	r1, r8
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c8      	blx	r9
 80087ce:	3001      	adds	r0, #1
 80087d0:	d0e6      	beq.n	80087a0 <_printf_common+0xa4>
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7d9      	b.n	800878a <_printf_common+0x8e>
	...

080087d8 <_printf_i>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	7e0f      	ldrb	r7, [r1, #24]
 80087de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087e0:	2f78      	cmp	r7, #120	@ 0x78
 80087e2:	4691      	mov	r9, r2
 80087e4:	4680      	mov	r8, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	469a      	mov	sl, r3
 80087ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087ee:	d807      	bhi.n	8008800 <_printf_i+0x28>
 80087f0:	2f62      	cmp	r7, #98	@ 0x62
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x32>
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	f000 80d2 	beq.w	800899e <_printf_i+0x1c6>
 80087fa:	2f58      	cmp	r7, #88	@ 0x58
 80087fc:	f000 80b9 	beq.w	8008972 <_printf_i+0x19a>
 8008800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008808:	e03a      	b.n	8008880 <_printf_i+0xa8>
 800880a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800880e:	2b15      	cmp	r3, #21
 8008810:	d8f6      	bhi.n	8008800 <_printf_i+0x28>
 8008812:	a101      	add	r1, pc, #4	@ (adr r1, 8008818 <_printf_i+0x40>)
 8008814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	08008885 	.word	0x08008885
 8008820:	08008801 	.word	0x08008801
 8008824:	08008801 	.word	0x08008801
 8008828:	08008801 	.word	0x08008801
 800882c:	08008801 	.word	0x08008801
 8008830:	08008885 	.word	0x08008885
 8008834:	08008801 	.word	0x08008801
 8008838:	08008801 	.word	0x08008801
 800883c:	08008801 	.word	0x08008801
 8008840:	08008801 	.word	0x08008801
 8008844:	08008985 	.word	0x08008985
 8008848:	080088af 	.word	0x080088af
 800884c:	0800893f 	.word	0x0800893f
 8008850:	08008801 	.word	0x08008801
 8008854:	08008801 	.word	0x08008801
 8008858:	080089a7 	.word	0x080089a7
 800885c:	08008801 	.word	0x08008801
 8008860:	080088af 	.word	0x080088af
 8008864:	08008801 	.word	0x08008801
 8008868:	08008801 	.word	0x08008801
 800886c:	08008947 	.word	0x08008947
 8008870:	6833      	ldr	r3, [r6, #0]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6032      	str	r2, [r6, #0]
 8008878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800887c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008880:	2301      	movs	r3, #1
 8008882:	e09d      	b.n	80089c0 <_printf_i+0x1e8>
 8008884:	6833      	ldr	r3, [r6, #0]
 8008886:	6820      	ldr	r0, [r4, #0]
 8008888:	1d19      	adds	r1, r3, #4
 800888a:	6031      	str	r1, [r6, #0]
 800888c:	0606      	lsls	r6, r0, #24
 800888e:	d501      	bpl.n	8008894 <_printf_i+0xbc>
 8008890:	681d      	ldr	r5, [r3, #0]
 8008892:	e003      	b.n	800889c <_printf_i+0xc4>
 8008894:	0645      	lsls	r5, r0, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0xb8>
 8008898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800889c:	2d00      	cmp	r5, #0
 800889e:	da03      	bge.n	80088a8 <_printf_i+0xd0>
 80088a0:	232d      	movs	r3, #45	@ 0x2d
 80088a2:	426d      	negs	r5, r5
 80088a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088a8:	4859      	ldr	r0, [pc, #356]	@ (8008a10 <_printf_i+0x238>)
 80088aa:	230a      	movs	r3, #10
 80088ac:	e011      	b.n	80088d2 <_printf_i+0xfa>
 80088ae:	6821      	ldr	r1, [r4, #0]
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	0608      	lsls	r0, r1, #24
 80088b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80088b8:	d402      	bmi.n	80088c0 <_printf_i+0xe8>
 80088ba:	0649      	lsls	r1, r1, #25
 80088bc:	bf48      	it	mi
 80088be:	b2ad      	uxthmi	r5, r5
 80088c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80088c2:	4853      	ldr	r0, [pc, #332]	@ (8008a10 <_printf_i+0x238>)
 80088c4:	6033      	str	r3, [r6, #0]
 80088c6:	bf14      	ite	ne
 80088c8:	230a      	movne	r3, #10
 80088ca:	2308      	moveq	r3, #8
 80088cc:	2100      	movs	r1, #0
 80088ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088d2:	6866      	ldr	r6, [r4, #4]
 80088d4:	60a6      	str	r6, [r4, #8]
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	bfa2      	ittt	ge
 80088da:	6821      	ldrge	r1, [r4, #0]
 80088dc:	f021 0104 	bicge.w	r1, r1, #4
 80088e0:	6021      	strge	r1, [r4, #0]
 80088e2:	b90d      	cbnz	r5, 80088e8 <_printf_i+0x110>
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	d04b      	beq.n	8008980 <_printf_i+0x1a8>
 80088e8:	4616      	mov	r6, r2
 80088ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80088ee:	fb03 5711 	mls	r7, r3, r1, r5
 80088f2:	5dc7      	ldrb	r7, [r0, r7]
 80088f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088f8:	462f      	mov	r7, r5
 80088fa:	42bb      	cmp	r3, r7
 80088fc:	460d      	mov	r5, r1
 80088fe:	d9f4      	bls.n	80088ea <_printf_i+0x112>
 8008900:	2b08      	cmp	r3, #8
 8008902:	d10b      	bne.n	800891c <_printf_i+0x144>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	07df      	lsls	r7, r3, #31
 8008908:	d508      	bpl.n	800891c <_printf_i+0x144>
 800890a:	6923      	ldr	r3, [r4, #16]
 800890c:	6861      	ldr	r1, [r4, #4]
 800890e:	4299      	cmp	r1, r3
 8008910:	bfde      	ittt	le
 8008912:	2330      	movle	r3, #48	@ 0x30
 8008914:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008918:	f106 36ff 	addle.w	r6, r6, #4294967295
 800891c:	1b92      	subs	r2, r2, r6
 800891e:	6122      	str	r2, [r4, #16]
 8008920:	f8cd a000 	str.w	sl, [sp]
 8008924:	464b      	mov	r3, r9
 8008926:	aa03      	add	r2, sp, #12
 8008928:	4621      	mov	r1, r4
 800892a:	4640      	mov	r0, r8
 800892c:	f7ff fee6 	bl	80086fc <_printf_common>
 8008930:	3001      	adds	r0, #1
 8008932:	d14a      	bne.n	80089ca <_printf_i+0x1f2>
 8008934:	f04f 30ff 	mov.w	r0, #4294967295
 8008938:	b004      	add	sp, #16
 800893a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	f043 0320 	orr.w	r3, r3, #32
 8008944:	6023      	str	r3, [r4, #0]
 8008946:	4833      	ldr	r0, [pc, #204]	@ (8008a14 <_printf_i+0x23c>)
 8008948:	2778      	movs	r7, #120	@ 0x78
 800894a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	6831      	ldr	r1, [r6, #0]
 8008952:	061f      	lsls	r7, r3, #24
 8008954:	f851 5b04 	ldr.w	r5, [r1], #4
 8008958:	d402      	bmi.n	8008960 <_printf_i+0x188>
 800895a:	065f      	lsls	r7, r3, #25
 800895c:	bf48      	it	mi
 800895e:	b2ad      	uxthmi	r5, r5
 8008960:	6031      	str	r1, [r6, #0]
 8008962:	07d9      	lsls	r1, r3, #31
 8008964:	bf44      	itt	mi
 8008966:	f043 0320 	orrmi.w	r3, r3, #32
 800896a:	6023      	strmi	r3, [r4, #0]
 800896c:	b11d      	cbz	r5, 8008976 <_printf_i+0x19e>
 800896e:	2310      	movs	r3, #16
 8008970:	e7ac      	b.n	80088cc <_printf_i+0xf4>
 8008972:	4827      	ldr	r0, [pc, #156]	@ (8008a10 <_printf_i+0x238>)
 8008974:	e7e9      	b.n	800894a <_printf_i+0x172>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	f023 0320 	bic.w	r3, r3, #32
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	e7f6      	b.n	800896e <_printf_i+0x196>
 8008980:	4616      	mov	r6, r2
 8008982:	e7bd      	b.n	8008900 <_printf_i+0x128>
 8008984:	6833      	ldr	r3, [r6, #0]
 8008986:	6825      	ldr	r5, [r4, #0]
 8008988:	6961      	ldr	r1, [r4, #20]
 800898a:	1d18      	adds	r0, r3, #4
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	062e      	lsls	r6, r5, #24
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	d501      	bpl.n	8008998 <_printf_i+0x1c0>
 8008994:	6019      	str	r1, [r3, #0]
 8008996:	e002      	b.n	800899e <_printf_i+0x1c6>
 8008998:	0668      	lsls	r0, r5, #25
 800899a:	d5fb      	bpl.n	8008994 <_printf_i+0x1bc>
 800899c:	8019      	strh	r1, [r3, #0]
 800899e:	2300      	movs	r3, #0
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	4616      	mov	r6, r2
 80089a4:	e7bc      	b.n	8008920 <_printf_i+0x148>
 80089a6:	6833      	ldr	r3, [r6, #0]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	6032      	str	r2, [r6, #0]
 80089ac:	681e      	ldr	r6, [r3, #0]
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	2100      	movs	r1, #0
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7f7 fc94 	bl	80002e0 <memchr>
 80089b8:	b108      	cbz	r0, 80089be <_printf_i+0x1e6>
 80089ba:	1b80      	subs	r0, r0, r6
 80089bc:	6060      	str	r0, [r4, #4]
 80089be:	6863      	ldr	r3, [r4, #4]
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	2300      	movs	r3, #0
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089c8:	e7aa      	b.n	8008920 <_printf_i+0x148>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	4632      	mov	r2, r6
 80089ce:	4649      	mov	r1, r9
 80089d0:	4640      	mov	r0, r8
 80089d2:	47d0      	blx	sl
 80089d4:	3001      	adds	r0, #1
 80089d6:	d0ad      	beq.n	8008934 <_printf_i+0x15c>
 80089d8:	6823      	ldr	r3, [r4, #0]
 80089da:	079b      	lsls	r3, r3, #30
 80089dc:	d413      	bmi.n	8008a06 <_printf_i+0x22e>
 80089de:	68e0      	ldr	r0, [r4, #12]
 80089e0:	9b03      	ldr	r3, [sp, #12]
 80089e2:	4298      	cmp	r0, r3
 80089e4:	bfb8      	it	lt
 80089e6:	4618      	movlt	r0, r3
 80089e8:	e7a6      	b.n	8008938 <_printf_i+0x160>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4632      	mov	r2, r6
 80089ee:	4649      	mov	r1, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	47d0      	blx	sl
 80089f4:	3001      	adds	r0, #1
 80089f6:	d09d      	beq.n	8008934 <_printf_i+0x15c>
 80089f8:	3501      	adds	r5, #1
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	9903      	ldr	r1, [sp, #12]
 80089fe:	1a5b      	subs	r3, r3, r1
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dcf2      	bgt.n	80089ea <_printf_i+0x212>
 8008a04:	e7eb      	b.n	80089de <_printf_i+0x206>
 8008a06:	2500      	movs	r5, #0
 8008a08:	f104 0619 	add.w	r6, r4, #25
 8008a0c:	e7f5      	b.n	80089fa <_printf_i+0x222>
 8008a0e:	bf00      	nop
 8008a10:	0800c9da 	.word	0x0800c9da
 8008a14:	0800c9eb 	.word	0x0800c9eb

08008a18 <_scanf_float>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	b087      	sub	sp, #28
 8008a1e:	4617      	mov	r7, r2
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	688b      	ldr	r3, [r1, #8]
 8008a24:	1e5a      	subs	r2, r3, #1
 8008a26:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a2a:	bf81      	itttt	hi
 8008a2c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a30:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a34:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a38:	608b      	strhi	r3, [r1, #8]
 8008a3a:	680b      	ldr	r3, [r1, #0]
 8008a3c:	460a      	mov	r2, r1
 8008a3e:	f04f 0500 	mov.w	r5, #0
 8008a42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a46:	f842 3b1c 	str.w	r3, [r2], #28
 8008a4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a4e:	4680      	mov	r8, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	bf98      	it	ls
 8008a54:	f04f 0b00 	movls.w	fp, #0
 8008a58:	9201      	str	r2, [sp, #4]
 8008a5a:	4616      	mov	r6, r2
 8008a5c:	46aa      	mov	sl, r5
 8008a5e:	46a9      	mov	r9, r5
 8008a60:	9502      	str	r5, [sp, #8]
 8008a62:	68a2      	ldr	r2, [r4, #8]
 8008a64:	b152      	cbz	r2, 8008a7c <_scanf_float+0x64>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a6c:	d864      	bhi.n	8008b38 <_scanf_float+0x120>
 8008a6e:	2b40      	cmp	r3, #64	@ 0x40
 8008a70:	d83c      	bhi.n	8008aec <_scanf_float+0xd4>
 8008a72:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a76:	b2c8      	uxtb	r0, r1
 8008a78:	280e      	cmp	r0, #14
 8008a7a:	d93a      	bls.n	8008af2 <_scanf_float+0xda>
 8008a7c:	f1b9 0f00 	cmp.w	r9, #0
 8008a80:	d003      	beq.n	8008a8a <_scanf_float+0x72>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a8e:	f1ba 0f01 	cmp.w	sl, #1
 8008a92:	f200 8117 	bhi.w	8008cc4 <_scanf_float+0x2ac>
 8008a96:	9b01      	ldr	r3, [sp, #4]
 8008a98:	429e      	cmp	r6, r3
 8008a9a:	f200 8108 	bhi.w	8008cae <_scanf_float+0x296>
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	b007      	add	sp, #28
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008aaa:	2a0d      	cmp	r2, #13
 8008aac:	d8e6      	bhi.n	8008a7c <_scanf_float+0x64>
 8008aae:	a101      	add	r1, pc, #4	@ (adr r1, 8008ab4 <_scanf_float+0x9c>)
 8008ab0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ab4:	08008bfb 	.word	0x08008bfb
 8008ab8:	08008a7d 	.word	0x08008a7d
 8008abc:	08008a7d 	.word	0x08008a7d
 8008ac0:	08008a7d 	.word	0x08008a7d
 8008ac4:	08008c5b 	.word	0x08008c5b
 8008ac8:	08008c33 	.word	0x08008c33
 8008acc:	08008a7d 	.word	0x08008a7d
 8008ad0:	08008a7d 	.word	0x08008a7d
 8008ad4:	08008c09 	.word	0x08008c09
 8008ad8:	08008a7d 	.word	0x08008a7d
 8008adc:	08008a7d 	.word	0x08008a7d
 8008ae0:	08008a7d 	.word	0x08008a7d
 8008ae4:	08008a7d 	.word	0x08008a7d
 8008ae8:	08008bc1 	.word	0x08008bc1
 8008aec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008af0:	e7db      	b.n	8008aaa <_scanf_float+0x92>
 8008af2:	290e      	cmp	r1, #14
 8008af4:	d8c2      	bhi.n	8008a7c <_scanf_float+0x64>
 8008af6:	a001      	add	r0, pc, #4	@ (adr r0, 8008afc <_scanf_float+0xe4>)
 8008af8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008afc:	08008bb1 	.word	0x08008bb1
 8008b00:	08008a7d 	.word	0x08008a7d
 8008b04:	08008bb1 	.word	0x08008bb1
 8008b08:	08008c47 	.word	0x08008c47
 8008b0c:	08008a7d 	.word	0x08008a7d
 8008b10:	08008b59 	.word	0x08008b59
 8008b14:	08008b97 	.word	0x08008b97
 8008b18:	08008b97 	.word	0x08008b97
 8008b1c:	08008b97 	.word	0x08008b97
 8008b20:	08008b97 	.word	0x08008b97
 8008b24:	08008b97 	.word	0x08008b97
 8008b28:	08008b97 	.word	0x08008b97
 8008b2c:	08008b97 	.word	0x08008b97
 8008b30:	08008b97 	.word	0x08008b97
 8008b34:	08008b97 	.word	0x08008b97
 8008b38:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b3a:	d809      	bhi.n	8008b50 <_scanf_float+0x138>
 8008b3c:	2b60      	cmp	r3, #96	@ 0x60
 8008b3e:	d8b2      	bhi.n	8008aa6 <_scanf_float+0x8e>
 8008b40:	2b54      	cmp	r3, #84	@ 0x54
 8008b42:	d07b      	beq.n	8008c3c <_scanf_float+0x224>
 8008b44:	2b59      	cmp	r3, #89	@ 0x59
 8008b46:	d199      	bne.n	8008a7c <_scanf_float+0x64>
 8008b48:	2d07      	cmp	r5, #7
 8008b4a:	d197      	bne.n	8008a7c <_scanf_float+0x64>
 8008b4c:	2508      	movs	r5, #8
 8008b4e:	e02c      	b.n	8008baa <_scanf_float+0x192>
 8008b50:	2b74      	cmp	r3, #116	@ 0x74
 8008b52:	d073      	beq.n	8008c3c <_scanf_float+0x224>
 8008b54:	2b79      	cmp	r3, #121	@ 0x79
 8008b56:	e7f6      	b.n	8008b46 <_scanf_float+0x12e>
 8008b58:	6821      	ldr	r1, [r4, #0]
 8008b5a:	05c8      	lsls	r0, r1, #23
 8008b5c:	d51b      	bpl.n	8008b96 <_scanf_float+0x17e>
 8008b5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b62:	6021      	str	r1, [r4, #0]
 8008b64:	f109 0901 	add.w	r9, r9, #1
 8008b68:	f1bb 0f00 	cmp.w	fp, #0
 8008b6c:	d003      	beq.n	8008b76 <_scanf_float+0x15e>
 8008b6e:	3201      	adds	r2, #1
 8008b70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b74:	60a2      	str	r2, [r4, #8]
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	60a3      	str	r3, [r4, #8]
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	6123      	str	r3, [r4, #16]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	f340 8087 	ble.w	8008c9c <_scanf_float+0x284>
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	3301      	adds	r3, #1
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	e765      	b.n	8008a62 <_scanf_float+0x4a>
 8008b96:	eb1a 0105 	adds.w	r1, sl, r5
 8008b9a:	f47f af6f 	bne.w	8008a7c <_scanf_float+0x64>
 8008b9e:	6822      	ldr	r2, [r4, #0]
 8008ba0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	468a      	mov	sl, r1
 8008baa:	f806 3b01 	strb.w	r3, [r6], #1
 8008bae:	e7e2      	b.n	8008b76 <_scanf_float+0x15e>
 8008bb0:	6822      	ldr	r2, [r4, #0]
 8008bb2:	0610      	lsls	r0, r2, #24
 8008bb4:	f57f af62 	bpl.w	8008a7c <_scanf_float+0x64>
 8008bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	e7f4      	b.n	8008baa <_scanf_float+0x192>
 8008bc0:	f1ba 0f00 	cmp.w	sl, #0
 8008bc4:	d10e      	bne.n	8008be4 <_scanf_float+0x1cc>
 8008bc6:	f1b9 0f00 	cmp.w	r9, #0
 8008bca:	d10e      	bne.n	8008bea <_scanf_float+0x1d2>
 8008bcc:	6822      	ldr	r2, [r4, #0]
 8008bce:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bd2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bd6:	d108      	bne.n	8008bea <_scanf_float+0x1d2>
 8008bd8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	f04f 0a01 	mov.w	sl, #1
 8008be2:	e7e2      	b.n	8008baa <_scanf_float+0x192>
 8008be4:	f1ba 0f02 	cmp.w	sl, #2
 8008be8:	d055      	beq.n	8008c96 <_scanf_float+0x27e>
 8008bea:	2d01      	cmp	r5, #1
 8008bec:	d002      	beq.n	8008bf4 <_scanf_float+0x1dc>
 8008bee:	2d04      	cmp	r5, #4
 8008bf0:	f47f af44 	bne.w	8008a7c <_scanf_float+0x64>
 8008bf4:	3501      	adds	r5, #1
 8008bf6:	b2ed      	uxtb	r5, r5
 8008bf8:	e7d7      	b.n	8008baa <_scanf_float+0x192>
 8008bfa:	f1ba 0f01 	cmp.w	sl, #1
 8008bfe:	f47f af3d 	bne.w	8008a7c <_scanf_float+0x64>
 8008c02:	f04f 0a02 	mov.w	sl, #2
 8008c06:	e7d0      	b.n	8008baa <_scanf_float+0x192>
 8008c08:	b97d      	cbnz	r5, 8008c2a <_scanf_float+0x212>
 8008c0a:	f1b9 0f00 	cmp.w	r9, #0
 8008c0e:	f47f af38 	bne.w	8008a82 <_scanf_float+0x6a>
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c1c:	f040 8101 	bne.w	8008e22 <_scanf_float+0x40a>
 8008c20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c24:	6022      	str	r2, [r4, #0]
 8008c26:	2501      	movs	r5, #1
 8008c28:	e7bf      	b.n	8008baa <_scanf_float+0x192>
 8008c2a:	2d03      	cmp	r5, #3
 8008c2c:	d0e2      	beq.n	8008bf4 <_scanf_float+0x1dc>
 8008c2e:	2d05      	cmp	r5, #5
 8008c30:	e7de      	b.n	8008bf0 <_scanf_float+0x1d8>
 8008c32:	2d02      	cmp	r5, #2
 8008c34:	f47f af22 	bne.w	8008a7c <_scanf_float+0x64>
 8008c38:	2503      	movs	r5, #3
 8008c3a:	e7b6      	b.n	8008baa <_scanf_float+0x192>
 8008c3c:	2d06      	cmp	r5, #6
 8008c3e:	f47f af1d 	bne.w	8008a7c <_scanf_float+0x64>
 8008c42:	2507      	movs	r5, #7
 8008c44:	e7b1      	b.n	8008baa <_scanf_float+0x192>
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	0591      	lsls	r1, r2, #22
 8008c4a:	f57f af17 	bpl.w	8008a7c <_scanf_float+0x64>
 8008c4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c52:	6022      	str	r2, [r4, #0]
 8008c54:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c58:	e7a7      	b.n	8008baa <_scanf_float+0x192>
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c64:	d006      	beq.n	8008c74 <_scanf_float+0x25c>
 8008c66:	0550      	lsls	r0, r2, #21
 8008c68:	f57f af08 	bpl.w	8008a7c <_scanf_float+0x64>
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	f000 80d7 	beq.w	8008e22 <_scanf_float+0x40a>
 8008c74:	0591      	lsls	r1, r2, #22
 8008c76:	bf58      	it	pl
 8008c78:	9902      	ldrpl	r1, [sp, #8]
 8008c7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c7e:	bf58      	it	pl
 8008c80:	eba9 0101 	subpl.w	r1, r9, r1
 8008c84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c88:	bf58      	it	pl
 8008c8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c8e:	6022      	str	r2, [r4, #0]
 8008c90:	f04f 0900 	mov.w	r9, #0
 8008c94:	e789      	b.n	8008baa <_scanf_float+0x192>
 8008c96:	f04f 0a03 	mov.w	sl, #3
 8008c9a:	e786      	b.n	8008baa <_scanf_float+0x192>
 8008c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	4798      	blx	r3
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	f43f aedb 	beq.w	8008a62 <_scanf_float+0x4a>
 8008cac:	e6e6      	b.n	8008a7c <_scanf_float+0x64>
 8008cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cb6:	463a      	mov	r2, r7
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4798      	blx	r3
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	e6e8      	b.n	8008a96 <_scanf_float+0x7e>
 8008cc4:	1e6b      	subs	r3, r5, #1
 8008cc6:	2b06      	cmp	r3, #6
 8008cc8:	d824      	bhi.n	8008d14 <_scanf_float+0x2fc>
 8008cca:	2d02      	cmp	r5, #2
 8008ccc:	d836      	bhi.n	8008d3c <_scanf_float+0x324>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	429e      	cmp	r6, r3
 8008cd2:	f67f aee4 	bls.w	8008a9e <_scanf_float+0x86>
 8008cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cde:	463a      	mov	r2, r7
 8008ce0:	4640      	mov	r0, r8
 8008ce2:	4798      	blx	r3
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	6123      	str	r3, [r4, #16]
 8008cea:	e7f0      	b.n	8008cce <_scanf_float+0x2b6>
 8008cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cf0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008cf4:	463a      	mov	r2, r7
 8008cf6:	4640      	mov	r0, r8
 8008cf8:	4798      	blx	r3
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	6123      	str	r3, [r4, #16]
 8008d00:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d04:	fa5f fa8a 	uxtb.w	sl, sl
 8008d08:	f1ba 0f02 	cmp.w	sl, #2
 8008d0c:	d1ee      	bne.n	8008cec <_scanf_float+0x2d4>
 8008d0e:	3d03      	subs	r5, #3
 8008d10:	b2ed      	uxtb	r5, r5
 8008d12:	1b76      	subs	r6, r6, r5
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	05da      	lsls	r2, r3, #23
 8008d18:	d530      	bpl.n	8008d7c <_scanf_float+0x364>
 8008d1a:	055b      	lsls	r3, r3, #21
 8008d1c:	d511      	bpl.n	8008d42 <_scanf_float+0x32a>
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	429e      	cmp	r6, r3
 8008d22:	f67f aebc 	bls.w	8008a9e <_scanf_float+0x86>
 8008d26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d2e:	463a      	mov	r2, r7
 8008d30:	4640      	mov	r0, r8
 8008d32:	4798      	blx	r3
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	e7f0      	b.n	8008d1e <_scanf_float+0x306>
 8008d3c:	46aa      	mov	sl, r5
 8008d3e:	46b3      	mov	fp, r6
 8008d40:	e7de      	b.n	8008d00 <_scanf_float+0x2e8>
 8008d42:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	2965      	cmp	r1, #101	@ 0x65
 8008d4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d4e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	d00c      	beq.n	8008d70 <_scanf_float+0x358>
 8008d56:	2945      	cmp	r1, #69	@ 0x45
 8008d58:	d00a      	beq.n	8008d70 <_scanf_float+0x358>
 8008d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d5e:	463a      	mov	r2, r7
 8008d60:	4640      	mov	r0, r8
 8008d62:	4798      	blx	r3
 8008d64:	6923      	ldr	r3, [r4, #16]
 8008d66:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	1eb5      	subs	r5, r6, #2
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d74:	463a      	mov	r2, r7
 8008d76:	4640      	mov	r0, r8
 8008d78:	4798      	blx	r3
 8008d7a:	462e      	mov	r6, r5
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	f012 0210 	ands.w	r2, r2, #16
 8008d82:	d001      	beq.n	8008d88 <_scanf_float+0x370>
 8008d84:	2000      	movs	r0, #0
 8008d86:	e68b      	b.n	8008aa0 <_scanf_float+0x88>
 8008d88:	7032      	strb	r2, [r6, #0]
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d94:	d11a      	bne.n	8008dcc <_scanf_float+0x3b4>
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	454b      	cmp	r3, r9
 8008d9a:	eba3 0209 	sub.w	r2, r3, r9
 8008d9e:	d121      	bne.n	8008de4 <_scanf_float+0x3cc>
 8008da0:	9901      	ldr	r1, [sp, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	4640      	mov	r0, r8
 8008da6:	f002 fb61 	bl	800b46c <_strtod_r>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	6821      	ldr	r1, [r4, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f011 0f02 	tst.w	r1, #2
 8008db4:	f103 0204 	add.w	r2, r3, #4
 8008db8:	d01f      	beq.n	8008dfa <_scanf_float+0x3e2>
 8008dba:	9903      	ldr	r1, [sp, #12]
 8008dbc:	600a      	str	r2, [r1, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	ed83 0b00 	vstr	d0, [r3]
 8008dc4:	68e3      	ldr	r3, [r4, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60e3      	str	r3, [r4, #12]
 8008dca:	e7db      	b.n	8008d84 <_scanf_float+0x36c>
 8008dcc:	9b04      	ldr	r3, [sp, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d0e6      	beq.n	8008da0 <_scanf_float+0x388>
 8008dd2:	9905      	ldr	r1, [sp, #20]
 8008dd4:	230a      	movs	r3, #10
 8008dd6:	3101      	adds	r1, #1
 8008dd8:	4640      	mov	r0, r8
 8008dda:	f002 fbc7 	bl	800b56c <_strtol_r>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	9e05      	ldr	r6, [sp, #20]
 8008de2:	1ac2      	subs	r2, r0, r3
 8008de4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008de8:	429e      	cmp	r6, r3
 8008dea:	bf28      	it	cs
 8008dec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008df0:	490d      	ldr	r1, [pc, #52]	@ (8008e28 <_scanf_float+0x410>)
 8008df2:	4630      	mov	r0, r6
 8008df4:	f000 f912 	bl	800901c <siprintf>
 8008df8:	e7d2      	b.n	8008da0 <_scanf_float+0x388>
 8008dfa:	f011 0f04 	tst.w	r1, #4
 8008dfe:	9903      	ldr	r1, [sp, #12]
 8008e00:	600a      	str	r2, [r1, #0]
 8008e02:	d1dc      	bne.n	8008dbe <_scanf_float+0x3a6>
 8008e04:	eeb4 0b40 	vcmp.f64	d0, d0
 8008e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e0c:	681d      	ldr	r5, [r3, #0]
 8008e0e:	d705      	bvc.n	8008e1c <_scanf_float+0x404>
 8008e10:	4806      	ldr	r0, [pc, #24]	@ (8008e2c <_scanf_float+0x414>)
 8008e12:	f000 f9e7 	bl	80091e4 <nanf>
 8008e16:	ed85 0a00 	vstr	s0, [r5]
 8008e1a:	e7d3      	b.n	8008dc4 <_scanf_float+0x3ac>
 8008e1c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008e20:	e7f9      	b.n	8008e16 <_scanf_float+0x3fe>
 8008e22:	f04f 0900 	mov.w	r9, #0
 8008e26:	e630      	b.n	8008a8a <_scanf_float+0x72>
 8008e28:	0800c9fc 	.word	0x0800c9fc
 8008e2c:	0800cd95 	.word	0x0800cd95

08008e30 <std>:
 8008e30:	2300      	movs	r3, #0
 8008e32:	b510      	push	{r4, lr}
 8008e34:	4604      	mov	r4, r0
 8008e36:	e9c0 3300 	strd	r3, r3, [r0]
 8008e3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e3e:	6083      	str	r3, [r0, #8]
 8008e40:	8181      	strh	r1, [r0, #12]
 8008e42:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e44:	81c2      	strh	r2, [r0, #14]
 8008e46:	6183      	str	r3, [r0, #24]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	2208      	movs	r2, #8
 8008e4c:	305c      	adds	r0, #92	@ 0x5c
 8008e4e:	f000 f948 	bl	80090e2 <memset>
 8008e52:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <std+0x58>)
 8008e54:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <std+0x5c>)
 8008e58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e90 <std+0x60>)
 8008e5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e94 <std+0x64>)
 8008e60:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e62:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <std+0x68>)
 8008e64:	6224      	str	r4, [r4, #32]
 8008e66:	429c      	cmp	r4, r3
 8008e68:	d006      	beq.n	8008e78 <std+0x48>
 8008e6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e6e:	4294      	cmp	r4, r2
 8008e70:	d002      	beq.n	8008e78 <std+0x48>
 8008e72:	33d0      	adds	r3, #208	@ 0xd0
 8008e74:	429c      	cmp	r4, r3
 8008e76:	d105      	bne.n	8008e84 <std+0x54>
 8008e78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e80:	f000 b9ac 	b.w	80091dc <__retarget_lock_init_recursive>
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	bf00      	nop
 8008e88:	0800905d 	.word	0x0800905d
 8008e8c:	0800907f 	.word	0x0800907f
 8008e90:	080090b7 	.word	0x080090b7
 8008e94:	080090db 	.word	0x080090db
 8008e98:	24000528 	.word	0x24000528

08008e9c <stdio_exit_handler>:
 8008e9c:	4a02      	ldr	r2, [pc, #8]	@ (8008ea8 <stdio_exit_handler+0xc>)
 8008e9e:	4903      	ldr	r1, [pc, #12]	@ (8008eac <stdio_exit_handler+0x10>)
 8008ea0:	4803      	ldr	r0, [pc, #12]	@ (8008eb0 <stdio_exit_handler+0x14>)
 8008ea2:	f000 b869 	b.w	8008f78 <_fwalk_sglue>
 8008ea6:	bf00      	nop
 8008ea8:	240000b0 	.word	0x240000b0
 8008eac:	0800b929 	.word	0x0800b929
 8008eb0:	240000c0 	.word	0x240000c0

08008eb4 <cleanup_stdio>:
 8008eb4:	6841      	ldr	r1, [r0, #4]
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee8 <cleanup_stdio+0x34>)
 8008eb8:	4299      	cmp	r1, r3
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	4604      	mov	r4, r0
 8008ebe:	d001      	beq.n	8008ec4 <cleanup_stdio+0x10>
 8008ec0:	f002 fd32 	bl	800b928 <_fflush_r>
 8008ec4:	68a1      	ldr	r1, [r4, #8]
 8008ec6:	4b09      	ldr	r3, [pc, #36]	@ (8008eec <cleanup_stdio+0x38>)
 8008ec8:	4299      	cmp	r1, r3
 8008eca:	d002      	beq.n	8008ed2 <cleanup_stdio+0x1e>
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f002 fd2b 	bl	800b928 <_fflush_r>
 8008ed2:	68e1      	ldr	r1, [r4, #12]
 8008ed4:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <cleanup_stdio+0x3c>)
 8008ed6:	4299      	cmp	r1, r3
 8008ed8:	d004      	beq.n	8008ee4 <cleanup_stdio+0x30>
 8008eda:	4620      	mov	r0, r4
 8008edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee0:	f002 bd22 	b.w	800b928 <_fflush_r>
 8008ee4:	bd10      	pop	{r4, pc}
 8008ee6:	bf00      	nop
 8008ee8:	24000528 	.word	0x24000528
 8008eec:	24000590 	.word	0x24000590
 8008ef0:	240005f8 	.word	0x240005f8

08008ef4 <global_stdio_init.part.0>:
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8008f24 <global_stdio_init.part.0+0x30>)
 8008ef8:	4c0b      	ldr	r4, [pc, #44]	@ (8008f28 <global_stdio_init.part.0+0x34>)
 8008efa:	4a0c      	ldr	r2, [pc, #48]	@ (8008f2c <global_stdio_init.part.0+0x38>)
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	4620      	mov	r0, r4
 8008f00:	2200      	movs	r2, #0
 8008f02:	2104      	movs	r1, #4
 8008f04:	f7ff ff94 	bl	8008e30 <std>
 8008f08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	2109      	movs	r1, #9
 8008f10:	f7ff ff8e 	bl	8008e30 <std>
 8008f14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f18:	2202      	movs	r2, #2
 8008f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1e:	2112      	movs	r1, #18
 8008f20:	f7ff bf86 	b.w	8008e30 <std>
 8008f24:	24000660 	.word	0x24000660
 8008f28:	24000528 	.word	0x24000528
 8008f2c:	08008e9d 	.word	0x08008e9d

08008f30 <__sfp_lock_acquire>:
 8008f30:	4801      	ldr	r0, [pc, #4]	@ (8008f38 <__sfp_lock_acquire+0x8>)
 8008f32:	f000 b954 	b.w	80091de <__retarget_lock_acquire_recursive>
 8008f36:	bf00      	nop
 8008f38:	24000669 	.word	0x24000669

08008f3c <__sfp_lock_release>:
 8008f3c:	4801      	ldr	r0, [pc, #4]	@ (8008f44 <__sfp_lock_release+0x8>)
 8008f3e:	f000 b94f 	b.w	80091e0 <__retarget_lock_release_recursive>
 8008f42:	bf00      	nop
 8008f44:	24000669 	.word	0x24000669

08008f48 <__sinit>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	f7ff fff0 	bl	8008f30 <__sfp_lock_acquire>
 8008f50:	6a23      	ldr	r3, [r4, #32]
 8008f52:	b11b      	cbz	r3, 8008f5c <__sinit+0x14>
 8008f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f58:	f7ff bff0 	b.w	8008f3c <__sfp_lock_release>
 8008f5c:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <__sinit+0x28>)
 8008f5e:	6223      	str	r3, [r4, #32]
 8008f60:	4b04      	ldr	r3, [pc, #16]	@ (8008f74 <__sinit+0x2c>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1f5      	bne.n	8008f54 <__sinit+0xc>
 8008f68:	f7ff ffc4 	bl	8008ef4 <global_stdio_init.part.0>
 8008f6c:	e7f2      	b.n	8008f54 <__sinit+0xc>
 8008f6e:	bf00      	nop
 8008f70:	08008eb5 	.word	0x08008eb5
 8008f74:	24000660 	.word	0x24000660

08008f78 <_fwalk_sglue>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	4688      	mov	r8, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	2600      	movs	r6, #0
 8008f84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f88:	f1b9 0901 	subs.w	r9, r9, #1
 8008f8c:	d505      	bpl.n	8008f9a <_fwalk_sglue+0x22>
 8008f8e:	6824      	ldr	r4, [r4, #0]
 8008f90:	2c00      	cmp	r4, #0
 8008f92:	d1f7      	bne.n	8008f84 <_fwalk_sglue+0xc>
 8008f94:	4630      	mov	r0, r6
 8008f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d907      	bls.n	8008fb0 <_fwalk_sglue+0x38>
 8008fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	d003      	beq.n	8008fb0 <_fwalk_sglue+0x38>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4638      	mov	r0, r7
 8008fac:	47c0      	blx	r8
 8008fae:	4306      	orrs	r6, r0
 8008fb0:	3568      	adds	r5, #104	@ 0x68
 8008fb2:	e7e9      	b.n	8008f88 <_fwalk_sglue+0x10>

08008fb4 <sniprintf>:
 8008fb4:	b40c      	push	{r2, r3}
 8008fb6:	b530      	push	{r4, r5, lr}
 8008fb8:	4b17      	ldr	r3, [pc, #92]	@ (8009018 <sniprintf+0x64>)
 8008fba:	1e0c      	subs	r4, r1, #0
 8008fbc:	681d      	ldr	r5, [r3, #0]
 8008fbe:	b09d      	sub	sp, #116	@ 0x74
 8008fc0:	da08      	bge.n	8008fd4 <sniprintf+0x20>
 8008fc2:	238b      	movs	r3, #139	@ 0x8b
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fca:	b01d      	add	sp, #116	@ 0x74
 8008fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd0:	b002      	add	sp, #8
 8008fd2:	4770      	bx	lr
 8008fd4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fdc:	bf14      	ite	ne
 8008fde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fe2:	4623      	moveq	r3, r4
 8008fe4:	9304      	str	r3, [sp, #16]
 8008fe6:	9307      	str	r3, [sp, #28]
 8008fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008fec:	9002      	str	r0, [sp, #8]
 8008fee:	9006      	str	r0, [sp, #24]
 8008ff0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ff4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008ff6:	ab21      	add	r3, sp, #132	@ 0x84
 8008ff8:	a902      	add	r1, sp, #8
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	f002 fb13 	bl	800b628 <_svfiprintf_r>
 8009002:	1c43      	adds	r3, r0, #1
 8009004:	bfbc      	itt	lt
 8009006:	238b      	movlt	r3, #139	@ 0x8b
 8009008:	602b      	strlt	r3, [r5, #0]
 800900a:	2c00      	cmp	r4, #0
 800900c:	d0dd      	beq.n	8008fca <sniprintf+0x16>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
 8009014:	e7d9      	b.n	8008fca <sniprintf+0x16>
 8009016:	bf00      	nop
 8009018:	240000bc 	.word	0x240000bc

0800901c <siprintf>:
 800901c:	b40e      	push	{r1, r2, r3}
 800901e:	b500      	push	{lr}
 8009020:	b09c      	sub	sp, #112	@ 0x70
 8009022:	ab1d      	add	r3, sp, #116	@ 0x74
 8009024:	9002      	str	r0, [sp, #8]
 8009026:	9006      	str	r0, [sp, #24]
 8009028:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800902c:	4809      	ldr	r0, [pc, #36]	@ (8009054 <siprintf+0x38>)
 800902e:	9107      	str	r1, [sp, #28]
 8009030:	9104      	str	r1, [sp, #16]
 8009032:	4909      	ldr	r1, [pc, #36]	@ (8009058 <siprintf+0x3c>)
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	9105      	str	r1, [sp, #20]
 800903a:	6800      	ldr	r0, [r0, #0]
 800903c:	9301      	str	r3, [sp, #4]
 800903e:	a902      	add	r1, sp, #8
 8009040:	f002 faf2 	bl	800b628 <_svfiprintf_r>
 8009044:	9b02      	ldr	r3, [sp, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
 800904a:	b01c      	add	sp, #112	@ 0x70
 800904c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009050:	b003      	add	sp, #12
 8009052:	4770      	bx	lr
 8009054:	240000bc 	.word	0x240000bc
 8009058:	ffff0208 	.word	0xffff0208

0800905c <__sread>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	f000 f86c 	bl	8009140 <_read_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	bfab      	itete	ge
 800906c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800906e:	89a3      	ldrhlt	r3, [r4, #12]
 8009070:	181b      	addge	r3, r3, r0
 8009072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009076:	bfac      	ite	ge
 8009078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800907a:	81a3      	strhlt	r3, [r4, #12]
 800907c:	bd10      	pop	{r4, pc}

0800907e <__swrite>:
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	461f      	mov	r7, r3
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	05db      	lsls	r3, r3, #23
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	4616      	mov	r6, r2
 800908e:	d505      	bpl.n	800909c <__swrite+0x1e>
 8009090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009094:	2302      	movs	r3, #2
 8009096:	2200      	movs	r2, #0
 8009098:	f000 f840 	bl	800911c <_lseek_r>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	4632      	mov	r2, r6
 80090aa:	463b      	mov	r3, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	f000 b857 	b.w	8009164 <_write_r>

080090b6 <__sseek>:
 80090b6:	b510      	push	{r4, lr}
 80090b8:	460c      	mov	r4, r1
 80090ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090be:	f000 f82d 	bl	800911c <_lseek_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	bf15      	itete	ne
 80090c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090d2:	81a3      	strheq	r3, [r4, #12]
 80090d4:	bf18      	it	ne
 80090d6:	81a3      	strhne	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__sclose>:
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 b80d 	b.w	80090fc <_close_r>

080090e2 <memset>:
 80090e2:	4402      	add	r2, r0
 80090e4:	4603      	mov	r3, r0
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d100      	bne.n	80090ec <memset+0xa>
 80090ea:	4770      	bx	lr
 80090ec:	f803 1b01 	strb.w	r1, [r3], #1
 80090f0:	e7f9      	b.n	80090e6 <memset+0x4>
	...

080090f4 <_localeconv_r>:
 80090f4:	4800      	ldr	r0, [pc, #0]	@ (80090f8 <_localeconv_r+0x4>)
 80090f6:	4770      	bx	lr
 80090f8:	240001fc 	.word	0x240001fc

080090fc <_close_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d06      	ldr	r5, [pc, #24]	@ (8009118 <_close_r+0x1c>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	602b      	str	r3, [r5, #0]
 8009108:	f7f9 f81c 	bl	8002144 <_close>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d102      	bne.n	8009116 <_close_r+0x1a>
 8009110:	682b      	ldr	r3, [r5, #0]
 8009112:	b103      	cbz	r3, 8009116 <_close_r+0x1a>
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	bd38      	pop	{r3, r4, r5, pc}
 8009118:	24000664 	.word	0x24000664

0800911c <_lseek_r>:
 800911c:	b538      	push	{r3, r4, r5, lr}
 800911e:	4d07      	ldr	r5, [pc, #28]	@ (800913c <_lseek_r+0x20>)
 8009120:	4604      	mov	r4, r0
 8009122:	4608      	mov	r0, r1
 8009124:	4611      	mov	r1, r2
 8009126:	2200      	movs	r2, #0
 8009128:	602a      	str	r2, [r5, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	f7f9 f831 	bl	8002192 <_lseek>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_lseek_r+0x1e>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_lseek_r+0x1e>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	24000664 	.word	0x24000664

08009140 <_read_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d07      	ldr	r5, [pc, #28]	@ (8009160 <_read_r+0x20>)
 8009144:	4604      	mov	r4, r0
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f8 ffdb 	bl	800210a <_read>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_read_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_read_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	24000664 	.word	0x24000664

08009164 <_write_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	@ (8009184 <_write_r+0x20>)
 8009168:	4604      	mov	r4, r0
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	2200      	movs	r2, #0
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7f8 fab4 	bl	80016e0 <_write>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_write_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_write_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	24000664 	.word	0x24000664

08009188 <__errno>:
 8009188:	4b01      	ldr	r3, [pc, #4]	@ (8009190 <__errno+0x8>)
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	240000bc 	.word	0x240000bc

08009194 <__libc_init_array>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	4d0d      	ldr	r5, [pc, #52]	@ (80091cc <__libc_init_array+0x38>)
 8009198:	4c0d      	ldr	r4, [pc, #52]	@ (80091d0 <__libc_init_array+0x3c>)
 800919a:	1b64      	subs	r4, r4, r5
 800919c:	10a4      	asrs	r4, r4, #2
 800919e:	2600      	movs	r6, #0
 80091a0:	42a6      	cmp	r6, r4
 80091a2:	d109      	bne.n	80091b8 <__libc_init_array+0x24>
 80091a4:	4d0b      	ldr	r5, [pc, #44]	@ (80091d4 <__libc_init_array+0x40>)
 80091a6:	4c0c      	ldr	r4, [pc, #48]	@ (80091d8 <__libc_init_array+0x44>)
 80091a8:	f003 fbd8 	bl	800c95c <_init>
 80091ac:	1b64      	subs	r4, r4, r5
 80091ae:	10a4      	asrs	r4, r4, #2
 80091b0:	2600      	movs	r6, #0
 80091b2:	42a6      	cmp	r6, r4
 80091b4:	d105      	bne.n	80091c2 <__libc_init_array+0x2e>
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091bc:	4798      	blx	r3
 80091be:	3601      	adds	r6, #1
 80091c0:	e7ee      	b.n	80091a0 <__libc_init_array+0xc>
 80091c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c6:	4798      	blx	r3
 80091c8:	3601      	adds	r6, #1
 80091ca:	e7f2      	b.n	80091b2 <__libc_init_array+0x1e>
 80091cc:	0800ce40 	.word	0x0800ce40
 80091d0:	0800ce40 	.word	0x0800ce40
 80091d4:	0800ce40 	.word	0x0800ce40
 80091d8:	0800ce44 	.word	0x0800ce44

080091dc <__retarget_lock_init_recursive>:
 80091dc:	4770      	bx	lr

080091de <__retarget_lock_acquire_recursive>:
 80091de:	4770      	bx	lr

080091e0 <__retarget_lock_release_recursive>:
 80091e0:	4770      	bx	lr
	...

080091e4 <nanf>:
 80091e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80091ec <nanf+0x8>
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	7fc00000 	.word	0x7fc00000

080091f0 <quorem>:
 80091f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	6903      	ldr	r3, [r0, #16]
 80091f6:	690c      	ldr	r4, [r1, #16]
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	4607      	mov	r7, r0
 80091fc:	db7e      	blt.n	80092fc <quorem+0x10c>
 80091fe:	3c01      	subs	r4, #1
 8009200:	f101 0814 	add.w	r8, r1, #20
 8009204:	00a3      	lsls	r3, r4, #2
 8009206:	f100 0514 	add.w	r5, r0, #20
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800921a:	3301      	adds	r3, #1
 800921c:	429a      	cmp	r2, r3
 800921e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009222:	fbb2 f6f3 	udiv	r6, r2, r3
 8009226:	d32e      	bcc.n	8009286 <quorem+0x96>
 8009228:	f04f 0a00 	mov.w	sl, #0
 800922c:	46c4      	mov	ip, r8
 800922e:	46ae      	mov	lr, r5
 8009230:	46d3      	mov	fp, sl
 8009232:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009236:	b298      	uxth	r0, r3
 8009238:	fb06 a000 	mla	r0, r6, r0, sl
 800923c:	0c02      	lsrs	r2, r0, #16
 800923e:	0c1b      	lsrs	r3, r3, #16
 8009240:	fb06 2303 	mla	r3, r6, r3, r2
 8009244:	f8de 2000 	ldr.w	r2, [lr]
 8009248:	b280      	uxth	r0, r0
 800924a:	b292      	uxth	r2, r2
 800924c:	1a12      	subs	r2, r2, r0
 800924e:	445a      	add	r2, fp
 8009250:	f8de 0000 	ldr.w	r0, [lr]
 8009254:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009258:	b29b      	uxth	r3, r3
 800925a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800925e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009262:	b292      	uxth	r2, r2
 8009264:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009268:	45e1      	cmp	r9, ip
 800926a:	f84e 2b04 	str.w	r2, [lr], #4
 800926e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009272:	d2de      	bcs.n	8009232 <quorem+0x42>
 8009274:	9b00      	ldr	r3, [sp, #0]
 8009276:	58eb      	ldr	r3, [r5, r3]
 8009278:	b92b      	cbnz	r3, 8009286 <quorem+0x96>
 800927a:	9b01      	ldr	r3, [sp, #4]
 800927c:	3b04      	subs	r3, #4
 800927e:	429d      	cmp	r5, r3
 8009280:	461a      	mov	r2, r3
 8009282:	d32f      	bcc.n	80092e4 <quorem+0xf4>
 8009284:	613c      	str	r4, [r7, #16]
 8009286:	4638      	mov	r0, r7
 8009288:	f001 f954 	bl	800a534 <__mcmp>
 800928c:	2800      	cmp	r0, #0
 800928e:	db25      	blt.n	80092dc <quorem+0xec>
 8009290:	4629      	mov	r1, r5
 8009292:	2000      	movs	r0, #0
 8009294:	f858 2b04 	ldr.w	r2, [r8], #4
 8009298:	f8d1 c000 	ldr.w	ip, [r1]
 800929c:	fa1f fe82 	uxth.w	lr, r2
 80092a0:	fa1f f38c 	uxth.w	r3, ip
 80092a4:	eba3 030e 	sub.w	r3, r3, lr
 80092a8:	4403      	add	r3, r0
 80092aa:	0c12      	lsrs	r2, r2, #16
 80092ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80092b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ba:	45c1      	cmp	r9, r8
 80092bc:	f841 3b04 	str.w	r3, [r1], #4
 80092c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092c4:	d2e6      	bcs.n	8009294 <quorem+0xa4>
 80092c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ce:	b922      	cbnz	r2, 80092da <quorem+0xea>
 80092d0:	3b04      	subs	r3, #4
 80092d2:	429d      	cmp	r5, r3
 80092d4:	461a      	mov	r2, r3
 80092d6:	d30b      	bcc.n	80092f0 <quorem+0x100>
 80092d8:	613c      	str	r4, [r7, #16]
 80092da:	3601      	adds	r6, #1
 80092dc:	4630      	mov	r0, r6
 80092de:	b003      	add	sp, #12
 80092e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	3b04      	subs	r3, #4
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	d1cb      	bne.n	8009284 <quorem+0x94>
 80092ec:	3c01      	subs	r4, #1
 80092ee:	e7c6      	b.n	800927e <quorem+0x8e>
 80092f0:	6812      	ldr	r2, [r2, #0]
 80092f2:	3b04      	subs	r3, #4
 80092f4:	2a00      	cmp	r2, #0
 80092f6:	d1ef      	bne.n	80092d8 <quorem+0xe8>
 80092f8:	3c01      	subs	r4, #1
 80092fa:	e7ea      	b.n	80092d2 <quorem+0xe2>
 80092fc:	2000      	movs	r0, #0
 80092fe:	e7ee      	b.n	80092de <quorem+0xee>

08009300 <_dtoa_r>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	ed2d 8b02 	vpush	{d8}
 8009308:	69c7      	ldr	r7, [r0, #28]
 800930a:	b091      	sub	sp, #68	@ 0x44
 800930c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009310:	ec55 4b10 	vmov	r4, r5, d0
 8009314:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009316:	9107      	str	r1, [sp, #28]
 8009318:	4681      	mov	r9, r0
 800931a:	9209      	str	r2, [sp, #36]	@ 0x24
 800931c:	930d      	str	r3, [sp, #52]	@ 0x34
 800931e:	b97f      	cbnz	r7, 8009340 <_dtoa_r+0x40>
 8009320:	2010      	movs	r0, #16
 8009322:	f000 fd8d 	bl	8009e40 <malloc>
 8009326:	4602      	mov	r2, r0
 8009328:	f8c9 001c 	str.w	r0, [r9, #28]
 800932c:	b920      	cbnz	r0, 8009338 <_dtoa_r+0x38>
 800932e:	4ba0      	ldr	r3, [pc, #640]	@ (80095b0 <_dtoa_r+0x2b0>)
 8009330:	21ef      	movs	r1, #239	@ 0xef
 8009332:	48a0      	ldr	r0, [pc, #640]	@ (80095b4 <_dtoa_r+0x2b4>)
 8009334:	f002 fb74 	bl	800ba20 <__assert_func>
 8009338:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800933c:	6007      	str	r7, [r0, #0]
 800933e:	60c7      	str	r7, [r0, #12]
 8009340:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009344:	6819      	ldr	r1, [r3, #0]
 8009346:	b159      	cbz	r1, 8009360 <_dtoa_r+0x60>
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	604a      	str	r2, [r1, #4]
 800934c:	2301      	movs	r3, #1
 800934e:	4093      	lsls	r3, r2
 8009350:	608b      	str	r3, [r1, #8]
 8009352:	4648      	mov	r0, r9
 8009354:	f000 fe6a 	bl	800a02c <_Bfree>
 8009358:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
 8009360:	1e2b      	subs	r3, r5, #0
 8009362:	bfbb      	ittet	lt
 8009364:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009368:	9303      	strlt	r3, [sp, #12]
 800936a:	2300      	movge	r3, #0
 800936c:	2201      	movlt	r2, #1
 800936e:	bfac      	ite	ge
 8009370:	6033      	strge	r3, [r6, #0]
 8009372:	6032      	strlt	r2, [r6, #0]
 8009374:	4b90      	ldr	r3, [pc, #576]	@ (80095b8 <_dtoa_r+0x2b8>)
 8009376:	9e03      	ldr	r6, [sp, #12]
 8009378:	43b3      	bics	r3, r6
 800937a:	d110      	bne.n	800939e <_dtoa_r+0x9e>
 800937c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800937e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009388:	4323      	orrs	r3, r4
 800938a:	f000 84de 	beq.w	8009d4a <_dtoa_r+0xa4a>
 800938e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009390:	4f8a      	ldr	r7, [pc, #552]	@ (80095bc <_dtoa_r+0x2bc>)
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 84e0 	beq.w	8009d58 <_dtoa_r+0xa58>
 8009398:	1cfb      	adds	r3, r7, #3
 800939a:	f000 bcdb 	b.w	8009d54 <_dtoa_r+0xa54>
 800939e:	ed9d 8b02 	vldr	d8, [sp, #8]
 80093a2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80093a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093aa:	d10a      	bne.n	80093c2 <_dtoa_r+0xc2>
 80093ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093ae:	2301      	movs	r3, #1
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093b4:	b113      	cbz	r3, 80093bc <_dtoa_r+0xbc>
 80093b6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80093b8:	4b81      	ldr	r3, [pc, #516]	@ (80095c0 <_dtoa_r+0x2c0>)
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	4f81      	ldr	r7, [pc, #516]	@ (80095c4 <_dtoa_r+0x2c4>)
 80093be:	f000 bccb 	b.w	8009d58 <_dtoa_r+0xa58>
 80093c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80093c4:	a90f      	add	r1, sp, #60	@ 0x3c
 80093c6:	4648      	mov	r0, r9
 80093c8:	eeb0 0b48 	vmov.f64	d0, d8
 80093cc:	f001 f9d2 	bl	800a774 <__d2b>
 80093d0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80093d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093d6:	9001      	str	r0, [sp, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d045      	beq.n	8009468 <_dtoa_r+0x168>
 80093dc:	eeb0 7b48 	vmov.f64	d7, d8
 80093e0:	ee18 1a90 	vmov	r1, s17
 80093e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80093e8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80093ec:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80093f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80093f4:	2500      	movs	r5, #0
 80093f6:	ee07 1a90 	vmov	s15, r1
 80093fa:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80093fe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009598 <_dtoa_r+0x298>
 8009402:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009406:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80095a0 <_dtoa_r+0x2a0>
 800940a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800940e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80095a8 <_dtoa_r+0x2a8>
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800941a:	eeb0 7b46 	vmov.f64	d7, d6
 800941e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009422:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009426:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800942a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942e:	ee16 8a90 	vmov	r8, s13
 8009432:	d508      	bpl.n	8009446 <_dtoa_r+0x146>
 8009434:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009438:	eeb4 6b47 	vcmp.f64	d6, d7
 800943c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009440:	bf18      	it	ne
 8009442:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009446:	f1b8 0f16 	cmp.w	r8, #22
 800944a:	d82b      	bhi.n	80094a4 <_dtoa_r+0x1a4>
 800944c:	495e      	ldr	r1, [pc, #376]	@ (80095c8 <_dtoa_r+0x2c8>)
 800944e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009452:	ed91 7b00 	vldr	d7, [r1]
 8009456:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945e:	d501      	bpl.n	8009464 <_dtoa_r+0x164>
 8009460:	f108 38ff 	add.w	r8, r8, #4294967295
 8009464:	2100      	movs	r1, #0
 8009466:	e01e      	b.n	80094a6 <_dtoa_r+0x1a6>
 8009468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800946a:	4413      	add	r3, r2
 800946c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009470:	2920      	cmp	r1, #32
 8009472:	bfc1      	itttt	gt
 8009474:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009478:	408e      	lslgt	r6, r1
 800947a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800947e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009482:	bfd6      	itet	le
 8009484:	f1c1 0120 	rsble	r1, r1, #32
 8009488:	4331      	orrgt	r1, r6
 800948a:	fa04 f101 	lslle.w	r1, r4, r1
 800948e:	ee07 1a90 	vmov	s15, r1
 8009492:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009496:	3b01      	subs	r3, #1
 8009498:	ee17 1a90 	vmov	r1, s15
 800949c:	2501      	movs	r5, #1
 800949e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80094a2:	e7a8      	b.n	80093f6 <_dtoa_r+0xf6>
 80094a4:	2101      	movs	r1, #1
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	1e53      	subs	r3, r2, #1
 80094aa:	9306      	str	r3, [sp, #24]
 80094ac:	bf45      	ittet	mi
 80094ae:	f1c2 0301 	rsbmi	r3, r2, #1
 80094b2:	9305      	strmi	r3, [sp, #20]
 80094b4:	2300      	movpl	r3, #0
 80094b6:	2300      	movmi	r3, #0
 80094b8:	bf4c      	ite	mi
 80094ba:	9306      	strmi	r3, [sp, #24]
 80094bc:	9305      	strpl	r3, [sp, #20]
 80094be:	f1b8 0f00 	cmp.w	r8, #0
 80094c2:	910c      	str	r1, [sp, #48]	@ 0x30
 80094c4:	db18      	blt.n	80094f8 <_dtoa_r+0x1f8>
 80094c6:	9b06      	ldr	r3, [sp, #24]
 80094c8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80094cc:	4443      	add	r3, r8
 80094ce:	9306      	str	r3, [sp, #24]
 80094d0:	2300      	movs	r3, #0
 80094d2:	9a07      	ldr	r2, [sp, #28]
 80094d4:	2a09      	cmp	r2, #9
 80094d6:	d849      	bhi.n	800956c <_dtoa_r+0x26c>
 80094d8:	2a05      	cmp	r2, #5
 80094da:	bfc4      	itt	gt
 80094dc:	3a04      	subgt	r2, #4
 80094de:	9207      	strgt	r2, [sp, #28]
 80094e0:	9a07      	ldr	r2, [sp, #28]
 80094e2:	f1a2 0202 	sub.w	r2, r2, #2
 80094e6:	bfcc      	ite	gt
 80094e8:	2400      	movgt	r4, #0
 80094ea:	2401      	movle	r4, #1
 80094ec:	2a03      	cmp	r2, #3
 80094ee:	d848      	bhi.n	8009582 <_dtoa_r+0x282>
 80094f0:	e8df f002 	tbb	[pc, r2]
 80094f4:	3a2c2e0b 	.word	0x3a2c2e0b
 80094f8:	9b05      	ldr	r3, [sp, #20]
 80094fa:	2200      	movs	r2, #0
 80094fc:	eba3 0308 	sub.w	r3, r3, r8
 8009500:	9305      	str	r3, [sp, #20]
 8009502:	920a      	str	r2, [sp, #40]	@ 0x28
 8009504:	f1c8 0300 	rsb	r3, r8, #0
 8009508:	e7e3      	b.n	80094d2 <_dtoa_r+0x1d2>
 800950a:	2200      	movs	r2, #0
 800950c:	9208      	str	r2, [sp, #32]
 800950e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009510:	2a00      	cmp	r2, #0
 8009512:	dc39      	bgt.n	8009588 <_dtoa_r+0x288>
 8009514:	f04f 0b01 	mov.w	fp, #1
 8009518:	46da      	mov	sl, fp
 800951a:	465a      	mov	r2, fp
 800951c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009520:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009524:	2100      	movs	r1, #0
 8009526:	2004      	movs	r0, #4
 8009528:	f100 0614 	add.w	r6, r0, #20
 800952c:	4296      	cmp	r6, r2
 800952e:	d930      	bls.n	8009592 <_dtoa_r+0x292>
 8009530:	6079      	str	r1, [r7, #4]
 8009532:	4648      	mov	r0, r9
 8009534:	9304      	str	r3, [sp, #16]
 8009536:	f000 fd39 	bl	8009fac <_Balloc>
 800953a:	9b04      	ldr	r3, [sp, #16]
 800953c:	4607      	mov	r7, r0
 800953e:	2800      	cmp	r0, #0
 8009540:	d146      	bne.n	80095d0 <_dtoa_r+0x2d0>
 8009542:	4b22      	ldr	r3, [pc, #136]	@ (80095cc <_dtoa_r+0x2cc>)
 8009544:	4602      	mov	r2, r0
 8009546:	f240 11af 	movw	r1, #431	@ 0x1af
 800954a:	e6f2      	b.n	8009332 <_dtoa_r+0x32>
 800954c:	2201      	movs	r2, #1
 800954e:	e7dd      	b.n	800950c <_dtoa_r+0x20c>
 8009550:	2200      	movs	r2, #0
 8009552:	9208      	str	r2, [sp, #32]
 8009554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009556:	eb08 0b02 	add.w	fp, r8, r2
 800955a:	f10b 0a01 	add.w	sl, fp, #1
 800955e:	4652      	mov	r2, sl
 8009560:	2a01      	cmp	r2, #1
 8009562:	bfb8      	it	lt
 8009564:	2201      	movlt	r2, #1
 8009566:	e7db      	b.n	8009520 <_dtoa_r+0x220>
 8009568:	2201      	movs	r2, #1
 800956a:	e7f2      	b.n	8009552 <_dtoa_r+0x252>
 800956c:	2401      	movs	r4, #1
 800956e:	2200      	movs	r2, #0
 8009570:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009574:	f04f 3bff 	mov.w	fp, #4294967295
 8009578:	2100      	movs	r1, #0
 800957a:	46da      	mov	sl, fp
 800957c:	2212      	movs	r2, #18
 800957e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009580:	e7ce      	b.n	8009520 <_dtoa_r+0x220>
 8009582:	2201      	movs	r2, #1
 8009584:	9208      	str	r2, [sp, #32]
 8009586:	e7f5      	b.n	8009574 <_dtoa_r+0x274>
 8009588:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800958c:	46da      	mov	sl, fp
 800958e:	465a      	mov	r2, fp
 8009590:	e7c6      	b.n	8009520 <_dtoa_r+0x220>
 8009592:	3101      	adds	r1, #1
 8009594:	0040      	lsls	r0, r0, #1
 8009596:	e7c7      	b.n	8009528 <_dtoa_r+0x228>
 8009598:	636f4361 	.word	0x636f4361
 800959c:	3fd287a7 	.word	0x3fd287a7
 80095a0:	8b60c8b3 	.word	0x8b60c8b3
 80095a4:	3fc68a28 	.word	0x3fc68a28
 80095a8:	509f79fb 	.word	0x509f79fb
 80095ac:	3fd34413 	.word	0x3fd34413
 80095b0:	0800ca0e 	.word	0x0800ca0e
 80095b4:	0800ca25 	.word	0x0800ca25
 80095b8:	7ff00000 	.word	0x7ff00000
 80095bc:	0800ca0a 	.word	0x0800ca0a
 80095c0:	0800c9d9 	.word	0x0800c9d9
 80095c4:	0800c9d8 	.word	0x0800c9d8
 80095c8:	0800cb20 	.word	0x0800cb20
 80095cc:	0800ca7d 	.word	0x0800ca7d
 80095d0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80095d4:	f1ba 0f0e 	cmp.w	sl, #14
 80095d8:	6010      	str	r0, [r2, #0]
 80095da:	d86f      	bhi.n	80096bc <_dtoa_r+0x3bc>
 80095dc:	2c00      	cmp	r4, #0
 80095de:	d06d      	beq.n	80096bc <_dtoa_r+0x3bc>
 80095e0:	f1b8 0f00 	cmp.w	r8, #0
 80095e4:	f340 80c2 	ble.w	800976c <_dtoa_r+0x46c>
 80095e8:	4aca      	ldr	r2, [pc, #808]	@ (8009914 <_dtoa_r+0x614>)
 80095ea:	f008 010f 	and.w	r1, r8, #15
 80095ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80095f2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80095f6:	ed92 7b00 	vldr	d7, [r2]
 80095fa:	ea4f 1128 	mov.w	r1, r8, asr #4
 80095fe:	f000 80a9 	beq.w	8009754 <_dtoa_r+0x454>
 8009602:	4ac5      	ldr	r2, [pc, #788]	@ (8009918 <_dtoa_r+0x618>)
 8009604:	ed92 6b08 	vldr	d6, [r2, #32]
 8009608:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800960c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009610:	f001 010f 	and.w	r1, r1, #15
 8009614:	2203      	movs	r2, #3
 8009616:	48c0      	ldr	r0, [pc, #768]	@ (8009918 <_dtoa_r+0x618>)
 8009618:	2900      	cmp	r1, #0
 800961a:	f040 809d 	bne.w	8009758 <_dtoa_r+0x458>
 800961e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009622:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009626:	ed8d 7b02 	vstr	d7, [sp, #8]
 800962a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800962c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009630:	2900      	cmp	r1, #0
 8009632:	f000 80c1 	beq.w	80097b8 <_dtoa_r+0x4b8>
 8009636:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800963a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800963e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009642:	f140 80b9 	bpl.w	80097b8 <_dtoa_r+0x4b8>
 8009646:	f1ba 0f00 	cmp.w	sl, #0
 800964a:	f000 80b5 	beq.w	80097b8 <_dtoa_r+0x4b8>
 800964e:	f1bb 0f00 	cmp.w	fp, #0
 8009652:	dd31      	ble.n	80096b8 <_dtoa_r+0x3b8>
 8009654:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009658:	ee27 7b06 	vmul.f64	d7, d7, d6
 800965c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009660:	f108 31ff 	add.w	r1, r8, #4294967295
 8009664:	9104      	str	r1, [sp, #16]
 8009666:	3201      	adds	r2, #1
 8009668:	465c      	mov	r4, fp
 800966a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800966e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009672:	ee07 2a90 	vmov	s15, r2
 8009676:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800967a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800967e:	ee15 2a90 	vmov	r2, s11
 8009682:	ec51 0b15 	vmov	r0, r1, d5
 8009686:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800968a:	2c00      	cmp	r4, #0
 800968c:	f040 8098 	bne.w	80097c0 <_dtoa_r+0x4c0>
 8009690:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009694:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009698:	ec41 0b17 	vmov	d7, r0, r1
 800969c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a4:	f300 8261 	bgt.w	8009b6a <_dtoa_r+0x86a>
 80096a8:	eeb1 7b47 	vneg.f64	d7, d7
 80096ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80096b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096b4:	f100 80f5 	bmi.w	80098a2 <_dtoa_r+0x5a2>
 80096b8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80096bc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096be:	2a00      	cmp	r2, #0
 80096c0:	f2c0 812c 	blt.w	800991c <_dtoa_r+0x61c>
 80096c4:	f1b8 0f0e 	cmp.w	r8, #14
 80096c8:	f300 8128 	bgt.w	800991c <_dtoa_r+0x61c>
 80096cc:	4b91      	ldr	r3, [pc, #580]	@ (8009914 <_dtoa_r+0x614>)
 80096ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096d2:	ed93 6b00 	vldr	d6, [r3]
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da03      	bge.n	80096e4 <_dtoa_r+0x3e4>
 80096dc:	f1ba 0f00 	cmp.w	sl, #0
 80096e0:	f340 80d2 	ble.w	8009888 <_dtoa_r+0x588>
 80096e4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80096e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096ec:	463e      	mov	r6, r7
 80096ee:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80096f2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80096f6:	ee15 3a10 	vmov	r3, s10
 80096fa:	3330      	adds	r3, #48	@ 0x30
 80096fc:	f806 3b01 	strb.w	r3, [r6], #1
 8009700:	1bf3      	subs	r3, r6, r7
 8009702:	459a      	cmp	sl, r3
 8009704:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009708:	eea3 7b46 	vfms.f64	d7, d3, d6
 800970c:	f040 80f8 	bne.w	8009900 <_dtoa_r+0x600>
 8009710:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009714:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971c:	f300 80dd 	bgt.w	80098da <_dtoa_r+0x5da>
 8009720:	eeb4 7b46 	vcmp.f64	d7, d6
 8009724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009728:	d104      	bne.n	8009734 <_dtoa_r+0x434>
 800972a:	ee15 3a10 	vmov	r3, s10
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	f100 80d3 	bmi.w	80098da <_dtoa_r+0x5da>
 8009734:	9901      	ldr	r1, [sp, #4]
 8009736:	4648      	mov	r0, r9
 8009738:	f000 fc78 	bl	800a02c <_Bfree>
 800973c:	2300      	movs	r3, #0
 800973e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009740:	7033      	strb	r3, [r6, #0]
 8009742:	f108 0301 	add.w	r3, r8, #1
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8304 	beq.w	8009d58 <_dtoa_r+0xa58>
 8009750:	601e      	str	r6, [r3, #0]
 8009752:	e301      	b.n	8009d58 <_dtoa_r+0xa58>
 8009754:	2202      	movs	r2, #2
 8009756:	e75e      	b.n	8009616 <_dtoa_r+0x316>
 8009758:	07cc      	lsls	r4, r1, #31
 800975a:	d504      	bpl.n	8009766 <_dtoa_r+0x466>
 800975c:	ed90 6b00 	vldr	d6, [r0]
 8009760:	3201      	adds	r2, #1
 8009762:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009766:	1049      	asrs	r1, r1, #1
 8009768:	3008      	adds	r0, #8
 800976a:	e755      	b.n	8009618 <_dtoa_r+0x318>
 800976c:	d022      	beq.n	80097b4 <_dtoa_r+0x4b4>
 800976e:	f1c8 0100 	rsb	r1, r8, #0
 8009772:	4a68      	ldr	r2, [pc, #416]	@ (8009914 <_dtoa_r+0x614>)
 8009774:	f001 000f 	and.w	r0, r1, #15
 8009778:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800977c:	ed92 7b00 	vldr	d7, [r2]
 8009780:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009784:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009788:	4863      	ldr	r0, [pc, #396]	@ (8009918 <_dtoa_r+0x618>)
 800978a:	1109      	asrs	r1, r1, #4
 800978c:	2400      	movs	r4, #0
 800978e:	2202      	movs	r2, #2
 8009790:	b929      	cbnz	r1, 800979e <_dtoa_r+0x49e>
 8009792:	2c00      	cmp	r4, #0
 8009794:	f43f af49 	beq.w	800962a <_dtoa_r+0x32a>
 8009798:	ed8d 7b02 	vstr	d7, [sp, #8]
 800979c:	e745      	b.n	800962a <_dtoa_r+0x32a>
 800979e:	07ce      	lsls	r6, r1, #31
 80097a0:	d505      	bpl.n	80097ae <_dtoa_r+0x4ae>
 80097a2:	ed90 6b00 	vldr	d6, [r0]
 80097a6:	3201      	adds	r2, #1
 80097a8:	2401      	movs	r4, #1
 80097aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097ae:	1049      	asrs	r1, r1, #1
 80097b0:	3008      	adds	r0, #8
 80097b2:	e7ed      	b.n	8009790 <_dtoa_r+0x490>
 80097b4:	2202      	movs	r2, #2
 80097b6:	e738      	b.n	800962a <_dtoa_r+0x32a>
 80097b8:	f8cd 8010 	str.w	r8, [sp, #16]
 80097bc:	4654      	mov	r4, sl
 80097be:	e754      	b.n	800966a <_dtoa_r+0x36a>
 80097c0:	4a54      	ldr	r2, [pc, #336]	@ (8009914 <_dtoa_r+0x614>)
 80097c2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80097c6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80097ca:	9a08      	ldr	r2, [sp, #32]
 80097cc:	ec41 0b17 	vmov	d7, r0, r1
 80097d0:	443c      	add	r4, r7
 80097d2:	b34a      	cbz	r2, 8009828 <_dtoa_r+0x528>
 80097d4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80097d8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80097dc:	463e      	mov	r6, r7
 80097de:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80097e2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80097e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80097ea:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80097ee:	ee14 2a90 	vmov	r2, s9
 80097f2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80097f6:	3230      	adds	r2, #48	@ 0x30
 80097f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80097fc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009804:	f806 2b01 	strb.w	r2, [r6], #1
 8009808:	d438      	bmi.n	800987c <_dtoa_r+0x57c>
 800980a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800980e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009816:	d462      	bmi.n	80098de <_dtoa_r+0x5de>
 8009818:	42a6      	cmp	r6, r4
 800981a:	f43f af4d 	beq.w	80096b8 <_dtoa_r+0x3b8>
 800981e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009822:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009826:	e7e0      	b.n	80097ea <_dtoa_r+0x4ea>
 8009828:	4621      	mov	r1, r4
 800982a:	463e      	mov	r6, r7
 800982c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009830:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009834:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009838:	ee14 2a90 	vmov	r2, s9
 800983c:	3230      	adds	r2, #48	@ 0x30
 800983e:	f806 2b01 	strb.w	r2, [r6], #1
 8009842:	42a6      	cmp	r6, r4
 8009844:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009848:	ee36 6b45 	vsub.f64	d6, d6, d5
 800984c:	d119      	bne.n	8009882 <_dtoa_r+0x582>
 800984e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009852:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009856:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985e:	dc3e      	bgt.n	80098de <_dtoa_r+0x5de>
 8009860:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009864:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	f57f af24 	bpl.w	80096b8 <_dtoa_r+0x3b8>
 8009870:	460e      	mov	r6, r1
 8009872:	3901      	subs	r1, #1
 8009874:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009878:	2b30      	cmp	r3, #48	@ 0x30
 800987a:	d0f9      	beq.n	8009870 <_dtoa_r+0x570>
 800987c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009880:	e758      	b.n	8009734 <_dtoa_r+0x434>
 8009882:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009886:	e7d5      	b.n	8009834 <_dtoa_r+0x534>
 8009888:	d10b      	bne.n	80098a2 <_dtoa_r+0x5a2>
 800988a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800988e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009892:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009896:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800989a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989e:	f2c0 8161 	blt.w	8009b64 <_dtoa_r+0x864>
 80098a2:	2400      	movs	r4, #0
 80098a4:	4625      	mov	r5, r4
 80098a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a8:	43db      	mvns	r3, r3
 80098aa:	9304      	str	r3, [sp, #16]
 80098ac:	463e      	mov	r6, r7
 80098ae:	f04f 0800 	mov.w	r8, #0
 80098b2:	4621      	mov	r1, r4
 80098b4:	4648      	mov	r0, r9
 80098b6:	f000 fbb9 	bl	800a02c <_Bfree>
 80098ba:	2d00      	cmp	r5, #0
 80098bc:	d0de      	beq.n	800987c <_dtoa_r+0x57c>
 80098be:	f1b8 0f00 	cmp.w	r8, #0
 80098c2:	d005      	beq.n	80098d0 <_dtoa_r+0x5d0>
 80098c4:	45a8      	cmp	r8, r5
 80098c6:	d003      	beq.n	80098d0 <_dtoa_r+0x5d0>
 80098c8:	4641      	mov	r1, r8
 80098ca:	4648      	mov	r0, r9
 80098cc:	f000 fbae 	bl	800a02c <_Bfree>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4648      	mov	r0, r9
 80098d4:	f000 fbaa 	bl	800a02c <_Bfree>
 80098d8:	e7d0      	b.n	800987c <_dtoa_r+0x57c>
 80098da:	f8cd 8010 	str.w	r8, [sp, #16]
 80098de:	4633      	mov	r3, r6
 80098e0:	461e      	mov	r6, r3
 80098e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098e6:	2a39      	cmp	r2, #57	@ 0x39
 80098e8:	d106      	bne.n	80098f8 <_dtoa_r+0x5f8>
 80098ea:	429f      	cmp	r7, r3
 80098ec:	d1f8      	bne.n	80098e0 <_dtoa_r+0x5e0>
 80098ee:	9a04      	ldr	r2, [sp, #16]
 80098f0:	3201      	adds	r2, #1
 80098f2:	9204      	str	r2, [sp, #16]
 80098f4:	2230      	movs	r2, #48	@ 0x30
 80098f6:	703a      	strb	r2, [r7, #0]
 80098f8:	781a      	ldrb	r2, [r3, #0]
 80098fa:	3201      	adds	r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e7bd      	b.n	800987c <_dtoa_r+0x57c>
 8009900:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009904:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800990c:	f47f aeef 	bne.w	80096ee <_dtoa_r+0x3ee>
 8009910:	e710      	b.n	8009734 <_dtoa_r+0x434>
 8009912:	bf00      	nop
 8009914:	0800cb20 	.word	0x0800cb20
 8009918:	0800caf8 	.word	0x0800caf8
 800991c:	9908      	ldr	r1, [sp, #32]
 800991e:	2900      	cmp	r1, #0
 8009920:	f000 80e3 	beq.w	8009aea <_dtoa_r+0x7ea>
 8009924:	9907      	ldr	r1, [sp, #28]
 8009926:	2901      	cmp	r1, #1
 8009928:	f300 80c8 	bgt.w	8009abc <_dtoa_r+0x7bc>
 800992c:	2d00      	cmp	r5, #0
 800992e:	f000 80c1 	beq.w	8009ab4 <_dtoa_r+0x7b4>
 8009932:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009936:	9e05      	ldr	r6, [sp, #20]
 8009938:	461c      	mov	r4, r3
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	9b05      	ldr	r3, [sp, #20]
 800993e:	4413      	add	r3, r2
 8009940:	9305      	str	r3, [sp, #20]
 8009942:	9b06      	ldr	r3, [sp, #24]
 8009944:	2101      	movs	r1, #1
 8009946:	4413      	add	r3, r2
 8009948:	4648      	mov	r0, r9
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	f000 fc6c 	bl	800a228 <__i2b>
 8009950:	9b04      	ldr	r3, [sp, #16]
 8009952:	4605      	mov	r5, r0
 8009954:	b166      	cbz	r6, 8009970 <_dtoa_r+0x670>
 8009956:	9a06      	ldr	r2, [sp, #24]
 8009958:	2a00      	cmp	r2, #0
 800995a:	dd09      	ble.n	8009970 <_dtoa_r+0x670>
 800995c:	42b2      	cmp	r2, r6
 800995e:	9905      	ldr	r1, [sp, #20]
 8009960:	bfa8      	it	ge
 8009962:	4632      	movge	r2, r6
 8009964:	1a89      	subs	r1, r1, r2
 8009966:	9105      	str	r1, [sp, #20]
 8009968:	9906      	ldr	r1, [sp, #24]
 800996a:	1ab6      	subs	r6, r6, r2
 800996c:	1a8a      	subs	r2, r1, r2
 800996e:	9206      	str	r2, [sp, #24]
 8009970:	b1fb      	cbz	r3, 80099b2 <_dtoa_r+0x6b2>
 8009972:	9a08      	ldr	r2, [sp, #32]
 8009974:	2a00      	cmp	r2, #0
 8009976:	f000 80bc 	beq.w	8009af2 <_dtoa_r+0x7f2>
 800997a:	b19c      	cbz	r4, 80099a4 <_dtoa_r+0x6a4>
 800997c:	4629      	mov	r1, r5
 800997e:	4622      	mov	r2, r4
 8009980:	4648      	mov	r0, r9
 8009982:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009984:	f000 fd10 	bl	800a3a8 <__pow5mult>
 8009988:	9a01      	ldr	r2, [sp, #4]
 800998a:	4601      	mov	r1, r0
 800998c:	4605      	mov	r5, r0
 800998e:	4648      	mov	r0, r9
 8009990:	f000 fc60 	bl	800a254 <__multiply>
 8009994:	9901      	ldr	r1, [sp, #4]
 8009996:	9004      	str	r0, [sp, #16]
 8009998:	4648      	mov	r0, r9
 800999a:	f000 fb47 	bl	800a02c <_Bfree>
 800999e:	9a04      	ldr	r2, [sp, #16]
 80099a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a2:	9201      	str	r2, [sp, #4]
 80099a4:	1b1a      	subs	r2, r3, r4
 80099a6:	d004      	beq.n	80099b2 <_dtoa_r+0x6b2>
 80099a8:	9901      	ldr	r1, [sp, #4]
 80099aa:	4648      	mov	r0, r9
 80099ac:	f000 fcfc 	bl	800a3a8 <__pow5mult>
 80099b0:	9001      	str	r0, [sp, #4]
 80099b2:	2101      	movs	r1, #1
 80099b4:	4648      	mov	r0, r9
 80099b6:	f000 fc37 	bl	800a228 <__i2b>
 80099ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099bc:	4604      	mov	r4, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 81d0 	beq.w	8009d64 <_dtoa_r+0xa64>
 80099c4:	461a      	mov	r2, r3
 80099c6:	4601      	mov	r1, r0
 80099c8:	4648      	mov	r0, r9
 80099ca:	f000 fced 	bl	800a3a8 <__pow5mult>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	4604      	mov	r4, r0
 80099d4:	f300 8095 	bgt.w	8009b02 <_dtoa_r+0x802>
 80099d8:	9b02      	ldr	r3, [sp, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 808b 	bne.w	8009af6 <_dtoa_r+0x7f6>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	f040 8087 	bne.w	8009afa <_dtoa_r+0x7fa>
 80099ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80099f0:	0d12      	lsrs	r2, r2, #20
 80099f2:	0512      	lsls	r2, r2, #20
 80099f4:	2a00      	cmp	r2, #0
 80099f6:	f000 8082 	beq.w	8009afe <_dtoa_r+0x7fe>
 80099fa:	9b05      	ldr	r3, [sp, #20]
 80099fc:	3301      	adds	r3, #1
 80099fe:	9305      	str	r3, [sp, #20]
 8009a00:	9b06      	ldr	r3, [sp, #24]
 8009a02:	3301      	adds	r3, #1
 8009a04:	9306      	str	r3, [sp, #24]
 8009a06:	2301      	movs	r3, #1
 8009a08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f000 81af 	beq.w	8009d70 <_dtoa_r+0xa70>
 8009a12:	6922      	ldr	r2, [r4, #16]
 8009a14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009a18:	6910      	ldr	r0, [r2, #16]
 8009a1a:	f000 fbb9 	bl	800a190 <__hi0bits>
 8009a1e:	f1c0 0020 	rsb	r0, r0, #32
 8009a22:	9b06      	ldr	r3, [sp, #24]
 8009a24:	4418      	add	r0, r3
 8009a26:	f010 001f 	ands.w	r0, r0, #31
 8009a2a:	d076      	beq.n	8009b1a <_dtoa_r+0x81a>
 8009a2c:	f1c0 0220 	rsb	r2, r0, #32
 8009a30:	2a04      	cmp	r2, #4
 8009a32:	dd69      	ble.n	8009b08 <_dtoa_r+0x808>
 8009a34:	9b05      	ldr	r3, [sp, #20]
 8009a36:	f1c0 001c 	rsb	r0, r0, #28
 8009a3a:	4403      	add	r3, r0
 8009a3c:	9305      	str	r3, [sp, #20]
 8009a3e:	9b06      	ldr	r3, [sp, #24]
 8009a40:	4406      	add	r6, r0
 8009a42:	4403      	add	r3, r0
 8009a44:	9306      	str	r3, [sp, #24]
 8009a46:	9b05      	ldr	r3, [sp, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dd05      	ble.n	8009a58 <_dtoa_r+0x758>
 8009a4c:	9901      	ldr	r1, [sp, #4]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	4648      	mov	r0, r9
 8009a52:	f000 fd03 	bl	800a45c <__lshift>
 8009a56:	9001      	str	r0, [sp, #4]
 8009a58:	9b06      	ldr	r3, [sp, #24]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dd05      	ble.n	8009a6a <_dtoa_r+0x76a>
 8009a5e:	4621      	mov	r1, r4
 8009a60:	461a      	mov	r2, r3
 8009a62:	4648      	mov	r0, r9
 8009a64:	f000 fcfa 	bl	800a45c <__lshift>
 8009a68:	4604      	mov	r4, r0
 8009a6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d056      	beq.n	8009b1e <_dtoa_r+0x81e>
 8009a70:	9801      	ldr	r0, [sp, #4]
 8009a72:	4621      	mov	r1, r4
 8009a74:	f000 fd5e 	bl	800a534 <__mcmp>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	da50      	bge.n	8009b1e <_dtoa_r+0x81e>
 8009a7c:	f108 33ff 	add.w	r3, r8, #4294967295
 8009a80:	9304      	str	r3, [sp, #16]
 8009a82:	9901      	ldr	r1, [sp, #4]
 8009a84:	2300      	movs	r3, #0
 8009a86:	220a      	movs	r2, #10
 8009a88:	4648      	mov	r0, r9
 8009a8a:	f000 faf1 	bl	800a070 <__multadd>
 8009a8e:	9b08      	ldr	r3, [sp, #32]
 8009a90:	9001      	str	r0, [sp, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f000 816e 	beq.w	8009d74 <_dtoa_r+0xa74>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	4648      	mov	r0, r9
 8009aa0:	f000 fae6 	bl	800a070 <__multadd>
 8009aa4:	f1bb 0f00 	cmp.w	fp, #0
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	dc64      	bgt.n	8009b76 <_dtoa_r+0x876>
 8009aac:	9b07      	ldr	r3, [sp, #28]
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	dc3e      	bgt.n	8009b30 <_dtoa_r+0x830>
 8009ab2:	e060      	b.n	8009b76 <_dtoa_r+0x876>
 8009ab4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ab6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009aba:	e73c      	b.n	8009936 <_dtoa_r+0x636>
 8009abc:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	bfbf      	itttt	lt
 8009ac4:	1ae2      	sublt	r2, r4, r3
 8009ac6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ac8:	189b      	addlt	r3, r3, r2
 8009aca:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009acc:	bfae      	itee	ge
 8009ace:	1b1c      	subge	r4, r3, r4
 8009ad0:	4623      	movlt	r3, r4
 8009ad2:	2400      	movlt	r4, #0
 8009ad4:	f1ba 0f00 	cmp.w	sl, #0
 8009ad8:	bfb5      	itete	lt
 8009ada:	9a05      	ldrlt	r2, [sp, #20]
 8009adc:	9e05      	ldrge	r6, [sp, #20]
 8009ade:	eba2 060a 	sublt.w	r6, r2, sl
 8009ae2:	4652      	movge	r2, sl
 8009ae4:	bfb8      	it	lt
 8009ae6:	2200      	movlt	r2, #0
 8009ae8:	e727      	b.n	800993a <_dtoa_r+0x63a>
 8009aea:	9e05      	ldr	r6, [sp, #20]
 8009aec:	9d08      	ldr	r5, [sp, #32]
 8009aee:	461c      	mov	r4, r3
 8009af0:	e730      	b.n	8009954 <_dtoa_r+0x654>
 8009af2:	461a      	mov	r2, r3
 8009af4:	e758      	b.n	80099a8 <_dtoa_r+0x6a8>
 8009af6:	2300      	movs	r3, #0
 8009af8:	e786      	b.n	8009a08 <_dtoa_r+0x708>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	e784      	b.n	8009a08 <_dtoa_r+0x708>
 8009afe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b00:	e783      	b.n	8009a0a <_dtoa_r+0x70a>
 8009b02:	2300      	movs	r3, #0
 8009b04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b06:	e784      	b.n	8009a12 <_dtoa_r+0x712>
 8009b08:	d09d      	beq.n	8009a46 <_dtoa_r+0x746>
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	321c      	adds	r2, #28
 8009b0e:	4413      	add	r3, r2
 8009b10:	9305      	str	r3, [sp, #20]
 8009b12:	9b06      	ldr	r3, [sp, #24]
 8009b14:	4416      	add	r6, r2
 8009b16:	4413      	add	r3, r2
 8009b18:	e794      	b.n	8009a44 <_dtoa_r+0x744>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	e7f5      	b.n	8009b0a <_dtoa_r+0x80a>
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b26:	46d3      	mov	fp, sl
 8009b28:	dc21      	bgt.n	8009b6e <_dtoa_r+0x86e>
 8009b2a:	9b07      	ldr	r3, [sp, #28]
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	dd1e      	ble.n	8009b6e <_dtoa_r+0x86e>
 8009b30:	f1bb 0f00 	cmp.w	fp, #0
 8009b34:	f47f aeb7 	bne.w	80098a6 <_dtoa_r+0x5a6>
 8009b38:	4621      	mov	r1, r4
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	4648      	mov	r0, r9
 8009b40:	f000 fa96 	bl	800a070 <__multadd>
 8009b44:	4601      	mov	r1, r0
 8009b46:	4604      	mov	r4, r0
 8009b48:	9801      	ldr	r0, [sp, #4]
 8009b4a:	f000 fcf3 	bl	800a534 <__mcmp>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	f77f aea9 	ble.w	80098a6 <_dtoa_r+0x5a6>
 8009b54:	463e      	mov	r6, r7
 8009b56:	2331      	movs	r3, #49	@ 0x31
 8009b58:	f806 3b01 	strb.w	r3, [r6], #1
 8009b5c:	9b04      	ldr	r3, [sp, #16]
 8009b5e:	3301      	adds	r3, #1
 8009b60:	9304      	str	r3, [sp, #16]
 8009b62:	e6a4      	b.n	80098ae <_dtoa_r+0x5ae>
 8009b64:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b68:	4654      	mov	r4, sl
 8009b6a:	4625      	mov	r5, r4
 8009b6c:	e7f2      	b.n	8009b54 <_dtoa_r+0x854>
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 8103 	beq.w	8009d7c <_dtoa_r+0xa7c>
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	dd05      	ble.n	8009b86 <_dtoa_r+0x886>
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	4632      	mov	r2, r6
 8009b7e:	4648      	mov	r0, r9
 8009b80:	f000 fc6c 	bl	800a45c <__lshift>
 8009b84:	4605      	mov	r5, r0
 8009b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d058      	beq.n	8009c3e <_dtoa_r+0x93e>
 8009b8c:	6869      	ldr	r1, [r5, #4]
 8009b8e:	4648      	mov	r0, r9
 8009b90:	f000 fa0c 	bl	8009fac <_Balloc>
 8009b94:	4606      	mov	r6, r0
 8009b96:	b928      	cbnz	r0, 8009ba4 <_dtoa_r+0x8a4>
 8009b98:	4b82      	ldr	r3, [pc, #520]	@ (8009da4 <_dtoa_r+0xaa4>)
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ba0:	f7ff bbc7 	b.w	8009332 <_dtoa_r+0x32>
 8009ba4:	692a      	ldr	r2, [r5, #16]
 8009ba6:	3202      	adds	r2, #2
 8009ba8:	0092      	lsls	r2, r2, #2
 8009baa:	f105 010c 	add.w	r1, r5, #12
 8009bae:	300c      	adds	r0, #12
 8009bb0:	f001 ff1e 	bl	800b9f0 <memcpy>
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4648      	mov	r0, r9
 8009bba:	f000 fc4f 	bl	800a45c <__lshift>
 8009bbe:	1c7b      	adds	r3, r7, #1
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	eb07 030b 	add.w	r3, r7, fp
 8009bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc8:	9b02      	ldr	r3, [sp, #8]
 8009bca:	f003 0301 	and.w	r3, r3, #1
 8009bce:	46a8      	mov	r8, r5
 8009bd0:	9308      	str	r3, [sp, #32]
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	9b05      	ldr	r3, [sp, #20]
 8009bd6:	9801      	ldr	r0, [sp, #4]
 8009bd8:	4621      	mov	r1, r4
 8009bda:	f103 3bff 	add.w	fp, r3, #4294967295
 8009bde:	f7ff fb07 	bl	80091f0 <quorem>
 8009be2:	4641      	mov	r1, r8
 8009be4:	9002      	str	r0, [sp, #8]
 8009be6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009bea:	9801      	ldr	r0, [sp, #4]
 8009bec:	f000 fca2 	bl	800a534 <__mcmp>
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	9006      	str	r0, [sp, #24]
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4648      	mov	r0, r9
 8009bf8:	f000 fcb8 	bl	800a56c <__mdiff>
 8009bfc:	68c2      	ldr	r2, [r0, #12]
 8009bfe:	4606      	mov	r6, r0
 8009c00:	b9fa      	cbnz	r2, 8009c42 <_dtoa_r+0x942>
 8009c02:	4601      	mov	r1, r0
 8009c04:	9801      	ldr	r0, [sp, #4]
 8009c06:	f000 fc95 	bl	800a534 <__mcmp>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4648      	mov	r0, r9
 8009c10:	920a      	str	r2, [sp, #40]	@ 0x28
 8009c12:	f000 fa0b 	bl	800a02c <_Bfree>
 8009c16:	9b07      	ldr	r3, [sp, #28]
 8009c18:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c1a:	9e05      	ldr	r6, [sp, #20]
 8009c1c:	ea43 0102 	orr.w	r1, r3, r2
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	4319      	orrs	r1, r3
 8009c24:	d10f      	bne.n	8009c46 <_dtoa_r+0x946>
 8009c26:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009c2a:	d028      	beq.n	8009c7e <_dtoa_r+0x97e>
 8009c2c:	9b06      	ldr	r3, [sp, #24]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd02      	ble.n	8009c38 <_dtoa_r+0x938>
 8009c32:	9b02      	ldr	r3, [sp, #8]
 8009c34:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009c38:	f88b a000 	strb.w	sl, [fp]
 8009c3c:	e639      	b.n	80098b2 <_dtoa_r+0x5b2>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	e7bd      	b.n	8009bbe <_dtoa_r+0x8be>
 8009c42:	2201      	movs	r2, #1
 8009c44:	e7e2      	b.n	8009c0c <_dtoa_r+0x90c>
 8009c46:	9b06      	ldr	r3, [sp, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db04      	blt.n	8009c56 <_dtoa_r+0x956>
 8009c4c:	9907      	ldr	r1, [sp, #28]
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	9908      	ldr	r1, [sp, #32]
 8009c52:	430b      	orrs	r3, r1
 8009c54:	d120      	bne.n	8009c98 <_dtoa_r+0x998>
 8009c56:	2a00      	cmp	r2, #0
 8009c58:	ddee      	ble.n	8009c38 <_dtoa_r+0x938>
 8009c5a:	9901      	ldr	r1, [sp, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	4648      	mov	r0, r9
 8009c60:	f000 fbfc 	bl	800a45c <__lshift>
 8009c64:	4621      	mov	r1, r4
 8009c66:	9001      	str	r0, [sp, #4]
 8009c68:	f000 fc64 	bl	800a534 <__mcmp>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	dc03      	bgt.n	8009c78 <_dtoa_r+0x978>
 8009c70:	d1e2      	bne.n	8009c38 <_dtoa_r+0x938>
 8009c72:	f01a 0f01 	tst.w	sl, #1
 8009c76:	d0df      	beq.n	8009c38 <_dtoa_r+0x938>
 8009c78:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009c7c:	d1d9      	bne.n	8009c32 <_dtoa_r+0x932>
 8009c7e:	2339      	movs	r3, #57	@ 0x39
 8009c80:	f88b 3000 	strb.w	r3, [fp]
 8009c84:	4633      	mov	r3, r6
 8009c86:	461e      	mov	r6, r3
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c8e:	2a39      	cmp	r2, #57	@ 0x39
 8009c90:	d053      	beq.n	8009d3a <_dtoa_r+0xa3a>
 8009c92:	3201      	adds	r2, #1
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	e60c      	b.n	80098b2 <_dtoa_r+0x5b2>
 8009c98:	2a00      	cmp	r2, #0
 8009c9a:	dd07      	ble.n	8009cac <_dtoa_r+0x9ac>
 8009c9c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009ca0:	d0ed      	beq.n	8009c7e <_dtoa_r+0x97e>
 8009ca2:	f10a 0301 	add.w	r3, sl, #1
 8009ca6:	f88b 3000 	strb.w	r3, [fp]
 8009caa:	e602      	b.n	80098b2 <_dtoa_r+0x5b2>
 8009cac:	9b05      	ldr	r3, [sp, #20]
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009cb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d029      	beq.n	8009d0e <_dtoa_r+0xa0e>
 8009cba:	9901      	ldr	r1, [sp, #4]
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	220a      	movs	r2, #10
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	f000 f9d5 	bl	800a070 <__multadd>
 8009cc6:	45a8      	cmp	r8, r5
 8009cc8:	9001      	str	r0, [sp, #4]
 8009cca:	f04f 0300 	mov.w	r3, #0
 8009cce:	f04f 020a 	mov.w	r2, #10
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	d107      	bne.n	8009ce8 <_dtoa_r+0x9e8>
 8009cd8:	f000 f9ca 	bl	800a070 <__multadd>
 8009cdc:	4680      	mov	r8, r0
 8009cde:	4605      	mov	r5, r0
 8009ce0:	9b05      	ldr	r3, [sp, #20]
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	9305      	str	r3, [sp, #20]
 8009ce6:	e775      	b.n	8009bd4 <_dtoa_r+0x8d4>
 8009ce8:	f000 f9c2 	bl	800a070 <__multadd>
 8009cec:	4629      	mov	r1, r5
 8009cee:	4680      	mov	r8, r0
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	4648      	mov	r0, r9
 8009cf6:	f000 f9bb 	bl	800a070 <__multadd>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	e7f0      	b.n	8009ce0 <_dtoa_r+0x9e0>
 8009cfe:	f1bb 0f00 	cmp.w	fp, #0
 8009d02:	bfcc      	ite	gt
 8009d04:	465e      	movgt	r6, fp
 8009d06:	2601      	movle	r6, #1
 8009d08:	443e      	add	r6, r7
 8009d0a:	f04f 0800 	mov.w	r8, #0
 8009d0e:	9901      	ldr	r1, [sp, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	4648      	mov	r0, r9
 8009d14:	f000 fba2 	bl	800a45c <__lshift>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	9001      	str	r0, [sp, #4]
 8009d1c:	f000 fc0a 	bl	800a534 <__mcmp>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	dcaf      	bgt.n	8009c84 <_dtoa_r+0x984>
 8009d24:	d102      	bne.n	8009d2c <_dtoa_r+0xa2c>
 8009d26:	f01a 0f01 	tst.w	sl, #1
 8009d2a:	d1ab      	bne.n	8009c84 <_dtoa_r+0x984>
 8009d2c:	4633      	mov	r3, r6
 8009d2e:	461e      	mov	r6, r3
 8009d30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d34:	2a30      	cmp	r2, #48	@ 0x30
 8009d36:	d0fa      	beq.n	8009d2e <_dtoa_r+0xa2e>
 8009d38:	e5bb      	b.n	80098b2 <_dtoa_r+0x5b2>
 8009d3a:	429f      	cmp	r7, r3
 8009d3c:	d1a3      	bne.n	8009c86 <_dtoa_r+0x986>
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	3301      	adds	r3, #1
 8009d42:	9304      	str	r3, [sp, #16]
 8009d44:	2331      	movs	r3, #49	@ 0x31
 8009d46:	703b      	strb	r3, [r7, #0]
 8009d48:	e5b3      	b.n	80098b2 <_dtoa_r+0x5b2>
 8009d4a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d4c:	4f16      	ldr	r7, [pc, #88]	@ (8009da8 <_dtoa_r+0xaa8>)
 8009d4e:	b11b      	cbz	r3, 8009d58 <_dtoa_r+0xa58>
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	4638      	mov	r0, r7
 8009d5a:	b011      	add	sp, #68	@ 0x44
 8009d5c:	ecbd 8b02 	vpop	{d8}
 8009d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	f77f ae36 	ble.w	80099d8 <_dtoa_r+0x6d8>
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d70:	2001      	movs	r0, #1
 8009d72:	e656      	b.n	8009a22 <_dtoa_r+0x722>
 8009d74:	f1bb 0f00 	cmp.w	fp, #0
 8009d78:	f77f aed7 	ble.w	8009b2a <_dtoa_r+0x82a>
 8009d7c:	463e      	mov	r6, r7
 8009d7e:	9801      	ldr	r0, [sp, #4]
 8009d80:	4621      	mov	r1, r4
 8009d82:	f7ff fa35 	bl	80091f0 <quorem>
 8009d86:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009d8a:	f806 ab01 	strb.w	sl, [r6], #1
 8009d8e:	1bf2      	subs	r2, r6, r7
 8009d90:	4593      	cmp	fp, r2
 8009d92:	ddb4      	ble.n	8009cfe <_dtoa_r+0x9fe>
 8009d94:	9901      	ldr	r1, [sp, #4]
 8009d96:	2300      	movs	r3, #0
 8009d98:	220a      	movs	r2, #10
 8009d9a:	4648      	mov	r0, r9
 8009d9c:	f000 f968 	bl	800a070 <__multadd>
 8009da0:	9001      	str	r0, [sp, #4]
 8009da2:	e7ec      	b.n	8009d7e <_dtoa_r+0xa7e>
 8009da4:	0800ca7d 	.word	0x0800ca7d
 8009da8:	0800ca01 	.word	0x0800ca01

08009dac <_free_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4605      	mov	r5, r0
 8009db0:	2900      	cmp	r1, #0
 8009db2:	d041      	beq.n	8009e38 <_free_r+0x8c>
 8009db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db8:	1f0c      	subs	r4, r1, #4
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bfb8      	it	lt
 8009dbe:	18e4      	addlt	r4, r4, r3
 8009dc0:	f000 f8e8 	bl	8009f94 <__malloc_lock>
 8009dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e3c <_free_r+0x90>)
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	b933      	cbnz	r3, 8009dd8 <_free_r+0x2c>
 8009dca:	6063      	str	r3, [r4, #4]
 8009dcc:	6014      	str	r4, [r2, #0]
 8009dce:	4628      	mov	r0, r5
 8009dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd4:	f000 b8e4 	b.w	8009fa0 <__malloc_unlock>
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	d908      	bls.n	8009dee <_free_r+0x42>
 8009ddc:	6820      	ldr	r0, [r4, #0]
 8009dde:	1821      	adds	r1, r4, r0
 8009de0:	428b      	cmp	r3, r1
 8009de2:	bf01      	itttt	eq
 8009de4:	6819      	ldreq	r1, [r3, #0]
 8009de6:	685b      	ldreq	r3, [r3, #4]
 8009de8:	1809      	addeq	r1, r1, r0
 8009dea:	6021      	streq	r1, [r4, #0]
 8009dec:	e7ed      	b.n	8009dca <_free_r+0x1e>
 8009dee:	461a      	mov	r2, r3
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	b10b      	cbz	r3, 8009df8 <_free_r+0x4c>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d9fa      	bls.n	8009dee <_free_r+0x42>
 8009df8:	6811      	ldr	r1, [r2, #0]
 8009dfa:	1850      	adds	r0, r2, r1
 8009dfc:	42a0      	cmp	r0, r4
 8009dfe:	d10b      	bne.n	8009e18 <_free_r+0x6c>
 8009e00:	6820      	ldr	r0, [r4, #0]
 8009e02:	4401      	add	r1, r0
 8009e04:	1850      	adds	r0, r2, r1
 8009e06:	4283      	cmp	r3, r0
 8009e08:	6011      	str	r1, [r2, #0]
 8009e0a:	d1e0      	bne.n	8009dce <_free_r+0x22>
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6053      	str	r3, [r2, #4]
 8009e12:	4408      	add	r0, r1
 8009e14:	6010      	str	r0, [r2, #0]
 8009e16:	e7da      	b.n	8009dce <_free_r+0x22>
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x74>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	602b      	str	r3, [r5, #0]
 8009e1e:	e7d6      	b.n	8009dce <_free_r+0x22>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	1821      	adds	r1, r4, r0
 8009e24:	428b      	cmp	r3, r1
 8009e26:	bf04      	itt	eq
 8009e28:	6819      	ldreq	r1, [r3, #0]
 8009e2a:	685b      	ldreq	r3, [r3, #4]
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	bf04      	itt	eq
 8009e30:	1809      	addeq	r1, r1, r0
 8009e32:	6021      	streq	r1, [r4, #0]
 8009e34:	6054      	str	r4, [r2, #4]
 8009e36:	e7ca      	b.n	8009dce <_free_r+0x22>
 8009e38:	bd38      	pop	{r3, r4, r5, pc}
 8009e3a:	bf00      	nop
 8009e3c:	24000670 	.word	0x24000670

08009e40 <malloc>:
 8009e40:	4b02      	ldr	r3, [pc, #8]	@ (8009e4c <malloc+0xc>)
 8009e42:	4601      	mov	r1, r0
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	f000 b825 	b.w	8009e94 <_malloc_r>
 8009e4a:	bf00      	nop
 8009e4c:	240000bc 	.word	0x240000bc

08009e50 <sbrk_aligned>:
 8009e50:	b570      	push	{r4, r5, r6, lr}
 8009e52:	4e0f      	ldr	r6, [pc, #60]	@ (8009e90 <sbrk_aligned+0x40>)
 8009e54:	460c      	mov	r4, r1
 8009e56:	6831      	ldr	r1, [r6, #0]
 8009e58:	4605      	mov	r5, r0
 8009e5a:	b911      	cbnz	r1, 8009e62 <sbrk_aligned+0x12>
 8009e5c:	f001 fdb8 	bl	800b9d0 <_sbrk_r>
 8009e60:	6030      	str	r0, [r6, #0]
 8009e62:	4621      	mov	r1, r4
 8009e64:	4628      	mov	r0, r5
 8009e66:	f001 fdb3 	bl	800b9d0 <_sbrk_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d103      	bne.n	8009e76 <sbrk_aligned+0x26>
 8009e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8009e72:	4620      	mov	r0, r4
 8009e74:	bd70      	pop	{r4, r5, r6, pc}
 8009e76:	1cc4      	adds	r4, r0, #3
 8009e78:	f024 0403 	bic.w	r4, r4, #3
 8009e7c:	42a0      	cmp	r0, r4
 8009e7e:	d0f8      	beq.n	8009e72 <sbrk_aligned+0x22>
 8009e80:	1a21      	subs	r1, r4, r0
 8009e82:	4628      	mov	r0, r5
 8009e84:	f001 fda4 	bl	800b9d0 <_sbrk_r>
 8009e88:	3001      	adds	r0, #1
 8009e8a:	d1f2      	bne.n	8009e72 <sbrk_aligned+0x22>
 8009e8c:	e7ef      	b.n	8009e6e <sbrk_aligned+0x1e>
 8009e8e:	bf00      	nop
 8009e90:	2400066c 	.word	0x2400066c

08009e94 <_malloc_r>:
 8009e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e98:	1ccd      	adds	r5, r1, #3
 8009e9a:	f025 0503 	bic.w	r5, r5, #3
 8009e9e:	3508      	adds	r5, #8
 8009ea0:	2d0c      	cmp	r5, #12
 8009ea2:	bf38      	it	cc
 8009ea4:	250c      	movcc	r5, #12
 8009ea6:	2d00      	cmp	r5, #0
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	db01      	blt.n	8009eb0 <_malloc_r+0x1c>
 8009eac:	42a9      	cmp	r1, r5
 8009eae:	d904      	bls.n	8009eba <_malloc_r+0x26>
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	6033      	str	r3, [r6, #0]
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f90 <_malloc_r+0xfc>
 8009ebe:	f000 f869 	bl	8009f94 <__malloc_lock>
 8009ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec6:	461c      	mov	r4, r3
 8009ec8:	bb44      	cbnz	r4, 8009f1c <_malloc_r+0x88>
 8009eca:	4629      	mov	r1, r5
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7ff ffbf 	bl	8009e50 <sbrk_aligned>
 8009ed2:	1c43      	adds	r3, r0, #1
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	d158      	bne.n	8009f8a <_malloc_r+0xf6>
 8009ed8:	f8d8 4000 	ldr.w	r4, [r8]
 8009edc:	4627      	mov	r7, r4
 8009ede:	2f00      	cmp	r7, #0
 8009ee0:	d143      	bne.n	8009f6a <_malloc_r+0xd6>
 8009ee2:	2c00      	cmp	r4, #0
 8009ee4:	d04b      	beq.n	8009f7e <_malloc_r+0xea>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	4639      	mov	r1, r7
 8009eea:	4630      	mov	r0, r6
 8009eec:	eb04 0903 	add.w	r9, r4, r3
 8009ef0:	f001 fd6e 	bl	800b9d0 <_sbrk_r>
 8009ef4:	4581      	cmp	r9, r0
 8009ef6:	d142      	bne.n	8009f7e <_malloc_r+0xea>
 8009ef8:	6821      	ldr	r1, [r4, #0]
 8009efa:	1a6d      	subs	r5, r5, r1
 8009efc:	4629      	mov	r1, r5
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7ff ffa6 	bl	8009e50 <sbrk_aligned>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d03a      	beq.n	8009f7e <_malloc_r+0xea>
 8009f08:	6823      	ldr	r3, [r4, #0]
 8009f0a:	442b      	add	r3, r5
 8009f0c:	6023      	str	r3, [r4, #0]
 8009f0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f12:	685a      	ldr	r2, [r3, #4]
 8009f14:	bb62      	cbnz	r2, 8009f70 <_malloc_r+0xdc>
 8009f16:	f8c8 7000 	str.w	r7, [r8]
 8009f1a:	e00f      	b.n	8009f3c <_malloc_r+0xa8>
 8009f1c:	6822      	ldr	r2, [r4, #0]
 8009f1e:	1b52      	subs	r2, r2, r5
 8009f20:	d420      	bmi.n	8009f64 <_malloc_r+0xd0>
 8009f22:	2a0b      	cmp	r2, #11
 8009f24:	d917      	bls.n	8009f56 <_malloc_r+0xc2>
 8009f26:	1961      	adds	r1, r4, r5
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	6025      	str	r5, [r4, #0]
 8009f2c:	bf18      	it	ne
 8009f2e:	6059      	strne	r1, [r3, #4]
 8009f30:	6863      	ldr	r3, [r4, #4]
 8009f32:	bf08      	it	eq
 8009f34:	f8c8 1000 	streq.w	r1, [r8]
 8009f38:	5162      	str	r2, [r4, r5]
 8009f3a:	604b      	str	r3, [r1, #4]
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f000 f82f 	bl	8009fa0 <__malloc_unlock>
 8009f42:	f104 000b 	add.w	r0, r4, #11
 8009f46:	1d23      	adds	r3, r4, #4
 8009f48:	f020 0007 	bic.w	r0, r0, #7
 8009f4c:	1ac2      	subs	r2, r0, r3
 8009f4e:	bf1c      	itt	ne
 8009f50:	1a1b      	subne	r3, r3, r0
 8009f52:	50a3      	strne	r3, [r4, r2]
 8009f54:	e7af      	b.n	8009eb6 <_malloc_r+0x22>
 8009f56:	6862      	ldr	r2, [r4, #4]
 8009f58:	42a3      	cmp	r3, r4
 8009f5a:	bf0c      	ite	eq
 8009f5c:	f8c8 2000 	streq.w	r2, [r8]
 8009f60:	605a      	strne	r2, [r3, #4]
 8009f62:	e7eb      	b.n	8009f3c <_malloc_r+0xa8>
 8009f64:	4623      	mov	r3, r4
 8009f66:	6864      	ldr	r4, [r4, #4]
 8009f68:	e7ae      	b.n	8009ec8 <_malloc_r+0x34>
 8009f6a:	463c      	mov	r4, r7
 8009f6c:	687f      	ldr	r7, [r7, #4]
 8009f6e:	e7b6      	b.n	8009ede <_malloc_r+0x4a>
 8009f70:	461a      	mov	r2, r3
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d1fb      	bne.n	8009f70 <_malloc_r+0xdc>
 8009f78:	2300      	movs	r3, #0
 8009f7a:	6053      	str	r3, [r2, #4]
 8009f7c:	e7de      	b.n	8009f3c <_malloc_r+0xa8>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 f80c 	bl	8009fa0 <__malloc_unlock>
 8009f88:	e794      	b.n	8009eb4 <_malloc_r+0x20>
 8009f8a:	6005      	str	r5, [r0, #0]
 8009f8c:	e7d6      	b.n	8009f3c <_malloc_r+0xa8>
 8009f8e:	bf00      	nop
 8009f90:	24000670 	.word	0x24000670

08009f94 <__malloc_lock>:
 8009f94:	4801      	ldr	r0, [pc, #4]	@ (8009f9c <__malloc_lock+0x8>)
 8009f96:	f7ff b922 	b.w	80091de <__retarget_lock_acquire_recursive>
 8009f9a:	bf00      	nop
 8009f9c:	24000668 	.word	0x24000668

08009fa0 <__malloc_unlock>:
 8009fa0:	4801      	ldr	r0, [pc, #4]	@ (8009fa8 <__malloc_unlock+0x8>)
 8009fa2:	f7ff b91d 	b.w	80091e0 <__retarget_lock_release_recursive>
 8009fa6:	bf00      	nop
 8009fa8:	24000668 	.word	0x24000668

08009fac <_Balloc>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	69c6      	ldr	r6, [r0, #28]
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	b976      	cbnz	r6, 8009fd4 <_Balloc+0x28>
 8009fb6:	2010      	movs	r0, #16
 8009fb8:	f7ff ff42 	bl	8009e40 <malloc>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	61e0      	str	r0, [r4, #28]
 8009fc0:	b920      	cbnz	r0, 8009fcc <_Balloc+0x20>
 8009fc2:	4b18      	ldr	r3, [pc, #96]	@ (800a024 <_Balloc+0x78>)
 8009fc4:	4818      	ldr	r0, [pc, #96]	@ (800a028 <_Balloc+0x7c>)
 8009fc6:	216b      	movs	r1, #107	@ 0x6b
 8009fc8:	f001 fd2a 	bl	800ba20 <__assert_func>
 8009fcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fd0:	6006      	str	r6, [r0, #0]
 8009fd2:	60c6      	str	r6, [r0, #12]
 8009fd4:	69e6      	ldr	r6, [r4, #28]
 8009fd6:	68f3      	ldr	r3, [r6, #12]
 8009fd8:	b183      	cbz	r3, 8009ffc <_Balloc+0x50>
 8009fda:	69e3      	ldr	r3, [r4, #28]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fe2:	b9b8      	cbnz	r0, 800a014 <_Balloc+0x68>
 8009fe4:	2101      	movs	r1, #1
 8009fe6:	fa01 f605 	lsl.w	r6, r1, r5
 8009fea:	1d72      	adds	r2, r6, #5
 8009fec:	0092      	lsls	r2, r2, #2
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f001 fd34 	bl	800ba5c <_calloc_r>
 8009ff4:	b160      	cbz	r0, 800a010 <_Balloc+0x64>
 8009ff6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ffa:	e00e      	b.n	800a01a <_Balloc+0x6e>
 8009ffc:	2221      	movs	r2, #33	@ 0x21
 8009ffe:	2104      	movs	r1, #4
 800a000:	4620      	mov	r0, r4
 800a002:	f001 fd2b 	bl	800ba5c <_calloc_r>
 800a006:	69e3      	ldr	r3, [r4, #28]
 800a008:	60f0      	str	r0, [r6, #12]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e4      	bne.n	8009fda <_Balloc+0x2e>
 800a010:	2000      	movs	r0, #0
 800a012:	bd70      	pop	{r4, r5, r6, pc}
 800a014:	6802      	ldr	r2, [r0, #0]
 800a016:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a01a:	2300      	movs	r3, #0
 800a01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a020:	e7f7      	b.n	800a012 <_Balloc+0x66>
 800a022:	bf00      	nop
 800a024:	0800ca0e 	.word	0x0800ca0e
 800a028:	0800ca8e 	.word	0x0800ca8e

0800a02c <_Bfree>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	69c6      	ldr	r6, [r0, #28]
 800a030:	4605      	mov	r5, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b976      	cbnz	r6, 800a054 <_Bfree+0x28>
 800a036:	2010      	movs	r0, #16
 800a038:	f7ff ff02 	bl	8009e40 <malloc>
 800a03c:	4602      	mov	r2, r0
 800a03e:	61e8      	str	r0, [r5, #28]
 800a040:	b920      	cbnz	r0, 800a04c <_Bfree+0x20>
 800a042:	4b09      	ldr	r3, [pc, #36]	@ (800a068 <_Bfree+0x3c>)
 800a044:	4809      	ldr	r0, [pc, #36]	@ (800a06c <_Bfree+0x40>)
 800a046:	218f      	movs	r1, #143	@ 0x8f
 800a048:	f001 fcea 	bl	800ba20 <__assert_func>
 800a04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a050:	6006      	str	r6, [r0, #0]
 800a052:	60c6      	str	r6, [r0, #12]
 800a054:	b13c      	cbz	r4, 800a066 <_Bfree+0x3a>
 800a056:	69eb      	ldr	r3, [r5, #28]
 800a058:	6862      	ldr	r2, [r4, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a060:	6021      	str	r1, [r4, #0]
 800a062:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a066:	bd70      	pop	{r4, r5, r6, pc}
 800a068:	0800ca0e 	.word	0x0800ca0e
 800a06c:	0800ca8e 	.word	0x0800ca8e

0800a070 <__multadd>:
 800a070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a074:	690d      	ldr	r5, [r1, #16]
 800a076:	4607      	mov	r7, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	461e      	mov	r6, r3
 800a07c:	f101 0c14 	add.w	ip, r1, #20
 800a080:	2000      	movs	r0, #0
 800a082:	f8dc 3000 	ldr.w	r3, [ip]
 800a086:	b299      	uxth	r1, r3
 800a088:	fb02 6101 	mla	r1, r2, r1, r6
 800a08c:	0c1e      	lsrs	r6, r3, #16
 800a08e:	0c0b      	lsrs	r3, r1, #16
 800a090:	fb02 3306 	mla	r3, r2, r6, r3
 800a094:	b289      	uxth	r1, r1
 800a096:	3001      	adds	r0, #1
 800a098:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a09c:	4285      	cmp	r5, r0
 800a09e:	f84c 1b04 	str.w	r1, [ip], #4
 800a0a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0a6:	dcec      	bgt.n	800a082 <__multadd+0x12>
 800a0a8:	b30e      	cbz	r6, 800a0ee <__multadd+0x7e>
 800a0aa:	68a3      	ldr	r3, [r4, #8]
 800a0ac:	42ab      	cmp	r3, r5
 800a0ae:	dc19      	bgt.n	800a0e4 <__multadd+0x74>
 800a0b0:	6861      	ldr	r1, [r4, #4]
 800a0b2:	4638      	mov	r0, r7
 800a0b4:	3101      	adds	r1, #1
 800a0b6:	f7ff ff79 	bl	8009fac <_Balloc>
 800a0ba:	4680      	mov	r8, r0
 800a0bc:	b928      	cbnz	r0, 800a0ca <__multadd+0x5a>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f4 <__multadd+0x84>)
 800a0c2:	480d      	ldr	r0, [pc, #52]	@ (800a0f8 <__multadd+0x88>)
 800a0c4:	21ba      	movs	r1, #186	@ 0xba
 800a0c6:	f001 fcab 	bl	800ba20 <__assert_func>
 800a0ca:	6922      	ldr	r2, [r4, #16]
 800a0cc:	3202      	adds	r2, #2
 800a0ce:	f104 010c 	add.w	r1, r4, #12
 800a0d2:	0092      	lsls	r2, r2, #2
 800a0d4:	300c      	adds	r0, #12
 800a0d6:	f001 fc8b 	bl	800b9f0 <memcpy>
 800a0da:	4621      	mov	r1, r4
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7ff ffa5 	bl	800a02c <_Bfree>
 800a0e2:	4644      	mov	r4, r8
 800a0e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	615e      	str	r6, [r3, #20]
 800a0ec:	6125      	str	r5, [r4, #16]
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f4:	0800ca7d 	.word	0x0800ca7d
 800a0f8:	0800ca8e 	.word	0x0800ca8e

0800a0fc <__s2b>:
 800a0fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a100:	460c      	mov	r4, r1
 800a102:	4615      	mov	r5, r2
 800a104:	461f      	mov	r7, r3
 800a106:	2209      	movs	r2, #9
 800a108:	3308      	adds	r3, #8
 800a10a:	4606      	mov	r6, r0
 800a10c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a110:	2100      	movs	r1, #0
 800a112:	2201      	movs	r2, #1
 800a114:	429a      	cmp	r2, r3
 800a116:	db09      	blt.n	800a12c <__s2b+0x30>
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ff47 	bl	8009fac <_Balloc>
 800a11e:	b940      	cbnz	r0, 800a132 <__s2b+0x36>
 800a120:	4602      	mov	r2, r0
 800a122:	4b19      	ldr	r3, [pc, #100]	@ (800a188 <__s2b+0x8c>)
 800a124:	4819      	ldr	r0, [pc, #100]	@ (800a18c <__s2b+0x90>)
 800a126:	21d3      	movs	r1, #211	@ 0xd3
 800a128:	f001 fc7a 	bl	800ba20 <__assert_func>
 800a12c:	0052      	lsls	r2, r2, #1
 800a12e:	3101      	adds	r1, #1
 800a130:	e7f0      	b.n	800a114 <__s2b+0x18>
 800a132:	9b08      	ldr	r3, [sp, #32]
 800a134:	6143      	str	r3, [r0, #20]
 800a136:	2d09      	cmp	r5, #9
 800a138:	f04f 0301 	mov.w	r3, #1
 800a13c:	6103      	str	r3, [r0, #16]
 800a13e:	dd16      	ble.n	800a16e <__s2b+0x72>
 800a140:	f104 0909 	add.w	r9, r4, #9
 800a144:	46c8      	mov	r8, r9
 800a146:	442c      	add	r4, r5
 800a148:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a14c:	4601      	mov	r1, r0
 800a14e:	3b30      	subs	r3, #48	@ 0x30
 800a150:	220a      	movs	r2, #10
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ff8c 	bl	800a070 <__multadd>
 800a158:	45a0      	cmp	r8, r4
 800a15a:	d1f5      	bne.n	800a148 <__s2b+0x4c>
 800a15c:	f1a5 0408 	sub.w	r4, r5, #8
 800a160:	444c      	add	r4, r9
 800a162:	1b2d      	subs	r5, r5, r4
 800a164:	1963      	adds	r3, r4, r5
 800a166:	42bb      	cmp	r3, r7
 800a168:	db04      	blt.n	800a174 <__s2b+0x78>
 800a16a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a16e:	340a      	adds	r4, #10
 800a170:	2509      	movs	r5, #9
 800a172:	e7f6      	b.n	800a162 <__s2b+0x66>
 800a174:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a178:	4601      	mov	r1, r0
 800a17a:	3b30      	subs	r3, #48	@ 0x30
 800a17c:	220a      	movs	r2, #10
 800a17e:	4630      	mov	r0, r6
 800a180:	f7ff ff76 	bl	800a070 <__multadd>
 800a184:	e7ee      	b.n	800a164 <__s2b+0x68>
 800a186:	bf00      	nop
 800a188:	0800ca7d 	.word	0x0800ca7d
 800a18c:	0800ca8e 	.word	0x0800ca8e

0800a190 <__hi0bits>:
 800a190:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a194:	4603      	mov	r3, r0
 800a196:	bf36      	itet	cc
 800a198:	0403      	lslcc	r3, r0, #16
 800a19a:	2000      	movcs	r0, #0
 800a19c:	2010      	movcc	r0, #16
 800a19e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1a2:	bf3c      	itt	cc
 800a1a4:	021b      	lslcc	r3, r3, #8
 800a1a6:	3008      	addcc	r0, #8
 800a1a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1ac:	bf3c      	itt	cc
 800a1ae:	011b      	lslcc	r3, r3, #4
 800a1b0:	3004      	addcc	r0, #4
 800a1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b6:	bf3c      	itt	cc
 800a1b8:	009b      	lslcc	r3, r3, #2
 800a1ba:	3002      	addcc	r0, #2
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	db05      	blt.n	800a1cc <__hi0bits+0x3c>
 800a1c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1c4:	f100 0001 	add.w	r0, r0, #1
 800a1c8:	bf08      	it	eq
 800a1ca:	2020      	moveq	r0, #32
 800a1cc:	4770      	bx	lr

0800a1ce <__lo0bits>:
 800a1ce:	6803      	ldr	r3, [r0, #0]
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	f013 0007 	ands.w	r0, r3, #7
 800a1d6:	d00b      	beq.n	800a1f0 <__lo0bits+0x22>
 800a1d8:	07d9      	lsls	r1, r3, #31
 800a1da:	d421      	bmi.n	800a220 <__lo0bits+0x52>
 800a1dc:	0798      	lsls	r0, r3, #30
 800a1de:	bf49      	itett	mi
 800a1e0:	085b      	lsrmi	r3, r3, #1
 800a1e2:	089b      	lsrpl	r3, r3, #2
 800a1e4:	2001      	movmi	r0, #1
 800a1e6:	6013      	strmi	r3, [r2, #0]
 800a1e8:	bf5c      	itt	pl
 800a1ea:	6013      	strpl	r3, [r2, #0]
 800a1ec:	2002      	movpl	r0, #2
 800a1ee:	4770      	bx	lr
 800a1f0:	b299      	uxth	r1, r3
 800a1f2:	b909      	cbnz	r1, 800a1f8 <__lo0bits+0x2a>
 800a1f4:	0c1b      	lsrs	r3, r3, #16
 800a1f6:	2010      	movs	r0, #16
 800a1f8:	b2d9      	uxtb	r1, r3
 800a1fa:	b909      	cbnz	r1, 800a200 <__lo0bits+0x32>
 800a1fc:	3008      	adds	r0, #8
 800a1fe:	0a1b      	lsrs	r3, r3, #8
 800a200:	0719      	lsls	r1, r3, #28
 800a202:	bf04      	itt	eq
 800a204:	091b      	lsreq	r3, r3, #4
 800a206:	3004      	addeq	r0, #4
 800a208:	0799      	lsls	r1, r3, #30
 800a20a:	bf04      	itt	eq
 800a20c:	089b      	lsreq	r3, r3, #2
 800a20e:	3002      	addeq	r0, #2
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d403      	bmi.n	800a21c <__lo0bits+0x4e>
 800a214:	085b      	lsrs	r3, r3, #1
 800a216:	f100 0001 	add.w	r0, r0, #1
 800a21a:	d003      	beq.n	800a224 <__lo0bits+0x56>
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	4770      	bx	lr
 800a220:	2000      	movs	r0, #0
 800a222:	4770      	bx	lr
 800a224:	2020      	movs	r0, #32
 800a226:	4770      	bx	lr

0800a228 <__i2b>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	460c      	mov	r4, r1
 800a22c:	2101      	movs	r1, #1
 800a22e:	f7ff febd 	bl	8009fac <_Balloc>
 800a232:	4602      	mov	r2, r0
 800a234:	b928      	cbnz	r0, 800a242 <__i2b+0x1a>
 800a236:	4b05      	ldr	r3, [pc, #20]	@ (800a24c <__i2b+0x24>)
 800a238:	4805      	ldr	r0, [pc, #20]	@ (800a250 <__i2b+0x28>)
 800a23a:	f240 1145 	movw	r1, #325	@ 0x145
 800a23e:	f001 fbef 	bl	800ba20 <__assert_func>
 800a242:	2301      	movs	r3, #1
 800a244:	6144      	str	r4, [r0, #20]
 800a246:	6103      	str	r3, [r0, #16]
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	0800ca7d 	.word	0x0800ca7d
 800a250:	0800ca8e 	.word	0x0800ca8e

0800a254 <__multiply>:
 800a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a258:	4614      	mov	r4, r2
 800a25a:	690a      	ldr	r2, [r1, #16]
 800a25c:	6923      	ldr	r3, [r4, #16]
 800a25e:	429a      	cmp	r2, r3
 800a260:	bfa8      	it	ge
 800a262:	4623      	movge	r3, r4
 800a264:	460f      	mov	r7, r1
 800a266:	bfa4      	itt	ge
 800a268:	460c      	movge	r4, r1
 800a26a:	461f      	movge	r7, r3
 800a26c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a270:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a274:	68a3      	ldr	r3, [r4, #8]
 800a276:	6861      	ldr	r1, [r4, #4]
 800a278:	eb0a 0609 	add.w	r6, sl, r9
 800a27c:	42b3      	cmp	r3, r6
 800a27e:	b085      	sub	sp, #20
 800a280:	bfb8      	it	lt
 800a282:	3101      	addlt	r1, #1
 800a284:	f7ff fe92 	bl	8009fac <_Balloc>
 800a288:	b930      	cbnz	r0, 800a298 <__multiply+0x44>
 800a28a:	4602      	mov	r2, r0
 800a28c:	4b44      	ldr	r3, [pc, #272]	@ (800a3a0 <__multiply+0x14c>)
 800a28e:	4845      	ldr	r0, [pc, #276]	@ (800a3a4 <__multiply+0x150>)
 800a290:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a294:	f001 fbc4 	bl	800ba20 <__assert_func>
 800a298:	f100 0514 	add.w	r5, r0, #20
 800a29c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a2a0:	462b      	mov	r3, r5
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4543      	cmp	r3, r8
 800a2a6:	d321      	bcc.n	800a2ec <__multiply+0x98>
 800a2a8:	f107 0114 	add.w	r1, r7, #20
 800a2ac:	f104 0214 	add.w	r2, r4, #20
 800a2b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a2b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a2b8:	9302      	str	r3, [sp, #8]
 800a2ba:	1b13      	subs	r3, r2, r4
 800a2bc:	3b15      	subs	r3, #21
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	f104 0715 	add.w	r7, r4, #21
 800a2c8:	42ba      	cmp	r2, r7
 800a2ca:	bf38      	it	cc
 800a2cc:	2304      	movcc	r3, #4
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	9b02      	ldr	r3, [sp, #8]
 800a2d2:	9103      	str	r1, [sp, #12]
 800a2d4:	428b      	cmp	r3, r1
 800a2d6:	d80c      	bhi.n	800a2f2 <__multiply+0x9e>
 800a2d8:	2e00      	cmp	r6, #0
 800a2da:	dd03      	ble.n	800a2e4 <__multiply+0x90>
 800a2dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d05b      	beq.n	800a39c <__multiply+0x148>
 800a2e4:	6106      	str	r6, [r0, #16]
 800a2e6:	b005      	add	sp, #20
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	f843 2b04 	str.w	r2, [r3], #4
 800a2f0:	e7d8      	b.n	800a2a4 <__multiply+0x50>
 800a2f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800a2f6:	f1ba 0f00 	cmp.w	sl, #0
 800a2fa:	d024      	beq.n	800a346 <__multiply+0xf2>
 800a2fc:	f104 0e14 	add.w	lr, r4, #20
 800a300:	46a9      	mov	r9, r5
 800a302:	f04f 0c00 	mov.w	ip, #0
 800a306:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a30a:	f8d9 3000 	ldr.w	r3, [r9]
 800a30e:	fa1f fb87 	uxth.w	fp, r7
 800a312:	b29b      	uxth	r3, r3
 800a314:	fb0a 330b 	mla	r3, sl, fp, r3
 800a318:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a31c:	f8d9 7000 	ldr.w	r7, [r9]
 800a320:	4463      	add	r3, ip
 800a322:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a326:	fb0a c70b 	mla	r7, sl, fp, ip
 800a32a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a32e:	b29b      	uxth	r3, r3
 800a330:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a334:	4572      	cmp	r2, lr
 800a336:	f849 3b04 	str.w	r3, [r9], #4
 800a33a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a33e:	d8e2      	bhi.n	800a306 <__multiply+0xb2>
 800a340:	9b01      	ldr	r3, [sp, #4]
 800a342:	f845 c003 	str.w	ip, [r5, r3]
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a34c:	3104      	adds	r1, #4
 800a34e:	f1b9 0f00 	cmp.w	r9, #0
 800a352:	d021      	beq.n	800a398 <__multiply+0x144>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	f104 0c14 	add.w	ip, r4, #20
 800a35a:	46ae      	mov	lr, r5
 800a35c:	f04f 0a00 	mov.w	sl, #0
 800a360:	f8bc b000 	ldrh.w	fp, [ip]
 800a364:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a368:	fb09 770b 	mla	r7, r9, fp, r7
 800a36c:	4457      	add	r7, sl
 800a36e:	b29b      	uxth	r3, r3
 800a370:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a374:	f84e 3b04 	str.w	r3, [lr], #4
 800a378:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a37c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a380:	f8be 3000 	ldrh.w	r3, [lr]
 800a384:	fb09 330a 	mla	r3, r9, sl, r3
 800a388:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a38c:	4562      	cmp	r2, ip
 800a38e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a392:	d8e5      	bhi.n	800a360 <__multiply+0x10c>
 800a394:	9f01      	ldr	r7, [sp, #4]
 800a396:	51eb      	str	r3, [r5, r7]
 800a398:	3504      	adds	r5, #4
 800a39a:	e799      	b.n	800a2d0 <__multiply+0x7c>
 800a39c:	3e01      	subs	r6, #1
 800a39e:	e79b      	b.n	800a2d8 <__multiply+0x84>
 800a3a0:	0800ca7d 	.word	0x0800ca7d
 800a3a4:	0800ca8e 	.word	0x0800ca8e

0800a3a8 <__pow5mult>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	4615      	mov	r5, r2
 800a3ae:	f012 0203 	ands.w	r2, r2, #3
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	460e      	mov	r6, r1
 800a3b6:	d007      	beq.n	800a3c8 <__pow5mult+0x20>
 800a3b8:	4c25      	ldr	r4, [pc, #148]	@ (800a450 <__pow5mult+0xa8>)
 800a3ba:	3a01      	subs	r2, #1
 800a3bc:	2300      	movs	r3, #0
 800a3be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3c2:	f7ff fe55 	bl	800a070 <__multadd>
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	10ad      	asrs	r5, r5, #2
 800a3ca:	d03d      	beq.n	800a448 <__pow5mult+0xa0>
 800a3cc:	69fc      	ldr	r4, [r7, #28]
 800a3ce:	b97c      	cbnz	r4, 800a3f0 <__pow5mult+0x48>
 800a3d0:	2010      	movs	r0, #16
 800a3d2:	f7ff fd35 	bl	8009e40 <malloc>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	61f8      	str	r0, [r7, #28]
 800a3da:	b928      	cbnz	r0, 800a3e8 <__pow5mult+0x40>
 800a3dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a454 <__pow5mult+0xac>)
 800a3de:	481e      	ldr	r0, [pc, #120]	@ (800a458 <__pow5mult+0xb0>)
 800a3e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a3e4:	f001 fb1c 	bl	800ba20 <__assert_func>
 800a3e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3ec:	6004      	str	r4, [r0, #0]
 800a3ee:	60c4      	str	r4, [r0, #12]
 800a3f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a3f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3f8:	b94c      	cbnz	r4, 800a40e <__pow5mult+0x66>
 800a3fa:	f240 2171 	movw	r1, #625	@ 0x271
 800a3fe:	4638      	mov	r0, r7
 800a400:	f7ff ff12 	bl	800a228 <__i2b>
 800a404:	2300      	movs	r3, #0
 800a406:	f8c8 0008 	str.w	r0, [r8, #8]
 800a40a:	4604      	mov	r4, r0
 800a40c:	6003      	str	r3, [r0, #0]
 800a40e:	f04f 0900 	mov.w	r9, #0
 800a412:	07eb      	lsls	r3, r5, #31
 800a414:	d50a      	bpl.n	800a42c <__pow5mult+0x84>
 800a416:	4631      	mov	r1, r6
 800a418:	4622      	mov	r2, r4
 800a41a:	4638      	mov	r0, r7
 800a41c:	f7ff ff1a 	bl	800a254 <__multiply>
 800a420:	4631      	mov	r1, r6
 800a422:	4680      	mov	r8, r0
 800a424:	4638      	mov	r0, r7
 800a426:	f7ff fe01 	bl	800a02c <_Bfree>
 800a42a:	4646      	mov	r6, r8
 800a42c:	106d      	asrs	r5, r5, #1
 800a42e:	d00b      	beq.n	800a448 <__pow5mult+0xa0>
 800a430:	6820      	ldr	r0, [r4, #0]
 800a432:	b938      	cbnz	r0, 800a444 <__pow5mult+0x9c>
 800a434:	4622      	mov	r2, r4
 800a436:	4621      	mov	r1, r4
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff ff0b 	bl	800a254 <__multiply>
 800a43e:	6020      	str	r0, [r4, #0]
 800a440:	f8c0 9000 	str.w	r9, [r0]
 800a444:	4604      	mov	r4, r0
 800a446:	e7e4      	b.n	800a412 <__pow5mult+0x6a>
 800a448:	4630      	mov	r0, r6
 800a44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a44e:	bf00      	nop
 800a450:	0800cae8 	.word	0x0800cae8
 800a454:	0800ca0e 	.word	0x0800ca0e
 800a458:	0800ca8e 	.word	0x0800ca8e

0800a45c <__lshift>:
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a460:	460c      	mov	r4, r1
 800a462:	6849      	ldr	r1, [r1, #4]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a46a:	68a3      	ldr	r3, [r4, #8]
 800a46c:	4607      	mov	r7, r0
 800a46e:	4691      	mov	r9, r2
 800a470:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a474:	f108 0601 	add.w	r6, r8, #1
 800a478:	42b3      	cmp	r3, r6
 800a47a:	db0b      	blt.n	800a494 <__lshift+0x38>
 800a47c:	4638      	mov	r0, r7
 800a47e:	f7ff fd95 	bl	8009fac <_Balloc>
 800a482:	4605      	mov	r5, r0
 800a484:	b948      	cbnz	r0, 800a49a <__lshift+0x3e>
 800a486:	4602      	mov	r2, r0
 800a488:	4b28      	ldr	r3, [pc, #160]	@ (800a52c <__lshift+0xd0>)
 800a48a:	4829      	ldr	r0, [pc, #164]	@ (800a530 <__lshift+0xd4>)
 800a48c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a490:	f001 fac6 	bl	800ba20 <__assert_func>
 800a494:	3101      	adds	r1, #1
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	e7ee      	b.n	800a478 <__lshift+0x1c>
 800a49a:	2300      	movs	r3, #0
 800a49c:	f100 0114 	add.w	r1, r0, #20
 800a4a0:	f100 0210 	add.w	r2, r0, #16
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	4553      	cmp	r3, sl
 800a4a8:	db33      	blt.n	800a512 <__lshift+0xb6>
 800a4aa:	6920      	ldr	r0, [r4, #16]
 800a4ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4b0:	f104 0314 	add.w	r3, r4, #20
 800a4b4:	f019 091f 	ands.w	r9, r9, #31
 800a4b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4c0:	d02b      	beq.n	800a51a <__lshift+0xbe>
 800a4c2:	f1c9 0e20 	rsb	lr, r9, #32
 800a4c6:	468a      	mov	sl, r1
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	6818      	ldr	r0, [r3, #0]
 800a4cc:	fa00 f009 	lsl.w	r0, r0, r9
 800a4d0:	4310      	orrs	r0, r2
 800a4d2:	f84a 0b04 	str.w	r0, [sl], #4
 800a4d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4da:	459c      	cmp	ip, r3
 800a4dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a4e0:	d8f3      	bhi.n	800a4ca <__lshift+0x6e>
 800a4e2:	ebac 0304 	sub.w	r3, ip, r4
 800a4e6:	3b15      	subs	r3, #21
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	f104 0015 	add.w	r0, r4, #21
 800a4f2:	4584      	cmp	ip, r0
 800a4f4:	bf38      	it	cc
 800a4f6:	2304      	movcc	r3, #4
 800a4f8:	50ca      	str	r2, [r1, r3]
 800a4fa:	b10a      	cbz	r2, 800a500 <__lshift+0xa4>
 800a4fc:	f108 0602 	add.w	r6, r8, #2
 800a500:	3e01      	subs	r6, #1
 800a502:	4638      	mov	r0, r7
 800a504:	612e      	str	r6, [r5, #16]
 800a506:	4621      	mov	r1, r4
 800a508:	f7ff fd90 	bl	800a02c <_Bfree>
 800a50c:	4628      	mov	r0, r5
 800a50e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a512:	f842 0f04 	str.w	r0, [r2, #4]!
 800a516:	3301      	adds	r3, #1
 800a518:	e7c5      	b.n	800a4a6 <__lshift+0x4a>
 800a51a:	3904      	subs	r1, #4
 800a51c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a520:	f841 2f04 	str.w	r2, [r1, #4]!
 800a524:	459c      	cmp	ip, r3
 800a526:	d8f9      	bhi.n	800a51c <__lshift+0xc0>
 800a528:	e7ea      	b.n	800a500 <__lshift+0xa4>
 800a52a:	bf00      	nop
 800a52c:	0800ca7d 	.word	0x0800ca7d
 800a530:	0800ca8e 	.word	0x0800ca8e

0800a534 <__mcmp>:
 800a534:	690a      	ldr	r2, [r1, #16]
 800a536:	4603      	mov	r3, r0
 800a538:	6900      	ldr	r0, [r0, #16]
 800a53a:	1a80      	subs	r0, r0, r2
 800a53c:	b530      	push	{r4, r5, lr}
 800a53e:	d10e      	bne.n	800a55e <__mcmp+0x2a>
 800a540:	3314      	adds	r3, #20
 800a542:	3114      	adds	r1, #20
 800a544:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a548:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a54c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a554:	4295      	cmp	r5, r2
 800a556:	d003      	beq.n	800a560 <__mcmp+0x2c>
 800a558:	d205      	bcs.n	800a566 <__mcmp+0x32>
 800a55a:	f04f 30ff 	mov.w	r0, #4294967295
 800a55e:	bd30      	pop	{r4, r5, pc}
 800a560:	42a3      	cmp	r3, r4
 800a562:	d3f3      	bcc.n	800a54c <__mcmp+0x18>
 800a564:	e7fb      	b.n	800a55e <__mcmp+0x2a>
 800a566:	2001      	movs	r0, #1
 800a568:	e7f9      	b.n	800a55e <__mcmp+0x2a>
	...

0800a56c <__mdiff>:
 800a56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	4689      	mov	r9, r1
 800a572:	4606      	mov	r6, r0
 800a574:	4611      	mov	r1, r2
 800a576:	4648      	mov	r0, r9
 800a578:	4614      	mov	r4, r2
 800a57a:	f7ff ffdb 	bl	800a534 <__mcmp>
 800a57e:	1e05      	subs	r5, r0, #0
 800a580:	d112      	bne.n	800a5a8 <__mdiff+0x3c>
 800a582:	4629      	mov	r1, r5
 800a584:	4630      	mov	r0, r6
 800a586:	f7ff fd11 	bl	8009fac <_Balloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	b928      	cbnz	r0, 800a59a <__mdiff+0x2e>
 800a58e:	4b3f      	ldr	r3, [pc, #252]	@ (800a68c <__mdiff+0x120>)
 800a590:	f240 2137 	movw	r1, #567	@ 0x237
 800a594:	483e      	ldr	r0, [pc, #248]	@ (800a690 <__mdiff+0x124>)
 800a596:	f001 fa43 	bl	800ba20 <__assert_func>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	b003      	add	sp, #12
 800a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a8:	bfbc      	itt	lt
 800a5aa:	464b      	movlt	r3, r9
 800a5ac:	46a1      	movlt	r9, r4
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5b4:	bfba      	itte	lt
 800a5b6:	461c      	movlt	r4, r3
 800a5b8:	2501      	movlt	r5, #1
 800a5ba:	2500      	movge	r5, #0
 800a5bc:	f7ff fcf6 	bl	8009fac <_Balloc>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	b918      	cbnz	r0, 800a5cc <__mdiff+0x60>
 800a5c4:	4b31      	ldr	r3, [pc, #196]	@ (800a68c <__mdiff+0x120>)
 800a5c6:	f240 2145 	movw	r1, #581	@ 0x245
 800a5ca:	e7e3      	b.n	800a594 <__mdiff+0x28>
 800a5cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5d0:	6926      	ldr	r6, [r4, #16]
 800a5d2:	60c5      	str	r5, [r0, #12]
 800a5d4:	f109 0310 	add.w	r3, r9, #16
 800a5d8:	f109 0514 	add.w	r5, r9, #20
 800a5dc:	f104 0e14 	add.w	lr, r4, #20
 800a5e0:	f100 0b14 	add.w	fp, r0, #20
 800a5e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a5e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	46d9      	mov	r9, fp
 800a5f0:	f04f 0c00 	mov.w	ip, #0
 800a5f4:	9b01      	ldr	r3, [sp, #4]
 800a5f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a5fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	fa1f f38a 	uxth.w	r3, sl
 800a604:	4619      	mov	r1, r3
 800a606:	b283      	uxth	r3, r0
 800a608:	1acb      	subs	r3, r1, r3
 800a60a:	0c00      	lsrs	r0, r0, #16
 800a60c:	4463      	add	r3, ip
 800a60e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a612:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a616:	b29b      	uxth	r3, r3
 800a618:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a61c:	4576      	cmp	r6, lr
 800a61e:	f849 3b04 	str.w	r3, [r9], #4
 800a622:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a626:	d8e5      	bhi.n	800a5f4 <__mdiff+0x88>
 800a628:	1b33      	subs	r3, r6, r4
 800a62a:	3b15      	subs	r3, #21
 800a62c:	f023 0303 	bic.w	r3, r3, #3
 800a630:	3415      	adds	r4, #21
 800a632:	3304      	adds	r3, #4
 800a634:	42a6      	cmp	r6, r4
 800a636:	bf38      	it	cc
 800a638:	2304      	movcc	r3, #4
 800a63a:	441d      	add	r5, r3
 800a63c:	445b      	add	r3, fp
 800a63e:	461e      	mov	r6, r3
 800a640:	462c      	mov	r4, r5
 800a642:	4544      	cmp	r4, r8
 800a644:	d30e      	bcc.n	800a664 <__mdiff+0xf8>
 800a646:	f108 0103 	add.w	r1, r8, #3
 800a64a:	1b49      	subs	r1, r1, r5
 800a64c:	f021 0103 	bic.w	r1, r1, #3
 800a650:	3d03      	subs	r5, #3
 800a652:	45a8      	cmp	r8, r5
 800a654:	bf38      	it	cc
 800a656:	2100      	movcc	r1, #0
 800a658:	440b      	add	r3, r1
 800a65a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a65e:	b191      	cbz	r1, 800a686 <__mdiff+0x11a>
 800a660:	6117      	str	r7, [r2, #16]
 800a662:	e79d      	b.n	800a5a0 <__mdiff+0x34>
 800a664:	f854 1b04 	ldr.w	r1, [r4], #4
 800a668:	46e6      	mov	lr, ip
 800a66a:	0c08      	lsrs	r0, r1, #16
 800a66c:	fa1c fc81 	uxtah	ip, ip, r1
 800a670:	4471      	add	r1, lr
 800a672:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a676:	b289      	uxth	r1, r1
 800a678:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a67c:	f846 1b04 	str.w	r1, [r6], #4
 800a680:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a684:	e7dd      	b.n	800a642 <__mdiff+0xd6>
 800a686:	3f01      	subs	r7, #1
 800a688:	e7e7      	b.n	800a65a <__mdiff+0xee>
 800a68a:	bf00      	nop
 800a68c:	0800ca7d 	.word	0x0800ca7d
 800a690:	0800ca8e 	.word	0x0800ca8e

0800a694 <__ulp>:
 800a694:	b082      	sub	sp, #8
 800a696:	ed8d 0b00 	vstr	d0, [sp]
 800a69a:	9a01      	ldr	r2, [sp, #4]
 800a69c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6dc <__ulp+0x48>)
 800a69e:	4013      	ands	r3, r2
 800a6a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dc08      	bgt.n	800a6ba <__ulp+0x26>
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6b2:	da04      	bge.n	800a6be <__ulp+0x2a>
 800a6b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6b8:	4113      	asrs	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	e008      	b.n	800a6d0 <__ulp+0x3c>
 800a6be:	f1a2 0314 	sub.w	r3, r2, #20
 800a6c2:	2b1e      	cmp	r3, #30
 800a6c4:	bfda      	itte	le
 800a6c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a6ca:	40da      	lsrle	r2, r3
 800a6cc:	2201      	movgt	r2, #1
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4610      	mov	r0, r2
 800a6d4:	ec41 0b10 	vmov	d0, r0, r1
 800a6d8:	b002      	add	sp, #8
 800a6da:	4770      	bx	lr
 800a6dc:	7ff00000 	.word	0x7ff00000

0800a6e0 <__b2d>:
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	6906      	ldr	r6, [r0, #16]
 800a6e6:	f100 0814 	add.w	r8, r0, #20
 800a6ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a6ee:	1f37      	subs	r7, r6, #4
 800a6f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f7ff fd4b 	bl	800a190 <__hi0bits>
 800a6fa:	f1c0 0320 	rsb	r3, r0, #32
 800a6fe:	280a      	cmp	r0, #10
 800a700:	600b      	str	r3, [r1, #0]
 800a702:	491b      	ldr	r1, [pc, #108]	@ (800a770 <__b2d+0x90>)
 800a704:	dc15      	bgt.n	800a732 <__b2d+0x52>
 800a706:	f1c0 0c0b 	rsb	ip, r0, #11
 800a70a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a70e:	45b8      	cmp	r8, r7
 800a710:	ea43 0501 	orr.w	r5, r3, r1
 800a714:	bf34      	ite	cc
 800a716:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a71a:	2300      	movcs	r3, #0
 800a71c:	3015      	adds	r0, #21
 800a71e:	fa02 f000 	lsl.w	r0, r2, r0
 800a722:	fa23 f30c 	lsr.w	r3, r3, ip
 800a726:	4303      	orrs	r3, r0
 800a728:	461c      	mov	r4, r3
 800a72a:	ec45 4b10 	vmov	d0, r4, r5
 800a72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a732:	45b8      	cmp	r8, r7
 800a734:	bf3a      	itte	cc
 800a736:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a73a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a73e:	2300      	movcs	r3, #0
 800a740:	380b      	subs	r0, #11
 800a742:	d012      	beq.n	800a76a <__b2d+0x8a>
 800a744:	f1c0 0120 	rsb	r1, r0, #32
 800a748:	fa23 f401 	lsr.w	r4, r3, r1
 800a74c:	4082      	lsls	r2, r0
 800a74e:	4322      	orrs	r2, r4
 800a750:	4547      	cmp	r7, r8
 800a752:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a756:	bf8c      	ite	hi
 800a758:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a75c:	2200      	movls	r2, #0
 800a75e:	4083      	lsls	r3, r0
 800a760:	40ca      	lsrs	r2, r1
 800a762:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a766:	4313      	orrs	r3, r2
 800a768:	e7de      	b.n	800a728 <__b2d+0x48>
 800a76a:	ea42 0501 	orr.w	r5, r2, r1
 800a76e:	e7db      	b.n	800a728 <__b2d+0x48>
 800a770:	3ff00000 	.word	0x3ff00000

0800a774 <__d2b>:
 800a774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a778:	460f      	mov	r7, r1
 800a77a:	2101      	movs	r1, #1
 800a77c:	ec59 8b10 	vmov	r8, r9, d0
 800a780:	4616      	mov	r6, r2
 800a782:	f7ff fc13 	bl	8009fac <_Balloc>
 800a786:	4604      	mov	r4, r0
 800a788:	b930      	cbnz	r0, 800a798 <__d2b+0x24>
 800a78a:	4602      	mov	r2, r0
 800a78c:	4b23      	ldr	r3, [pc, #140]	@ (800a81c <__d2b+0xa8>)
 800a78e:	4824      	ldr	r0, [pc, #144]	@ (800a820 <__d2b+0xac>)
 800a790:	f240 310f 	movw	r1, #783	@ 0x30f
 800a794:	f001 f944 	bl	800ba20 <__assert_func>
 800a798:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a79c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7a0:	b10d      	cbz	r5, 800a7a6 <__d2b+0x32>
 800a7a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	f1b8 0300 	subs.w	r3, r8, #0
 800a7ac:	d023      	beq.n	800a7f6 <__d2b+0x82>
 800a7ae:	4668      	mov	r0, sp
 800a7b0:	9300      	str	r3, [sp, #0]
 800a7b2:	f7ff fd0c 	bl	800a1ce <__lo0bits>
 800a7b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7ba:	b1d0      	cbz	r0, 800a7f2 <__d2b+0x7e>
 800a7bc:	f1c0 0320 	rsb	r3, r0, #32
 800a7c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c4:	430b      	orrs	r3, r1
 800a7c6:	40c2      	lsrs	r2, r0
 800a7c8:	6163      	str	r3, [r4, #20]
 800a7ca:	9201      	str	r2, [sp, #4]
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	61a3      	str	r3, [r4, #24]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf0c      	ite	eq
 800a7d4:	2201      	moveq	r2, #1
 800a7d6:	2202      	movne	r2, #2
 800a7d8:	6122      	str	r2, [r4, #16]
 800a7da:	b1a5      	cbz	r5, 800a806 <__d2b+0x92>
 800a7dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7e0:	4405      	add	r5, r0
 800a7e2:	603d      	str	r5, [r7, #0]
 800a7e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7e8:	6030      	str	r0, [r6, #0]
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	b003      	add	sp, #12
 800a7ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7f2:	6161      	str	r1, [r4, #20]
 800a7f4:	e7ea      	b.n	800a7cc <__d2b+0x58>
 800a7f6:	a801      	add	r0, sp, #4
 800a7f8:	f7ff fce9 	bl	800a1ce <__lo0bits>
 800a7fc:	9b01      	ldr	r3, [sp, #4]
 800a7fe:	6163      	str	r3, [r4, #20]
 800a800:	3020      	adds	r0, #32
 800a802:	2201      	movs	r2, #1
 800a804:	e7e8      	b.n	800a7d8 <__d2b+0x64>
 800a806:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a80a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a80e:	6038      	str	r0, [r7, #0]
 800a810:	6918      	ldr	r0, [r3, #16]
 800a812:	f7ff fcbd 	bl	800a190 <__hi0bits>
 800a816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a81a:	e7e5      	b.n	800a7e8 <__d2b+0x74>
 800a81c:	0800ca7d 	.word	0x0800ca7d
 800a820:	0800ca8e 	.word	0x0800ca8e

0800a824 <__ratio>:
 800a824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4688      	mov	r8, r1
 800a82a:	4669      	mov	r1, sp
 800a82c:	4681      	mov	r9, r0
 800a82e:	f7ff ff57 	bl	800a6e0 <__b2d>
 800a832:	a901      	add	r1, sp, #4
 800a834:	4640      	mov	r0, r8
 800a836:	ec55 4b10 	vmov	r4, r5, d0
 800a83a:	f7ff ff51 	bl	800a6e0 <__b2d>
 800a83e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a842:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	e9dd 3100 	ldrd	r3, r1, [sp]
 800a84c:	1a5b      	subs	r3, r3, r1
 800a84e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800a852:	ec57 6b10 	vmov	r6, r7, d0
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfd6      	itet	le
 800a85a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a85e:	462a      	movgt	r2, r5
 800a860:	463a      	movle	r2, r7
 800a862:	46ab      	mov	fp, r5
 800a864:	46a2      	mov	sl, r4
 800a866:	bfce      	itee	gt
 800a868:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a86c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800a870:	ee00 3a90 	vmovle	s1, r3
 800a874:	ec4b ab17 	vmov	d7, sl, fp
 800a878:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800a87c:	b003      	add	sp, #12
 800a87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a882 <__copybits>:
 800a882:	3901      	subs	r1, #1
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	1149      	asrs	r1, r1, #5
 800a888:	6914      	ldr	r4, [r2, #16]
 800a88a:	3101      	adds	r1, #1
 800a88c:	f102 0314 	add.w	r3, r2, #20
 800a890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a898:	1f05      	subs	r5, r0, #4
 800a89a:	42a3      	cmp	r3, r4
 800a89c:	d30c      	bcc.n	800a8b8 <__copybits+0x36>
 800a89e:	1aa3      	subs	r3, r4, r2
 800a8a0:	3b11      	subs	r3, #17
 800a8a2:	f023 0303 	bic.w	r3, r3, #3
 800a8a6:	3211      	adds	r2, #17
 800a8a8:	42a2      	cmp	r2, r4
 800a8aa:	bf88      	it	hi
 800a8ac:	2300      	movhi	r3, #0
 800a8ae:	4418      	add	r0, r3
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4288      	cmp	r0, r1
 800a8b4:	d305      	bcc.n	800a8c2 <__copybits+0x40>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800a8c0:	e7eb      	b.n	800a89a <__copybits+0x18>
 800a8c2:	f840 3b04 	str.w	r3, [r0], #4
 800a8c6:	e7f4      	b.n	800a8b2 <__copybits+0x30>

0800a8c8 <__any_on>:
 800a8c8:	f100 0214 	add.w	r2, r0, #20
 800a8cc:	6900      	ldr	r0, [r0, #16]
 800a8ce:	114b      	asrs	r3, r1, #5
 800a8d0:	4298      	cmp	r0, r3
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	db11      	blt.n	800a8fa <__any_on+0x32>
 800a8d6:	dd0a      	ble.n	800a8ee <__any_on+0x26>
 800a8d8:	f011 011f 	ands.w	r1, r1, #31
 800a8dc:	d007      	beq.n	800a8ee <__any_on+0x26>
 800a8de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a8e2:	fa24 f001 	lsr.w	r0, r4, r1
 800a8e6:	fa00 f101 	lsl.w	r1, r0, r1
 800a8ea:	428c      	cmp	r4, r1
 800a8ec:	d10b      	bne.n	800a906 <__any_on+0x3e>
 800a8ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d803      	bhi.n	800a8fe <__any_on+0x36>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	bd10      	pop	{r4, pc}
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	e7f7      	b.n	800a8ee <__any_on+0x26>
 800a8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a902:	2900      	cmp	r1, #0
 800a904:	d0f5      	beq.n	800a8f2 <__any_on+0x2a>
 800a906:	2001      	movs	r0, #1
 800a908:	e7f6      	b.n	800a8f8 <__any_on+0x30>

0800a90a <sulp>:
 800a90a:	b570      	push	{r4, r5, r6, lr}
 800a90c:	4604      	mov	r4, r0
 800a90e:	460d      	mov	r5, r1
 800a910:	4616      	mov	r6, r2
 800a912:	ec45 4b10 	vmov	d0, r4, r5
 800a916:	f7ff febd 	bl	800a694 <__ulp>
 800a91a:	b17e      	cbz	r6, 800a93c <sulp+0x32>
 800a91c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a920:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a924:	2b00      	cmp	r3, #0
 800a926:	dd09      	ble.n	800a93c <sulp+0x32>
 800a928:	051b      	lsls	r3, r3, #20
 800a92a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800a92e:	2000      	movs	r0, #0
 800a930:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800a934:	ec41 0b17 	vmov	d7, r0, r1
 800a938:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a940 <_strtod_l>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b0a 	vpush	{d8-d12}
 800a948:	b097      	sub	sp, #92	@ 0x5c
 800a94a:	4688      	mov	r8, r1
 800a94c:	920e      	str	r2, [sp, #56]	@ 0x38
 800a94e:	2200      	movs	r2, #0
 800a950:	9212      	str	r2, [sp, #72]	@ 0x48
 800a952:	9005      	str	r0, [sp, #20]
 800a954:	f04f 0a00 	mov.w	sl, #0
 800a958:	f04f 0b00 	mov.w	fp, #0
 800a95c:	460a      	mov	r2, r1
 800a95e:	9211      	str	r2, [sp, #68]	@ 0x44
 800a960:	7811      	ldrb	r1, [r2, #0]
 800a962:	292b      	cmp	r1, #43	@ 0x2b
 800a964:	d04c      	beq.n	800aa00 <_strtod_l+0xc0>
 800a966:	d839      	bhi.n	800a9dc <_strtod_l+0x9c>
 800a968:	290d      	cmp	r1, #13
 800a96a:	d833      	bhi.n	800a9d4 <_strtod_l+0x94>
 800a96c:	2908      	cmp	r1, #8
 800a96e:	d833      	bhi.n	800a9d8 <_strtod_l+0x98>
 800a970:	2900      	cmp	r1, #0
 800a972:	d03c      	beq.n	800a9ee <_strtod_l+0xae>
 800a974:	2200      	movs	r2, #0
 800a976:	9208      	str	r2, [sp, #32]
 800a978:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a97a:	782a      	ldrb	r2, [r5, #0]
 800a97c:	2a30      	cmp	r2, #48	@ 0x30
 800a97e:	f040 80b5 	bne.w	800aaec <_strtod_l+0x1ac>
 800a982:	786a      	ldrb	r2, [r5, #1]
 800a984:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a988:	2a58      	cmp	r2, #88	@ 0x58
 800a98a:	d170      	bne.n	800aa6e <_strtod_l+0x12e>
 800a98c:	9302      	str	r3, [sp, #8]
 800a98e:	9b08      	ldr	r3, [sp, #32]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	ab12      	add	r3, sp, #72	@ 0x48
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	4a8b      	ldr	r2, [pc, #556]	@ (800abc4 <_strtod_l+0x284>)
 800a998:	9805      	ldr	r0, [sp, #20]
 800a99a:	ab13      	add	r3, sp, #76	@ 0x4c
 800a99c:	a911      	add	r1, sp, #68	@ 0x44
 800a99e:	f001 f8d9 	bl	800bb54 <__gethex>
 800a9a2:	f010 060f 	ands.w	r6, r0, #15
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	d005      	beq.n	800a9b6 <_strtod_l+0x76>
 800a9aa:	2e06      	cmp	r6, #6
 800a9ac:	d12a      	bne.n	800aa04 <_strtod_l+0xc4>
 800a9ae:	3501      	adds	r5, #1
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	9511      	str	r5, [sp, #68]	@ 0x44
 800a9b4:	9308      	str	r3, [sp, #32]
 800a9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f040 852f 	bne.w	800b41c <_strtod_l+0xadc>
 800a9be:	9b08      	ldr	r3, [sp, #32]
 800a9c0:	ec4b ab10 	vmov	d0, sl, fp
 800a9c4:	b1cb      	cbz	r3, 800a9fa <_strtod_l+0xba>
 800a9c6:	eeb1 0b40 	vneg.f64	d0, d0
 800a9ca:	b017      	add	sp, #92	@ 0x5c
 800a9cc:	ecbd 8b0a 	vpop	{d8-d12}
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	2920      	cmp	r1, #32
 800a9d6:	d1cd      	bne.n	800a974 <_strtod_l+0x34>
 800a9d8:	3201      	adds	r2, #1
 800a9da:	e7c0      	b.n	800a95e <_strtod_l+0x1e>
 800a9dc:	292d      	cmp	r1, #45	@ 0x2d
 800a9de:	d1c9      	bne.n	800a974 <_strtod_l+0x34>
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	9108      	str	r1, [sp, #32]
 800a9e4:	1c51      	adds	r1, r2, #1
 800a9e6:	9111      	str	r1, [sp, #68]	@ 0x44
 800a9e8:	7852      	ldrb	r2, [r2, #1]
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d1c4      	bne.n	800a978 <_strtod_l+0x38>
 800a9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9f0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f040 850f 	bne.w	800b418 <_strtod_l+0xad8>
 800a9fa:	ec4b ab10 	vmov	d0, sl, fp
 800a9fe:	e7e4      	b.n	800a9ca <_strtod_l+0x8a>
 800aa00:	2100      	movs	r1, #0
 800aa02:	e7ee      	b.n	800a9e2 <_strtod_l+0xa2>
 800aa04:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aa06:	b13a      	cbz	r2, 800aa18 <_strtod_l+0xd8>
 800aa08:	2135      	movs	r1, #53	@ 0x35
 800aa0a:	a814      	add	r0, sp, #80	@ 0x50
 800aa0c:	f7ff ff39 	bl	800a882 <__copybits>
 800aa10:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800aa12:	9805      	ldr	r0, [sp, #20]
 800aa14:	f7ff fb0a 	bl	800a02c <_Bfree>
 800aa18:	1e73      	subs	r3, r6, #1
 800aa1a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d806      	bhi.n	800aa2e <_strtod_l+0xee>
 800aa20:	e8df f003 	tbb	[pc, r3]
 800aa24:	201d0314 	.word	0x201d0314
 800aa28:	14          	.byte	0x14
 800aa29:	00          	.byte	0x00
 800aa2a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800aa2e:	05e3      	lsls	r3, r4, #23
 800aa30:	bf48      	it	mi
 800aa32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800aa36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa3a:	0d1b      	lsrs	r3, r3, #20
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1b9      	bne.n	800a9b6 <_strtod_l+0x76>
 800aa42:	f7fe fba1 	bl	8009188 <__errno>
 800aa46:	2322      	movs	r3, #34	@ 0x22
 800aa48:	6003      	str	r3, [r0, #0]
 800aa4a:	e7b4      	b.n	800a9b6 <_strtod_l+0x76>
 800aa4c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800aa50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800aa54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800aa58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800aa5c:	e7e7      	b.n	800aa2e <_strtod_l+0xee>
 800aa5e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800abcc <_strtod_l+0x28c>
 800aa62:	e7e4      	b.n	800aa2e <_strtod_l+0xee>
 800aa64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800aa68:	f04f 3aff 	mov.w	sl, #4294967295
 800aa6c:	e7df      	b.n	800aa2e <_strtod_l+0xee>
 800aa6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	9211      	str	r2, [sp, #68]	@ 0x44
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	2b30      	cmp	r3, #48	@ 0x30
 800aa78:	d0f9      	beq.n	800aa6e <_strtod_l+0x12e>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d09b      	beq.n	800a9b6 <_strtod_l+0x76>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	2600      	movs	r6, #0
 800aa82:	9307      	str	r3, [sp, #28]
 800aa84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aa86:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa88:	46b1      	mov	r9, r6
 800aa8a:	4635      	mov	r5, r6
 800aa8c:	220a      	movs	r2, #10
 800aa8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800aa90:	7804      	ldrb	r4, [r0, #0]
 800aa92:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800aa96:	b2d9      	uxtb	r1, r3
 800aa98:	2909      	cmp	r1, #9
 800aa9a:	d929      	bls.n	800aaf0 <_strtod_l+0x1b0>
 800aa9c:	494a      	ldr	r1, [pc, #296]	@ (800abc8 <_strtod_l+0x288>)
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f000 ff84 	bl	800b9ac <strncmp>
 800aaa4:	b378      	cbz	r0, 800ab06 <_strtod_l+0x1c6>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	462b      	mov	r3, r5
 800aaac:	4607      	mov	r7, r0
 800aaae:	9006      	str	r0, [sp, #24]
 800aab0:	2a65      	cmp	r2, #101	@ 0x65
 800aab2:	d001      	beq.n	800aab8 <_strtod_l+0x178>
 800aab4:	2a45      	cmp	r2, #69	@ 0x45
 800aab6:	d117      	bne.n	800aae8 <_strtod_l+0x1a8>
 800aab8:	b91b      	cbnz	r3, 800aac2 <_strtod_l+0x182>
 800aaba:	9b07      	ldr	r3, [sp, #28]
 800aabc:	4303      	orrs	r3, r0
 800aabe:	d096      	beq.n	800a9ee <_strtod_l+0xae>
 800aac0:	2300      	movs	r3, #0
 800aac2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800aac6:	f108 0201 	add.w	r2, r8, #1
 800aaca:	9211      	str	r2, [sp, #68]	@ 0x44
 800aacc:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aad0:	2a2b      	cmp	r2, #43	@ 0x2b
 800aad2:	d06b      	beq.n	800abac <_strtod_l+0x26c>
 800aad4:	2a2d      	cmp	r2, #45	@ 0x2d
 800aad6:	d071      	beq.n	800abbc <_strtod_l+0x27c>
 800aad8:	f04f 0e00 	mov.w	lr, #0
 800aadc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800aae0:	2c09      	cmp	r4, #9
 800aae2:	d979      	bls.n	800abd8 <_strtod_l+0x298>
 800aae4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800aae8:	2400      	movs	r4, #0
 800aaea:	e094      	b.n	800ac16 <_strtod_l+0x2d6>
 800aaec:	2300      	movs	r3, #0
 800aaee:	e7c7      	b.n	800aa80 <_strtod_l+0x140>
 800aaf0:	2d08      	cmp	r5, #8
 800aaf2:	f100 0001 	add.w	r0, r0, #1
 800aaf6:	bfd4      	ite	le
 800aaf8:	fb02 3909 	mlale	r9, r2, r9, r3
 800aafc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ab00:	3501      	adds	r5, #1
 800ab02:	9011      	str	r0, [sp, #68]	@ 0x44
 800ab04:	e7c3      	b.n	800aa8e <_strtod_l+0x14e>
 800ab06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab08:	1c5a      	adds	r2, r3, #1
 800ab0a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ab0c:	785a      	ldrb	r2, [r3, #1]
 800ab0e:	b375      	cbz	r5, 800ab6e <_strtod_l+0x22e>
 800ab10:	4607      	mov	r7, r0
 800ab12:	462b      	mov	r3, r5
 800ab14:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ab18:	2909      	cmp	r1, #9
 800ab1a:	d913      	bls.n	800ab44 <_strtod_l+0x204>
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	9106      	str	r1, [sp, #24]
 800ab20:	e7c6      	b.n	800aab0 <_strtod_l+0x170>
 800ab22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab24:	1c5a      	adds	r2, r3, #1
 800ab26:	9211      	str	r2, [sp, #68]	@ 0x44
 800ab28:	785a      	ldrb	r2, [r3, #1]
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	2a30      	cmp	r2, #48	@ 0x30
 800ab2e:	d0f8      	beq.n	800ab22 <_strtod_l+0x1e2>
 800ab30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ab34:	2b08      	cmp	r3, #8
 800ab36:	f200 8476 	bhi.w	800b426 <_strtod_l+0xae6>
 800ab3a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab3e:	4607      	mov	r7, r0
 800ab40:	2000      	movs	r0, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	3a30      	subs	r2, #48	@ 0x30
 800ab46:	f100 0101 	add.w	r1, r0, #1
 800ab4a:	d023      	beq.n	800ab94 <_strtod_l+0x254>
 800ab4c:	440f      	add	r7, r1
 800ab4e:	eb00 0c03 	add.w	ip, r0, r3
 800ab52:	4619      	mov	r1, r3
 800ab54:	240a      	movs	r4, #10
 800ab56:	4561      	cmp	r1, ip
 800ab58:	d10b      	bne.n	800ab72 <_strtod_l+0x232>
 800ab5a:	1c5c      	adds	r4, r3, #1
 800ab5c:	4403      	add	r3, r0
 800ab5e:	2b08      	cmp	r3, #8
 800ab60:	4404      	add	r4, r0
 800ab62:	dc11      	bgt.n	800ab88 <_strtod_l+0x248>
 800ab64:	230a      	movs	r3, #10
 800ab66:	fb03 2909 	mla	r9, r3, r9, r2
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	e013      	b.n	800ab96 <_strtod_l+0x256>
 800ab6e:	4628      	mov	r0, r5
 800ab70:	e7dc      	b.n	800ab2c <_strtod_l+0x1ec>
 800ab72:	2908      	cmp	r1, #8
 800ab74:	f101 0101 	add.w	r1, r1, #1
 800ab78:	dc02      	bgt.n	800ab80 <_strtod_l+0x240>
 800ab7a:	fb04 f909 	mul.w	r9, r4, r9
 800ab7e:	e7ea      	b.n	800ab56 <_strtod_l+0x216>
 800ab80:	2910      	cmp	r1, #16
 800ab82:	bfd8      	it	le
 800ab84:	4366      	mulle	r6, r4
 800ab86:	e7e6      	b.n	800ab56 <_strtod_l+0x216>
 800ab88:	2b0f      	cmp	r3, #15
 800ab8a:	dcee      	bgt.n	800ab6a <_strtod_l+0x22a>
 800ab8c:	230a      	movs	r3, #10
 800ab8e:	fb03 2606 	mla	r6, r3, r6, r2
 800ab92:	e7ea      	b.n	800ab6a <_strtod_l+0x22a>
 800ab94:	461c      	mov	r4, r3
 800ab96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab98:	1c5a      	adds	r2, r3, #1
 800ab9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ab9c:	785a      	ldrb	r2, [r3, #1]
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4623      	mov	r3, r4
 800aba2:	e7b7      	b.n	800ab14 <_strtod_l+0x1d4>
 800aba4:	2301      	movs	r3, #1
 800aba6:	2700      	movs	r7, #0
 800aba8:	9306      	str	r3, [sp, #24]
 800abaa:	e786      	b.n	800aaba <_strtod_l+0x17a>
 800abac:	f04f 0e00 	mov.w	lr, #0
 800abb0:	f108 0202 	add.w	r2, r8, #2
 800abb4:	9211      	str	r2, [sp, #68]	@ 0x44
 800abb6:	f898 2002 	ldrb.w	r2, [r8, #2]
 800abba:	e78f      	b.n	800aadc <_strtod_l+0x19c>
 800abbc:	f04f 0e01 	mov.w	lr, #1
 800abc0:	e7f6      	b.n	800abb0 <_strtod_l+0x270>
 800abc2:	bf00      	nop
 800abc4:	0800cc00 	.word	0x0800cc00
 800abc8:	0800cbe8 	.word	0x0800cbe8
 800abcc:	7ff00000 	.word	0x7ff00000
 800abd0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abd2:	1c54      	adds	r4, r2, #1
 800abd4:	9411      	str	r4, [sp, #68]	@ 0x44
 800abd6:	7852      	ldrb	r2, [r2, #1]
 800abd8:	2a30      	cmp	r2, #48	@ 0x30
 800abda:	d0f9      	beq.n	800abd0 <_strtod_l+0x290>
 800abdc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800abe0:	2c08      	cmp	r4, #8
 800abe2:	d881      	bhi.n	800aae8 <_strtod_l+0x1a8>
 800abe4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800abe8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abea:	9209      	str	r2, [sp, #36]	@ 0x24
 800abec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800abee:	1c51      	adds	r1, r2, #1
 800abf0:	9111      	str	r1, [sp, #68]	@ 0x44
 800abf2:	7852      	ldrb	r2, [r2, #1]
 800abf4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800abf8:	2c09      	cmp	r4, #9
 800abfa:	d938      	bls.n	800ac6e <_strtod_l+0x32e>
 800abfc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800abfe:	1b0c      	subs	r4, r1, r4
 800ac00:	2c08      	cmp	r4, #8
 800ac02:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800ac06:	dc02      	bgt.n	800ac0e <_strtod_l+0x2ce>
 800ac08:	4564      	cmp	r4, ip
 800ac0a:	bfa8      	it	ge
 800ac0c:	4664      	movge	r4, ip
 800ac0e:	f1be 0f00 	cmp.w	lr, #0
 800ac12:	d000      	beq.n	800ac16 <_strtod_l+0x2d6>
 800ac14:	4264      	negs	r4, r4
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d14e      	bne.n	800acb8 <_strtod_l+0x378>
 800ac1a:	9b07      	ldr	r3, [sp, #28]
 800ac1c:	4318      	orrs	r0, r3
 800ac1e:	f47f aeca 	bne.w	800a9b6 <_strtod_l+0x76>
 800ac22:	9b06      	ldr	r3, [sp, #24]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f47f aee2 	bne.w	800a9ee <_strtod_l+0xae>
 800ac2a:	2a69      	cmp	r2, #105	@ 0x69
 800ac2c:	d027      	beq.n	800ac7e <_strtod_l+0x33e>
 800ac2e:	dc24      	bgt.n	800ac7a <_strtod_l+0x33a>
 800ac30:	2a49      	cmp	r2, #73	@ 0x49
 800ac32:	d024      	beq.n	800ac7e <_strtod_l+0x33e>
 800ac34:	2a4e      	cmp	r2, #78	@ 0x4e
 800ac36:	f47f aeda 	bne.w	800a9ee <_strtod_l+0xae>
 800ac3a:	4997      	ldr	r1, [pc, #604]	@ (800ae98 <_strtod_l+0x558>)
 800ac3c:	a811      	add	r0, sp, #68	@ 0x44
 800ac3e:	f001 f9ab 	bl	800bf98 <__match>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f43f aed3 	beq.w	800a9ee <_strtod_l+0xae>
 800ac48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b28      	cmp	r3, #40	@ 0x28
 800ac4e:	d12d      	bne.n	800acac <_strtod_l+0x36c>
 800ac50:	4992      	ldr	r1, [pc, #584]	@ (800ae9c <_strtod_l+0x55c>)
 800ac52:	aa14      	add	r2, sp, #80	@ 0x50
 800ac54:	a811      	add	r0, sp, #68	@ 0x44
 800ac56:	f001 f9b3 	bl	800bfc0 <__hexnan>
 800ac5a:	2805      	cmp	r0, #5
 800ac5c:	d126      	bne.n	800acac <_strtod_l+0x36c>
 800ac5e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac60:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800ac64:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ac68:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ac6c:	e6a3      	b.n	800a9b6 <_strtod_l+0x76>
 800ac6e:	240a      	movs	r4, #10
 800ac70:	fb04 2c0c 	mla	ip, r4, ip, r2
 800ac74:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800ac78:	e7b8      	b.n	800abec <_strtod_l+0x2ac>
 800ac7a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ac7c:	e7db      	b.n	800ac36 <_strtod_l+0x2f6>
 800ac7e:	4988      	ldr	r1, [pc, #544]	@ (800aea0 <_strtod_l+0x560>)
 800ac80:	a811      	add	r0, sp, #68	@ 0x44
 800ac82:	f001 f989 	bl	800bf98 <__match>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f43f aeb1 	beq.w	800a9ee <_strtod_l+0xae>
 800ac8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac8e:	4985      	ldr	r1, [pc, #532]	@ (800aea4 <_strtod_l+0x564>)
 800ac90:	3b01      	subs	r3, #1
 800ac92:	a811      	add	r0, sp, #68	@ 0x44
 800ac94:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac96:	f001 f97f 	bl	800bf98 <__match>
 800ac9a:	b910      	cbnz	r0, 800aca2 <_strtod_l+0x362>
 800ac9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac9e:	3301      	adds	r3, #1
 800aca0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aca2:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800aeb8 <_strtod_l+0x578>
 800aca6:	f04f 0a00 	mov.w	sl, #0
 800acaa:	e684      	b.n	800a9b6 <_strtod_l+0x76>
 800acac:	487e      	ldr	r0, [pc, #504]	@ (800aea8 <_strtod_l+0x568>)
 800acae:	f000 feaf 	bl	800ba10 <nan>
 800acb2:	ec5b ab10 	vmov	sl, fp, d0
 800acb6:	e67e      	b.n	800a9b6 <_strtod_l+0x76>
 800acb8:	ee07 9a90 	vmov	s15, r9
 800acbc:	1be2      	subs	r2, r4, r7
 800acbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	bf08      	it	eq
 800acc6:	461d      	moveq	r5, r3
 800acc8:	2b10      	cmp	r3, #16
 800acca:	9209      	str	r2, [sp, #36]	@ 0x24
 800accc:	461a      	mov	r2, r3
 800acce:	bfa8      	it	ge
 800acd0:	2210      	movge	r2, #16
 800acd2:	2b09      	cmp	r3, #9
 800acd4:	ec5b ab17 	vmov	sl, fp, d7
 800acd8:	dc15      	bgt.n	800ad06 <_strtod_l+0x3c6>
 800acda:	1be1      	subs	r1, r4, r7
 800acdc:	2900      	cmp	r1, #0
 800acde:	f43f ae6a 	beq.w	800a9b6 <_strtod_l+0x76>
 800ace2:	eba4 0107 	sub.w	r1, r4, r7
 800ace6:	dd72      	ble.n	800adce <_strtod_l+0x48e>
 800ace8:	2916      	cmp	r1, #22
 800acea:	dc59      	bgt.n	800ada0 <_strtod_l+0x460>
 800acec:	4b6f      	ldr	r3, [pc, #444]	@ (800aeac <_strtod_l+0x56c>)
 800acee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800acf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acf4:	ed93 7b00 	vldr	d7, [r3]
 800acf8:	ec4b ab16 	vmov	d6, sl, fp
 800acfc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad00:	ec5b ab17 	vmov	sl, fp, d7
 800ad04:	e657      	b.n	800a9b6 <_strtod_l+0x76>
 800ad06:	4969      	ldr	r1, [pc, #420]	@ (800aeac <_strtod_l+0x56c>)
 800ad08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad0c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800ad10:	ee06 6a90 	vmov	s13, r6
 800ad14:	2b0f      	cmp	r3, #15
 800ad16:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ad1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ad1e:	ec5b ab16 	vmov	sl, fp, d6
 800ad22:	ddda      	ble.n	800acda <_strtod_l+0x39a>
 800ad24:	1a9a      	subs	r2, r3, r2
 800ad26:	1be1      	subs	r1, r4, r7
 800ad28:	440a      	add	r2, r1
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	f340 8094 	ble.w	800ae58 <_strtod_l+0x518>
 800ad30:	f012 000f 	ands.w	r0, r2, #15
 800ad34:	d00a      	beq.n	800ad4c <_strtod_l+0x40c>
 800ad36:	495d      	ldr	r1, [pc, #372]	@ (800aeac <_strtod_l+0x56c>)
 800ad38:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ad3c:	ed91 7b00 	vldr	d7, [r1]
 800ad40:	ec4b ab16 	vmov	d6, sl, fp
 800ad44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad48:	ec5b ab17 	vmov	sl, fp, d7
 800ad4c:	f032 020f 	bics.w	r2, r2, #15
 800ad50:	d073      	beq.n	800ae3a <_strtod_l+0x4fa>
 800ad52:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800ad56:	dd47      	ble.n	800ade8 <_strtod_l+0x4a8>
 800ad58:	2400      	movs	r4, #0
 800ad5a:	4625      	mov	r5, r4
 800ad5c:	9407      	str	r4, [sp, #28]
 800ad5e:	4626      	mov	r6, r4
 800ad60:	9a05      	ldr	r2, [sp, #20]
 800ad62:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aeb8 <_strtod_l+0x578>
 800ad66:	2322      	movs	r3, #34	@ 0x22
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	f04f 0a00 	mov.w	sl, #0
 800ad6e:	9b07      	ldr	r3, [sp, #28]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f43f ae20 	beq.w	800a9b6 <_strtod_l+0x76>
 800ad76:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ad78:	9805      	ldr	r0, [sp, #20]
 800ad7a:	f7ff f957 	bl	800a02c <_Bfree>
 800ad7e:	9805      	ldr	r0, [sp, #20]
 800ad80:	4631      	mov	r1, r6
 800ad82:	f7ff f953 	bl	800a02c <_Bfree>
 800ad86:	9805      	ldr	r0, [sp, #20]
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7ff f94f 	bl	800a02c <_Bfree>
 800ad8e:	9907      	ldr	r1, [sp, #28]
 800ad90:	9805      	ldr	r0, [sp, #20]
 800ad92:	f7ff f94b 	bl	800a02c <_Bfree>
 800ad96:	9805      	ldr	r0, [sp, #20]
 800ad98:	4621      	mov	r1, r4
 800ad9a:	f7ff f947 	bl	800a02c <_Bfree>
 800ad9e:	e60a      	b.n	800a9b6 <_strtod_l+0x76>
 800ada0:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800ada4:	1be0      	subs	r0, r4, r7
 800ada6:	4281      	cmp	r1, r0
 800ada8:	dbbc      	blt.n	800ad24 <_strtod_l+0x3e4>
 800adaa:	4a40      	ldr	r2, [pc, #256]	@ (800aeac <_strtod_l+0x56c>)
 800adac:	f1c3 030f 	rsb	r3, r3, #15
 800adb0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800adb4:	ed91 7b00 	vldr	d7, [r1]
 800adb8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800adba:	ec4b ab16 	vmov	d6, sl, fp
 800adbe:	1acb      	subs	r3, r1, r3
 800adc0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800adc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800adc8:	ed92 6b00 	vldr	d6, [r2]
 800adcc:	e796      	b.n	800acfc <_strtod_l+0x3bc>
 800adce:	3116      	adds	r1, #22
 800add0:	dba8      	blt.n	800ad24 <_strtod_l+0x3e4>
 800add2:	4b36      	ldr	r3, [pc, #216]	@ (800aeac <_strtod_l+0x56c>)
 800add4:	1b3c      	subs	r4, r7, r4
 800add6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800adda:	ed94 7b00 	vldr	d7, [r4]
 800adde:	ec4b ab16 	vmov	d6, sl, fp
 800ade2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ade6:	e78b      	b.n	800ad00 <_strtod_l+0x3c0>
 800ade8:	2000      	movs	r0, #0
 800adea:	ec4b ab17 	vmov	d7, sl, fp
 800adee:	4e30      	ldr	r6, [pc, #192]	@ (800aeb0 <_strtod_l+0x570>)
 800adf0:	1112      	asrs	r2, r2, #4
 800adf2:	4601      	mov	r1, r0
 800adf4:	2a01      	cmp	r2, #1
 800adf6:	dc23      	bgt.n	800ae40 <_strtod_l+0x500>
 800adf8:	b108      	cbz	r0, 800adfe <_strtod_l+0x4be>
 800adfa:	ec5b ab17 	vmov	sl, fp, d7
 800adfe:	4a2c      	ldr	r2, [pc, #176]	@ (800aeb0 <_strtod_l+0x570>)
 800ae00:	482c      	ldr	r0, [pc, #176]	@ (800aeb4 <_strtod_l+0x574>)
 800ae02:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ae06:	ed92 7b00 	vldr	d7, [r2]
 800ae0a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ae0e:	ec4b ab16 	vmov	d6, sl, fp
 800ae12:	4a29      	ldr	r2, [pc, #164]	@ (800aeb8 <_strtod_l+0x578>)
 800ae14:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae18:	ee17 1a90 	vmov	r1, s15
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	4282      	cmp	r2, r0
 800ae20:	ec5b ab17 	vmov	sl, fp, d7
 800ae24:	d898      	bhi.n	800ad58 <_strtod_l+0x418>
 800ae26:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800ae2a:	4282      	cmp	r2, r0
 800ae2c:	bf86      	itte	hi
 800ae2e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800aebc <_strtod_l+0x57c>
 800ae32:	f04f 3aff 	movhi.w	sl, #4294967295
 800ae36:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	9206      	str	r2, [sp, #24]
 800ae3e:	e076      	b.n	800af2e <_strtod_l+0x5ee>
 800ae40:	f012 0f01 	tst.w	r2, #1
 800ae44:	d004      	beq.n	800ae50 <_strtod_l+0x510>
 800ae46:	ed96 6b00 	vldr	d6, [r6]
 800ae4a:	2001      	movs	r0, #1
 800ae4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ae50:	3101      	adds	r1, #1
 800ae52:	1052      	asrs	r2, r2, #1
 800ae54:	3608      	adds	r6, #8
 800ae56:	e7cd      	b.n	800adf4 <_strtod_l+0x4b4>
 800ae58:	d0ef      	beq.n	800ae3a <_strtod_l+0x4fa>
 800ae5a:	4252      	negs	r2, r2
 800ae5c:	f012 000f 	ands.w	r0, r2, #15
 800ae60:	d00a      	beq.n	800ae78 <_strtod_l+0x538>
 800ae62:	4912      	ldr	r1, [pc, #72]	@ (800aeac <_strtod_l+0x56c>)
 800ae64:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ae68:	ed91 7b00 	vldr	d7, [r1]
 800ae6c:	ec4b ab16 	vmov	d6, sl, fp
 800ae70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ae74:	ec5b ab17 	vmov	sl, fp, d7
 800ae78:	1112      	asrs	r2, r2, #4
 800ae7a:	d0de      	beq.n	800ae3a <_strtod_l+0x4fa>
 800ae7c:	2a1f      	cmp	r2, #31
 800ae7e:	dd1f      	ble.n	800aec0 <_strtod_l+0x580>
 800ae80:	2400      	movs	r4, #0
 800ae82:	4625      	mov	r5, r4
 800ae84:	9407      	str	r4, [sp, #28]
 800ae86:	4626      	mov	r6, r4
 800ae88:	9a05      	ldr	r2, [sp, #20]
 800ae8a:	2322      	movs	r3, #34	@ 0x22
 800ae8c:	f04f 0a00 	mov.w	sl, #0
 800ae90:	f04f 0b00 	mov.w	fp, #0
 800ae94:	6013      	str	r3, [r2, #0]
 800ae96:	e76a      	b.n	800ad6e <_strtod_l+0x42e>
 800ae98:	0800c9d5 	.word	0x0800c9d5
 800ae9c:	0800cbec 	.word	0x0800cbec
 800aea0:	0800c9cd 	.word	0x0800c9cd
 800aea4:	0800ca04 	.word	0x0800ca04
 800aea8:	0800cd95 	.word	0x0800cd95
 800aeac:	0800cb20 	.word	0x0800cb20
 800aeb0:	0800caf8 	.word	0x0800caf8
 800aeb4:	7ca00000 	.word	0x7ca00000
 800aeb8:	7ff00000 	.word	0x7ff00000
 800aebc:	7fefffff 	.word	0x7fefffff
 800aec0:	f012 0110 	ands.w	r1, r2, #16
 800aec4:	bf18      	it	ne
 800aec6:	216a      	movne	r1, #106	@ 0x6a
 800aec8:	9106      	str	r1, [sp, #24]
 800aeca:	ec4b ab17 	vmov	d7, sl, fp
 800aece:	49b0      	ldr	r1, [pc, #704]	@ (800b190 <_strtod_l+0x850>)
 800aed0:	2000      	movs	r0, #0
 800aed2:	07d6      	lsls	r6, r2, #31
 800aed4:	d504      	bpl.n	800aee0 <_strtod_l+0x5a0>
 800aed6:	ed91 6b00 	vldr	d6, [r1]
 800aeda:	2001      	movs	r0, #1
 800aedc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aee0:	1052      	asrs	r2, r2, #1
 800aee2:	f101 0108 	add.w	r1, r1, #8
 800aee6:	d1f4      	bne.n	800aed2 <_strtod_l+0x592>
 800aee8:	b108      	cbz	r0, 800aeee <_strtod_l+0x5ae>
 800aeea:	ec5b ab17 	vmov	sl, fp, d7
 800aeee:	9a06      	ldr	r2, [sp, #24]
 800aef0:	b1b2      	cbz	r2, 800af20 <_strtod_l+0x5e0>
 800aef2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800aef6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	4658      	mov	r0, fp
 800aefe:	dd0f      	ble.n	800af20 <_strtod_l+0x5e0>
 800af00:	2a1f      	cmp	r2, #31
 800af02:	dd55      	ble.n	800afb0 <_strtod_l+0x670>
 800af04:	2a34      	cmp	r2, #52	@ 0x34
 800af06:	bfde      	ittt	le
 800af08:	f04f 32ff 	movle.w	r2, #4294967295
 800af0c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800af10:	408a      	lslle	r2, r1
 800af12:	f04f 0a00 	mov.w	sl, #0
 800af16:	bfcc      	ite	gt
 800af18:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800af1c:	ea02 0b00 	andle.w	fp, r2, r0
 800af20:	ec4b ab17 	vmov	d7, sl, fp
 800af24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af2c:	d0a8      	beq.n	800ae80 <_strtod_l+0x540>
 800af2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800af30:	9805      	ldr	r0, [sp, #20]
 800af32:	f8cd 9000 	str.w	r9, [sp]
 800af36:	462a      	mov	r2, r5
 800af38:	f7ff f8e0 	bl	800a0fc <__s2b>
 800af3c:	9007      	str	r0, [sp, #28]
 800af3e:	2800      	cmp	r0, #0
 800af40:	f43f af0a 	beq.w	800ad58 <_strtod_l+0x418>
 800af44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af46:	1b3f      	subs	r7, r7, r4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	bfb4      	ite	lt
 800af4c:	463b      	movlt	r3, r7
 800af4e:	2300      	movge	r3, #0
 800af50:	930a      	str	r3, [sp, #40]	@ 0x28
 800af52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af54:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b180 <_strtod_l+0x840>
 800af58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800af5c:	2400      	movs	r4, #0
 800af5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800af60:	4625      	mov	r5, r4
 800af62:	9b07      	ldr	r3, [sp, #28]
 800af64:	9805      	ldr	r0, [sp, #20]
 800af66:	6859      	ldr	r1, [r3, #4]
 800af68:	f7ff f820 	bl	8009fac <_Balloc>
 800af6c:	4606      	mov	r6, r0
 800af6e:	2800      	cmp	r0, #0
 800af70:	f43f aef6 	beq.w	800ad60 <_strtod_l+0x420>
 800af74:	9b07      	ldr	r3, [sp, #28]
 800af76:	691a      	ldr	r2, [r3, #16]
 800af78:	ec4b ab19 	vmov	d9, sl, fp
 800af7c:	3202      	adds	r2, #2
 800af7e:	f103 010c 	add.w	r1, r3, #12
 800af82:	0092      	lsls	r2, r2, #2
 800af84:	300c      	adds	r0, #12
 800af86:	f000 fd33 	bl	800b9f0 <memcpy>
 800af8a:	eeb0 0b49 	vmov.f64	d0, d9
 800af8e:	9805      	ldr	r0, [sp, #20]
 800af90:	aa14      	add	r2, sp, #80	@ 0x50
 800af92:	a913      	add	r1, sp, #76	@ 0x4c
 800af94:	f7ff fbee 	bl	800a774 <__d2b>
 800af98:	9012      	str	r0, [sp, #72]	@ 0x48
 800af9a:	2800      	cmp	r0, #0
 800af9c:	f43f aee0 	beq.w	800ad60 <_strtod_l+0x420>
 800afa0:	9805      	ldr	r0, [sp, #20]
 800afa2:	2101      	movs	r1, #1
 800afa4:	f7ff f940 	bl	800a228 <__i2b>
 800afa8:	4605      	mov	r5, r0
 800afaa:	b940      	cbnz	r0, 800afbe <_strtod_l+0x67e>
 800afac:	2500      	movs	r5, #0
 800afae:	e6d7      	b.n	800ad60 <_strtod_l+0x420>
 800afb0:	f04f 31ff 	mov.w	r1, #4294967295
 800afb4:	fa01 f202 	lsl.w	r2, r1, r2
 800afb8:	ea02 0a0a 	and.w	sl, r2, sl
 800afbc:	e7b0      	b.n	800af20 <_strtod_l+0x5e0>
 800afbe:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800afc0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800afc2:	2f00      	cmp	r7, #0
 800afc4:	bfab      	itete	ge
 800afc6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800afc8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800afca:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800afce:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800afd2:	bfac      	ite	ge
 800afd4:	eb07 0903 	addge.w	r9, r7, r3
 800afd8:	eba3 0807 	sublt.w	r8, r3, r7
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	1aff      	subs	r7, r7, r3
 800afe0:	4417      	add	r7, r2
 800afe2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800afe6:	4a6b      	ldr	r2, [pc, #428]	@ (800b194 <_strtod_l+0x854>)
 800afe8:	3f01      	subs	r7, #1
 800afea:	4297      	cmp	r7, r2
 800afec:	da51      	bge.n	800b092 <_strtod_l+0x752>
 800afee:	1bd1      	subs	r1, r2, r7
 800aff0:	291f      	cmp	r1, #31
 800aff2:	eba3 0301 	sub.w	r3, r3, r1
 800aff6:	f04f 0201 	mov.w	r2, #1
 800affa:	dc3e      	bgt.n	800b07a <_strtod_l+0x73a>
 800affc:	408a      	lsls	r2, r1
 800affe:	920c      	str	r2, [sp, #48]	@ 0x30
 800b000:	2200      	movs	r2, #0
 800b002:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b004:	eb09 0703 	add.w	r7, r9, r3
 800b008:	4498      	add	r8, r3
 800b00a:	9b06      	ldr	r3, [sp, #24]
 800b00c:	45b9      	cmp	r9, r7
 800b00e:	4498      	add	r8, r3
 800b010:	464b      	mov	r3, r9
 800b012:	bfa8      	it	ge
 800b014:	463b      	movge	r3, r7
 800b016:	4543      	cmp	r3, r8
 800b018:	bfa8      	it	ge
 800b01a:	4643      	movge	r3, r8
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bfc2      	ittt	gt
 800b020:	1aff      	subgt	r7, r7, r3
 800b022:	eba8 0803 	subgt.w	r8, r8, r3
 800b026:	eba9 0903 	subgt.w	r9, r9, r3
 800b02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	dd16      	ble.n	800b05e <_strtod_l+0x71e>
 800b030:	4629      	mov	r1, r5
 800b032:	9805      	ldr	r0, [sp, #20]
 800b034:	461a      	mov	r2, r3
 800b036:	f7ff f9b7 	bl	800a3a8 <__pow5mult>
 800b03a:	4605      	mov	r5, r0
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d0b5      	beq.n	800afac <_strtod_l+0x66c>
 800b040:	4601      	mov	r1, r0
 800b042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b044:	9805      	ldr	r0, [sp, #20]
 800b046:	f7ff f905 	bl	800a254 <__multiply>
 800b04a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b04c:	2800      	cmp	r0, #0
 800b04e:	f43f ae87 	beq.w	800ad60 <_strtod_l+0x420>
 800b052:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b054:	9805      	ldr	r0, [sp, #20]
 800b056:	f7fe ffe9 	bl	800a02c <_Bfree>
 800b05a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b05c:	9312      	str	r3, [sp, #72]	@ 0x48
 800b05e:	2f00      	cmp	r7, #0
 800b060:	dc1b      	bgt.n	800b09a <_strtod_l+0x75a>
 800b062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd21      	ble.n	800b0ac <_strtod_l+0x76c>
 800b068:	4631      	mov	r1, r6
 800b06a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b06c:	9805      	ldr	r0, [sp, #20]
 800b06e:	f7ff f99b 	bl	800a3a8 <__pow5mult>
 800b072:	4606      	mov	r6, r0
 800b074:	b9d0      	cbnz	r0, 800b0ac <_strtod_l+0x76c>
 800b076:	2600      	movs	r6, #0
 800b078:	e672      	b.n	800ad60 <_strtod_l+0x420>
 800b07a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b07e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b082:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b086:	37e2      	adds	r7, #226	@ 0xe2
 800b088:	fa02 f107 	lsl.w	r1, r2, r7
 800b08c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b08e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b090:	e7b8      	b.n	800b004 <_strtod_l+0x6c4>
 800b092:	2200      	movs	r2, #0
 800b094:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b096:	2201      	movs	r2, #1
 800b098:	e7f9      	b.n	800b08e <_strtod_l+0x74e>
 800b09a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b09c:	9805      	ldr	r0, [sp, #20]
 800b09e:	463a      	mov	r2, r7
 800b0a0:	f7ff f9dc 	bl	800a45c <__lshift>
 800b0a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d1db      	bne.n	800b062 <_strtod_l+0x722>
 800b0aa:	e659      	b.n	800ad60 <_strtod_l+0x420>
 800b0ac:	f1b8 0f00 	cmp.w	r8, #0
 800b0b0:	dd07      	ble.n	800b0c2 <_strtod_l+0x782>
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	9805      	ldr	r0, [sp, #20]
 800b0b6:	4642      	mov	r2, r8
 800b0b8:	f7ff f9d0 	bl	800a45c <__lshift>
 800b0bc:	4606      	mov	r6, r0
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d0d9      	beq.n	800b076 <_strtod_l+0x736>
 800b0c2:	f1b9 0f00 	cmp.w	r9, #0
 800b0c6:	dd08      	ble.n	800b0da <_strtod_l+0x79a>
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	9805      	ldr	r0, [sp, #20]
 800b0cc:	464a      	mov	r2, r9
 800b0ce:	f7ff f9c5 	bl	800a45c <__lshift>
 800b0d2:	4605      	mov	r5, r0
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	f43f ae43 	beq.w	800ad60 <_strtod_l+0x420>
 800b0da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b0dc:	9805      	ldr	r0, [sp, #20]
 800b0de:	4632      	mov	r2, r6
 800b0e0:	f7ff fa44 	bl	800a56c <__mdiff>
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f43f ae3a 	beq.w	800ad60 <_strtod_l+0x420>
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b0f2:	60c3      	str	r3, [r0, #12]
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	f7ff fa1d 	bl	800a534 <__mcmp>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	da4e      	bge.n	800b19c <_strtod_l+0x85c>
 800b0fe:	ea58 080a 	orrs.w	r8, r8, sl
 800b102:	d174      	bne.n	800b1ee <_strtod_l+0x8ae>
 800b104:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d170      	bne.n	800b1ee <_strtod_l+0x8ae>
 800b10c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b110:	0d1b      	lsrs	r3, r3, #20
 800b112:	051b      	lsls	r3, r3, #20
 800b114:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b118:	d969      	bls.n	800b1ee <_strtod_l+0x8ae>
 800b11a:	6963      	ldr	r3, [r4, #20]
 800b11c:	b913      	cbnz	r3, 800b124 <_strtod_l+0x7e4>
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	2b01      	cmp	r3, #1
 800b122:	dd64      	ble.n	800b1ee <_strtod_l+0x8ae>
 800b124:	4621      	mov	r1, r4
 800b126:	2201      	movs	r2, #1
 800b128:	9805      	ldr	r0, [sp, #20]
 800b12a:	f7ff f997 	bl	800a45c <__lshift>
 800b12e:	4629      	mov	r1, r5
 800b130:	4604      	mov	r4, r0
 800b132:	f7ff f9ff 	bl	800a534 <__mcmp>
 800b136:	2800      	cmp	r0, #0
 800b138:	dd59      	ble.n	800b1ee <_strtod_l+0x8ae>
 800b13a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b13e:	9a06      	ldr	r2, [sp, #24]
 800b140:	0d1b      	lsrs	r3, r3, #20
 800b142:	051b      	lsls	r3, r3, #20
 800b144:	2a00      	cmp	r2, #0
 800b146:	d070      	beq.n	800b22a <_strtod_l+0x8ea>
 800b148:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b14c:	d86d      	bhi.n	800b22a <_strtod_l+0x8ea>
 800b14e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b152:	f67f ae99 	bls.w	800ae88 <_strtod_l+0x548>
 800b156:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b188 <_strtod_l+0x848>
 800b15a:	ec4b ab16 	vmov	d6, sl, fp
 800b15e:	4b0e      	ldr	r3, [pc, #56]	@ (800b198 <_strtod_l+0x858>)
 800b160:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b164:	ee17 2a90 	vmov	r2, s15
 800b168:	4013      	ands	r3, r2
 800b16a:	ec5b ab17 	vmov	sl, fp, d7
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f47f ae01 	bne.w	800ad76 <_strtod_l+0x436>
 800b174:	9a05      	ldr	r2, [sp, #20]
 800b176:	2322      	movs	r3, #34	@ 0x22
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e5fc      	b.n	800ad76 <_strtod_l+0x436>
 800b17c:	f3af 8000 	nop.w
 800b180:	ffc00000 	.word	0xffc00000
 800b184:	41dfffff 	.word	0x41dfffff
 800b188:	00000000 	.word	0x00000000
 800b18c:	39500000 	.word	0x39500000
 800b190:	0800cc18 	.word	0x0800cc18
 800b194:	fffffc02 	.word	0xfffffc02
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	46d9      	mov	r9, fp
 800b19e:	d15d      	bne.n	800b25c <_strtod_l+0x91c>
 800b1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1a4:	f1b8 0f00 	cmp.w	r8, #0
 800b1a8:	d02a      	beq.n	800b200 <_strtod_l+0x8c0>
 800b1aa:	4aab      	ldr	r2, [pc, #684]	@ (800b458 <_strtod_l+0xb18>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d12a      	bne.n	800b206 <_strtod_l+0x8c6>
 800b1b0:	9b06      	ldr	r3, [sp, #24]
 800b1b2:	4652      	mov	r2, sl
 800b1b4:	b1fb      	cbz	r3, 800b1f6 <_strtod_l+0x8b6>
 800b1b6:	4ba9      	ldr	r3, [pc, #676]	@ (800b45c <_strtod_l+0xb1c>)
 800b1b8:	ea0b 0303 	and.w	r3, fp, r3
 800b1bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b1c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b1c4:	d81a      	bhi.n	800b1fc <_strtod_l+0x8bc>
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b1cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d118      	bne.n	800b206 <_strtod_l+0x8c6>
 800b1d4:	4ba2      	ldr	r3, [pc, #648]	@ (800b460 <_strtod_l+0xb20>)
 800b1d6:	4599      	cmp	r9, r3
 800b1d8:	d102      	bne.n	800b1e0 <_strtod_l+0x8a0>
 800b1da:	3201      	adds	r2, #1
 800b1dc:	f43f adc0 	beq.w	800ad60 <_strtod_l+0x420>
 800b1e0:	4b9e      	ldr	r3, [pc, #632]	@ (800b45c <_strtod_l+0xb1c>)
 800b1e2:	ea09 0303 	and.w	r3, r9, r3
 800b1e6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b1ea:	f04f 0a00 	mov.w	sl, #0
 800b1ee:	9b06      	ldr	r3, [sp, #24]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1b0      	bne.n	800b156 <_strtod_l+0x816>
 800b1f4:	e5bf      	b.n	800ad76 <_strtod_l+0x436>
 800b1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fa:	e7e9      	b.n	800b1d0 <_strtod_l+0x890>
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	e7e7      	b.n	800b1d0 <_strtod_l+0x890>
 800b200:	ea53 030a 	orrs.w	r3, r3, sl
 800b204:	d099      	beq.n	800b13a <_strtod_l+0x7fa>
 800b206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b208:	b1c3      	cbz	r3, 800b23c <_strtod_l+0x8fc>
 800b20a:	ea13 0f09 	tst.w	r3, r9
 800b20e:	d0ee      	beq.n	800b1ee <_strtod_l+0x8ae>
 800b210:	9a06      	ldr	r2, [sp, #24]
 800b212:	4650      	mov	r0, sl
 800b214:	4659      	mov	r1, fp
 800b216:	f1b8 0f00 	cmp.w	r8, #0
 800b21a:	d013      	beq.n	800b244 <_strtod_l+0x904>
 800b21c:	f7ff fb75 	bl	800a90a <sulp>
 800b220:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b224:	ec5b ab17 	vmov	sl, fp, d7
 800b228:	e7e1      	b.n	800b1ee <_strtod_l+0x8ae>
 800b22a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b22e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b232:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b236:	f04f 3aff 	mov.w	sl, #4294967295
 800b23a:	e7d8      	b.n	800b1ee <_strtod_l+0x8ae>
 800b23c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b23e:	ea13 0f0a 	tst.w	r3, sl
 800b242:	e7e4      	b.n	800b20e <_strtod_l+0x8ce>
 800b244:	f7ff fb61 	bl	800a90a <sulp>
 800b248:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b24c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b254:	ec5b ab10 	vmov	sl, fp, d0
 800b258:	d1c9      	bne.n	800b1ee <_strtod_l+0x8ae>
 800b25a:	e615      	b.n	800ae88 <_strtod_l+0x548>
 800b25c:	4629      	mov	r1, r5
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff fae0 	bl	800a824 <__ratio>
 800b264:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b268:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b270:	d85d      	bhi.n	800b32e <_strtod_l+0x9ee>
 800b272:	f1b8 0f00 	cmp.w	r8, #0
 800b276:	d164      	bne.n	800b342 <_strtod_l+0xa02>
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	d14b      	bne.n	800b316 <_strtod_l+0x9d6>
 800b27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b282:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b286:	2b00      	cmp	r3, #0
 800b288:	d160      	bne.n	800b34c <_strtod_l+0xa0c>
 800b28a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b28e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b296:	d401      	bmi.n	800b29c <_strtod_l+0x95c>
 800b298:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b29c:	eeb1 ab48 	vneg.f64	d10, d8
 800b2a0:	486e      	ldr	r0, [pc, #440]	@ (800b45c <_strtod_l+0xb1c>)
 800b2a2:	4970      	ldr	r1, [pc, #448]	@ (800b464 <_strtod_l+0xb24>)
 800b2a4:	ea09 0700 	and.w	r7, r9, r0
 800b2a8:	428f      	cmp	r7, r1
 800b2aa:	ec53 2b1a 	vmov	r2, r3, d10
 800b2ae:	d17d      	bne.n	800b3ac <_strtod_l+0xa6c>
 800b2b0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b2b4:	ec4b ab1c 	vmov	d12, sl, fp
 800b2b8:	eeb0 0b4c 	vmov.f64	d0, d12
 800b2bc:	f7ff f9ea 	bl	800a694 <__ulp>
 800b2c0:	4866      	ldr	r0, [pc, #408]	@ (800b45c <_strtod_l+0xb1c>)
 800b2c2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b2c6:	ee1c 3a90 	vmov	r3, s25
 800b2ca:	4a67      	ldr	r2, [pc, #412]	@ (800b468 <_strtod_l+0xb28>)
 800b2cc:	ea03 0100 	and.w	r1, r3, r0
 800b2d0:	4291      	cmp	r1, r2
 800b2d2:	ec5b ab1c 	vmov	sl, fp, d12
 800b2d6:	d93c      	bls.n	800b352 <_strtod_l+0xa12>
 800b2d8:	ee19 2a90 	vmov	r2, s19
 800b2dc:	4b60      	ldr	r3, [pc, #384]	@ (800b460 <_strtod_l+0xb20>)
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d104      	bne.n	800b2ec <_strtod_l+0x9ac>
 800b2e2:	ee19 3a10 	vmov	r3, s18
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	f43f ad3a 	beq.w	800ad60 <_strtod_l+0x420>
 800b2ec:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800b460 <_strtod_l+0xb20>
 800b2f0:	f04f 3aff 	mov.w	sl, #4294967295
 800b2f4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b2f6:	9805      	ldr	r0, [sp, #20]
 800b2f8:	f7fe fe98 	bl	800a02c <_Bfree>
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	4631      	mov	r1, r6
 800b300:	f7fe fe94 	bl	800a02c <_Bfree>
 800b304:	9805      	ldr	r0, [sp, #20]
 800b306:	4629      	mov	r1, r5
 800b308:	f7fe fe90 	bl	800a02c <_Bfree>
 800b30c:	9805      	ldr	r0, [sp, #20]
 800b30e:	4621      	mov	r1, r4
 800b310:	f7fe fe8c 	bl	800a02c <_Bfree>
 800b314:	e625      	b.n	800af62 <_strtod_l+0x622>
 800b316:	f1ba 0f01 	cmp.w	sl, #1
 800b31a:	d103      	bne.n	800b324 <_strtod_l+0x9e4>
 800b31c:	f1bb 0f00 	cmp.w	fp, #0
 800b320:	f43f adb2 	beq.w	800ae88 <_strtod_l+0x548>
 800b324:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b328:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b32c:	e7b8      	b.n	800b2a0 <_strtod_l+0x960>
 800b32e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b332:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b336:	f1b8 0f00 	cmp.w	r8, #0
 800b33a:	d0af      	beq.n	800b29c <_strtod_l+0x95c>
 800b33c:	eeb0 ab48 	vmov.f64	d10, d8
 800b340:	e7ae      	b.n	800b2a0 <_strtod_l+0x960>
 800b342:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b346:	eeb0 8b4a 	vmov.f64	d8, d10
 800b34a:	e7a9      	b.n	800b2a0 <_strtod_l+0x960>
 800b34c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b350:	e7a6      	b.n	800b2a0 <_strtod_l+0x960>
 800b352:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b356:	9b06      	ldr	r3, [sp, #24]
 800b358:	46d9      	mov	r9, fp
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1ca      	bne.n	800b2f4 <_strtod_l+0x9b4>
 800b35e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b362:	0d1b      	lsrs	r3, r3, #20
 800b364:	051b      	lsls	r3, r3, #20
 800b366:	429f      	cmp	r7, r3
 800b368:	d1c4      	bne.n	800b2f4 <_strtod_l+0x9b4>
 800b36a:	ec51 0b18 	vmov	r0, r1, d8
 800b36e:	f7f5 f9e3 	bl	8000738 <__aeabi_d2lz>
 800b372:	f7f5 f99b 	bl	80006ac <__aeabi_l2d>
 800b376:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b37a:	ec41 0b17 	vmov	d7, r0, r1
 800b37e:	ea49 090a 	orr.w	r9, r9, sl
 800b382:	ea59 0908 	orrs.w	r9, r9, r8
 800b386:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b38a:	d03c      	beq.n	800b406 <_strtod_l+0xac6>
 800b38c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b440 <_strtod_l+0xb00>
 800b390:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b398:	f53f aced 	bmi.w	800ad76 <_strtod_l+0x436>
 800b39c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b448 <_strtod_l+0xb08>
 800b3a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	dda4      	ble.n	800b2f4 <_strtod_l+0x9b4>
 800b3aa:	e4e4      	b.n	800ad76 <_strtod_l+0x436>
 800b3ac:	9906      	ldr	r1, [sp, #24]
 800b3ae:	b1e1      	cbz	r1, 800b3ea <_strtod_l+0xaaa>
 800b3b0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b3b4:	d819      	bhi.n	800b3ea <_strtod_l+0xaaa>
 800b3b6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3be:	d811      	bhi.n	800b3e4 <_strtod_l+0xaa4>
 800b3c0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b3c4:	ee18 3a10 	vmov	r3, s16
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	bf38      	it	cc
 800b3cc:	2301      	movcc	r3, #1
 800b3ce:	ee08 3a10 	vmov	s16, r3
 800b3d2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b3d6:	f1b8 0f00 	cmp.w	r8, #0
 800b3da:	d111      	bne.n	800b400 <_strtod_l+0xac0>
 800b3dc:	eeb1 7b48 	vneg.f64	d7, d8
 800b3e0:	ec53 2b17 	vmov	r2, r3, d7
 800b3e4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b3e8:	1bcb      	subs	r3, r1, r7
 800b3ea:	eeb0 0b49 	vmov.f64	d0, d9
 800b3ee:	ec43 2b1a 	vmov	d10, r2, r3
 800b3f2:	f7ff f94f 	bl	800a694 <__ulp>
 800b3f6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b3fa:	ec5b ab19 	vmov	sl, fp, d9
 800b3fe:	e7aa      	b.n	800b356 <_strtod_l+0xa16>
 800b400:	eeb0 7b48 	vmov.f64	d7, d8
 800b404:	e7ec      	b.n	800b3e0 <_strtod_l+0xaa0>
 800b406:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800b450 <_strtod_l+0xb10>
 800b40a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b40e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b412:	f57f af6f 	bpl.w	800b2f4 <_strtod_l+0x9b4>
 800b416:	e4ae      	b.n	800ad76 <_strtod_l+0x436>
 800b418:	2300      	movs	r3, #0
 800b41a:	9308      	str	r3, [sp, #32]
 800b41c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b41e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	f7ff bacc 	b.w	800a9be <_strtod_l+0x7e>
 800b426:	2a65      	cmp	r2, #101	@ 0x65
 800b428:	f43f abbc 	beq.w	800aba4 <_strtod_l+0x264>
 800b42c:	2a45      	cmp	r2, #69	@ 0x45
 800b42e:	f43f abb9 	beq.w	800aba4 <_strtod_l+0x264>
 800b432:	2301      	movs	r3, #1
 800b434:	9306      	str	r3, [sp, #24]
 800b436:	f7ff bbf0 	b.w	800ac1a <_strtod_l+0x2da>
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w
 800b440:	94a03595 	.word	0x94a03595
 800b444:	3fdfffff 	.word	0x3fdfffff
 800b448:	35afe535 	.word	0x35afe535
 800b44c:	3fe00000 	.word	0x3fe00000
 800b450:	94a03595 	.word	0x94a03595
 800b454:	3fcfffff 	.word	0x3fcfffff
 800b458:	000fffff 	.word	0x000fffff
 800b45c:	7ff00000 	.word	0x7ff00000
 800b460:	7fefffff 	.word	0x7fefffff
 800b464:	7fe00000 	.word	0x7fe00000
 800b468:	7c9fffff 	.word	0x7c9fffff

0800b46c <_strtod_r>:
 800b46c:	4b01      	ldr	r3, [pc, #4]	@ (800b474 <_strtod_r+0x8>)
 800b46e:	f7ff ba67 	b.w	800a940 <_strtod_l>
 800b472:	bf00      	nop
 800b474:	2400010c 	.word	0x2400010c

0800b478 <_strtol_l.constprop.0>:
 800b478:	2b24      	cmp	r3, #36	@ 0x24
 800b47a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47e:	4686      	mov	lr, r0
 800b480:	4690      	mov	r8, r2
 800b482:	d801      	bhi.n	800b488 <_strtol_l.constprop.0+0x10>
 800b484:	2b01      	cmp	r3, #1
 800b486:	d106      	bne.n	800b496 <_strtol_l.constprop.0+0x1e>
 800b488:	f7fd fe7e 	bl	8009188 <__errno>
 800b48c:	2316      	movs	r3, #22
 800b48e:	6003      	str	r3, [r0, #0]
 800b490:	2000      	movs	r0, #0
 800b492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b496:	4834      	ldr	r0, [pc, #208]	@ (800b568 <_strtol_l.constprop.0+0xf0>)
 800b498:	460d      	mov	r5, r1
 800b49a:	462a      	mov	r2, r5
 800b49c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4a0:	5d06      	ldrb	r6, [r0, r4]
 800b4a2:	f016 0608 	ands.w	r6, r6, #8
 800b4a6:	d1f8      	bne.n	800b49a <_strtol_l.constprop.0+0x22>
 800b4a8:	2c2d      	cmp	r4, #45	@ 0x2d
 800b4aa:	d12d      	bne.n	800b508 <_strtol_l.constprop.0+0x90>
 800b4ac:	782c      	ldrb	r4, [r5, #0]
 800b4ae:	2601      	movs	r6, #1
 800b4b0:	1c95      	adds	r5, r2, #2
 800b4b2:	f033 0210 	bics.w	r2, r3, #16
 800b4b6:	d109      	bne.n	800b4cc <_strtol_l.constprop.0+0x54>
 800b4b8:	2c30      	cmp	r4, #48	@ 0x30
 800b4ba:	d12a      	bne.n	800b512 <_strtol_l.constprop.0+0x9a>
 800b4bc:	782a      	ldrb	r2, [r5, #0]
 800b4be:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b4c2:	2a58      	cmp	r2, #88	@ 0x58
 800b4c4:	d125      	bne.n	800b512 <_strtol_l.constprop.0+0x9a>
 800b4c6:	786c      	ldrb	r4, [r5, #1]
 800b4c8:	2310      	movs	r3, #16
 800b4ca:	3502      	adds	r5, #2
 800b4cc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b4d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	fbbc f9f3 	udiv	r9, ip, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	fb03 ca19 	mls	sl, r3, r9, ip
 800b4e0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b4e4:	2f09      	cmp	r7, #9
 800b4e6:	d81b      	bhi.n	800b520 <_strtol_l.constprop.0+0xa8>
 800b4e8:	463c      	mov	r4, r7
 800b4ea:	42a3      	cmp	r3, r4
 800b4ec:	dd27      	ble.n	800b53e <_strtol_l.constprop.0+0xc6>
 800b4ee:	1c57      	adds	r7, r2, #1
 800b4f0:	d007      	beq.n	800b502 <_strtol_l.constprop.0+0x8a>
 800b4f2:	4581      	cmp	r9, r0
 800b4f4:	d320      	bcc.n	800b538 <_strtol_l.constprop.0+0xc0>
 800b4f6:	d101      	bne.n	800b4fc <_strtol_l.constprop.0+0x84>
 800b4f8:	45a2      	cmp	sl, r4
 800b4fa:	db1d      	blt.n	800b538 <_strtol_l.constprop.0+0xc0>
 800b4fc:	fb00 4003 	mla	r0, r0, r3, r4
 800b500:	2201      	movs	r2, #1
 800b502:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b506:	e7eb      	b.n	800b4e0 <_strtol_l.constprop.0+0x68>
 800b508:	2c2b      	cmp	r4, #43	@ 0x2b
 800b50a:	bf04      	itt	eq
 800b50c:	782c      	ldrbeq	r4, [r5, #0]
 800b50e:	1c95      	addeq	r5, r2, #2
 800b510:	e7cf      	b.n	800b4b2 <_strtol_l.constprop.0+0x3a>
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1da      	bne.n	800b4cc <_strtol_l.constprop.0+0x54>
 800b516:	2c30      	cmp	r4, #48	@ 0x30
 800b518:	bf0c      	ite	eq
 800b51a:	2308      	moveq	r3, #8
 800b51c:	230a      	movne	r3, #10
 800b51e:	e7d5      	b.n	800b4cc <_strtol_l.constprop.0+0x54>
 800b520:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b524:	2f19      	cmp	r7, #25
 800b526:	d801      	bhi.n	800b52c <_strtol_l.constprop.0+0xb4>
 800b528:	3c37      	subs	r4, #55	@ 0x37
 800b52a:	e7de      	b.n	800b4ea <_strtol_l.constprop.0+0x72>
 800b52c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b530:	2f19      	cmp	r7, #25
 800b532:	d804      	bhi.n	800b53e <_strtol_l.constprop.0+0xc6>
 800b534:	3c57      	subs	r4, #87	@ 0x57
 800b536:	e7d8      	b.n	800b4ea <_strtol_l.constprop.0+0x72>
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	e7e1      	b.n	800b502 <_strtol_l.constprop.0+0x8a>
 800b53e:	1c53      	adds	r3, r2, #1
 800b540:	d108      	bne.n	800b554 <_strtol_l.constprop.0+0xdc>
 800b542:	2322      	movs	r3, #34	@ 0x22
 800b544:	f8ce 3000 	str.w	r3, [lr]
 800b548:	4660      	mov	r0, ip
 800b54a:	f1b8 0f00 	cmp.w	r8, #0
 800b54e:	d0a0      	beq.n	800b492 <_strtol_l.constprop.0+0x1a>
 800b550:	1e69      	subs	r1, r5, #1
 800b552:	e006      	b.n	800b562 <_strtol_l.constprop.0+0xea>
 800b554:	b106      	cbz	r6, 800b558 <_strtol_l.constprop.0+0xe0>
 800b556:	4240      	negs	r0, r0
 800b558:	f1b8 0f00 	cmp.w	r8, #0
 800b55c:	d099      	beq.n	800b492 <_strtol_l.constprop.0+0x1a>
 800b55e:	2a00      	cmp	r2, #0
 800b560:	d1f6      	bne.n	800b550 <_strtol_l.constprop.0+0xd8>
 800b562:	f8c8 1000 	str.w	r1, [r8]
 800b566:	e794      	b.n	800b492 <_strtol_l.constprop.0+0x1a>
 800b568:	0800cc41 	.word	0x0800cc41

0800b56c <_strtol_r>:
 800b56c:	f7ff bf84 	b.w	800b478 <_strtol_l.constprop.0>

0800b570 <__ssputs_r>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	688e      	ldr	r6, [r1, #8]
 800b576:	461f      	mov	r7, r3
 800b578:	42be      	cmp	r6, r7
 800b57a:	680b      	ldr	r3, [r1, #0]
 800b57c:	4682      	mov	sl, r0
 800b57e:	460c      	mov	r4, r1
 800b580:	4690      	mov	r8, r2
 800b582:	d82d      	bhi.n	800b5e0 <__ssputs_r+0x70>
 800b584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b588:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b58c:	d026      	beq.n	800b5dc <__ssputs_r+0x6c>
 800b58e:	6965      	ldr	r5, [r4, #20]
 800b590:	6909      	ldr	r1, [r1, #16]
 800b592:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b596:	eba3 0901 	sub.w	r9, r3, r1
 800b59a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b59e:	1c7b      	adds	r3, r7, #1
 800b5a0:	444b      	add	r3, r9
 800b5a2:	106d      	asrs	r5, r5, #1
 800b5a4:	429d      	cmp	r5, r3
 800b5a6:	bf38      	it	cc
 800b5a8:	461d      	movcc	r5, r3
 800b5aa:	0553      	lsls	r3, r2, #21
 800b5ac:	d527      	bpl.n	800b5fe <__ssputs_r+0x8e>
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7fe fc70 	bl	8009e94 <_malloc_r>
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	b360      	cbz	r0, 800b612 <__ssputs_r+0xa2>
 800b5b8:	6921      	ldr	r1, [r4, #16]
 800b5ba:	464a      	mov	r2, r9
 800b5bc:	f000 fa18 	bl	800b9f0 <memcpy>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b5c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	6126      	str	r6, [r4, #16]
 800b5ce:	6165      	str	r5, [r4, #20]
 800b5d0:	444e      	add	r6, r9
 800b5d2:	eba5 0509 	sub.w	r5, r5, r9
 800b5d6:	6026      	str	r6, [r4, #0]
 800b5d8:	60a5      	str	r5, [r4, #8]
 800b5da:	463e      	mov	r6, r7
 800b5dc:	42be      	cmp	r6, r7
 800b5de:	d900      	bls.n	800b5e2 <__ssputs_r+0x72>
 800b5e0:	463e      	mov	r6, r7
 800b5e2:	6820      	ldr	r0, [r4, #0]
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	4641      	mov	r1, r8
 800b5e8:	f000 f9c6 	bl	800b978 <memmove>
 800b5ec:	68a3      	ldr	r3, [r4, #8]
 800b5ee:	1b9b      	subs	r3, r3, r6
 800b5f0:	60a3      	str	r3, [r4, #8]
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	4433      	add	r3, r6
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fe:	462a      	mov	r2, r5
 800b600:	f000 fd8b 	bl	800c11a <_realloc_r>
 800b604:	4606      	mov	r6, r0
 800b606:	2800      	cmp	r0, #0
 800b608:	d1e0      	bne.n	800b5cc <__ssputs_r+0x5c>
 800b60a:	6921      	ldr	r1, [r4, #16]
 800b60c:	4650      	mov	r0, sl
 800b60e:	f7fe fbcd 	bl	8009dac <_free_r>
 800b612:	230c      	movs	r3, #12
 800b614:	f8ca 3000 	str.w	r3, [sl]
 800b618:	89a3      	ldrh	r3, [r4, #12]
 800b61a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b61e:	81a3      	strh	r3, [r4, #12]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	e7e9      	b.n	800b5fa <__ssputs_r+0x8a>
	...

0800b628 <_svfiprintf_r>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	4698      	mov	r8, r3
 800b62e:	898b      	ldrh	r3, [r1, #12]
 800b630:	061b      	lsls	r3, r3, #24
 800b632:	b09d      	sub	sp, #116	@ 0x74
 800b634:	4607      	mov	r7, r0
 800b636:	460d      	mov	r5, r1
 800b638:	4614      	mov	r4, r2
 800b63a:	d510      	bpl.n	800b65e <_svfiprintf_r+0x36>
 800b63c:	690b      	ldr	r3, [r1, #16]
 800b63e:	b973      	cbnz	r3, 800b65e <_svfiprintf_r+0x36>
 800b640:	2140      	movs	r1, #64	@ 0x40
 800b642:	f7fe fc27 	bl	8009e94 <_malloc_r>
 800b646:	6028      	str	r0, [r5, #0]
 800b648:	6128      	str	r0, [r5, #16]
 800b64a:	b930      	cbnz	r0, 800b65a <_svfiprintf_r+0x32>
 800b64c:	230c      	movs	r3, #12
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	b01d      	add	sp, #116	@ 0x74
 800b656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65a:	2340      	movs	r3, #64	@ 0x40
 800b65c:	616b      	str	r3, [r5, #20]
 800b65e:	2300      	movs	r3, #0
 800b660:	9309      	str	r3, [sp, #36]	@ 0x24
 800b662:	2320      	movs	r3, #32
 800b664:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b668:	f8cd 800c 	str.w	r8, [sp, #12]
 800b66c:	2330      	movs	r3, #48	@ 0x30
 800b66e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b80c <_svfiprintf_r+0x1e4>
 800b672:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b676:	f04f 0901 	mov.w	r9, #1
 800b67a:	4623      	mov	r3, r4
 800b67c:	469a      	mov	sl, r3
 800b67e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b682:	b10a      	cbz	r2, 800b688 <_svfiprintf_r+0x60>
 800b684:	2a25      	cmp	r2, #37	@ 0x25
 800b686:	d1f9      	bne.n	800b67c <_svfiprintf_r+0x54>
 800b688:	ebba 0b04 	subs.w	fp, sl, r4
 800b68c:	d00b      	beq.n	800b6a6 <_svfiprintf_r+0x7e>
 800b68e:	465b      	mov	r3, fp
 800b690:	4622      	mov	r2, r4
 800b692:	4629      	mov	r1, r5
 800b694:	4638      	mov	r0, r7
 800b696:	f7ff ff6b 	bl	800b570 <__ssputs_r>
 800b69a:	3001      	adds	r0, #1
 800b69c:	f000 80a7 	beq.w	800b7ee <_svfiprintf_r+0x1c6>
 800b6a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6a2:	445a      	add	r2, fp
 800b6a4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 809f 	beq.w	800b7ee <_svfiprintf_r+0x1c6>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6ba:	f10a 0a01 	add.w	sl, sl, #1
 800b6be:	9304      	str	r3, [sp, #16]
 800b6c0:	9307      	str	r3, [sp, #28]
 800b6c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6c8:	4654      	mov	r4, sl
 800b6ca:	2205      	movs	r2, #5
 800b6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d0:	484e      	ldr	r0, [pc, #312]	@ (800b80c <_svfiprintf_r+0x1e4>)
 800b6d2:	f7f4 fe05 	bl	80002e0 <memchr>
 800b6d6:	9a04      	ldr	r2, [sp, #16]
 800b6d8:	b9d8      	cbnz	r0, 800b712 <_svfiprintf_r+0xea>
 800b6da:	06d0      	lsls	r0, r2, #27
 800b6dc:	bf44      	itt	mi
 800b6de:	2320      	movmi	r3, #32
 800b6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6e4:	0711      	lsls	r1, r2, #28
 800b6e6:	bf44      	itt	mi
 800b6e8:	232b      	movmi	r3, #43	@ 0x2b
 800b6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b6f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6f4:	d015      	beq.n	800b722 <_svfiprintf_r+0xfa>
 800b6f6:	9a07      	ldr	r2, [sp, #28]
 800b6f8:	4654      	mov	r4, sl
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	f04f 0c0a 	mov.w	ip, #10
 800b700:	4621      	mov	r1, r4
 800b702:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b706:	3b30      	subs	r3, #48	@ 0x30
 800b708:	2b09      	cmp	r3, #9
 800b70a:	d94b      	bls.n	800b7a4 <_svfiprintf_r+0x17c>
 800b70c:	b1b0      	cbz	r0, 800b73c <_svfiprintf_r+0x114>
 800b70e:	9207      	str	r2, [sp, #28]
 800b710:	e014      	b.n	800b73c <_svfiprintf_r+0x114>
 800b712:	eba0 0308 	sub.w	r3, r0, r8
 800b716:	fa09 f303 	lsl.w	r3, r9, r3
 800b71a:	4313      	orrs	r3, r2
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	46a2      	mov	sl, r4
 800b720:	e7d2      	b.n	800b6c8 <_svfiprintf_r+0xa0>
 800b722:	9b03      	ldr	r3, [sp, #12]
 800b724:	1d19      	adds	r1, r3, #4
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	9103      	str	r1, [sp, #12]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	bfbb      	ittet	lt
 800b72e:	425b      	neglt	r3, r3
 800b730:	f042 0202 	orrlt.w	r2, r2, #2
 800b734:	9307      	strge	r3, [sp, #28]
 800b736:	9307      	strlt	r3, [sp, #28]
 800b738:	bfb8      	it	lt
 800b73a:	9204      	strlt	r2, [sp, #16]
 800b73c:	7823      	ldrb	r3, [r4, #0]
 800b73e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b740:	d10a      	bne.n	800b758 <_svfiprintf_r+0x130>
 800b742:	7863      	ldrb	r3, [r4, #1]
 800b744:	2b2a      	cmp	r3, #42	@ 0x2a
 800b746:	d132      	bne.n	800b7ae <_svfiprintf_r+0x186>
 800b748:	9b03      	ldr	r3, [sp, #12]
 800b74a:	1d1a      	adds	r2, r3, #4
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	9203      	str	r2, [sp, #12]
 800b750:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b754:	3402      	adds	r4, #2
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b81c <_svfiprintf_r+0x1f4>
 800b75c:	7821      	ldrb	r1, [r4, #0]
 800b75e:	2203      	movs	r2, #3
 800b760:	4650      	mov	r0, sl
 800b762:	f7f4 fdbd 	bl	80002e0 <memchr>
 800b766:	b138      	cbz	r0, 800b778 <_svfiprintf_r+0x150>
 800b768:	9b04      	ldr	r3, [sp, #16]
 800b76a:	eba0 000a 	sub.w	r0, r0, sl
 800b76e:	2240      	movs	r2, #64	@ 0x40
 800b770:	4082      	lsls	r2, r0
 800b772:	4313      	orrs	r3, r2
 800b774:	3401      	adds	r4, #1
 800b776:	9304      	str	r3, [sp, #16]
 800b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77c:	4824      	ldr	r0, [pc, #144]	@ (800b810 <_svfiprintf_r+0x1e8>)
 800b77e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b782:	2206      	movs	r2, #6
 800b784:	f7f4 fdac 	bl	80002e0 <memchr>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d036      	beq.n	800b7fa <_svfiprintf_r+0x1d2>
 800b78c:	4b21      	ldr	r3, [pc, #132]	@ (800b814 <_svfiprintf_r+0x1ec>)
 800b78e:	bb1b      	cbnz	r3, 800b7d8 <_svfiprintf_r+0x1b0>
 800b790:	9b03      	ldr	r3, [sp, #12]
 800b792:	3307      	adds	r3, #7
 800b794:	f023 0307 	bic.w	r3, r3, #7
 800b798:	3308      	adds	r3, #8
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79e:	4433      	add	r3, r6
 800b7a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7a2:	e76a      	b.n	800b67a <_svfiprintf_r+0x52>
 800b7a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	e7a8      	b.n	800b700 <_svfiprintf_r+0xd8>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	3401      	adds	r4, #1
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	f04f 0c0a 	mov.w	ip, #10
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7c0:	3a30      	subs	r2, #48	@ 0x30
 800b7c2:	2a09      	cmp	r2, #9
 800b7c4:	d903      	bls.n	800b7ce <_svfiprintf_r+0x1a6>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d0c6      	beq.n	800b758 <_svfiprintf_r+0x130>
 800b7ca:	9105      	str	r1, [sp, #20]
 800b7cc:	e7c4      	b.n	800b758 <_svfiprintf_r+0x130>
 800b7ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e7f0      	b.n	800b7ba <_svfiprintf_r+0x192>
 800b7d8:	ab03      	add	r3, sp, #12
 800b7da:	9300      	str	r3, [sp, #0]
 800b7dc:	462a      	mov	r2, r5
 800b7de:	4b0e      	ldr	r3, [pc, #56]	@ (800b818 <_svfiprintf_r+0x1f0>)
 800b7e0:	a904      	add	r1, sp, #16
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	f7fc fd70 	bl	80082c8 <_printf_float>
 800b7e8:	1c42      	adds	r2, r0, #1
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	d1d6      	bne.n	800b79c <_svfiprintf_r+0x174>
 800b7ee:	89ab      	ldrh	r3, [r5, #12]
 800b7f0:	065b      	lsls	r3, r3, #25
 800b7f2:	f53f af2d 	bmi.w	800b650 <_svfiprintf_r+0x28>
 800b7f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7f8:	e72c      	b.n	800b654 <_svfiprintf_r+0x2c>
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	462a      	mov	r2, r5
 800b800:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <_svfiprintf_r+0x1f0>)
 800b802:	a904      	add	r1, sp, #16
 800b804:	4638      	mov	r0, r7
 800b806:	f7fc ffe7 	bl	80087d8 <_printf_i>
 800b80a:	e7ed      	b.n	800b7e8 <_svfiprintf_r+0x1c0>
 800b80c:	0800cd41 	.word	0x0800cd41
 800b810:	0800cd4b 	.word	0x0800cd4b
 800b814:	080082c9 	.word	0x080082c9
 800b818:	0800b571 	.word	0x0800b571
 800b81c:	0800cd47 	.word	0x0800cd47

0800b820 <__sflush_r>:
 800b820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	0716      	lsls	r6, r2, #28
 800b82a:	4605      	mov	r5, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	d454      	bmi.n	800b8da <__sflush_r+0xba>
 800b830:	684b      	ldr	r3, [r1, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	dc02      	bgt.n	800b83c <__sflush_r+0x1c>
 800b836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dd48      	ble.n	800b8ce <__sflush_r+0xae>
 800b83c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b83e:	2e00      	cmp	r6, #0
 800b840:	d045      	beq.n	800b8ce <__sflush_r+0xae>
 800b842:	2300      	movs	r3, #0
 800b844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b848:	682f      	ldr	r7, [r5, #0]
 800b84a:	6a21      	ldr	r1, [r4, #32]
 800b84c:	602b      	str	r3, [r5, #0]
 800b84e:	d030      	beq.n	800b8b2 <__sflush_r+0x92>
 800b850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b852:	89a3      	ldrh	r3, [r4, #12]
 800b854:	0759      	lsls	r1, r3, #29
 800b856:	d505      	bpl.n	800b864 <__sflush_r+0x44>
 800b858:	6863      	ldr	r3, [r4, #4]
 800b85a:	1ad2      	subs	r2, r2, r3
 800b85c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b85e:	b10b      	cbz	r3, 800b864 <__sflush_r+0x44>
 800b860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	2300      	movs	r3, #0
 800b866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b868:	6a21      	ldr	r1, [r4, #32]
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b0      	blx	r6
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	d106      	bne.n	800b882 <__sflush_r+0x62>
 800b874:	6829      	ldr	r1, [r5, #0]
 800b876:	291d      	cmp	r1, #29
 800b878:	d82b      	bhi.n	800b8d2 <__sflush_r+0xb2>
 800b87a:	4a2a      	ldr	r2, [pc, #168]	@ (800b924 <__sflush_r+0x104>)
 800b87c:	410a      	asrs	r2, r1
 800b87e:	07d6      	lsls	r6, r2, #31
 800b880:	d427      	bmi.n	800b8d2 <__sflush_r+0xb2>
 800b882:	2200      	movs	r2, #0
 800b884:	6062      	str	r2, [r4, #4]
 800b886:	04d9      	lsls	r1, r3, #19
 800b888:	6922      	ldr	r2, [r4, #16]
 800b88a:	6022      	str	r2, [r4, #0]
 800b88c:	d504      	bpl.n	800b898 <__sflush_r+0x78>
 800b88e:	1c42      	adds	r2, r0, #1
 800b890:	d101      	bne.n	800b896 <__sflush_r+0x76>
 800b892:	682b      	ldr	r3, [r5, #0]
 800b894:	b903      	cbnz	r3, 800b898 <__sflush_r+0x78>
 800b896:	6560      	str	r0, [r4, #84]	@ 0x54
 800b898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b89a:	602f      	str	r7, [r5, #0]
 800b89c:	b1b9      	cbz	r1, 800b8ce <__sflush_r+0xae>
 800b89e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8a2:	4299      	cmp	r1, r3
 800b8a4:	d002      	beq.n	800b8ac <__sflush_r+0x8c>
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	f7fe fa80 	bl	8009dac <_free_r>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8b0:	e00d      	b.n	800b8ce <__sflush_r+0xae>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	47b0      	blx	r6
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	1c50      	adds	r0, r2, #1
 800b8bc:	d1c9      	bne.n	800b852 <__sflush_r+0x32>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0c6      	beq.n	800b852 <__sflush_r+0x32>
 800b8c4:	2b1d      	cmp	r3, #29
 800b8c6:	d001      	beq.n	800b8cc <__sflush_r+0xac>
 800b8c8:	2b16      	cmp	r3, #22
 800b8ca:	d11e      	bne.n	800b90a <__sflush_r+0xea>
 800b8cc:	602f      	str	r7, [r5, #0]
 800b8ce:	2000      	movs	r0, #0
 800b8d0:	e022      	b.n	800b918 <__sflush_r+0xf8>
 800b8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8d6:	b21b      	sxth	r3, r3
 800b8d8:	e01b      	b.n	800b912 <__sflush_r+0xf2>
 800b8da:	690f      	ldr	r7, [r1, #16]
 800b8dc:	2f00      	cmp	r7, #0
 800b8de:	d0f6      	beq.n	800b8ce <__sflush_r+0xae>
 800b8e0:	0793      	lsls	r3, r2, #30
 800b8e2:	680e      	ldr	r6, [r1, #0]
 800b8e4:	bf08      	it	eq
 800b8e6:	694b      	ldreq	r3, [r1, #20]
 800b8e8:	600f      	str	r7, [r1, #0]
 800b8ea:	bf18      	it	ne
 800b8ec:	2300      	movne	r3, #0
 800b8ee:	eba6 0807 	sub.w	r8, r6, r7
 800b8f2:	608b      	str	r3, [r1, #8]
 800b8f4:	f1b8 0f00 	cmp.w	r8, #0
 800b8f8:	dde9      	ble.n	800b8ce <__sflush_r+0xae>
 800b8fa:	6a21      	ldr	r1, [r4, #32]
 800b8fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8fe:	4643      	mov	r3, r8
 800b900:	463a      	mov	r2, r7
 800b902:	4628      	mov	r0, r5
 800b904:	47b0      	blx	r6
 800b906:	2800      	cmp	r0, #0
 800b908:	dc08      	bgt.n	800b91c <__sflush_r+0xfc>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	f04f 30ff 	mov.w	r0, #4294967295
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	4407      	add	r7, r0
 800b91e:	eba8 0800 	sub.w	r8, r8, r0
 800b922:	e7e7      	b.n	800b8f4 <__sflush_r+0xd4>
 800b924:	dfbffffe 	.word	0xdfbffffe

0800b928 <_fflush_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	690b      	ldr	r3, [r1, #16]
 800b92c:	4605      	mov	r5, r0
 800b92e:	460c      	mov	r4, r1
 800b930:	b913      	cbnz	r3, 800b938 <_fflush_r+0x10>
 800b932:	2500      	movs	r5, #0
 800b934:	4628      	mov	r0, r5
 800b936:	bd38      	pop	{r3, r4, r5, pc}
 800b938:	b118      	cbz	r0, 800b942 <_fflush_r+0x1a>
 800b93a:	6a03      	ldr	r3, [r0, #32]
 800b93c:	b90b      	cbnz	r3, 800b942 <_fflush_r+0x1a>
 800b93e:	f7fd fb03 	bl	8008f48 <__sinit>
 800b942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d0f3      	beq.n	800b932 <_fflush_r+0xa>
 800b94a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b94c:	07d0      	lsls	r0, r2, #31
 800b94e:	d404      	bmi.n	800b95a <_fflush_r+0x32>
 800b950:	0599      	lsls	r1, r3, #22
 800b952:	d402      	bmi.n	800b95a <_fflush_r+0x32>
 800b954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b956:	f7fd fc42 	bl	80091de <__retarget_lock_acquire_recursive>
 800b95a:	4628      	mov	r0, r5
 800b95c:	4621      	mov	r1, r4
 800b95e:	f7ff ff5f 	bl	800b820 <__sflush_r>
 800b962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b964:	07da      	lsls	r2, r3, #31
 800b966:	4605      	mov	r5, r0
 800b968:	d4e4      	bmi.n	800b934 <_fflush_r+0xc>
 800b96a:	89a3      	ldrh	r3, [r4, #12]
 800b96c:	059b      	lsls	r3, r3, #22
 800b96e:	d4e1      	bmi.n	800b934 <_fflush_r+0xc>
 800b970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b972:	f7fd fc35 	bl	80091e0 <__retarget_lock_release_recursive>
 800b976:	e7dd      	b.n	800b934 <_fflush_r+0xc>

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4402      	add	r2, r0
 800b99a:	4601      	mov	r1, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <strncmp>:
 800b9ac:	b510      	push	{r4, lr}
 800b9ae:	b16a      	cbz	r2, 800b9cc <strncmp+0x20>
 800b9b0:	3901      	subs	r1, #1
 800b9b2:	1884      	adds	r4, r0, r2
 800b9b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d103      	bne.n	800b9c8 <strncmp+0x1c>
 800b9c0:	42a0      	cmp	r0, r4
 800b9c2:	d001      	beq.n	800b9c8 <strncmp+0x1c>
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d1f5      	bne.n	800b9b4 <strncmp+0x8>
 800b9c8:	1ad0      	subs	r0, r2, r3
 800b9ca:	bd10      	pop	{r4, pc}
 800b9cc:	4610      	mov	r0, r2
 800b9ce:	e7fc      	b.n	800b9ca <strncmp+0x1e>

0800b9d0 <_sbrk_r>:
 800b9d0:	b538      	push	{r3, r4, r5, lr}
 800b9d2:	4d06      	ldr	r5, [pc, #24]	@ (800b9ec <_sbrk_r+0x1c>)
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4604      	mov	r4, r0
 800b9d8:	4608      	mov	r0, r1
 800b9da:	602b      	str	r3, [r5, #0]
 800b9dc:	f7f6 fbe6 	bl	80021ac <_sbrk>
 800b9e0:	1c43      	adds	r3, r0, #1
 800b9e2:	d102      	bne.n	800b9ea <_sbrk_r+0x1a>
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b103      	cbz	r3, 800b9ea <_sbrk_r+0x1a>
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	bd38      	pop	{r3, r4, r5, pc}
 800b9ec:	24000664 	.word	0x24000664

0800b9f0 <memcpy>:
 800b9f0:	440a      	add	r2, r1
 800b9f2:	4291      	cmp	r1, r2
 800b9f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9f8:	d100      	bne.n	800b9fc <memcpy+0xc>
 800b9fa:	4770      	bx	lr
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba06:	4291      	cmp	r1, r2
 800ba08:	d1f9      	bne.n	800b9fe <memcpy+0xe>
 800ba0a:	bd10      	pop	{r4, pc}
 800ba0c:	0000      	movs	r0, r0
	...

0800ba10 <nan>:
 800ba10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ba18 <nan+0x8>
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	7ff80000 	.word	0x7ff80000

0800ba20 <__assert_func>:
 800ba20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba22:	4614      	mov	r4, r2
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b09      	ldr	r3, [pc, #36]	@ (800ba4c <__assert_func+0x2c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	68d8      	ldr	r0, [r3, #12]
 800ba2e:	b954      	cbnz	r4, 800ba46 <__assert_func+0x26>
 800ba30:	4b07      	ldr	r3, [pc, #28]	@ (800ba50 <__assert_func+0x30>)
 800ba32:	461c      	mov	r4, r3
 800ba34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba38:	9100      	str	r1, [sp, #0]
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	4905      	ldr	r1, [pc, #20]	@ (800ba54 <__assert_func+0x34>)
 800ba3e:	f000 fba7 	bl	800c190 <fiprintf>
 800ba42:	f000 fbb7 	bl	800c1b4 <abort>
 800ba46:	4b04      	ldr	r3, [pc, #16]	@ (800ba58 <__assert_func+0x38>)
 800ba48:	e7f4      	b.n	800ba34 <__assert_func+0x14>
 800ba4a:	bf00      	nop
 800ba4c:	240000bc 	.word	0x240000bc
 800ba50:	0800cd95 	.word	0x0800cd95
 800ba54:	0800cd67 	.word	0x0800cd67
 800ba58:	0800cd5a 	.word	0x0800cd5a

0800ba5c <_calloc_r>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	fba1 5402 	umull	r5, r4, r1, r2
 800ba62:	b93c      	cbnz	r4, 800ba74 <_calloc_r+0x18>
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7fe fa15 	bl	8009e94 <_malloc_r>
 800ba6a:	4606      	mov	r6, r0
 800ba6c:	b928      	cbnz	r0, 800ba7a <_calloc_r+0x1e>
 800ba6e:	2600      	movs	r6, #0
 800ba70:	4630      	mov	r0, r6
 800ba72:	bd70      	pop	{r4, r5, r6, pc}
 800ba74:	220c      	movs	r2, #12
 800ba76:	6002      	str	r2, [r0, #0]
 800ba78:	e7f9      	b.n	800ba6e <_calloc_r+0x12>
 800ba7a:	462a      	mov	r2, r5
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f7fd fb30 	bl	80090e2 <memset>
 800ba82:	e7f5      	b.n	800ba70 <_calloc_r+0x14>

0800ba84 <rshift>:
 800ba84:	6903      	ldr	r3, [r0, #16]
 800ba86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba92:	f100 0414 	add.w	r4, r0, #20
 800ba96:	dd45      	ble.n	800bb24 <rshift+0xa0>
 800ba98:	f011 011f 	ands.w	r1, r1, #31
 800ba9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800baa0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800baa4:	d10c      	bne.n	800bac0 <rshift+0x3c>
 800baa6:	f100 0710 	add.w	r7, r0, #16
 800baaa:	4629      	mov	r1, r5
 800baac:	42b1      	cmp	r1, r6
 800baae:	d334      	bcc.n	800bb1a <rshift+0x96>
 800bab0:	1a9b      	subs	r3, r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	1eea      	subs	r2, r5, #3
 800bab6:	4296      	cmp	r6, r2
 800bab8:	bf38      	it	cc
 800baba:	2300      	movcc	r3, #0
 800babc:	4423      	add	r3, r4
 800babe:	e015      	b.n	800baec <rshift+0x68>
 800bac0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bac4:	f1c1 0820 	rsb	r8, r1, #32
 800bac8:	40cf      	lsrs	r7, r1
 800baca:	f105 0e04 	add.w	lr, r5, #4
 800bace:	46a1      	mov	r9, r4
 800bad0:	4576      	cmp	r6, lr
 800bad2:	46f4      	mov	ip, lr
 800bad4:	d815      	bhi.n	800bb02 <rshift+0x7e>
 800bad6:	1a9a      	subs	r2, r3, r2
 800bad8:	0092      	lsls	r2, r2, #2
 800bada:	3a04      	subs	r2, #4
 800badc:	3501      	adds	r5, #1
 800bade:	42ae      	cmp	r6, r5
 800bae0:	bf38      	it	cc
 800bae2:	2200      	movcc	r2, #0
 800bae4:	18a3      	adds	r3, r4, r2
 800bae6:	50a7      	str	r7, [r4, r2]
 800bae8:	b107      	cbz	r7, 800baec <rshift+0x68>
 800baea:	3304      	adds	r3, #4
 800baec:	1b1a      	subs	r2, r3, r4
 800baee:	42a3      	cmp	r3, r4
 800baf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800baf4:	bf08      	it	eq
 800baf6:	2300      	moveq	r3, #0
 800baf8:	6102      	str	r2, [r0, #16]
 800bafa:	bf08      	it	eq
 800bafc:	6143      	streq	r3, [r0, #20]
 800bafe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb02:	f8dc c000 	ldr.w	ip, [ip]
 800bb06:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb0a:	ea4c 0707 	orr.w	r7, ip, r7
 800bb0e:	f849 7b04 	str.w	r7, [r9], #4
 800bb12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb16:	40cf      	lsrs	r7, r1
 800bb18:	e7da      	b.n	800bad0 <rshift+0x4c>
 800bb1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb22:	e7c3      	b.n	800baac <rshift+0x28>
 800bb24:	4623      	mov	r3, r4
 800bb26:	e7e1      	b.n	800baec <rshift+0x68>

0800bb28 <__hexdig_fun>:
 800bb28:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bb2c:	2b09      	cmp	r3, #9
 800bb2e:	d802      	bhi.n	800bb36 <__hexdig_fun+0xe>
 800bb30:	3820      	subs	r0, #32
 800bb32:	b2c0      	uxtb	r0, r0
 800bb34:	4770      	bx	lr
 800bb36:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bb3a:	2b05      	cmp	r3, #5
 800bb3c:	d801      	bhi.n	800bb42 <__hexdig_fun+0x1a>
 800bb3e:	3847      	subs	r0, #71	@ 0x47
 800bb40:	e7f7      	b.n	800bb32 <__hexdig_fun+0xa>
 800bb42:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bb46:	2b05      	cmp	r3, #5
 800bb48:	d801      	bhi.n	800bb4e <__hexdig_fun+0x26>
 800bb4a:	3827      	subs	r0, #39	@ 0x27
 800bb4c:	e7f1      	b.n	800bb32 <__hexdig_fun+0xa>
 800bb4e:	2000      	movs	r0, #0
 800bb50:	4770      	bx	lr
	...

0800bb54 <__gethex>:
 800bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb58:	b085      	sub	sp, #20
 800bb5a:	468a      	mov	sl, r1
 800bb5c:	9302      	str	r3, [sp, #8]
 800bb5e:	680b      	ldr	r3, [r1, #0]
 800bb60:	9001      	str	r0, [sp, #4]
 800bb62:	4690      	mov	r8, r2
 800bb64:	1c9c      	adds	r4, r3, #2
 800bb66:	46a1      	mov	r9, r4
 800bb68:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bb6c:	2830      	cmp	r0, #48	@ 0x30
 800bb6e:	d0fa      	beq.n	800bb66 <__gethex+0x12>
 800bb70:	eba9 0303 	sub.w	r3, r9, r3
 800bb74:	f1a3 0b02 	sub.w	fp, r3, #2
 800bb78:	f7ff ffd6 	bl	800bb28 <__hexdig_fun>
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d168      	bne.n	800bc54 <__gethex+0x100>
 800bb82:	49a0      	ldr	r1, [pc, #640]	@ (800be04 <__gethex+0x2b0>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	4648      	mov	r0, r9
 800bb88:	f7ff ff10 	bl	800b9ac <strncmp>
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d167      	bne.n	800bc62 <__gethex+0x10e>
 800bb92:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bb96:	4626      	mov	r6, r4
 800bb98:	f7ff ffc6 	bl	800bb28 <__hexdig_fun>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d062      	beq.n	800bc66 <__gethex+0x112>
 800bba0:	4623      	mov	r3, r4
 800bba2:	7818      	ldrb	r0, [r3, #0]
 800bba4:	2830      	cmp	r0, #48	@ 0x30
 800bba6:	4699      	mov	r9, r3
 800bba8:	f103 0301 	add.w	r3, r3, #1
 800bbac:	d0f9      	beq.n	800bba2 <__gethex+0x4e>
 800bbae:	f7ff ffbb 	bl	800bb28 <__hexdig_fun>
 800bbb2:	fab0 f580 	clz	r5, r0
 800bbb6:	096d      	lsrs	r5, r5, #5
 800bbb8:	f04f 0b01 	mov.w	fp, #1
 800bbbc:	464a      	mov	r2, r9
 800bbbe:	4616      	mov	r6, r2
 800bbc0:	3201      	adds	r2, #1
 800bbc2:	7830      	ldrb	r0, [r6, #0]
 800bbc4:	f7ff ffb0 	bl	800bb28 <__hexdig_fun>
 800bbc8:	2800      	cmp	r0, #0
 800bbca:	d1f8      	bne.n	800bbbe <__gethex+0x6a>
 800bbcc:	498d      	ldr	r1, [pc, #564]	@ (800be04 <__gethex+0x2b0>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f7ff feeb 	bl	800b9ac <strncmp>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d13f      	bne.n	800bc5a <__gethex+0x106>
 800bbda:	b944      	cbnz	r4, 800bbee <__gethex+0x9a>
 800bbdc:	1c74      	adds	r4, r6, #1
 800bbde:	4622      	mov	r2, r4
 800bbe0:	4616      	mov	r6, r2
 800bbe2:	3201      	adds	r2, #1
 800bbe4:	7830      	ldrb	r0, [r6, #0]
 800bbe6:	f7ff ff9f 	bl	800bb28 <__hexdig_fun>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	d1f8      	bne.n	800bbe0 <__gethex+0x8c>
 800bbee:	1ba4      	subs	r4, r4, r6
 800bbf0:	00a7      	lsls	r7, r4, #2
 800bbf2:	7833      	ldrb	r3, [r6, #0]
 800bbf4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bbf8:	2b50      	cmp	r3, #80	@ 0x50
 800bbfa:	d13e      	bne.n	800bc7a <__gethex+0x126>
 800bbfc:	7873      	ldrb	r3, [r6, #1]
 800bbfe:	2b2b      	cmp	r3, #43	@ 0x2b
 800bc00:	d033      	beq.n	800bc6a <__gethex+0x116>
 800bc02:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc04:	d034      	beq.n	800bc70 <__gethex+0x11c>
 800bc06:	1c71      	adds	r1, r6, #1
 800bc08:	2400      	movs	r4, #0
 800bc0a:	7808      	ldrb	r0, [r1, #0]
 800bc0c:	f7ff ff8c 	bl	800bb28 <__hexdig_fun>
 800bc10:	1e43      	subs	r3, r0, #1
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b18      	cmp	r3, #24
 800bc16:	d830      	bhi.n	800bc7a <__gethex+0x126>
 800bc18:	f1a0 0210 	sub.w	r2, r0, #16
 800bc1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc20:	f7ff ff82 	bl	800bb28 <__hexdig_fun>
 800bc24:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc28:	fa5f fc8c 	uxtb.w	ip, ip
 800bc2c:	f1bc 0f18 	cmp.w	ip, #24
 800bc30:	f04f 030a 	mov.w	r3, #10
 800bc34:	d91e      	bls.n	800bc74 <__gethex+0x120>
 800bc36:	b104      	cbz	r4, 800bc3a <__gethex+0xe6>
 800bc38:	4252      	negs	r2, r2
 800bc3a:	4417      	add	r7, r2
 800bc3c:	f8ca 1000 	str.w	r1, [sl]
 800bc40:	b1ed      	cbz	r5, 800bc7e <__gethex+0x12a>
 800bc42:	f1bb 0f00 	cmp.w	fp, #0
 800bc46:	bf0c      	ite	eq
 800bc48:	2506      	moveq	r5, #6
 800bc4a:	2500      	movne	r5, #0
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	b005      	add	sp, #20
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	2500      	movs	r5, #0
 800bc56:	462c      	mov	r4, r5
 800bc58:	e7b0      	b.n	800bbbc <__gethex+0x68>
 800bc5a:	2c00      	cmp	r4, #0
 800bc5c:	d1c7      	bne.n	800bbee <__gethex+0x9a>
 800bc5e:	4627      	mov	r7, r4
 800bc60:	e7c7      	b.n	800bbf2 <__gethex+0x9e>
 800bc62:	464e      	mov	r6, r9
 800bc64:	462f      	mov	r7, r5
 800bc66:	2501      	movs	r5, #1
 800bc68:	e7c3      	b.n	800bbf2 <__gethex+0x9e>
 800bc6a:	2400      	movs	r4, #0
 800bc6c:	1cb1      	adds	r1, r6, #2
 800bc6e:	e7cc      	b.n	800bc0a <__gethex+0xb6>
 800bc70:	2401      	movs	r4, #1
 800bc72:	e7fb      	b.n	800bc6c <__gethex+0x118>
 800bc74:	fb03 0002 	mla	r0, r3, r2, r0
 800bc78:	e7ce      	b.n	800bc18 <__gethex+0xc4>
 800bc7a:	4631      	mov	r1, r6
 800bc7c:	e7de      	b.n	800bc3c <__gethex+0xe8>
 800bc7e:	eba6 0309 	sub.w	r3, r6, r9
 800bc82:	3b01      	subs	r3, #1
 800bc84:	4629      	mov	r1, r5
 800bc86:	2b07      	cmp	r3, #7
 800bc88:	dc0a      	bgt.n	800bca0 <__gethex+0x14c>
 800bc8a:	9801      	ldr	r0, [sp, #4]
 800bc8c:	f7fe f98e 	bl	8009fac <_Balloc>
 800bc90:	4604      	mov	r4, r0
 800bc92:	b940      	cbnz	r0, 800bca6 <__gethex+0x152>
 800bc94:	4b5c      	ldr	r3, [pc, #368]	@ (800be08 <__gethex+0x2b4>)
 800bc96:	4602      	mov	r2, r0
 800bc98:	21e4      	movs	r1, #228	@ 0xe4
 800bc9a:	485c      	ldr	r0, [pc, #368]	@ (800be0c <__gethex+0x2b8>)
 800bc9c:	f7ff fec0 	bl	800ba20 <__assert_func>
 800bca0:	3101      	adds	r1, #1
 800bca2:	105b      	asrs	r3, r3, #1
 800bca4:	e7ef      	b.n	800bc86 <__gethex+0x132>
 800bca6:	f100 0a14 	add.w	sl, r0, #20
 800bcaa:	2300      	movs	r3, #0
 800bcac:	4655      	mov	r5, sl
 800bcae:	469b      	mov	fp, r3
 800bcb0:	45b1      	cmp	r9, r6
 800bcb2:	d337      	bcc.n	800bd24 <__gethex+0x1d0>
 800bcb4:	f845 bb04 	str.w	fp, [r5], #4
 800bcb8:	eba5 050a 	sub.w	r5, r5, sl
 800bcbc:	10ad      	asrs	r5, r5, #2
 800bcbe:	6125      	str	r5, [r4, #16]
 800bcc0:	4658      	mov	r0, fp
 800bcc2:	f7fe fa65 	bl	800a190 <__hi0bits>
 800bcc6:	016d      	lsls	r5, r5, #5
 800bcc8:	f8d8 6000 	ldr.w	r6, [r8]
 800bccc:	1a2d      	subs	r5, r5, r0
 800bcce:	42b5      	cmp	r5, r6
 800bcd0:	dd54      	ble.n	800bd7c <__gethex+0x228>
 800bcd2:	1bad      	subs	r5, r5, r6
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f7fe fdf6 	bl	800a8c8 <__any_on>
 800bcdc:	4681      	mov	r9, r0
 800bcde:	b178      	cbz	r0, 800bd00 <__gethex+0x1ac>
 800bce0:	1e6b      	subs	r3, r5, #1
 800bce2:	1159      	asrs	r1, r3, #5
 800bce4:	f003 021f 	and.w	r2, r3, #31
 800bce8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bcec:	f04f 0901 	mov.w	r9, #1
 800bcf0:	fa09 f202 	lsl.w	r2, r9, r2
 800bcf4:	420a      	tst	r2, r1
 800bcf6:	d003      	beq.n	800bd00 <__gethex+0x1ac>
 800bcf8:	454b      	cmp	r3, r9
 800bcfa:	dc36      	bgt.n	800bd6a <__gethex+0x216>
 800bcfc:	f04f 0902 	mov.w	r9, #2
 800bd00:	4629      	mov	r1, r5
 800bd02:	4620      	mov	r0, r4
 800bd04:	f7ff febe 	bl	800ba84 <rshift>
 800bd08:	442f      	add	r7, r5
 800bd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd0e:	42bb      	cmp	r3, r7
 800bd10:	da42      	bge.n	800bd98 <__gethex+0x244>
 800bd12:	9801      	ldr	r0, [sp, #4]
 800bd14:	4621      	mov	r1, r4
 800bd16:	f7fe f989 	bl	800a02c <_Bfree>
 800bd1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	25a3      	movs	r5, #163	@ 0xa3
 800bd22:	e793      	b.n	800bc4c <__gethex+0xf8>
 800bd24:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bd28:	2a2e      	cmp	r2, #46	@ 0x2e
 800bd2a:	d012      	beq.n	800bd52 <__gethex+0x1fe>
 800bd2c:	2b20      	cmp	r3, #32
 800bd2e:	d104      	bne.n	800bd3a <__gethex+0x1e6>
 800bd30:	f845 bb04 	str.w	fp, [r5], #4
 800bd34:	f04f 0b00 	mov.w	fp, #0
 800bd38:	465b      	mov	r3, fp
 800bd3a:	7830      	ldrb	r0, [r6, #0]
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	f7ff fef3 	bl	800bb28 <__hexdig_fun>
 800bd42:	9b03      	ldr	r3, [sp, #12]
 800bd44:	f000 000f 	and.w	r0, r0, #15
 800bd48:	4098      	lsls	r0, r3
 800bd4a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd4e:	3304      	adds	r3, #4
 800bd50:	e7ae      	b.n	800bcb0 <__gethex+0x15c>
 800bd52:	45b1      	cmp	r9, r6
 800bd54:	d8ea      	bhi.n	800bd2c <__gethex+0x1d8>
 800bd56:	492b      	ldr	r1, [pc, #172]	@ (800be04 <__gethex+0x2b0>)
 800bd58:	9303      	str	r3, [sp, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff fe25 	bl	800b9ac <strncmp>
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d1e1      	bne.n	800bd2c <__gethex+0x1d8>
 800bd68:	e7a2      	b.n	800bcb0 <__gethex+0x15c>
 800bd6a:	1ea9      	subs	r1, r5, #2
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f7fe fdab 	bl	800a8c8 <__any_on>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d0c2      	beq.n	800bcfc <__gethex+0x1a8>
 800bd76:	f04f 0903 	mov.w	r9, #3
 800bd7a:	e7c1      	b.n	800bd00 <__gethex+0x1ac>
 800bd7c:	da09      	bge.n	800bd92 <__gethex+0x23e>
 800bd7e:	1b75      	subs	r5, r6, r5
 800bd80:	4621      	mov	r1, r4
 800bd82:	9801      	ldr	r0, [sp, #4]
 800bd84:	462a      	mov	r2, r5
 800bd86:	f7fe fb69 	bl	800a45c <__lshift>
 800bd8a:	1b7f      	subs	r7, r7, r5
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	f100 0a14 	add.w	sl, r0, #20
 800bd92:	f04f 0900 	mov.w	r9, #0
 800bd96:	e7b8      	b.n	800bd0a <__gethex+0x1b6>
 800bd98:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd9c:	42bd      	cmp	r5, r7
 800bd9e:	dd6f      	ble.n	800be80 <__gethex+0x32c>
 800bda0:	1bed      	subs	r5, r5, r7
 800bda2:	42ae      	cmp	r6, r5
 800bda4:	dc34      	bgt.n	800be10 <__gethex+0x2bc>
 800bda6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdaa:	2b02      	cmp	r3, #2
 800bdac:	d022      	beq.n	800bdf4 <__gethex+0x2a0>
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d024      	beq.n	800bdfc <__gethex+0x2a8>
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d115      	bne.n	800bde2 <__gethex+0x28e>
 800bdb6:	42ae      	cmp	r6, r5
 800bdb8:	d113      	bne.n	800bde2 <__gethex+0x28e>
 800bdba:	2e01      	cmp	r6, #1
 800bdbc:	d10b      	bne.n	800bdd6 <__gethex+0x282>
 800bdbe:	9a02      	ldr	r2, [sp, #8]
 800bdc0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bdc4:	6013      	str	r3, [r2, #0]
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	6123      	str	r3, [r4, #16]
 800bdca:	f8ca 3000 	str.w	r3, [sl]
 800bdce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdd0:	2562      	movs	r5, #98	@ 0x62
 800bdd2:	601c      	str	r4, [r3, #0]
 800bdd4:	e73a      	b.n	800bc4c <__gethex+0xf8>
 800bdd6:	1e71      	subs	r1, r6, #1
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f7fe fd75 	bl	800a8c8 <__any_on>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	d1ed      	bne.n	800bdbe <__gethex+0x26a>
 800bde2:	9801      	ldr	r0, [sp, #4]
 800bde4:	4621      	mov	r1, r4
 800bde6:	f7fe f921 	bl	800a02c <_Bfree>
 800bdea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdec:	2300      	movs	r3, #0
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	2550      	movs	r5, #80	@ 0x50
 800bdf2:	e72b      	b.n	800bc4c <__gethex+0xf8>
 800bdf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1f3      	bne.n	800bde2 <__gethex+0x28e>
 800bdfa:	e7e0      	b.n	800bdbe <__gethex+0x26a>
 800bdfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1dd      	bne.n	800bdbe <__gethex+0x26a>
 800be02:	e7ee      	b.n	800bde2 <__gethex+0x28e>
 800be04:	0800cbe8 	.word	0x0800cbe8
 800be08:	0800ca7d 	.word	0x0800ca7d
 800be0c:	0800cd96 	.word	0x0800cd96
 800be10:	1e6f      	subs	r7, r5, #1
 800be12:	f1b9 0f00 	cmp.w	r9, #0
 800be16:	d130      	bne.n	800be7a <__gethex+0x326>
 800be18:	b127      	cbz	r7, 800be24 <__gethex+0x2d0>
 800be1a:	4639      	mov	r1, r7
 800be1c:	4620      	mov	r0, r4
 800be1e:	f7fe fd53 	bl	800a8c8 <__any_on>
 800be22:	4681      	mov	r9, r0
 800be24:	117a      	asrs	r2, r7, #5
 800be26:	2301      	movs	r3, #1
 800be28:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be2c:	f007 071f 	and.w	r7, r7, #31
 800be30:	40bb      	lsls	r3, r7
 800be32:	4213      	tst	r3, r2
 800be34:	4629      	mov	r1, r5
 800be36:	4620      	mov	r0, r4
 800be38:	bf18      	it	ne
 800be3a:	f049 0902 	orrne.w	r9, r9, #2
 800be3e:	f7ff fe21 	bl	800ba84 <rshift>
 800be42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800be46:	1b76      	subs	r6, r6, r5
 800be48:	2502      	movs	r5, #2
 800be4a:	f1b9 0f00 	cmp.w	r9, #0
 800be4e:	d047      	beq.n	800bee0 <__gethex+0x38c>
 800be50:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be54:	2b02      	cmp	r3, #2
 800be56:	d015      	beq.n	800be84 <__gethex+0x330>
 800be58:	2b03      	cmp	r3, #3
 800be5a:	d017      	beq.n	800be8c <__gethex+0x338>
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d109      	bne.n	800be74 <__gethex+0x320>
 800be60:	f019 0f02 	tst.w	r9, #2
 800be64:	d006      	beq.n	800be74 <__gethex+0x320>
 800be66:	f8da 3000 	ldr.w	r3, [sl]
 800be6a:	ea49 0903 	orr.w	r9, r9, r3
 800be6e:	f019 0f01 	tst.w	r9, #1
 800be72:	d10e      	bne.n	800be92 <__gethex+0x33e>
 800be74:	f045 0510 	orr.w	r5, r5, #16
 800be78:	e032      	b.n	800bee0 <__gethex+0x38c>
 800be7a:	f04f 0901 	mov.w	r9, #1
 800be7e:	e7d1      	b.n	800be24 <__gethex+0x2d0>
 800be80:	2501      	movs	r5, #1
 800be82:	e7e2      	b.n	800be4a <__gethex+0x2f6>
 800be84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be86:	f1c3 0301 	rsb	r3, r3, #1
 800be8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0f0      	beq.n	800be74 <__gethex+0x320>
 800be92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800be96:	f104 0314 	add.w	r3, r4, #20
 800be9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800be9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bea2:	f04f 0c00 	mov.w	ip, #0
 800bea6:	4618      	mov	r0, r3
 800bea8:	f853 2b04 	ldr.w	r2, [r3], #4
 800beac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800beb0:	d01b      	beq.n	800beea <__gethex+0x396>
 800beb2:	3201      	adds	r2, #1
 800beb4:	6002      	str	r2, [r0, #0]
 800beb6:	2d02      	cmp	r5, #2
 800beb8:	f104 0314 	add.w	r3, r4, #20
 800bebc:	d13c      	bne.n	800bf38 <__gethex+0x3e4>
 800bebe:	f8d8 2000 	ldr.w	r2, [r8]
 800bec2:	3a01      	subs	r2, #1
 800bec4:	42b2      	cmp	r2, r6
 800bec6:	d109      	bne.n	800bedc <__gethex+0x388>
 800bec8:	1171      	asrs	r1, r6, #5
 800beca:	2201      	movs	r2, #1
 800becc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bed0:	f006 061f 	and.w	r6, r6, #31
 800bed4:	fa02 f606 	lsl.w	r6, r2, r6
 800bed8:	421e      	tst	r6, r3
 800beda:	d13a      	bne.n	800bf52 <__gethex+0x3fe>
 800bedc:	f045 0520 	orr.w	r5, r5, #32
 800bee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee2:	601c      	str	r4, [r3, #0]
 800bee4:	9b02      	ldr	r3, [sp, #8]
 800bee6:	601f      	str	r7, [r3, #0]
 800bee8:	e6b0      	b.n	800bc4c <__gethex+0xf8>
 800beea:	4299      	cmp	r1, r3
 800beec:	f843 cc04 	str.w	ip, [r3, #-4]
 800bef0:	d8d9      	bhi.n	800bea6 <__gethex+0x352>
 800bef2:	68a3      	ldr	r3, [r4, #8]
 800bef4:	459b      	cmp	fp, r3
 800bef6:	db17      	blt.n	800bf28 <__gethex+0x3d4>
 800bef8:	6861      	ldr	r1, [r4, #4]
 800befa:	9801      	ldr	r0, [sp, #4]
 800befc:	3101      	adds	r1, #1
 800befe:	f7fe f855 	bl	8009fac <_Balloc>
 800bf02:	4681      	mov	r9, r0
 800bf04:	b918      	cbnz	r0, 800bf0e <__gethex+0x3ba>
 800bf06:	4b1a      	ldr	r3, [pc, #104]	@ (800bf70 <__gethex+0x41c>)
 800bf08:	4602      	mov	r2, r0
 800bf0a:	2184      	movs	r1, #132	@ 0x84
 800bf0c:	e6c5      	b.n	800bc9a <__gethex+0x146>
 800bf0e:	6922      	ldr	r2, [r4, #16]
 800bf10:	3202      	adds	r2, #2
 800bf12:	f104 010c 	add.w	r1, r4, #12
 800bf16:	0092      	lsls	r2, r2, #2
 800bf18:	300c      	adds	r0, #12
 800bf1a:	f7ff fd69 	bl	800b9f0 <memcpy>
 800bf1e:	4621      	mov	r1, r4
 800bf20:	9801      	ldr	r0, [sp, #4]
 800bf22:	f7fe f883 	bl	800a02c <_Bfree>
 800bf26:	464c      	mov	r4, r9
 800bf28:	6923      	ldr	r3, [r4, #16]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf30:	6122      	str	r2, [r4, #16]
 800bf32:	2201      	movs	r2, #1
 800bf34:	615a      	str	r2, [r3, #20]
 800bf36:	e7be      	b.n	800beb6 <__gethex+0x362>
 800bf38:	6922      	ldr	r2, [r4, #16]
 800bf3a:	455a      	cmp	r2, fp
 800bf3c:	dd0b      	ble.n	800bf56 <__gethex+0x402>
 800bf3e:	2101      	movs	r1, #1
 800bf40:	4620      	mov	r0, r4
 800bf42:	f7ff fd9f 	bl	800ba84 <rshift>
 800bf46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bf4a:	3701      	adds	r7, #1
 800bf4c:	42bb      	cmp	r3, r7
 800bf4e:	f6ff aee0 	blt.w	800bd12 <__gethex+0x1be>
 800bf52:	2501      	movs	r5, #1
 800bf54:	e7c2      	b.n	800bedc <__gethex+0x388>
 800bf56:	f016 061f 	ands.w	r6, r6, #31
 800bf5a:	d0fa      	beq.n	800bf52 <__gethex+0x3fe>
 800bf5c:	4453      	add	r3, sl
 800bf5e:	f1c6 0620 	rsb	r6, r6, #32
 800bf62:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bf66:	f7fe f913 	bl	800a190 <__hi0bits>
 800bf6a:	42b0      	cmp	r0, r6
 800bf6c:	dbe7      	blt.n	800bf3e <__gethex+0x3ea>
 800bf6e:	e7f0      	b.n	800bf52 <__gethex+0x3fe>
 800bf70:	0800ca7d 	.word	0x0800ca7d

0800bf74 <L_shift>:
 800bf74:	f1c2 0208 	rsb	r2, r2, #8
 800bf78:	0092      	lsls	r2, r2, #2
 800bf7a:	b570      	push	{r4, r5, r6, lr}
 800bf7c:	f1c2 0620 	rsb	r6, r2, #32
 800bf80:	6843      	ldr	r3, [r0, #4]
 800bf82:	6804      	ldr	r4, [r0, #0]
 800bf84:	fa03 f506 	lsl.w	r5, r3, r6
 800bf88:	432c      	orrs	r4, r5
 800bf8a:	40d3      	lsrs	r3, r2
 800bf8c:	6004      	str	r4, [r0, #0]
 800bf8e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bf92:	4288      	cmp	r0, r1
 800bf94:	d3f4      	bcc.n	800bf80 <L_shift+0xc>
 800bf96:	bd70      	pop	{r4, r5, r6, pc}

0800bf98 <__match>:
 800bf98:	b530      	push	{r4, r5, lr}
 800bf9a:	6803      	ldr	r3, [r0, #0]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa2:	b914      	cbnz	r4, 800bfaa <__match+0x12>
 800bfa4:	6003      	str	r3, [r0, #0]
 800bfa6:	2001      	movs	r0, #1
 800bfa8:	bd30      	pop	{r4, r5, pc}
 800bfaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bfb2:	2d19      	cmp	r5, #25
 800bfb4:	bf98      	it	ls
 800bfb6:	3220      	addls	r2, #32
 800bfb8:	42a2      	cmp	r2, r4
 800bfba:	d0f0      	beq.n	800bf9e <__match+0x6>
 800bfbc:	2000      	movs	r0, #0
 800bfbe:	e7f3      	b.n	800bfa8 <__match+0x10>

0800bfc0 <__hexnan>:
 800bfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc4:	680b      	ldr	r3, [r1, #0]
 800bfc6:	6801      	ldr	r1, [r0, #0]
 800bfc8:	115e      	asrs	r6, r3, #5
 800bfca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bfce:	f013 031f 	ands.w	r3, r3, #31
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	bf18      	it	ne
 800bfd6:	3604      	addne	r6, #4
 800bfd8:	2500      	movs	r5, #0
 800bfda:	1f37      	subs	r7, r6, #4
 800bfdc:	4682      	mov	sl, r0
 800bfde:	4690      	mov	r8, r2
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bfe6:	46b9      	mov	r9, r7
 800bfe8:	463c      	mov	r4, r7
 800bfea:	9502      	str	r5, [sp, #8]
 800bfec:	46ab      	mov	fp, r5
 800bfee:	784a      	ldrb	r2, [r1, #1]
 800bff0:	1c4b      	adds	r3, r1, #1
 800bff2:	9303      	str	r3, [sp, #12]
 800bff4:	b342      	cbz	r2, 800c048 <__hexnan+0x88>
 800bff6:	4610      	mov	r0, r2
 800bff8:	9105      	str	r1, [sp, #20]
 800bffa:	9204      	str	r2, [sp, #16]
 800bffc:	f7ff fd94 	bl	800bb28 <__hexdig_fun>
 800c000:	2800      	cmp	r0, #0
 800c002:	d151      	bne.n	800c0a8 <__hexnan+0xe8>
 800c004:	9a04      	ldr	r2, [sp, #16]
 800c006:	9905      	ldr	r1, [sp, #20]
 800c008:	2a20      	cmp	r2, #32
 800c00a:	d818      	bhi.n	800c03e <__hexnan+0x7e>
 800c00c:	9b02      	ldr	r3, [sp, #8]
 800c00e:	459b      	cmp	fp, r3
 800c010:	dd13      	ble.n	800c03a <__hexnan+0x7a>
 800c012:	454c      	cmp	r4, r9
 800c014:	d206      	bcs.n	800c024 <__hexnan+0x64>
 800c016:	2d07      	cmp	r5, #7
 800c018:	dc04      	bgt.n	800c024 <__hexnan+0x64>
 800c01a:	462a      	mov	r2, r5
 800c01c:	4649      	mov	r1, r9
 800c01e:	4620      	mov	r0, r4
 800c020:	f7ff ffa8 	bl	800bf74 <L_shift>
 800c024:	4544      	cmp	r4, r8
 800c026:	d952      	bls.n	800c0ce <__hexnan+0x10e>
 800c028:	2300      	movs	r3, #0
 800c02a:	f1a4 0904 	sub.w	r9, r4, #4
 800c02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c032:	f8cd b008 	str.w	fp, [sp, #8]
 800c036:	464c      	mov	r4, r9
 800c038:	461d      	mov	r5, r3
 800c03a:	9903      	ldr	r1, [sp, #12]
 800c03c:	e7d7      	b.n	800bfee <__hexnan+0x2e>
 800c03e:	2a29      	cmp	r2, #41	@ 0x29
 800c040:	d157      	bne.n	800c0f2 <__hexnan+0x132>
 800c042:	3102      	adds	r1, #2
 800c044:	f8ca 1000 	str.w	r1, [sl]
 800c048:	f1bb 0f00 	cmp.w	fp, #0
 800c04c:	d051      	beq.n	800c0f2 <__hexnan+0x132>
 800c04e:	454c      	cmp	r4, r9
 800c050:	d206      	bcs.n	800c060 <__hexnan+0xa0>
 800c052:	2d07      	cmp	r5, #7
 800c054:	dc04      	bgt.n	800c060 <__hexnan+0xa0>
 800c056:	462a      	mov	r2, r5
 800c058:	4649      	mov	r1, r9
 800c05a:	4620      	mov	r0, r4
 800c05c:	f7ff ff8a 	bl	800bf74 <L_shift>
 800c060:	4544      	cmp	r4, r8
 800c062:	d936      	bls.n	800c0d2 <__hexnan+0x112>
 800c064:	f1a8 0204 	sub.w	r2, r8, #4
 800c068:	4623      	mov	r3, r4
 800c06a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c06e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c072:	429f      	cmp	r7, r3
 800c074:	d2f9      	bcs.n	800c06a <__hexnan+0xaa>
 800c076:	1b3b      	subs	r3, r7, r4
 800c078:	f023 0303 	bic.w	r3, r3, #3
 800c07c:	3304      	adds	r3, #4
 800c07e:	3401      	adds	r4, #1
 800c080:	3e03      	subs	r6, #3
 800c082:	42b4      	cmp	r4, r6
 800c084:	bf88      	it	hi
 800c086:	2304      	movhi	r3, #4
 800c088:	4443      	add	r3, r8
 800c08a:	2200      	movs	r2, #0
 800c08c:	f843 2b04 	str.w	r2, [r3], #4
 800c090:	429f      	cmp	r7, r3
 800c092:	d2fb      	bcs.n	800c08c <__hexnan+0xcc>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	b91b      	cbnz	r3, 800c0a0 <__hexnan+0xe0>
 800c098:	4547      	cmp	r7, r8
 800c09a:	d128      	bne.n	800c0ee <__hexnan+0x12e>
 800c09c:	2301      	movs	r3, #1
 800c09e:	603b      	str	r3, [r7, #0]
 800c0a0:	2005      	movs	r0, #5
 800c0a2:	b007      	add	sp, #28
 800c0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	2d08      	cmp	r5, #8
 800c0ac:	f10b 0b01 	add.w	fp, fp, #1
 800c0b0:	dd06      	ble.n	800c0c0 <__hexnan+0x100>
 800c0b2:	4544      	cmp	r4, r8
 800c0b4:	d9c1      	bls.n	800c03a <__hexnan+0x7a>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0bc:	2501      	movs	r5, #1
 800c0be:	3c04      	subs	r4, #4
 800c0c0:	6822      	ldr	r2, [r4, #0]
 800c0c2:	f000 000f 	and.w	r0, r0, #15
 800c0c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c0ca:	6020      	str	r0, [r4, #0]
 800c0cc:	e7b5      	b.n	800c03a <__hexnan+0x7a>
 800c0ce:	2508      	movs	r5, #8
 800c0d0:	e7b3      	b.n	800c03a <__hexnan+0x7a>
 800c0d2:	9b01      	ldr	r3, [sp, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d0dd      	beq.n	800c094 <__hexnan+0xd4>
 800c0d8:	f1c3 0320 	rsb	r3, r3, #32
 800c0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e0:	40da      	lsrs	r2, r3
 800c0e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c0ec:	e7d2      	b.n	800c094 <__hexnan+0xd4>
 800c0ee:	3f04      	subs	r7, #4
 800c0f0:	e7d0      	b.n	800c094 <__hexnan+0xd4>
 800c0f2:	2004      	movs	r0, #4
 800c0f4:	e7d5      	b.n	800c0a2 <__hexnan+0xe2>

0800c0f6 <__ascii_mbtowc>:
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	b901      	cbnz	r1, 800c0fc <__ascii_mbtowc+0x6>
 800c0fa:	a901      	add	r1, sp, #4
 800c0fc:	b142      	cbz	r2, 800c110 <__ascii_mbtowc+0x1a>
 800c0fe:	b14b      	cbz	r3, 800c114 <__ascii_mbtowc+0x1e>
 800c100:	7813      	ldrb	r3, [r2, #0]
 800c102:	600b      	str	r3, [r1, #0]
 800c104:	7812      	ldrb	r2, [r2, #0]
 800c106:	1e10      	subs	r0, r2, #0
 800c108:	bf18      	it	ne
 800c10a:	2001      	movne	r0, #1
 800c10c:	b002      	add	sp, #8
 800c10e:	4770      	bx	lr
 800c110:	4610      	mov	r0, r2
 800c112:	e7fb      	b.n	800c10c <__ascii_mbtowc+0x16>
 800c114:	f06f 0001 	mvn.w	r0, #1
 800c118:	e7f8      	b.n	800c10c <__ascii_mbtowc+0x16>

0800c11a <_realloc_r>:
 800c11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11e:	4680      	mov	r8, r0
 800c120:	4615      	mov	r5, r2
 800c122:	460c      	mov	r4, r1
 800c124:	b921      	cbnz	r1, 800c130 <_realloc_r+0x16>
 800c126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c12a:	4611      	mov	r1, r2
 800c12c:	f7fd beb2 	b.w	8009e94 <_malloc_r>
 800c130:	b92a      	cbnz	r2, 800c13e <_realloc_r+0x24>
 800c132:	f7fd fe3b 	bl	8009dac <_free_r>
 800c136:	2400      	movs	r4, #0
 800c138:	4620      	mov	r0, r4
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	f000 f840 	bl	800c1c2 <_malloc_usable_size_r>
 800c142:	4285      	cmp	r5, r0
 800c144:	4606      	mov	r6, r0
 800c146:	d802      	bhi.n	800c14e <_realloc_r+0x34>
 800c148:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c14c:	d8f4      	bhi.n	800c138 <_realloc_r+0x1e>
 800c14e:	4629      	mov	r1, r5
 800c150:	4640      	mov	r0, r8
 800c152:	f7fd fe9f 	bl	8009e94 <_malloc_r>
 800c156:	4607      	mov	r7, r0
 800c158:	2800      	cmp	r0, #0
 800c15a:	d0ec      	beq.n	800c136 <_realloc_r+0x1c>
 800c15c:	42b5      	cmp	r5, r6
 800c15e:	462a      	mov	r2, r5
 800c160:	4621      	mov	r1, r4
 800c162:	bf28      	it	cs
 800c164:	4632      	movcs	r2, r6
 800c166:	f7ff fc43 	bl	800b9f0 <memcpy>
 800c16a:	4621      	mov	r1, r4
 800c16c:	4640      	mov	r0, r8
 800c16e:	f7fd fe1d 	bl	8009dac <_free_r>
 800c172:	463c      	mov	r4, r7
 800c174:	e7e0      	b.n	800c138 <_realloc_r+0x1e>

0800c176 <__ascii_wctomb>:
 800c176:	4603      	mov	r3, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	b141      	cbz	r1, 800c18e <__ascii_wctomb+0x18>
 800c17c:	2aff      	cmp	r2, #255	@ 0xff
 800c17e:	d904      	bls.n	800c18a <__ascii_wctomb+0x14>
 800c180:	228a      	movs	r2, #138	@ 0x8a
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	4770      	bx	lr
 800c18a:	700a      	strb	r2, [r1, #0]
 800c18c:	2001      	movs	r0, #1
 800c18e:	4770      	bx	lr

0800c190 <fiprintf>:
 800c190:	b40e      	push	{r1, r2, r3}
 800c192:	b503      	push	{r0, r1, lr}
 800c194:	4601      	mov	r1, r0
 800c196:	ab03      	add	r3, sp, #12
 800c198:	4805      	ldr	r0, [pc, #20]	@ (800c1b0 <fiprintf+0x20>)
 800c19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19e:	6800      	ldr	r0, [r0, #0]
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	f000 f83f 	bl	800c224 <_vfiprintf_r>
 800c1a6:	b002      	add	sp, #8
 800c1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1ac:	b003      	add	sp, #12
 800c1ae:	4770      	bx	lr
 800c1b0:	240000bc 	.word	0x240000bc

0800c1b4 <abort>:
 800c1b4:	b508      	push	{r3, lr}
 800c1b6:	2006      	movs	r0, #6
 800c1b8:	f000 fa08 	bl	800c5cc <raise>
 800c1bc:	2001      	movs	r0, #1
 800c1be:	f7f5 ff99 	bl	80020f4 <_exit>

0800c1c2 <_malloc_usable_size_r>:
 800c1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1c6:	1f18      	subs	r0, r3, #4
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bfbc      	itt	lt
 800c1cc:	580b      	ldrlt	r3, [r1, r0]
 800c1ce:	18c0      	addlt	r0, r0, r3
 800c1d0:	4770      	bx	lr

0800c1d2 <__sfputc_r>:
 800c1d2:	6893      	ldr	r3, [r2, #8]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	b410      	push	{r4}
 800c1da:	6093      	str	r3, [r2, #8]
 800c1dc:	da08      	bge.n	800c1f0 <__sfputc_r+0x1e>
 800c1de:	6994      	ldr	r4, [r2, #24]
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	db01      	blt.n	800c1e8 <__sfputc_r+0x16>
 800c1e4:	290a      	cmp	r1, #10
 800c1e6:	d103      	bne.n	800c1f0 <__sfputc_r+0x1e>
 800c1e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ec:	f000 b932 	b.w	800c454 <__swbuf_r>
 800c1f0:	6813      	ldr	r3, [r2, #0]
 800c1f2:	1c58      	adds	r0, r3, #1
 800c1f4:	6010      	str	r0, [r2, #0]
 800c1f6:	7019      	strb	r1, [r3, #0]
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <__sfputs_r>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	4606      	mov	r6, r0
 800c204:	460f      	mov	r7, r1
 800c206:	4614      	mov	r4, r2
 800c208:	18d5      	adds	r5, r2, r3
 800c20a:	42ac      	cmp	r4, r5
 800c20c:	d101      	bne.n	800c212 <__sfputs_r+0x12>
 800c20e:	2000      	movs	r0, #0
 800c210:	e007      	b.n	800c222 <__sfputs_r+0x22>
 800c212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c216:	463a      	mov	r2, r7
 800c218:	4630      	mov	r0, r6
 800c21a:	f7ff ffda 	bl	800c1d2 <__sfputc_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d1f3      	bne.n	800c20a <__sfputs_r+0xa>
 800c222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c224 <_vfiprintf_r>:
 800c224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c228:	460d      	mov	r5, r1
 800c22a:	b09d      	sub	sp, #116	@ 0x74
 800c22c:	4614      	mov	r4, r2
 800c22e:	4698      	mov	r8, r3
 800c230:	4606      	mov	r6, r0
 800c232:	b118      	cbz	r0, 800c23c <_vfiprintf_r+0x18>
 800c234:	6a03      	ldr	r3, [r0, #32]
 800c236:	b90b      	cbnz	r3, 800c23c <_vfiprintf_r+0x18>
 800c238:	f7fc fe86 	bl	8008f48 <__sinit>
 800c23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c23e:	07d9      	lsls	r1, r3, #31
 800c240:	d405      	bmi.n	800c24e <_vfiprintf_r+0x2a>
 800c242:	89ab      	ldrh	r3, [r5, #12]
 800c244:	059a      	lsls	r2, r3, #22
 800c246:	d402      	bmi.n	800c24e <_vfiprintf_r+0x2a>
 800c248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c24a:	f7fc ffc8 	bl	80091de <__retarget_lock_acquire_recursive>
 800c24e:	89ab      	ldrh	r3, [r5, #12]
 800c250:	071b      	lsls	r3, r3, #28
 800c252:	d501      	bpl.n	800c258 <_vfiprintf_r+0x34>
 800c254:	692b      	ldr	r3, [r5, #16]
 800c256:	b99b      	cbnz	r3, 800c280 <_vfiprintf_r+0x5c>
 800c258:	4629      	mov	r1, r5
 800c25a:	4630      	mov	r0, r6
 800c25c:	f000 f938 	bl	800c4d0 <__swsetup_r>
 800c260:	b170      	cbz	r0, 800c280 <_vfiprintf_r+0x5c>
 800c262:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c264:	07dc      	lsls	r4, r3, #31
 800c266:	d504      	bpl.n	800c272 <_vfiprintf_r+0x4e>
 800c268:	f04f 30ff 	mov.w	r0, #4294967295
 800c26c:	b01d      	add	sp, #116	@ 0x74
 800c26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c272:	89ab      	ldrh	r3, [r5, #12]
 800c274:	0598      	lsls	r0, r3, #22
 800c276:	d4f7      	bmi.n	800c268 <_vfiprintf_r+0x44>
 800c278:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c27a:	f7fc ffb1 	bl	80091e0 <__retarget_lock_release_recursive>
 800c27e:	e7f3      	b.n	800c268 <_vfiprintf_r+0x44>
 800c280:	2300      	movs	r3, #0
 800c282:	9309      	str	r3, [sp, #36]	@ 0x24
 800c284:	2320      	movs	r3, #32
 800c286:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28e:	2330      	movs	r3, #48	@ 0x30
 800c290:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c440 <_vfiprintf_r+0x21c>
 800c294:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c298:	f04f 0901 	mov.w	r9, #1
 800c29c:	4623      	mov	r3, r4
 800c29e:	469a      	mov	sl, r3
 800c2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a4:	b10a      	cbz	r2, 800c2aa <_vfiprintf_r+0x86>
 800c2a6:	2a25      	cmp	r2, #37	@ 0x25
 800c2a8:	d1f9      	bne.n	800c29e <_vfiprintf_r+0x7a>
 800c2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ae:	d00b      	beq.n	800c2c8 <_vfiprintf_r+0xa4>
 800c2b0:	465b      	mov	r3, fp
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7ff ffa2 	bl	800c200 <__sfputs_r>
 800c2bc:	3001      	adds	r0, #1
 800c2be:	f000 80a7 	beq.w	800c410 <_vfiprintf_r+0x1ec>
 800c2c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2c4:	445a      	add	r2, fp
 800c2c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 809f 	beq.w	800c410 <_vfiprintf_r+0x1ec>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2dc:	f10a 0a01 	add.w	sl, sl, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	9307      	str	r3, [sp, #28]
 800c2e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2ea:	4654      	mov	r4, sl
 800c2ec:	2205      	movs	r2, #5
 800c2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f2:	4853      	ldr	r0, [pc, #332]	@ (800c440 <_vfiprintf_r+0x21c>)
 800c2f4:	f7f3 fff4 	bl	80002e0 <memchr>
 800c2f8:	9a04      	ldr	r2, [sp, #16]
 800c2fa:	b9d8      	cbnz	r0, 800c334 <_vfiprintf_r+0x110>
 800c2fc:	06d1      	lsls	r1, r2, #27
 800c2fe:	bf44      	itt	mi
 800c300:	2320      	movmi	r3, #32
 800c302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c306:	0713      	lsls	r3, r2, #28
 800c308:	bf44      	itt	mi
 800c30a:	232b      	movmi	r3, #43	@ 0x2b
 800c30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c310:	f89a 3000 	ldrb.w	r3, [sl]
 800c314:	2b2a      	cmp	r3, #42	@ 0x2a
 800c316:	d015      	beq.n	800c344 <_vfiprintf_r+0x120>
 800c318:	9a07      	ldr	r2, [sp, #28]
 800c31a:	4654      	mov	r4, sl
 800c31c:	2000      	movs	r0, #0
 800c31e:	f04f 0c0a 	mov.w	ip, #10
 800c322:	4621      	mov	r1, r4
 800c324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c328:	3b30      	subs	r3, #48	@ 0x30
 800c32a:	2b09      	cmp	r3, #9
 800c32c:	d94b      	bls.n	800c3c6 <_vfiprintf_r+0x1a2>
 800c32e:	b1b0      	cbz	r0, 800c35e <_vfiprintf_r+0x13a>
 800c330:	9207      	str	r2, [sp, #28]
 800c332:	e014      	b.n	800c35e <_vfiprintf_r+0x13a>
 800c334:	eba0 0308 	sub.w	r3, r0, r8
 800c338:	fa09 f303 	lsl.w	r3, r9, r3
 800c33c:	4313      	orrs	r3, r2
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	46a2      	mov	sl, r4
 800c342:	e7d2      	b.n	800c2ea <_vfiprintf_r+0xc6>
 800c344:	9b03      	ldr	r3, [sp, #12]
 800c346:	1d19      	adds	r1, r3, #4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	9103      	str	r1, [sp, #12]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfbb      	ittet	lt
 800c350:	425b      	neglt	r3, r3
 800c352:	f042 0202 	orrlt.w	r2, r2, #2
 800c356:	9307      	strge	r3, [sp, #28]
 800c358:	9307      	strlt	r3, [sp, #28]
 800c35a:	bfb8      	it	lt
 800c35c:	9204      	strlt	r2, [sp, #16]
 800c35e:	7823      	ldrb	r3, [r4, #0]
 800c360:	2b2e      	cmp	r3, #46	@ 0x2e
 800c362:	d10a      	bne.n	800c37a <_vfiprintf_r+0x156>
 800c364:	7863      	ldrb	r3, [r4, #1]
 800c366:	2b2a      	cmp	r3, #42	@ 0x2a
 800c368:	d132      	bne.n	800c3d0 <_vfiprintf_r+0x1ac>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	1d1a      	adds	r2, r3, #4
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	9203      	str	r2, [sp, #12]
 800c372:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c376:	3402      	adds	r4, #2
 800c378:	9305      	str	r3, [sp, #20]
 800c37a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c450 <_vfiprintf_r+0x22c>
 800c37e:	7821      	ldrb	r1, [r4, #0]
 800c380:	2203      	movs	r2, #3
 800c382:	4650      	mov	r0, sl
 800c384:	f7f3 ffac 	bl	80002e0 <memchr>
 800c388:	b138      	cbz	r0, 800c39a <_vfiprintf_r+0x176>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	eba0 000a 	sub.w	r0, r0, sl
 800c390:	2240      	movs	r2, #64	@ 0x40
 800c392:	4082      	lsls	r2, r0
 800c394:	4313      	orrs	r3, r2
 800c396:	3401      	adds	r4, #1
 800c398:	9304      	str	r3, [sp, #16]
 800c39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c39e:	4829      	ldr	r0, [pc, #164]	@ (800c444 <_vfiprintf_r+0x220>)
 800c3a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3a4:	2206      	movs	r2, #6
 800c3a6:	f7f3 ff9b 	bl	80002e0 <memchr>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d03f      	beq.n	800c42e <_vfiprintf_r+0x20a>
 800c3ae:	4b26      	ldr	r3, [pc, #152]	@ (800c448 <_vfiprintf_r+0x224>)
 800c3b0:	bb1b      	cbnz	r3, 800c3fa <_vfiprintf_r+0x1d6>
 800c3b2:	9b03      	ldr	r3, [sp, #12]
 800c3b4:	3307      	adds	r3, #7
 800c3b6:	f023 0307 	bic.w	r3, r3, #7
 800c3ba:	3308      	adds	r3, #8
 800c3bc:	9303      	str	r3, [sp, #12]
 800c3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c0:	443b      	add	r3, r7
 800c3c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3c4:	e76a      	b.n	800c29c <_vfiprintf_r+0x78>
 800c3c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3ca:	460c      	mov	r4, r1
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	e7a8      	b.n	800c322 <_vfiprintf_r+0xfe>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	f04f 0c0a 	mov.w	ip, #10
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e2:	3a30      	subs	r2, #48	@ 0x30
 800c3e4:	2a09      	cmp	r2, #9
 800c3e6:	d903      	bls.n	800c3f0 <_vfiprintf_r+0x1cc>
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d0c6      	beq.n	800c37a <_vfiprintf_r+0x156>
 800c3ec:	9105      	str	r1, [sp, #20]
 800c3ee:	e7c4      	b.n	800c37a <_vfiprintf_r+0x156>
 800c3f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e7f0      	b.n	800c3dc <_vfiprintf_r+0x1b8>
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	462a      	mov	r2, r5
 800c400:	4b12      	ldr	r3, [pc, #72]	@ (800c44c <_vfiprintf_r+0x228>)
 800c402:	a904      	add	r1, sp, #16
 800c404:	4630      	mov	r0, r6
 800c406:	f7fb ff5f 	bl	80082c8 <_printf_float>
 800c40a:	4607      	mov	r7, r0
 800c40c:	1c78      	adds	r0, r7, #1
 800c40e:	d1d6      	bne.n	800c3be <_vfiprintf_r+0x19a>
 800c410:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	d405      	bmi.n	800c422 <_vfiprintf_r+0x1fe>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	059a      	lsls	r2, r3, #22
 800c41a:	d402      	bmi.n	800c422 <_vfiprintf_r+0x1fe>
 800c41c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c41e:	f7fc fedf 	bl	80091e0 <__retarget_lock_release_recursive>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	065b      	lsls	r3, r3, #25
 800c426:	f53f af1f 	bmi.w	800c268 <_vfiprintf_r+0x44>
 800c42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c42c:	e71e      	b.n	800c26c <_vfiprintf_r+0x48>
 800c42e:	ab03      	add	r3, sp, #12
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	462a      	mov	r2, r5
 800c434:	4b05      	ldr	r3, [pc, #20]	@ (800c44c <_vfiprintf_r+0x228>)
 800c436:	a904      	add	r1, sp, #16
 800c438:	4630      	mov	r0, r6
 800c43a:	f7fc f9cd 	bl	80087d8 <_printf_i>
 800c43e:	e7e4      	b.n	800c40a <_vfiprintf_r+0x1e6>
 800c440:	0800cd41 	.word	0x0800cd41
 800c444:	0800cd4b 	.word	0x0800cd4b
 800c448:	080082c9 	.word	0x080082c9
 800c44c:	0800c201 	.word	0x0800c201
 800c450:	0800cd47 	.word	0x0800cd47

0800c454 <__swbuf_r>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	460e      	mov	r6, r1
 800c458:	4614      	mov	r4, r2
 800c45a:	4605      	mov	r5, r0
 800c45c:	b118      	cbz	r0, 800c466 <__swbuf_r+0x12>
 800c45e:	6a03      	ldr	r3, [r0, #32]
 800c460:	b90b      	cbnz	r3, 800c466 <__swbuf_r+0x12>
 800c462:	f7fc fd71 	bl	8008f48 <__sinit>
 800c466:	69a3      	ldr	r3, [r4, #24]
 800c468:	60a3      	str	r3, [r4, #8]
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	071a      	lsls	r2, r3, #28
 800c46e:	d501      	bpl.n	800c474 <__swbuf_r+0x20>
 800c470:	6923      	ldr	r3, [r4, #16]
 800c472:	b943      	cbnz	r3, 800c486 <__swbuf_r+0x32>
 800c474:	4621      	mov	r1, r4
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f82a 	bl	800c4d0 <__swsetup_r>
 800c47c:	b118      	cbz	r0, 800c486 <__swbuf_r+0x32>
 800c47e:	f04f 37ff 	mov.w	r7, #4294967295
 800c482:	4638      	mov	r0, r7
 800c484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	6922      	ldr	r2, [r4, #16]
 800c48a:	1a98      	subs	r0, r3, r2
 800c48c:	6963      	ldr	r3, [r4, #20]
 800c48e:	b2f6      	uxtb	r6, r6
 800c490:	4283      	cmp	r3, r0
 800c492:	4637      	mov	r7, r6
 800c494:	dc05      	bgt.n	800c4a2 <__swbuf_r+0x4e>
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f7ff fa45 	bl	800b928 <_fflush_r>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d1ed      	bne.n	800c47e <__swbuf_r+0x2a>
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	60a3      	str	r3, [r4, #8]
 800c4a8:	6823      	ldr	r3, [r4, #0]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	6022      	str	r2, [r4, #0]
 800c4ae:	701e      	strb	r6, [r3, #0]
 800c4b0:	6962      	ldr	r2, [r4, #20]
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d004      	beq.n	800c4c2 <__swbuf_r+0x6e>
 800c4b8:	89a3      	ldrh	r3, [r4, #12]
 800c4ba:	07db      	lsls	r3, r3, #31
 800c4bc:	d5e1      	bpl.n	800c482 <__swbuf_r+0x2e>
 800c4be:	2e0a      	cmp	r6, #10
 800c4c0:	d1df      	bne.n	800c482 <__swbuf_r+0x2e>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f7ff fa2f 	bl	800b928 <_fflush_r>
 800c4ca:	2800      	cmp	r0, #0
 800c4cc:	d0d9      	beq.n	800c482 <__swbuf_r+0x2e>
 800c4ce:	e7d6      	b.n	800c47e <__swbuf_r+0x2a>

0800c4d0 <__swsetup_r>:
 800c4d0:	b538      	push	{r3, r4, r5, lr}
 800c4d2:	4b29      	ldr	r3, [pc, #164]	@ (800c578 <__swsetup_r+0xa8>)
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	6818      	ldr	r0, [r3, #0]
 800c4d8:	460c      	mov	r4, r1
 800c4da:	b118      	cbz	r0, 800c4e4 <__swsetup_r+0x14>
 800c4dc:	6a03      	ldr	r3, [r0, #32]
 800c4de:	b90b      	cbnz	r3, 800c4e4 <__swsetup_r+0x14>
 800c4e0:	f7fc fd32 	bl	8008f48 <__sinit>
 800c4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4e8:	0719      	lsls	r1, r3, #28
 800c4ea:	d422      	bmi.n	800c532 <__swsetup_r+0x62>
 800c4ec:	06da      	lsls	r2, r3, #27
 800c4ee:	d407      	bmi.n	800c500 <__swsetup_r+0x30>
 800c4f0:	2209      	movs	r2, #9
 800c4f2:	602a      	str	r2, [r5, #0]
 800c4f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4f8:	81a3      	strh	r3, [r4, #12]
 800c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c4fe:	e033      	b.n	800c568 <__swsetup_r+0x98>
 800c500:	0758      	lsls	r0, r3, #29
 800c502:	d512      	bpl.n	800c52a <__swsetup_r+0x5a>
 800c504:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c506:	b141      	cbz	r1, 800c51a <__swsetup_r+0x4a>
 800c508:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c50c:	4299      	cmp	r1, r3
 800c50e:	d002      	beq.n	800c516 <__swsetup_r+0x46>
 800c510:	4628      	mov	r0, r5
 800c512:	f7fd fc4b 	bl	8009dac <_free_r>
 800c516:	2300      	movs	r3, #0
 800c518:	6363      	str	r3, [r4, #52]	@ 0x34
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	2300      	movs	r3, #0
 800c524:	6063      	str	r3, [r4, #4]
 800c526:	6923      	ldr	r3, [r4, #16]
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	89a3      	ldrh	r3, [r4, #12]
 800c52c:	f043 0308 	orr.w	r3, r3, #8
 800c530:	81a3      	strh	r3, [r4, #12]
 800c532:	6923      	ldr	r3, [r4, #16]
 800c534:	b94b      	cbnz	r3, 800c54a <__swsetup_r+0x7a>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c53c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c540:	d003      	beq.n	800c54a <__swsetup_r+0x7a>
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 f883 	bl	800c650 <__smakebuf_r>
 800c54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c54e:	f013 0201 	ands.w	r2, r3, #1
 800c552:	d00a      	beq.n	800c56a <__swsetup_r+0x9a>
 800c554:	2200      	movs	r2, #0
 800c556:	60a2      	str	r2, [r4, #8]
 800c558:	6962      	ldr	r2, [r4, #20]
 800c55a:	4252      	negs	r2, r2
 800c55c:	61a2      	str	r2, [r4, #24]
 800c55e:	6922      	ldr	r2, [r4, #16]
 800c560:	b942      	cbnz	r2, 800c574 <__swsetup_r+0xa4>
 800c562:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c566:	d1c5      	bne.n	800c4f4 <__swsetup_r+0x24>
 800c568:	bd38      	pop	{r3, r4, r5, pc}
 800c56a:	0799      	lsls	r1, r3, #30
 800c56c:	bf58      	it	pl
 800c56e:	6962      	ldrpl	r2, [r4, #20]
 800c570:	60a2      	str	r2, [r4, #8]
 800c572:	e7f4      	b.n	800c55e <__swsetup_r+0x8e>
 800c574:	2000      	movs	r0, #0
 800c576:	e7f7      	b.n	800c568 <__swsetup_r+0x98>
 800c578:	240000bc 	.word	0x240000bc

0800c57c <_raise_r>:
 800c57c:	291f      	cmp	r1, #31
 800c57e:	b538      	push	{r3, r4, r5, lr}
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	d904      	bls.n	800c590 <_raise_r+0x14>
 800c586:	2316      	movs	r3, #22
 800c588:	6003      	str	r3, [r0, #0]
 800c58a:	f04f 30ff 	mov.w	r0, #4294967295
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c592:	b112      	cbz	r2, 800c59a <_raise_r+0x1e>
 800c594:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c598:	b94b      	cbnz	r3, 800c5ae <_raise_r+0x32>
 800c59a:	4628      	mov	r0, r5
 800c59c:	f000 f830 	bl	800c600 <_getpid_r>
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5aa:	f000 b817 	b.w	800c5dc <_kill_r>
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d00a      	beq.n	800c5c8 <_raise_r+0x4c>
 800c5b2:	1c59      	adds	r1, r3, #1
 800c5b4:	d103      	bne.n	800c5be <_raise_r+0x42>
 800c5b6:	2316      	movs	r3, #22
 800c5b8:	6003      	str	r3, [r0, #0]
 800c5ba:	2001      	movs	r0, #1
 800c5bc:	e7e7      	b.n	800c58e <_raise_r+0x12>
 800c5be:	2100      	movs	r1, #0
 800c5c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	4798      	blx	r3
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e7e0      	b.n	800c58e <_raise_r+0x12>

0800c5cc <raise>:
 800c5cc:	4b02      	ldr	r3, [pc, #8]	@ (800c5d8 <raise+0xc>)
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	6818      	ldr	r0, [r3, #0]
 800c5d2:	f7ff bfd3 	b.w	800c57c <_raise_r>
 800c5d6:	bf00      	nop
 800c5d8:	240000bc 	.word	0x240000bc

0800c5dc <_kill_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	@ (800c5fc <_kill_r+0x20>)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	4611      	mov	r1, r2
 800c5e8:	602b      	str	r3, [r5, #0]
 800c5ea:	f7f5 fd73 	bl	80020d4 <_kill>
 800c5ee:	1c43      	adds	r3, r0, #1
 800c5f0:	d102      	bne.n	800c5f8 <_kill_r+0x1c>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	b103      	cbz	r3, 800c5f8 <_kill_r+0x1c>
 800c5f6:	6023      	str	r3, [r4, #0]
 800c5f8:	bd38      	pop	{r3, r4, r5, pc}
 800c5fa:	bf00      	nop
 800c5fc:	24000664 	.word	0x24000664

0800c600 <_getpid_r>:
 800c600:	f7f5 bd60 	b.w	80020c4 <_getpid>

0800c604 <__swhatbuf_r>:
 800c604:	b570      	push	{r4, r5, r6, lr}
 800c606:	460c      	mov	r4, r1
 800c608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c60c:	2900      	cmp	r1, #0
 800c60e:	b096      	sub	sp, #88	@ 0x58
 800c610:	4615      	mov	r5, r2
 800c612:	461e      	mov	r6, r3
 800c614:	da0d      	bge.n	800c632 <__swhatbuf_r+0x2e>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c61c:	f04f 0100 	mov.w	r1, #0
 800c620:	bf14      	ite	ne
 800c622:	2340      	movne	r3, #64	@ 0x40
 800c624:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c628:	2000      	movs	r0, #0
 800c62a:	6031      	str	r1, [r6, #0]
 800c62c:	602b      	str	r3, [r5, #0]
 800c62e:	b016      	add	sp, #88	@ 0x58
 800c630:	bd70      	pop	{r4, r5, r6, pc}
 800c632:	466a      	mov	r2, sp
 800c634:	f000 f848 	bl	800c6c8 <_fstat_r>
 800c638:	2800      	cmp	r0, #0
 800c63a:	dbec      	blt.n	800c616 <__swhatbuf_r+0x12>
 800c63c:	9901      	ldr	r1, [sp, #4]
 800c63e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c642:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c646:	4259      	negs	r1, r3
 800c648:	4159      	adcs	r1, r3
 800c64a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c64e:	e7eb      	b.n	800c628 <__swhatbuf_r+0x24>

0800c650 <__smakebuf_r>:
 800c650:	898b      	ldrh	r3, [r1, #12]
 800c652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c654:	079d      	lsls	r5, r3, #30
 800c656:	4606      	mov	r6, r0
 800c658:	460c      	mov	r4, r1
 800c65a:	d507      	bpl.n	800c66c <__smakebuf_r+0x1c>
 800c65c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c660:	6023      	str	r3, [r4, #0]
 800c662:	6123      	str	r3, [r4, #16]
 800c664:	2301      	movs	r3, #1
 800c666:	6163      	str	r3, [r4, #20]
 800c668:	b003      	add	sp, #12
 800c66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c66c:	ab01      	add	r3, sp, #4
 800c66e:	466a      	mov	r2, sp
 800c670:	f7ff ffc8 	bl	800c604 <__swhatbuf_r>
 800c674:	9f00      	ldr	r7, [sp, #0]
 800c676:	4605      	mov	r5, r0
 800c678:	4639      	mov	r1, r7
 800c67a:	4630      	mov	r0, r6
 800c67c:	f7fd fc0a 	bl	8009e94 <_malloc_r>
 800c680:	b948      	cbnz	r0, 800c696 <__smakebuf_r+0x46>
 800c682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c686:	059a      	lsls	r2, r3, #22
 800c688:	d4ee      	bmi.n	800c668 <__smakebuf_r+0x18>
 800c68a:	f023 0303 	bic.w	r3, r3, #3
 800c68e:	f043 0302 	orr.w	r3, r3, #2
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	e7e2      	b.n	800c65c <__smakebuf_r+0xc>
 800c696:	89a3      	ldrh	r3, [r4, #12]
 800c698:	6020      	str	r0, [r4, #0]
 800c69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6a6:	b15b      	cbz	r3, 800c6c0 <__smakebuf_r+0x70>
 800c6a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f000 f81d 	bl	800c6ec <_isatty_r>
 800c6b2:	b128      	cbz	r0, 800c6c0 <__smakebuf_r+0x70>
 800c6b4:	89a3      	ldrh	r3, [r4, #12]
 800c6b6:	f023 0303 	bic.w	r3, r3, #3
 800c6ba:	f043 0301 	orr.w	r3, r3, #1
 800c6be:	81a3      	strh	r3, [r4, #12]
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	431d      	orrs	r5, r3
 800c6c4:	81a5      	strh	r5, [r4, #12]
 800c6c6:	e7cf      	b.n	800c668 <__smakebuf_r+0x18>

0800c6c8 <_fstat_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4d07      	ldr	r5, [pc, #28]	@ (800c6e8 <_fstat_r+0x20>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	4611      	mov	r1, r2
 800c6d4:	602b      	str	r3, [r5, #0]
 800c6d6:	f7f5 fd41 	bl	800215c <_fstat>
 800c6da:	1c43      	adds	r3, r0, #1
 800c6dc:	d102      	bne.n	800c6e4 <_fstat_r+0x1c>
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	b103      	cbz	r3, 800c6e4 <_fstat_r+0x1c>
 800c6e2:	6023      	str	r3, [r4, #0]
 800c6e4:	bd38      	pop	{r3, r4, r5, pc}
 800c6e6:	bf00      	nop
 800c6e8:	24000664 	.word	0x24000664

0800c6ec <_isatty_r>:
 800c6ec:	b538      	push	{r3, r4, r5, lr}
 800c6ee:	4d06      	ldr	r5, [pc, #24]	@ (800c708 <_isatty_r+0x1c>)
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	4608      	mov	r0, r1
 800c6f6:	602b      	str	r3, [r5, #0]
 800c6f8:	f7f5 fd40 	bl	800217c <_isatty>
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	d102      	bne.n	800c706 <_isatty_r+0x1a>
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	b103      	cbz	r3, 800c706 <_isatty_r+0x1a>
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	24000664 	.word	0x24000664
 800c70c:	00000000 	.word	0x00000000

0800c710 <sqrt>:
 800c710:	b508      	push	{r3, lr}
 800c712:	ed2d 8b04 	vpush	{d8-d9}
 800c716:	eeb0 8b40 	vmov.f64	d8, d0
 800c71a:	f000 f91b 	bl	800c954 <__ieee754_sqrt>
 800c71e:	eeb4 8b48 	vcmp.f64	d8, d8
 800c722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c726:	d60c      	bvs.n	800c742 <sqrt+0x32>
 800c728:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800c748 <sqrt+0x38>
 800c72c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800c730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c734:	d505      	bpl.n	800c742 <sqrt+0x32>
 800c736:	f7fc fd27 	bl	8009188 <__errno>
 800c73a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c73e:	2321      	movs	r3, #33	@ 0x21
 800c740:	6003      	str	r3, [r0, #0]
 800c742:	ecbd 8b04 	vpop	{d8-d9}
 800c746:	bd08      	pop	{r3, pc}
	...

0800c750 <atan>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	eeb0 7b40 	vmov.f64	d7, d0
 800c756:	ee17 5a90 	vmov	r5, s15
 800c75a:	4b73      	ldr	r3, [pc, #460]	@ (800c928 <atan+0x1d8>)
 800c75c:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c760:	429c      	cmp	r4, r3
 800c762:	d913      	bls.n	800c78c <atan+0x3c>
 800c764:	4b71      	ldr	r3, [pc, #452]	@ (800c92c <atan+0x1dc>)
 800c766:	429c      	cmp	r4, r3
 800c768:	d803      	bhi.n	800c772 <atan+0x22>
 800c76a:	d107      	bne.n	800c77c <atan+0x2c>
 800c76c:	ee10 3a10 	vmov	r3, s0
 800c770:	b123      	cbz	r3, 800c77c <atan+0x2c>
 800c772:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c776:	eeb0 0b47 	vmov.f64	d0, d7
 800c77a:	bd38      	pop	{r3, r4, r5, pc}
 800c77c:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800c8b8 <atan+0x168>
 800c780:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800c8c0 <atan+0x170>
 800c784:	2d00      	cmp	r5, #0
 800c786:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800c78a:	e7f4      	b.n	800c776 <atan+0x26>
 800c78c:	4b68      	ldr	r3, [pc, #416]	@ (800c930 <atan+0x1e0>)
 800c78e:	429c      	cmp	r4, r3
 800c790:	d811      	bhi.n	800c7b6 <atan+0x66>
 800c792:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800c796:	429c      	cmp	r4, r3
 800c798:	d80a      	bhi.n	800c7b0 <atan+0x60>
 800c79a:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800c79e:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800c8c8 <atan+0x178>
 800c7a2:	ee30 6b06 	vadd.f64	d6, d0, d6
 800c7a6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ae:	dce2      	bgt.n	800c776 <atan+0x26>
 800c7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c7b4:	e013      	b.n	800c7de <atan+0x8e>
 800c7b6:	f000 f8c5 	bl	800c944 <fabs>
 800c7ba:	4b5e      	ldr	r3, [pc, #376]	@ (800c934 <atan+0x1e4>)
 800c7bc:	429c      	cmp	r4, r3
 800c7be:	d84f      	bhi.n	800c860 <atan+0x110>
 800c7c0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	d841      	bhi.n	800c84c <atan+0xfc>
 800c7c8:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c7cc:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	eea0 5b07 	vfma.f64	d5, d0, d7
 800c7d6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c7da:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c7de:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c8d0 <atan+0x180>
 800c7e2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c7e6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800c7ea:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c8d8 <atan+0x188>
 800c7ee:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c7f2:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c8e0 <atan+0x190>
 800c7f6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c7fa:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c8e8 <atan+0x198>
 800c7fe:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c802:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800c8f0 <atan+0x1a0>
 800c806:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c80a:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800c8f8 <atan+0x1a8>
 800c80e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c900 <atan+0x1b0>
 800c812:	eea6 3b05 	vfma.f64	d3, d6, d5
 800c816:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c908 <atan+0x1b8>
 800c81a:	eea5 2b06 	vfma.f64	d2, d5, d6
 800c81e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c910 <atan+0x1c0>
 800c822:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c826:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800c918 <atan+0x1c8>
 800c82a:	eea6 2b05 	vfma.f64	d2, d6, d5
 800c82e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800c920 <atan+0x1d0>
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	eea2 6b05 	vfma.f64	d6, d2, d5
 800c838:	ee26 6b05 	vmul.f64	d6, d6, d5
 800c83c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800c840:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c844:	d121      	bne.n	800c88a <atan+0x13a>
 800c846:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c84a:	e794      	b.n	800c776 <atan+0x26>
 800c84c:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800c850:	2301      	movs	r3, #1
 800c852:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c856:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c85a:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800c85e:	e7be      	b.n	800c7de <atan+0x8e>
 800c860:	4b35      	ldr	r3, [pc, #212]	@ (800c938 <atan+0x1e8>)
 800c862:	429c      	cmp	r4, r3
 800c864:	d20b      	bcs.n	800c87e <atan+0x12e>
 800c866:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800c86a:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800c86e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800c872:	eea0 6b07 	vfma.f64	d6, d0, d7
 800c876:	2302      	movs	r3, #2
 800c878:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800c87c:	e7af      	b.n	800c7de <atan+0x8e>
 800c87e:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800c882:	2303      	movs	r3, #3
 800c884:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800c888:	e7a9      	b.n	800c7de <atan+0x8e>
 800c88a:	4a2c      	ldr	r2, [pc, #176]	@ (800c93c <atan+0x1ec>)
 800c88c:	492c      	ldr	r1, [pc, #176]	@ (800c940 <atan+0x1f0>)
 800c88e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c892:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800c896:	ed93 5b00 	vldr	d5, [r3]
 800c89a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c89e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c8a2:	ed92 7b00 	vldr	d7, [r2]
 800c8a6:	2d00      	cmp	r5, #0
 800c8a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c8ac:	bfb8      	it	lt
 800c8ae:	eeb1 7b47 	vneglt.f64	d7, d7
 800c8b2:	e760      	b.n	800c776 <atan+0x26>
 800c8b4:	f3af 8000 	nop.w
 800c8b8:	54442d18 	.word	0x54442d18
 800c8bc:	bff921fb 	.word	0xbff921fb
 800c8c0:	54442d18 	.word	0x54442d18
 800c8c4:	3ff921fb 	.word	0x3ff921fb
 800c8c8:	8800759c 	.word	0x8800759c
 800c8cc:	7e37e43c 	.word	0x7e37e43c
 800c8d0:	e322da11 	.word	0xe322da11
 800c8d4:	3f90ad3a 	.word	0x3f90ad3a
 800c8d8:	24760deb 	.word	0x24760deb
 800c8dc:	3fa97b4b 	.word	0x3fa97b4b
 800c8e0:	a0d03d51 	.word	0xa0d03d51
 800c8e4:	3fb10d66 	.word	0x3fb10d66
 800c8e8:	c54c206e 	.word	0xc54c206e
 800c8ec:	3fb745cd 	.word	0x3fb745cd
 800c8f0:	920083ff 	.word	0x920083ff
 800c8f4:	3fc24924 	.word	0x3fc24924
 800c8f8:	5555550d 	.word	0x5555550d
 800c8fc:	3fd55555 	.word	0x3fd55555
 800c900:	52defd9a 	.word	0x52defd9a
 800c904:	bfadde2d 	.word	0xbfadde2d
 800c908:	2c6a6c2f 	.word	0x2c6a6c2f
 800c90c:	bfa2b444 	.word	0xbfa2b444
 800c910:	af749a6d 	.word	0xaf749a6d
 800c914:	bfb3b0f2 	.word	0xbfb3b0f2
 800c918:	fe231671 	.word	0xfe231671
 800c91c:	bfbc71c6 	.word	0xbfbc71c6
 800c920:	9998ebc4 	.word	0x9998ebc4
 800c924:	bfc99999 	.word	0xbfc99999
 800c928:	440fffff 	.word	0x440fffff
 800c92c:	7ff00000 	.word	0x7ff00000
 800c930:	3fdbffff 	.word	0x3fdbffff
 800c934:	3ff2ffff 	.word	0x3ff2ffff
 800c938:	40038000 	.word	0x40038000
 800c93c:	0800ce18 	.word	0x0800ce18
 800c940:	0800cdf8 	.word	0x0800cdf8

0800c944 <fabs>:
 800c944:	ec51 0b10 	vmov	r0, r1, d0
 800c948:	4602      	mov	r2, r0
 800c94a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c94e:	ec43 2b10 	vmov	d0, r2, r3
 800c952:	4770      	bx	lr

0800c954 <__ieee754_sqrt>:
 800c954:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c958:	4770      	bx	lr
	...

0800c95c <_init>:
 800c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c95e:	bf00      	nop
 800c960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c962:	bc08      	pop	{r3}
 800c964:	469e      	mov	lr, r3
 800c966:	4770      	bx	lr

0800c968 <_fini>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	bf00      	nop
 800c96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96e:	bc08      	pop	{r3}
 800c970:	469e      	mov	lr, r3
 800c972:	4770      	bx	lr
