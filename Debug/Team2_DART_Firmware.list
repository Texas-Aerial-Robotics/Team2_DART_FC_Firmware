
Team2_DART_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d290  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d58  0800d530  0800d530  0000e530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f288  0800f288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f290  0800f290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f294  0800f294  00010294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800f298  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000484  240001e0  0800f474  000111e0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000664  0800f474  00011664  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018fea  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002efd  00000000  00000000  0002a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  0002d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000eea  00000000  00000000  0002e420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038eb8  00000000  00000000  0002f30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019ba7  00000000  00000000  000681c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001696cb  00000000  00000000  00081d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001eb434  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006824  00000000  00000000  001eb478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007e  00000000  00000000  001f1c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d518 	.word	0x0800d518

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800d518 	.word	0x0800d518

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float q[4], float gx, float gy, float gz, float ax, float ay, float az) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b092      	sub	sp, #72	@ 0x48
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	61f8      	str	r0, [r7, #28]
 8000a70:	ed87 0a06 	vstr	s0, [r7, #24]
 8000a74:	edc7 0a05 	vstr	s1, [r7, #20]
 8000a78:	ed87 1a04 	vstr	s2, [r7, #16]
 8000a7c:	edc7 1a03 	vstr	s3, [r7, #12]
 8000a80:	ed87 2a02 	vstr	s4, [r7, #8]
 8000a84:	edc7 2a01 	vstr	s5, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a94:	d10e      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d107      	bne.n	8000ab4 <MahonyAHRSupdateIMU+0x4c>
 8000aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	f000 8136 	beq.w	8000d20 <MahonyAHRSupdateIMU+0x2b8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ac0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ac8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000acc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	f000 fa3c 	bl	8000f54 <invSqrt>
 8000adc:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8000ae0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ae4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aec:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 8000af0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000af4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000afc:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 8000b00:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b04:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	3304      	adds	r3, #4
 8000b14:	ed93 7a00 	vldr	s14, [r3]
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	330c      	adds	r3, #12
 8000b1c:	edd3 7a00 	vldr	s15, [r3]
 8000b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	edd3 6a00 	vldr	s13, [r3]
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	edd3 7a00 	vldr	s15, [r3]
 8000b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	ed93 7a00 	vldr	s14, [r3]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	3304      	adds	r3, #4
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	3308      	adds	r3, #8
 8000b54:	edd3 6a00 	vldr	s13, [r3]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	edd3 7a00 	vldr	s15, [r3]
 8000b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	edd3 7a00 	vldr	s15, [r3]
 8000b78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b7c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000b80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	330c      	adds	r3, #12
 8000b88:	edd3 6a00 	vldr	s13, [r3]
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	330c      	adds	r3, #12
 8000b90:	edd3 7a00 	vldr	s15, [r3]
 8000b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b9c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8000ba0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ba4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bac:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bbc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 8000bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bc4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bcc:	edd7 6a03 	vldr	s13, [r7, #12]
 8000bd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8000bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 8000be0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000be4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8000be8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bec:	edd7 6a02 	vldr	s13, [r7, #8]
 8000bf0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bfc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8000c00:	4bcd      	ldr	r3, [pc, #820]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c02:	edd3 7a00 	vldr	s15, [r3]
 8000c06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c0e:	dd54      	ble.n	8000cba <MahonyAHRSupdateIMU+0x252>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8000c10:	4bc9      	ldr	r3, [pc, #804]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c12:	ed93 7a00 	vldr	s14, [r3]
 8000c16:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c1e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c26:	4bc6      	ldr	r3, [pc, #792]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	4bc3      	ldr	r3, [pc, #780]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c32:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8000c36:	4bc0      	ldr	r3, [pc, #768]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c38:	ed93 7a00 	vldr	s14, [r3]
 8000c3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c44:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c4c:	4bbd      	ldr	r3, [pc, #756]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4bbb      	ldr	r3, [pc, #748]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8000c5c:	4bb6      	ldr	r3, [pc, #728]	@ (8000f38 <MahonyAHRSupdateIMU+0x4d0>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c6a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8000f3c <MahonyAHRSupdateIMU+0x4d4>
 8000c6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c72:	4bb5      	ldr	r3, [pc, #724]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c7c:	4bb2      	ldr	r3, [pc, #712]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000c7e:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8000c82:	4baf      	ldr	r3, [pc, #700]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c90:	edc7 7a06 	vstr	s15, [r7, #24]
			gy += integralFBy;
 8000c94:	4bab      	ldr	r3, [pc, #684]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ca2:	edc7 7a05 	vstr	s15, [r7, #20]
			gz += integralFBz;
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ca8:	edd3 7a00 	vldr	s15, [r3]
 8000cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
 8000cb8:	e00b      	b.n	8000cd2 <MahonyAHRSupdateIMU+0x26a>
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8000cba:	4ba1      	ldr	r3, [pc, #644]	@ (8000f40 <MahonyAHRSupdateIMU+0x4d8>)
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8000cc2:	4ba0      	ldr	r3, [pc, #640]	@ (8000f44 <MahonyAHRSupdateIMU+0x4dc>)
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8000cca:	4b9f      	ldr	r3, [pc, #636]	@ (8000f48 <MahonyAHRSupdateIMU+0x4e0>)
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8000cd2:	4b9e      	ldr	r3, [pc, #632]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cd4:	ed93 7a00 	vldr	s14, [r3]
 8000cd8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce8:	edc7 7a06 	vstr	s15, [r7, #24]
		gy += twoKp * halfey;
 8000cec:	4b97      	ldr	r3, [pc, #604]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000cee:	ed93 7a00 	vldr	s14, [r3]
 8000cf2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d02:	edc7 7a05 	vstr	s15, [r7, #20]
		gz += twoKp * halfez;
 8000d06:	4b91      	ldr	r3, [pc, #580]	@ (8000f4c <MahonyAHRSupdateIMU+0x4e4>)
 8000d08:	ed93 7a00 	vldr	s14, [r3]
 8000d0c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	ed97 7a04 	vldr	s14, [r7, #16]
 8000d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1c:	edc7 7a04 	vstr	s15, [r7, #16]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8000d20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d24:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	edc7 7a06 	vstr	s15, [r7, #24]
	gy *= (0.5f * (1.0f / sampleFreq));
 8000d30:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d34:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d3c:	edc7 7a05 	vstr	s15, [r7, #20]
	gz *= (0.5f * (1.0f / sampleFreq));
 8000d40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d44:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8000f50 <MahonyAHRSupdateIMU+0x4e8>
 8000d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d4c:	edc7 7a04 	vstr	s15, [r7, #16]
	qa = q[0];
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	ed93 7a00 	vldr	s14, [r3]
 8000d68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000d6c:	eef1 6a67 	vneg.f32	s13, s15
 8000d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000d78:	ed97 6a08 	vldr	s12, [r7, #32]
 8000d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	330c      	adds	r3, #12
 8000d8c:	ed93 6a00 	vldr	s12, [r3]
 8000d90:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000d98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3304      	adds	r3, #4
 8000daa:	ed93 7a00 	vldr	s14, [r3]
 8000dae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000db2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dba:	ed97 6a08 	vldr	s12, [r7, #32]
 8000dbe:	edd7 7a04 	vldr	s15, [r7, #16]
 8000dc2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dc6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	ed93 6a00 	vldr	s12, [r3]
 8000dd2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000de6:	edc3 7a00 	vstr	s15, [r3]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3308      	adds	r3, #8
 8000dee:	ed93 7a00 	vldr	s14, [r3]
 8000df2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000dfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e0a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	330c      	adds	r3, #12
 8000e12:	ed93 6a00 	vldr	s12, [r3]
 8000e16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3308      	adds	r3, #8
 8000e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2a:	edc3 7a00 	vstr	s15, [r3]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	330c      	adds	r3, #12
 8000e32:	ed93 7a00 	vldr	s14, [r3]
 8000e36:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8000e3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e42:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8000e46:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e52:	ed97 6a08 	vldr	s12, [r7, #32]
 8000e56:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	330c      	adds	r3, #12
 8000e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e6a:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	ed93 7a00 	vldr	s14, [r3]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3304      	adds	r3, #4
 8000e82:	edd3 6a00 	vldr	s13, [r3]
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3308      	adds	r3, #8
 8000e9a:	edd3 6a00 	vldr	s13, [r3]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	edd3 7a00 	vldr	s15, [r3]
 8000ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	330c      	adds	r3, #12
 8000eb2:	edd3 6a00 	vldr	s13, [r3]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	330c      	adds	r3, #12
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 f843 	bl	8000f54 <invSqrt>
 8000ece:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	ed93 7a00 	vldr	s14, [r3]
 8000ed8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	ed93 7a00 	vldr	s14, [r3]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000efa:	edc3 7a00 	vstr	s15, [r3]
	q[2] *= recipNorm;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3308      	adds	r3, #8
 8000f02:	ed93 7a00 	vldr	s14, [r3]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3308      	adds	r3, #8
 8000f0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f12:	edc3 7a00 	vstr	s15, [r3]
	q[3] *= recipNorm;
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	ed93 7a00 	vldr	s14, [r3]
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	330c      	adds	r3, #12
 8000f22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f2e:	bf00      	nop
 8000f30:	3748      	adds	r7, #72	@ 0x48
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	240001fc 	.word	0x240001fc
 8000f3c:	3b5a740e 	.word	0x3b5a740e
 8000f40:	24000200 	.word	0x24000200
 8000f44:	24000204 	.word	0x24000204
 8000f48:	24000208 	.word	0x24000208
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	3ada740e 	.word	0x3ada740e

08000f54 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8000f5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f6a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	105a      	asrs	r2, r3, #1
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <invSqrt+0x74>)
 8000f80:	1a9b      	subs	r3, r3, r2
 8000f82:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8000f8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fa0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8000fa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	ee07 3a90 	vmov	s15, r3
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	371c      	adds	r7, #28
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	5f3759df 	.word	0x5f3759df
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <bmp388_quantize_calibration>:
volatile double altitude;


// quantized values directly from the datasheet
void bmp388_quantize_calibration()
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  quantized_bmp388_calib.par_t1 = (double)bmp388_calib.par_t1 * (1 << 8);     // T1 scaling
 8000fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe0:	ed9f 6b63 	vldr	d6, [pc, #396]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 8000fe4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fe8:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8000fea:	ed83 7b00 	vstr	d7, [r3]
  quantized_bmp388_calib.par_t2 = (double)bmp388_calib.par_t2 / (1 << 30);    // T2 scaling
 8000fee:	4b76      	ldr	r3, [pc, #472]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8000ff0:	885b      	ldrh	r3, [r3, #2]
 8000ff2:	ee07 3a90 	vmov	s15, r3
 8000ff6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000ffa:	ed9f 5b5f 	vldr	d5, [pc, #380]	@ 8001178 <bmp388_quantize_calibration+0x1a8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	4b72      	ldr	r3, [pc, #456]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001004:	ed83 7b02 	vstr	d7, [r3, #8]
  quantized_bmp388_calib.par_t3 = (double)bmp388_calib.par_t3 / (1ULL << 48); // T3 scaling
 8001008:	4b6f      	ldr	r3, [pc, #444]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800100a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001016:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800101a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800101e:	4b6b      	ldr	r3, [pc, #428]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001020:	ed83 7b04 	vstr	d7, [r3, #16]

  quantized_bmp388_calib.par_p1 = ((double)bmp388_calib.par_p1 - (1 << 14)) / (1 << 20); // P1 scaling
 8001024:	4b68      	ldr	r3, [pc, #416]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001026:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800102a:	ee07 3a90 	vmov	s15, r3
 800102e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001032:	ed9f 6b55 	vldr	d6, [pc, #340]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 8001036:	ee37 6b46 	vsub.f64	d6, d7, d6
 800103a:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001190 <bmp388_quantize_calibration+0x1c0>
 800103e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001042:	4b62      	ldr	r3, [pc, #392]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001044:	ed83 7b06 	vstr	d7, [r3, #24]
  quantized_bmp388_calib.par_p2 = ((double)bmp388_calib.par_p2 - (1 << 14)) / (1 << 29); // P2 scaling
 8001048:	4b5f      	ldr	r3, [pc, #380]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800104a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001056:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 8001188 <bmp388_quantize_calibration+0x1b8>
 800105a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800105e:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8001198 <bmp388_quantize_calibration+0x1c8>
 8001062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001066:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001068:	ed83 7b08 	vstr	d7, [r3, #32]
  quantized_bmp388_calib.par_p3 = (double)bmp388_calib.par_p3 / (1ULL << 32);               // P3 scaling
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800106e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800107a:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80011a0 <bmp388_quantize_calibration+0x1d0>
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	4b52      	ldr	r3, [pc, #328]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001084:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
  quantized_bmp388_calib.par_p4 = (double)bmp388_calib.par_p4 / (1ULL << 37);            // P4 scaling
 8001088:	4b4f      	ldr	r3, [pc, #316]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800108a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001096:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80011a8 <bmp388_quantize_calibration+0x1d8>
 800109a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800109e:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010a0:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
  quantized_bmp388_calib.par_p5 = (double)bmp388_calib.par_p5 * (1 << 3);                // P5 scaling
 80010a4:	4b48      	ldr	r3, [pc, #288]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010a6:	899b      	ldrh	r3, [r3, #12]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010b0:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 80010b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b8:	4b44      	ldr	r3, [pc, #272]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010ba:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
  quantized_bmp388_calib.par_p6 = (double)bmp388_calib.par_p6 / (1 << 6);                // P6 scaling
 80010be:	4b42      	ldr	r3, [pc, #264]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010c0:	89db      	ldrh	r3, [r3, #14]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80010ca:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 80011b0 <bmp388_quantize_calibration+0x1e0>
 80010ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010d4:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40
  quantized_bmp388_calib.par_p7 = (double)bmp388_calib.par_p7 / (1 << 8);                // P7 scaling
 80010d8:	4b3b      	ldr	r3, [pc, #236]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010da:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010e6:	ed9f 5b22 	vldr	d5, [pc, #136]	@ 8001170 <bmp388_quantize_calibration+0x1a0>
 80010ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010ee:	4b37      	ldr	r3, [pc, #220]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 80010f0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
  quantized_bmp388_calib.par_p8 = (double)bmp388_calib.par_p8 / (1 << 15);               // P8 scaling
 80010f4:	4b34      	ldr	r3, [pc, #208]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 80010f6:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001102:	ed9f 5b2d 	vldr	d5, [pc, #180]	@ 80011b8 <bmp388_quantize_calibration+0x1e8>
 8001106:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800110a:	4b30      	ldr	r3, [pc, #192]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 800110c:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
  quantized_bmp388_calib.par_p9 = (double)bmp388_calib.par_p9 / (1ULL << 48);            // P9 scaling
 8001110:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	ee07 3a90 	vmov	s15, r3
 800111a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800111e:	ed9f 5b18 	vldr	d5, [pc, #96]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 8001122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001128:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
  quantized_bmp388_calib.par_p10 = (double)bmp388_calib.par_p10 / (1ULL << 48);          // P10 scaling
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800112e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800113a:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 8001180 <bmp388_quantize_calibration+0x1b0>
 800113e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001142:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001144:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
  quantized_bmp388_calib.par_p11 = (double)bmp388_calib.par_p11 / 3.6893488147419103e19;          // P11 scaling 2^65
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <bmp388_quantize_calibration+0x1f8>)
 800114a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001156:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80011c0 <bmp388_quantize_calibration+0x1f0>
 800115a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <bmp388_quantize_calibration+0x1fc>)
 8001160:	ed83 7b1a 	vstr	d7, [r3, #104]	@ 0x68
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	40700000 	.word	0x40700000
 8001178:	00000000 	.word	0x00000000
 800117c:	41d00000 	.word	0x41d00000
 8001180:	00000000 	.word	0x00000000
 8001184:	42f00000 	.word	0x42f00000
 8001188:	00000000 	.word	0x00000000
 800118c:	40d00000 	.word	0x40d00000
 8001190:	00000000 	.word	0x00000000
 8001194:	41300000 	.word	0x41300000
 8001198:	00000000 	.word	0x00000000
 800119c:	41c00000 	.word	0x41c00000
 80011a0:	00000000 	.word	0x00000000
 80011a4:	41f00000 	.word	0x41f00000
 80011a8:	00000000 	.word	0x00000000
 80011ac:	42400000 	.word	0x42400000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40500000 	.word	0x40500000
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40e00000 	.word	0x40e00000
 80011c0:	00000000 	.word	0x00000000
 80011c4:	44000000 	.word	0x44000000
 80011c8:	2400020c 	.word	0x2400020c
 80011cc:	24000228 	.word	0x24000228

080011d0 <bmp388_write_reg>:

void bmp388_write_reg(uint8_t reg, uint8_t data)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2140      	movs	r1, #64	@ 0x40
 80011e4:	480b      	ldr	r0, [pc, #44]	@ (8001214 <bmp388_write_reg+0x44>)
 80011e6:	f001 ff01 	bl	8002fec <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &reg, 1, 100);
 80011ea:	1df9      	adds	r1, r7, #7
 80011ec:	2364      	movs	r3, #100	@ 0x64
 80011ee:	2201      	movs	r2, #1
 80011f0:	4809      	ldr	r0, [pc, #36]	@ (8001218 <bmp388_write_reg+0x48>)
 80011f2:	f004 fe85 	bl	8005f00 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80011f6:	1db9      	adds	r1, r7, #6
 80011f8:	2364      	movs	r3, #100	@ 0x64
 80011fa:	2201      	movs	r2, #1
 80011fc:	4806      	ldr	r0, [pc, #24]	@ (8001218 <bmp388_write_reg+0x48>)
 80011fe:	f004 fe7f 	bl	8005f00 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2140      	movs	r1, #64	@ 0x40
 8001206:	4803      	ldr	r0, [pc, #12]	@ (8001214 <bmp388_write_reg+0x44>)
 8001208:	f001 fef0 	bl	8002fec <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58020000 	.word	0x58020000
 8001218:	24000348 	.word	0x24000348

0800121c <bmp388_read_reg>:

void bmp388_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint8_t dummy;
  uint8_t temp_data = 0x80 | reg;
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2140      	movs	r1, #64	@ 0x40
 800123a:	4817      	ldr	r0, [pc, #92]	@ (8001298 <bmp388_read_reg+0x7c>)
 800123c:	f001 fed6 	bl	8002fec <HAL_GPIO_WritePin>
  HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, &temp_data, 1, 100);
 8001240:	f107 010d 	add.w	r1, r7, #13
 8001244:	2364      	movs	r3, #100	@ 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <bmp388_read_reg+0x80>)
 800124a:	f004 fe59 	bl	8005f00 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <bmp388_read_reg+0x40>
    Error_Handler();
 8001258:	f000 fd1a 	bl	8001c90 <Error_Handler>
  HAL_SPI_Receive(&hspi2, &dummy, 1, 100);
 800125c:	f107 010e 	add.w	r1, r7, #14
 8001260:	2364      	movs	r3, #100	@ 0x64
 8001262:	2201      	movs	r2, #1
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <bmp388_read_reg+0x80>)
 8001266:	f005 f839 	bl	80062dc <HAL_SPI_Receive>
  ret = HAL_SPI_Receive(&hspi2, data, len, 100);
 800126a:	79bb      	ldrb	r3, [r7, #6]
 800126c:	b29a      	uxth	r2, r3
 800126e:	2364      	movs	r3, #100	@ 0x64
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	480a      	ldr	r0, [pc, #40]	@ (800129c <bmp388_read_reg+0x80>)
 8001274:	f005 f832 	bl	80062dc <HAL_SPI_Receive>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <bmp388_read_reg+0x6a>
    Error_Handler();
 8001282:	f000 fd05 	bl	8001c90 <Error_Handler>
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8001286:	2201      	movs	r2, #1
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4803      	ldr	r0, [pc, #12]	@ (8001298 <bmp388_read_reg+0x7c>)
 800128c:	f001 feae 	bl	8002fec <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	58020000 	.word	0x58020000
 800129c:	24000348 	.word	0x24000348

080012a0 <bmp388_setup>:
void bmp388_setup()
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  bmp388_write_reg(0x7E, 0xB6); // Soft reset
 80012a6:	21b6      	movs	r1, #182	@ 0xb6
 80012a8:	207e      	movs	r0, #126	@ 0x7e
 80012aa:	f7ff ff91 	bl	80011d0 <bmp388_write_reg>
  HAL_Delay(10); // Wait for reset to complete
 80012ae:	200a      	movs	r0, #10
 80012b0:	f001 fb34 	bl	800291c <HAL_Delay>
  uint8_t calib_data[21];
  uint8_t chip[2];
  bmp388_read_reg(0x31, calib_data, 21);
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	2215      	movs	r2, #21
 80012ba:	4619      	mov	r1, r3
 80012bc:	2031      	movs	r0, #49	@ 0x31
 80012be:	f7ff ffad 	bl	800121c <bmp388_read_reg>
  bmp388_read_reg(0x00, chip, 2);
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2202      	movs	r2, #2
 80012c6:	4619      	mov	r1, r3
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff ffa7 	bl	800121c <bmp388_read_reg>
  // register of calibration data, starts from 0x31 to 0x45 all details in datasheet
  bmp388_calib.par_t1 = (uint16_t)calib_data[0] | ((uint16_t)calib_data[1] << 8);
 80012ce:	7a3b      	ldrb	r3, [r7, #8]
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	7a7b      	ldrb	r3, [r7, #9]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21b      	sxth	r3, r3
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	@ (80013c0 <bmp388_setup+0x120>)
 80012e0:	801a      	strh	r2, [r3, #0]
  bmp388_calib.par_t2 = (uint16_t)(calib_data[2] | ((uint16_t)calib_data[3] << 8));
 80012e2:	7abb      	ldrb	r3, [r7, #10]
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7afb      	ldrb	r3, [r7, #11]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4313      	orrs	r3, r2
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4b33      	ldr	r3, [pc, #204]	@ (80013c0 <bmp388_setup+0x120>)
 80012f4:	805a      	strh	r2, [r3, #2]
  bmp388_calib.par_t3 = (int8_t)calib_data[4];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	b25a      	sxtb	r2, r3
 80012fa:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <bmp388_setup+0x120>)
 80012fc:	711a      	strb	r2, [r3, #4]
  bmp388_calib.par_p1 = (int16_t)(calib_data[5] | ((uint16_t)calib_data[6] << 8));
 80012fe:	7b7b      	ldrb	r3, [r7, #13]
 8001300:	b21a      	sxth	r2, r3
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <bmp388_setup+0x120>)
 800130e:	80da      	strh	r2, [r3, #6]
  bmp388_calib.par_p2 = (int16_t)(calib_data[7] | ((uint16_t)calib_data[8] << 8));
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	b21a      	sxth	r2, r3
 8001314:	7c3b      	ldrb	r3, [r7, #16]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21a      	sxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <bmp388_setup+0x120>)
 8001320:	811a      	strh	r2, [r3, #8]
  bmp388_calib.par_p3 = (int8_t)calib_data[9];
 8001322:	7c7b      	ldrb	r3, [r7, #17]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <bmp388_setup+0x120>)
 8001328:	729a      	strb	r2, [r3, #10]
  bmp388_calib.par_p4 = (int8_t)calib_data[10];
 800132a:	7cbb      	ldrb	r3, [r7, #18]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <bmp388_setup+0x120>)
 8001330:	72da      	strb	r2, [r3, #11]
  bmp388_calib.par_p5 = (uint16_t)calib_data[11] | ((uint16_t)calib_data[12] << 8);
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	b21a      	sxth	r2, r3
 8001336:	7d3b      	ldrb	r3, [r7, #20]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	b21b      	sxth	r3, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <bmp388_setup+0x120>)
 8001344:	819a      	strh	r2, [r3, #12]
  bmp388_calib.par_p6 = (uint16_t)calib_data[13] | ((uint16_t)calib_data[14] << 8);
 8001346:	7d7b      	ldrb	r3, [r7, #21]
 8001348:	b21a      	sxth	r2, r3
 800134a:	7dbb      	ldrb	r3, [r7, #22]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <bmp388_setup+0x120>)
 8001358:	81da      	strh	r2, [r3, #14]
  bmp388_calib.par_p7 = (int8_t)calib_data[15];
 800135a:	7dfb      	ldrb	r3, [r7, #23]
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <bmp388_setup+0x120>)
 8001360:	741a      	strb	r2, [r3, #16]
  bmp388_calib.par_p8 = (int8_t)calib_data[16];
 8001362:	7e3b      	ldrb	r3, [r7, #24]
 8001364:	b25a      	sxtb	r2, r3
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <bmp388_setup+0x120>)
 8001368:	745a      	strb	r2, [r3, #17]
  bmp388_calib.par_p9 = (int16_t)(calib_data[17] | ((uint16_t)calib_data[18] << 8));
 800136a:	7e7b      	ldrb	r3, [r7, #25]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <bmp388_setup+0x120>)
 800137a:	825a      	strh	r2, [r3, #18]
  bmp388_calib.par_p10 = (int8_t)calib_data[19];
 800137c:	7efb      	ldrb	r3, [r7, #27]
 800137e:	b25a      	sxtb	r2, r3
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <bmp388_setup+0x120>)
 8001382:	751a      	strb	r2, [r3, #20]
  bmp388_calib.par_p11 = (int8_t)calib_data[20];
 8001384:	7f3b      	ldrb	r3, [r7, #28]
 8001386:	b25a      	sxtb	r2, r3
 8001388:	4b0d      	ldr	r3, [pc, #52]	@ (80013c0 <bmp388_setup+0x120>)
 800138a:	755a      	strb	r2, [r3, #21]

  bmp388_quantize_calibration(); // get the quantized calibration values for easier math later
 800138c:	f7ff fe20 	bl	8000fd0 <bmp388_quantize_calibration>
  bmp388_write_reg(0x1A, 0x00);
 8001390:	2100      	movs	r1, #0
 8001392:	201a      	movs	r0, #26
 8001394:	f7ff ff1c 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1B, 0x33);  // normal mode, temp pressure on by default with it
 8001398:	2133      	movs	r1, #51	@ 0x33
 800139a:	201b      	movs	r0, #27
 800139c:	f7ff ff18 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1C, 0x03);  // bits 5-3 are temperature oversampling, and 2-0 are pressure oversampling
 80013a0:	2103      	movs	r1, #3
 80013a2:	201c      	movs	r0, #28
 80013a4:	f7ff ff14 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1D, 0x02);  // ODR 50Hz, 20ms
 80013a8:	2102      	movs	r1, #2
 80013aa:	201d      	movs	r0, #29
 80013ac:	f7ff ff10 	bl	80011d0 <bmp388_write_reg>
  bmp388_write_reg(0x1F, 0x04);  // coefficient for IIR filter, ideally low value for the dart
 80013b0:	2104      	movs	r1, #4
 80013b2:	201f      	movs	r0, #31
 80013b4:	f7ff ff0c 	bl	80011d0 <bmp388_write_reg>
}
 80013b8:	bf00      	nop
 80013ba:	3720      	adds	r7, #32
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400020c 	.word	0x2400020c

080013c4 <bmp388_read_raw_data>:

void bmp388_read_raw_data()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
  uint8_t data[6];
  bmp388_read_reg(0x04, data, 6); // 0x04-0x06 pressure, 0x07-0x09 temperature
 80013ca:	463b      	mov	r3, r7
 80013cc:	2206      	movs	r2, #6
 80013ce:	4619      	mov	r1, r3
 80013d0:	2004      	movs	r0, #4
 80013d2:	f7ff ff23 	bl	800121c <bmp388_read_reg>
  bmp388_rawData.pressure = (((int32_t)data[2] << 16) | ((int32_t)data[1] << 8) | ((int32_t)data[0]));
 80013d6:	78bb      	ldrb	r3, [r7, #2]
 80013d8:	041a      	lsls	r2, r3, #16
 80013da:	787b      	ldrb	r3, [r7, #1]
 80013dc:	021b      	lsls	r3, r3, #8
 80013de:	4313      	orrs	r3, r2
 80013e0:	783a      	ldrb	r2, [r7, #0]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013e8:	605a      	str	r2, [r3, #4]
  bmp388_rawData.temperature = (((int32_t)data[5] << 16) | ((int32_t)data[4] << 8) | ((int32_t)data[3]));
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	793b      	ldrb	r3, [r7, #4]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	4313      	orrs	r3, r2
 80013f4:	78fa      	ldrb	r2, [r7, #3]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <bmp388_read_raw_data+0x44>)
 80013fc:	601a      	str	r2, [r3, #0]

}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	240002a0 	.word	0x240002a0

0800140c <bmp388_compensated_temperature>:

// the math performed in both functions are directly from the datasheet
static double bmp388_compensated_temperature(uint32_t raw_temp)
{
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  double partial_data1 = (double)(raw_temp)-quantized_bmp388_calib.par_t1;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800141e:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001428:	ed87 7b04 	vstr	d7, [r7, #16]
  double partial_data2 = partial_data1 * quantized_bmp388_calib.par_t2;
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800142e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001432:	ed97 6b04 	vldr	d6, [r7, #16]
 8001436:	ee26 7b07 	vmul.f64	d7, d6, d7
 800143a:	ed87 7b02 	vstr	d7, [r7, #8]
  quantized_bmp388_calib.t_lin = partial_data2 + (partial_data1 * partial_data1) * quantized_bmp388_calib.par_t3;
 800143e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001442:	ee27 6b07 	vmul.f64	d6, d7, d7
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001448:	ed93 7b04 	vldr	d7, [r3, #16]
 800144c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001450:	ed97 7b02 	vldr	d7, [r7, #8]
 8001454:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 800145a:	ed83 7b1c 	vstr	d7, [r3, #112]	@ 0x70
  return quantized_bmp388_calib.t_lin;
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <bmp388_compensated_temperature+0x6c>)
 8001460:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001464:	ec43 2b17 	vmov	d7, r2, r3
}
 8001468:	eeb0 0b47 	vmov.f64	d0, d7
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	24000228 	.word	0x24000228

0800147c <bmp388_compensated_pressure>:

static double bmp388_compensated_pressure(uint32_t raw_pressure)
{
 800147c:	b480      	push	{r7}
 800147e:	b091      	sub	sp, #68	@ 0x44
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  double pressure;
  double partial_data1, partial_data2, partial_data3, partial_data4;
  double partial_out1, partial_out2;

  partial_data1 = quantized_bmp388_calib.par_p6 * quantized_bmp388_calib.t_lin;
 8001484:	4b6e      	ldr	r3, [pc, #440]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001486:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 800148a:	4b6d      	ldr	r3, [pc, #436]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800148c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001490:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001494:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p7 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001498:	4b69      	ldr	r3, [pc, #420]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800149a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800149e:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014a0:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014a4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014a8:	4b65      	ldr	r3, [pc, #404]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014aa:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014ae:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014b2:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p8 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 80014b6:	4b62      	ldr	r3, [pc, #392]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014b8:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014be:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014c2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014c8:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80014d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014d2:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80014d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014da:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out1 = quantized_bmp388_calib.par_p5 + partial_data1 + partial_data2 + partial_data3;
 80014de:	4b58      	ldr	r3, [pc, #352]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80014e0:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 80014e4:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80014f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014f4:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 80014f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fc:	ed87 7b08 	vstr	d7, [r7, #32]

  partial_data1 = quantized_bmp388_calib.par_p2 * quantized_bmp388_calib.t_lin;
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001502:	ed93 6b08 	vldr	d6, [r3, #32]
 8001506:	4b4e      	ldr	r3, [pc, #312]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001508:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800150c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001510:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p3 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001514:	4b4a      	ldr	r3, [pc, #296]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001516:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800151c:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001524:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001526:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800152a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800152e:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = quantized_bmp388_calib.par_p4 * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin * quantized_bmp388_calib.t_lin;
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001534:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8001538:	4b41      	ldr	r3, [pc, #260]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800153a:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 800153e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001542:	4b3f      	ldr	r3, [pc, #252]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001544:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001548:	ee26 6b07 	vmul.f64	d6, d6, d7
 800154c:	4b3c      	ldr	r3, [pc, #240]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 800154e:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8001552:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001556:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_out2 = (double)raw_pressure * (quantized_bmp388_calib.par_p1 + partial_data1 + partial_data2 + partial_data3);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001564:	4b36      	ldr	r3, [pc, #216]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 8001566:	ed93 5b06 	vldr	d5, [r3, #24]
 800156a:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800156e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001572:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8001576:	ee35 5b07 	vadd.f64	d5, d5, d7
 800157a:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800157e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001582:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001586:	ed87 7b06 	vstr	d7, [r7, #24]

  partial_data1 = (double)raw_pressure * (double)raw_pressure;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ee07 3a90 	vmov	s15, r3
 800159a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800159e:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015a2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  partial_data2 = quantized_bmp388_calib.par_p9 + quantized_bmp388_calib.par_p10 * quantized_bmp388_calib.t_lin;
 80015a6:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015a8:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 80015ac:	4b24      	ldr	r3, [pc, #144]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015ae:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80015b2:	4b23      	ldr	r3, [pc, #140]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015b4:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 80015b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c0:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
  partial_data3 = partial_data1 * partial_data2;
 80015c4:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 80015c8:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 80015cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015d0:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
  partial_data4 = partial_data3 + ((double)raw_pressure * (double)raw_pressure * (double)raw_pressure) * quantized_bmp388_calib.par_p11;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80015f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015fa:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <bmp388_compensated_pressure+0x1c4>)
 80015fc:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8001600:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001604:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 8001608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800160c:	ed87 7b04 	vstr	d7, [r7, #16]

  pressure = partial_out1 + partial_out2 + partial_data4;
 8001610:	ed97 6b08 	vldr	d6, [r7, #32]
 8001614:	ed97 7b06 	vldr	d7, [r7, #24]
 8001618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800161c:	ed97 6b04 	vldr	d6, [r7, #16]
 8001620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001624:	ed87 7b02 	vstr	d7, [r7, #8]

  return pressure;
 8001628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800162c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001630:	eeb0 0b47 	vmov.f64	d0, d7
 8001634:	3744      	adds	r7, #68	@ 0x44
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	24000228 	.word	0x24000228
 8001644:	00000000 	.word	0x00000000

08001648 <bmp388_getAltitude>:
double bmp388_getAltitude(double pressure)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	ed87 0b00 	vstr	d0, [r7]
	double altitude = 44330 * (1-pow(pressure/1019.0e2, 0.190294)); // pressure divided by pressure of sea level at austin
 8001652:	ed97 7b00 	vldr	d7, [r7]
 8001656:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 8001698 <bmp388_getAltitude+0x50>
 800165a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800165e:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 80016a0 <bmp388_getAltitude+0x58>
 8001662:	eeb0 0b46 	vmov.f64	d0, d6
 8001666:	f00b fa37 	bl	800cad8 <pow>
 800166a:	eeb0 7b40 	vmov.f64	d7, d0
 800166e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8001672:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001676:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 80016a8 <bmp388_getAltitude+0x60>
 800167a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167e:	ed87 7b02 	vstr	d7, [r7, #8]
	return altitude;
 8001682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001686:	ec43 2b17 	vmov	d7, r2, r3
}
 800168a:	eeb0 0b47 	vmov.f64	d0, d7
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	00000000 	.word	0x00000000
 800169c:	40f8e0c0 	.word	0x40f8e0c0
 80016a0:	c55000c9 	.word	0xc55000c9
 80016a4:	3fc85b8d 	.word	0x3fc85b8d
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40e5a540 	.word	0x40e5a540

080016b0 <bmp388_getData>:

void bmp388_getData()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  bmp388_read_raw_data();
 80016b4:	f7ff fe86 	bl	80013c4 <bmp388_read_raw_data>
  bmp388_processedData.temperature = bmp388_compensated_temperature(bmp388_rawData.temperature);
 80016b8:	4b10      	ldr	r3, [pc, #64]	@ (80016fc <bmp388_getData+0x4c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fea5 	bl	800140c <bmp388_compensated_temperature>
 80016c2:	eeb0 7b40 	vmov.f64	d7, d0
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <bmp388_getData+0x50>)
 80016c8:	ed83 7b00 	vstr	d7, [r3]
  bmp388_processedData.pressure = bmp388_compensated_pressure(bmp388_rawData.pressure);
 80016cc:	4b0b      	ldr	r3, [pc, #44]	@ (80016fc <bmp388_getData+0x4c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fed3 	bl	800147c <bmp388_compensated_pressure>
 80016d6:	eeb0 7b40 	vmov.f64	d7, d0
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <bmp388_getData+0x50>)
 80016dc:	ed83 7b02 	vstr	d7, [r3, #8]
  altitude = bmp388_getAltitude(bmp388_processedData.pressure);
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <bmp388_getData+0x50>)
 80016e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80016e6:	eeb0 0b47 	vmov.f64	d0, d7
 80016ea:	f7ff ffad 	bl	8001648 <bmp388_getAltitude>
 80016ee:	eeb0 7b40 	vmov.f64	d7, d0
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <bmp388_getData+0x54>)
 80016f4:	ed83 7b00 	vstr	d7, [r3]
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	240002a0 	.word	0x240002a0
 8001700:	240002a8 	.word	0x240002a8
 8001704:	240002b8 	.word	0x240002b8

08001708 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001710:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001714:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001720:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001724:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001728:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001730:	e000      	b.n	8001734 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001732:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001734:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800173e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800175e:	f000 fa6b 	bl	8001c38 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 f849 	bl	80027f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f82b 	bl	80017c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 f9ef 	bl	8001b4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800176e:	f000 f9a1 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001772:	f000 f8a1 	bl	80018b8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001776:	f000 f94f 	bl	8001a18 <MX_TIM2_Init>
  MX_SPI2_Init();
 800177a:	f000 f8f5 	bl	8001968 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);  // Enable TIM2 interrupt
 800177e:	480e      	ldr	r0, [pc, #56]	@ (80017b8 <main+0x60>)
 8001780:	f005 f95e 	bl	8006a40 <HAL_TIM_Base_Start_IT>
  char buffer[40] = {'\0'};
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2224      	movs	r2, #36	@ 0x24
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f007 fe23 	bl	80093da <memset>
  mpu9250_setup();
 8001794:	f000 fae4 	bl	8001d60 <mpu9250_setup>
  bmp388_setup();
 8001798:	f7ff fd82 	bl	80012a0 <bmp388_setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //process IMU data on timer interrupt
	  if(timer_flag)
 800179c:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <main+0x64>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d0fa      	beq.n	800179c <main+0x44>
	  {
		  timer_flag = 0;	//reset timer flag
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <main+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]

		  mpu9250_getProcessedAngle();
 80017ac:	f000 fbb4 	bl	8001f18 <mpu9250_getProcessedAngle>
		  bmp388_getData();
 80017b0:	f7ff ff7e 	bl	80016b0 <bmp388_getData>
	  if(timer_flag)
 80017b4:	e7f2      	b.n	800179c <main+0x44>
 80017b6:	bf00      	nop
 80017b8:	240003d0 	.word	0x240003d0
 80017bc:	240004b0 	.word	0x240004b0

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b09c      	sub	sp, #112	@ 0x70
 80017c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ca:	224c      	movs	r2, #76	@ 0x4c
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fe03 	bl	80093da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2220      	movs	r2, #32
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 fdfd 	bl	80093da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80017e0:	2002      	movs	r0, #2
 80017e2:	f001 fc1d 	bl	8003020 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4b31      	ldr	r3, [pc, #196]	@ (80018b0 <SystemClock_Config+0xf0>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a30      	ldr	r2, [pc, #192]	@ (80018b0 <SystemClock_Config+0xf0>)
 80017f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <SystemClock_Config+0xf0>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4b2c      	ldr	r3, [pc, #176]	@ (80018b4 <SystemClock_Config+0xf4>)
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	4a2b      	ldr	r2, [pc, #172]	@ (80018b4 <SystemClock_Config+0xf4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <SystemClock_Config+0xf4>)
 800180e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001818:	bf00      	nop
 800181a:	4b25      	ldr	r3, [pc, #148]	@ (80018b0 <SystemClock_Config+0xf0>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001826:	d1f8      	bne.n	800181a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001828:	2302      	movs	r3, #2
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800182c:	2301      	movs	r3, #1
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001830:	2340      	movs	r3, #64	@ 0x40
 8001832:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001834:	2302      	movs	r3, #2
 8001836:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001838:	2300      	movs	r3, #0
 800183a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800183c:	2304      	movs	r3, #4
 800183e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001840:	233c      	movs	r3, #60	@ 0x3c
 8001842:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001844:	2302      	movs	r3, #2
 8001846:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001848:	2305      	movs	r3, #5
 800184a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800184c:	2302      	movs	r3, #2
 800184e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001850:	230c      	movs	r3, #12
 8001852:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001854:	2300      	movs	r3, #0
 8001856:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800185c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001860:	4618      	mov	r0, r3
 8001862:	f001 fc17 	bl	8003094 <HAL_RCC_OscConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800186c:	f000 fa10 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001870:	233f      	movs	r3, #63	@ 0x3f
 8001872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001874:	2303      	movs	r3, #3
 8001876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800187c:	2308      	movs	r3, #8
 800187e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001880:	2340      	movs	r3, #64	@ 0x40
 8001882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001884:	2340      	movs	r3, #64	@ 0x40
 8001886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800188c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800188e:	2340      	movs	r3, #64	@ 0x40
 8001890:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2104      	movs	r1, #4
 8001896:	4618      	mov	r0, r3
 8001898:	f002 f856 	bl	8003948 <HAL_RCC_ClockConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018a2:	f000 f9f5 	bl	8001c90 <Error_Handler>
  }
}
 80018a6:	bf00      	nop
 80018a8:	3770      	adds	r7, #112	@ 0x70
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	58024800 	.word	0x58024800
 80018b4:	58000400 	.word	0x58000400

080018b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018be:	4a29      	ldr	r2, [pc, #164]	@ (8001964 <MX_SPI1_Init+0xac>)
 80018c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018c4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80018c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018d2:	2207      	movs	r2, #7
 80018d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018d6:	4b22      	ldr	r3, [pc, #136]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018e8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80018ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_SPI1_Init+0xa8>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_SPI1_Init+0xa8>)
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001910:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001914:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001916:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001918:	2200      	movs	r2, #0
 800191a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800191c:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <MX_SPI1_Init+0xa8>)
 800191e:	2200      	movs	r2, #0
 8001920:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001922:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001924:	2200      	movs	r2, #0
 8001926:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <MX_SPI1_Init+0xa8>)
 800192a:	2200      	movs	r2, #0
 800192c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001930:	2200      	movs	r2, #0
 8001932:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001936:	2200      	movs	r2, #0
 8001938:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <MX_SPI1_Init+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001942:	2200      	movs	r2, #0
 8001944:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <MX_SPI1_Init+0xa8>)
 8001948:	2200      	movs	r2, #0
 800194a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	@ (8001960 <MX_SPI1_Init+0xa8>)
 800194e:	f004 f9b3 	bl	8005cb8 <HAL_SPI_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001958:	f000 f99a 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	240002c0 	.word	0x240002c0
 8001964:	40013000 	.word	0x40013000

08001968 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 800196e:	4a29      	ldr	r2, [pc, #164]	@ (8001a14 <MX_SPI2_Init+0xac>)
 8001970:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 8001974:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001978:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 8001982:	2207      	movs	r2, #7
 8001984:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001986:	4b22      	ldr	r3, [pc, #136]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 8001988:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800198c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 8001990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001994:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 8001998:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800199c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019a0:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 80019a4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ac:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_SPI2_Init+0xa8>)
 80019fe:	f004 f95b 	bl	8005cb8 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a08:	f000 f942 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000348 	.word	0x24000348
 8001a14:	40003800 	.word	0x40003800

08001a18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a40:	f240 321f 	movw	r2, #799	@ 0x31f
 8001a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a54:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a60:	4813      	ldr	r0, [pc, #76]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a62:	f004 ff96 	bl	8006992 <HAL_TIM_Base_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a6c:	f000 f910 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a7e:	f005 f95f 	bl	8006d40 <HAL_TIM_ConfigClockSource>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a88:	f000 f902 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_TIM2_Init+0x98>)
 8001a9a:	f005 fbaf 	bl	80071fc <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001aa4:	f000 f8f4 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	240003d0 	.word	0x240003d0

08001ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001aba:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <MX_USART2_UART_Init+0x94>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afc:	4811      	ldr	r0, [pc, #68]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001afe:	f005 fc29 	bl	8007354 <HAL_UART_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001b08:	f000 f8c2 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001b10:	f006 fc31 	bl	8008376 <HAL_UARTEx_SetTxFifoThreshold>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001b1a:	f000 f8b9 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4808      	ldr	r0, [pc, #32]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001b22:	f006 fc66 	bl	80083f2 <HAL_UARTEx_SetRxFifoThreshold>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001b2c:	f000 f8b0 	bl	8001c90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <MX_USART2_UART_Init+0x90>)
 8001b32:	f006 fbe7 	bl	8008304 <HAL_UARTEx_DisableFifoMode>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f000 f8a8 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	2400041c 	.word	0x2400041c
 8001b48:	40004400 	.word	0x40004400

08001b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b68:	4a18      	ldr	r2, [pc, #96]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b72:	4b16      	ldr	r3, [pc, #88]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b86:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <MX_GPIO_Init+0x80>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2160      	movs	r1, #96	@ 0x60
 8001ba2:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <MX_GPIO_Init+0x84>)
 8001ba4:	f001 fa22 	bl	8002fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI1_CS_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|SPI2_CS_Pin;
 8001ba8:	2360      	movs	r3, #96	@ 0x60
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <MX_GPIO_Init+0x84>)
 8001bc0:	f001 f864 	bl	8002c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	58024400 	.word	0x58024400
 8001bd0:	58020000 	.word	0x58020000

08001bd4 <HAL_TIM_PeriodElapsedCallback>:
    double dt = current_time - previous_time;
    previous_time = current_time;  // Update for the next call
    return dt;
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
	}
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	240003d0 	.word	0x240003d0
 8001bfc:	240004b0 	.word	0x240004b0

08001c00 <_write>:
int _write(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e009      	b.n	8001c26 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fd74 	bl	8001708 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dbf1      	blt.n	8001c12 <_write+0x12>
	}
	return len;
 8001c2e:	687b      	ldr	r3, [r7, #4]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001c4a:	f000 ffa7 	bl	8002b9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001c5a:	231f      	movs	r3, #31
 8001c5c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001c5e:	2387      	movs	r3, #135	@ 0x87
 8001c60:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001c66:	2300      	movs	r3, #0
 8001c68:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001c7a:	463b      	mov	r3, r7
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 ffc5 	bl	8002c0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001c82:	2004      	movs	r0, #4
 8001c84:	f000 ffa2 	bl	8002bcc <HAL_MPU_Enable>

}
 8001c88:	bf00      	nop
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <Error_Handler+0x8>

08001c9c <mpu9250_write_reg>:
Mag_CalibData_t mag_calibration_data;

float quat[4];

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460a      	mov	r2, r1
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2120      	movs	r1, #32
 8001cb0:	480b      	ldr	r0, [pc, #44]	@ (8001ce0 <mpu9250_write_reg+0x44>)
 8001cb2:	f001 f99b 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001cb6:	1df9      	adds	r1, r7, #7
 8001cb8:	2364      	movs	r3, #100	@ 0x64
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4809      	ldr	r0, [pc, #36]	@ (8001ce4 <mpu9250_write_reg+0x48>)
 8001cbe:	f004 f91f 	bl	8005f00 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001cc2:	1db9      	adds	r1, r7, #6
 8001cc4:	2364      	movs	r3, #100	@ 0x64
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <mpu9250_write_reg+0x48>)
 8001cca:	f004 f919 	bl	8005f00 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2120      	movs	r1, #32
 8001cd2:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <mpu9250_write_reg+0x44>)
 8001cd4:	f001 f98a 	bl	8002fec <HAL_GPIO_WritePin>
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58020000 	.word	0x58020000
 8001ce4:	240002c0 	.word	0x240002c0

08001ce8 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2120      	movs	r1, #32
 8001d06:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <mpu9250_read_reg+0x70>)
 8001d08:	f001 f970 	bl	8002fec <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001d0c:	f107 010e 	add.w	r1, r7, #14
 8001d10:	2364      	movs	r3, #100	@ 0x64
 8001d12:	2201      	movs	r2, #1
 8001d14:	4811      	ldr	r0, [pc, #68]	@ (8001d5c <mpu9250_read_reg+0x74>)
 8001d16:	f004 f8f3 	bl	8005f00 <HAL_SPI_Transmit>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <mpu9250_read_reg+0x40>
		Error_Handler();
 8001d24:	f7ff ffb4 	bl	8001c90 <Error_Handler>
	ret = HAL_SPI_Receive(&hspi1, data, len, 100);
 8001d28:	79bb      	ldrb	r3, [r7, #6]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2364      	movs	r3, #100	@ 0x64
 8001d2e:	6839      	ldr	r1, [r7, #0]
 8001d30:	480a      	ldr	r0, [pc, #40]	@ (8001d5c <mpu9250_read_reg+0x74>)
 8001d32:	f004 fad3 	bl	80062dc <HAL_SPI_Receive>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]
	if(ret != HAL_OK)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <mpu9250_read_reg+0x5c>
		Error_Handler();
 8001d40:	f7ff ffa6 	bl	8001c90 <Error_Handler>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001d44:	2201      	movs	r2, #1
 8001d46:	2120      	movs	r1, #32
 8001d48:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <mpu9250_read_reg+0x70>)
 8001d4a:	f001 f94f 	bl	8002fec <HAL_GPIO_WritePin>
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	58020000 	.word	0x58020000
 8001d5c:	240002c0 	.word	0x240002c0

08001d60 <mpu9250_setup>:

void mpu9250_setup()
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
	mpu9250_write_reg(26, 0x05);		//enable digital low pass filter
 8001d64:	2105      	movs	r1, #5
 8001d66:	201a      	movs	r0, #26
 8001d68:	f7ff ff98 	bl	8001c9c <mpu9250_write_reg>
	mpu9250_write_reg(28, 0x10);		//set accelerometer full scale to +-8g
 8001d6c:	2110      	movs	r1, #16
 8001d6e:	201c      	movs	r0, #28
 8001d70:	f7ff ff94 	bl	8001c9c <mpu9250_write_reg>
	mpu9250_write_reg(27, 0x08);		//set gyroscope full scale full scale to +-500deg
 8001d74:	2108      	movs	r1, #8
 8001d76:	201b      	movs	r0, #27
 8001d78:	f7ff ff90 	bl	8001c9c <mpu9250_write_reg>
	mpu9250_calibrateGyro(1500);
 8001d7c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001d80:	f000 f814 	bl	8001dac <mpu9250_calibrateGyro>
	quat[0] = 1.0f;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <mpu9250_setup+0x48>)
 8001d86:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d8a:	601a      	str	r2, [r3, #0]
	quat[1] = 0.0f;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <mpu9250_setup+0x48>)
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
	quat[2] = 0.0f;
 8001d94:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <mpu9250_setup+0x48>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
	quat[3] = 0.0f;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	@ (8001da8 <mpu9250_setup+0x48>)
 8001d9e:	f04f 0200 	mov.w	r2, #0
 8001da2:	60da      	str	r2, [r3, #12]
//	// magnetometer setup
//	mpu9250_write_reg(0x6A, 0x20);
//	mpu9250_write_reg(0x24, 0x0D);
//	mpu9250_write_reg(0x25, 0x8C);
//	mpu9250_write_reg(0x26, 0x03);
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	24000500 	.word	0x24000500

08001dac <mpu9250_calibrateGyro>:
    mpu9250_write_reg(0x26, 0x03);                   // Start at HXL register
    mpu9250_write_reg(0x27, 0x87);                   // Enable reading 7 bytes (0x80 | 7)
}

void mpu9250_calibrateGyro(uint16_t numCalPoints)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
    // Init
    int32_t x = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
    int32_t z = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]

    // Zero guard
    if (numCalPoints == 0)
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <mpu9250_calibrateGyro+0x20>
    {
        numCalPoints = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	80fb      	strh	r3, [r7, #6]
    }

    // Save specified number of points
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	e01c      	b.n	8001e0c <mpu9250_calibrateGyro+0x60>
    {
        mpu9250_getRawData();
 8001dd2:	f000 f855 	bl	8001e80 <mpu9250_getRawData>
        x += imu_raw_data.gyro_x;
 8001dd6:	4b28      	ldr	r3, [pc, #160]	@ (8001e78 <mpu9250_calibrateGyro+0xcc>)
 8001dd8:	88db      	ldrh	r3, [r3, #6]
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	461a      	mov	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	4413      	add	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
        y += imu_raw_data.gyro_y;
 8001de4:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <mpu9250_calibrateGyro+0xcc>)
 8001de6:	891b      	ldrh	r3, [r3, #8]
 8001de8:	b21b      	sxth	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        z += imu_raw_data.gyro_z;
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <mpu9250_calibrateGyro+0xcc>)
 8001df4:	895b      	ldrh	r3, [r3, #10]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	461a      	mov	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
        HAL_Delay(3);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f000 fd8b 	bl	800291c <HAL_Delay>
    for (uint16_t ii = 0; ii < numCalPoints; ii++)
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	817b      	strh	r3, [r7, #10]
 8001e0c:	897a      	ldrh	r2, [r7, #10]
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3de      	bcc.n	8001dd2 <mpu9250_calibrateGyro+0x26>
    }

    // Average the saved data points to find the gyroscope offset
    imu_processed_data.gyro_offX = (float)x / (float)numCalPoints;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	ee07 3a90 	vmov	s15, r3
 8001e1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2c:	4b13      	ldr	r3, [pc, #76]	@ (8001e7c <mpu9250_calibrateGyro+0xd0>)
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
    imu_processed_data.gyro_offY = (float)y / (float)numCalPoints;
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	ee07 3a90 	vmov	s15, r3
 8001e38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	ee07 3a90 	vmov	s15, r3
 8001e42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <mpu9250_calibrateGyro+0xd0>)
 8001e4c:	edc3 7a01 	vstr	s15, [r3, #4]
    imu_processed_data.gyro_offZ = (float)z / (float)numCalPoints;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	ee07 3a90 	vmov	s15, r3
 8001e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <mpu9250_calibrateGyro+0xd0>)
 8001e6a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	240004b4 	.word	0x240004b4
 8001e7c:	240004c8 	.word	0x240004c8

08001e80 <mpu9250_getRawData>:



void mpu9250_getRawData()
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
	  uint8_t imu_data[6];

	  mpu9250_read_reg(59, imu_data, sizeof(imu_data));
 8001e86:	463b      	mov	r3, r7
 8001e88:	2206      	movs	r2, #6
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	203b      	movs	r0, #59	@ 0x3b
 8001e8e:	f7ff ff2b 	bl	8001ce8 <mpu9250_read_reg>
	  imu_raw_data.accel_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001e92:	783b      	ldrb	r3, [r7, #0]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	b21a      	sxth	r2, r3
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001ea2:	801a      	strh	r2, [r3, #0]
	  imu_raw_data.accel_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001ea4:	78bb      	ldrb	r3, [r7, #2]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001eb4:	805a      	strh	r2, [r3, #2]
	  imu_raw_data.accel_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001eb6:	793b      	ldrb	r3, [r7, #4]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	b21a      	sxth	r2, r3
 8001ebc:	797b      	ldrb	r3, [r7, #5]
 8001ebe:	b21b      	sxth	r3, r3
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	4b13      	ldr	r3, [pc, #76]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001ec6:	809a      	strh	r2, [r3, #4]

	  mpu9250_read_reg(67, imu_data, sizeof(imu_data));
 8001ec8:	463b      	mov	r3, r7
 8001eca:	2206      	movs	r2, #6
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2043      	movs	r0, #67	@ 0x43
 8001ed0:	f7ff ff0a 	bl	8001ce8 <mpu9250_read_reg>
	  imu_raw_data.gyro_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
 8001ed4:	783b      	ldrb	r3, [r7, #0]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	787b      	ldrb	r3, [r7, #1]
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001ee4:	80da      	strh	r2, [r3, #6]
	  imu_raw_data.gyro_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
 8001ee6:	78bb      	ldrb	r3, [r7, #2]
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	b21a      	sxth	r2, r3
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b21a      	sxth	r2, r3
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001ef6:	811a      	strh	r2, [r3, #8]
	  imu_raw_data.gyro_z = ((int16_t)imu_data[4]<<8) | imu_data[5];
 8001ef8:	793b      	ldrb	r3, [r7, #4]
 8001efa:	021b      	lsls	r3, r3, #8
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	797b      	ldrb	r3, [r7, #5]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	4b03      	ldr	r3, [pc, #12]	@ (8001f14 <mpu9250_getRawData+0x94>)
 8001f08:	815a      	strh	r2, [r3, #10]
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	240004b4 	.word	0x240004b4

08001f18 <mpu9250_getProcessedAngle>:

void mpu9250_getProcessedAngle()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	  mpu9250_getRawData();
 8001f1e:	f7ff ffaf 	bl	8001e80 <mpu9250_getRawData>

	  imu_processed_data.accel_x = (float)imu_raw_data.accel_x/4096.0;
 8001f22:	4b91      	ldr	r3, [pc, #580]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	ee07 3a90 	vmov	s15, r3
 8001f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f34:	ed9f 5b86 	vldr	d5, [pc, #536]	@ 8002150 <mpu9250_getProcessedAngle+0x238>
 8001f38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f40:	4b8a      	ldr	r3, [pc, #552]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001f42:	edc3 7a03 	vstr	s15, [r3, #12]
	  imu_processed_data.accel_y = (float)imu_raw_data.accel_y/4096.0;
 8001f46:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8001f48:	885b      	ldrh	r3, [r3, #2]
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f58:	ed9f 5b7d 	vldr	d5, [pc, #500]	@ 8002150 <mpu9250_getProcessedAngle+0x238>
 8001f5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f64:	4b81      	ldr	r3, [pc, #516]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001f66:	edc3 7a04 	vstr	s15, [r3, #16]
	  imu_processed_data.accel_z = (float)imu_raw_data.accel_z/4096.0;
 8001f6a:	4b7f      	ldr	r3, [pc, #508]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8001f6c:	889b      	ldrh	r3, [r3, #4]
 8001f6e:	b21b      	sxth	r3, r3
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f7c:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 8002150 <mpu9250_getProcessedAngle+0x238>
 8001f80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f88:	4b78      	ldr	r3, [pc, #480]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001f8a:	edc3 7a05 	vstr	s15, [r3, #20]
	  imu_processed_data.accel_z -= 4;	//offset AccZ to be around 0
 8001f8e:	4b77      	ldr	r3, [pc, #476]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001f90:	edd3 7a05 	vldr	s15, [r3, #20]
 8001f94:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f9c:	4b73      	ldr	r3, [pc, #460]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001f9e:	edc3 7a05 	vstr	s15, [r3, #20]

	  imu_processed_data.gyro_x = ((float)imu_raw_data.gyro_x - imu_processed_data.gyro_offX)/65.5;
 8001fa2:	4b71      	ldr	r3, [pc, #452]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8001fa4:	88db      	ldrh	r3, [r3, #6]
 8001fa6:	b21b      	sxth	r3, r3
 8001fa8:	ee07 3a90 	vmov	s15, r3
 8001fac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fb0:	4b6e      	ldr	r3, [pc, #440]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fbe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8002158 <mpu9250_getProcessedAngle+0x240>
 8001fc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fc6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fca:	4b68      	ldr	r3, [pc, #416]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001fcc:	edc3 7a06 	vstr	s15, [r3, #24]
	  imu_processed_data.gyro_y = ((float)imu_raw_data.gyro_y - imu_processed_data.gyro_offY)/65.5;
 8001fd0:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8001fd2:	891b      	ldrh	r3, [r3, #8]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fde:	4b63      	ldr	r3, [pc, #396]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001fe0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001fec:	ed9f 5b5a 	vldr	d5, [pc, #360]	@ 8002158 <mpu9250_getProcessedAngle+0x240>
 8001ff0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ff4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8001ffa:	edc3 7a07 	vstr	s15, [r3, #28]
	  imu_processed_data.gyro_z = ((float)imu_raw_data.gyro_z - imu_processed_data.gyro_offZ)/65.5;
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <mpu9250_getProcessedAngle+0x250>)
 8002000:	895b      	ldrh	r3, [r3, #10]
 8002002:	b21b      	sxth	r3, r3
 8002004:	ee07 3a90 	vmov	s15, r3
 8002008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 800200e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002016:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800201a:	ed9f 5b4f 	vldr	d5, [pc, #316]	@ 8002158 <mpu9250_getProcessedAngle+0x240>
 800201e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002026:	4b51      	ldr	r3, [pc, #324]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8002028:	edc3 7a08 	vstr	s15, [r3, #32]
//	  mpu9250_read_reg(0x49, imu_data, sizeof(imu_data));
//	  imu_raw_data.mag_x = ((int16_t)imu_data[0]<<8) | imu_data[1];
//	  imu_raw_data.mag_y = ((int16_t)imu_data[2]<<8) | imu_data[3];
//	  imu_raw_data.mag_z = ((int16_t)imu_data[4]<<8) | imu_data[5];

	  MahonyAHRSupdateIMU(quat, imu_processed_data.gyro_x, imu_processed_data.gyro_y, imu_processed_data.gyro_z, imu_processed_data.accel_x, imu_processed_data.accel_y ,imu_processed_data.accel_z);
 800202c:	4b4f      	ldr	r3, [pc, #316]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 800202e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002032:	4b4e      	ldr	r3, [pc, #312]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8002034:	ed93 7a07 	vldr	s14, [r3, #28]
 8002038:	4b4c      	ldr	r3, [pc, #304]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 800203a:	edd3 6a08 	vldr	s13, [r3, #32]
 800203e:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8002040:	ed93 6a03 	vldr	s12, [r3, #12]
 8002044:	4b49      	ldr	r3, [pc, #292]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 8002046:	edd3 5a04 	vldr	s11, [r3, #16]
 800204a:	4b48      	ldr	r3, [pc, #288]	@ (800216c <mpu9250_getProcessedAngle+0x254>)
 800204c:	ed93 5a05 	vldr	s10, [r3, #20]
 8002050:	eef0 2a45 	vmov.f32	s5, s10
 8002054:	eeb0 2a65 	vmov.f32	s4, s11
 8002058:	eef0 1a46 	vmov.f32	s3, s12
 800205c:	eeb0 1a66 	vmov.f32	s2, s13
 8002060:	eef0 0a47 	vmov.f32	s1, s14
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	4841      	ldr	r0, [pc, #260]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 800206a:	f7fe fcfd 	bl	8000a68 <MahonyAHRSupdateIMU>

	    /* Quternion to Euler */
	  float radPitch = asinf(-2.0f * (quat[1] * quat[3] - quat[0] * quat[2]));
 800206e:	4b40      	ldr	r3, [pc, #256]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 8002070:	ed93 7a01 	vldr	s14, [r3, #4]
 8002074:	4b3e      	ldr	r3, [pc, #248]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 8002076:	edd3 7a03 	vldr	s15, [r3, #12]
 800207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207e:	4b3c      	ldr	r3, [pc, #240]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 8002080:	edd3 6a00 	vldr	s13, [r3]
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 8002086:	edd3 7a02 	vldr	s15, [r3, #8]
 800208a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8002096:	ee67 7a87 	vmul.f32	s15, s15, s14
 800209a:	eeb0 0a67 	vmov.f32	s0, s15
 800209e:	f00a fcb1 	bl	800ca04 <asinf>
 80020a2:	ed87 0a01 	vstr	s0, [r7, #4]
	  float radRoll = atan2f(2.0f * (quat[0] * quat[1] + quat[2] * quat[3]), 2.0f * (quat[0] * quat[0] + quat[3] * quat[3]) - 1.0f);
 80020a6:	4b32      	ldr	r3, [pc, #200]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020a8:	ed93 7a00 	vldr	s14, [r3]
 80020ac:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80020b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020be:	edd3 7a03 	vldr	s15, [r3, #12]
 80020c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	4b24      	ldr	r3, [pc, #144]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <mpu9250_getProcessedAngle+0x258>)
 80020e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020fe:	eef0 0a67 	vmov.f32	s1, s15
 8002102:	eeb0 0a46 	vmov.f32	s0, s12
 8002106:	f00a fca9 	bl	800ca5c <atan2f>
 800210a:	ed87 0a00 	vstr	s0, [r7]
	    /* Radian to Degree*/
	  imu_angles.pitch = radPitch * RAD_TO_DEG;
 800210e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002112:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002116:	ed9f 6b12 	vldr	d6, [pc, #72]	@ 8002160 <mpu9250_getProcessedAngle+0x248>
 800211a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800211e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <mpu9250_getProcessedAngle+0x25c>)
 8002124:	edc3 7a01 	vstr	s15, [r3, #4]
	  imu_angles.roll = radRoll * RAD_TO_DEG;
 8002128:	edd7 7a00 	vldr	s15, [r7]
 800212c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002130:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8002160 <mpu9250_getProcessedAngle+0x248>
 8002134:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002138:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <mpu9250_getProcessedAngle+0x25c>)
 800213e:	edc3 7a00 	vstr	s15, [r3]

}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40b00000 	.word	0x40b00000
 8002158:	00000000 	.word	0x00000000
 800215c:	40506000 	.word	0x40506000
 8002160:	1a63c1f8 	.word	0x1a63c1f8
 8002164:	404ca5dc 	.word	0x404ca5dc
 8002168:	240004b4 	.word	0x240004b4
 800216c:	240004c8 	.word	0x240004c8
 8002170:	24000500 	.word	0x24000500
 8002174:	240004f8 	.word	0x240004f8

08002178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <HAL_MspInit+0x30>)
 8002180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002184:	4a08      	ldr	r2, [pc, #32]	@ (80021a8 <HAL_MspInit+0x30>)
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_MspInit+0x30>)
 8002190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	58024400 	.word	0x58024400

080021ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0be      	sub	sp, #248	@ 0xf8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	22c0      	movs	r2, #192	@ 0xc0
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 f904 	bl	80093da <memset>
  if(hspi->Instance==SPI1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a71      	ldr	r2, [pc, #452]	@ (800239c <HAL_SPI_MspInit+0x1f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d16a      	bne.n	80022b2 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80021dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ee:	f107 0320 	add.w	r3, r7, #32
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 ff34 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80021fe:	f7ff fd47 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002202:	4b67      	ldr	r3, [pc, #412]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002208:	4a65      	ldr	r2, [pc, #404]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 800220a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800220e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002220:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002226:	4a5e      	ldr	r2, [pc, #376]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002230:	4b5b      	ldr	r3, [pc, #364]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002244:	4a56      	ldr	r2, [pc, #344]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002246:	f043 0302 	orr.w	r3, r3, #2
 800224a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800224e:	4b54      	ldr	r3, [pc, #336]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800225c:	2380      	movs	r3, #128	@ 0x80
 800225e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002274:	2305      	movs	r3, #5
 8002276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800227e:	4619      	mov	r1, r3
 8002280:	4848      	ldr	r0, [pc, #288]	@ (80023a4 <HAL_SPI_MspInit+0x1f8>)
 8002282:	f000 fd03 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002286:	2318      	movs	r3, #24
 8002288:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002298:	2300      	movs	r3, #0
 800229a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229e:	2305      	movs	r3, #5
 80022a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022a8:	4619      	mov	r1, r3
 80022aa:	483f      	ldr	r0, [pc, #252]	@ (80023a8 <HAL_SPI_MspInit+0x1fc>)
 80022ac:	f000 fcee 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022b0:	e070      	b.n	8002394 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a3d      	ldr	r2, [pc, #244]	@ (80023ac <HAL_SPI_MspInit+0x200>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d16b      	bne.n	8002394 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80022bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ce:	f107 0320 	add.w	r3, r7, #32
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 fec4 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_SPI_MspInit+0x136>
      Error_Handler();
 80022de:	f7ff fcd7 	bl	8001c90 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 80022e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e8:	4a2d      	ldr	r2, [pc, #180]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 80022ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022f2:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 80022f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002306:	4a26      	ldr	r2, [pc, #152]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002310:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002324:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800232e:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <HAL_SPI_MspInit+0x1f4>)
 8002330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800233c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002340:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002356:	2305      	movs	r3, #5
 8002358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002360:	4619      	mov	r1, r3
 8002362:	4811      	ldr	r0, [pc, #68]	@ (80023a8 <HAL_SPI_MspInit+0x1fc>)
 8002364:	f000 fc92 	bl	8002c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800236c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002382:	2305      	movs	r3, #5
 8002384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800238c:	4619      	mov	r1, r3
 800238e:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <HAL_SPI_MspInit+0x1f8>)
 8002390:	f000 fc7c 	bl	8002c8c <HAL_GPIO_Init>
}
 8002394:	bf00      	nop
 8002396:	37f8      	adds	r7, #248	@ 0xf8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40013000 	.word	0x40013000
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58020000 	.word	0x58020000
 80023a8:	58020400 	.word	0x58020400
 80023ac:	40003800 	.word	0x40003800

080023b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c0:	d116      	bne.n	80023f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_TIM_Base_MspInit+0x48>)
 80023c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023c8:	4a0b      	ldr	r2, [pc, #44]	@ (80023f8 <HAL_TIM_Base_MspInit+0x48>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_TIM_Base_MspInit+0x48>)
 80023d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	201c      	movs	r0, #28
 80023e6:	f000 fba4 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023ea:	201c      	movs	r0, #28
 80023ec:	f000 fbbb 	bl	8002b66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	58024400 	.word	0x58024400

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0ba      	sub	sp, #232	@ 0xe8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	22c0      	movs	r2, #192	@ 0xc0
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f006 ffdc 	bl	80093da <memset>
  if(huart->Instance==USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a26      	ldr	r2, [pc, #152]	@ (80024c0 <HAL_UART_MspInit+0xc4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d145      	bne.n	80024b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800242c:	f04f 0202 	mov.w	r2, #2
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fe0c 	bl	8004060 <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800244e:	f7ff fc1f 	bl	8001c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002452:	4b1c      	ldr	r3, [pc, #112]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002458:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 800245a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002462:	4b18      	ldr	r3, [pc, #96]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 8002464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b14      	ldr	r3, [pc, #80]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002476:	4a13      	ldr	r2, [pc, #76]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002480:	4b10      	ldr	r3, [pc, #64]	@ (80024c4 <HAL_UART_MspInit+0xc8>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800248e:	230c      	movs	r3, #12
 8002490:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a6:	2307      	movs	r3, #7
 80024a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4805      	ldr	r0, [pc, #20]	@ (80024c8 <HAL_UART_MspInit+0xcc>)
 80024b4:	f000 fbea 	bl	8002c8c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80024b8:	bf00      	nop
 80024ba:	37e8      	adds	r7, #232	@ 0xe8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004400 	.word	0x40004400
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58020000 	.word	0x58020000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d0:	bf00      	nop
 80024d2:	e7fd      	b.n	80024d0 <NMI_Handler+0x4>

080024d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <HardFault_Handler+0x4>

080024dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e0:	bf00      	nop
 80024e2:	e7fd      	b.n	80024e0 <MemManage_Handler+0x4>

080024e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e8:	bf00      	nop
 80024ea:	e7fd      	b.n	80024e8 <BusFault_Handler+0x4>

080024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <UsageFault_Handler+0x4>

080024f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002522:	f000 f9db 	bl	80028dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002530:	4802      	ldr	r0, [pc, #8]	@ (800253c <TIM2_IRQHandler+0x10>)
 8002532:	f004 fafd 	bl	8006b30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	240003d0 	.word	0x240003d0

08002540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_kill>:

int _kill(int pid, int sig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800255a:	f006 ff91 	bl	8009480 <__errno>
 800255e:	4603      	mov	r3, r0
 8002560:	2216      	movs	r2, #22
 8002562:	601a      	str	r2, [r3, #0]
  return -1;
 8002564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <_exit>:

void _exit (int status)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002578:	f04f 31ff 	mov.w	r1, #4294967295
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ffe7 	bl	8002550 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002582:	bf00      	nop
 8002584:	e7fd      	b.n	8002582 <_exit+0x12>

08002586 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e00a      	b.n	80025ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002598:	f3af 8000 	nop.w
 800259c:	4601      	mov	r1, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	60ba      	str	r2, [r7, #8]
 80025a4:	b2ca      	uxtb	r2, r1
 80025a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbf0      	blt.n	8002598 <_read+0x12>
  }

  return len;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_isatty>:

int _isatty(int file)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f006 ff12 	bl	8009480 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	24080000 	.word	0x24080000
 8002688:	00000400 	.word	0x00000400
 800268c:	24000510 	.word	0x24000510
 8002690:	24000668 	.word	0x24000668

08002694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002698:	4b37      	ldr	r3, [pc, #220]	@ (8002778 <SystemInit+0xe4>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a36      	ldr	r2, [pc, #216]	@ (8002778 <SystemInit+0xe4>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026a8:	4b34      	ldr	r3, [pc, #208]	@ (800277c <SystemInit+0xe8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d807      	bhi.n	80026c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026b4:	4b31      	ldr	r3, [pc, #196]	@ (800277c <SystemInit+0xe8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 030f 	bic.w	r3, r3, #15
 80026bc:	4a2f      	ldr	r2, [pc, #188]	@ (800277c <SystemInit+0xe8>)
 80026be:	f043 0307 	orr.w	r3, r3, #7
 80026c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002780 <SystemInit+0xec>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002780 <SystemInit+0xec>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002780 <SystemInit+0xec>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <SystemInit+0xec>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4929      	ldr	r1, [pc, #164]	@ (8002780 <SystemInit+0xec>)
 80026dc:	4b29      	ldr	r3, [pc, #164]	@ (8002784 <SystemInit+0xf0>)
 80026de:	4013      	ands	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026e2:	4b26      	ldr	r3, [pc, #152]	@ (800277c <SystemInit+0xe8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026ee:	4b23      	ldr	r3, [pc, #140]	@ (800277c <SystemInit+0xe8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 030f 	bic.w	r3, r3, #15
 80026f6:	4a21      	ldr	r2, [pc, #132]	@ (800277c <SystemInit+0xe8>)
 80026f8:	f043 0307 	orr.w	r3, r3, #7
 80026fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <SystemInit+0xec>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002704:	4b1e      	ldr	r3, [pc, #120]	@ (8002780 <SystemInit+0xec>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <SystemInit+0xec>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <SystemInit+0xec>)
 8002712:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <SystemInit+0xf4>)
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <SystemInit+0xec>)
 8002718:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <SystemInit+0xf8>)
 800271a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <SystemInit+0xec>)
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <SystemInit+0xfc>)
 8002720:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002722:	4b17      	ldr	r3, [pc, #92]	@ (8002780 <SystemInit+0xec>)
 8002724:	2200      	movs	r2, #0
 8002726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <SystemInit+0xec>)
 800272a:	4a19      	ldr	r2, [pc, #100]	@ (8002790 <SystemInit+0xfc>)
 800272c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800272e:	4b14      	ldr	r3, [pc, #80]	@ (8002780 <SystemInit+0xec>)
 8002730:	2200      	movs	r2, #0
 8002732:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <SystemInit+0xec>)
 8002736:	4a16      	ldr	r2, [pc, #88]	@ (8002790 <SystemInit+0xfc>)
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800273a:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <SystemInit+0xec>)
 800273c:	2200      	movs	r2, #0
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <SystemInit+0xec>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0e      	ldr	r2, [pc, #56]	@ (8002780 <SystemInit+0xec>)
 8002746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800274a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <SystemInit+0xec>)
 800274e:	2200      	movs	r2, #0
 8002750:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <SystemInit+0x100>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <SystemInit+0x104>)
 8002758:	4013      	ands	r3, r2
 800275a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800275e:	d202      	bcs.n	8002766 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <SystemInit+0x108>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002766:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <SystemInit+0x10c>)
 8002768:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800276c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00
 800277c:	52002000 	.word	0x52002000
 8002780:	58024400 	.word	0x58024400
 8002784:	eaf6ed7f 	.word	0xeaf6ed7f
 8002788:	02020200 	.word	0x02020200
 800278c:	01ff0000 	.word	0x01ff0000
 8002790:	01010280 	.word	0x01010280
 8002794:	5c001000 	.word	0x5c001000
 8002798:	ffff0000 	.word	0xffff0000
 800279c:	51008108 	.word	0x51008108
 80027a0:	52004000 	.word	0x52004000

080027a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a8:	f7ff ff74 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ac:	480c      	ldr	r0, [pc, #48]	@ (80027e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ae:	490d      	ldr	r1, [pc, #52]	@ (80027e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027b0:	4a0d      	ldr	r2, [pc, #52]	@ (80027e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	@ (80027ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027c4:	4c0a      	ldr	r4, [pc, #40]	@ (80027f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027d2:	f006 fe5b 	bl	800948c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027d6:	f7fe ffbf 	bl	8001758 <main>
  bx  lr
 80027da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027dc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80027e0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027e4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80027e8:	0800f298 	.word	0x0800f298
  ldr r2, =_sbss
 80027ec:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80027f0:	24000664 	.word	0x24000664

080027f4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC3_IRQHandler>
	...

080027f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fe:	2003      	movs	r0, #3
 8002800:	f000 f98c 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002804:	f001 fa56 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_Init+0x68>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	4913      	ldr	r1, [pc, #76]	@ (8002864 <HAL_Init+0x6c>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
 8002820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002822:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <HAL_Init+0x68>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	4a0e      	ldr	r2, [pc, #56]	@ (8002864 <HAL_Init+0x6c>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
 8002838:	4a0b      	ldr	r2, [pc, #44]	@ (8002868 <HAL_Init+0x70>)
 800283a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_Init+0x74>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002842:	200f      	movs	r0, #15
 8002844:	f000 f814 	bl	8002870 <HAL_InitTick>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e002      	b.n	8002858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002852:	f7ff fc91 	bl	8002178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	58024400 	.word	0x58024400
 8002864:	0800d530 	.word	0x0800d530
 8002868:	24000008 	.word	0x24000008
 800286c:	24000004 	.word	0x24000004

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002878:	4b15      	ldr	r3, [pc, #84]	@ (80028d0 <HAL_InitTick+0x60>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e021      	b.n	80028c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_InitTick+0x64>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <HAL_InitTick+0x60>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	4619      	mov	r1, r3
 800288e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002892:	fbb3 f3f1 	udiv	r3, r3, r1
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f000 f971 	bl	8002b82 <HAL_SYSTICK_Config>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00e      	b.n	80028c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b0f      	cmp	r3, #15
 80028ae:	d80a      	bhi.n	80028c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b0:	2200      	movs	r2, #0
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f000 f93b 	bl	8002b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028bc:	4a06      	ldr	r2, [pc, #24]	@ (80028d8 <HAL_InitTick+0x68>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	24000010 	.word	0x24000010
 80028d4:	24000004 	.word	0x24000004
 80028d8:	2400000c 	.word	0x2400000c

080028dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_IncTick+0x20>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_IncTick+0x24>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <HAL_IncTick+0x24>)
 80028ee:	6013      	str	r3, [r2, #0]
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	24000010 	.word	0x24000010
 8002900:	24000514 	.word	0x24000514

08002904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return uwTick;
 8002908:	4b03      	ldr	r3, [pc, #12]	@ (8002918 <HAL_GetTick+0x14>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	24000514 	.word	0x24000514

0800291c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff ffee 	bl	8002904 <HAL_GetTick>
 8002928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002934:	d005      	beq.n	8002942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002936:	4b0a      	ldr	r3, [pc, #40]	@ (8002960 <HAL_Delay+0x44>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002942:	bf00      	nop
 8002944:	f7ff ffde 	bl	8002904 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	429a      	cmp	r2, r3
 8002952:	d8f7      	bhi.n	8002944 <HAL_Delay+0x28>
  {
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	24000010 	.word	0x24000010

08002964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_GetREVID+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0c1b      	lsrs	r3, r3, #16
}
 800296e:	4618      	mov	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	5c001000 	.word	0x5c001000

0800297c <__NVIC_SetPriorityGrouping>:
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <__NVIC_SetPriorityGrouping+0x40>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029a4:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029aa:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <__NVIC_SetPriorityGrouping+0x40>)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	60d3      	str	r3, [r2, #12]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00
 80029c0:	05fa0000 	.word	0x05fa0000

080029c4 <__NVIC_GetPriorityGrouping>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_EnableIRQ>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80029ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	db0b      	blt.n	8002a0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	f003 021f 	and.w	r2, r3, #31
 80029f8:	4907      	ldr	r1, [pc, #28]	@ (8002a18 <__NVIC_EnableIRQ+0x38>)
 80029fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	2001      	movs	r0, #1
 8002a02:	fa00 f202 	lsl.w	r2, r0, r2
 8002a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	e000e100 	.word	0xe000e100

08002a1c <__NVIC_SetPriority>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	6039      	str	r1, [r7, #0]
 8002a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db0a      	blt.n	8002a46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	490c      	ldr	r1, [pc, #48]	@ (8002a68 <__NVIC_SetPriority+0x4c>)
 8002a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a3a:	0112      	lsls	r2, r2, #4
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a44:	e00a      	b.n	8002a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4908      	ldr	r1, [pc, #32]	@ (8002a6c <__NVIC_SetPriority+0x50>)
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3b04      	subs	r3, #4
 8002a54:	0112      	lsls	r2, r2, #4
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	440b      	add	r3, r1
 8002a5a:	761a      	strb	r2, [r3, #24]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	e000e100 	.word	0xe000e100
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <NVIC_EncodePriority>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	@ 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f1c3 0307 	rsb	r3, r3, #7
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf28      	it	cs
 8002a8e:	2304      	movcs	r3, #4
 8002a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d902      	bls.n	8002aa0 <NVIC_EncodePriority+0x30>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3b03      	subs	r3, #3
 8002a9e:	e000      	b.n	8002aa2 <NVIC_EncodePriority+0x32>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	401a      	ands	r2, r3
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43d9      	mvns	r1, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	4313      	orrs	r3, r2
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3724      	adds	r7, #36	@ 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <SysTick_Config>:
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00f      	b.n	8002b0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aee:	4a0a      	ldr	r2, [pc, #40]	@ (8002b18 <SysTick_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af6:	210f      	movs	r1, #15
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295
 8002afc:	f7ff ff8e 	bl	8002a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <SysTick_Config+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <SysTick_Config+0x40>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff29 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b40:	f7ff ff40 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	6978      	ldr	r0, [r7, #20]
 8002b4c:	f7ff ff90 	bl	8002a70 <NVIC_EncodePriority>
 8002b50:	4602      	mov	r2, r0
 8002b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff5f 	bl	8002a1c <__NVIC_SetPriority>
}
 8002b5e:	bf00      	nop
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff33 	bl	80029e0 <__NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffa4 	bl	8002ad8 <SysTick_Config>
 8002b90:	4603      	mov	r3, r0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ba0:	f3bf 8f5f 	dmb	sy
}
 8002ba4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	@ (8002bc4 <HAL_MPU_Disable+0x28>)
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	4a06      	ldr	r2, [pc, #24]	@ (8002bc4 <HAL_MPU_Disable+0x28>)
 8002bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_MPU_Disable+0x2c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	605a      	str	r2, [r3, #4]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00
 8002bc8:	e000ed90 	.word	0xe000ed90

08002bcc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8002c04 <HAL_MPU_Enable+0x38>)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bde:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <HAL_MPU_Enable+0x3c>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	4a09      	ldr	r2, [pc, #36]	@ (8002c08 <HAL_MPU_Enable+0x3c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bea:	f3bf 8f4f 	dsb	sy
}
 8002bee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bf0:	f3bf 8f6f 	isb	sy
}
 8002bf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000ed90 	.word	0xe000ed90
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	785a      	ldrb	r2, [r3, #1]
 8002c18:	4b1b      	ldr	r3, [pc, #108]	@ (8002c88 <HAL_MPU_ConfigRegion+0x7c>)
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c88 <HAL_MPU_ConfigRegion+0x7c>)
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4a19      	ldr	r2, [pc, #100]	@ (8002c88 <HAL_MPU_ConfigRegion+0x7c>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c28:	4a17      	ldr	r2, [pc, #92]	@ (8002c88 <HAL_MPU_ConfigRegion+0x7c>)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7b1b      	ldrb	r3, [r3, #12]
 8002c34:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7adb      	ldrb	r3, [r3, #11]
 8002c3a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7a9b      	ldrb	r3, [r3, #10]
 8002c42:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7b5b      	ldrb	r3, [r3, #13]
 8002c4a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7b9b      	ldrb	r3, [r3, #14]
 8002c52:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7bdb      	ldrb	r3, [r3, #15]
 8002c5a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	7a5b      	ldrb	r3, [r3, #9]
 8002c62:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7a1b      	ldrb	r3, [r3, #8]
 8002c6a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c6c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	7812      	ldrb	r2, [r2, #0]
 8002c72:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c76:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c78:	6113      	str	r3, [r2, #16]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000ed90 	.word	0xe000ed90

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	@ 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002c9a:	4b89      	ldr	r3, [pc, #548]	@ (8002ec0 <HAL_GPIO_Init+0x234>)
 8002c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002c9e:	e194      	b.n	8002fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	4013      	ands	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 8186 	beq.w	8002fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d005      	beq.n	8002cd0 <HAL_GPIO_Init+0x44>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d130      	bne.n	8002d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d06:	2201      	movs	r2, #1
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0201 	and.w	r2, r3, #1
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d017      	beq.n	8002d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	2203      	movs	r2, #3
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d123      	bne.n	8002dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	08da      	lsrs	r2, r3, #3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3208      	adds	r2, #8
 8002d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	08da      	lsrs	r2, r3, #3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3208      	adds	r2, #8
 8002dbc:	69b9      	ldr	r1, [r7, #24]
 8002dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0203 	and.w	r2, r3, #3
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80e0 	beq.w	8002fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e04:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_GPIO_Init+0x238>)
 8002e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e22:	4a29      	ldr	r2, [pc, #164]	@ (8002ec8 <HAL_GPIO_Init+0x23c>)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	3302      	adds	r3, #2
 8002e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a20      	ldr	r2, [pc, #128]	@ (8002ecc <HAL_GPIO_Init+0x240>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d052      	beq.n	8002ef4 <HAL_GPIO_Init+0x268>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed0 <HAL_GPIO_Init+0x244>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d031      	beq.n	8002eba <HAL_GPIO_Init+0x22e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed4 <HAL_GPIO_Init+0x248>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_GPIO_Init+0x22a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed8 <HAL_GPIO_Init+0x24c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d025      	beq.n	8002eb2 <HAL_GPIO_Init+0x226>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	@ (8002edc <HAL_GPIO_Init+0x250>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01f      	beq.n	8002eae <HAL_GPIO_Init+0x222>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee0 <HAL_GPIO_Init+0x254>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d019      	beq.n	8002eaa <HAL_GPIO_Init+0x21e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee4 <HAL_GPIO_Init+0x258>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x21a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a19      	ldr	r2, [pc, #100]	@ (8002ee8 <HAL_GPIO_Init+0x25c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x216>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a18      	ldr	r2, [pc, #96]	@ (8002eec <HAL_GPIO_Init+0x260>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x212>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a17      	ldr	r2, [pc, #92]	@ (8002ef0 <HAL_GPIO_Init+0x264>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x20e>
 8002e96:	2309      	movs	r3, #9
 8002e98:	e02d      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002e9a:	230a      	movs	r3, #10
 8002e9c:	e02b      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002e9e:	2308      	movs	r3, #8
 8002ea0:	e029      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ea2:	2307      	movs	r3, #7
 8002ea4:	e027      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ea6:	2306      	movs	r3, #6
 8002ea8:	e025      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eaa:	2305      	movs	r3, #5
 8002eac:	e023      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	e021      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e01f      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e01d      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e01b      	b.n	8002ef6 <HAL_GPIO_Init+0x26a>
 8002ebe:	bf00      	nop
 8002ec0:	58000080 	.word	0x58000080
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	58000400 	.word	0x58000400
 8002ecc:	58020000 	.word	0x58020000
 8002ed0:	58020400 	.word	0x58020400
 8002ed4:	58020800 	.word	0x58020800
 8002ed8:	58020c00 	.word	0x58020c00
 8002edc:	58021000 	.word	0x58021000
 8002ee0:	58021400 	.word	0x58021400
 8002ee4:	58021800 	.word	0x58021800
 8002ee8:	58021c00 	.word	0x58021c00
 8002eec:	58022000 	.word	0x58022000
 8002ef0:	58022400 	.word	0x58022400
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	69fa      	ldr	r2, [r7, #28]
 8002ef8:	f002 0203 	and.w	r2, r2, #3
 8002efc:	0092      	lsls	r2, r2, #2
 8002efe:	4093      	lsls	r3, r2
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f06:	4938      	ldr	r1, [pc, #224]	@ (8002fe8 <HAL_GPIO_Init+0x35c>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f47f ae63 	bne.w	8002ca0 <HAL_GPIO_Init+0x14>
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	3724      	adds	r7, #36	@ 0x24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	58000400 	.word	0x58000400

08002fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	807b      	strh	r3, [r7, #2]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffc:	787b      	ldrb	r3, [r7, #1]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003002:	887a      	ldrh	r2, [r7, #2]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003008:	e003      	b.n	8003012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800300a:	887b      	ldrh	r3, [r7, #2]
 800300c:	041a      	lsls	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	619a      	str	r2, [r3, #24]
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <HAL_PWREx_ConfigSupply+0x70>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b04      	cmp	r3, #4
 8003032:	d00a      	beq.n	800304a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003034:	4b16      	ldr	r3, [pc, #88]	@ (8003090 <HAL_PWREx_ConfigSupply+0x70>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e01f      	b.n	8003086 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	e01d      	b.n	8003086 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800304a:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <HAL_PWREx_ConfigSupply+0x70>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	490f      	ldr	r1, [pc, #60]	@ (8003090 <HAL_PWREx_ConfigSupply+0x70>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800305a:	f7ff fc53 	bl	8002904 <HAL_GetTick>
 800305e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003060:	e009      	b.n	8003076 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003062:	f7ff fc4f 	bl	8002904 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003070:	d901      	bls.n	8003076 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e007      	b.n	8003086 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_PWREx_ConfigSupply+0x70>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800307e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003082:	d1ee      	bne.n	8003062 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024800 	.word	0x58024800

08003094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08c      	sub	sp, #48	@ 0x30
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f000 bc48 	b.w	8003938 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8088 	beq.w	80031c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030b6:	4b99      	ldr	r3, [pc, #612]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c0:	4b96      	ldr	r3, [pc, #600]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80030c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d007      	beq.n	80030dc <HAL_RCC_OscConfig+0x48>
 80030cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ce:	2b18      	cmp	r3, #24
 80030d0:	d111      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62>
 80030d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b8f      	ldr	r3, [pc, #572]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d06d      	beq.n	80031c4 <HAL_RCC_OscConfig+0x130>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d169      	bne.n	80031c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f000 bc21 	b.w	8003938 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x7a>
 8003100:	4b86      	ldr	r3, [pc, #536]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a85      	ldr	r2, [pc, #532]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e02e      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x9c>
 8003116:	4b81      	ldr	r3, [pc, #516]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a80      	ldr	r2, [pc, #512]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b7e      	ldr	r3, [pc, #504]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a7d      	ldr	r2, [pc, #500]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e01d      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003138:	d10c      	bne.n	8003154 <HAL_RCC_OscConfig+0xc0>
 800313a:	4b78      	ldr	r3, [pc, #480]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a77      	ldr	r2, [pc, #476]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b75      	ldr	r3, [pc, #468]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a74      	ldr	r2, [pc, #464]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0xd8>
 8003154:	4b71      	ldr	r3, [pc, #452]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a70      	ldr	r2, [pc, #448]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800315a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	4b6e      	ldr	r3, [pc, #440]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a6d      	ldr	r2, [pc, #436]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800316a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d013      	beq.n	800319c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7ff fbc6 	bl	8002904 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7ff fbc2 	bl	8002904 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e3d4      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318e:	4b63      	ldr	r3, [pc, #396]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d0f0      	beq.n	800317c <HAL_RCC_OscConfig+0xe8>
 800319a:	e014      	b.n	80031c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7ff fbb2 	bl	8002904 <HAL_GetTick>
 80031a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7ff fbae 	bl	8002904 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e3c0      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031b6:	4b59      	ldr	r3, [pc, #356]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x110>
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80ca 	beq.w	8003368 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031d4:	4b51      	ldr	r3, [pc, #324]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031de:	4b4f      	ldr	r3, [pc, #316]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_RCC_OscConfig+0x166>
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	2b18      	cmp	r3, #24
 80031ee:	d156      	bne.n	800329e <HAL_RCC_OscConfig+0x20a>
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d151      	bne.n	800329e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fa:	4b48      	ldr	r3, [pc, #288]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <HAL_RCC_OscConfig+0x17e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e392      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003212:	4b42      	ldr	r3, [pc, #264]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f023 0219 	bic.w	r2, r3, #25
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	493f      	ldr	r1, [pc, #252]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003224:	f7ff fb6e 	bl	8002904 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322a:	e008      	b.n	800323e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322c:	f7ff fb6a 	bl	8002904 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e37c      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323e:	4b37      	ldr	r3, [pc, #220]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0f0      	beq.n	800322c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324a:	f7ff fb8b 	bl	8002964 <HAL_GetREVID>
 800324e:	4603      	mov	r3, r0
 8003250:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003254:	4293      	cmp	r3, r2
 8003256:	d817      	bhi.n	8003288 <HAL_RCC_OscConfig+0x1f4>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d108      	bne.n	8003272 <HAL_RCC_OscConfig+0x1de>
 8003260:	4b2e      	ldr	r3, [pc, #184]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003268:	4a2c      	ldr	r2, [pc, #176]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003270:	e07a      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003272:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	031b      	lsls	r3, r3, #12
 8003280:	4926      	ldr	r1, [pc, #152]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003282:	4313      	orrs	r3, r2
 8003284:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003286:	e06f      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	4921      	ldr	r1, [pc, #132]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800329c:	e064      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d047      	beq.n	8003336 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0219 	bic.w	r2, r3, #25
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	491a      	ldr	r1, [pc, #104]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff fb24 	bl	8002904 <HAL_GetTick>
 80032bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c0:	f7ff fb20 	bl	8002904 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e332      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032de:	f7ff fb41 	bl	8002964 <HAL_GetREVID>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d819      	bhi.n	8003320 <HAL_RCC_OscConfig+0x28c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	d108      	bne.n	8003306 <HAL_RCC_OscConfig+0x272>
 80032f4:	4b09      	ldr	r3, [pc, #36]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80032fc:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 80032fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003302:	6053      	str	r3, [r2, #4]
 8003304:	e030      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
 8003306:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	4901      	ldr	r1, [pc, #4]	@ (800331c <HAL_RCC_OscConfig+0x288>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
 800331a:	e025      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
 800331c:	58024400 	.word	0x58024400
 8003320:	4b9a      	ldr	r3, [pc, #616]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	061b      	lsls	r3, r3, #24
 800332e:	4997      	ldr	r1, [pc, #604]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003330:	4313      	orrs	r3, r2
 8003332:	604b      	str	r3, [r1, #4]
 8003334:	e018      	b.n	8003368 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003336:	4b95      	ldr	r3, [pc, #596]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a94      	ldr	r2, [pc, #592]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7ff fadf 	bl	8002904 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334a:	f7ff fadb 	bl	8002904 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e2ed      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800335c:	4b8b      	ldr	r3, [pc, #556]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1f0      	bne.n	800334a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80a9 	beq.w	80034c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003376:	4b85      	ldr	r3, [pc, #532]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800337e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003380:	4b82      	ldr	r3, [pc, #520]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003384:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d007      	beq.n	800339c <HAL_RCC_OscConfig+0x308>
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b18      	cmp	r3, #24
 8003390:	d13a      	bne.n	8003408 <HAL_RCC_OscConfig+0x374>
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d135      	bne.n	8003408 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800339c:	4b7b      	ldr	r3, [pc, #492]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_OscConfig+0x320>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	2b80      	cmp	r3, #128	@ 0x80
 80033ae:	d001      	beq.n	80033b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e2c1      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033b4:	f7ff fad6 	bl	8002964 <HAL_GetREVID>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033be:	4293      	cmp	r3, r2
 80033c0:	d817      	bhi.n	80033f2 <HAL_RCC_OscConfig+0x35e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d108      	bne.n	80033dc <HAL_RCC_OscConfig+0x348>
 80033ca:	4b70      	ldr	r3, [pc, #448]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80033d2:	4a6e      	ldr	r2, [pc, #440]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80033d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80033d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033da:	e075      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033dc:	4b6b      	ldr	r3, [pc, #428]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	069b      	lsls	r3, r3, #26
 80033ea:	4968      	ldr	r1, [pc, #416]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033f0:	e06a      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033f2:	4b66      	ldr	r3, [pc, #408]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	4962      	ldr	r1, [pc, #392]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003406:	e05f      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d042      	beq.n	8003496 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003410:	4b5e      	ldr	r3, [pc, #376]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a5d      	ldr	r2, [pc, #372]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800341a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7ff fa72 	bl	8002904 <HAL_GetTick>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003424:	f7ff fa6e 	bl	8002904 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e280      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003436:	4b55      	ldr	r3, [pc, #340]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003442:	f7ff fa8f 	bl	8002964 <HAL_GetREVID>
 8003446:	4603      	mov	r3, r0
 8003448:	f241 0203 	movw	r2, #4099	@ 0x1003
 800344c:	4293      	cmp	r3, r2
 800344e:	d817      	bhi.n	8003480 <HAL_RCC_OscConfig+0x3ec>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	2b20      	cmp	r3, #32
 8003456:	d108      	bne.n	800346a <HAL_RCC_OscConfig+0x3d6>
 8003458:	4b4c      	ldr	r3, [pc, #304]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003460:	4a4a      	ldr	r2, [pc, #296]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003462:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003466:	6053      	str	r3, [r2, #4]
 8003468:	e02e      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
 800346a:	4b48      	ldr	r3, [pc, #288]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	069b      	lsls	r3, r3, #26
 8003478:	4944      	ldr	r1, [pc, #272]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800347a:	4313      	orrs	r3, r2
 800347c:	604b      	str	r3, [r1, #4]
 800347e:	e023      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
 8003480:	4b42      	ldr	r3, [pc, #264]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	061b      	lsls	r3, r3, #24
 800348e:	493f      	ldr	r1, [pc, #252]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e018      	b.n	80034c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a3c      	ldr	r2, [pc, #240]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800349c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a2:	f7ff fa2f 	bl	8002904 <HAL_GetTick>
 80034a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034aa:	f7ff fa2b 	bl	8002904 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e23d      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034bc:	4b33      	ldr	r3, [pc, #204]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f0      	bne.n	80034aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d036      	beq.n	8003542 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d019      	beq.n	8003510 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034dc:	4b2b      	ldr	r3, [pc, #172]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e0:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7ff fa0c 	bl	8002904 <HAL_GetTick>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f0:	f7ff fa08 	bl	8002904 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e21a      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003502:	4b22      	ldr	r3, [pc, #136]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x45c>
 800350e:	e018      	b.n	8003542 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003510:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003514:	4a1d      	ldr	r2, [pc, #116]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7ff f9f2 	bl	8002904 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003524:	f7ff f9ee 	bl	8002904 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e200      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d039      	beq.n	80035c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800355c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003560:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003562:	f7ff f9cf 	bl	8002904 <HAL_GetTick>
 8003566:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356a:	f7ff f9cb 	bl	8002904 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e1dd      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_RCC_OscConfig+0x4f8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x4d6>
 8003588:	e01b      	b.n	80035c2 <HAL_RCC_OscConfig+0x52e>
 800358a:	bf00      	nop
 800358c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003590:	4b9b      	ldr	r3, [pc, #620]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a9a      	ldr	r2, [pc, #616]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003596:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800359a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800359c:	f7ff f9b2 	bl	8002904 <HAL_GetTick>
 80035a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035a4:	f7ff f9ae 	bl	8002904 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e1c0      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035b6:	4b92      	ldr	r3, [pc, #584]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 8081 	beq.w	80036d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035d0:	4b8c      	ldr	r3, [pc, #560]	@ (8003804 <HAL_RCC_OscConfig+0x770>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a8b      	ldr	r2, [pc, #556]	@ (8003804 <HAL_RCC_OscConfig+0x770>)
 80035d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035dc:	f7ff f992 	bl	8002904 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e4:	f7ff f98e 	bl	8002904 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1a0      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035f6:	4b83      	ldr	r3, [pc, #524]	@ (8003804 <HAL_RCC_OscConfig+0x770>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d106      	bne.n	8003618 <HAL_RCC_OscConfig+0x584>
 800360a:	4b7d      	ldr	r3, [pc, #500]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360e:	4a7c      	ldr	r2, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6713      	str	r3, [r2, #112]	@ 0x70
 8003616:	e02d      	b.n	8003674 <HAL_RCC_OscConfig+0x5e0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x5a6>
 8003620:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a76      	ldr	r2, [pc, #472]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003626:	f023 0301 	bic.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
 800362c:	4b74      	ldr	r3, [pc, #464]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003630:	4a73      	ldr	r2, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003632:	f023 0304 	bic.w	r3, r3, #4
 8003636:	6713      	str	r3, [r2, #112]	@ 0x70
 8003638:	e01c      	b.n	8003674 <HAL_RCC_OscConfig+0x5e0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b05      	cmp	r3, #5
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x5c8>
 8003642:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a6e      	ldr	r2, [pc, #440]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	4b6c      	ldr	r3, [pc, #432]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003652:	4a6b      	ldr	r2, [pc, #428]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	6713      	str	r3, [r2, #112]	@ 0x70
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0x5e0>
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	4a67      	ldr	r2, [pc, #412]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	@ 0x70
 8003668:	4b65      	ldr	r3, [pc, #404]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a64      	ldr	r2, [pc, #400]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7ff f942 	bl	8002904 <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003682:	e00a      	b.n	800369a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003684:	f7ff f93e 	bl	8002904 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e14e      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800369a:	4b59      	ldr	r3, [pc, #356]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RCC_OscConfig+0x5f0>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7ff f92c 	bl	8002904 <HAL_GetTick>
 80036ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7ff f928 	bl	8002904 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e138      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036c6:	4b4e      	ldr	r3, [pc, #312]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1ee      	bne.n	80036b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 812d 	beq.w	8003936 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036dc:	4b48      	ldr	r3, [pc, #288]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036e4:	2b18      	cmp	r3, #24
 80036e6:	f000 80bd 	beq.w	8003864 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	f040 809e 	bne.w	8003830 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b42      	ldr	r3, [pc, #264]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a41      	ldr	r2, [pc, #260]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7ff f900 	bl	8002904 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003708:	f7ff f8fc 	bl	8002904 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e10e      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371a:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003726:	4b36      	ldr	r3, [pc, #216]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003728:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800372a:	4b37      	ldr	r3, [pc, #220]	@ (8003808 <HAL_RCC_OscConfig+0x774>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003736:	0112      	lsls	r2, r2, #4
 8003738:	430a      	orrs	r2, r1
 800373a:	4931      	ldr	r1, [pc, #196]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	3b01      	subs	r3, #1
 8003746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374e:	3b01      	subs	r3, #1
 8003750:	025b      	lsls	r3, r3, #9
 8003752:	b29b      	uxth	r3, r3
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003768:	3b01      	subs	r3, #1
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003770:	4923      	ldr	r1, [pc, #140]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003776:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	4a21      	ldr	r2, [pc, #132]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003782:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003786:	4b21      	ldr	r3, [pc, #132]	@ (800380c <HAL_RCC_OscConfig+0x778>)
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800378e:	00d2      	lsls	r2, r2, #3
 8003790:	491b      	ldr	r1, [pc, #108]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003796:	4b1a      	ldr	r3, [pc, #104]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 8003798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379a:	f023 020c 	bic.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4917      	ldr	r1, [pc, #92]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037a8:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ac:	f023 0202 	bic.w	r2, r3, #2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b4:	4912      	ldr	r1, [pc, #72]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037ba:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4a10      	ldr	r2, [pc, #64]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80037de:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	4a07      	ldr	r2, [pc, #28]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a04      	ldr	r2, [pc, #16]	@ (8003800 <HAL_RCC_OscConfig+0x76c>)
 80037f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7ff f885 	bl	8002904 <HAL_GetTick>
 80037fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fc:	e011      	b.n	8003822 <HAL_RCC_OscConfig+0x78e>
 80037fe:	bf00      	nop
 8003800:	58024400 	.word	0x58024400
 8003804:	58024800 	.word	0x58024800
 8003808:	fffffc0c 	.word	0xfffffc0c
 800380c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7ff f878 	bl	8002904 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e08a      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003822:	4b47      	ldr	r3, [pc, #284]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x77c>
 800382e:	e082      	b.n	8003936 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003830:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003836:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7ff f862 	bl	8002904 <HAL_GetTick>
 8003840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7ff f85e 	bl	8002904 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e070      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x7b0>
 8003862:	e068      	b.n	8003936 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003864:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800386a:	4b35      	ldr	r3, [pc, #212]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	2b01      	cmp	r3, #1
 8003876:	d031      	beq.n	80038dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0203 	and.w	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d12a      	bne.n	80038dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d122      	bne.n	80038dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11a      	bne.n	80038dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	0a5b      	lsrs	r3, r3, #9
 80038aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d111      	bne.n	80038dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d108      	bne.n	80038dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	0e1b      	lsrs	r3, r3, #24
 80038ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e02b      	b.n	8003938 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80038e0:	4b17      	ldr	r3, [pc, #92]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 80038e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d01f      	beq.n	8003936 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80038f6:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	4a11      	ldr	r2, [pc, #68]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003902:	f7fe ffff 	bl	8002904 <HAL_GetTick>
 8003906:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003908:	bf00      	nop
 800390a:	f7fe fffb 	bl	8002904 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	4293      	cmp	r3, r2
 8003914:	d0f9      	beq.n	800390a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003916:	4b0a      	ldr	r3, [pc, #40]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_OscConfig+0x8b0>)
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003922:	00d2      	lsls	r2, r2, #3
 8003924:	4906      	ldr	r1, [pc, #24]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003926:	4313      	orrs	r3, r2
 8003928:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <HAL_RCC_OscConfig+0x8ac>)
 8003930:	f043 0301 	orr.w	r3, r3, #1
 8003934:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3730      	adds	r7, #48	@ 0x30
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58024400 	.word	0x58024400
 8003944:	ffff0007 	.word	0xffff0007

08003948 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e19c      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800395c:	4b8a      	ldr	r3, [pc, #552]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d910      	bls.n	800398c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 020f 	bic.w	r2, r3, #15
 8003972:	4985      	ldr	r1, [pc, #532]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	4313      	orrs	r3, r2
 8003978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397a:	4b83      	ldr	r3, [pc, #524]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e184      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d010      	beq.n	80039ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691a      	ldr	r2, [r3, #16]
 800399c:	4b7b      	ldr	r3, [pc, #492]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d908      	bls.n	80039ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039a8:	4b78      	ldr	r3, [pc, #480]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	4975      	ldr	r1, [pc, #468]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	4b70      	ldr	r3, [pc, #448]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039cc:	69db      	ldr	r3, [r3, #28]
 80039ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039d6:	4b6d      	ldr	r3, [pc, #436]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	496a      	ldr	r1, [pc, #424]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d010      	beq.n	8003a16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	4b64      	ldr	r3, [pc, #400]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d908      	bls.n	8003a16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a04:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	495e      	ldr	r1, [pc, #376]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d010      	beq.n	8003a44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	4b59      	ldr	r3, [pc, #356]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d908      	bls.n	8003a44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a32:	4b56      	ldr	r3, [pc, #344]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4953      	ldr	r1, [pc, #332]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d010      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	4b4d      	ldr	r3, [pc, #308]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d908      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b4a      	ldr	r3, [pc, #296]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f023 020f 	bic.w	r2, r3, #15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4947      	ldr	r1, [pc, #284]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d055      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003a7e:	4b43      	ldr	r3, [pc, #268]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4940      	ldr	r1, [pc, #256]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a98:	4b3c      	ldr	r3, [pc, #240]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d121      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0f6      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d107      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ab0:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d115      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0ea      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003ac8:	4b30      	ldr	r3, [pc, #192]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0de      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0d6      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ae8:	4b28      	ldr	r3, [pc, #160]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f023 0207 	bic.w	r2, r3, #7
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4925      	ldr	r1, [pc, #148]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003afa:	f7fe ff03 	bl	8002904 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b02:	f7fe feff 	bl	8002904 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0be      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b18:	4b1c      	ldr	r3, [pc, #112]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d1eb      	bne.n	8003b02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d208      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b46:	4b11      	ldr	r3, [pc, #68]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	490e      	ldr	r1, [pc, #56]	@ (8003b8c <HAL_RCC_ClockConfig+0x244>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d214      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 020f 	bic.w	r2, r3, #15
 8003b6e:	4906      	ldr	r1, [pc, #24]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b04      	ldr	r3, [pc, #16]	@ (8003b88 <HAL_RCC_ClockConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e086      	b.n	8003c96 <HAL_RCC_ClockConfig+0x34e>
 8003b88:	52002000 	.word	0x52002000
 8003b8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d208      	bcs.n	8003bbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4939      	ldr	r1, [pc, #228]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	4b34      	ldr	r3, [pc, #208]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d208      	bcs.n	8003bec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003bda:	4b31      	ldr	r3, [pc, #196]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	492e      	ldr	r1, [pc, #184]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d208      	bcs.n	8003c1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c08:	4b25      	ldr	r3, [pc, #148]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4922      	ldr	r1, [pc, #136]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d010      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69da      	ldr	r2, [r3, #28]
 8003c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d208      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	4917      	ldr	r1, [pc, #92]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c48:	f000 f834 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	0a1b      	lsrs	r3, r3, #8
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	4912      	ldr	r1, [pc, #72]	@ (8003ca4 <HAL_RCC_ClockConfig+0x35c>)
 8003c5a:	5ccb      	ldrb	r3, [r1, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_RCC_ClockConfig+0x358>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ca4 <HAL_RCC_ClockConfig+0x35c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca8 <HAL_RCC_ClockConfig+0x360>)
 8003c7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c80:	4a0a      	ldr	r2, [pc, #40]	@ (8003cac <HAL_RCC_ClockConfig+0x364>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <HAL_RCC_ClockConfig+0x368>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fe fdf0 	bl	8002870 <HAL_InitTick>
 8003c90:	4603      	mov	r3, r0
 8003c92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	0800d530 	.word	0x0800d530
 8003ca8:	24000008 	.word	0x24000008
 8003cac:	24000004 	.word	0x24000004
 8003cb0:	2400000c 	.word	0x2400000c

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	@ 0x24
 8003cb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cba:	4bb3      	ldr	r3, [pc, #716]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc2:	2b18      	cmp	r3, #24
 8003cc4:	f200 8155 	bhi.w	8003f72 <HAL_RCC_GetSysClockFreq+0x2be>
 8003cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003f73 	.word	0x08003f73
 8003cd8:	08003f73 	.word	0x08003f73
 8003cdc:	08003f73 	.word	0x08003f73
 8003ce0:	08003f73 	.word	0x08003f73
 8003ce4:	08003f73 	.word	0x08003f73
 8003ce8:	08003f73 	.word	0x08003f73
 8003cec:	08003f73 	.word	0x08003f73
 8003cf0:	08003d5b 	.word	0x08003d5b
 8003cf4:	08003f73 	.word	0x08003f73
 8003cf8:	08003f73 	.word	0x08003f73
 8003cfc:	08003f73 	.word	0x08003f73
 8003d00:	08003f73 	.word	0x08003f73
 8003d04:	08003f73 	.word	0x08003f73
 8003d08:	08003f73 	.word	0x08003f73
 8003d0c:	08003f73 	.word	0x08003f73
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003f73 	.word	0x08003f73
 8003d18:	08003f73 	.word	0x08003f73
 8003d1c:	08003f73 	.word	0x08003f73
 8003d20:	08003f73 	.word	0x08003f73
 8003d24:	08003f73 	.word	0x08003f73
 8003d28:	08003f73 	.word	0x08003f73
 8003d2c:	08003f73 	.word	0x08003f73
 8003d30:	08003d67 	.word	0x08003d67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d34:	4b94      	ldr	r3, [pc, #592]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d40:	4b91      	ldr	r3, [pc, #580]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	08db      	lsrs	r3, r3, #3
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	4a90      	ldr	r2, [pc, #576]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d52:	e111      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d54:	4b8d      	ldr	r3, [pc, #564]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d56:	61bb      	str	r3, [r7, #24]
      break;
 8003d58:	e10e      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d5c:	61bb      	str	r3, [r7, #24]
      break;
 8003d5e:	e10b      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d60:	4b8c      	ldr	r3, [pc, #560]	@ (8003f94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d62:	61bb      	str	r3, [r7, #24]
      break;
 8003d64:	e108      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d66:	4b88      	ldr	r3, [pc, #544]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6a:	f003 0303 	and.w	r3, r3, #3
 8003d6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d70:	4b85      	ldr	r3, [pc, #532]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d74:	091b      	lsrs	r3, r3, #4
 8003d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003d7c:	4b82      	ldr	r3, [pc, #520]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003d86:	4b80      	ldr	r3, [pc, #512]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d8a:	08db      	lsrs	r3, r3, #3
 8003d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 80e1 	beq.w	8003f6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	f000 8083 	beq.w	8003eb8 <HAL_RCC_GetSysClockFreq+0x204>
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f200 80a1 	bhi.w	8003efc <HAL_RCC_GetSysClockFreq+0x248>
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x114>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d056      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dc6:	e099      	b.n	8003efc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d02d      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	4a6b      	ldr	r2, [pc, #428]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dfe:	4b62      	ldr	r3, [pc, #392]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e12:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e2e:	e087      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003f9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e42:	4b51      	ldr	r3, [pc, #324]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e56:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e72:	e065      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e86:	4b40      	ldr	r3, [pc, #256]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e9a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003eb6:	e043      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003fa4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eca:	4b2f      	ldr	r3, [pc, #188]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed2:	ee07 3a90 	vmov	s15, r3
 8003ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ede:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003efa:	e021      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003fa0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f22:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003f98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f40:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	0a5b      	lsrs	r3, r3, #9
 8003f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f64:	ee17 3a90 	vmov	r3, s15
 8003f68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f6a:	e005      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
      break;
 8003f70:	e002      	b.n	8003f78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f72:	4b07      	ldr	r3, [pc, #28]	@ (8003f90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f74:	61bb      	str	r3, [r7, #24]
      break;
 8003f76:	bf00      	nop
  }

  return sysclockfreq;
 8003f78:	69bb      	ldr	r3, [r7, #24]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	@ 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	03d09000 	.word	0x03d09000
 8003f90:	003d0900 	.word	0x003d0900
 8003f94:	017d7840 	.word	0x017d7840
 8003f98:	46000000 	.word	0x46000000
 8003f9c:	4c742400 	.word	0x4c742400
 8003fa0:	4a742400 	.word	0x4a742400
 8003fa4:	4bbebc20 	.word	0x4bbebc20

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fae:	f7ff fe81 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	490f      	ldr	r1, [pc, #60]	@ (8003ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8003fc0:	5ccb      	ldrb	r3, [r1, r3]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <HAL_RCC_GetHCLKFreq+0x54>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe2:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fe4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe6:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003fec:	4b04      	ldr	r3, [pc, #16]	@ (8004000 <HAL_RCC_GetHCLKFreq+0x58>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	0800d530 	.word	0x0800d530
 8004000:	24000008 	.word	0x24000008
 8004004:	24000004 	.word	0x24000004

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800400c:	f7ff ffcc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8004010:	4602      	mov	r2, r0
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4904      	ldr	r1, [pc, #16]	@ (8004030 <HAL_RCC_GetPCLK1Freq+0x28>)
 800401e:	5ccb      	ldrb	r3, [r1, r3]
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	58024400 	.word	0x58024400
 8004030:	0800d530 	.word	0x0800d530

08004034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004038:	f7ff ffb6 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	@ (800405c <HAL_RCC_GetPCLK2Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	58024400 	.word	0x58024400
 800405c:	0800d530 	.word	0x0800d530

08004060 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b0ca      	sub	sp, #296	@ 0x128
 8004066:	af00      	add	r7, sp, #0
 8004068:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800406c:	2300      	movs	r3, #0
 800406e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004084:	2500      	movs	r5, #0
 8004086:	ea54 0305 	orrs.w	r3, r4, r5
 800408a:	d049      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800408c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004090:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004092:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004096:	d02f      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800409c:	d828      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800409e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040a2:	d01a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040a8:	d822      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80040ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040b2:	d007      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80040b4:	e01c      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b6:	4bb8      	ldr	r3, [pc, #736]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	4ab7      	ldr	r2, [pc, #732]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040c2:	e01a      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	3308      	adds	r3, #8
 80040ca:	2102      	movs	r1, #2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fc8f 	bl	80059f0 <RCCEx_PLL2_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040d8:	e00f      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	3328      	adds	r3, #40	@ 0x28
 80040e0:	2102      	movs	r1, #2
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 fd36 	bl	8005b54 <RCCEx_PLL3_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80040ee:	e004      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80040f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004102:	4ba5      	ldr	r3, [pc, #660]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004106:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004110:	4aa1      	ldr	r2, [pc, #644]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004112:	430b      	orrs	r3, r1
 8004114:	6513      	str	r3, [r2, #80]	@ 0x50
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800411c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800412c:	f04f 0900 	mov.w	r9, #0
 8004130:	ea58 0309 	orrs.w	r3, r8, r9
 8004134:	d047      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413c:	2b04      	cmp	r3, #4
 800413e:	d82a      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004140:	a201      	add	r2, pc, #4	@ (adr r2, 8004148 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	0800415d 	.word	0x0800415d
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004181 	.word	0x08004181
 8004154:	0800419f 	.word	0x0800419f
 8004158:	0800419f 	.word	0x0800419f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415c:	4b8e      	ldr	r3, [pc, #568]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	4a8d      	ldr	r2, [pc, #564]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004168:	e01a      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	3308      	adds	r3, #8
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fc3c 	bl	80059f0 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800417e:	e00f      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004184:	3328      	adds	r3, #40	@ 0x28
 8004186:	2100      	movs	r1, #0
 8004188:	4618      	mov	r0, r3
 800418a:	f001 fce3 	bl	8005b54 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800419e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10a      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	f023 0107 	bic.w	r1, r3, #7
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	4a78      	ldr	r2, [pc, #480]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80041c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80041d2:	f04f 0b00 	mov.w	fp, #0
 80041d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80041da:	d04c      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e6:	d030      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ec:	d829      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80041f0:	d02d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80041f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80041f4:	d825      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041f6:	2b80      	cmp	r3, #128	@ 0x80
 80041f8:	d018      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80041fa:	2b80      	cmp	r3, #128	@ 0x80
 80041fc:	d821      	bhi.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004202:	2b40      	cmp	r3, #64	@ 0x40
 8004204:	d007      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004206:	e01c      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004208:	4b63      	ldr	r3, [pc, #396]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	4a62      	ldr	r2, [pc, #392]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004214:	e01c      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421a:	3308      	adds	r3, #8
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fbe6 	bl	80059f0 <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800422a:	e011      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	3328      	adds	r3, #40	@ 0x28
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fc8d 	bl	8005b54 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004240:	e006      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004248:	e002      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800424e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10a      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004258:	4b4f      	ldr	r3, [pc, #316]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800425c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004266:	4a4c      	ldr	r2, [pc, #304]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6513      	str	r3, [r2, #80]	@ 0x50
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004282:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004286:	2300      	movs	r3, #0
 8004288:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800428c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004290:	460b      	mov	r3, r1
 8004292:	4313      	orrs	r3, r2
 8004294:	d053      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800429e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042a2:	d035      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80042a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042a8:	d82e      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042ae:	d031      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80042b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80042b4:	d828      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ba:	d01a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80042bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c0:	d822      	bhi.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80042c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ca:	d007      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80042cc:	e01c      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ce:	4b32      	ldr	r3, [pc, #200]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	4a31      	ldr	r2, [pc, #196]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80042da:	e01c      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	3308      	adds	r3, #8
 80042e2:	2100      	movs	r1, #0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 fb83 	bl	80059f0 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80042f0:	e011      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	3328      	adds	r3, #40	@ 0x28
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 fc2a 	bl	8005b54 <RCCEx_PLL3_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004306:	e006      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800430e:	e002      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800431e:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004322:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800432e:	4a1a      	ldr	r2, [pc, #104]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004330:	430b      	orrs	r3, r1
 8004332:	6593      	str	r3, [r2, #88]	@ 0x58
 8004334:	e003      	b.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800433a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800434a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800434e:	2300      	movs	r3, #0
 8004350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004354:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d056      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004366:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800436a:	d038      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800436c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004370:	d831      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004372:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004376:	d034      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004378:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800437c:	d82b      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800437e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004382:	d01d      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004384:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004388:	d825      	bhi.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800438e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004394:	e01f      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800439c:	4ba2      	ldr	r3, [pc, #648]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	4aa1      	ldr	r2, [pc, #644]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043a8:	e01c      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	3308      	adds	r3, #8
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 fb1c 	bl	80059f0 <RCCEx_PLL2_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	3328      	adds	r3, #40	@ 0x28
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fbc3 	bl	8005b54 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043d4:	e006      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043dc:	e002      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80043e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10b      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80043ec:	4b8e      	ldr	r3, [pc, #568]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80043fc:	4a8a      	ldr	r2, [pc, #552]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	6593      	str	r3, [r2, #88]	@ 0x58
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004418:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004422:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	d03a      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004432:	2b30      	cmp	r3, #48	@ 0x30
 8004434:	d01f      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004436:	2b30      	cmp	r3, #48	@ 0x30
 8004438:	d819      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800443a:	2b20      	cmp	r3, #32
 800443c:	d00c      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800443e:	2b20      	cmp	r3, #32
 8004440:	d815      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d019      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004446:	2b10      	cmp	r3, #16
 8004448:	d111      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444a:	4b77      	ldr	r3, [pc, #476]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	4a76      	ldr	r2, [pc, #472]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004456:	e011      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	3308      	adds	r3, #8
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f001 fac5 	bl	80059f0 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004484:	4b68      	ldr	r3, [pc, #416]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004488:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004492:	4a65      	ldr	r2, [pc, #404]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004494:	430b      	orrs	r3, r1
 8004496:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80044ae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80044b2:	2300      	movs	r3, #0
 80044b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80044b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80044bc:	460b      	mov	r3, r1
 80044be:	4313      	orrs	r3, r2
 80044c0:	d051      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044cc:	d035      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80044ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044d2:	d82e      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044d8:	d031      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80044da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044de:	d828      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e4:	d01a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80044e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ea:	d822      	bhi.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80044f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f4:	d007      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80044f6:	e01c      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004504:	e01c      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	3308      	adds	r3, #8
 800450c:	2100      	movs	r1, #0
 800450e:	4618      	mov	r0, r3
 8004510:	f001 fa6e 	bl	80059f0 <RCCEx_PLL2_Config>
 8004514:	4603      	mov	r3, r0
 8004516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800451a:	e011      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800451c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004520:	3328      	adds	r3, #40	@ 0x28
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f001 fb15 	bl	8005b54 <RCCEx_PLL3_Config>
 800452a:	4603      	mov	r3, r0
 800452c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004530:	e006      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004538:	e002      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800453a:	bf00      	nop
 800453c:	e000      	b.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800453e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10a      	bne.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004548:	4b37      	ldr	r3, [pc, #220]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004556:	4a34      	ldr	r2, [pc, #208]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004558:	430b      	orrs	r3, r1
 800455a:	6513      	str	r3, [r2, #80]	@ 0x50
 800455c:	e003      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004562:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004576:	2300      	movs	r3, #0
 8004578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800457c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004580:	460b      	mov	r3, r1
 8004582:	4313      	orrs	r3, r2
 8004584:	d056      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800458c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004590:	d033      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004592:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004596:	d82c      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004598:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800459c:	d02f      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800459e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045a2:	d826      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045a8:	d02b      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80045aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045ae:	d820      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045b4:	d012      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80045b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045ba:	d81a      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d022      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80045c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c4:	d115      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3308      	adds	r3, #8
 80045cc:	2101      	movs	r1, #1
 80045ce:	4618      	mov	r0, r3
 80045d0:	f001 fa0e 	bl	80059f0 <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045da:	e015      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	3328      	adds	r3, #40	@ 0x28
 80045e2:	2101      	movs	r1, #1
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fab5 	bl	8005b54 <RCCEx_PLL3_Config>
 80045ea:	4603      	mov	r3, r0
 80045ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80045f0:	e00a      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045fa:	bf00      	nop
 80045fc:	e004      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004606:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10d      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004614:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800461e:	4a02      	ldr	r2, [pc, #8]	@ (8004628 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004620:	430b      	orrs	r3, r1
 8004622:	6513      	str	r3, [r2, #80]	@ 0x50
 8004624:	e006      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800464a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800464e:	460b      	mov	r3, r1
 8004650:	4313      	orrs	r3, r2
 8004652:	d055      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004658:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800465c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004660:	d033      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004662:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004666:	d82c      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800466c:	d02f      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d826      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004674:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004678:	d02b      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800467a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800467e:	d820      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004684:	d012      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800468a:	d81a      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d022      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004690:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004694:	d115      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	3308      	adds	r3, #8
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f9a6 	bl	80059f0 <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046aa:	e015      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	3328      	adds	r3, #40	@ 0x28
 80046b2:	2101      	movs	r1, #1
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 fa4d 	bl	8005b54 <RCCEx_PLL3_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80046c0:	e00a      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c8:	e006      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ca:	bf00      	nop
 80046cc:	e004      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80046d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80046e0:	4ba3      	ldr	r3, [pc, #652]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046f0:	4a9f      	ldr	r2, [pc, #636]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800470c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800471a:	460b      	mov	r3, r1
 800471c:	4313      	orrs	r3, r2
 800471e:	d037      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800472a:	d00e      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004730:	d816      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d018      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800473a:	d111      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800473c:	4b8c      	ldr	r3, [pc, #560]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	4a8b      	ldr	r2, [pc, #556]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004748:	e00f      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	3308      	adds	r3, #8
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f001 f94c 	bl	80059f0 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800475e:	e004      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800476e:	2b00      	cmp	r3, #0
 8004770:	d10a      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004772:	4b7f      	ldr	r3, [pc, #508]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004776:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a7b      	ldr	r2, [pc, #492]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004782:	430b      	orrs	r3, r1
 8004784:	6513      	str	r3, [r2, #80]	@ 0x50
 8004786:	e003      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004798:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800479c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80047a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d039      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80047b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d81c      	bhi.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80047ba:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80047bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c0:	080047fd 	.word	0x080047fd
 80047c4:	080047d1 	.word	0x080047d1
 80047c8:	080047df 	.word	0x080047df
 80047cc:	080047fd 	.word	0x080047fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047d0:	4b67      	ldr	r3, [pc, #412]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d4:	4a66      	ldr	r2, [pc, #408]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80047d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047dc:	e00f      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	3308      	adds	r3, #8
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f902 	bl	80059f0 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80047f2:	e004      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047fa:	e000      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80047fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004806:	4b5a      	ldr	r3, [pc, #360]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800480a:	f023 0103 	bic.w	r1, r3, #3
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004814:	4a56      	ldr	r2, [pc, #344]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004816:	430b      	orrs	r3, r1
 8004818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004820:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004834:	2300      	movs	r3, #0
 8004836:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800483a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800483e:	460b      	mov	r3, r1
 8004840:	4313      	orrs	r3, r2
 8004842:	f000 809f 	beq.w	8004984 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b4b      	ldr	r3, [pc, #300]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4a      	ldr	r2, [pc, #296]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004852:	f7fe f857 	bl	8002904 <HAL_GetTick>
 8004856:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485a:	e00b      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fe f852 	bl	8002904 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	@ 0x64
 800486a:	d903      	bls.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004872:	e005      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004874:	4b3f      	ldr	r3, [pc, #252]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ed      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004884:	2b00      	cmp	r3, #0
 8004886:	d179      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004888:	4b39      	ldr	r3, [pc, #228]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800488a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004894:	4053      	eors	r3, r2
 8004896:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489a:	2b00      	cmp	r3, #0
 800489c:	d015      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489e:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048aa:	4b31      	ldr	r3, [pc, #196]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	4a30      	ldr	r2, [pc, #192]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b6:	4b2e      	ldr	r3, [pc, #184]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80048c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80048c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d6:	d118      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d8:	f7fe f814 	bl	8002904 <HAL_GetTick>
 80048dc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048e0:	e00d      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e2:	f7fe f80f 	bl	8002904 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048ec:	1ad2      	subs	r2, r2, r3
 80048ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d903      	bls.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80048fc:	e005      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0eb      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800490a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490e:	2b00      	cmp	r3, #0
 8004910:	d129      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004916:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800491a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800491e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004922:	d10e      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004924:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004934:	091a      	lsrs	r2, r3, #4
 8004936:	4b10      	ldr	r3, [pc, #64]	@ (8004978 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004938:	4013      	ands	r3, r2
 800493a:	4a0d      	ldr	r2, [pc, #52]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6113      	str	r3, [r2, #16]
 8004940:	e005      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004942:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	4a0a      	ldr	r2, [pc, #40]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004948:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800494c:	6113      	str	r3, [r2, #16]
 800494e:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004950:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004956:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800495a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800495e:	4a04      	ldr	r2, [pc, #16]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004960:	430b      	orrs	r3, r1
 8004962:	6713      	str	r3, [r2, #112]	@ 0x70
 8004964:	e00e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800496a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800496e:	e009      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004970:	58024400 	.word	0x58024400
 8004974:	58024800 	.word	0x58024800
 8004978:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498c:	f002 0301 	and.w	r3, r2, #1
 8004990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004994:	2300      	movs	r3, #0
 8004996:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800499a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800499e:	460b      	mov	r3, r1
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f000 8089 	beq.w	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049ac:	2b28      	cmp	r3, #40	@ 0x28
 80049ae:	d86b      	bhi.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80049b0:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	08004a91 	.word	0x08004a91
 80049bc:	08004a89 	.word	0x08004a89
 80049c0:	08004a89 	.word	0x08004a89
 80049c4:	08004a89 	.word	0x08004a89
 80049c8:	08004a89 	.word	0x08004a89
 80049cc:	08004a89 	.word	0x08004a89
 80049d0:	08004a89 	.word	0x08004a89
 80049d4:	08004a89 	.word	0x08004a89
 80049d8:	08004a5d 	.word	0x08004a5d
 80049dc:	08004a89 	.word	0x08004a89
 80049e0:	08004a89 	.word	0x08004a89
 80049e4:	08004a89 	.word	0x08004a89
 80049e8:	08004a89 	.word	0x08004a89
 80049ec:	08004a89 	.word	0x08004a89
 80049f0:	08004a89 	.word	0x08004a89
 80049f4:	08004a89 	.word	0x08004a89
 80049f8:	08004a73 	.word	0x08004a73
 80049fc:	08004a89 	.word	0x08004a89
 8004a00:	08004a89 	.word	0x08004a89
 8004a04:	08004a89 	.word	0x08004a89
 8004a08:	08004a89 	.word	0x08004a89
 8004a0c:	08004a89 	.word	0x08004a89
 8004a10:	08004a89 	.word	0x08004a89
 8004a14:	08004a89 	.word	0x08004a89
 8004a18:	08004a91 	.word	0x08004a91
 8004a1c:	08004a89 	.word	0x08004a89
 8004a20:	08004a89 	.word	0x08004a89
 8004a24:	08004a89 	.word	0x08004a89
 8004a28:	08004a89 	.word	0x08004a89
 8004a2c:	08004a89 	.word	0x08004a89
 8004a30:	08004a89 	.word	0x08004a89
 8004a34:	08004a89 	.word	0x08004a89
 8004a38:	08004a91 	.word	0x08004a91
 8004a3c:	08004a89 	.word	0x08004a89
 8004a40:	08004a89 	.word	0x08004a89
 8004a44:	08004a89 	.word	0x08004a89
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a89 	.word	0x08004a89
 8004a50:	08004a89 	.word	0x08004a89
 8004a54:	08004a89 	.word	0x08004a89
 8004a58:	08004a91 	.word	0x08004a91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	3308      	adds	r3, #8
 8004a62:	2101      	movs	r1, #1
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 ffc3 	bl	80059f0 <RCCEx_PLL2_Config>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a70:	e00f      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a76:	3328      	adds	r3, #40	@ 0x28
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 f86a 	bl	8005b54 <RCCEx_PLL3_Config>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004a86:	e004      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a8e:	e000      	b.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a9a:	4bbf      	ldr	r3, [pc, #764]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa8:	4abb      	ldr	r2, [pc, #748]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004aaa:	430b      	orrs	r3, r1
 8004aac:	6553      	str	r3, [r2, #84]	@ 0x54
 8004aae:	e003      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	f002 0302 	and.w	r3, r2, #2
 8004ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004ace:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	d041      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d824      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b01 	.word	0x08004b01
 8004af0:	08004b17 	.word	0x08004b17
 8004af4:	08004b35 	.word	0x08004b35
 8004af8:	08004b35 	.word	0x08004b35
 8004afc:	08004b35 	.word	0x08004b35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	3308      	adds	r3, #8
 8004b06:	2101      	movs	r1, #1
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 ff71 	bl	80059f0 <RCCEx_PLL2_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b14:	e00f      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1a:	3328      	adds	r3, #40	@ 0x28
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 f818 	bl	8005b54 <RCCEx_PLL3_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004b2a:	e004      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004b3e:	4b96      	ldr	r3, [pc, #600]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	f023 0107 	bic.w	r1, r3, #7
 8004b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b4c:	4a92      	ldr	r2, [pc, #584]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b52:	e003      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	f002 0304 	and.w	r3, r2, #4
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d044      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d825      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bdd 	.word	0x08004bdd
 8004b94:	08004ba9 	.word	0x08004ba9
 8004b98:	08004bbf 	.word	0x08004bbf
 8004b9c:	08004bdd 	.word	0x08004bdd
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004bdd 	.word	0x08004bdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	3308      	adds	r3, #8
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 ff1d 	bl	80059f0 <RCCEx_PLL2_Config>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bbc:	e00f      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc2:	3328      	adds	r3, #40	@ 0x28
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 ffc4 	bl	8005b54 <RCCEx_PLL3_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004bd2:	e004      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bda:	e000      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004be6:	4b6c      	ldr	r3, [pc, #432]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bea:	f023 0107 	bic.w	r1, r3, #7
 8004bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bf6:	4a68      	ldr	r2, [pc, #416]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bfc:	e003      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f002 0320 	and.w	r3, r2, #32
 8004c12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c20:	460b      	mov	r3, r1
 8004c22:	4313      	orrs	r3, r2
 8004c24:	d055      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c32:	d033      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c38:	d82c      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c3e:	d02f      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d826      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c4a:	d02b      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004c4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c50:	d820      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c56:	d012      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004c58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c5c:	d81a      	bhi.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d022      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004c62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c66:	d115      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 febd 	bl	80059f0 <RCCEx_PLL2_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c7c:	e015      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	3328      	adds	r3, #40	@ 0x28
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ff64 	bl	8005b54 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004c92:	e00a      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c9a:	e006      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004c9c:	bf00      	nop
 8004c9e:	e004      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ca0:	bf00      	nop
 8004ca2:	e002      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ca4:	bf00      	nop
 8004ca6:	e000      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb2:	4b39      	ldr	r3, [pc, #228]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cb6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc2:	4a35      	ldr	r2, [pc, #212]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004cc4:	430b      	orrs	r3, r1
 8004cc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cc8:	e003      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004cde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004ce8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	d058      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004cfe:	d033      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004d00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004d04:	d82c      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	d02f      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d10:	d826      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d16:	d02b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d1c:	d820      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d22:	d012      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d28:	d81a      	bhi.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d022      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d32:	d115      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	3308      	adds	r3, #8
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fe57 	bl	80059f0 <RCCEx_PLL2_Config>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d48:	e015      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4e:	3328      	adds	r3, #40	@ 0x28
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 fefe 	bl	8005b54 <RCCEx_PLL3_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e00a      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d66:	e006      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d68:	bf00      	nop
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e002      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d70:	bf00      	nop
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10e      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d8e:	4a02      	ldr	r2, [pc, #8]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004d90:	430b      	orrs	r3, r1
 8004d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004d96:	bf00      	nop
 8004d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004db4:	2300      	movs	r3, #0
 8004db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	d055      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004dcc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004dd0:	d033      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004dd2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004dd6:	d82c      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ddc:	d02f      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004dde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de2:	d826      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004de4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004de8:	d02b      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004dea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004dee:	d820      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004df0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df4:	d012      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004df6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dfa:	d81a      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d022      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e04:	d115      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fdee 	bl	80059f0 <RCCEx_PLL2_Config>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e1a:	e015      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e20:	3328      	adds	r3, #40	@ 0x28
 8004e22:	2102      	movs	r1, #2
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fe95 	bl	8005b54 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10b      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e50:	4ba1      	ldr	r3, [pc, #644]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e60:	4a9d      	ldr	r2, [pc, #628]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f002 0308 	and.w	r3, r2, #8
 8004e7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004e86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d01e      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea2:	3328      	adds	r3, #40	@ 0x28
 8004ea4:	2102      	movs	r1, #2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fe54 	bl	8005b54 <RCCEx_PLL3_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004eb8:	4b87      	ldr	r3, [pc, #540]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ebc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec8:	4a83      	ldr	r2, [pc, #524]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004eca:	430b      	orrs	r3, r1
 8004ecc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f002 0310 	and.w	r3, r2, #16
 8004eda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ede:	2300      	movs	r3, #0
 8004ee0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ee4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4313      	orrs	r3, r2
 8004eec:	d01e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efa:	d10c      	bne.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	3328      	adds	r3, #40	@ 0x28
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fe25 	bl	8005b54 <RCCEx_PLL3_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f16:	4b70      	ldr	r3, [pc, #448]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004f26:	4a6c      	ldr	r2, [pc, #432]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004f38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f42:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004f46:	460b      	mov	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	d03e      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f58:	d022      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004f5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f5e:	d81b      	bhi.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004f6a:	e015      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	3308      	adds	r3, #8
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fd3b 	bl	80059f0 <RCCEx_PLL2_Config>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f80:	e00f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	3328      	adds	r3, #40	@ 0x28
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fde2 	bl	8005b54 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004f96:	e004      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004fa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10b      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004faa:	4b4b      	ldr	r3, [pc, #300]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004fba:	4a47      	ldr	r2, [pc, #284]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fc0:	e003      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004fd6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fd8:	2300      	movs	r3, #0
 8004fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004fdc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	d03b      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ff2:	d01f      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004ff4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ff8:	d818      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffe:	d003      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005004:	d007      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005008:	4b33      	ldr	r3, [pc, #204]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	4a32      	ldr	r2, [pc, #200]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800500e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005012:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005014:	e00f      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501a:	3328      	adds	r3, #40	@ 0x28
 800501c:	2101      	movs	r1, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fd98 	bl	8005b54 <RCCEx_PLL3_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800502a:	e004      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005032:	e000      	b.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800503e:	4b26      	ldr	r3, [pc, #152]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005042:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504e:	4a22      	ldr	r2, [pc, #136]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005050:	430b      	orrs	r3, r1
 8005052:	6553      	str	r3, [r2, #84]	@ 0x54
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800505a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800505e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005066:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800506a:	673b      	str	r3, [r7, #112]	@ 0x70
 800506c:	2300      	movs	r3, #0
 800506e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005070:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005074:	460b      	mov	r3, r1
 8005076:	4313      	orrs	r3, r2
 8005078:	d034      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005088:	d007      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800508a:	e011      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800508c:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800508e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005090:	4a11      	ldr	r2, [pc, #68]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005092:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005098:	e00e      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	3308      	adds	r3, #8
 80050a0:	2102      	movs	r1, #2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fca4 	bl	80059f0 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80050ae:	e003      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10d      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	4a02      	ldr	r2, [pc, #8]	@ (80050d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80050d0:	430b      	orrs	r3, r1
 80050d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050d4:	e006      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80050d6:	bf00      	nop
 80050d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80050f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050f2:	2300      	movs	r3, #0
 80050f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80050fa:	460b      	mov	r3, r1
 80050fc:	4313      	orrs	r3, r2
 80050fe:	d00c      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005104:	3328      	adds	r3, #40	@ 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fd23 	bl	8005b54 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005122:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005126:	663b      	str	r3, [r7, #96]	@ 0x60
 8005128:	2300      	movs	r3, #0
 800512a:	667b      	str	r3, [r7, #100]	@ 0x64
 800512c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005130:	460b      	mov	r3, r1
 8005132:	4313      	orrs	r3, r2
 8005134:	d038      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800513e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005142:	d018      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005144:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005148:	d811      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800514a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800514e:	d014      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005154:	d80b      	bhi.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005156:	2b00      	cmp	r3, #0
 8005158:	d011      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800515a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515e:	d106      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005160:	4bc3      	ldr	r3, [pc, #780]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4ac2      	ldr	r2, [pc, #776]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800516c:	e008      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005174:	e004      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800517e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005188:	4bb9      	ldr	r3, [pc, #740]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800518a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800518c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005198:	4ab5      	ldr	r2, [pc, #724]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800519a:	430b      	orrs	r3, r1
 800519c:	6553      	str	r3, [r2, #84]	@ 0x54
 800519e:	e003      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80051b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051b6:	2300      	movs	r3, #0
 80051b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80051be:	460b      	mov	r3, r1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	d009      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051c4:	4baa      	ldr	r3, [pc, #680]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d2:	4aa7      	ldr	r2, [pc, #668]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80051e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e6:	2300      	movs	r3, #0
 80051e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80051ee:	460b      	mov	r3, r1
 80051f0:	4313      	orrs	r3, r2
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80051f4:	4b9e      	ldr	r3, [pc, #632]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80051fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005200:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005204:	4a9a      	ldr	r2, [pc, #616]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005206:	430b      	orrs	r3, r1
 8005208:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005218:	2300      	movs	r3, #0
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800521c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005220:	460b      	mov	r3, r1
 8005222:	4313      	orrs	r3, r2
 8005224:	d009      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005226:	4b92      	ldr	r3, [pc, #584]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800522e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005234:	4a8e      	ldr	r2, [pc, #568]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005236:	430b      	orrs	r3, r1
 8005238:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005246:	643b      	str	r3, [r7, #64]	@ 0x40
 8005248:	2300      	movs	r3, #0
 800524a:	647b      	str	r3, [r7, #68]	@ 0x44
 800524c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005250:	460b      	mov	r3, r1
 8005252:	4313      	orrs	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005256:	4b86      	ldr	r3, [pc, #536]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	4a85      	ldr	r2, [pc, #532]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800525c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005260:	6113      	str	r3, [r2, #16]
 8005262:	4b83      	ldr	r3, [pc, #524]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800526e:	4a80      	ldr	r2, [pc, #512]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005270:	430b      	orrs	r3, r1
 8005272:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005282:	2300      	movs	r3, #0
 8005284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005286:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800528a:	460b      	mov	r3, r1
 800528c:	4313      	orrs	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005290:	4b77      	ldr	r3, [pc, #476]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005294:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800529c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800529e:	4a74      	ldr	r2, [pc, #464]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052a0:	430b      	orrs	r3, r1
 80052a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80052b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80052ba:	460b      	mov	r3, r1
 80052bc:	4313      	orrs	r3, r2
 80052be:	d00a      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052c0:	4b6b      	ldr	r3, [pc, #428]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052d0:	4a67      	ldr	r2, [pc, #412]	@ (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80052d2:	430b      	orrs	r3, r1
 80052d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052de:	2100      	movs	r1, #0
 80052e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80052ec:	460b      	mov	r3, r1
 80052ee:	4313      	orrs	r3, r2
 80052f0:	d011      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f6:	3308      	adds	r3, #8
 80052f8:	2100      	movs	r1, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fb78 	bl	80059f0 <RCCEx_PLL2_Config>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005306:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	2100      	movs	r1, #0
 8005320:	6239      	str	r1, [r7, #32]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
 8005328:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800532c:	460b      	mov	r3, r1
 800532e:	4313      	orrs	r3, r2
 8005330:	d011      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005336:	3308      	adds	r3, #8
 8005338:	2101      	movs	r1, #1
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb58 	bl	80059f0 <RCCEx_PLL2_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800534e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005352:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	2100      	movs	r1, #0
 8005360:	61b9      	str	r1, [r7, #24]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800536c:	460b      	mov	r3, r1
 800536e:	4313      	orrs	r3, r2
 8005370:	d011      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005376:	3308      	adds	r3, #8
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fb38 	bl	80059f0 <RCCEx_PLL2_Config>
 8005380:	4603      	mov	r3, r0
 8005382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	2100      	movs	r1, #0
 80053a0:	6139      	str	r1, [r7, #16]
 80053a2:	f003 0308 	and.w	r3, r3, #8
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053ac:	460b      	mov	r3, r1
 80053ae:	4313      	orrs	r3, r2
 80053b0:	d011      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b6:	3328      	adds	r3, #40	@ 0x28
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fbca 	bl	8005b54 <RCCEx_PLL3_Config>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80053c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80053d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	2100      	movs	r1, #0
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	f003 0310 	and.w	r3, r3, #16
 80053e6:	60fb      	str	r3, [r7, #12]
 80053e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80053ec:	460b      	mov	r3, r1
 80053ee:	4313      	orrs	r3, r2
 80053f0:	d011      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	3328      	adds	r3, #40	@ 0x28
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fbaa 	bl	8005b54 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005412:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	2100      	movs	r1, #0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e9d7 1200 	ldrd	r1, r2, [r7]
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d011      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	3328      	adds	r3, #40	@ 0x28
 8005438:	2102      	movs	r1, #2
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fb8a 	bl	8005b54 <RCCEx_PLL3_Config>
 8005440:	4603      	mov	r3, r0
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005446:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005456:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	e000      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
}
 8005464:	4618      	mov	r0, r3
 8005466:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005470:	58024400 	.word	0x58024400

08005474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005478:	f7fe fd96 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	@ (8005498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	@ (800549c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	58024400 	.word	0x58024400
 800549c:	0800d530 	.word	0x0800d530

080054a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054a8:	4ba1      	ldr	r3, [pc, #644]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80054b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b6:	0b1b      	lsrs	r3, r3, #12
 80054b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80054be:	4b9c      	ldr	r3, [pc, #624]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80054ca:	4b99      	ldr	r3, [pc, #612]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ce:	08db      	lsrs	r3, r3, #3
 80054d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8111 	beq.w	8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	f000 8083 	beq.w	80055fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	f200 80a1 	bhi.w	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d056      	beq.n	80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800550a:	e099      	b.n	8005640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550c:	4b88      	ldr	r3, [pc, #544]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02d      	beq.n	8005574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005518:	4b85      	ldr	r3, [pc, #532]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	08db      	lsrs	r3, r3, #3
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	4a84      	ldr	r2, [pc, #528]	@ (8005734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005524:	fa22 f303 	lsr.w	r3, r2, r3
 8005528:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b7b      	ldr	r3, [pc, #492]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a03 	vldr	s12, [r7, #12]
 8005556:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005572:	e087      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800573c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b6a      	ldr	r3, [pc, #424]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a03 	vldr	s12, [r7, #12]
 800559a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b6:	e065      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ca:	4b59      	ldr	r3, [pc, #356]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	ed97 6a03 	vldr	s12, [r7, #12]
 80055de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fa:	e043      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b48      	ldr	r3, [pc, #288]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005622:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563e:	e021      	b.n	8005684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b37      	ldr	r3, [pc, #220]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a03 	vldr	s12, [r7, #12]
 8005666:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005684:	4b2a      	ldr	r3, [pc, #168]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	0a5b      	lsrs	r3, r3, #9
 800568a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800568e:	ee07 3a90 	vmov	s15, r3
 8005692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800569e:	edd7 6a07 	vldr	s13, [r7, #28]
 80056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056aa:	ee17 2a90 	vmov	r2, s15
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80056b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b6:	0c1b      	lsrs	r3, r3, #16
 80056b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056bc:	ee07 3a90 	vmov	s15, r3
 80056c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80056d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d8:	ee17 2a90 	vmov	r2, s15
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056e0:	4b13      	ldr	r3, [pc, #76]	@ (8005730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	0e1b      	lsrs	r3, r3, #24
 80056e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80056fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800570e:	e008      	b.n	8005722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
}
 8005722:	bf00      	nop
 8005724:	3724      	adds	r7, #36	@ 0x24
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	03d09000 	.word	0x03d09000
 8005738:	46000000 	.word	0x46000000
 800573c:	4c742400 	.word	0x4c742400
 8005740:	4a742400 	.word	0x4a742400
 8005744:	4bbebc20 	.word	0x4bbebc20

08005748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005748:	b480      	push	{r7}
 800574a:	b089      	sub	sp, #36	@ 0x24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005750:	4ba1      	ldr	r3, [pc, #644]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005754:	f003 0303 	and.w	r3, r3, #3
 8005758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800575a:	4b9f      	ldr	r3, [pc, #636]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575e:	0d1b      	lsrs	r3, r3, #20
 8005760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005766:	4b9c      	ldr	r3, [pc, #624]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	0a1b      	lsrs	r3, r3, #8
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005772:	4b99      	ldr	r3, [pc, #612]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	fb02 f303 	mul.w	r3, r2, r3
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8111 	beq.w	80059b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	2b02      	cmp	r3, #2
 800579a:	f000 8083 	beq.w	80058a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	f200 80a1 	bhi.w	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d056      	beq.n	8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80057b2:	e099      	b.n	80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b4:	4b88      	ldr	r3, [pc, #544]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d02d      	beq.n	800581c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c0:	4b85      	ldr	r3, [pc, #532]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	4a84      	ldr	r2, [pc, #528]	@ (80059dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	ee07 3a90 	vmov	s15, r3
 80057d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ea:	4b7b      	ldr	r3, [pc, #492]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f2:	ee07 3a90 	vmov	s15, r3
 80057f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80057fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800580e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800581a:	e087      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005826:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800582a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800582e:	4b6a      	ldr	r3, [pc, #424]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005836:	ee07 3a90 	vmov	s15, r3
 800583a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800583e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005842:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800584e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800585e:	e065      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	ee07 3a90 	vmov	s15, r3
 8005866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800586e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005872:	4b59      	ldr	r3, [pc, #356]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005882:	ed97 6a03 	vldr	s12, [r7, #12]
 8005886:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800588e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800589e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a2:	e043      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80058b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b6:	4b48      	ldr	r3, [pc, #288]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058be:	ee07 3a90 	vmov	s15, r3
 80058c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058e6:	e021      	b.n	800592c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	ee07 3a90 	vmov	s15, r3
 80058ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fa:	4b37      	ldr	r3, [pc, #220]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590a:	ed97 6a03 	vldr	s12, [r7, #12]
 800590e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800592c:	4b2a      	ldr	r3, [pc, #168]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800592e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005930:	0a5b      	lsrs	r3, r3, #9
 8005932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005936:	ee07 3a90 	vmov	s15, r3
 800593a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800593e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005946:	edd7 6a07 	vldr	s13, [r7, #28]
 800594a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005952:	ee17 2a90 	vmov	r2, s15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800595c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595e:	0c1b      	lsrs	r3, r3, #16
 8005960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005974:	edd7 6a07 	vldr	s13, [r7, #28]
 8005978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800597c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005980:	ee17 2a90 	vmov	r2, s15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005988:	4b13      	ldr	r3, [pc, #76]	@ (80059d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598c:	0e1b      	lsrs	r3, r3, #24
 800598e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800599e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 2a90 	vmov	r2, s15
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80059b6:	e008      	b.n	80059ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	3724      	adds	r7, #36	@ 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	58024400 	.word	0x58024400
 80059dc:	03d09000 	.word	0x03d09000
 80059e0:	46000000 	.word	0x46000000
 80059e4:	4c742400 	.word	0x4c742400
 80059e8:	4a742400 	.word	0x4a742400
 80059ec:	4bbebc20 	.word	0x4bbebc20

080059f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059fa:	2300      	movs	r3, #0
 80059fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80059fe:	4b53      	ldr	r3, [pc, #332]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d101      	bne.n	8005a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e099      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005a0e:	4b4f      	ldr	r3, [pc, #316]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a4e      	ldr	r2, [pc, #312]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1a:	f7fc ff73 	bl	8002904 <HAL_GetTick>
 8005a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a20:	e008      	b.n	8005a34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a22:	f7fc ff6f 	bl	8002904 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d901      	bls.n	8005a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e086      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a34:	4b45      	ldr	r3, [pc, #276]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f0      	bne.n	8005a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005a40:	4b42      	ldr	r3, [pc, #264]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	493f      	ldr	r1, [pc, #252]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	628b      	str	r3, [r1, #40]	@ 0x28
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	025b      	lsls	r3, r3, #9
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	061b      	lsls	r3, r3, #24
 8005a80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a84:	4931      	ldr	r1, [pc, #196]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005a8a:	4b30      	ldr	r3, [pc, #192]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	492d      	ldr	r1, [pc, #180]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	f023 0220 	bic.w	r2, r3, #32
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	4928      	ldr	r1, [pc, #160]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ab4:	f023 0310 	bic.w	r3, r3, #16
 8005ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005abe:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <RCCEx_PLL2_Config+0x160>)
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	69d2      	ldr	r2, [r2, #28]
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	4920      	ldr	r1, [pc, #128]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005ace:	4b1f      	ldr	r3, [pc, #124]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ad4:	f043 0310 	orr.w	r3, r3, #16
 8005ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005aec:	e00f      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005af4:	4b15      	ldr	r3, [pc, #84]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	4a14      	ldr	r2, [pc, #80]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005afe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005b02:	4b12      	ldr	r3, [pc, #72]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a11      	ldr	r2, [pc, #68]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0e      	ldr	r2, [pc, #56]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1a:	f7fc fef3 	bl	8002904 <HAL_GetTick>
 8005b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b20:	e008      	b.n	8005b34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b22:	f7fc feef 	bl	8002904 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005b34:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <RCCEx_PLL2_Config+0x15c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024400 	.word	0x58024400
 8005b50:	ffff0007 	.word	0xffff0007

08005b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b62:	4b53      	ldr	r3, [pc, #332]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	d101      	bne.n	8005b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e099      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005b72:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a4e      	ldr	r2, [pc, #312]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b7e:	f7fc fec1 	bl	8002904 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b84:	e008      	b.n	8005b98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b86:	f7fc febd 	bl	8002904 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e086      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b98:	4b45      	ldr	r3, [pc, #276]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1f0      	bne.n	8005b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ba4:	4b42      	ldr	r3, [pc, #264]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	051b      	lsls	r3, r3, #20
 8005bb2:	493f      	ldr	r1, [pc, #252]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	061b      	lsls	r3, r3, #24
 8005be4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005be8:	4931      	ldr	r1, [pc, #196]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	695b      	ldr	r3, [r3, #20]
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005c00:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4928      	ldr	r1, [pc, #160]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005c12:	4b27      	ldr	r3, [pc, #156]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	4a26      	ldr	r2, [pc, #152]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005c1e:	4b24      	ldr	r3, [pc, #144]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c22:	4b24      	ldr	r3, [pc, #144]	@ (8005cb4 <RCCEx_PLL3_Config+0x160>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	69d2      	ldr	r2, [r2, #28]
 8005c2a:	00d2      	lsls	r2, r2, #3
 8005c2c:	4920      	ldr	r1, [pc, #128]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005c32:	4b1f      	ldr	r3, [pc, #124]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	4a1e      	ldr	r2, [pc, #120]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d106      	bne.n	8005c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005c44:	4b1a      	ldr	r3, [pc, #104]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c48:	4a19      	ldr	r2, [pc, #100]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c50:	e00f      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005c58:	4b15      	ldr	r3, [pc, #84]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005c64:	e005      	b.n	8005c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005c66:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4a11      	ldr	r2, [pc, #68]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005c70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005c72:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fc fe41 	bl	8002904 <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c86:	f7fc fe3d 	bl	8002904 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005c98:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <RCCEx_PLL3_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f0      	beq.n	8005c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	58024400 	.word	0x58024400
 8005cb4:	ffff0007 	.word	0xffff0007

08005cb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e10f      	b.n	8005eea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a87      	ldr	r2, [pc, #540]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a86      	ldr	r2, [pc, #536]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00a      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a84      	ldr	r2, [pc, #528]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d005      	beq.n	8005cfa <HAL_SPI_Init+0x42>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d901      	bls.n	8005cfa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e0f7      	b.n	8005eea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fe2e 	bl	800695c <SPI_GetPacketSize>
 8005d00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a7b      	ldr	r2, [pc, #492]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00c      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a79      	ldr	r2, [pc, #484]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d007      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a78      	ldr	r2, [pc, #480]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Init+0x6e>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d811      	bhi.n	8005d4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d2a:	4a72      	ldr	r2, [pc, #456]	@ (8005ef4 <HAL_SPI_Init+0x23c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a70      	ldr	r2, [pc, #448]	@ (8005ef8 <HAL_SPI_Init+0x240>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_SPI_Init+0x8c>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a6f      	ldr	r2, [pc, #444]	@ (8005efc <HAL_SPI_Init+0x244>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d104      	bne.n	8005d4e <HAL_SPI_Init+0x96>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d901      	bls.n	8005d4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e0cd      	b.n	8005eea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fc fa22 	bl	80021ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f022 0201 	bic.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005d8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d94:	d119      	bne.n	8005dca <HAL_SPI_Init+0x112>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d9e:	d103      	bne.n	8005da8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10c      	bne.n	8005dca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db8:	d107      	bne.n	8005dca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005dc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00f      	beq.n	8005df6 <HAL_SPI_Init+0x13e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2b06      	cmp	r3, #6
 8005ddc:	d90b      	bls.n	8005df6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	430a      	orrs	r2, r1
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	e007      	b.n	8005e06 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e18:	ea42 0103 	orr.w	r1, r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a1b      	ldr	r3, [r3, #32]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e66:	ea42 0103 	orr.w	r1, r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d113      	bne.n	8005ea6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ea4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0201 	bic.w	r2, r2, #1
 8005eb4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40013000 	.word	0x40013000
 8005ef8:	40003800 	.word	0x40003800
 8005efc:	40003c00 	.word	0x40003c00

08005f00 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af02      	add	r7, sp, #8
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3320      	adds	r3, #32
 8005f16:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f18:	f7fc fcf4 	bl	8002904 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d001      	beq.n	8005f2e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e1d1      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_SPI_Transmit+0x3a>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e1c9      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_SPI_Transmit+0x4c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e1c2      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2203      	movs	r2, #3
 8005f58:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	88fa      	ldrh	r2, [r7, #6]
 8005f6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	88fa      	ldrh	r2, [r7, #6]
 8005f76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fa4:	d108      	bne.n	8005fb8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e009      	b.n	8005fcc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	4b96      	ldr	r3, [pc, #600]	@ (800622c <HAL_SPI_Transmit+0x32c>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	88f9      	ldrh	r1, [r7, #6]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	6812      	ldr	r2, [r2, #0]
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff8:	d107      	bne.n	800600a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b0f      	cmp	r3, #15
 8006010:	d947      	bls.n	80060a2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8006012:	e03f      	b.n	8006094 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b02      	cmp	r3, #2
 8006020:	d114      	bne.n	800604c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006032:	1d1a      	adds	r2, r3, #4
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800604a:	e023      	b.n	8006094 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800604c:	f7fc fc5a 	bl	8002904 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d803      	bhi.n	8006064 <HAL_SPI_Transmit+0x164>
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006062:	d102      	bne.n	800606a <HAL_SPI_Transmit+0x16a>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d114      	bne.n	8006094 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 fba8 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e11e      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1b9      	bne.n	8006014 <HAL_SPI_Transmit+0x114>
 80060a0:	e0f1      	b.n	8006286 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b07      	cmp	r3, #7
 80060a8:	f240 80e6 	bls.w	8006278 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060ac:	e05d      	b.n	800616a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0302 	and.w	r3, r3, #2
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d132      	bne.n	8006122 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d918      	bls.n	80060fa <HAL_SPI_Transmit+0x1fa>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d014      	beq.n	80060fa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060e0:	1d1a      	adds	r2, r3, #4
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b02      	subs	r3, #2
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80060f8:	e037      	b.n	800616a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fe:	881a      	ldrh	r2, [r3, #0]
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8006120:	e023      	b.n	800616a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006122:	f7fc fbef 	bl	8002904 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d803      	bhi.n	800613a <HAL_SPI_Transmit+0x23a>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006138:	d102      	bne.n	8006140 <HAL_SPI_Transmit+0x240>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d114      	bne.n	800616a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fb3d 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800614c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0b3      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d19b      	bne.n	80060ae <HAL_SPI_Transmit+0x1ae>
 8006176:	e086      	b.n	8006286 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d154      	bne.n	8006230 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d918      	bls.n	80061c4 <HAL_SPI_Transmit+0x2c4>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006196:	2b40      	cmp	r3, #64	@ 0x40
 8006198:	d914      	bls.n	80061c4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	6812      	ldr	r2, [r2, #0]
 80061a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b04      	subs	r3, #4
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061c2:	e059      	b.n	8006278 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d917      	bls.n	8006200 <HAL_SPI_Transmit+0x300>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061dc:	881a      	ldrh	r2, [r3, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80061fe:	e03b      	b.n	8006278 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3320      	adds	r3, #32
 800620a:	7812      	ldrb	r2, [r2, #0]
 800620c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800622a:	e025      	b.n	8006278 <HAL_SPI_Transmit+0x378>
 800622c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006230:	f7fc fb68 	bl	8002904 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d803      	bhi.n	8006248 <HAL_SPI_Transmit+0x348>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d102      	bne.n	800624e <HAL_SPI_Transmit+0x34e>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d114      	bne.n	8006278 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fab6 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800625a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e02c      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800627e:	b29b      	uxth	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	f47f af79 	bne.w	8006178 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	2108      	movs	r1, #8
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fb35 	bl	8006900 <SPI_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 fa87 	bl	80067c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 80062d0:	2300      	movs	r3, #0
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	603b      	str	r3, [r7, #0]
 80062e8:	4613      	mov	r3, r2
 80062ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3301      	adds	r3, #1
 80062f6:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3330      	adds	r3, #48	@ 0x30
 80062fe:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006300:	f7fc fb00 	bl	8002904 <HAL_GetTick>
 8006304:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8006312:	2302      	movs	r3, #2
 8006314:	e250      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_SPI_Receive+0x46>
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e248      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_SPI_Receive+0x58>
 8006330:	2302      	movs	r3, #2
 8006332:	e241      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2204      	movs	r2, #4
 8006340:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	88fa      	ldrh	r2, [r7, #6]
 800635e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800638c:	d108      	bne.n	80063a0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800639c:	601a      	str	r2, [r3, #0]
 800639e:	e009      	b.n	80063b4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80063b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4b95      	ldr	r3, [pc, #596]	@ (8006610 <HAL_SPI_Receive+0x334>)
 80063bc:	4013      	ands	r3, r2
 80063be:	88f9      	ldrh	r1, [r7, #6]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	6812      	ldr	r2, [r2, #0]
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e0:	d107      	bne.n	80063f2 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b0f      	cmp	r3, #15
 80063f8:	d96c      	bls.n	80064d4 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80063fa:	e064      	b.n	80064c6 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b01      	cmp	r3, #1
 8006410:	d114      	bne.n	800643c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800641c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006422:	1d1a      	adds	r2, r3, #4
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800643a:	e044      	b.n	80064c6 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006442:	b29b      	uxth	r3, r3
 8006444:	8bfa      	ldrh	r2, [r7, #30]
 8006446:	429a      	cmp	r2, r3
 8006448:	d919      	bls.n	800647e <HAL_SPI_Receive+0x1a2>
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d014      	beq.n	800647e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800645c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800645e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006464:	1d1a      	adds	r2, r3, #4
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800647c:	e023      	b.n	80064c6 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647e:	f7fc fa41 	bl	8002904 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d803      	bhi.n	8006496 <HAL_SPI_Receive+0x1ba>
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d102      	bne.n	800649c <HAL_SPI_Receive+0x1c0>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d114      	bne.n	80064c6 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f98f 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e178      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d194      	bne.n	80063fc <HAL_SPI_Receive+0x120>
 80064d2:	e15e      	b.n	8006792 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	2b07      	cmp	r3, #7
 80064da:	f240 8153 	bls.w	8006784 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064de:	e08f      	b.n	8006600 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d114      	bne.n	8006520 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	8812      	ldrh	r2, [r2, #0]
 80064fe:	b292      	uxth	r2, r2
 8006500:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006506:	1c9a      	adds	r2, r3, #2
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800651e:	e06f      	b.n	8006600 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006526:	b29b      	uxth	r3, r3
 8006528:	8bfa      	ldrh	r2, [r7, #30]
 800652a:	429a      	cmp	r2, r3
 800652c:	d924      	bls.n	8006578 <HAL_SPI_Receive+0x29c>
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01f      	beq.n	8006578 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	8812      	ldrh	r2, [r2, #0]
 8006540:	b292      	uxth	r2, r2
 8006542:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006548:	1c9a      	adds	r2, r3, #2
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	8812      	ldrh	r2, [r2, #0]
 8006556:	b292      	uxth	r2, r2
 8006558:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800655e:	1c9a      	adds	r2, r3, #2
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b02      	subs	r3, #2
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006576:	e043      	b.n	8006600 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d119      	bne.n	80065b8 <HAL_SPI_Receive+0x2dc>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d014      	beq.n	80065b8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	8812      	ldrh	r2, [r2, #0]
 8006596:	b292      	uxth	r2, r2
 8006598:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80065b6:	e023      	b.n	8006600 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b8:	f7fc f9a4 	bl	8002904 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d803      	bhi.n	80065d0 <HAL_SPI_Receive+0x2f4>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d102      	bne.n	80065d6 <HAL_SPI_Receive+0x2fa>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d114      	bne.n	8006600 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f000 f8f2 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0db      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	f47f af69 	bne.w	80064e0 <HAL_SPI_Receive+0x204>
 800660e:	e0c0      	b.n	8006792 <HAL_SPI_Receive+0x4b6>
 8006610:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b01      	cmp	r3, #1
 8006628:	d117      	bne.n	800665a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006658:	e094      	b.n	8006784 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006660:	b29b      	uxth	r3, r3
 8006662:	8bfa      	ldrh	r2, [r7, #30]
 8006664:	429a      	cmp	r2, r3
 8006666:	d946      	bls.n	80066f6 <HAL_SPI_Receive+0x41a>
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d041      	beq.n	80066f6 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800667e:	7812      	ldrb	r2, [r2, #0]
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006688:	1c5a      	adds	r2, r3, #1
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800669a:	7812      	ldrb	r2, [r2, #0]
 800669c:	b2d2      	uxtb	r2, r2
 800669e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	3b04      	subs	r3, #4
 80066ec:	b29a      	uxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80066f4:	e046      	b.n	8006784 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d81c      	bhi.n	800673c <HAL_SPI_Receive+0x460>
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d017      	beq.n	800673c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800673a:	e023      	b.n	8006784 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800673c:	f7fc f8e2 	bl	8002904 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d803      	bhi.n	8006754 <HAL_SPI_Receive+0x478>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006752:	d102      	bne.n	800675a <HAL_SPI_Receive+0x47e>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d114      	bne.n	8006784 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f830 	bl	80067c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006766:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e019      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800678a:	b29b      	uxth	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	f47f af41 	bne.w	8006614 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f814 	bl	80067c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e000      	b.n	80067b8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 80067b6:	2300      	movs	r3, #0
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0208 	orr.w	r2, r2, #8
 80067de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699a      	ldr	r2, [r3, #24]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0210 	orr.w	r2, r2, #16
 80067ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0201 	bic.w	r2, r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	6919      	ldr	r1, [r3, #16]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b3c      	ldr	r3, [pc, #240]	@ (80068fc <SPI_CloseTransfer+0x13c>)
 800680c:	400b      	ands	r3, r1
 800680e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800681e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b04      	cmp	r3, #4
 800682a:	d014      	beq.n	8006856 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00f      	beq.n	8006856 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800683c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0220 	orr.w	r2, r2, #32
 8006854:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d014      	beq.n	800688c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800688a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00f      	beq.n	80068b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800689c:	f043 0201 	orr.w	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	699a      	ldr	r2, [r3, #24]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00f      	beq.n	80068e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068c6:	f043 0208 	orr.w	r2, r3, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	fffffc90 	.word	0xfffffc90

08006900 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006910:	e010      	b.n	8006934 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006912:	f7fb fff7 	bl	8002904 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d803      	bhi.n	800692a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006928:	d102      	bne.n	8006930 <SPI_WaitOnFlagUntilTimeout+0x30>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e00f      	b.n	8006954 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4013      	ands	r3, r2
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	429a      	cmp	r2, r3
 8006942:	bf0c      	ite	eq
 8006944:	2301      	moveq	r3, #1
 8006946:	2300      	movne	r3, #0
 8006948:	b2db      	uxtb	r3, r3
 800694a:	461a      	mov	r2, r3
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	429a      	cmp	r2, r3
 8006950:	d0df      	beq.n	8006912 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006968:	095b      	lsrs	r3, r3, #5
 800696a:	3301      	adds	r3, #1
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	3301      	adds	r3, #1
 8006974:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	3307      	adds	r3, #7
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	fb02 f303 	mul.w	r3, r2, r3
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b082      	sub	sp, #8
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	e049      	b.n	8006a38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fb fcf9 	bl	80023b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2202      	movs	r2, #2
 80069c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	3304      	adds	r3, #4
 80069ce:	4619      	mov	r1, r3
 80069d0:	4610      	mov	r0, r2
 80069d2:	f000 fad5 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d001      	beq.n	8006a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e054      	b.n	8006b02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a26      	ldr	r2, [pc, #152]	@ (8006b10 <HAL_TIM_Base_Start_IT+0xd0>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d022      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a82:	d01d      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a22      	ldr	r2, [pc, #136]	@ (8006b14 <HAL_TIM_Base_Start_IT+0xd4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d018      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a21      	ldr	r2, [pc, #132]	@ (8006b18 <HAL_TIM_Base_Start_IT+0xd8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d013      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <HAL_TIM_Base_Start_IT+0xdc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00e      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b20 <HAL_TIM_Base_Start_IT+0xe0>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d009      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b24 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0x80>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_TIM_Base_Start_IT+0xe8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d115      	bne.n	8006aec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <HAL_TIM_Base_Start_IT+0xec>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d015      	beq.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ad8:	d011      	beq.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f042 0201 	orr.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aea:	e008      	b.n	8006afe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e000      	b.n	8006b00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006afe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40010400 	.word	0x40010400
 8006b24:	40001800 	.word	0x40001800
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	00010007 	.word	0x00010007

08006b30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d020      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d01b      	beq.n	8006b94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0202 	mvn.w	r2, #2
 8006b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f9e2 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9d4 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f9e5 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d020      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01b      	beq.n	8006be0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0204 	mvn.w	r2, #4
 8006bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2202      	movs	r2, #2
 8006bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f9bc 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006bcc:	e005      	b.n	8006bda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f9ae 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9bf 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f003 0308 	and.w	r3, r3, #8
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d020      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f003 0308 	and.w	r3, r3, #8
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01b      	beq.n	8006c2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0208 	mvn.w	r2, #8
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2204      	movs	r2, #4
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f996 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f988 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f999 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d020      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0210 	mvn.w	r2, #16
 8006c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f970 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f962 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f973 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d007      	beq.n	8006c9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0201 	mvn.w	r2, #1
 8006c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fa ff9c 	bl	8001bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d104      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d007      	beq.n	8006cca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb31 	bl	800732c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00c      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d007      	beq.n	8006cee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb29 	bl	8007340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00c      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f92d 	bl	8006f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00c      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 0320 	and.w	r3, r3, #32
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d007      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f06f 0220 	mvn.w	r2, #32
 8006d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 faf1 	bl	8007318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d36:	bf00      	nop
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_ConfigClockSource+0x1c>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e0dc      	b.n	8006f16 <HAL_TIM_ConfigClockSource+0x1d6>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	4b6a      	ldr	r3, [pc, #424]	@ (8006f20 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006d78:	4013      	ands	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a64      	ldr	r2, [pc, #400]	@ (8006f24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	f000 80a9 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006d98:	4a62      	ldr	r2, [pc, #392]	@ (8006f24 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f200 80ae 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006da0:	4a61      	ldr	r2, [pc, #388]	@ (8006f28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f000 80a1 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006da8:	4a5f      	ldr	r2, [pc, #380]	@ (8006f28 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f200 80a6 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006db0:	4a5e      	ldr	r2, [pc, #376]	@ (8006f2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f000 8099 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006db8:	4a5c      	ldr	r2, [pc, #368]	@ (8006f2c <HAL_TIM_ConfigClockSource+0x1ec>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f200 809e 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006dc0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006dc4:	f000 8091 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006dc8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006dcc:	f200 8096 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006dd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd4:	f000 8089 	beq.w	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006dd8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ddc:	f200 808e 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de4:	d03e      	beq.n	8006e64 <HAL_TIM_ConfigClockSource+0x124>
 8006de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dea:	f200 8087 	bhi.w	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006df2:	f000 8086 	beq.w	8006f02 <HAL_TIM_ConfigClockSource+0x1c2>
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfa:	d87f      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006dfc:	2b70      	cmp	r3, #112	@ 0x70
 8006dfe:	d01a      	beq.n	8006e36 <HAL_TIM_ConfigClockSource+0xf6>
 8006e00:	2b70      	cmp	r3, #112	@ 0x70
 8006e02:	d87b      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e04:	2b60      	cmp	r3, #96	@ 0x60
 8006e06:	d050      	beq.n	8006eaa <HAL_TIM_ConfigClockSource+0x16a>
 8006e08:	2b60      	cmp	r3, #96	@ 0x60
 8006e0a:	d877      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e0c:	2b50      	cmp	r3, #80	@ 0x50
 8006e0e:	d03c      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x14a>
 8006e10:	2b50      	cmp	r3, #80	@ 0x50
 8006e12:	d873      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e14:	2b40      	cmp	r3, #64	@ 0x40
 8006e16:	d058      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0x18a>
 8006e18:	2b40      	cmp	r3, #64	@ 0x40
 8006e1a:	d86f      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e1c:	2b30      	cmp	r3, #48	@ 0x30
 8006e1e:	d064      	beq.n	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006e20:	2b30      	cmp	r3, #48	@ 0x30
 8006e22:	d86b      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e24:	2b20      	cmp	r3, #32
 8006e26:	d060      	beq.n	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	d867      	bhi.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d05c      	beq.n	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d05a      	beq.n	8006eea <HAL_TIM_ConfigClockSource+0x1aa>
 8006e34:	e062      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e46:	f000 f9b9 	bl	80071bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	609a      	str	r2, [r3, #8]
      break;
 8006e62:	e04f      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e74:	f000 f9a2 	bl	80071bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e86:	609a      	str	r2, [r3, #8]
      break;
 8006e88:	e03c      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e96:	461a      	mov	r2, r3
 8006e98:	f000 f912 	bl	80070c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2150      	movs	r1, #80	@ 0x50
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 f96c 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006ea8:	e02c      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f000 f931 	bl	800711e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2160      	movs	r1, #96	@ 0x60
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f000 f95c 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006ec8:	e01c      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f000 f8f2 	bl	80070c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2140      	movs	r1, #64	@ 0x40
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f000 f94c 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006ee8:	e00c      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f000 f943 	bl	8007180 <TIM_ITRx_SetConfig>
      break;
 8006efa:	e003      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	73fb      	strb	r3, [r7, #15]
      break;
 8006f00:	e000      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006f02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	ffceff88 	.word	0xffceff88
 8006f24:	00100040 	.word	0x00100040
 8006f28:	00100030 	.word	0x00100030
 8006f2c:	00100020 	.word	0x00100020

08006f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a43      	ldr	r2, [pc, #268]	@ (80070a0 <TIM_Base_SetConfig+0x120>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	@ (80070a4 <TIM_Base_SetConfig+0x124>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3f      	ldr	r2, [pc, #252]	@ (80070a8 <TIM_Base_SetConfig+0x128>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80070ac <TIM_Base_SetConfig+0x12c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3d      	ldr	r2, [pc, #244]	@ (80070b0 <TIM_Base_SetConfig+0x130>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <TIM_Base_SetConfig+0x120>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01f      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe0:	d01b      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	@ (80070a4 <TIM_Base_SetConfig+0x124>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d017      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2e      	ldr	r2, [pc, #184]	@ (80070a8 <TIM_Base_SetConfig+0x128>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80070ac <TIM_Base_SetConfig+0x12c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2c      	ldr	r2, [pc, #176]	@ (80070b0 <TIM_Base_SetConfig+0x130>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2b      	ldr	r2, [pc, #172]	@ (80070b4 <TIM_Base_SetConfig+0x134>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2a      	ldr	r2, [pc, #168]	@ (80070b8 <TIM_Base_SetConfig+0x138>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a29      	ldr	r2, [pc, #164]	@ (80070bc <TIM_Base_SetConfig+0x13c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689a      	ldr	r2, [r3, #8]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a14      	ldr	r2, [pc, #80]	@ (80070a0 <TIM_Base_SetConfig+0x120>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00f      	beq.n	8007072 <TIM_Base_SetConfig+0xf2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a16      	ldr	r2, [pc, #88]	@ (80070b0 <TIM_Base_SetConfig+0x130>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0xf2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a15      	ldr	r2, [pc, #84]	@ (80070b4 <TIM_Base_SetConfig+0x134>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0xf2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a14      	ldr	r2, [pc, #80]	@ (80070b8 <TIM_Base_SetConfig+0x138>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0xf2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a13      	ldr	r2, [pc, #76]	@ (80070bc <TIM_Base_SetConfig+0x13c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d103      	bne.n	800707a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f043 0204 	orr.w	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	601a      	str	r2, [r3, #0]
}
 8007092:	bf00      	nop
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40000400 	.word	0x40000400
 80070a8:	40000800 	.word	0x40000800
 80070ac:	40000c00 	.word	0x40000c00
 80070b0:	40010400 	.word	0x40010400
 80070b4:	40014000 	.word	0x40014000
 80070b8:	40014400 	.word	0x40014400
 80070bc:	40014800 	.word	0x40014800

080070c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	f023 0201 	bic.w	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	693a      	ldr	r2, [r7, #16]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 030a 	bic.w	r3, r3, #10
 80070fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4313      	orrs	r3, r2
 8007104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800711e:	b480      	push	{r7}
 8007120:	b087      	sub	sp, #28
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	f023 0210 	bic.w	r2, r3, #16
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	699b      	ldr	r3, [r3, #24]
 8007140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800715a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	011b      	lsls	r3, r3, #4
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	4313      	orrs	r3, r2
 8007164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	621a      	str	r2, [r3, #32]
}
 8007172:	bf00      	nop
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	4b09      	ldr	r3, [pc, #36]	@ (80071b8 <TIM_ITRx_SetConfig+0x38>)
 8007194:	4013      	ands	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	f043 0307 	orr.w	r3, r3, #7
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	609a      	str	r2, [r3, #8]
}
 80071aa:	bf00      	nop
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	ffcfff8f 	.word	0xffcfff8f

080071bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	431a      	orrs	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	609a      	str	r2, [r3, #8]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d101      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007210:	2302      	movs	r3, #2
 8007212:	e06d      	b.n	80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2202      	movs	r2, #2
 8007220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a30      	ldr	r2, [pc, #192]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2f      	ldr	r2, [pc, #188]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d108      	bne.n	800725a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800724e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a20      	ldr	r2, [pc, #128]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d022      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d01d      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1a      	ldr	r2, [pc, #104]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a15      	ldr	r2, [pc, #84]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a16      	ldr	r2, [pc, #88]	@ (8007310 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d10c      	bne.n	80072de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40001800 	.word	0x40001800
 8007314:	40014000 	.word	0x40014000

08007318 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e042      	b.n	80073ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fb f83f 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	@ 0x24
 8007382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fd90 	bl	8007ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f825 	bl	80073f4 <UART_SetConfig>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e01b      	b.n	80073ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80073c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689a      	ldr	r2, [r3, #8]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0201 	orr.w	r2, r2, #1
 80073e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fe0f 	bl	8008008 <UART_CheckIdleState>
 80073ea:	4603      	mov	r3, r0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3708      	adds	r7, #8
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f8:	b092      	sub	sp, #72	@ 0x48
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	431a      	orrs	r2, r3
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	4313      	orrs	r3, r2
 800741a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4bbe      	ldr	r3, [pc, #760]	@ (800771c <UART_SetConfig+0x328>)
 8007424:	4013      	ands	r3, r2
 8007426:	697a      	ldr	r2, [r7, #20]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800742c:	430b      	orrs	r3, r1
 800742e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	68da      	ldr	r2, [r3, #12]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4ab3      	ldr	r2, [pc, #716]	@ (8007720 <UART_SetConfig+0x32c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d004      	beq.n	8007460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800745c:	4313      	orrs	r3, r2
 800745e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	4baf      	ldr	r3, [pc, #700]	@ (8007724 <UART_SetConfig+0x330>)
 8007468:	4013      	ands	r3, r2
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007470:	430b      	orrs	r3, r1
 8007472:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747a:	f023 010f 	bic.w	r1, r3, #15
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4aa6      	ldr	r2, [pc, #664]	@ (8007728 <UART_SetConfig+0x334>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d177      	bne.n	8007584 <UART_SetConfig+0x190>
 8007494:	4ba5      	ldr	r3, [pc, #660]	@ (800772c <UART_SetConfig+0x338>)
 8007496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800749c:	2b28      	cmp	r3, #40	@ 0x28
 800749e:	d86d      	bhi.n	800757c <UART_SetConfig+0x188>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0xb4>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	0800754d 	.word	0x0800754d
 80074ac:	0800757d 	.word	0x0800757d
 80074b0:	0800757d 	.word	0x0800757d
 80074b4:	0800757d 	.word	0x0800757d
 80074b8:	0800757d 	.word	0x0800757d
 80074bc:	0800757d 	.word	0x0800757d
 80074c0:	0800757d 	.word	0x0800757d
 80074c4:	0800757d 	.word	0x0800757d
 80074c8:	08007555 	.word	0x08007555
 80074cc:	0800757d 	.word	0x0800757d
 80074d0:	0800757d 	.word	0x0800757d
 80074d4:	0800757d 	.word	0x0800757d
 80074d8:	0800757d 	.word	0x0800757d
 80074dc:	0800757d 	.word	0x0800757d
 80074e0:	0800757d 	.word	0x0800757d
 80074e4:	0800757d 	.word	0x0800757d
 80074e8:	0800755d 	.word	0x0800755d
 80074ec:	0800757d 	.word	0x0800757d
 80074f0:	0800757d 	.word	0x0800757d
 80074f4:	0800757d 	.word	0x0800757d
 80074f8:	0800757d 	.word	0x0800757d
 80074fc:	0800757d 	.word	0x0800757d
 8007500:	0800757d 	.word	0x0800757d
 8007504:	0800757d 	.word	0x0800757d
 8007508:	08007565 	.word	0x08007565
 800750c:	0800757d 	.word	0x0800757d
 8007510:	0800757d 	.word	0x0800757d
 8007514:	0800757d 	.word	0x0800757d
 8007518:	0800757d 	.word	0x0800757d
 800751c:	0800757d 	.word	0x0800757d
 8007520:	0800757d 	.word	0x0800757d
 8007524:	0800757d 	.word	0x0800757d
 8007528:	0800756d 	.word	0x0800756d
 800752c:	0800757d 	.word	0x0800757d
 8007530:	0800757d 	.word	0x0800757d
 8007534:	0800757d 	.word	0x0800757d
 8007538:	0800757d 	.word	0x0800757d
 800753c:	0800757d 	.word	0x0800757d
 8007540:	0800757d 	.word	0x0800757d
 8007544:	0800757d 	.word	0x0800757d
 8007548:	08007575 	.word	0x08007575
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e222      	b.n	800799a <UART_SetConfig+0x5a6>
 8007554:	2304      	movs	r3, #4
 8007556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755a:	e21e      	b.n	800799a <UART_SetConfig+0x5a6>
 800755c:	2308      	movs	r3, #8
 800755e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007562:	e21a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007564:	2310      	movs	r3, #16
 8007566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756a:	e216      	b.n	800799a <UART_SetConfig+0x5a6>
 800756c:	2320      	movs	r3, #32
 800756e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007572:	e212      	b.n	800799a <UART_SetConfig+0x5a6>
 8007574:	2340      	movs	r3, #64	@ 0x40
 8007576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757a:	e20e      	b.n	800799a <UART_SetConfig+0x5a6>
 800757c:	2380      	movs	r3, #128	@ 0x80
 800757e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007582:	e20a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a69      	ldr	r2, [pc, #420]	@ (8007730 <UART_SetConfig+0x33c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d130      	bne.n	80075f0 <UART_SetConfig+0x1fc>
 800758e:	4b67      	ldr	r3, [pc, #412]	@ (800772c <UART_SetConfig+0x338>)
 8007590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b05      	cmp	r3, #5
 8007598:	d826      	bhi.n	80075e8 <UART_SetConfig+0x1f4>
 800759a:	a201      	add	r2, pc, #4	@ (adr r2, 80075a0 <UART_SetConfig+0x1ac>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075c1 	.word	0x080075c1
 80075a8:	080075c9 	.word	0x080075c9
 80075ac:	080075d1 	.word	0x080075d1
 80075b0:	080075d9 	.word	0x080075d9
 80075b4:	080075e1 	.word	0x080075e1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e1ec      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c0:	2304      	movs	r3, #4
 80075c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075c6:	e1e8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075c8:	2308      	movs	r3, #8
 80075ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ce:	e1e4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d0:	2310      	movs	r3, #16
 80075d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d6:	e1e0      	b.n	800799a <UART_SetConfig+0x5a6>
 80075d8:	2320      	movs	r3, #32
 80075da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075de:	e1dc      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e0:	2340      	movs	r3, #64	@ 0x40
 80075e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e6:	e1d8      	b.n	800799a <UART_SetConfig+0x5a6>
 80075e8:	2380      	movs	r3, #128	@ 0x80
 80075ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ee:	e1d4      	b.n	800799a <UART_SetConfig+0x5a6>
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a4f      	ldr	r2, [pc, #316]	@ (8007734 <UART_SetConfig+0x340>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d130      	bne.n	800765c <UART_SetConfig+0x268>
 80075fa:	4b4c      	ldr	r3, [pc, #304]	@ (800772c <UART_SetConfig+0x338>)
 80075fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	2b05      	cmp	r3, #5
 8007604:	d826      	bhi.n	8007654 <UART_SetConfig+0x260>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <UART_SetConfig+0x218>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007625 	.word	0x08007625
 8007610:	0800762d 	.word	0x0800762d
 8007614:	08007635 	.word	0x08007635
 8007618:	0800763d 	.word	0x0800763d
 800761c:	08007645 	.word	0x08007645
 8007620:	0800764d 	.word	0x0800764d
 8007624:	2300      	movs	r3, #0
 8007626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800762a:	e1b6      	b.n	800799a <UART_SetConfig+0x5a6>
 800762c:	2304      	movs	r3, #4
 800762e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007632:	e1b2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007634:	2308      	movs	r3, #8
 8007636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763a:	e1ae      	b.n	800799a <UART_SetConfig+0x5a6>
 800763c:	2310      	movs	r3, #16
 800763e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007642:	e1aa      	b.n	800799a <UART_SetConfig+0x5a6>
 8007644:	2320      	movs	r3, #32
 8007646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764a:	e1a6      	b.n	800799a <UART_SetConfig+0x5a6>
 800764c:	2340      	movs	r3, #64	@ 0x40
 800764e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007652:	e1a2      	b.n	800799a <UART_SetConfig+0x5a6>
 8007654:	2380      	movs	r3, #128	@ 0x80
 8007656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800765a:	e19e      	b.n	800799a <UART_SetConfig+0x5a6>
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a35      	ldr	r2, [pc, #212]	@ (8007738 <UART_SetConfig+0x344>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d130      	bne.n	80076c8 <UART_SetConfig+0x2d4>
 8007666:	4b31      	ldr	r3, [pc, #196]	@ (800772c <UART_SetConfig+0x338>)
 8007668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	2b05      	cmp	r3, #5
 8007670:	d826      	bhi.n	80076c0 <UART_SetConfig+0x2cc>
 8007672:	a201      	add	r2, pc, #4	@ (adr r2, 8007678 <UART_SetConfig+0x284>)
 8007674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007678:	08007691 	.word	0x08007691
 800767c:	08007699 	.word	0x08007699
 8007680:	080076a1 	.word	0x080076a1
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076b1 	.word	0x080076b1
 800768c:	080076b9 	.word	0x080076b9
 8007690:	2300      	movs	r3, #0
 8007692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007696:	e180      	b.n	800799a <UART_SetConfig+0x5a6>
 8007698:	2304      	movs	r3, #4
 800769a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800769e:	e17c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a0:	2308      	movs	r3, #8
 80076a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076a6:	e178      	b.n	800799a <UART_SetConfig+0x5a6>
 80076a8:	2310      	movs	r3, #16
 80076aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ae:	e174      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b0:	2320      	movs	r3, #32
 80076b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b6:	e170      	b.n	800799a <UART_SetConfig+0x5a6>
 80076b8:	2340      	movs	r3, #64	@ 0x40
 80076ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076be:	e16c      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c0:	2380      	movs	r3, #128	@ 0x80
 80076c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c6:	e168      	b.n	800799a <UART_SetConfig+0x5a6>
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <UART_SetConfig+0x348>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d142      	bne.n	8007758 <UART_SetConfig+0x364>
 80076d2:	4b16      	ldr	r3, [pc, #88]	@ (800772c <UART_SetConfig+0x338>)
 80076d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d6:	f003 0307 	and.w	r3, r3, #7
 80076da:	2b05      	cmp	r3, #5
 80076dc:	d838      	bhi.n	8007750 <UART_SetConfig+0x35c>
 80076de:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <UART_SetConfig+0x2f0>)
 80076e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e4:	080076fd 	.word	0x080076fd
 80076e8:	08007705 	.word	0x08007705
 80076ec:	0800770d 	.word	0x0800770d
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007749 	.word	0x08007749
 80076fc:	2300      	movs	r3, #0
 80076fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007702:	e14a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770a:	e146      	b.n	800799a <UART_SetConfig+0x5a6>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007712:	e142      	b.n	800799a <UART_SetConfig+0x5a6>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771a:	e13e      	b.n	800799a <UART_SetConfig+0x5a6>
 800771c:	cfff69f3 	.word	0xcfff69f3
 8007720:	58000c00 	.word	0x58000c00
 8007724:	11fff4ff 	.word	0x11fff4ff
 8007728:	40011000 	.word	0x40011000
 800772c:	58024400 	.word	0x58024400
 8007730:	40004400 	.word	0x40004400
 8007734:	40004800 	.word	0x40004800
 8007738:	40004c00 	.word	0x40004c00
 800773c:	40005000 	.word	0x40005000
 8007740:	2320      	movs	r3, #32
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e128      	b.n	800799a <UART_SetConfig+0x5a6>
 8007748:	2340      	movs	r3, #64	@ 0x40
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e124      	b.n	800799a <UART_SetConfig+0x5a6>
 8007750:	2380      	movs	r3, #128	@ 0x80
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e120      	b.n	800799a <UART_SetConfig+0x5a6>
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4acb      	ldr	r2, [pc, #812]	@ (8007a8c <UART_SetConfig+0x698>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d176      	bne.n	8007850 <UART_SetConfig+0x45c>
 8007762:	4bcb      	ldr	r3, [pc, #812]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800776a:	2b28      	cmp	r3, #40	@ 0x28
 800776c:	d86c      	bhi.n	8007848 <UART_SetConfig+0x454>
 800776e:	a201      	add	r2, pc, #4	@ (adr r2, 8007774 <UART_SetConfig+0x380>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	08007819 	.word	0x08007819
 8007778:	08007849 	.word	0x08007849
 800777c:	08007849 	.word	0x08007849
 8007780:	08007849 	.word	0x08007849
 8007784:	08007849 	.word	0x08007849
 8007788:	08007849 	.word	0x08007849
 800778c:	08007849 	.word	0x08007849
 8007790:	08007849 	.word	0x08007849
 8007794:	08007821 	.word	0x08007821
 8007798:	08007849 	.word	0x08007849
 800779c:	08007849 	.word	0x08007849
 80077a0:	08007849 	.word	0x08007849
 80077a4:	08007849 	.word	0x08007849
 80077a8:	08007849 	.word	0x08007849
 80077ac:	08007849 	.word	0x08007849
 80077b0:	08007849 	.word	0x08007849
 80077b4:	08007829 	.word	0x08007829
 80077b8:	08007849 	.word	0x08007849
 80077bc:	08007849 	.word	0x08007849
 80077c0:	08007849 	.word	0x08007849
 80077c4:	08007849 	.word	0x08007849
 80077c8:	08007849 	.word	0x08007849
 80077cc:	08007849 	.word	0x08007849
 80077d0:	08007849 	.word	0x08007849
 80077d4:	08007831 	.word	0x08007831
 80077d8:	08007849 	.word	0x08007849
 80077dc:	08007849 	.word	0x08007849
 80077e0:	08007849 	.word	0x08007849
 80077e4:	08007849 	.word	0x08007849
 80077e8:	08007849 	.word	0x08007849
 80077ec:	08007849 	.word	0x08007849
 80077f0:	08007849 	.word	0x08007849
 80077f4:	08007839 	.word	0x08007839
 80077f8:	08007849 	.word	0x08007849
 80077fc:	08007849 	.word	0x08007849
 8007800:	08007849 	.word	0x08007849
 8007804:	08007849 	.word	0x08007849
 8007808:	08007849 	.word	0x08007849
 800780c:	08007849 	.word	0x08007849
 8007810:	08007849 	.word	0x08007849
 8007814:	08007841 	.word	0x08007841
 8007818:	2301      	movs	r3, #1
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e0bc      	b.n	800799a <UART_SetConfig+0x5a6>
 8007820:	2304      	movs	r3, #4
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e0b8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007828:	2308      	movs	r3, #8
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e0b4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007830:	2310      	movs	r3, #16
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e0b0      	b.n	800799a <UART_SetConfig+0x5a6>
 8007838:	2320      	movs	r3, #32
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e0ac      	b.n	800799a <UART_SetConfig+0x5a6>
 8007840:	2340      	movs	r3, #64	@ 0x40
 8007842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007846:	e0a8      	b.n	800799a <UART_SetConfig+0x5a6>
 8007848:	2380      	movs	r3, #128	@ 0x80
 800784a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784e:	e0a4      	b.n	800799a <UART_SetConfig+0x5a6>
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a8f      	ldr	r2, [pc, #572]	@ (8007a94 <UART_SetConfig+0x6a0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d130      	bne.n	80078bc <UART_SetConfig+0x4c8>
 800785a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a90 <UART_SetConfig+0x69c>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785e:	f003 0307 	and.w	r3, r3, #7
 8007862:	2b05      	cmp	r3, #5
 8007864:	d826      	bhi.n	80078b4 <UART_SetConfig+0x4c0>
 8007866:	a201      	add	r2, pc, #4	@ (adr r2, 800786c <UART_SetConfig+0x478>)
 8007868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788d 	.word	0x0800788d
 8007874:	08007895 	.word	0x08007895
 8007878:	0800789d 	.word	0x0800789d
 800787c:	080078a5 	.word	0x080078a5
 8007880:	080078ad 	.word	0x080078ad
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e086      	b.n	800799a <UART_SetConfig+0x5a6>
 800788c:	2304      	movs	r3, #4
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e082      	b.n	800799a <UART_SetConfig+0x5a6>
 8007894:	2308      	movs	r3, #8
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e07e      	b.n	800799a <UART_SetConfig+0x5a6>
 800789c:	2310      	movs	r3, #16
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e07a      	b.n	800799a <UART_SetConfig+0x5a6>
 80078a4:	2320      	movs	r3, #32
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e076      	b.n	800799a <UART_SetConfig+0x5a6>
 80078ac:	2340      	movs	r3, #64	@ 0x40
 80078ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b2:	e072      	b.n	800799a <UART_SetConfig+0x5a6>
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ba:	e06e      	b.n	800799a <UART_SetConfig+0x5a6>
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a75      	ldr	r2, [pc, #468]	@ (8007a98 <UART_SetConfig+0x6a4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d130      	bne.n	8007928 <UART_SetConfig+0x534>
 80078c6:	4b72      	ldr	r3, [pc, #456]	@ (8007a90 <UART_SetConfig+0x69c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d826      	bhi.n	8007920 <UART_SetConfig+0x52c>
 80078d2:	a201      	add	r2, pc, #4	@ (adr r2, 80078d8 <UART_SetConfig+0x4e4>)
 80078d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d8:	080078f1 	.word	0x080078f1
 80078dc:	080078f9 	.word	0x080078f9
 80078e0:	08007901 	.word	0x08007901
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e050      	b.n	800799a <UART_SetConfig+0x5a6>
 80078f8:	2304      	movs	r3, #4
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e04c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007900:	2308      	movs	r3, #8
 8007902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007906:	e048      	b.n	800799a <UART_SetConfig+0x5a6>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790e:	e044      	b.n	800799a <UART_SetConfig+0x5a6>
 8007910:	2320      	movs	r3, #32
 8007912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007916:	e040      	b.n	800799a <UART_SetConfig+0x5a6>
 8007918:	2340      	movs	r3, #64	@ 0x40
 800791a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791e:	e03c      	b.n	800799a <UART_SetConfig+0x5a6>
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007926:	e038      	b.n	800799a <UART_SetConfig+0x5a6>
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a5b      	ldr	r2, [pc, #364]	@ (8007a9c <UART_SetConfig+0x6a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d130      	bne.n	8007994 <UART_SetConfig+0x5a0>
 8007932:	4b57      	ldr	r3, [pc, #348]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	2b05      	cmp	r3, #5
 800793c:	d826      	bhi.n	800798c <UART_SetConfig+0x598>
 800793e:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <UART_SetConfig+0x550>)
 8007940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007944:	0800795d 	.word	0x0800795d
 8007948:	08007965 	.word	0x08007965
 800794c:	0800796d 	.word	0x0800796d
 8007950:	08007975 	.word	0x08007975
 8007954:	0800797d 	.word	0x0800797d
 8007958:	08007985 	.word	0x08007985
 800795c:	2302      	movs	r3, #2
 800795e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007962:	e01a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007964:	2304      	movs	r3, #4
 8007966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800796a:	e016      	b.n	800799a <UART_SetConfig+0x5a6>
 800796c:	2308      	movs	r3, #8
 800796e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007972:	e012      	b.n	800799a <UART_SetConfig+0x5a6>
 8007974:	2310      	movs	r3, #16
 8007976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800797a:	e00e      	b.n	800799a <UART_SetConfig+0x5a6>
 800797c:	2320      	movs	r3, #32
 800797e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007982:	e00a      	b.n	800799a <UART_SetConfig+0x5a6>
 8007984:	2340      	movs	r3, #64	@ 0x40
 8007986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800798a:	e006      	b.n	800799a <UART_SetConfig+0x5a6>
 800798c:	2380      	movs	r3, #128	@ 0x80
 800798e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007992:	e002      	b.n	800799a <UART_SetConfig+0x5a6>
 8007994:	2380      	movs	r3, #128	@ 0x80
 8007996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a3f      	ldr	r2, [pc, #252]	@ (8007a9c <UART_SetConfig+0x6a8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	f040 80f8 	bne.w	8007b96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	dc46      	bgt.n	8007a3c <UART_SetConfig+0x648>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	f2c0 8082 	blt.w	8007ab8 <UART_SetConfig+0x6c4>
 80079b4:	3b02      	subs	r3, #2
 80079b6:	2b1e      	cmp	r3, #30
 80079b8:	d87e      	bhi.n	8007ab8 <UART_SetConfig+0x6c4>
 80079ba:	a201      	add	r2, pc, #4	@ (adr r2, 80079c0 <UART_SetConfig+0x5cc>)
 80079bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c0:	08007a43 	.word	0x08007a43
 80079c4:	08007ab9 	.word	0x08007ab9
 80079c8:	08007a4b 	.word	0x08007a4b
 80079cc:	08007ab9 	.word	0x08007ab9
 80079d0:	08007ab9 	.word	0x08007ab9
 80079d4:	08007ab9 	.word	0x08007ab9
 80079d8:	08007a5b 	.word	0x08007a5b
 80079dc:	08007ab9 	.word	0x08007ab9
 80079e0:	08007ab9 	.word	0x08007ab9
 80079e4:	08007ab9 	.word	0x08007ab9
 80079e8:	08007ab9 	.word	0x08007ab9
 80079ec:	08007ab9 	.word	0x08007ab9
 80079f0:	08007ab9 	.word	0x08007ab9
 80079f4:	08007ab9 	.word	0x08007ab9
 80079f8:	08007a6b 	.word	0x08007a6b
 80079fc:	08007ab9 	.word	0x08007ab9
 8007a00:	08007ab9 	.word	0x08007ab9
 8007a04:	08007ab9 	.word	0x08007ab9
 8007a08:	08007ab9 	.word	0x08007ab9
 8007a0c:	08007ab9 	.word	0x08007ab9
 8007a10:	08007ab9 	.word	0x08007ab9
 8007a14:	08007ab9 	.word	0x08007ab9
 8007a18:	08007ab9 	.word	0x08007ab9
 8007a1c:	08007ab9 	.word	0x08007ab9
 8007a20:	08007ab9 	.word	0x08007ab9
 8007a24:	08007ab9 	.word	0x08007ab9
 8007a28:	08007ab9 	.word	0x08007ab9
 8007a2c:	08007ab9 	.word	0x08007ab9
 8007a30:	08007ab9 	.word	0x08007ab9
 8007a34:	08007ab9 	.word	0x08007ab9
 8007a38:	08007aab 	.word	0x08007aab
 8007a3c:	2b40      	cmp	r3, #64	@ 0x40
 8007a3e:	d037      	beq.n	8007ab0 <UART_SetConfig+0x6bc>
 8007a40:	e03a      	b.n	8007ab8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007a42:	f7fd fd17 	bl	8005474 <HAL_RCCEx_GetD3PCLK1Freq>
 8007a46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007a48:	e03c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd fd26 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a58:	e034      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5a:	f107 0318 	add.w	r3, r7, #24
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fe72 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007a68:	e02c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a6a:	4b09      	ldr	r3, [pc, #36]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007a76:	4b06      	ldr	r3, [pc, #24]	@ (8007a90 <UART_SetConfig+0x69c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	08db      	lsrs	r3, r3, #3
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	4a07      	ldr	r2, [pc, #28]	@ (8007aa0 <UART_SetConfig+0x6ac>)
 8007a82:	fa22 f303 	lsr.w	r3, r2, r3
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a88:	e01c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
 8007a8a:	bf00      	nop
 8007a8c:	40011400 	.word	0x40011400
 8007a90:	58024400 	.word	0x58024400
 8007a94:	40007800 	.word	0x40007800
 8007a98:	40007c00 	.word	0x40007c00
 8007a9c:	58000c00 	.word	0x58000c00
 8007aa0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d1c <UART_SetConfig+0x928>)
 8007aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aa8:	e00c      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007aaa:	4b9d      	ldr	r3, [pc, #628]	@ (8007d20 <UART_SetConfig+0x92c>)
 8007aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aae:	e009      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ab6:	e005      	b.n	8007ac4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ac2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 81de 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ad0:	4a94      	ldr	r2, [pc, #592]	@ (8007d24 <UART_SetConfig+0x930>)
 8007ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ade:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d305      	bcc.n	8007afc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d903      	bls.n	8007b04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b02:	e1c1      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b06:	2200      	movs	r2, #0
 8007b08:	60bb      	str	r3, [r7, #8]
 8007b0a:	60fa      	str	r2, [r7, #12]
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	4a84      	ldr	r2, [pc, #528]	@ (8007d24 <UART_SetConfig+0x930>)
 8007b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2200      	movs	r2, #0
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007b26:	f7f8 fdef 	bl	8000708 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	020b      	lsls	r3, r1, #8
 8007b3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b40:	0202      	lsls	r2, r0, #8
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	6849      	ldr	r1, [r1, #4]
 8007b46:	0849      	lsrs	r1, r1, #1
 8007b48:	2000      	movs	r0, #0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	eb12 0804 	adds.w	r8, r2, r4
 8007b52:	eb43 0905 	adc.w	r9, r3, r5
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	469a      	mov	sl, r3
 8007b5e:	4693      	mov	fp, r2
 8007b60:	4652      	mov	r2, sl
 8007b62:	465b      	mov	r3, fp
 8007b64:	4640      	mov	r0, r8
 8007b66:	4649      	mov	r1, r9
 8007b68:	f7f8 fdce 	bl	8000708 <__aeabi_uldivmod>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4613      	mov	r3, r2
 8007b72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b7a:	d308      	bcc.n	8007b8e <UART_SetConfig+0x79a>
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b82:	d204      	bcs.n	8007b8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007b8a:	60da      	str	r2, [r3, #12]
 8007b8c:	e17c      	b.n	8007e88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007b94:	e178      	b.n	8007e88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b9e:	f040 80c5 	bne.w	8007d2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	dc48      	bgt.n	8007c3c <UART_SetConfig+0x848>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	db7b      	blt.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d879      	bhi.n	8007ca6 <UART_SetConfig+0x8b2>
 8007bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <UART_SetConfig+0x7c4>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c43 	.word	0x08007c43
 8007bbc:	08007c4b 	.word	0x08007c4b
 8007bc0:	08007ca7 	.word	0x08007ca7
 8007bc4:	08007ca7 	.word	0x08007ca7
 8007bc8:	08007c53 	.word	0x08007c53
 8007bcc:	08007ca7 	.word	0x08007ca7
 8007bd0:	08007ca7 	.word	0x08007ca7
 8007bd4:	08007ca7 	.word	0x08007ca7
 8007bd8:	08007c63 	.word	0x08007c63
 8007bdc:	08007ca7 	.word	0x08007ca7
 8007be0:	08007ca7 	.word	0x08007ca7
 8007be4:	08007ca7 	.word	0x08007ca7
 8007be8:	08007ca7 	.word	0x08007ca7
 8007bec:	08007ca7 	.word	0x08007ca7
 8007bf0:	08007ca7 	.word	0x08007ca7
 8007bf4:	08007ca7 	.word	0x08007ca7
 8007bf8:	08007c73 	.word	0x08007c73
 8007bfc:	08007ca7 	.word	0x08007ca7
 8007c00:	08007ca7 	.word	0x08007ca7
 8007c04:	08007ca7 	.word	0x08007ca7
 8007c08:	08007ca7 	.word	0x08007ca7
 8007c0c:	08007ca7 	.word	0x08007ca7
 8007c10:	08007ca7 	.word	0x08007ca7
 8007c14:	08007ca7 	.word	0x08007ca7
 8007c18:	08007ca7 	.word	0x08007ca7
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007ca7 	.word	0x08007ca7
 8007c24:	08007ca7 	.word	0x08007ca7
 8007c28:	08007ca7 	.word	0x08007ca7
 8007c2c:	08007ca7 	.word	0x08007ca7
 8007c30:	08007ca7 	.word	0x08007ca7
 8007c34:	08007ca7 	.word	0x08007ca7
 8007c38:	08007c99 	.word	0x08007c99
 8007c3c:	2b40      	cmp	r3, #64	@ 0x40
 8007c3e:	d02e      	beq.n	8007c9e <UART_SetConfig+0x8aa>
 8007c40:	e031      	b.n	8007ca6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c42:	f7fc f9e1 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8007c46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c48:	e033      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c4a:	f7fc f9f3 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 8007c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c50:	e02f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fd fc22 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	e027      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fd6e 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	e01f      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b2d      	ldr	r3, [pc, #180]	@ (8007d28 <UART_SetConfig+0x934>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d009      	beq.n	8007c92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8007d28 <UART_SetConfig+0x934>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a24      	ldr	r2, [pc, #144]	@ (8007d1c <UART_SetConfig+0x928>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c90:	e00f      	b.n	8007cb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007c92:	4b22      	ldr	r3, [pc, #136]	@ (8007d1c <UART_SetConfig+0x928>)
 8007c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c96:	e00c      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c98:	4b21      	ldr	r3, [pc, #132]	@ (8007d20 <UART_SetConfig+0x92c>)
 8007c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e009      	b.n	8007cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e005      	b.n	8007cb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80e7 	beq.w	8007e88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbe:	4a19      	ldr	r2, [pc, #100]	@ (8007d24 <UART_SetConfig+0x930>)
 8007cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ccc:	005a      	lsls	r2, r3, #1
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	085b      	lsrs	r3, r3, #1
 8007cd4:	441a      	add	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d916      	bls.n	8007d14 <UART_SetConfig+0x920>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d212      	bcs.n	8007d14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f023 030f 	bic.w	r3, r3, #15
 8007cf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	085b      	lsrs	r3, r3, #1
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	b29a      	uxth	r2, r3
 8007d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007d06:	4313      	orrs	r3, r2
 8007d08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007d10:	60da      	str	r2, [r3, #12]
 8007d12:	e0b9      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d1a:	e0b5      	b.n	8007e88 <UART_SetConfig+0xa94>
 8007d1c:	03d09000 	.word	0x03d09000
 8007d20:	003d0900 	.word	0x003d0900
 8007d24:	0800d540 	.word	0x0800d540
 8007d28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d30:	2b20      	cmp	r3, #32
 8007d32:	dc49      	bgt.n	8007dc8 <UART_SetConfig+0x9d4>
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	db7c      	blt.n	8007e32 <UART_SetConfig+0xa3e>
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d87a      	bhi.n	8007e32 <UART_SetConfig+0xa3e>
 8007d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d44 <UART_SetConfig+0x950>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007dcf 	.word	0x08007dcf
 8007d48:	08007dd7 	.word	0x08007dd7
 8007d4c:	08007e33 	.word	0x08007e33
 8007d50:	08007e33 	.word	0x08007e33
 8007d54:	08007ddf 	.word	0x08007ddf
 8007d58:	08007e33 	.word	0x08007e33
 8007d5c:	08007e33 	.word	0x08007e33
 8007d60:	08007e33 	.word	0x08007e33
 8007d64:	08007def 	.word	0x08007def
 8007d68:	08007e33 	.word	0x08007e33
 8007d6c:	08007e33 	.word	0x08007e33
 8007d70:	08007e33 	.word	0x08007e33
 8007d74:	08007e33 	.word	0x08007e33
 8007d78:	08007e33 	.word	0x08007e33
 8007d7c:	08007e33 	.word	0x08007e33
 8007d80:	08007e33 	.word	0x08007e33
 8007d84:	08007dff 	.word	0x08007dff
 8007d88:	08007e33 	.word	0x08007e33
 8007d8c:	08007e33 	.word	0x08007e33
 8007d90:	08007e33 	.word	0x08007e33
 8007d94:	08007e33 	.word	0x08007e33
 8007d98:	08007e33 	.word	0x08007e33
 8007d9c:	08007e33 	.word	0x08007e33
 8007da0:	08007e33 	.word	0x08007e33
 8007da4:	08007e33 	.word	0x08007e33
 8007da8:	08007e33 	.word	0x08007e33
 8007dac:	08007e33 	.word	0x08007e33
 8007db0:	08007e33 	.word	0x08007e33
 8007db4:	08007e33 	.word	0x08007e33
 8007db8:	08007e33 	.word	0x08007e33
 8007dbc:	08007e33 	.word	0x08007e33
 8007dc0:	08007e33 	.word	0x08007e33
 8007dc4:	08007e25 	.word	0x08007e25
 8007dc8:	2b40      	cmp	r3, #64	@ 0x40
 8007dca:	d02e      	beq.n	8007e2a <UART_SetConfig+0xa36>
 8007dcc:	e031      	b.n	8007e32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fc f91b 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8007dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007dd4:	e033      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd6:	f7fc f92d 	bl	8004034 <HAL_RCC_GetPCLK2Freq>
 8007dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ddc:	e02f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fd fb5c 	bl	80054a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dec:	e027      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dee:	f107 0318 	add.w	r3, r7, #24
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fd fca8 	bl	8005748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007dfc:	e01f      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb4 <UART_SetConfig+0xac0>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0320 	and.w	r3, r3, #32
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d009      	beq.n	8007e1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007eb4 <UART_SetConfig+0xac0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	08db      	lsrs	r3, r3, #3
 8007e10:	f003 0303 	and.w	r3, r3, #3
 8007e14:	4a28      	ldr	r2, [pc, #160]	@ (8007eb8 <UART_SetConfig+0xac4>)
 8007e16:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e1c:	e00f      	b.n	8007e3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007e1e:	4b26      	ldr	r3, [pc, #152]	@ (8007eb8 <UART_SetConfig+0xac4>)
 8007e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e22:	e00c      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e24:	4b25      	ldr	r3, [pc, #148]	@ (8007ebc <UART_SetConfig+0xac8>)
 8007e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e28:	e009      	b.n	8007e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e30:	e005      	b.n	8007e3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007e32:	2300      	movs	r3, #0
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d021      	beq.n	8007e88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <UART_SetConfig+0xacc>)
 8007e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	085b      	lsrs	r3, r3, #1
 8007e5c:	441a      	add	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	2b0f      	cmp	r3, #15
 8007e6c:	d909      	bls.n	8007e82 <UART_SetConfig+0xa8e>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e74:	d205      	bcs.n	8007e82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	e002      	b.n	8007e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ea4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3748      	adds	r7, #72	@ 0x48
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eb2:	bf00      	nop
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	03d09000 	.word	0x03d09000
 8007ebc:	003d0900 	.word	0x003d0900
 8007ec0:	0800d540 	.word	0x0800d540

08007ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00a      	beq.n	8007eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f36:	f003 0304 	and.w	r3, r3, #4
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d01a      	beq.n	8007fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc2:	d10a      	bne.n	8007fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b098      	sub	sp, #96	@ 0x60
 800800c:	af02      	add	r7, sp, #8
 800800e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008018:	f7fa fc74 	bl	8002904 <HAL_GetTick>
 800801c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0308 	and.w	r3, r3, #8
 8008028:	2b08      	cmp	r3, #8
 800802a:	d12f      	bne.n	800808c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800802c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008034:	2200      	movs	r2, #0
 8008036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f88e 	bl	800815c <UART_WaitOnFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d022      	beq.n	800808c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800805a:	653b      	str	r3, [r7, #80]	@ 0x50
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	461a      	mov	r2, r3
 8008062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008064:	647b      	str	r3, [r7, #68]	@ 0x44
 8008066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800806a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800806c:	e841 2300 	strex	r3, r2, [r1]
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e6      	bne.n	8008046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2220      	movs	r2, #32
 800807c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e063      	b.n	8008154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d149      	bne.n	800812e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800809a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800809e:	9300      	str	r3, [sp, #0]
 80080a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a2:	2200      	movs	r2, #0
 80080a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f857 	bl	800815c <UART_WaitOnFlagUntilTimeout>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d03c      	beq.n	800812e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	623b      	str	r3, [r7, #32]
   return(result);
 80080c2:	6a3b      	ldr	r3, [r7, #32]
 80080c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80080d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3308      	adds	r3, #8
 80080ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	e853 3f00 	ldrex	r3, [r3]
 80080f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0301 	bic.w	r3, r3, #1
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008106:	61fa      	str	r2, [r7, #28]
 8008108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810a:	69b9      	ldr	r1, [r7, #24]
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	e841 2300 	strex	r3, r2, [r1]
 8008112:	617b      	str	r3, [r7, #20]
   return(result);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e5      	bne.n	80080e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e012      	b.n	8008154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2220      	movs	r2, #32
 8008132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2220      	movs	r2, #32
 800813a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3758      	adds	r7, #88	@ 0x58
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4613      	mov	r3, r2
 800816a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800816c:	e04f      	b.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d04b      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008176:	f7fa fbc5 	bl	8002904 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	429a      	cmp	r2, r3
 8008184:	d302      	bcc.n	800818c <UART_WaitOnFlagUntilTimeout+0x30>
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e04e      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d037      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2b80      	cmp	r3, #128	@ 0x80
 80081a2:	d034      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d031      	beq.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d110      	bne.n	80081da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2208      	movs	r2, #8
 80081be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 f839 	bl	8008238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2208      	movs	r2, #8
 80081ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e029      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69db      	ldr	r3, [r3, #28]
 80081e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081e8:	d111      	bne.n	800820e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081f4:	68f8      	ldr	r0, [r7, #12]
 80081f6:	f000 f81f 	bl	8008238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2220      	movs	r2, #32
 80081fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e00f      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	4013      	ands	r3, r2
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	79fb      	ldrb	r3, [r7, #7]
 8008228:	429a      	cmp	r2, r3
 800822a:	d0a0      	beq.n	800816e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b095      	sub	sp, #84	@ 0x54
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008248:	e853 3f00 	ldrex	r3, [r3]
 800824c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800824e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800825e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008260:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008266:	e841 2300 	strex	r3, r2, [r1]
 800826a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800826c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826e:	2b00      	cmp	r3, #0
 8008270:	d1e6      	bne.n	8008240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	61fb      	str	r3, [r7, #28]
   return(result);
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	4b1e      	ldr	r3, [pc, #120]	@ (8008300 <UART_EndRxTransfer+0xc8>)
 8008286:	4013      	ands	r3, r2
 8008288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3308      	adds	r3, #8
 8008290:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d118      	bne.n	80082e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	e853 3f00 	ldrex	r3, [r3]
 80082ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f023 0310 	bic.w	r3, r3, #16
 80082c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	461a      	mov	r2, r3
 80082ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082cc:	61bb      	str	r3, [r7, #24]
 80082ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d0:	6979      	ldr	r1, [r7, #20]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	e841 2300 	strex	r3, r2, [r1]
 80082d8:	613b      	str	r3, [r7, #16]
   return(result);
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e6      	bne.n	80082ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082f4:	bf00      	nop
 80082f6:	3754      	adds	r7, #84	@ 0x54
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	effffffe 	.word	0xeffffffe

08008304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_UARTEx_DisableFifoMode+0x16>
 8008316:	2302      	movs	r3, #2
 8008318:	e027      	b.n	800836a <HAL_UARTEx_DisableFifoMode+0x66>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2224      	movs	r2, #36	@ 0x24
 8008326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008386:	2b01      	cmp	r3, #1
 8008388:	d101      	bne.n	800838e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800838a:	2302      	movs	r3, #2
 800838c:	e02d      	b.n	80083ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2224      	movs	r2, #36	@ 0x24
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 0201 	bic.w	r2, r2, #1
 80083b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f850 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2220      	movs	r2, #32
 80083dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008402:	2b01      	cmp	r3, #1
 8008404:	d101      	bne.n	800840a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008406:	2302      	movs	r3, #2
 8008408:	e02d      	b.n	8008466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2224      	movs	r2, #36	@ 0x24
 8008416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f812 	bl	8008470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800847c:	2b00      	cmp	r3, #0
 800847e:	d108      	bne.n	8008492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008490:	e031      	b.n	80084f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008492:	2310      	movs	r3, #16
 8008494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008496:	2310      	movs	r3, #16
 8008498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	0e5b      	lsrs	r3, r3, #25
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f003 0307 	and.w	r3, r3, #7
 80084a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	0f5b      	lsrs	r3, r3, #29
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	7b3a      	ldrb	r2, [r7, #12]
 80084be:	4911      	ldr	r1, [pc, #68]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084c0:	5c8a      	ldrb	r2, [r1, r2]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084c6:	7b3a      	ldrb	r2, [r7, #12]
 80084c8:	490f      	ldr	r1, [pc, #60]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	7b7a      	ldrb	r2, [r7, #13]
 80084dc:	4909      	ldr	r1, [pc, #36]	@ (8008504 <UARTEx_SetNbDataToProcess+0x94>)
 80084de:	5c8a      	ldrb	r2, [r1, r2]
 80084e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	4908      	ldr	r1, [pc, #32]	@ (8008508 <UARTEx_SetNbDataToProcess+0x98>)
 80084e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	0800d558 	.word	0x0800d558
 8008508:	0800d560 	.word	0x0800d560

0800850c <__cvt>:
 800850c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800850e:	ed2d 8b02 	vpush	{d8}
 8008512:	eeb0 8b40 	vmov.f64	d8, d0
 8008516:	b085      	sub	sp, #20
 8008518:	4617      	mov	r7, r2
 800851a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800851c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800851e:	ee18 2a90 	vmov	r2, s17
 8008522:	f025 0520 	bic.w	r5, r5, #32
 8008526:	2a00      	cmp	r2, #0
 8008528:	bfb6      	itet	lt
 800852a:	222d      	movlt	r2, #45	@ 0x2d
 800852c:	2200      	movge	r2, #0
 800852e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008532:	2d46      	cmp	r5, #70	@ 0x46
 8008534:	460c      	mov	r4, r1
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	d004      	beq.n	8008544 <__cvt+0x38>
 800853a:	2d45      	cmp	r5, #69	@ 0x45
 800853c:	d100      	bne.n	8008540 <__cvt+0x34>
 800853e:	3401      	adds	r4, #1
 8008540:	2102      	movs	r1, #2
 8008542:	e000      	b.n	8008546 <__cvt+0x3a>
 8008544:	2103      	movs	r1, #3
 8008546:	ab03      	add	r3, sp, #12
 8008548:	9301      	str	r3, [sp, #4]
 800854a:	ab02      	add	r3, sp, #8
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	4622      	mov	r2, r4
 8008550:	4633      	mov	r3, r6
 8008552:	eeb0 0b48 	vmov.f64	d0, d8
 8008556:	f001 f84f 	bl	80095f8 <_dtoa_r>
 800855a:	2d47      	cmp	r5, #71	@ 0x47
 800855c:	d114      	bne.n	8008588 <__cvt+0x7c>
 800855e:	07fb      	lsls	r3, r7, #31
 8008560:	d50a      	bpl.n	8008578 <__cvt+0x6c>
 8008562:	1902      	adds	r2, r0, r4
 8008564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856c:	bf08      	it	eq
 800856e:	9203      	streq	r2, [sp, #12]
 8008570:	2130      	movs	r1, #48	@ 0x30
 8008572:	9b03      	ldr	r3, [sp, #12]
 8008574:	4293      	cmp	r3, r2
 8008576:	d319      	bcc.n	80085ac <__cvt+0xa0>
 8008578:	9b03      	ldr	r3, [sp, #12]
 800857a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800857c:	1a1b      	subs	r3, r3, r0
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	b005      	add	sp, #20
 8008582:	ecbd 8b02 	vpop	{d8}
 8008586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008588:	2d46      	cmp	r5, #70	@ 0x46
 800858a:	eb00 0204 	add.w	r2, r0, r4
 800858e:	d1e9      	bne.n	8008564 <__cvt+0x58>
 8008590:	7803      	ldrb	r3, [r0, #0]
 8008592:	2b30      	cmp	r3, #48	@ 0x30
 8008594:	d107      	bne.n	80085a6 <__cvt+0x9a>
 8008596:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	bf1c      	itt	ne
 80085a0:	f1c4 0401 	rsbne	r4, r4, #1
 80085a4:	6034      	strne	r4, [r6, #0]
 80085a6:	6833      	ldr	r3, [r6, #0]
 80085a8:	441a      	add	r2, r3
 80085aa:	e7db      	b.n	8008564 <__cvt+0x58>
 80085ac:	1c5c      	adds	r4, r3, #1
 80085ae:	9403      	str	r4, [sp, #12]
 80085b0:	7019      	strb	r1, [r3, #0]
 80085b2:	e7de      	b.n	8008572 <__cvt+0x66>

080085b4 <__exponent>:
 80085b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b6:	2900      	cmp	r1, #0
 80085b8:	bfba      	itte	lt
 80085ba:	4249      	neglt	r1, r1
 80085bc:	232d      	movlt	r3, #45	@ 0x2d
 80085be:	232b      	movge	r3, #43	@ 0x2b
 80085c0:	2909      	cmp	r1, #9
 80085c2:	7002      	strb	r2, [r0, #0]
 80085c4:	7043      	strb	r3, [r0, #1]
 80085c6:	dd29      	ble.n	800861c <__exponent+0x68>
 80085c8:	f10d 0307 	add.w	r3, sp, #7
 80085cc:	461d      	mov	r5, r3
 80085ce:	270a      	movs	r7, #10
 80085d0:	461a      	mov	r2, r3
 80085d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80085d6:	fb07 1416 	mls	r4, r7, r6, r1
 80085da:	3430      	adds	r4, #48	@ 0x30
 80085dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085e0:	460c      	mov	r4, r1
 80085e2:	2c63      	cmp	r4, #99	@ 0x63
 80085e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e8:	4631      	mov	r1, r6
 80085ea:	dcf1      	bgt.n	80085d0 <__exponent+0x1c>
 80085ec:	3130      	adds	r1, #48	@ 0x30
 80085ee:	1e94      	subs	r4, r2, #2
 80085f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085f4:	1c41      	adds	r1, r0, #1
 80085f6:	4623      	mov	r3, r4
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	d30a      	bcc.n	8008612 <__exponent+0x5e>
 80085fc:	f10d 0309 	add.w	r3, sp, #9
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	42ac      	cmp	r4, r5
 8008604:	bf88      	it	hi
 8008606:	2300      	movhi	r3, #0
 8008608:	3302      	adds	r3, #2
 800860a:	4403      	add	r3, r0
 800860c:	1a18      	subs	r0, r3, r0
 800860e:	b003      	add	sp, #12
 8008610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008612:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008616:	f801 6f01 	strb.w	r6, [r1, #1]!
 800861a:	e7ed      	b.n	80085f8 <__exponent+0x44>
 800861c:	2330      	movs	r3, #48	@ 0x30
 800861e:	3130      	adds	r1, #48	@ 0x30
 8008620:	7083      	strb	r3, [r0, #2]
 8008622:	70c1      	strb	r1, [r0, #3]
 8008624:	1d03      	adds	r3, r0, #4
 8008626:	e7f1      	b.n	800860c <__exponent+0x58>

08008628 <_printf_float>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b08d      	sub	sp, #52	@ 0x34
 800862e:	460c      	mov	r4, r1
 8008630:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008634:	4616      	mov	r6, r2
 8008636:	461f      	mov	r7, r3
 8008638:	4605      	mov	r5, r0
 800863a:	f000 fed7 	bl	80093ec <_localeconv_r>
 800863e:	f8d0 b000 	ldr.w	fp, [r0]
 8008642:	4658      	mov	r0, fp
 8008644:	f7f7 fe9c 	bl	8000380 <strlen>
 8008648:	2300      	movs	r3, #0
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
 800864c:	f8d8 3000 	ldr.w	r3, [r8]
 8008650:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008654:	6822      	ldr	r2, [r4, #0]
 8008656:	9005      	str	r0, [sp, #20]
 8008658:	3307      	adds	r3, #7
 800865a:	f023 0307 	bic.w	r3, r3, #7
 800865e:	f103 0108 	add.w	r1, r3, #8
 8008662:	f8c8 1000 	str.w	r1, [r8]
 8008666:	ed93 0b00 	vldr	d0, [r3]
 800866a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80088c8 <_printf_float+0x2a0>
 800866e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008672:	eeb4 7b46 	vcmp.f64	d7, d6
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800867e:	dd24      	ble.n	80086ca <_printf_float+0xa2>
 8008680:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008688:	d502      	bpl.n	8008690 <_printf_float+0x68>
 800868a:	232d      	movs	r3, #45	@ 0x2d
 800868c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008690:	498f      	ldr	r1, [pc, #572]	@ (80088d0 <_printf_float+0x2a8>)
 8008692:	4b90      	ldr	r3, [pc, #576]	@ (80088d4 <_printf_float+0x2ac>)
 8008694:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008698:	bf94      	ite	ls
 800869a:	4688      	movls	r8, r1
 800869c:	4698      	movhi	r8, r3
 800869e:	f022 0204 	bic.w	r2, r2, #4
 80086a2:	2303      	movs	r3, #3
 80086a4:	6123      	str	r3, [r4, #16]
 80086a6:	6022      	str	r2, [r4, #0]
 80086a8:	f04f 0a00 	mov.w	sl, #0
 80086ac:	9700      	str	r7, [sp, #0]
 80086ae:	4633      	mov	r3, r6
 80086b0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086b2:	4621      	mov	r1, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 f9d1 	bl	8008a5c <_printf_common>
 80086ba:	3001      	adds	r0, #1
 80086bc:	f040 8089 	bne.w	80087d2 <_printf_float+0x1aa>
 80086c0:	f04f 30ff 	mov.w	r0, #4294967295
 80086c4:	b00d      	add	sp, #52	@ 0x34
 80086c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ca:	eeb4 0b40 	vcmp.f64	d0, d0
 80086ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086d2:	d709      	bvc.n	80086e8 <_printf_float+0xc0>
 80086d4:	ee10 3a90 	vmov	r3, s1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bfbc      	itt	lt
 80086dc:	232d      	movlt	r3, #45	@ 0x2d
 80086de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80086e2:	497d      	ldr	r1, [pc, #500]	@ (80088d8 <_printf_float+0x2b0>)
 80086e4:	4b7d      	ldr	r3, [pc, #500]	@ (80088dc <_printf_float+0x2b4>)
 80086e6:	e7d5      	b.n	8008694 <_printf_float+0x6c>
 80086e8:	6863      	ldr	r3, [r4, #4]
 80086ea:	1c59      	adds	r1, r3, #1
 80086ec:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80086f0:	d139      	bne.n	8008766 <_printf_float+0x13e>
 80086f2:	2306      	movs	r3, #6
 80086f4:	6063      	str	r3, [r4, #4]
 80086f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80086fa:	2300      	movs	r3, #0
 80086fc:	6022      	str	r2, [r4, #0]
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	ab0a      	add	r3, sp, #40	@ 0x28
 8008702:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008706:	ab09      	add	r3, sp, #36	@ 0x24
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	6861      	ldr	r1, [r4, #4]
 800870c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008710:	4628      	mov	r0, r5
 8008712:	f7ff fefb 	bl	800850c <__cvt>
 8008716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800871a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800871c:	4680      	mov	r8, r0
 800871e:	d129      	bne.n	8008774 <_printf_float+0x14c>
 8008720:	1cc8      	adds	r0, r1, #3
 8008722:	db02      	blt.n	800872a <_printf_float+0x102>
 8008724:	6863      	ldr	r3, [r4, #4]
 8008726:	4299      	cmp	r1, r3
 8008728:	dd41      	ble.n	80087ae <_printf_float+0x186>
 800872a:	f1a9 0902 	sub.w	r9, r9, #2
 800872e:	fa5f f989 	uxtb.w	r9, r9
 8008732:	3901      	subs	r1, #1
 8008734:	464a      	mov	r2, r9
 8008736:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800873a:	9109      	str	r1, [sp, #36]	@ 0x24
 800873c:	f7ff ff3a 	bl	80085b4 <__exponent>
 8008740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008742:	1813      	adds	r3, r2, r0
 8008744:	2a01      	cmp	r2, #1
 8008746:	4682      	mov	sl, r0
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	dc02      	bgt.n	8008752 <_printf_float+0x12a>
 800874c:	6822      	ldr	r2, [r4, #0]
 800874e:	07d2      	lsls	r2, r2, #31
 8008750:	d501      	bpl.n	8008756 <_printf_float+0x12e>
 8008752:	3301      	adds	r3, #1
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0a6      	beq.n	80086ac <_printf_float+0x84>
 800875e:	232d      	movs	r3, #45	@ 0x2d
 8008760:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008764:	e7a2      	b.n	80086ac <_printf_float+0x84>
 8008766:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800876a:	d1c4      	bne.n	80086f6 <_printf_float+0xce>
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1c2      	bne.n	80086f6 <_printf_float+0xce>
 8008770:	2301      	movs	r3, #1
 8008772:	e7bf      	b.n	80086f4 <_printf_float+0xcc>
 8008774:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008778:	d9db      	bls.n	8008732 <_printf_float+0x10a>
 800877a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800877e:	d118      	bne.n	80087b2 <_printf_float+0x18a>
 8008780:	2900      	cmp	r1, #0
 8008782:	6863      	ldr	r3, [r4, #4]
 8008784:	dd0b      	ble.n	800879e <_printf_float+0x176>
 8008786:	6121      	str	r1, [r4, #16]
 8008788:	b913      	cbnz	r3, 8008790 <_printf_float+0x168>
 800878a:	6822      	ldr	r2, [r4, #0]
 800878c:	07d0      	lsls	r0, r2, #31
 800878e:	d502      	bpl.n	8008796 <_printf_float+0x16e>
 8008790:	3301      	adds	r3, #1
 8008792:	440b      	add	r3, r1
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008798:	f04f 0a00 	mov.w	sl, #0
 800879c:	e7db      	b.n	8008756 <_printf_float+0x12e>
 800879e:	b913      	cbnz	r3, 80087a6 <_printf_float+0x17e>
 80087a0:	6822      	ldr	r2, [r4, #0]
 80087a2:	07d2      	lsls	r2, r2, #31
 80087a4:	d501      	bpl.n	80087aa <_printf_float+0x182>
 80087a6:	3302      	adds	r3, #2
 80087a8:	e7f4      	b.n	8008794 <_printf_float+0x16c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e7f2      	b.n	8008794 <_printf_float+0x16c>
 80087ae:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80087b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087b4:	4299      	cmp	r1, r3
 80087b6:	db05      	blt.n	80087c4 <_printf_float+0x19c>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	6121      	str	r1, [r4, #16]
 80087bc:	07d8      	lsls	r0, r3, #31
 80087be:	d5ea      	bpl.n	8008796 <_printf_float+0x16e>
 80087c0:	1c4b      	adds	r3, r1, #1
 80087c2:	e7e7      	b.n	8008794 <_printf_float+0x16c>
 80087c4:	2900      	cmp	r1, #0
 80087c6:	bfd4      	ite	le
 80087c8:	f1c1 0202 	rsble	r2, r1, #2
 80087cc:	2201      	movgt	r2, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	e7e0      	b.n	8008794 <_printf_float+0x16c>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	055a      	lsls	r2, r3, #21
 80087d6:	d407      	bmi.n	80087e8 <_printf_float+0x1c0>
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	4642      	mov	r2, r8
 80087dc:	4631      	mov	r1, r6
 80087de:	4628      	mov	r0, r5
 80087e0:	47b8      	blx	r7
 80087e2:	3001      	adds	r0, #1
 80087e4:	d12a      	bne.n	800883c <_printf_float+0x214>
 80087e6:	e76b      	b.n	80086c0 <_printf_float+0x98>
 80087e8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80087ec:	f240 80e0 	bls.w	80089b0 <_printf_float+0x388>
 80087f0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80087f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087fc:	d133      	bne.n	8008866 <_printf_float+0x23e>
 80087fe:	4a38      	ldr	r2, [pc, #224]	@ (80088e0 <_printf_float+0x2b8>)
 8008800:	2301      	movs	r3, #1
 8008802:	4631      	mov	r1, r6
 8008804:	4628      	mov	r0, r5
 8008806:	47b8      	blx	r7
 8008808:	3001      	adds	r0, #1
 800880a:	f43f af59 	beq.w	80086c0 <_printf_float+0x98>
 800880e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008812:	4543      	cmp	r3, r8
 8008814:	db02      	blt.n	800881c <_printf_float+0x1f4>
 8008816:	6823      	ldr	r3, [r4, #0]
 8008818:	07d8      	lsls	r0, r3, #31
 800881a:	d50f      	bpl.n	800883c <_printf_float+0x214>
 800881c:	9b05      	ldr	r3, [sp, #20]
 800881e:	465a      	mov	r2, fp
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	f43f af4a 	beq.w	80086c0 <_printf_float+0x98>
 800882c:	f04f 0900 	mov.w	r9, #0
 8008830:	f108 38ff 	add.w	r8, r8, #4294967295
 8008834:	f104 0a1a 	add.w	sl, r4, #26
 8008838:	45c8      	cmp	r8, r9
 800883a:	dc09      	bgt.n	8008850 <_printf_float+0x228>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	079b      	lsls	r3, r3, #30
 8008840:	f100 8107 	bmi.w	8008a52 <_printf_float+0x42a>
 8008844:	68e0      	ldr	r0, [r4, #12]
 8008846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008848:	4298      	cmp	r0, r3
 800884a:	bfb8      	it	lt
 800884c:	4618      	movlt	r0, r3
 800884e:	e739      	b.n	80086c4 <_printf_float+0x9c>
 8008850:	2301      	movs	r3, #1
 8008852:	4652      	mov	r2, sl
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	47b8      	blx	r7
 800885a:	3001      	adds	r0, #1
 800885c:	f43f af30 	beq.w	80086c0 <_printf_float+0x98>
 8008860:	f109 0901 	add.w	r9, r9, #1
 8008864:	e7e8      	b.n	8008838 <_printf_float+0x210>
 8008866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc3b      	bgt.n	80088e4 <_printf_float+0x2bc>
 800886c:	4a1c      	ldr	r2, [pc, #112]	@ (80088e0 <_printf_float+0x2b8>)
 800886e:	2301      	movs	r3, #1
 8008870:	4631      	mov	r1, r6
 8008872:	4628      	mov	r0, r5
 8008874:	47b8      	blx	r7
 8008876:	3001      	adds	r0, #1
 8008878:	f43f af22 	beq.w	80086c0 <_printf_float+0x98>
 800887c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008880:	ea59 0303 	orrs.w	r3, r9, r3
 8008884:	d102      	bne.n	800888c <_printf_float+0x264>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	07d9      	lsls	r1, r3, #31
 800888a:	d5d7      	bpl.n	800883c <_printf_float+0x214>
 800888c:	9b05      	ldr	r3, [sp, #20]
 800888e:	465a      	mov	r2, fp
 8008890:	4631      	mov	r1, r6
 8008892:	4628      	mov	r0, r5
 8008894:	47b8      	blx	r7
 8008896:	3001      	adds	r0, #1
 8008898:	f43f af12 	beq.w	80086c0 <_printf_float+0x98>
 800889c:	f04f 0a00 	mov.w	sl, #0
 80088a0:	f104 0b1a 	add.w	fp, r4, #26
 80088a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a6:	425b      	negs	r3, r3
 80088a8:	4553      	cmp	r3, sl
 80088aa:	dc01      	bgt.n	80088b0 <_printf_float+0x288>
 80088ac:	464b      	mov	r3, r9
 80088ae:	e794      	b.n	80087da <_printf_float+0x1b2>
 80088b0:	2301      	movs	r3, #1
 80088b2:	465a      	mov	r2, fp
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af00 	beq.w	80086c0 <_printf_float+0x98>
 80088c0:	f10a 0a01 	add.w	sl, sl, #1
 80088c4:	e7ee      	b.n	80088a4 <_printf_float+0x27c>
 80088c6:	bf00      	nop
 80088c8:	ffffffff 	.word	0xffffffff
 80088cc:	7fefffff 	.word	0x7fefffff
 80088d0:	0800d568 	.word	0x0800d568
 80088d4:	0800d56c 	.word	0x0800d56c
 80088d8:	0800d570 	.word	0x0800d570
 80088dc:	0800d574 	.word	0x0800d574
 80088e0:	0800d578 	.word	0x0800d578
 80088e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088ea:	4553      	cmp	r3, sl
 80088ec:	bfa8      	it	ge
 80088ee:	4653      	movge	r3, sl
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	4699      	mov	r9, r3
 80088f4:	dc37      	bgt.n	8008966 <_printf_float+0x33e>
 80088f6:	2300      	movs	r3, #0
 80088f8:	9307      	str	r3, [sp, #28]
 80088fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088fe:	f104 021a 	add.w	r2, r4, #26
 8008902:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008904:	9907      	ldr	r1, [sp, #28]
 8008906:	9306      	str	r3, [sp, #24]
 8008908:	eba3 0309 	sub.w	r3, r3, r9
 800890c:	428b      	cmp	r3, r1
 800890e:	dc31      	bgt.n	8008974 <_printf_float+0x34c>
 8008910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008912:	459a      	cmp	sl, r3
 8008914:	dc3b      	bgt.n	800898e <_printf_float+0x366>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	07da      	lsls	r2, r3, #31
 800891a:	d438      	bmi.n	800898e <_printf_float+0x366>
 800891c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891e:	ebaa 0903 	sub.w	r9, sl, r3
 8008922:	9b06      	ldr	r3, [sp, #24]
 8008924:	ebaa 0303 	sub.w	r3, sl, r3
 8008928:	4599      	cmp	r9, r3
 800892a:	bfa8      	it	ge
 800892c:	4699      	movge	r9, r3
 800892e:	f1b9 0f00 	cmp.w	r9, #0
 8008932:	dc34      	bgt.n	800899e <_printf_float+0x376>
 8008934:	f04f 0800 	mov.w	r8, #0
 8008938:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800893c:	f104 0b1a 	add.w	fp, r4, #26
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	ebaa 0303 	sub.w	r3, sl, r3
 8008946:	eba3 0309 	sub.w	r3, r3, r9
 800894a:	4543      	cmp	r3, r8
 800894c:	f77f af76 	ble.w	800883c <_printf_float+0x214>
 8008950:	2301      	movs	r3, #1
 8008952:	465a      	mov	r2, fp
 8008954:	4631      	mov	r1, r6
 8008956:	4628      	mov	r0, r5
 8008958:	47b8      	blx	r7
 800895a:	3001      	adds	r0, #1
 800895c:	f43f aeb0 	beq.w	80086c0 <_printf_float+0x98>
 8008960:	f108 0801 	add.w	r8, r8, #1
 8008964:	e7ec      	b.n	8008940 <_printf_float+0x318>
 8008966:	4642      	mov	r2, r8
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	d1c1      	bne.n	80088f6 <_printf_float+0x2ce>
 8008972:	e6a5      	b.n	80086c0 <_printf_float+0x98>
 8008974:	2301      	movs	r3, #1
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	9206      	str	r2, [sp, #24]
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f ae9e 	beq.w	80086c0 <_printf_float+0x98>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	9a06      	ldr	r2, [sp, #24]
 8008988:	3301      	adds	r3, #1
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	e7b9      	b.n	8008902 <_printf_float+0x2da>
 800898e:	9b05      	ldr	r3, [sp, #20]
 8008990:	465a      	mov	r2, fp
 8008992:	4631      	mov	r1, r6
 8008994:	4628      	mov	r0, r5
 8008996:	47b8      	blx	r7
 8008998:	3001      	adds	r0, #1
 800899a:	d1bf      	bne.n	800891c <_printf_float+0x2f4>
 800899c:	e690      	b.n	80086c0 <_printf_float+0x98>
 800899e:	9a06      	ldr	r2, [sp, #24]
 80089a0:	464b      	mov	r3, r9
 80089a2:	4442      	add	r2, r8
 80089a4:	4631      	mov	r1, r6
 80089a6:	4628      	mov	r0, r5
 80089a8:	47b8      	blx	r7
 80089aa:	3001      	adds	r0, #1
 80089ac:	d1c2      	bne.n	8008934 <_printf_float+0x30c>
 80089ae:	e687      	b.n	80086c0 <_printf_float+0x98>
 80089b0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80089b4:	f1b9 0f01 	cmp.w	r9, #1
 80089b8:	dc01      	bgt.n	80089be <_printf_float+0x396>
 80089ba:	07db      	lsls	r3, r3, #31
 80089bc:	d536      	bpl.n	8008a2c <_printf_float+0x404>
 80089be:	2301      	movs	r3, #1
 80089c0:	4642      	mov	r2, r8
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	f43f ae79 	beq.w	80086c0 <_printf_float+0x98>
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	465a      	mov	r2, fp
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b8      	blx	r7
 80089d8:	3001      	adds	r0, #1
 80089da:	f43f ae71 	beq.w	80086c0 <_printf_float+0x98>
 80089de:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80089e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80089ee:	d018      	beq.n	8008a22 <_printf_float+0x3fa>
 80089f0:	464b      	mov	r3, r9
 80089f2:	f108 0201 	add.w	r2, r8, #1
 80089f6:	4631      	mov	r1, r6
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b8      	blx	r7
 80089fc:	3001      	adds	r0, #1
 80089fe:	d10c      	bne.n	8008a1a <_printf_float+0x3f2>
 8008a00:	e65e      	b.n	80086c0 <_printf_float+0x98>
 8008a02:	2301      	movs	r3, #1
 8008a04:	465a      	mov	r2, fp
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	f43f ae57 	beq.w	80086c0 <_printf_float+0x98>
 8008a12:	f108 0801 	add.w	r8, r8, #1
 8008a16:	45c8      	cmp	r8, r9
 8008a18:	dbf3      	blt.n	8008a02 <_printf_float+0x3da>
 8008a1a:	4653      	mov	r3, sl
 8008a1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a20:	e6dc      	b.n	80087dc <_printf_float+0x1b4>
 8008a22:	f04f 0800 	mov.w	r8, #0
 8008a26:	f104 0b1a 	add.w	fp, r4, #26
 8008a2a:	e7f4      	b.n	8008a16 <_printf_float+0x3ee>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4642      	mov	r2, r8
 8008a30:	e7e1      	b.n	80089f6 <_printf_float+0x3ce>
 8008a32:	2301      	movs	r3, #1
 8008a34:	464a      	mov	r2, r9
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f ae3f 	beq.w	80086c0 <_printf_float+0x98>
 8008a42:	f108 0801 	add.w	r8, r8, #1
 8008a46:	68e3      	ldr	r3, [r4, #12]
 8008a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a4a:	1a5b      	subs	r3, r3, r1
 8008a4c:	4543      	cmp	r3, r8
 8008a4e:	dcf0      	bgt.n	8008a32 <_printf_float+0x40a>
 8008a50:	e6f8      	b.n	8008844 <_printf_float+0x21c>
 8008a52:	f04f 0800 	mov.w	r8, #0
 8008a56:	f104 0919 	add.w	r9, r4, #25
 8008a5a:	e7f4      	b.n	8008a46 <_printf_float+0x41e>

08008a5c <_printf_common>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	4616      	mov	r6, r2
 8008a62:	4698      	mov	r8, r3
 8008a64:	688a      	ldr	r2, [r1, #8]
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	bfb8      	it	lt
 8008a70:	4613      	movlt	r3, r2
 8008a72:	6033      	str	r3, [r6, #0]
 8008a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a78:	4607      	mov	r7, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	b10a      	cbz	r2, 8008a82 <_printf_common+0x26>
 8008a7e:	3301      	adds	r3, #1
 8008a80:	6033      	str	r3, [r6, #0]
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	0699      	lsls	r1, r3, #26
 8008a86:	bf42      	ittt	mi
 8008a88:	6833      	ldrmi	r3, [r6, #0]
 8008a8a:	3302      	addmi	r3, #2
 8008a8c:	6033      	strmi	r3, [r6, #0]
 8008a8e:	6825      	ldr	r5, [r4, #0]
 8008a90:	f015 0506 	ands.w	r5, r5, #6
 8008a94:	d106      	bne.n	8008aa4 <_printf_common+0x48>
 8008a96:	f104 0a19 	add.w	sl, r4, #25
 8008a9a:	68e3      	ldr	r3, [r4, #12]
 8008a9c:	6832      	ldr	r2, [r6, #0]
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	42ab      	cmp	r3, r5
 8008aa2:	dc26      	bgt.n	8008af2 <_printf_common+0x96>
 8008aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008aa8:	6822      	ldr	r2, [r4, #0]
 8008aaa:	3b00      	subs	r3, #0
 8008aac:	bf18      	it	ne
 8008aae:	2301      	movne	r3, #1
 8008ab0:	0692      	lsls	r2, r2, #26
 8008ab2:	d42b      	bmi.n	8008b0c <_printf_common+0xb0>
 8008ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ab8:	4641      	mov	r1, r8
 8008aba:	4638      	mov	r0, r7
 8008abc:	47c8      	blx	r9
 8008abe:	3001      	adds	r0, #1
 8008ac0:	d01e      	beq.n	8008b00 <_printf_common+0xa4>
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	6922      	ldr	r2, [r4, #16]
 8008ac6:	f003 0306 	and.w	r3, r3, #6
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	bf02      	ittt	eq
 8008ace:	68e5      	ldreq	r5, [r4, #12]
 8008ad0:	6833      	ldreq	r3, [r6, #0]
 8008ad2:	1aed      	subeq	r5, r5, r3
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	bf0c      	ite	eq
 8008ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008adc:	2500      	movne	r5, #0
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	bfc4      	itt	gt
 8008ae2:	1a9b      	subgt	r3, r3, r2
 8008ae4:	18ed      	addgt	r5, r5, r3
 8008ae6:	2600      	movs	r6, #0
 8008ae8:	341a      	adds	r4, #26
 8008aea:	42b5      	cmp	r5, r6
 8008aec:	d11a      	bne.n	8008b24 <_printf_common+0xc8>
 8008aee:	2000      	movs	r0, #0
 8008af0:	e008      	b.n	8008b04 <_printf_common+0xa8>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4652      	mov	r2, sl
 8008af6:	4641      	mov	r1, r8
 8008af8:	4638      	mov	r0, r7
 8008afa:	47c8      	blx	r9
 8008afc:	3001      	adds	r0, #1
 8008afe:	d103      	bne.n	8008b08 <_printf_common+0xac>
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b08:	3501      	adds	r5, #1
 8008b0a:	e7c6      	b.n	8008a9a <_printf_common+0x3e>
 8008b0c:	18e1      	adds	r1, r4, r3
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	2030      	movs	r0, #48	@ 0x30
 8008b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b16:	4422      	add	r2, r4
 8008b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b20:	3302      	adds	r3, #2
 8008b22:	e7c7      	b.n	8008ab4 <_printf_common+0x58>
 8008b24:	2301      	movs	r3, #1
 8008b26:	4622      	mov	r2, r4
 8008b28:	4641      	mov	r1, r8
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47c8      	blx	r9
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d0e6      	beq.n	8008b00 <_printf_common+0xa4>
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7d9      	b.n	8008aea <_printf_common+0x8e>
	...

08008b38 <_printf_i>:
 8008b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b3c:	7e0f      	ldrb	r7, [r1, #24]
 8008b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b40:	2f78      	cmp	r7, #120	@ 0x78
 8008b42:	4691      	mov	r9, r2
 8008b44:	4680      	mov	r8, r0
 8008b46:	460c      	mov	r4, r1
 8008b48:	469a      	mov	sl, r3
 8008b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b4e:	d807      	bhi.n	8008b60 <_printf_i+0x28>
 8008b50:	2f62      	cmp	r7, #98	@ 0x62
 8008b52:	d80a      	bhi.n	8008b6a <_printf_i+0x32>
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	f000 80d2 	beq.w	8008cfe <_printf_i+0x1c6>
 8008b5a:	2f58      	cmp	r7, #88	@ 0x58
 8008b5c:	f000 80b9 	beq.w	8008cd2 <_printf_i+0x19a>
 8008b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b68:	e03a      	b.n	8008be0 <_printf_i+0xa8>
 8008b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b6e:	2b15      	cmp	r3, #21
 8008b70:	d8f6      	bhi.n	8008b60 <_printf_i+0x28>
 8008b72:	a101      	add	r1, pc, #4	@ (adr r1, 8008b78 <_printf_i+0x40>)
 8008b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008be5 	.word	0x08008be5
 8008b80:	08008b61 	.word	0x08008b61
 8008b84:	08008b61 	.word	0x08008b61
 8008b88:	08008b61 	.word	0x08008b61
 8008b8c:	08008b61 	.word	0x08008b61
 8008b90:	08008be5 	.word	0x08008be5
 8008b94:	08008b61 	.word	0x08008b61
 8008b98:	08008b61 	.word	0x08008b61
 8008b9c:	08008b61 	.word	0x08008b61
 8008ba0:	08008b61 	.word	0x08008b61
 8008ba4:	08008ce5 	.word	0x08008ce5
 8008ba8:	08008c0f 	.word	0x08008c0f
 8008bac:	08008c9f 	.word	0x08008c9f
 8008bb0:	08008b61 	.word	0x08008b61
 8008bb4:	08008b61 	.word	0x08008b61
 8008bb8:	08008d07 	.word	0x08008d07
 8008bbc:	08008b61 	.word	0x08008b61
 8008bc0:	08008c0f 	.word	0x08008c0f
 8008bc4:	08008b61 	.word	0x08008b61
 8008bc8:	08008b61 	.word	0x08008b61
 8008bcc:	08008ca7 	.word	0x08008ca7
 8008bd0:	6833      	ldr	r3, [r6, #0]
 8008bd2:	1d1a      	adds	r2, r3, #4
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6032      	str	r2, [r6, #0]
 8008bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008be0:	2301      	movs	r3, #1
 8008be2:	e09d      	b.n	8008d20 <_printf_i+0x1e8>
 8008be4:	6833      	ldr	r3, [r6, #0]
 8008be6:	6820      	ldr	r0, [r4, #0]
 8008be8:	1d19      	adds	r1, r3, #4
 8008bea:	6031      	str	r1, [r6, #0]
 8008bec:	0606      	lsls	r6, r0, #24
 8008bee:	d501      	bpl.n	8008bf4 <_printf_i+0xbc>
 8008bf0:	681d      	ldr	r5, [r3, #0]
 8008bf2:	e003      	b.n	8008bfc <_printf_i+0xc4>
 8008bf4:	0645      	lsls	r5, r0, #25
 8008bf6:	d5fb      	bpl.n	8008bf0 <_printf_i+0xb8>
 8008bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008bfc:	2d00      	cmp	r5, #0
 8008bfe:	da03      	bge.n	8008c08 <_printf_i+0xd0>
 8008c00:	232d      	movs	r3, #45	@ 0x2d
 8008c02:	426d      	negs	r5, r5
 8008c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c08:	4859      	ldr	r0, [pc, #356]	@ (8008d70 <_printf_i+0x238>)
 8008c0a:	230a      	movs	r3, #10
 8008c0c:	e011      	b.n	8008c32 <_printf_i+0xfa>
 8008c0e:	6821      	ldr	r1, [r4, #0]
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	0608      	lsls	r0, r1, #24
 8008c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c18:	d402      	bmi.n	8008c20 <_printf_i+0xe8>
 8008c1a:	0649      	lsls	r1, r1, #25
 8008c1c:	bf48      	it	mi
 8008c1e:	b2ad      	uxthmi	r5, r5
 8008c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c22:	4853      	ldr	r0, [pc, #332]	@ (8008d70 <_printf_i+0x238>)
 8008c24:	6033      	str	r3, [r6, #0]
 8008c26:	bf14      	ite	ne
 8008c28:	230a      	movne	r3, #10
 8008c2a:	2308      	moveq	r3, #8
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c32:	6866      	ldr	r6, [r4, #4]
 8008c34:	60a6      	str	r6, [r4, #8]
 8008c36:	2e00      	cmp	r6, #0
 8008c38:	bfa2      	ittt	ge
 8008c3a:	6821      	ldrge	r1, [r4, #0]
 8008c3c:	f021 0104 	bicge.w	r1, r1, #4
 8008c40:	6021      	strge	r1, [r4, #0]
 8008c42:	b90d      	cbnz	r5, 8008c48 <_printf_i+0x110>
 8008c44:	2e00      	cmp	r6, #0
 8008c46:	d04b      	beq.n	8008ce0 <_printf_i+0x1a8>
 8008c48:	4616      	mov	r6, r2
 8008c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c52:	5dc7      	ldrb	r7, [r0, r7]
 8008c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c58:	462f      	mov	r7, r5
 8008c5a:	42bb      	cmp	r3, r7
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	d9f4      	bls.n	8008c4a <_printf_i+0x112>
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d10b      	bne.n	8008c7c <_printf_i+0x144>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	07df      	lsls	r7, r3, #31
 8008c68:	d508      	bpl.n	8008c7c <_printf_i+0x144>
 8008c6a:	6923      	ldr	r3, [r4, #16]
 8008c6c:	6861      	ldr	r1, [r4, #4]
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	bfde      	ittt	le
 8008c72:	2330      	movle	r3, #48	@ 0x30
 8008c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c7c:	1b92      	subs	r2, r2, r6
 8008c7e:	6122      	str	r2, [r4, #16]
 8008c80:	f8cd a000 	str.w	sl, [sp]
 8008c84:	464b      	mov	r3, r9
 8008c86:	aa03      	add	r2, sp, #12
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7ff fee6 	bl	8008a5c <_printf_common>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d14a      	bne.n	8008d2a <_printf_i+0x1f2>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	b004      	add	sp, #16
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	6823      	ldr	r3, [r4, #0]
 8008ca0:	f043 0320 	orr.w	r3, r3, #32
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	4833      	ldr	r0, [pc, #204]	@ (8008d74 <_printf_i+0x23c>)
 8008ca8:	2778      	movs	r7, #120	@ 0x78
 8008caa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	6831      	ldr	r1, [r6, #0]
 8008cb2:	061f      	lsls	r7, r3, #24
 8008cb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cb8:	d402      	bmi.n	8008cc0 <_printf_i+0x188>
 8008cba:	065f      	lsls	r7, r3, #25
 8008cbc:	bf48      	it	mi
 8008cbe:	b2ad      	uxthmi	r5, r5
 8008cc0:	6031      	str	r1, [r6, #0]
 8008cc2:	07d9      	lsls	r1, r3, #31
 8008cc4:	bf44      	itt	mi
 8008cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cca:	6023      	strmi	r3, [r4, #0]
 8008ccc:	b11d      	cbz	r5, 8008cd6 <_printf_i+0x19e>
 8008cce:	2310      	movs	r3, #16
 8008cd0:	e7ac      	b.n	8008c2c <_printf_i+0xf4>
 8008cd2:	4827      	ldr	r0, [pc, #156]	@ (8008d70 <_printf_i+0x238>)
 8008cd4:	e7e9      	b.n	8008caa <_printf_i+0x172>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f023 0320 	bic.w	r3, r3, #32
 8008cdc:	6023      	str	r3, [r4, #0]
 8008cde:	e7f6      	b.n	8008cce <_printf_i+0x196>
 8008ce0:	4616      	mov	r6, r2
 8008ce2:	e7bd      	b.n	8008c60 <_printf_i+0x128>
 8008ce4:	6833      	ldr	r3, [r6, #0]
 8008ce6:	6825      	ldr	r5, [r4, #0]
 8008ce8:	6961      	ldr	r1, [r4, #20]
 8008cea:	1d18      	adds	r0, r3, #4
 8008cec:	6030      	str	r0, [r6, #0]
 8008cee:	062e      	lsls	r6, r5, #24
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	d501      	bpl.n	8008cf8 <_printf_i+0x1c0>
 8008cf4:	6019      	str	r1, [r3, #0]
 8008cf6:	e002      	b.n	8008cfe <_printf_i+0x1c6>
 8008cf8:	0668      	lsls	r0, r5, #25
 8008cfa:	d5fb      	bpl.n	8008cf4 <_printf_i+0x1bc>
 8008cfc:	8019      	strh	r1, [r3, #0]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	4616      	mov	r6, r2
 8008d04:	e7bc      	b.n	8008c80 <_printf_i+0x148>
 8008d06:	6833      	ldr	r3, [r6, #0]
 8008d08:	1d1a      	adds	r2, r3, #4
 8008d0a:	6032      	str	r2, [r6, #0]
 8008d0c:	681e      	ldr	r6, [r3, #0]
 8008d0e:	6862      	ldr	r2, [r4, #4]
 8008d10:	2100      	movs	r1, #0
 8008d12:	4630      	mov	r0, r6
 8008d14:	f7f7 fae4 	bl	80002e0 <memchr>
 8008d18:	b108      	cbz	r0, 8008d1e <_printf_i+0x1e6>
 8008d1a:	1b80      	subs	r0, r0, r6
 8008d1c:	6060      	str	r0, [r4, #4]
 8008d1e:	6863      	ldr	r3, [r4, #4]
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	2300      	movs	r3, #0
 8008d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d28:	e7aa      	b.n	8008c80 <_printf_i+0x148>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	4649      	mov	r1, r9
 8008d30:	4640      	mov	r0, r8
 8008d32:	47d0      	blx	sl
 8008d34:	3001      	adds	r0, #1
 8008d36:	d0ad      	beq.n	8008c94 <_printf_i+0x15c>
 8008d38:	6823      	ldr	r3, [r4, #0]
 8008d3a:	079b      	lsls	r3, r3, #30
 8008d3c:	d413      	bmi.n	8008d66 <_printf_i+0x22e>
 8008d3e:	68e0      	ldr	r0, [r4, #12]
 8008d40:	9b03      	ldr	r3, [sp, #12]
 8008d42:	4298      	cmp	r0, r3
 8008d44:	bfb8      	it	lt
 8008d46:	4618      	movlt	r0, r3
 8008d48:	e7a6      	b.n	8008c98 <_printf_i+0x160>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	47d0      	blx	sl
 8008d54:	3001      	adds	r0, #1
 8008d56:	d09d      	beq.n	8008c94 <_printf_i+0x15c>
 8008d58:	3501      	adds	r5, #1
 8008d5a:	68e3      	ldr	r3, [r4, #12]
 8008d5c:	9903      	ldr	r1, [sp, #12]
 8008d5e:	1a5b      	subs	r3, r3, r1
 8008d60:	42ab      	cmp	r3, r5
 8008d62:	dcf2      	bgt.n	8008d4a <_printf_i+0x212>
 8008d64:	e7eb      	b.n	8008d3e <_printf_i+0x206>
 8008d66:	2500      	movs	r5, #0
 8008d68:	f104 0619 	add.w	r6, r4, #25
 8008d6c:	e7f5      	b.n	8008d5a <_printf_i+0x222>
 8008d6e:	bf00      	nop
 8008d70:	0800d57a 	.word	0x0800d57a
 8008d74:	0800d58b 	.word	0x0800d58b

08008d78 <_scanf_float>:
 8008d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7c:	b087      	sub	sp, #28
 8008d7e:	4617      	mov	r7, r2
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	688b      	ldr	r3, [r1, #8]
 8008d84:	1e5a      	subs	r2, r3, #1
 8008d86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d8a:	bf81      	itttt	hi
 8008d8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d90:	eb03 0b05 	addhi.w	fp, r3, r5
 8008d94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d98:	608b      	strhi	r3, [r1, #8]
 8008d9a:	680b      	ldr	r3, [r1, #0]
 8008d9c:	460a      	mov	r2, r1
 8008d9e:	f04f 0500 	mov.w	r5, #0
 8008da2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008da6:	f842 3b1c 	str.w	r3, [r2], #28
 8008daa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dae:	4680      	mov	r8, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	bf98      	it	ls
 8008db4:	f04f 0b00 	movls.w	fp, #0
 8008db8:	9201      	str	r2, [sp, #4]
 8008dba:	4616      	mov	r6, r2
 8008dbc:	46aa      	mov	sl, r5
 8008dbe:	46a9      	mov	r9, r5
 8008dc0:	9502      	str	r5, [sp, #8]
 8008dc2:	68a2      	ldr	r2, [r4, #8]
 8008dc4:	b152      	cbz	r2, 8008ddc <_scanf_float+0x64>
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b4e      	cmp	r3, #78	@ 0x4e
 8008dcc:	d864      	bhi.n	8008e98 <_scanf_float+0x120>
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	d83c      	bhi.n	8008e4c <_scanf_float+0xd4>
 8008dd2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008dd6:	b2c8      	uxtb	r0, r1
 8008dd8:	280e      	cmp	r0, #14
 8008dda:	d93a      	bls.n	8008e52 <_scanf_float+0xda>
 8008ddc:	f1b9 0f00 	cmp.w	r9, #0
 8008de0:	d003      	beq.n	8008dea <_scanf_float+0x72>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008de8:	6023      	str	r3, [r4, #0]
 8008dea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dee:	f1ba 0f01 	cmp.w	sl, #1
 8008df2:	f200 8117 	bhi.w	8009024 <_scanf_float+0x2ac>
 8008df6:	9b01      	ldr	r3, [sp, #4]
 8008df8:	429e      	cmp	r6, r3
 8008dfa:	f200 8108 	bhi.w	800900e <_scanf_float+0x296>
 8008dfe:	2001      	movs	r0, #1
 8008e00:	b007      	add	sp, #28
 8008e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008e0a:	2a0d      	cmp	r2, #13
 8008e0c:	d8e6      	bhi.n	8008ddc <_scanf_float+0x64>
 8008e0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e14 <_scanf_float+0x9c>)
 8008e10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e14:	08008f5b 	.word	0x08008f5b
 8008e18:	08008ddd 	.word	0x08008ddd
 8008e1c:	08008ddd 	.word	0x08008ddd
 8008e20:	08008ddd 	.word	0x08008ddd
 8008e24:	08008fbb 	.word	0x08008fbb
 8008e28:	08008f93 	.word	0x08008f93
 8008e2c:	08008ddd 	.word	0x08008ddd
 8008e30:	08008ddd 	.word	0x08008ddd
 8008e34:	08008f69 	.word	0x08008f69
 8008e38:	08008ddd 	.word	0x08008ddd
 8008e3c:	08008ddd 	.word	0x08008ddd
 8008e40:	08008ddd 	.word	0x08008ddd
 8008e44:	08008ddd 	.word	0x08008ddd
 8008e48:	08008f21 	.word	0x08008f21
 8008e4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008e50:	e7db      	b.n	8008e0a <_scanf_float+0x92>
 8008e52:	290e      	cmp	r1, #14
 8008e54:	d8c2      	bhi.n	8008ddc <_scanf_float+0x64>
 8008e56:	a001      	add	r0, pc, #4	@ (adr r0, 8008e5c <_scanf_float+0xe4>)
 8008e58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e5c:	08008f11 	.word	0x08008f11
 8008e60:	08008ddd 	.word	0x08008ddd
 8008e64:	08008f11 	.word	0x08008f11
 8008e68:	08008fa7 	.word	0x08008fa7
 8008e6c:	08008ddd 	.word	0x08008ddd
 8008e70:	08008eb9 	.word	0x08008eb9
 8008e74:	08008ef7 	.word	0x08008ef7
 8008e78:	08008ef7 	.word	0x08008ef7
 8008e7c:	08008ef7 	.word	0x08008ef7
 8008e80:	08008ef7 	.word	0x08008ef7
 8008e84:	08008ef7 	.word	0x08008ef7
 8008e88:	08008ef7 	.word	0x08008ef7
 8008e8c:	08008ef7 	.word	0x08008ef7
 8008e90:	08008ef7 	.word	0x08008ef7
 8008e94:	08008ef7 	.word	0x08008ef7
 8008e98:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e9a:	d809      	bhi.n	8008eb0 <_scanf_float+0x138>
 8008e9c:	2b60      	cmp	r3, #96	@ 0x60
 8008e9e:	d8b2      	bhi.n	8008e06 <_scanf_float+0x8e>
 8008ea0:	2b54      	cmp	r3, #84	@ 0x54
 8008ea2:	d07b      	beq.n	8008f9c <_scanf_float+0x224>
 8008ea4:	2b59      	cmp	r3, #89	@ 0x59
 8008ea6:	d199      	bne.n	8008ddc <_scanf_float+0x64>
 8008ea8:	2d07      	cmp	r5, #7
 8008eaa:	d197      	bne.n	8008ddc <_scanf_float+0x64>
 8008eac:	2508      	movs	r5, #8
 8008eae:	e02c      	b.n	8008f0a <_scanf_float+0x192>
 8008eb0:	2b74      	cmp	r3, #116	@ 0x74
 8008eb2:	d073      	beq.n	8008f9c <_scanf_float+0x224>
 8008eb4:	2b79      	cmp	r3, #121	@ 0x79
 8008eb6:	e7f6      	b.n	8008ea6 <_scanf_float+0x12e>
 8008eb8:	6821      	ldr	r1, [r4, #0]
 8008eba:	05c8      	lsls	r0, r1, #23
 8008ebc:	d51b      	bpl.n	8008ef6 <_scanf_float+0x17e>
 8008ebe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008ec2:	6021      	str	r1, [r4, #0]
 8008ec4:	f109 0901 	add.w	r9, r9, #1
 8008ec8:	f1bb 0f00 	cmp.w	fp, #0
 8008ecc:	d003      	beq.n	8008ed6 <_scanf_float+0x15e>
 8008ece:	3201      	adds	r2, #1
 8008ed0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ed4:	60a2      	str	r2, [r4, #8]
 8008ed6:	68a3      	ldr	r3, [r4, #8]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	6123      	str	r3, [r4, #16]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	607b      	str	r3, [r7, #4]
 8008eea:	f340 8087 	ble.w	8008ffc <_scanf_float+0x284>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	e765      	b.n	8008dc2 <_scanf_float+0x4a>
 8008ef6:	eb1a 0105 	adds.w	r1, sl, r5
 8008efa:	f47f af6f 	bne.w	8008ddc <_scanf_float+0x64>
 8008efe:	6822      	ldr	r2, [r4, #0]
 8008f00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008f04:	6022      	str	r2, [r4, #0]
 8008f06:	460d      	mov	r5, r1
 8008f08:	468a      	mov	sl, r1
 8008f0a:	f806 3b01 	strb.w	r3, [r6], #1
 8008f0e:	e7e2      	b.n	8008ed6 <_scanf_float+0x15e>
 8008f10:	6822      	ldr	r2, [r4, #0]
 8008f12:	0610      	lsls	r0, r2, #24
 8008f14:	f57f af62 	bpl.w	8008ddc <_scanf_float+0x64>
 8008f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f1c:	6022      	str	r2, [r4, #0]
 8008f1e:	e7f4      	b.n	8008f0a <_scanf_float+0x192>
 8008f20:	f1ba 0f00 	cmp.w	sl, #0
 8008f24:	d10e      	bne.n	8008f44 <_scanf_float+0x1cc>
 8008f26:	f1b9 0f00 	cmp.w	r9, #0
 8008f2a:	d10e      	bne.n	8008f4a <_scanf_float+0x1d2>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f36:	d108      	bne.n	8008f4a <_scanf_float+0x1d2>
 8008f38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	f04f 0a01 	mov.w	sl, #1
 8008f42:	e7e2      	b.n	8008f0a <_scanf_float+0x192>
 8008f44:	f1ba 0f02 	cmp.w	sl, #2
 8008f48:	d055      	beq.n	8008ff6 <_scanf_float+0x27e>
 8008f4a:	2d01      	cmp	r5, #1
 8008f4c:	d002      	beq.n	8008f54 <_scanf_float+0x1dc>
 8008f4e:	2d04      	cmp	r5, #4
 8008f50:	f47f af44 	bne.w	8008ddc <_scanf_float+0x64>
 8008f54:	3501      	adds	r5, #1
 8008f56:	b2ed      	uxtb	r5, r5
 8008f58:	e7d7      	b.n	8008f0a <_scanf_float+0x192>
 8008f5a:	f1ba 0f01 	cmp.w	sl, #1
 8008f5e:	f47f af3d 	bne.w	8008ddc <_scanf_float+0x64>
 8008f62:	f04f 0a02 	mov.w	sl, #2
 8008f66:	e7d0      	b.n	8008f0a <_scanf_float+0x192>
 8008f68:	b97d      	cbnz	r5, 8008f8a <_scanf_float+0x212>
 8008f6a:	f1b9 0f00 	cmp.w	r9, #0
 8008f6e:	f47f af38 	bne.w	8008de2 <_scanf_float+0x6a>
 8008f72:	6822      	ldr	r2, [r4, #0]
 8008f74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f7c:	f040 8101 	bne.w	8009182 <_scanf_float+0x40a>
 8008f80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f84:	6022      	str	r2, [r4, #0]
 8008f86:	2501      	movs	r5, #1
 8008f88:	e7bf      	b.n	8008f0a <_scanf_float+0x192>
 8008f8a:	2d03      	cmp	r5, #3
 8008f8c:	d0e2      	beq.n	8008f54 <_scanf_float+0x1dc>
 8008f8e:	2d05      	cmp	r5, #5
 8008f90:	e7de      	b.n	8008f50 <_scanf_float+0x1d8>
 8008f92:	2d02      	cmp	r5, #2
 8008f94:	f47f af22 	bne.w	8008ddc <_scanf_float+0x64>
 8008f98:	2503      	movs	r5, #3
 8008f9a:	e7b6      	b.n	8008f0a <_scanf_float+0x192>
 8008f9c:	2d06      	cmp	r5, #6
 8008f9e:	f47f af1d 	bne.w	8008ddc <_scanf_float+0x64>
 8008fa2:	2507      	movs	r5, #7
 8008fa4:	e7b1      	b.n	8008f0a <_scanf_float+0x192>
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	0591      	lsls	r1, r2, #22
 8008faa:	f57f af17 	bpl.w	8008ddc <_scanf_float+0x64>
 8008fae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fb8:	e7a7      	b.n	8008f0a <_scanf_float+0x192>
 8008fba:	6822      	ldr	r2, [r4, #0]
 8008fbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008fc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008fc4:	d006      	beq.n	8008fd4 <_scanf_float+0x25c>
 8008fc6:	0550      	lsls	r0, r2, #21
 8008fc8:	f57f af08 	bpl.w	8008ddc <_scanf_float+0x64>
 8008fcc:	f1b9 0f00 	cmp.w	r9, #0
 8008fd0:	f000 80d7 	beq.w	8009182 <_scanf_float+0x40a>
 8008fd4:	0591      	lsls	r1, r2, #22
 8008fd6:	bf58      	it	pl
 8008fd8:	9902      	ldrpl	r1, [sp, #8]
 8008fda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fde:	bf58      	it	pl
 8008fe0:	eba9 0101 	subpl.w	r1, r9, r1
 8008fe4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008fe8:	bf58      	it	pl
 8008fea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008fee:	6022      	str	r2, [r4, #0]
 8008ff0:	f04f 0900 	mov.w	r9, #0
 8008ff4:	e789      	b.n	8008f0a <_scanf_float+0x192>
 8008ff6:	f04f 0a03 	mov.w	sl, #3
 8008ffa:	e786      	b.n	8008f0a <_scanf_float+0x192>
 8008ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009000:	4639      	mov	r1, r7
 8009002:	4640      	mov	r0, r8
 8009004:	4798      	blx	r3
 8009006:	2800      	cmp	r0, #0
 8009008:	f43f aedb 	beq.w	8008dc2 <_scanf_float+0x4a>
 800900c:	e6e6      	b.n	8008ddc <_scanf_float+0x64>
 800900e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009016:	463a      	mov	r2, r7
 8009018:	4640      	mov	r0, r8
 800901a:	4798      	blx	r3
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	3b01      	subs	r3, #1
 8009020:	6123      	str	r3, [r4, #16]
 8009022:	e6e8      	b.n	8008df6 <_scanf_float+0x7e>
 8009024:	1e6b      	subs	r3, r5, #1
 8009026:	2b06      	cmp	r3, #6
 8009028:	d824      	bhi.n	8009074 <_scanf_float+0x2fc>
 800902a:	2d02      	cmp	r5, #2
 800902c:	d836      	bhi.n	800909c <_scanf_float+0x324>
 800902e:	9b01      	ldr	r3, [sp, #4]
 8009030:	429e      	cmp	r6, r3
 8009032:	f67f aee4 	bls.w	8008dfe <_scanf_float+0x86>
 8009036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800903a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800903e:	463a      	mov	r2, r7
 8009040:	4640      	mov	r0, r8
 8009042:	4798      	blx	r3
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	3b01      	subs	r3, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	e7f0      	b.n	800902e <_scanf_float+0x2b6>
 800904c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009050:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009054:	463a      	mov	r2, r7
 8009056:	4640      	mov	r0, r8
 8009058:	4798      	blx	r3
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	3b01      	subs	r3, #1
 800905e:	6123      	str	r3, [r4, #16]
 8009060:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009064:	fa5f fa8a 	uxtb.w	sl, sl
 8009068:	f1ba 0f02 	cmp.w	sl, #2
 800906c:	d1ee      	bne.n	800904c <_scanf_float+0x2d4>
 800906e:	3d03      	subs	r5, #3
 8009070:	b2ed      	uxtb	r5, r5
 8009072:	1b76      	subs	r6, r6, r5
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	05da      	lsls	r2, r3, #23
 8009078:	d530      	bpl.n	80090dc <_scanf_float+0x364>
 800907a:	055b      	lsls	r3, r3, #21
 800907c:	d511      	bpl.n	80090a2 <_scanf_float+0x32a>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	429e      	cmp	r6, r3
 8009082:	f67f aebc 	bls.w	8008dfe <_scanf_float+0x86>
 8009086:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800908a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800908e:	463a      	mov	r2, r7
 8009090:	4640      	mov	r0, r8
 8009092:	4798      	blx	r3
 8009094:	6923      	ldr	r3, [r4, #16]
 8009096:	3b01      	subs	r3, #1
 8009098:	6123      	str	r3, [r4, #16]
 800909a:	e7f0      	b.n	800907e <_scanf_float+0x306>
 800909c:	46aa      	mov	sl, r5
 800909e:	46b3      	mov	fp, r6
 80090a0:	e7de      	b.n	8009060 <_scanf_float+0x2e8>
 80090a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	2965      	cmp	r1, #101	@ 0x65
 80090aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ae:	f106 35ff 	add.w	r5, r6, #4294967295
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	d00c      	beq.n	80090d0 <_scanf_float+0x358>
 80090b6:	2945      	cmp	r1, #69	@ 0x45
 80090b8:	d00a      	beq.n	80090d0 <_scanf_float+0x358>
 80090ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090be:	463a      	mov	r2, r7
 80090c0:	4640      	mov	r0, r8
 80090c2:	4798      	blx	r3
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	1eb5      	subs	r5, r6, #2
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090d4:	463a      	mov	r2, r7
 80090d6:	4640      	mov	r0, r8
 80090d8:	4798      	blx	r3
 80090da:	462e      	mov	r6, r5
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	f012 0210 	ands.w	r2, r2, #16
 80090e2:	d001      	beq.n	80090e8 <_scanf_float+0x370>
 80090e4:	2000      	movs	r0, #0
 80090e6:	e68b      	b.n	8008e00 <_scanf_float+0x88>
 80090e8:	7032      	strb	r2, [r6, #0]
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090f4:	d11a      	bne.n	800912c <_scanf_float+0x3b4>
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	454b      	cmp	r3, r9
 80090fa:	eba3 0209 	sub.w	r2, r3, r9
 80090fe:	d121      	bne.n	8009144 <_scanf_float+0x3cc>
 8009100:	9901      	ldr	r1, [sp, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	4640      	mov	r0, r8
 8009106:	f002 fb2d 	bl	800b764 <_strtod_r>
 800910a:	9b03      	ldr	r3, [sp, #12]
 800910c:	6821      	ldr	r1, [r4, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f011 0f02 	tst.w	r1, #2
 8009114:	f103 0204 	add.w	r2, r3, #4
 8009118:	d01f      	beq.n	800915a <_scanf_float+0x3e2>
 800911a:	9903      	ldr	r1, [sp, #12]
 800911c:	600a      	str	r2, [r1, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	ed83 0b00 	vstr	d0, [r3]
 8009124:	68e3      	ldr	r3, [r4, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	60e3      	str	r3, [r4, #12]
 800912a:	e7db      	b.n	80090e4 <_scanf_float+0x36c>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0e6      	beq.n	8009100 <_scanf_float+0x388>
 8009132:	9905      	ldr	r1, [sp, #20]
 8009134:	230a      	movs	r3, #10
 8009136:	3101      	adds	r1, #1
 8009138:	4640      	mov	r0, r8
 800913a:	f002 fb93 	bl	800b864 <_strtol_r>
 800913e:	9b04      	ldr	r3, [sp, #16]
 8009140:	9e05      	ldr	r6, [sp, #20]
 8009142:	1ac2      	subs	r2, r0, r3
 8009144:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009148:	429e      	cmp	r6, r3
 800914a:	bf28      	it	cs
 800914c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009150:	490d      	ldr	r1, [pc, #52]	@ (8009188 <_scanf_float+0x410>)
 8009152:	4630      	mov	r0, r6
 8009154:	f000 f8de 	bl	8009314 <siprintf>
 8009158:	e7d2      	b.n	8009100 <_scanf_float+0x388>
 800915a:	f011 0f04 	tst.w	r1, #4
 800915e:	9903      	ldr	r1, [sp, #12]
 8009160:	600a      	str	r2, [r1, #0]
 8009162:	d1dc      	bne.n	800911e <_scanf_float+0x3a6>
 8009164:	eeb4 0b40 	vcmp.f64	d0, d0
 8009168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800916c:	681d      	ldr	r5, [r3, #0]
 800916e:	d705      	bvc.n	800917c <_scanf_float+0x404>
 8009170:	4806      	ldr	r0, [pc, #24]	@ (800918c <_scanf_float+0x414>)
 8009172:	f000 f9b3 	bl	80094dc <nanf>
 8009176:	ed85 0a00 	vstr	s0, [r5]
 800917a:	e7d3      	b.n	8009124 <_scanf_float+0x3ac>
 800917c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009180:	e7f9      	b.n	8009176 <_scanf_float+0x3fe>
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	e630      	b.n	8008dea <_scanf_float+0x72>
 8009188:	0800d59c 	.word	0x0800d59c
 800918c:	0800d935 	.word	0x0800d935

08009190 <std>:
 8009190:	2300      	movs	r3, #0
 8009192:	b510      	push	{r4, lr}
 8009194:	4604      	mov	r4, r0
 8009196:	e9c0 3300 	strd	r3, r3, [r0]
 800919a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800919e:	6083      	str	r3, [r0, #8]
 80091a0:	8181      	strh	r1, [r0, #12]
 80091a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80091a4:	81c2      	strh	r2, [r0, #14]
 80091a6:	6183      	str	r3, [r0, #24]
 80091a8:	4619      	mov	r1, r3
 80091aa:	2208      	movs	r2, #8
 80091ac:	305c      	adds	r0, #92	@ 0x5c
 80091ae:	f000 f914 	bl	80093da <memset>
 80091b2:	4b0d      	ldr	r3, [pc, #52]	@ (80091e8 <std+0x58>)
 80091b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80091b6:	4b0d      	ldr	r3, [pc, #52]	@ (80091ec <std+0x5c>)
 80091b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091ba:	4b0d      	ldr	r3, [pc, #52]	@ (80091f0 <std+0x60>)
 80091bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091be:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <std+0x64>)
 80091c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80091c2:	4b0d      	ldr	r3, [pc, #52]	@ (80091f8 <std+0x68>)
 80091c4:	6224      	str	r4, [r4, #32]
 80091c6:	429c      	cmp	r4, r3
 80091c8:	d006      	beq.n	80091d8 <std+0x48>
 80091ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091ce:	4294      	cmp	r4, r2
 80091d0:	d002      	beq.n	80091d8 <std+0x48>
 80091d2:	33d0      	adds	r3, #208	@ 0xd0
 80091d4:	429c      	cmp	r4, r3
 80091d6:	d105      	bne.n	80091e4 <std+0x54>
 80091d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80091dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e0:	f000 b978 	b.w	80094d4 <__retarget_lock_init_recursive>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	bf00      	nop
 80091e8:	08009355 	.word	0x08009355
 80091ec:	08009377 	.word	0x08009377
 80091f0:	080093af 	.word	0x080093af
 80091f4:	080093d3 	.word	0x080093d3
 80091f8:	24000518 	.word	0x24000518

080091fc <stdio_exit_handler>:
 80091fc:	4a02      	ldr	r2, [pc, #8]	@ (8009208 <stdio_exit_handler+0xc>)
 80091fe:	4903      	ldr	r1, [pc, #12]	@ (800920c <stdio_exit_handler+0x10>)
 8009200:	4803      	ldr	r0, [pc, #12]	@ (8009210 <stdio_exit_handler+0x14>)
 8009202:	f000 b869 	b.w	80092d8 <_fwalk_sglue>
 8009206:	bf00      	nop
 8009208:	24000014 	.word	0x24000014
 800920c:	0800bc21 	.word	0x0800bc21
 8009210:	24000024 	.word	0x24000024

08009214 <cleanup_stdio>:
 8009214:	6841      	ldr	r1, [r0, #4]
 8009216:	4b0c      	ldr	r3, [pc, #48]	@ (8009248 <cleanup_stdio+0x34>)
 8009218:	4299      	cmp	r1, r3
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	d001      	beq.n	8009224 <cleanup_stdio+0x10>
 8009220:	f002 fcfe 	bl	800bc20 <_fflush_r>
 8009224:	68a1      	ldr	r1, [r4, #8]
 8009226:	4b09      	ldr	r3, [pc, #36]	@ (800924c <cleanup_stdio+0x38>)
 8009228:	4299      	cmp	r1, r3
 800922a:	d002      	beq.n	8009232 <cleanup_stdio+0x1e>
 800922c:	4620      	mov	r0, r4
 800922e:	f002 fcf7 	bl	800bc20 <_fflush_r>
 8009232:	68e1      	ldr	r1, [r4, #12]
 8009234:	4b06      	ldr	r3, [pc, #24]	@ (8009250 <cleanup_stdio+0x3c>)
 8009236:	4299      	cmp	r1, r3
 8009238:	d004      	beq.n	8009244 <cleanup_stdio+0x30>
 800923a:	4620      	mov	r0, r4
 800923c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009240:	f002 bcee 	b.w	800bc20 <_fflush_r>
 8009244:	bd10      	pop	{r4, pc}
 8009246:	bf00      	nop
 8009248:	24000518 	.word	0x24000518
 800924c:	24000580 	.word	0x24000580
 8009250:	240005e8 	.word	0x240005e8

08009254 <global_stdio_init.part.0>:
 8009254:	b510      	push	{r4, lr}
 8009256:	4b0b      	ldr	r3, [pc, #44]	@ (8009284 <global_stdio_init.part.0+0x30>)
 8009258:	4c0b      	ldr	r4, [pc, #44]	@ (8009288 <global_stdio_init.part.0+0x34>)
 800925a:	4a0c      	ldr	r2, [pc, #48]	@ (800928c <global_stdio_init.part.0+0x38>)
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	4620      	mov	r0, r4
 8009260:	2200      	movs	r2, #0
 8009262:	2104      	movs	r1, #4
 8009264:	f7ff ff94 	bl	8009190 <std>
 8009268:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800926c:	2201      	movs	r2, #1
 800926e:	2109      	movs	r1, #9
 8009270:	f7ff ff8e 	bl	8009190 <std>
 8009274:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009278:	2202      	movs	r2, #2
 800927a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927e:	2112      	movs	r1, #18
 8009280:	f7ff bf86 	b.w	8009190 <std>
 8009284:	24000650 	.word	0x24000650
 8009288:	24000518 	.word	0x24000518
 800928c:	080091fd 	.word	0x080091fd

08009290 <__sfp_lock_acquire>:
 8009290:	4801      	ldr	r0, [pc, #4]	@ (8009298 <__sfp_lock_acquire+0x8>)
 8009292:	f000 b920 	b.w	80094d6 <__retarget_lock_acquire_recursive>
 8009296:	bf00      	nop
 8009298:	24000659 	.word	0x24000659

0800929c <__sfp_lock_release>:
 800929c:	4801      	ldr	r0, [pc, #4]	@ (80092a4 <__sfp_lock_release+0x8>)
 800929e:	f000 b91b 	b.w	80094d8 <__retarget_lock_release_recursive>
 80092a2:	bf00      	nop
 80092a4:	24000659 	.word	0x24000659

080092a8 <__sinit>:
 80092a8:	b510      	push	{r4, lr}
 80092aa:	4604      	mov	r4, r0
 80092ac:	f7ff fff0 	bl	8009290 <__sfp_lock_acquire>
 80092b0:	6a23      	ldr	r3, [r4, #32]
 80092b2:	b11b      	cbz	r3, 80092bc <__sinit+0x14>
 80092b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b8:	f7ff bff0 	b.w	800929c <__sfp_lock_release>
 80092bc:	4b04      	ldr	r3, [pc, #16]	@ (80092d0 <__sinit+0x28>)
 80092be:	6223      	str	r3, [r4, #32]
 80092c0:	4b04      	ldr	r3, [pc, #16]	@ (80092d4 <__sinit+0x2c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f5      	bne.n	80092b4 <__sinit+0xc>
 80092c8:	f7ff ffc4 	bl	8009254 <global_stdio_init.part.0>
 80092cc:	e7f2      	b.n	80092b4 <__sinit+0xc>
 80092ce:	bf00      	nop
 80092d0:	08009215 	.word	0x08009215
 80092d4:	24000650 	.word	0x24000650

080092d8 <_fwalk_sglue>:
 80092d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092dc:	4607      	mov	r7, r0
 80092de:	4688      	mov	r8, r1
 80092e0:	4614      	mov	r4, r2
 80092e2:	2600      	movs	r6, #0
 80092e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092e8:	f1b9 0901 	subs.w	r9, r9, #1
 80092ec:	d505      	bpl.n	80092fa <_fwalk_sglue+0x22>
 80092ee:	6824      	ldr	r4, [r4, #0]
 80092f0:	2c00      	cmp	r4, #0
 80092f2:	d1f7      	bne.n	80092e4 <_fwalk_sglue+0xc>
 80092f4:	4630      	mov	r0, r6
 80092f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d907      	bls.n	8009310 <_fwalk_sglue+0x38>
 8009300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009304:	3301      	adds	r3, #1
 8009306:	d003      	beq.n	8009310 <_fwalk_sglue+0x38>
 8009308:	4629      	mov	r1, r5
 800930a:	4638      	mov	r0, r7
 800930c:	47c0      	blx	r8
 800930e:	4306      	orrs	r6, r0
 8009310:	3568      	adds	r5, #104	@ 0x68
 8009312:	e7e9      	b.n	80092e8 <_fwalk_sglue+0x10>

08009314 <siprintf>:
 8009314:	b40e      	push	{r1, r2, r3}
 8009316:	b500      	push	{lr}
 8009318:	b09c      	sub	sp, #112	@ 0x70
 800931a:	ab1d      	add	r3, sp, #116	@ 0x74
 800931c:	9002      	str	r0, [sp, #8]
 800931e:	9006      	str	r0, [sp, #24]
 8009320:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009324:	4809      	ldr	r0, [pc, #36]	@ (800934c <siprintf+0x38>)
 8009326:	9107      	str	r1, [sp, #28]
 8009328:	9104      	str	r1, [sp, #16]
 800932a:	4909      	ldr	r1, [pc, #36]	@ (8009350 <siprintf+0x3c>)
 800932c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009330:	9105      	str	r1, [sp, #20]
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	a902      	add	r1, sp, #8
 8009338:	f002 faf2 	bl	800b920 <_svfiprintf_r>
 800933c:	9b02      	ldr	r3, [sp, #8]
 800933e:	2200      	movs	r2, #0
 8009340:	701a      	strb	r2, [r3, #0]
 8009342:	b01c      	add	sp, #112	@ 0x70
 8009344:	f85d eb04 	ldr.w	lr, [sp], #4
 8009348:	b003      	add	sp, #12
 800934a:	4770      	bx	lr
 800934c:	24000020 	.word	0x24000020
 8009350:	ffff0208 	.word	0xffff0208

08009354 <__sread>:
 8009354:	b510      	push	{r4, lr}
 8009356:	460c      	mov	r4, r1
 8009358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935c:	f000 f86c 	bl	8009438 <_read_r>
 8009360:	2800      	cmp	r0, #0
 8009362:	bfab      	itete	ge
 8009364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009366:	89a3      	ldrhlt	r3, [r4, #12]
 8009368:	181b      	addge	r3, r3, r0
 800936a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800936e:	bfac      	ite	ge
 8009370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009372:	81a3      	strhlt	r3, [r4, #12]
 8009374:	bd10      	pop	{r4, pc}

08009376 <__swrite>:
 8009376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	461f      	mov	r7, r3
 800937c:	898b      	ldrh	r3, [r1, #12]
 800937e:	05db      	lsls	r3, r3, #23
 8009380:	4605      	mov	r5, r0
 8009382:	460c      	mov	r4, r1
 8009384:	4616      	mov	r6, r2
 8009386:	d505      	bpl.n	8009394 <__swrite+0x1e>
 8009388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938c:	2302      	movs	r3, #2
 800938e:	2200      	movs	r2, #0
 8009390:	f000 f840 	bl	8009414 <_lseek_r>
 8009394:	89a3      	ldrh	r3, [r4, #12]
 8009396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	4632      	mov	r2, r6
 80093a2:	463b      	mov	r3, r7
 80093a4:	4628      	mov	r0, r5
 80093a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093aa:	f000 b857 	b.w	800945c <_write_r>

080093ae <__sseek>:
 80093ae:	b510      	push	{r4, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b6:	f000 f82d 	bl	8009414 <_lseek_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	bf15      	itete	ne
 80093c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093ca:	81a3      	strheq	r3, [r4, #12]
 80093cc:	bf18      	it	ne
 80093ce:	81a3      	strhne	r3, [r4, #12]
 80093d0:	bd10      	pop	{r4, pc}

080093d2 <__sclose>:
 80093d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d6:	f000 b80d 	b.w	80093f4 <_close_r>

080093da <memset>:
 80093da:	4402      	add	r2, r0
 80093dc:	4603      	mov	r3, r0
 80093de:	4293      	cmp	r3, r2
 80093e0:	d100      	bne.n	80093e4 <memset+0xa>
 80093e2:	4770      	bx	lr
 80093e4:	f803 1b01 	strb.w	r1, [r3], #1
 80093e8:	e7f9      	b.n	80093de <memset+0x4>
	...

080093ec <_localeconv_r>:
 80093ec:	4800      	ldr	r0, [pc, #0]	@ (80093f0 <_localeconv_r+0x4>)
 80093ee:	4770      	bx	lr
 80093f0:	24000160 	.word	0x24000160

080093f4 <_close_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d06      	ldr	r5, [pc, #24]	@ (8009410 <_close_r+0x1c>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f9 f8de 	bl	80025c0 <_close>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_close_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_close_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	24000654 	.word	0x24000654

08009414 <_lseek_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d07      	ldr	r5, [pc, #28]	@ (8009434 <_lseek_r+0x20>)
 8009418:	4604      	mov	r4, r0
 800941a:	4608      	mov	r0, r1
 800941c:	4611      	mov	r1, r2
 800941e:	2200      	movs	r2, #0
 8009420:	602a      	str	r2, [r5, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	f7f9 f8f3 	bl	800260e <_lseek>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d102      	bne.n	8009432 <_lseek_r+0x1e>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	b103      	cbz	r3, 8009432 <_lseek_r+0x1e>
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	24000654 	.word	0x24000654

08009438 <_read_r>:
 8009438:	b538      	push	{r3, r4, r5, lr}
 800943a:	4d07      	ldr	r5, [pc, #28]	@ (8009458 <_read_r+0x20>)
 800943c:	4604      	mov	r4, r0
 800943e:	4608      	mov	r0, r1
 8009440:	4611      	mov	r1, r2
 8009442:	2200      	movs	r2, #0
 8009444:	602a      	str	r2, [r5, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	f7f9 f89d 	bl	8002586 <_read>
 800944c:	1c43      	adds	r3, r0, #1
 800944e:	d102      	bne.n	8009456 <_read_r+0x1e>
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	b103      	cbz	r3, 8009456 <_read_r+0x1e>
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	bd38      	pop	{r3, r4, r5, pc}
 8009458:	24000654 	.word	0x24000654

0800945c <_write_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d07      	ldr	r5, [pc, #28]	@ (800947c <_write_r+0x20>)
 8009460:	4604      	mov	r4, r0
 8009462:	4608      	mov	r0, r1
 8009464:	4611      	mov	r1, r2
 8009466:	2200      	movs	r2, #0
 8009468:	602a      	str	r2, [r5, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	f7f8 fbc8 	bl	8001c00 <_write>
 8009470:	1c43      	adds	r3, r0, #1
 8009472:	d102      	bne.n	800947a <_write_r+0x1e>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	b103      	cbz	r3, 800947a <_write_r+0x1e>
 8009478:	6023      	str	r3, [r4, #0]
 800947a:	bd38      	pop	{r3, r4, r5, pc}
 800947c:	24000654 	.word	0x24000654

08009480 <__errno>:
 8009480:	4b01      	ldr	r3, [pc, #4]	@ (8009488 <__errno+0x8>)
 8009482:	6818      	ldr	r0, [r3, #0]
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	24000020 	.word	0x24000020

0800948c <__libc_init_array>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	4d0d      	ldr	r5, [pc, #52]	@ (80094c4 <__libc_init_array+0x38>)
 8009490:	4c0d      	ldr	r4, [pc, #52]	@ (80094c8 <__libc_init_array+0x3c>)
 8009492:	1b64      	subs	r4, r4, r5
 8009494:	10a4      	asrs	r4, r4, #2
 8009496:	2600      	movs	r6, #0
 8009498:	42a6      	cmp	r6, r4
 800949a:	d109      	bne.n	80094b0 <__libc_init_array+0x24>
 800949c:	4d0b      	ldr	r5, [pc, #44]	@ (80094cc <__libc_init_array+0x40>)
 800949e:	4c0c      	ldr	r4, [pc, #48]	@ (80094d0 <__libc_init_array+0x44>)
 80094a0:	f004 f83a 	bl	800d518 <_init>
 80094a4:	1b64      	subs	r4, r4, r5
 80094a6:	10a4      	asrs	r4, r4, #2
 80094a8:	2600      	movs	r6, #0
 80094aa:	42a6      	cmp	r6, r4
 80094ac:	d105      	bne.n	80094ba <__libc_init_array+0x2e>
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80094b4:	4798      	blx	r3
 80094b6:	3601      	adds	r6, #1
 80094b8:	e7ee      	b.n	8009498 <__libc_init_array+0xc>
 80094ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80094be:	4798      	blx	r3
 80094c0:	3601      	adds	r6, #1
 80094c2:	e7f2      	b.n	80094aa <__libc_init_array+0x1e>
 80094c4:	0800f290 	.word	0x0800f290
 80094c8:	0800f290 	.word	0x0800f290
 80094cc:	0800f290 	.word	0x0800f290
 80094d0:	0800f294 	.word	0x0800f294

080094d4 <__retarget_lock_init_recursive>:
 80094d4:	4770      	bx	lr

080094d6 <__retarget_lock_acquire_recursive>:
 80094d6:	4770      	bx	lr

080094d8 <__retarget_lock_release_recursive>:
 80094d8:	4770      	bx	lr
	...

080094dc <nanf>:
 80094dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80094e4 <nanf+0x8>
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	7fc00000 	.word	0x7fc00000

080094e8 <quorem>:
 80094e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	6903      	ldr	r3, [r0, #16]
 80094ee:	690c      	ldr	r4, [r1, #16]
 80094f0:	42a3      	cmp	r3, r4
 80094f2:	4607      	mov	r7, r0
 80094f4:	db7e      	blt.n	80095f4 <quorem+0x10c>
 80094f6:	3c01      	subs	r4, #1
 80094f8:	f101 0814 	add.w	r8, r1, #20
 80094fc:	00a3      	lsls	r3, r4, #2
 80094fe:	f100 0514 	add.w	r5, r0, #20
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800950e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009512:	3301      	adds	r3, #1
 8009514:	429a      	cmp	r2, r3
 8009516:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800951a:	fbb2 f6f3 	udiv	r6, r2, r3
 800951e:	d32e      	bcc.n	800957e <quorem+0x96>
 8009520:	f04f 0a00 	mov.w	sl, #0
 8009524:	46c4      	mov	ip, r8
 8009526:	46ae      	mov	lr, r5
 8009528:	46d3      	mov	fp, sl
 800952a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800952e:	b298      	uxth	r0, r3
 8009530:	fb06 a000 	mla	r0, r6, r0, sl
 8009534:	0c02      	lsrs	r2, r0, #16
 8009536:	0c1b      	lsrs	r3, r3, #16
 8009538:	fb06 2303 	mla	r3, r6, r3, r2
 800953c:	f8de 2000 	ldr.w	r2, [lr]
 8009540:	b280      	uxth	r0, r0
 8009542:	b292      	uxth	r2, r2
 8009544:	1a12      	subs	r2, r2, r0
 8009546:	445a      	add	r2, fp
 8009548:	f8de 0000 	ldr.w	r0, [lr]
 800954c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009550:	b29b      	uxth	r3, r3
 8009552:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009556:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800955a:	b292      	uxth	r2, r2
 800955c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009560:	45e1      	cmp	r9, ip
 8009562:	f84e 2b04 	str.w	r2, [lr], #4
 8009566:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800956a:	d2de      	bcs.n	800952a <quorem+0x42>
 800956c:	9b00      	ldr	r3, [sp, #0]
 800956e:	58eb      	ldr	r3, [r5, r3]
 8009570:	b92b      	cbnz	r3, 800957e <quorem+0x96>
 8009572:	9b01      	ldr	r3, [sp, #4]
 8009574:	3b04      	subs	r3, #4
 8009576:	429d      	cmp	r5, r3
 8009578:	461a      	mov	r2, r3
 800957a:	d32f      	bcc.n	80095dc <quorem+0xf4>
 800957c:	613c      	str	r4, [r7, #16]
 800957e:	4638      	mov	r0, r7
 8009580:	f001 f954 	bl	800a82c <__mcmp>
 8009584:	2800      	cmp	r0, #0
 8009586:	db25      	blt.n	80095d4 <quorem+0xec>
 8009588:	4629      	mov	r1, r5
 800958a:	2000      	movs	r0, #0
 800958c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009590:	f8d1 c000 	ldr.w	ip, [r1]
 8009594:	fa1f fe82 	uxth.w	lr, r2
 8009598:	fa1f f38c 	uxth.w	r3, ip
 800959c:	eba3 030e 	sub.w	r3, r3, lr
 80095a0:	4403      	add	r3, r0
 80095a2:	0c12      	lsrs	r2, r2, #16
 80095a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095b2:	45c1      	cmp	r9, r8
 80095b4:	f841 3b04 	str.w	r3, [r1], #4
 80095b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095bc:	d2e6      	bcs.n	800958c <quorem+0xa4>
 80095be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095c6:	b922      	cbnz	r2, 80095d2 <quorem+0xea>
 80095c8:	3b04      	subs	r3, #4
 80095ca:	429d      	cmp	r5, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	d30b      	bcc.n	80095e8 <quorem+0x100>
 80095d0:	613c      	str	r4, [r7, #16]
 80095d2:	3601      	adds	r6, #1
 80095d4:	4630      	mov	r0, r6
 80095d6:	b003      	add	sp, #12
 80095d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095dc:	6812      	ldr	r2, [r2, #0]
 80095de:	3b04      	subs	r3, #4
 80095e0:	2a00      	cmp	r2, #0
 80095e2:	d1cb      	bne.n	800957c <quorem+0x94>
 80095e4:	3c01      	subs	r4, #1
 80095e6:	e7c6      	b.n	8009576 <quorem+0x8e>
 80095e8:	6812      	ldr	r2, [r2, #0]
 80095ea:	3b04      	subs	r3, #4
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	d1ef      	bne.n	80095d0 <quorem+0xe8>
 80095f0:	3c01      	subs	r4, #1
 80095f2:	e7ea      	b.n	80095ca <quorem+0xe2>
 80095f4:	2000      	movs	r0, #0
 80095f6:	e7ee      	b.n	80095d6 <quorem+0xee>

080095f8 <_dtoa_r>:
 80095f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fc:	ed2d 8b02 	vpush	{d8}
 8009600:	69c7      	ldr	r7, [r0, #28]
 8009602:	b091      	sub	sp, #68	@ 0x44
 8009604:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009608:	ec55 4b10 	vmov	r4, r5, d0
 800960c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800960e:	9107      	str	r1, [sp, #28]
 8009610:	4681      	mov	r9, r0
 8009612:	9209      	str	r2, [sp, #36]	@ 0x24
 8009614:	930d      	str	r3, [sp, #52]	@ 0x34
 8009616:	b97f      	cbnz	r7, 8009638 <_dtoa_r+0x40>
 8009618:	2010      	movs	r0, #16
 800961a:	f000 fd8d 	bl	800a138 <malloc>
 800961e:	4602      	mov	r2, r0
 8009620:	f8c9 001c 	str.w	r0, [r9, #28]
 8009624:	b920      	cbnz	r0, 8009630 <_dtoa_r+0x38>
 8009626:	4ba0      	ldr	r3, [pc, #640]	@ (80098a8 <_dtoa_r+0x2b0>)
 8009628:	21ef      	movs	r1, #239	@ 0xef
 800962a:	48a0      	ldr	r0, [pc, #640]	@ (80098ac <_dtoa_r+0x2b4>)
 800962c:	f002 fb74 	bl	800bd18 <__assert_func>
 8009630:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009634:	6007      	str	r7, [r0, #0]
 8009636:	60c7      	str	r7, [r0, #12]
 8009638:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800963c:	6819      	ldr	r1, [r3, #0]
 800963e:	b159      	cbz	r1, 8009658 <_dtoa_r+0x60>
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	604a      	str	r2, [r1, #4]
 8009644:	2301      	movs	r3, #1
 8009646:	4093      	lsls	r3, r2
 8009648:	608b      	str	r3, [r1, #8]
 800964a:	4648      	mov	r0, r9
 800964c:	f000 fe6a 	bl	800a324 <_Bfree>
 8009650:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009654:	2200      	movs	r2, #0
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	1e2b      	subs	r3, r5, #0
 800965a:	bfbb      	ittet	lt
 800965c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009660:	9303      	strlt	r3, [sp, #12]
 8009662:	2300      	movge	r3, #0
 8009664:	2201      	movlt	r2, #1
 8009666:	bfac      	ite	ge
 8009668:	6033      	strge	r3, [r6, #0]
 800966a:	6032      	strlt	r2, [r6, #0]
 800966c:	4b90      	ldr	r3, [pc, #576]	@ (80098b0 <_dtoa_r+0x2b8>)
 800966e:	9e03      	ldr	r6, [sp, #12]
 8009670:	43b3      	bics	r3, r6
 8009672:	d110      	bne.n	8009696 <_dtoa_r+0x9e>
 8009674:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009676:	f242 730f 	movw	r3, #9999	@ 0x270f
 800967a:	6013      	str	r3, [r2, #0]
 800967c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009680:	4323      	orrs	r3, r4
 8009682:	f000 84de 	beq.w	800a042 <_dtoa_r+0xa4a>
 8009686:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009688:	4f8a      	ldr	r7, [pc, #552]	@ (80098b4 <_dtoa_r+0x2bc>)
 800968a:	2b00      	cmp	r3, #0
 800968c:	f000 84e0 	beq.w	800a050 <_dtoa_r+0xa58>
 8009690:	1cfb      	adds	r3, r7, #3
 8009692:	f000 bcdb 	b.w	800a04c <_dtoa_r+0xa54>
 8009696:	ed9d 8b02 	vldr	d8, [sp, #8]
 800969a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800969e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096a2:	d10a      	bne.n	80096ba <_dtoa_r+0xc2>
 80096a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096a6:	2301      	movs	r3, #1
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096ac:	b113      	cbz	r3, 80096b4 <_dtoa_r+0xbc>
 80096ae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80096b0:	4b81      	ldr	r3, [pc, #516]	@ (80098b8 <_dtoa_r+0x2c0>)
 80096b2:	6013      	str	r3, [r2, #0]
 80096b4:	4f81      	ldr	r7, [pc, #516]	@ (80098bc <_dtoa_r+0x2c4>)
 80096b6:	f000 bccb 	b.w	800a050 <_dtoa_r+0xa58>
 80096ba:	aa0e      	add	r2, sp, #56	@ 0x38
 80096bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80096be:	4648      	mov	r0, r9
 80096c0:	eeb0 0b48 	vmov.f64	d0, d8
 80096c4:	f001 f9d2 	bl	800aa6c <__d2b>
 80096c8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80096cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096ce:	9001      	str	r0, [sp, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d045      	beq.n	8009760 <_dtoa_r+0x168>
 80096d4:	eeb0 7b48 	vmov.f64	d7, d8
 80096d8:	ee18 1a90 	vmov	r1, s17
 80096dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80096e0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80096e4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80096e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80096ec:	2500      	movs	r5, #0
 80096ee:	ee07 1a90 	vmov	s15, r1
 80096f2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80096f6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009890 <_dtoa_r+0x298>
 80096fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096fe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009898 <_dtoa_r+0x2a0>
 8009702:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009706:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80098a0 <_dtoa_r+0x2a8>
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009712:	eeb0 7b46 	vmov.f64	d7, d6
 8009716:	eea4 7b05 	vfma.f64	d7, d4, d5
 800971a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800971e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009726:	ee16 8a90 	vmov	r8, s13
 800972a:	d508      	bpl.n	800973e <_dtoa_r+0x146>
 800972c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009730:	eeb4 6b47 	vcmp.f64	d6, d7
 8009734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009738:	bf18      	it	ne
 800973a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800973e:	f1b8 0f16 	cmp.w	r8, #22
 8009742:	d82b      	bhi.n	800979c <_dtoa_r+0x1a4>
 8009744:	495e      	ldr	r1, [pc, #376]	@ (80098c0 <_dtoa_r+0x2c8>)
 8009746:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800974a:	ed91 7b00 	vldr	d7, [r1]
 800974e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009756:	d501      	bpl.n	800975c <_dtoa_r+0x164>
 8009758:	f108 38ff 	add.w	r8, r8, #4294967295
 800975c:	2100      	movs	r1, #0
 800975e:	e01e      	b.n	800979e <_dtoa_r+0x1a6>
 8009760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009762:	4413      	add	r3, r2
 8009764:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009768:	2920      	cmp	r1, #32
 800976a:	bfc1      	itttt	gt
 800976c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009770:	408e      	lslgt	r6, r1
 8009772:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009776:	fa24 f101 	lsrgt.w	r1, r4, r1
 800977a:	bfd6      	itet	le
 800977c:	f1c1 0120 	rsble	r1, r1, #32
 8009780:	4331      	orrgt	r1, r6
 8009782:	fa04 f101 	lslle.w	r1, r4, r1
 8009786:	ee07 1a90 	vmov	s15, r1
 800978a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800978e:	3b01      	subs	r3, #1
 8009790:	ee17 1a90 	vmov	r1, s15
 8009794:	2501      	movs	r5, #1
 8009796:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800979a:	e7a8      	b.n	80096ee <_dtoa_r+0xf6>
 800979c:	2101      	movs	r1, #1
 800979e:	1ad2      	subs	r2, r2, r3
 80097a0:	1e53      	subs	r3, r2, #1
 80097a2:	9306      	str	r3, [sp, #24]
 80097a4:	bf45      	ittet	mi
 80097a6:	f1c2 0301 	rsbmi	r3, r2, #1
 80097aa:	9305      	strmi	r3, [sp, #20]
 80097ac:	2300      	movpl	r3, #0
 80097ae:	2300      	movmi	r3, #0
 80097b0:	bf4c      	ite	mi
 80097b2:	9306      	strmi	r3, [sp, #24]
 80097b4:	9305      	strpl	r3, [sp, #20]
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	910c      	str	r1, [sp, #48]	@ 0x30
 80097bc:	db18      	blt.n	80097f0 <_dtoa_r+0x1f8>
 80097be:	9b06      	ldr	r3, [sp, #24]
 80097c0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80097c4:	4443      	add	r3, r8
 80097c6:	9306      	str	r3, [sp, #24]
 80097c8:	2300      	movs	r3, #0
 80097ca:	9a07      	ldr	r2, [sp, #28]
 80097cc:	2a09      	cmp	r2, #9
 80097ce:	d849      	bhi.n	8009864 <_dtoa_r+0x26c>
 80097d0:	2a05      	cmp	r2, #5
 80097d2:	bfc4      	itt	gt
 80097d4:	3a04      	subgt	r2, #4
 80097d6:	9207      	strgt	r2, [sp, #28]
 80097d8:	9a07      	ldr	r2, [sp, #28]
 80097da:	f1a2 0202 	sub.w	r2, r2, #2
 80097de:	bfcc      	ite	gt
 80097e0:	2400      	movgt	r4, #0
 80097e2:	2401      	movle	r4, #1
 80097e4:	2a03      	cmp	r2, #3
 80097e6:	d848      	bhi.n	800987a <_dtoa_r+0x282>
 80097e8:	e8df f002 	tbb	[pc, r2]
 80097ec:	3a2c2e0b 	.word	0x3a2c2e0b
 80097f0:	9b05      	ldr	r3, [sp, #20]
 80097f2:	2200      	movs	r2, #0
 80097f4:	eba3 0308 	sub.w	r3, r3, r8
 80097f8:	9305      	str	r3, [sp, #20]
 80097fa:	920a      	str	r2, [sp, #40]	@ 0x28
 80097fc:	f1c8 0300 	rsb	r3, r8, #0
 8009800:	e7e3      	b.n	80097ca <_dtoa_r+0x1d2>
 8009802:	2200      	movs	r2, #0
 8009804:	9208      	str	r2, [sp, #32]
 8009806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009808:	2a00      	cmp	r2, #0
 800980a:	dc39      	bgt.n	8009880 <_dtoa_r+0x288>
 800980c:	f04f 0b01 	mov.w	fp, #1
 8009810:	46da      	mov	sl, fp
 8009812:	465a      	mov	r2, fp
 8009814:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009818:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800981c:	2100      	movs	r1, #0
 800981e:	2004      	movs	r0, #4
 8009820:	f100 0614 	add.w	r6, r0, #20
 8009824:	4296      	cmp	r6, r2
 8009826:	d930      	bls.n	800988a <_dtoa_r+0x292>
 8009828:	6079      	str	r1, [r7, #4]
 800982a:	4648      	mov	r0, r9
 800982c:	9304      	str	r3, [sp, #16]
 800982e:	f000 fd39 	bl	800a2a4 <_Balloc>
 8009832:	9b04      	ldr	r3, [sp, #16]
 8009834:	4607      	mov	r7, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d146      	bne.n	80098c8 <_dtoa_r+0x2d0>
 800983a:	4b22      	ldr	r3, [pc, #136]	@ (80098c4 <_dtoa_r+0x2cc>)
 800983c:	4602      	mov	r2, r0
 800983e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009842:	e6f2      	b.n	800962a <_dtoa_r+0x32>
 8009844:	2201      	movs	r2, #1
 8009846:	e7dd      	b.n	8009804 <_dtoa_r+0x20c>
 8009848:	2200      	movs	r2, #0
 800984a:	9208      	str	r2, [sp, #32]
 800984c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800984e:	eb08 0b02 	add.w	fp, r8, r2
 8009852:	f10b 0a01 	add.w	sl, fp, #1
 8009856:	4652      	mov	r2, sl
 8009858:	2a01      	cmp	r2, #1
 800985a:	bfb8      	it	lt
 800985c:	2201      	movlt	r2, #1
 800985e:	e7db      	b.n	8009818 <_dtoa_r+0x220>
 8009860:	2201      	movs	r2, #1
 8009862:	e7f2      	b.n	800984a <_dtoa_r+0x252>
 8009864:	2401      	movs	r4, #1
 8009866:	2200      	movs	r2, #0
 8009868:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800986c:	f04f 3bff 	mov.w	fp, #4294967295
 8009870:	2100      	movs	r1, #0
 8009872:	46da      	mov	sl, fp
 8009874:	2212      	movs	r2, #18
 8009876:	9109      	str	r1, [sp, #36]	@ 0x24
 8009878:	e7ce      	b.n	8009818 <_dtoa_r+0x220>
 800987a:	2201      	movs	r2, #1
 800987c:	9208      	str	r2, [sp, #32]
 800987e:	e7f5      	b.n	800986c <_dtoa_r+0x274>
 8009880:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009884:	46da      	mov	sl, fp
 8009886:	465a      	mov	r2, fp
 8009888:	e7c6      	b.n	8009818 <_dtoa_r+0x220>
 800988a:	3101      	adds	r1, #1
 800988c:	0040      	lsls	r0, r0, #1
 800988e:	e7c7      	b.n	8009820 <_dtoa_r+0x228>
 8009890:	636f4361 	.word	0x636f4361
 8009894:	3fd287a7 	.word	0x3fd287a7
 8009898:	8b60c8b3 	.word	0x8b60c8b3
 800989c:	3fc68a28 	.word	0x3fc68a28
 80098a0:	509f79fb 	.word	0x509f79fb
 80098a4:	3fd34413 	.word	0x3fd34413
 80098a8:	0800d5ae 	.word	0x0800d5ae
 80098ac:	0800d5c5 	.word	0x0800d5c5
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	0800d5aa 	.word	0x0800d5aa
 80098b8:	0800d579 	.word	0x0800d579
 80098bc:	0800d578 	.word	0x0800d578
 80098c0:	0800d6c0 	.word	0x0800d6c0
 80098c4:	0800d61d 	.word	0x0800d61d
 80098c8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80098cc:	f1ba 0f0e 	cmp.w	sl, #14
 80098d0:	6010      	str	r0, [r2, #0]
 80098d2:	d86f      	bhi.n	80099b4 <_dtoa_r+0x3bc>
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	d06d      	beq.n	80099b4 <_dtoa_r+0x3bc>
 80098d8:	f1b8 0f00 	cmp.w	r8, #0
 80098dc:	f340 80c2 	ble.w	8009a64 <_dtoa_r+0x46c>
 80098e0:	4aca      	ldr	r2, [pc, #808]	@ (8009c0c <_dtoa_r+0x614>)
 80098e2:	f008 010f 	and.w	r1, r8, #15
 80098e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80098ea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80098ee:	ed92 7b00 	vldr	d7, [r2]
 80098f2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80098f6:	f000 80a9 	beq.w	8009a4c <_dtoa_r+0x454>
 80098fa:	4ac5      	ldr	r2, [pc, #788]	@ (8009c10 <_dtoa_r+0x618>)
 80098fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8009900:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009904:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009908:	f001 010f 	and.w	r1, r1, #15
 800990c:	2203      	movs	r2, #3
 800990e:	48c0      	ldr	r0, [pc, #768]	@ (8009c10 <_dtoa_r+0x618>)
 8009910:	2900      	cmp	r1, #0
 8009912:	f040 809d 	bne.w	8009a50 <_dtoa_r+0x458>
 8009916:	ed9d 6b02 	vldr	d6, [sp, #8]
 800991a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800991e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009922:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009924:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009928:	2900      	cmp	r1, #0
 800992a:	f000 80c1 	beq.w	8009ab0 <_dtoa_r+0x4b8>
 800992e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009932:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800993a:	f140 80b9 	bpl.w	8009ab0 <_dtoa_r+0x4b8>
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	f000 80b5 	beq.w	8009ab0 <_dtoa_r+0x4b8>
 8009946:	f1bb 0f00 	cmp.w	fp, #0
 800994a:	dd31      	ble.n	80099b0 <_dtoa_r+0x3b8>
 800994c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009950:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009954:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009958:	f108 31ff 	add.w	r1, r8, #4294967295
 800995c:	9104      	str	r1, [sp, #16]
 800995e:	3201      	adds	r2, #1
 8009960:	465c      	mov	r4, fp
 8009962:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009966:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800996a:	ee07 2a90 	vmov	s15, r2
 800996e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009972:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009976:	ee15 2a90 	vmov	r2, s11
 800997a:	ec51 0b15 	vmov	r0, r1, d5
 800997e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009982:	2c00      	cmp	r4, #0
 8009984:	f040 8098 	bne.w	8009ab8 <_dtoa_r+0x4c0>
 8009988:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800998c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009990:	ec41 0b17 	vmov	d7, r0, r1
 8009994:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999c:	f300 8261 	bgt.w	8009e62 <_dtoa_r+0x86a>
 80099a0:	eeb1 7b47 	vneg.f64	d7, d7
 80099a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ac:	f100 80f5 	bmi.w	8009b9a <_dtoa_r+0x5a2>
 80099b0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	f2c0 812c 	blt.w	8009c14 <_dtoa_r+0x61c>
 80099bc:	f1b8 0f0e 	cmp.w	r8, #14
 80099c0:	f300 8128 	bgt.w	8009c14 <_dtoa_r+0x61c>
 80099c4:	4b91      	ldr	r3, [pc, #580]	@ (8009c0c <_dtoa_r+0x614>)
 80099c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80099ca:	ed93 6b00 	vldr	d6, [r3]
 80099ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	da03      	bge.n	80099dc <_dtoa_r+0x3e4>
 80099d4:	f1ba 0f00 	cmp.w	sl, #0
 80099d8:	f340 80d2 	ble.w	8009b80 <_dtoa_r+0x588>
 80099dc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80099e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e4:	463e      	mov	r6, r7
 80099e6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80099ea:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80099ee:	ee15 3a10 	vmov	r3, s10
 80099f2:	3330      	adds	r3, #48	@ 0x30
 80099f4:	f806 3b01 	strb.w	r3, [r6], #1
 80099f8:	1bf3      	subs	r3, r6, r7
 80099fa:	459a      	cmp	sl, r3
 80099fc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009a00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009a04:	f040 80f8 	bne.w	8009bf8 <_dtoa_r+0x600>
 8009a08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009a0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a14:	f300 80dd 	bgt.w	8009bd2 <_dtoa_r+0x5da>
 8009a18:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a20:	d104      	bne.n	8009a2c <_dtoa_r+0x434>
 8009a22:	ee15 3a10 	vmov	r3, s10
 8009a26:	07db      	lsls	r3, r3, #31
 8009a28:	f100 80d3 	bmi.w	8009bd2 <_dtoa_r+0x5da>
 8009a2c:	9901      	ldr	r1, [sp, #4]
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f000 fc78 	bl	800a324 <_Bfree>
 8009a34:	2300      	movs	r3, #0
 8009a36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a38:	7033      	strb	r3, [r6, #0]
 8009a3a:	f108 0301 	add.w	r3, r8, #1
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 8304 	beq.w	800a050 <_dtoa_r+0xa58>
 8009a48:	601e      	str	r6, [r3, #0]
 8009a4a:	e301      	b.n	800a050 <_dtoa_r+0xa58>
 8009a4c:	2202      	movs	r2, #2
 8009a4e:	e75e      	b.n	800990e <_dtoa_r+0x316>
 8009a50:	07cc      	lsls	r4, r1, #31
 8009a52:	d504      	bpl.n	8009a5e <_dtoa_r+0x466>
 8009a54:	ed90 6b00 	vldr	d6, [r0]
 8009a58:	3201      	adds	r2, #1
 8009a5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a5e:	1049      	asrs	r1, r1, #1
 8009a60:	3008      	adds	r0, #8
 8009a62:	e755      	b.n	8009910 <_dtoa_r+0x318>
 8009a64:	d022      	beq.n	8009aac <_dtoa_r+0x4b4>
 8009a66:	f1c8 0100 	rsb	r1, r8, #0
 8009a6a:	4a68      	ldr	r2, [pc, #416]	@ (8009c0c <_dtoa_r+0x614>)
 8009a6c:	f001 000f 	and.w	r0, r1, #15
 8009a70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a74:	ed92 7b00 	vldr	d7, [r2]
 8009a78:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009a7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a80:	4863      	ldr	r0, [pc, #396]	@ (8009c10 <_dtoa_r+0x618>)
 8009a82:	1109      	asrs	r1, r1, #4
 8009a84:	2400      	movs	r4, #0
 8009a86:	2202      	movs	r2, #2
 8009a88:	b929      	cbnz	r1, 8009a96 <_dtoa_r+0x49e>
 8009a8a:	2c00      	cmp	r4, #0
 8009a8c:	f43f af49 	beq.w	8009922 <_dtoa_r+0x32a>
 8009a90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a94:	e745      	b.n	8009922 <_dtoa_r+0x32a>
 8009a96:	07ce      	lsls	r6, r1, #31
 8009a98:	d505      	bpl.n	8009aa6 <_dtoa_r+0x4ae>
 8009a9a:	ed90 6b00 	vldr	d6, [r0]
 8009a9e:	3201      	adds	r2, #1
 8009aa0:	2401      	movs	r4, #1
 8009aa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009aa6:	1049      	asrs	r1, r1, #1
 8009aa8:	3008      	adds	r0, #8
 8009aaa:	e7ed      	b.n	8009a88 <_dtoa_r+0x490>
 8009aac:	2202      	movs	r2, #2
 8009aae:	e738      	b.n	8009922 <_dtoa_r+0x32a>
 8009ab0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	e754      	b.n	8009962 <_dtoa_r+0x36a>
 8009ab8:	4a54      	ldr	r2, [pc, #336]	@ (8009c0c <_dtoa_r+0x614>)
 8009aba:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009abe:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009ac2:	9a08      	ldr	r2, [sp, #32]
 8009ac4:	ec41 0b17 	vmov	d7, r0, r1
 8009ac8:	443c      	add	r4, r7
 8009aca:	b34a      	cbz	r2, 8009b20 <_dtoa_r+0x528>
 8009acc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009ad0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009ad4:	463e      	mov	r6, r7
 8009ad6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009ada:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009ade:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ae2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ae6:	ee14 2a90 	vmov	r2, s9
 8009aea:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009aee:	3230      	adds	r2, #48	@ 0x30
 8009af0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009af4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009afc:	f806 2b01 	strb.w	r2, [r6], #1
 8009b00:	d438      	bmi.n	8009b74 <_dtoa_r+0x57c>
 8009b02:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009b06:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0e:	d462      	bmi.n	8009bd6 <_dtoa_r+0x5de>
 8009b10:	42a6      	cmp	r6, r4
 8009b12:	f43f af4d 	beq.w	80099b0 <_dtoa_r+0x3b8>
 8009b16:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009b1a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b1e:	e7e0      	b.n	8009ae2 <_dtoa_r+0x4ea>
 8009b20:	4621      	mov	r1, r4
 8009b22:	463e      	mov	r6, r7
 8009b24:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b28:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009b2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009b30:	ee14 2a90 	vmov	r2, s9
 8009b34:	3230      	adds	r2, #48	@ 0x30
 8009b36:	f806 2b01 	strb.w	r2, [r6], #1
 8009b3a:	42a6      	cmp	r6, r4
 8009b3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009b40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009b44:	d119      	bne.n	8009b7a <_dtoa_r+0x582>
 8009b46:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009b4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b56:	dc3e      	bgt.n	8009bd6 <_dtoa_r+0x5de>
 8009b58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009b5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b64:	f57f af24 	bpl.w	80099b0 <_dtoa_r+0x3b8>
 8009b68:	460e      	mov	r6, r1
 8009b6a:	3901      	subs	r1, #1
 8009b6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b70:	2b30      	cmp	r3, #48	@ 0x30
 8009b72:	d0f9      	beq.n	8009b68 <_dtoa_r+0x570>
 8009b74:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009b78:	e758      	b.n	8009a2c <_dtoa_r+0x434>
 8009b7a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b7e:	e7d5      	b.n	8009b2c <_dtoa_r+0x534>
 8009b80:	d10b      	bne.n	8009b9a <_dtoa_r+0x5a2>
 8009b82:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009b86:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b96:	f2c0 8161 	blt.w	8009e5c <_dtoa_r+0x864>
 8009b9a:	2400      	movs	r4, #0
 8009b9c:	4625      	mov	r5, r4
 8009b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba0:	43db      	mvns	r3, r3
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	463e      	mov	r6, r7
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	4621      	mov	r1, r4
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 fbb9 	bl	800a324 <_Bfree>
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	d0de      	beq.n	8009b74 <_dtoa_r+0x57c>
 8009bb6:	f1b8 0f00 	cmp.w	r8, #0
 8009bba:	d005      	beq.n	8009bc8 <_dtoa_r+0x5d0>
 8009bbc:	45a8      	cmp	r8, r5
 8009bbe:	d003      	beq.n	8009bc8 <_dtoa_r+0x5d0>
 8009bc0:	4641      	mov	r1, r8
 8009bc2:	4648      	mov	r0, r9
 8009bc4:	f000 fbae 	bl	800a324 <_Bfree>
 8009bc8:	4629      	mov	r1, r5
 8009bca:	4648      	mov	r0, r9
 8009bcc:	f000 fbaa 	bl	800a324 <_Bfree>
 8009bd0:	e7d0      	b.n	8009b74 <_dtoa_r+0x57c>
 8009bd2:	f8cd 8010 	str.w	r8, [sp, #16]
 8009bd6:	4633      	mov	r3, r6
 8009bd8:	461e      	mov	r6, r3
 8009bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bde:	2a39      	cmp	r2, #57	@ 0x39
 8009be0:	d106      	bne.n	8009bf0 <_dtoa_r+0x5f8>
 8009be2:	429f      	cmp	r7, r3
 8009be4:	d1f8      	bne.n	8009bd8 <_dtoa_r+0x5e0>
 8009be6:	9a04      	ldr	r2, [sp, #16]
 8009be8:	3201      	adds	r2, #1
 8009bea:	9204      	str	r2, [sp, #16]
 8009bec:	2230      	movs	r2, #48	@ 0x30
 8009bee:	703a      	strb	r2, [r7, #0]
 8009bf0:	781a      	ldrb	r2, [r3, #0]
 8009bf2:	3201      	adds	r2, #1
 8009bf4:	701a      	strb	r2, [r3, #0]
 8009bf6:	e7bd      	b.n	8009b74 <_dtoa_r+0x57c>
 8009bf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c04:	f47f aeef 	bne.w	80099e6 <_dtoa_r+0x3ee>
 8009c08:	e710      	b.n	8009a2c <_dtoa_r+0x434>
 8009c0a:	bf00      	nop
 8009c0c:	0800d6c0 	.word	0x0800d6c0
 8009c10:	0800d698 	.word	0x0800d698
 8009c14:	9908      	ldr	r1, [sp, #32]
 8009c16:	2900      	cmp	r1, #0
 8009c18:	f000 80e3 	beq.w	8009de2 <_dtoa_r+0x7ea>
 8009c1c:	9907      	ldr	r1, [sp, #28]
 8009c1e:	2901      	cmp	r1, #1
 8009c20:	f300 80c8 	bgt.w	8009db4 <_dtoa_r+0x7bc>
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	f000 80c1 	beq.w	8009dac <_dtoa_r+0x7b4>
 8009c2a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c2e:	9e05      	ldr	r6, [sp, #20]
 8009c30:	461c      	mov	r4, r3
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	9b05      	ldr	r3, [sp, #20]
 8009c36:	4413      	add	r3, r2
 8009c38:	9305      	str	r3, [sp, #20]
 8009c3a:	9b06      	ldr	r3, [sp, #24]
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	4648      	mov	r0, r9
 8009c42:	9306      	str	r3, [sp, #24]
 8009c44:	f000 fc6c 	bl	800a520 <__i2b>
 8009c48:	9b04      	ldr	r3, [sp, #16]
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	b166      	cbz	r6, 8009c68 <_dtoa_r+0x670>
 8009c4e:	9a06      	ldr	r2, [sp, #24]
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	dd09      	ble.n	8009c68 <_dtoa_r+0x670>
 8009c54:	42b2      	cmp	r2, r6
 8009c56:	9905      	ldr	r1, [sp, #20]
 8009c58:	bfa8      	it	ge
 8009c5a:	4632      	movge	r2, r6
 8009c5c:	1a89      	subs	r1, r1, r2
 8009c5e:	9105      	str	r1, [sp, #20]
 8009c60:	9906      	ldr	r1, [sp, #24]
 8009c62:	1ab6      	subs	r6, r6, r2
 8009c64:	1a8a      	subs	r2, r1, r2
 8009c66:	9206      	str	r2, [sp, #24]
 8009c68:	b1fb      	cbz	r3, 8009caa <_dtoa_r+0x6b2>
 8009c6a:	9a08      	ldr	r2, [sp, #32]
 8009c6c:	2a00      	cmp	r2, #0
 8009c6e:	f000 80bc 	beq.w	8009dea <_dtoa_r+0x7f2>
 8009c72:	b19c      	cbz	r4, 8009c9c <_dtoa_r+0x6a4>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4622      	mov	r2, r4
 8009c78:	4648      	mov	r0, r9
 8009c7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c7c:	f000 fd10 	bl	800a6a0 <__pow5mult>
 8009c80:	9a01      	ldr	r2, [sp, #4]
 8009c82:	4601      	mov	r1, r0
 8009c84:	4605      	mov	r5, r0
 8009c86:	4648      	mov	r0, r9
 8009c88:	f000 fc60 	bl	800a54c <__multiply>
 8009c8c:	9901      	ldr	r1, [sp, #4]
 8009c8e:	9004      	str	r0, [sp, #16]
 8009c90:	4648      	mov	r0, r9
 8009c92:	f000 fb47 	bl	800a324 <_Bfree>
 8009c96:	9a04      	ldr	r2, [sp, #16]
 8009c98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c9a:	9201      	str	r2, [sp, #4]
 8009c9c:	1b1a      	subs	r2, r3, r4
 8009c9e:	d004      	beq.n	8009caa <_dtoa_r+0x6b2>
 8009ca0:	9901      	ldr	r1, [sp, #4]
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f000 fcfc 	bl	800a6a0 <__pow5mult>
 8009ca8:	9001      	str	r0, [sp, #4]
 8009caa:	2101      	movs	r1, #1
 8009cac:	4648      	mov	r0, r9
 8009cae:	f000 fc37 	bl	800a520 <__i2b>
 8009cb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 81d0 	beq.w	800a05c <_dtoa_r+0xa64>
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4601      	mov	r1, r0
 8009cc0:	4648      	mov	r0, r9
 8009cc2:	f000 fced 	bl	800a6a0 <__pow5mult>
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	4604      	mov	r4, r0
 8009ccc:	f300 8095 	bgt.w	8009dfa <_dtoa_r+0x802>
 8009cd0:	9b02      	ldr	r3, [sp, #8]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f040 808b 	bne.w	8009dee <_dtoa_r+0x7f6>
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	f040 8087 	bne.w	8009df2 <_dtoa_r+0x7fa>
 8009ce4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009ce8:	0d12      	lsrs	r2, r2, #20
 8009cea:	0512      	lsls	r2, r2, #20
 8009cec:	2a00      	cmp	r2, #0
 8009cee:	f000 8082 	beq.w	8009df6 <_dtoa_r+0x7fe>
 8009cf2:	9b05      	ldr	r3, [sp, #20]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	9305      	str	r3, [sp, #20]
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	9306      	str	r3, [sp, #24]
 8009cfe:	2301      	movs	r3, #1
 8009d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	f000 81af 	beq.w	800a068 <_dtoa_r+0xa70>
 8009d0a:	6922      	ldr	r2, [r4, #16]
 8009d0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009d10:	6910      	ldr	r0, [r2, #16]
 8009d12:	f000 fbb9 	bl	800a488 <__hi0bits>
 8009d16:	f1c0 0020 	rsb	r0, r0, #32
 8009d1a:	9b06      	ldr	r3, [sp, #24]
 8009d1c:	4418      	add	r0, r3
 8009d1e:	f010 001f 	ands.w	r0, r0, #31
 8009d22:	d076      	beq.n	8009e12 <_dtoa_r+0x81a>
 8009d24:	f1c0 0220 	rsb	r2, r0, #32
 8009d28:	2a04      	cmp	r2, #4
 8009d2a:	dd69      	ble.n	8009e00 <_dtoa_r+0x808>
 8009d2c:	9b05      	ldr	r3, [sp, #20]
 8009d2e:	f1c0 001c 	rsb	r0, r0, #28
 8009d32:	4403      	add	r3, r0
 8009d34:	9305      	str	r3, [sp, #20]
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	4406      	add	r6, r0
 8009d3a:	4403      	add	r3, r0
 8009d3c:	9306      	str	r3, [sp, #24]
 8009d3e:	9b05      	ldr	r3, [sp, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dd05      	ble.n	8009d50 <_dtoa_r+0x758>
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	4648      	mov	r0, r9
 8009d4a:	f000 fd03 	bl	800a754 <__lshift>
 8009d4e:	9001      	str	r0, [sp, #4]
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	dd05      	ble.n	8009d62 <_dtoa_r+0x76a>
 8009d56:	4621      	mov	r1, r4
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4648      	mov	r0, r9
 8009d5c:	f000 fcfa 	bl	800a754 <__lshift>
 8009d60:	4604      	mov	r4, r0
 8009d62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d056      	beq.n	8009e16 <_dtoa_r+0x81e>
 8009d68:	9801      	ldr	r0, [sp, #4]
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	f000 fd5e 	bl	800a82c <__mcmp>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	da50      	bge.n	8009e16 <_dtoa_r+0x81e>
 8009d74:	f108 33ff 	add.w	r3, r8, #4294967295
 8009d78:	9304      	str	r3, [sp, #16]
 8009d7a:	9901      	ldr	r1, [sp, #4]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	220a      	movs	r2, #10
 8009d80:	4648      	mov	r0, r9
 8009d82:	f000 faf1 	bl	800a368 <__multadd>
 8009d86:	9b08      	ldr	r3, [sp, #32]
 8009d88:	9001      	str	r0, [sp, #4]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 816e 	beq.w	800a06c <_dtoa_r+0xa74>
 8009d90:	4629      	mov	r1, r5
 8009d92:	2300      	movs	r3, #0
 8009d94:	220a      	movs	r2, #10
 8009d96:	4648      	mov	r0, r9
 8009d98:	f000 fae6 	bl	800a368 <__multadd>
 8009d9c:	f1bb 0f00 	cmp.w	fp, #0
 8009da0:	4605      	mov	r5, r0
 8009da2:	dc64      	bgt.n	8009e6e <_dtoa_r+0x876>
 8009da4:	9b07      	ldr	r3, [sp, #28]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	dc3e      	bgt.n	8009e28 <_dtoa_r+0x830>
 8009daa:	e060      	b.n	8009e6e <_dtoa_r+0x876>
 8009dac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009db2:	e73c      	b.n	8009c2e <_dtoa_r+0x636>
 8009db4:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009db8:	42a3      	cmp	r3, r4
 8009dba:	bfbf      	itttt	lt
 8009dbc:	1ae2      	sublt	r2, r4, r3
 8009dbe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009dc0:	189b      	addlt	r3, r3, r2
 8009dc2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8009dc4:	bfae      	itee	ge
 8009dc6:	1b1c      	subge	r4, r3, r4
 8009dc8:	4623      	movlt	r3, r4
 8009dca:	2400      	movlt	r4, #0
 8009dcc:	f1ba 0f00 	cmp.w	sl, #0
 8009dd0:	bfb5      	itete	lt
 8009dd2:	9a05      	ldrlt	r2, [sp, #20]
 8009dd4:	9e05      	ldrge	r6, [sp, #20]
 8009dd6:	eba2 060a 	sublt.w	r6, r2, sl
 8009dda:	4652      	movge	r2, sl
 8009ddc:	bfb8      	it	lt
 8009dde:	2200      	movlt	r2, #0
 8009de0:	e727      	b.n	8009c32 <_dtoa_r+0x63a>
 8009de2:	9e05      	ldr	r6, [sp, #20]
 8009de4:	9d08      	ldr	r5, [sp, #32]
 8009de6:	461c      	mov	r4, r3
 8009de8:	e730      	b.n	8009c4c <_dtoa_r+0x654>
 8009dea:	461a      	mov	r2, r3
 8009dec:	e758      	b.n	8009ca0 <_dtoa_r+0x6a8>
 8009dee:	2300      	movs	r3, #0
 8009df0:	e786      	b.n	8009d00 <_dtoa_r+0x708>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	e784      	b.n	8009d00 <_dtoa_r+0x708>
 8009df6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009df8:	e783      	b.n	8009d02 <_dtoa_r+0x70a>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dfe:	e784      	b.n	8009d0a <_dtoa_r+0x712>
 8009e00:	d09d      	beq.n	8009d3e <_dtoa_r+0x746>
 8009e02:	9b05      	ldr	r3, [sp, #20]
 8009e04:	321c      	adds	r2, #28
 8009e06:	4413      	add	r3, r2
 8009e08:	9305      	str	r3, [sp, #20]
 8009e0a:	9b06      	ldr	r3, [sp, #24]
 8009e0c:	4416      	add	r6, r2
 8009e0e:	4413      	add	r3, r2
 8009e10:	e794      	b.n	8009d3c <_dtoa_r+0x744>
 8009e12:	4602      	mov	r2, r0
 8009e14:	e7f5      	b.n	8009e02 <_dtoa_r+0x80a>
 8009e16:	f1ba 0f00 	cmp.w	sl, #0
 8009e1a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009e1e:	46d3      	mov	fp, sl
 8009e20:	dc21      	bgt.n	8009e66 <_dtoa_r+0x86e>
 8009e22:	9b07      	ldr	r3, [sp, #28]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	dd1e      	ble.n	8009e66 <_dtoa_r+0x86e>
 8009e28:	f1bb 0f00 	cmp.w	fp, #0
 8009e2c:	f47f aeb7 	bne.w	8009b9e <_dtoa_r+0x5a6>
 8009e30:	4621      	mov	r1, r4
 8009e32:	465b      	mov	r3, fp
 8009e34:	2205      	movs	r2, #5
 8009e36:	4648      	mov	r0, r9
 8009e38:	f000 fa96 	bl	800a368 <__multadd>
 8009e3c:	4601      	mov	r1, r0
 8009e3e:	4604      	mov	r4, r0
 8009e40:	9801      	ldr	r0, [sp, #4]
 8009e42:	f000 fcf3 	bl	800a82c <__mcmp>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f77f aea9 	ble.w	8009b9e <_dtoa_r+0x5a6>
 8009e4c:	463e      	mov	r6, r7
 8009e4e:	2331      	movs	r3, #49	@ 0x31
 8009e50:	f806 3b01 	strb.w	r3, [r6], #1
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	3301      	adds	r3, #1
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	e6a4      	b.n	8009ba6 <_dtoa_r+0x5ae>
 8009e5c:	f8cd 8010 	str.w	r8, [sp, #16]
 8009e60:	4654      	mov	r4, sl
 8009e62:	4625      	mov	r5, r4
 8009e64:	e7f2      	b.n	8009e4c <_dtoa_r+0x854>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f000 8103 	beq.w	800a074 <_dtoa_r+0xa7c>
 8009e6e:	2e00      	cmp	r6, #0
 8009e70:	dd05      	ble.n	8009e7e <_dtoa_r+0x886>
 8009e72:	4629      	mov	r1, r5
 8009e74:	4632      	mov	r2, r6
 8009e76:	4648      	mov	r0, r9
 8009e78:	f000 fc6c 	bl	800a754 <__lshift>
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d058      	beq.n	8009f36 <_dtoa_r+0x93e>
 8009e84:	6869      	ldr	r1, [r5, #4]
 8009e86:	4648      	mov	r0, r9
 8009e88:	f000 fa0c 	bl	800a2a4 <_Balloc>
 8009e8c:	4606      	mov	r6, r0
 8009e8e:	b928      	cbnz	r0, 8009e9c <_dtoa_r+0x8a4>
 8009e90:	4b82      	ldr	r3, [pc, #520]	@ (800a09c <_dtoa_r+0xaa4>)
 8009e92:	4602      	mov	r2, r0
 8009e94:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e98:	f7ff bbc7 	b.w	800962a <_dtoa_r+0x32>
 8009e9c:	692a      	ldr	r2, [r5, #16]
 8009e9e:	3202      	adds	r2, #2
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	f105 010c 	add.w	r1, r5, #12
 8009ea6:	300c      	adds	r0, #12
 8009ea8:	f001 ff1e 	bl	800bce8 <memcpy>
 8009eac:	2201      	movs	r2, #1
 8009eae:	4631      	mov	r1, r6
 8009eb0:	4648      	mov	r0, r9
 8009eb2:	f000 fc4f 	bl	800a754 <__lshift>
 8009eb6:	1c7b      	adds	r3, r7, #1
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	eb07 030b 	add.w	r3, r7, fp
 8009ebe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec0:	9b02      	ldr	r3, [sp, #8]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	46a8      	mov	r8, r5
 8009ec8:	9308      	str	r3, [sp, #32]
 8009eca:	4605      	mov	r5, r0
 8009ecc:	9b05      	ldr	r3, [sp, #20]
 8009ece:	9801      	ldr	r0, [sp, #4]
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	f103 3bff 	add.w	fp, r3, #4294967295
 8009ed6:	f7ff fb07 	bl	80094e8 <quorem>
 8009eda:	4641      	mov	r1, r8
 8009edc:	9002      	str	r0, [sp, #8]
 8009ede:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009ee2:	9801      	ldr	r0, [sp, #4]
 8009ee4:	f000 fca2 	bl	800a82c <__mcmp>
 8009ee8:	462a      	mov	r2, r5
 8009eea:	9006      	str	r0, [sp, #24]
 8009eec:	4621      	mov	r1, r4
 8009eee:	4648      	mov	r0, r9
 8009ef0:	f000 fcb8 	bl	800a864 <__mdiff>
 8009ef4:	68c2      	ldr	r2, [r0, #12]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	b9fa      	cbnz	r2, 8009f3a <_dtoa_r+0x942>
 8009efa:	4601      	mov	r1, r0
 8009efc:	9801      	ldr	r0, [sp, #4]
 8009efe:	f000 fc95 	bl	800a82c <__mcmp>
 8009f02:	4602      	mov	r2, r0
 8009f04:	4631      	mov	r1, r6
 8009f06:	4648      	mov	r0, r9
 8009f08:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f0a:	f000 fa0b 	bl	800a324 <_Bfree>
 8009f0e:	9b07      	ldr	r3, [sp, #28]
 8009f10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f12:	9e05      	ldr	r6, [sp, #20]
 8009f14:	ea43 0102 	orr.w	r1, r3, r2
 8009f18:	9b08      	ldr	r3, [sp, #32]
 8009f1a:	4319      	orrs	r1, r3
 8009f1c:	d10f      	bne.n	8009f3e <_dtoa_r+0x946>
 8009f1e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009f22:	d028      	beq.n	8009f76 <_dtoa_r+0x97e>
 8009f24:	9b06      	ldr	r3, [sp, #24]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd02      	ble.n	8009f30 <_dtoa_r+0x938>
 8009f2a:	9b02      	ldr	r3, [sp, #8]
 8009f2c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009f30:	f88b a000 	strb.w	sl, [fp]
 8009f34:	e639      	b.n	8009baa <_dtoa_r+0x5b2>
 8009f36:	4628      	mov	r0, r5
 8009f38:	e7bd      	b.n	8009eb6 <_dtoa_r+0x8be>
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	e7e2      	b.n	8009f04 <_dtoa_r+0x90c>
 8009f3e:	9b06      	ldr	r3, [sp, #24]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	db04      	blt.n	8009f4e <_dtoa_r+0x956>
 8009f44:	9907      	ldr	r1, [sp, #28]
 8009f46:	430b      	orrs	r3, r1
 8009f48:	9908      	ldr	r1, [sp, #32]
 8009f4a:	430b      	orrs	r3, r1
 8009f4c:	d120      	bne.n	8009f90 <_dtoa_r+0x998>
 8009f4e:	2a00      	cmp	r2, #0
 8009f50:	ddee      	ble.n	8009f30 <_dtoa_r+0x938>
 8009f52:	9901      	ldr	r1, [sp, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	4648      	mov	r0, r9
 8009f58:	f000 fbfc 	bl	800a754 <__lshift>
 8009f5c:	4621      	mov	r1, r4
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	f000 fc64 	bl	800a82c <__mcmp>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	dc03      	bgt.n	8009f70 <_dtoa_r+0x978>
 8009f68:	d1e2      	bne.n	8009f30 <_dtoa_r+0x938>
 8009f6a:	f01a 0f01 	tst.w	sl, #1
 8009f6e:	d0df      	beq.n	8009f30 <_dtoa_r+0x938>
 8009f70:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009f74:	d1d9      	bne.n	8009f2a <_dtoa_r+0x932>
 8009f76:	2339      	movs	r3, #57	@ 0x39
 8009f78:	f88b 3000 	strb.w	r3, [fp]
 8009f7c:	4633      	mov	r3, r6
 8009f7e:	461e      	mov	r6, r3
 8009f80:	3b01      	subs	r3, #1
 8009f82:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f86:	2a39      	cmp	r2, #57	@ 0x39
 8009f88:	d053      	beq.n	800a032 <_dtoa_r+0xa3a>
 8009f8a:	3201      	adds	r2, #1
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e60c      	b.n	8009baa <_dtoa_r+0x5b2>
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	dd07      	ble.n	8009fa4 <_dtoa_r+0x9ac>
 8009f94:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009f98:	d0ed      	beq.n	8009f76 <_dtoa_r+0x97e>
 8009f9a:	f10a 0301 	add.w	r3, sl, #1
 8009f9e:	f88b 3000 	strb.w	r3, [fp]
 8009fa2:	e602      	b.n	8009baa <_dtoa_r+0x5b2>
 8009fa4:	9b05      	ldr	r3, [sp, #20]
 8009fa6:	9a05      	ldr	r2, [sp, #20]
 8009fa8:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d029      	beq.n	800a006 <_dtoa_r+0xa0e>
 8009fb2:	9901      	ldr	r1, [sp, #4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	220a      	movs	r2, #10
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f000 f9d5 	bl	800a368 <__multadd>
 8009fbe:	45a8      	cmp	r8, r5
 8009fc0:	9001      	str	r0, [sp, #4]
 8009fc2:	f04f 0300 	mov.w	r3, #0
 8009fc6:	f04f 020a 	mov.w	r2, #10
 8009fca:	4641      	mov	r1, r8
 8009fcc:	4648      	mov	r0, r9
 8009fce:	d107      	bne.n	8009fe0 <_dtoa_r+0x9e8>
 8009fd0:	f000 f9ca 	bl	800a368 <__multadd>
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	9b05      	ldr	r3, [sp, #20]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	9305      	str	r3, [sp, #20]
 8009fde:	e775      	b.n	8009ecc <_dtoa_r+0x8d4>
 8009fe0:	f000 f9c2 	bl	800a368 <__multadd>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	220a      	movs	r2, #10
 8009fec:	4648      	mov	r0, r9
 8009fee:	f000 f9bb 	bl	800a368 <__multadd>
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	e7f0      	b.n	8009fd8 <_dtoa_r+0x9e0>
 8009ff6:	f1bb 0f00 	cmp.w	fp, #0
 8009ffa:	bfcc      	ite	gt
 8009ffc:	465e      	movgt	r6, fp
 8009ffe:	2601      	movle	r6, #1
 800a000:	443e      	add	r6, r7
 800a002:	f04f 0800 	mov.w	r8, #0
 800a006:	9901      	ldr	r1, [sp, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	4648      	mov	r0, r9
 800a00c:	f000 fba2 	bl	800a754 <__lshift>
 800a010:	4621      	mov	r1, r4
 800a012:	9001      	str	r0, [sp, #4]
 800a014:	f000 fc0a 	bl	800a82c <__mcmp>
 800a018:	2800      	cmp	r0, #0
 800a01a:	dcaf      	bgt.n	8009f7c <_dtoa_r+0x984>
 800a01c:	d102      	bne.n	800a024 <_dtoa_r+0xa2c>
 800a01e:	f01a 0f01 	tst.w	sl, #1
 800a022:	d1ab      	bne.n	8009f7c <_dtoa_r+0x984>
 800a024:	4633      	mov	r3, r6
 800a026:	461e      	mov	r6, r3
 800a028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a02c:	2a30      	cmp	r2, #48	@ 0x30
 800a02e:	d0fa      	beq.n	800a026 <_dtoa_r+0xa2e>
 800a030:	e5bb      	b.n	8009baa <_dtoa_r+0x5b2>
 800a032:	429f      	cmp	r7, r3
 800a034:	d1a3      	bne.n	8009f7e <_dtoa_r+0x986>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	3301      	adds	r3, #1
 800a03a:	9304      	str	r3, [sp, #16]
 800a03c:	2331      	movs	r3, #49	@ 0x31
 800a03e:	703b      	strb	r3, [r7, #0]
 800a040:	e5b3      	b.n	8009baa <_dtoa_r+0x5b2>
 800a042:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a044:	4f16      	ldr	r7, [pc, #88]	@ (800a0a0 <_dtoa_r+0xaa8>)
 800a046:	b11b      	cbz	r3, 800a050 <_dtoa_r+0xa58>
 800a048:	f107 0308 	add.w	r3, r7, #8
 800a04c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	4638      	mov	r0, r7
 800a052:	b011      	add	sp, #68	@ 0x44
 800a054:	ecbd 8b02 	vpop	{d8}
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05c:	9b07      	ldr	r3, [sp, #28]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	f77f ae36 	ble.w	8009cd0 <_dtoa_r+0x6d8>
 800a064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a066:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a068:	2001      	movs	r0, #1
 800a06a:	e656      	b.n	8009d1a <_dtoa_r+0x722>
 800a06c:	f1bb 0f00 	cmp.w	fp, #0
 800a070:	f77f aed7 	ble.w	8009e22 <_dtoa_r+0x82a>
 800a074:	463e      	mov	r6, r7
 800a076:	9801      	ldr	r0, [sp, #4]
 800a078:	4621      	mov	r1, r4
 800a07a:	f7ff fa35 	bl	80094e8 <quorem>
 800a07e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a082:	f806 ab01 	strb.w	sl, [r6], #1
 800a086:	1bf2      	subs	r2, r6, r7
 800a088:	4593      	cmp	fp, r2
 800a08a:	ddb4      	ble.n	8009ff6 <_dtoa_r+0x9fe>
 800a08c:	9901      	ldr	r1, [sp, #4]
 800a08e:	2300      	movs	r3, #0
 800a090:	220a      	movs	r2, #10
 800a092:	4648      	mov	r0, r9
 800a094:	f000 f968 	bl	800a368 <__multadd>
 800a098:	9001      	str	r0, [sp, #4]
 800a09a:	e7ec      	b.n	800a076 <_dtoa_r+0xa7e>
 800a09c:	0800d61d 	.word	0x0800d61d
 800a0a0:	0800d5a1 	.word	0x0800d5a1

0800a0a4 <_free_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	d041      	beq.n	800a130 <_free_r+0x8c>
 800a0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b0:	1f0c      	subs	r4, r1, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfb8      	it	lt
 800a0b6:	18e4      	addlt	r4, r4, r3
 800a0b8:	f000 f8e8 	bl	800a28c <__malloc_lock>
 800a0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800a134 <_free_r+0x90>)
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	b933      	cbnz	r3, 800a0d0 <_free_r+0x2c>
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	6014      	str	r4, [r2, #0]
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0cc:	f000 b8e4 	b.w	800a298 <__malloc_unlock>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d908      	bls.n	800a0e6 <_free_r+0x42>
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	1821      	adds	r1, r4, r0
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf01      	itttt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	1809      	addeq	r1, r1, r0
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	e7ed      	b.n	800a0c2 <_free_r+0x1e>
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b10b      	cbz	r3, 800a0f0 <_free_r+0x4c>
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x42>
 800a0f0:	6811      	ldr	r1, [r2, #0]
 800a0f2:	1850      	adds	r0, r2, r1
 800a0f4:	42a0      	cmp	r0, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x6c>
 800a0f8:	6820      	ldr	r0, [r4, #0]
 800a0fa:	4401      	add	r1, r0
 800a0fc:	1850      	adds	r0, r2, r1
 800a0fe:	4283      	cmp	r3, r0
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	d1e0      	bne.n	800a0c6 <_free_r+0x22>
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	6053      	str	r3, [r2, #4]
 800a10a:	4408      	add	r0, r1
 800a10c:	6010      	str	r0, [r2, #0]
 800a10e:	e7da      	b.n	800a0c6 <_free_r+0x22>
 800a110:	d902      	bls.n	800a118 <_free_r+0x74>
 800a112:	230c      	movs	r3, #12
 800a114:	602b      	str	r3, [r5, #0]
 800a116:	e7d6      	b.n	800a0c6 <_free_r+0x22>
 800a118:	6820      	ldr	r0, [r4, #0]
 800a11a:	1821      	adds	r1, r4, r0
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf04      	itt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1809      	addeq	r1, r1, r0
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	6054      	str	r4, [r2, #4]
 800a12e:	e7ca      	b.n	800a0c6 <_free_r+0x22>
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	24000660 	.word	0x24000660

0800a138 <malloc>:
 800a138:	4b02      	ldr	r3, [pc, #8]	@ (800a144 <malloc+0xc>)
 800a13a:	4601      	mov	r1, r0
 800a13c:	6818      	ldr	r0, [r3, #0]
 800a13e:	f000 b825 	b.w	800a18c <_malloc_r>
 800a142:	bf00      	nop
 800a144:	24000020 	.word	0x24000020

0800a148 <sbrk_aligned>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	4e0f      	ldr	r6, [pc, #60]	@ (800a188 <sbrk_aligned+0x40>)
 800a14c:	460c      	mov	r4, r1
 800a14e:	6831      	ldr	r1, [r6, #0]
 800a150:	4605      	mov	r5, r0
 800a152:	b911      	cbnz	r1, 800a15a <sbrk_aligned+0x12>
 800a154:	f001 fdb8 	bl	800bcc8 <_sbrk_r>
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	4621      	mov	r1, r4
 800a15c:	4628      	mov	r0, r5
 800a15e:	f001 fdb3 	bl	800bcc8 <_sbrk_r>
 800a162:	1c43      	adds	r3, r0, #1
 800a164:	d103      	bne.n	800a16e <sbrk_aligned+0x26>
 800a166:	f04f 34ff 	mov.w	r4, #4294967295
 800a16a:	4620      	mov	r0, r4
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	1cc4      	adds	r4, r0, #3
 800a170:	f024 0403 	bic.w	r4, r4, #3
 800a174:	42a0      	cmp	r0, r4
 800a176:	d0f8      	beq.n	800a16a <sbrk_aligned+0x22>
 800a178:	1a21      	subs	r1, r4, r0
 800a17a:	4628      	mov	r0, r5
 800a17c:	f001 fda4 	bl	800bcc8 <_sbrk_r>
 800a180:	3001      	adds	r0, #1
 800a182:	d1f2      	bne.n	800a16a <sbrk_aligned+0x22>
 800a184:	e7ef      	b.n	800a166 <sbrk_aligned+0x1e>
 800a186:	bf00      	nop
 800a188:	2400065c 	.word	0x2400065c

0800a18c <_malloc_r>:
 800a18c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a190:	1ccd      	adds	r5, r1, #3
 800a192:	f025 0503 	bic.w	r5, r5, #3
 800a196:	3508      	adds	r5, #8
 800a198:	2d0c      	cmp	r5, #12
 800a19a:	bf38      	it	cc
 800a19c:	250c      	movcc	r5, #12
 800a19e:	2d00      	cmp	r5, #0
 800a1a0:	4606      	mov	r6, r0
 800a1a2:	db01      	blt.n	800a1a8 <_malloc_r+0x1c>
 800a1a4:	42a9      	cmp	r1, r5
 800a1a6:	d904      	bls.n	800a1b2 <_malloc_r+0x26>
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	6033      	str	r3, [r6, #0]
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a288 <_malloc_r+0xfc>
 800a1b6:	f000 f869 	bl	800a28c <__malloc_lock>
 800a1ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a1be:	461c      	mov	r4, r3
 800a1c0:	bb44      	cbnz	r4, 800a214 <_malloc_r+0x88>
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f7ff ffbf 	bl	800a148 <sbrk_aligned>
 800a1ca:	1c43      	adds	r3, r0, #1
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	d158      	bne.n	800a282 <_malloc_r+0xf6>
 800a1d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a1d4:	4627      	mov	r7, r4
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	d143      	bne.n	800a262 <_malloc_r+0xd6>
 800a1da:	2c00      	cmp	r4, #0
 800a1dc:	d04b      	beq.n	800a276 <_malloc_r+0xea>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	eb04 0903 	add.w	r9, r4, r3
 800a1e8:	f001 fd6e 	bl	800bcc8 <_sbrk_r>
 800a1ec:	4581      	cmp	r9, r0
 800a1ee:	d142      	bne.n	800a276 <_malloc_r+0xea>
 800a1f0:	6821      	ldr	r1, [r4, #0]
 800a1f2:	1a6d      	subs	r5, r5, r1
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7ff ffa6 	bl	800a148 <sbrk_aligned>
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d03a      	beq.n	800a276 <_malloc_r+0xea>
 800a200:	6823      	ldr	r3, [r4, #0]
 800a202:	442b      	add	r3, r5
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	f8d8 3000 	ldr.w	r3, [r8]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	bb62      	cbnz	r2, 800a268 <_malloc_r+0xdc>
 800a20e:	f8c8 7000 	str.w	r7, [r8]
 800a212:	e00f      	b.n	800a234 <_malloc_r+0xa8>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	1b52      	subs	r2, r2, r5
 800a218:	d420      	bmi.n	800a25c <_malloc_r+0xd0>
 800a21a:	2a0b      	cmp	r2, #11
 800a21c:	d917      	bls.n	800a24e <_malloc_r+0xc2>
 800a21e:	1961      	adds	r1, r4, r5
 800a220:	42a3      	cmp	r3, r4
 800a222:	6025      	str	r5, [r4, #0]
 800a224:	bf18      	it	ne
 800a226:	6059      	strne	r1, [r3, #4]
 800a228:	6863      	ldr	r3, [r4, #4]
 800a22a:	bf08      	it	eq
 800a22c:	f8c8 1000 	streq.w	r1, [r8]
 800a230:	5162      	str	r2, [r4, r5]
 800a232:	604b      	str	r3, [r1, #4]
 800a234:	4630      	mov	r0, r6
 800a236:	f000 f82f 	bl	800a298 <__malloc_unlock>
 800a23a:	f104 000b 	add.w	r0, r4, #11
 800a23e:	1d23      	adds	r3, r4, #4
 800a240:	f020 0007 	bic.w	r0, r0, #7
 800a244:	1ac2      	subs	r2, r0, r3
 800a246:	bf1c      	itt	ne
 800a248:	1a1b      	subne	r3, r3, r0
 800a24a:	50a3      	strne	r3, [r4, r2]
 800a24c:	e7af      	b.n	800a1ae <_malloc_r+0x22>
 800a24e:	6862      	ldr	r2, [r4, #4]
 800a250:	42a3      	cmp	r3, r4
 800a252:	bf0c      	ite	eq
 800a254:	f8c8 2000 	streq.w	r2, [r8]
 800a258:	605a      	strne	r2, [r3, #4]
 800a25a:	e7eb      	b.n	800a234 <_malloc_r+0xa8>
 800a25c:	4623      	mov	r3, r4
 800a25e:	6864      	ldr	r4, [r4, #4]
 800a260:	e7ae      	b.n	800a1c0 <_malloc_r+0x34>
 800a262:	463c      	mov	r4, r7
 800a264:	687f      	ldr	r7, [r7, #4]
 800a266:	e7b6      	b.n	800a1d6 <_malloc_r+0x4a>
 800a268:	461a      	mov	r2, r3
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d1fb      	bne.n	800a268 <_malloc_r+0xdc>
 800a270:	2300      	movs	r3, #0
 800a272:	6053      	str	r3, [r2, #4]
 800a274:	e7de      	b.n	800a234 <_malloc_r+0xa8>
 800a276:	230c      	movs	r3, #12
 800a278:	6033      	str	r3, [r6, #0]
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 f80c 	bl	800a298 <__malloc_unlock>
 800a280:	e794      	b.n	800a1ac <_malloc_r+0x20>
 800a282:	6005      	str	r5, [r0, #0]
 800a284:	e7d6      	b.n	800a234 <_malloc_r+0xa8>
 800a286:	bf00      	nop
 800a288:	24000660 	.word	0x24000660

0800a28c <__malloc_lock>:
 800a28c:	4801      	ldr	r0, [pc, #4]	@ (800a294 <__malloc_lock+0x8>)
 800a28e:	f7ff b922 	b.w	80094d6 <__retarget_lock_acquire_recursive>
 800a292:	bf00      	nop
 800a294:	24000658 	.word	0x24000658

0800a298 <__malloc_unlock>:
 800a298:	4801      	ldr	r0, [pc, #4]	@ (800a2a0 <__malloc_unlock+0x8>)
 800a29a:	f7ff b91d 	b.w	80094d8 <__retarget_lock_release_recursive>
 800a29e:	bf00      	nop
 800a2a0:	24000658 	.word	0x24000658

0800a2a4 <_Balloc>:
 800a2a4:	b570      	push	{r4, r5, r6, lr}
 800a2a6:	69c6      	ldr	r6, [r0, #28]
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	b976      	cbnz	r6, 800a2cc <_Balloc+0x28>
 800a2ae:	2010      	movs	r0, #16
 800a2b0:	f7ff ff42 	bl	800a138 <malloc>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	61e0      	str	r0, [r4, #28]
 800a2b8:	b920      	cbnz	r0, 800a2c4 <_Balloc+0x20>
 800a2ba:	4b18      	ldr	r3, [pc, #96]	@ (800a31c <_Balloc+0x78>)
 800a2bc:	4818      	ldr	r0, [pc, #96]	@ (800a320 <_Balloc+0x7c>)
 800a2be:	216b      	movs	r1, #107	@ 0x6b
 800a2c0:	f001 fd2a 	bl	800bd18 <__assert_func>
 800a2c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c8:	6006      	str	r6, [r0, #0]
 800a2ca:	60c6      	str	r6, [r0, #12]
 800a2cc:	69e6      	ldr	r6, [r4, #28]
 800a2ce:	68f3      	ldr	r3, [r6, #12]
 800a2d0:	b183      	cbz	r3, 800a2f4 <_Balloc+0x50>
 800a2d2:	69e3      	ldr	r3, [r4, #28]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2da:	b9b8      	cbnz	r0, 800a30c <_Balloc+0x68>
 800a2dc:	2101      	movs	r1, #1
 800a2de:	fa01 f605 	lsl.w	r6, r1, r5
 800a2e2:	1d72      	adds	r2, r6, #5
 800a2e4:	0092      	lsls	r2, r2, #2
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f001 fd34 	bl	800bd54 <_calloc_r>
 800a2ec:	b160      	cbz	r0, 800a308 <_Balloc+0x64>
 800a2ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2f2:	e00e      	b.n	800a312 <_Balloc+0x6e>
 800a2f4:	2221      	movs	r2, #33	@ 0x21
 800a2f6:	2104      	movs	r1, #4
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f001 fd2b 	bl	800bd54 <_calloc_r>
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	60f0      	str	r0, [r6, #12]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e4      	bne.n	800a2d2 <_Balloc+0x2e>
 800a308:	2000      	movs	r0, #0
 800a30a:	bd70      	pop	{r4, r5, r6, pc}
 800a30c:	6802      	ldr	r2, [r0, #0]
 800a30e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a312:	2300      	movs	r3, #0
 800a314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a318:	e7f7      	b.n	800a30a <_Balloc+0x66>
 800a31a:	bf00      	nop
 800a31c:	0800d5ae 	.word	0x0800d5ae
 800a320:	0800d62e 	.word	0x0800d62e

0800a324 <_Bfree>:
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	69c6      	ldr	r6, [r0, #28]
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b976      	cbnz	r6, 800a34c <_Bfree+0x28>
 800a32e:	2010      	movs	r0, #16
 800a330:	f7ff ff02 	bl	800a138 <malloc>
 800a334:	4602      	mov	r2, r0
 800a336:	61e8      	str	r0, [r5, #28]
 800a338:	b920      	cbnz	r0, 800a344 <_Bfree+0x20>
 800a33a:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <_Bfree+0x3c>)
 800a33c:	4809      	ldr	r0, [pc, #36]	@ (800a364 <_Bfree+0x40>)
 800a33e:	218f      	movs	r1, #143	@ 0x8f
 800a340:	f001 fcea 	bl	800bd18 <__assert_func>
 800a344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a348:	6006      	str	r6, [r0, #0]
 800a34a:	60c6      	str	r6, [r0, #12]
 800a34c:	b13c      	cbz	r4, 800a35e <_Bfree+0x3a>
 800a34e:	69eb      	ldr	r3, [r5, #28]
 800a350:	6862      	ldr	r2, [r4, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a358:	6021      	str	r1, [r4, #0]
 800a35a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a35e:	bd70      	pop	{r4, r5, r6, pc}
 800a360:	0800d5ae 	.word	0x0800d5ae
 800a364:	0800d62e 	.word	0x0800d62e

0800a368 <__multadd>:
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	690d      	ldr	r5, [r1, #16]
 800a36e:	4607      	mov	r7, r0
 800a370:	460c      	mov	r4, r1
 800a372:	461e      	mov	r6, r3
 800a374:	f101 0c14 	add.w	ip, r1, #20
 800a378:	2000      	movs	r0, #0
 800a37a:	f8dc 3000 	ldr.w	r3, [ip]
 800a37e:	b299      	uxth	r1, r3
 800a380:	fb02 6101 	mla	r1, r2, r1, r6
 800a384:	0c1e      	lsrs	r6, r3, #16
 800a386:	0c0b      	lsrs	r3, r1, #16
 800a388:	fb02 3306 	mla	r3, r2, r6, r3
 800a38c:	b289      	uxth	r1, r1
 800a38e:	3001      	adds	r0, #1
 800a390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a394:	4285      	cmp	r5, r0
 800a396:	f84c 1b04 	str.w	r1, [ip], #4
 800a39a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a39e:	dcec      	bgt.n	800a37a <__multadd+0x12>
 800a3a0:	b30e      	cbz	r6, 800a3e6 <__multadd+0x7e>
 800a3a2:	68a3      	ldr	r3, [r4, #8]
 800a3a4:	42ab      	cmp	r3, r5
 800a3a6:	dc19      	bgt.n	800a3dc <__multadd+0x74>
 800a3a8:	6861      	ldr	r1, [r4, #4]
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	3101      	adds	r1, #1
 800a3ae:	f7ff ff79 	bl	800a2a4 <_Balloc>
 800a3b2:	4680      	mov	r8, r0
 800a3b4:	b928      	cbnz	r0, 800a3c2 <__multadd+0x5a>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ec <__multadd+0x84>)
 800a3ba:	480d      	ldr	r0, [pc, #52]	@ (800a3f0 <__multadd+0x88>)
 800a3bc:	21ba      	movs	r1, #186	@ 0xba
 800a3be:	f001 fcab 	bl	800bd18 <__assert_func>
 800a3c2:	6922      	ldr	r2, [r4, #16]
 800a3c4:	3202      	adds	r2, #2
 800a3c6:	f104 010c 	add.w	r1, r4, #12
 800a3ca:	0092      	lsls	r2, r2, #2
 800a3cc:	300c      	adds	r0, #12
 800a3ce:	f001 fc8b 	bl	800bce8 <memcpy>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	f7ff ffa5 	bl	800a324 <_Bfree>
 800a3da:	4644      	mov	r4, r8
 800a3dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	615e      	str	r6, [r3, #20]
 800a3e4:	6125      	str	r5, [r4, #16]
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3ec:	0800d61d 	.word	0x0800d61d
 800a3f0:	0800d62e 	.word	0x0800d62e

0800a3f4 <__s2b>:
 800a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	4615      	mov	r5, r2
 800a3fc:	461f      	mov	r7, r3
 800a3fe:	2209      	movs	r2, #9
 800a400:	3308      	adds	r3, #8
 800a402:	4606      	mov	r6, r0
 800a404:	fb93 f3f2 	sdiv	r3, r3, r2
 800a408:	2100      	movs	r1, #0
 800a40a:	2201      	movs	r2, #1
 800a40c:	429a      	cmp	r2, r3
 800a40e:	db09      	blt.n	800a424 <__s2b+0x30>
 800a410:	4630      	mov	r0, r6
 800a412:	f7ff ff47 	bl	800a2a4 <_Balloc>
 800a416:	b940      	cbnz	r0, 800a42a <__s2b+0x36>
 800a418:	4602      	mov	r2, r0
 800a41a:	4b19      	ldr	r3, [pc, #100]	@ (800a480 <__s2b+0x8c>)
 800a41c:	4819      	ldr	r0, [pc, #100]	@ (800a484 <__s2b+0x90>)
 800a41e:	21d3      	movs	r1, #211	@ 0xd3
 800a420:	f001 fc7a 	bl	800bd18 <__assert_func>
 800a424:	0052      	lsls	r2, r2, #1
 800a426:	3101      	adds	r1, #1
 800a428:	e7f0      	b.n	800a40c <__s2b+0x18>
 800a42a:	9b08      	ldr	r3, [sp, #32]
 800a42c:	6143      	str	r3, [r0, #20]
 800a42e:	2d09      	cmp	r5, #9
 800a430:	f04f 0301 	mov.w	r3, #1
 800a434:	6103      	str	r3, [r0, #16]
 800a436:	dd16      	ble.n	800a466 <__s2b+0x72>
 800a438:	f104 0909 	add.w	r9, r4, #9
 800a43c:	46c8      	mov	r8, r9
 800a43e:	442c      	add	r4, r5
 800a440:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a444:	4601      	mov	r1, r0
 800a446:	3b30      	subs	r3, #48	@ 0x30
 800a448:	220a      	movs	r2, #10
 800a44a:	4630      	mov	r0, r6
 800a44c:	f7ff ff8c 	bl	800a368 <__multadd>
 800a450:	45a0      	cmp	r8, r4
 800a452:	d1f5      	bne.n	800a440 <__s2b+0x4c>
 800a454:	f1a5 0408 	sub.w	r4, r5, #8
 800a458:	444c      	add	r4, r9
 800a45a:	1b2d      	subs	r5, r5, r4
 800a45c:	1963      	adds	r3, r4, r5
 800a45e:	42bb      	cmp	r3, r7
 800a460:	db04      	blt.n	800a46c <__s2b+0x78>
 800a462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a466:	340a      	adds	r4, #10
 800a468:	2509      	movs	r5, #9
 800a46a:	e7f6      	b.n	800a45a <__s2b+0x66>
 800a46c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a470:	4601      	mov	r1, r0
 800a472:	3b30      	subs	r3, #48	@ 0x30
 800a474:	220a      	movs	r2, #10
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ff76 	bl	800a368 <__multadd>
 800a47c:	e7ee      	b.n	800a45c <__s2b+0x68>
 800a47e:	bf00      	nop
 800a480:	0800d61d 	.word	0x0800d61d
 800a484:	0800d62e 	.word	0x0800d62e

0800a488 <__hi0bits>:
 800a488:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a48c:	4603      	mov	r3, r0
 800a48e:	bf36      	itet	cc
 800a490:	0403      	lslcc	r3, r0, #16
 800a492:	2000      	movcs	r0, #0
 800a494:	2010      	movcc	r0, #16
 800a496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a49a:	bf3c      	itt	cc
 800a49c:	021b      	lslcc	r3, r3, #8
 800a49e:	3008      	addcc	r0, #8
 800a4a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4a4:	bf3c      	itt	cc
 800a4a6:	011b      	lslcc	r3, r3, #4
 800a4a8:	3004      	addcc	r0, #4
 800a4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4ae:	bf3c      	itt	cc
 800a4b0:	009b      	lslcc	r3, r3, #2
 800a4b2:	3002      	addcc	r0, #2
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	db05      	blt.n	800a4c4 <__hi0bits+0x3c>
 800a4b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a4bc:	f100 0001 	add.w	r0, r0, #1
 800a4c0:	bf08      	it	eq
 800a4c2:	2020      	moveq	r0, #32
 800a4c4:	4770      	bx	lr

0800a4c6 <__lo0bits>:
 800a4c6:	6803      	ldr	r3, [r0, #0]
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	f013 0007 	ands.w	r0, r3, #7
 800a4ce:	d00b      	beq.n	800a4e8 <__lo0bits+0x22>
 800a4d0:	07d9      	lsls	r1, r3, #31
 800a4d2:	d421      	bmi.n	800a518 <__lo0bits+0x52>
 800a4d4:	0798      	lsls	r0, r3, #30
 800a4d6:	bf49      	itett	mi
 800a4d8:	085b      	lsrmi	r3, r3, #1
 800a4da:	089b      	lsrpl	r3, r3, #2
 800a4dc:	2001      	movmi	r0, #1
 800a4de:	6013      	strmi	r3, [r2, #0]
 800a4e0:	bf5c      	itt	pl
 800a4e2:	6013      	strpl	r3, [r2, #0]
 800a4e4:	2002      	movpl	r0, #2
 800a4e6:	4770      	bx	lr
 800a4e8:	b299      	uxth	r1, r3
 800a4ea:	b909      	cbnz	r1, 800a4f0 <__lo0bits+0x2a>
 800a4ec:	0c1b      	lsrs	r3, r3, #16
 800a4ee:	2010      	movs	r0, #16
 800a4f0:	b2d9      	uxtb	r1, r3
 800a4f2:	b909      	cbnz	r1, 800a4f8 <__lo0bits+0x32>
 800a4f4:	3008      	adds	r0, #8
 800a4f6:	0a1b      	lsrs	r3, r3, #8
 800a4f8:	0719      	lsls	r1, r3, #28
 800a4fa:	bf04      	itt	eq
 800a4fc:	091b      	lsreq	r3, r3, #4
 800a4fe:	3004      	addeq	r0, #4
 800a500:	0799      	lsls	r1, r3, #30
 800a502:	bf04      	itt	eq
 800a504:	089b      	lsreq	r3, r3, #2
 800a506:	3002      	addeq	r0, #2
 800a508:	07d9      	lsls	r1, r3, #31
 800a50a:	d403      	bmi.n	800a514 <__lo0bits+0x4e>
 800a50c:	085b      	lsrs	r3, r3, #1
 800a50e:	f100 0001 	add.w	r0, r0, #1
 800a512:	d003      	beq.n	800a51c <__lo0bits+0x56>
 800a514:	6013      	str	r3, [r2, #0]
 800a516:	4770      	bx	lr
 800a518:	2000      	movs	r0, #0
 800a51a:	4770      	bx	lr
 800a51c:	2020      	movs	r0, #32
 800a51e:	4770      	bx	lr

0800a520 <__i2b>:
 800a520:	b510      	push	{r4, lr}
 800a522:	460c      	mov	r4, r1
 800a524:	2101      	movs	r1, #1
 800a526:	f7ff febd 	bl	800a2a4 <_Balloc>
 800a52a:	4602      	mov	r2, r0
 800a52c:	b928      	cbnz	r0, 800a53a <__i2b+0x1a>
 800a52e:	4b05      	ldr	r3, [pc, #20]	@ (800a544 <__i2b+0x24>)
 800a530:	4805      	ldr	r0, [pc, #20]	@ (800a548 <__i2b+0x28>)
 800a532:	f240 1145 	movw	r1, #325	@ 0x145
 800a536:	f001 fbef 	bl	800bd18 <__assert_func>
 800a53a:	2301      	movs	r3, #1
 800a53c:	6144      	str	r4, [r0, #20]
 800a53e:	6103      	str	r3, [r0, #16]
 800a540:	bd10      	pop	{r4, pc}
 800a542:	bf00      	nop
 800a544:	0800d61d 	.word	0x0800d61d
 800a548:	0800d62e 	.word	0x0800d62e

0800a54c <__multiply>:
 800a54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a550:	4614      	mov	r4, r2
 800a552:	690a      	ldr	r2, [r1, #16]
 800a554:	6923      	ldr	r3, [r4, #16]
 800a556:	429a      	cmp	r2, r3
 800a558:	bfa8      	it	ge
 800a55a:	4623      	movge	r3, r4
 800a55c:	460f      	mov	r7, r1
 800a55e:	bfa4      	itt	ge
 800a560:	460c      	movge	r4, r1
 800a562:	461f      	movge	r7, r3
 800a564:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a568:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	6861      	ldr	r1, [r4, #4]
 800a570:	eb0a 0609 	add.w	r6, sl, r9
 800a574:	42b3      	cmp	r3, r6
 800a576:	b085      	sub	sp, #20
 800a578:	bfb8      	it	lt
 800a57a:	3101      	addlt	r1, #1
 800a57c:	f7ff fe92 	bl	800a2a4 <_Balloc>
 800a580:	b930      	cbnz	r0, 800a590 <__multiply+0x44>
 800a582:	4602      	mov	r2, r0
 800a584:	4b44      	ldr	r3, [pc, #272]	@ (800a698 <__multiply+0x14c>)
 800a586:	4845      	ldr	r0, [pc, #276]	@ (800a69c <__multiply+0x150>)
 800a588:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a58c:	f001 fbc4 	bl	800bd18 <__assert_func>
 800a590:	f100 0514 	add.w	r5, r0, #20
 800a594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a598:	462b      	mov	r3, r5
 800a59a:	2200      	movs	r2, #0
 800a59c:	4543      	cmp	r3, r8
 800a59e:	d321      	bcc.n	800a5e4 <__multiply+0x98>
 800a5a0:	f107 0114 	add.w	r1, r7, #20
 800a5a4:	f104 0214 	add.w	r2, r4, #20
 800a5a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a5ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a5b0:	9302      	str	r3, [sp, #8]
 800a5b2:	1b13      	subs	r3, r2, r4
 800a5b4:	3b15      	subs	r3, #21
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	f104 0715 	add.w	r7, r4, #21
 800a5c0:	42ba      	cmp	r2, r7
 800a5c2:	bf38      	it	cc
 800a5c4:	2304      	movcc	r3, #4
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	9b02      	ldr	r3, [sp, #8]
 800a5ca:	9103      	str	r1, [sp, #12]
 800a5cc:	428b      	cmp	r3, r1
 800a5ce:	d80c      	bhi.n	800a5ea <__multiply+0x9e>
 800a5d0:	2e00      	cmp	r6, #0
 800a5d2:	dd03      	ble.n	800a5dc <__multiply+0x90>
 800a5d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d05b      	beq.n	800a694 <__multiply+0x148>
 800a5dc:	6106      	str	r6, [r0, #16]
 800a5de:	b005      	add	sp, #20
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	f843 2b04 	str.w	r2, [r3], #4
 800a5e8:	e7d8      	b.n	800a59c <__multiply+0x50>
 800a5ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800a5ee:	f1ba 0f00 	cmp.w	sl, #0
 800a5f2:	d024      	beq.n	800a63e <__multiply+0xf2>
 800a5f4:	f104 0e14 	add.w	lr, r4, #20
 800a5f8:	46a9      	mov	r9, r5
 800a5fa:	f04f 0c00 	mov.w	ip, #0
 800a5fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a602:	f8d9 3000 	ldr.w	r3, [r9]
 800a606:	fa1f fb87 	uxth.w	fp, r7
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a610:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a614:	f8d9 7000 	ldr.w	r7, [r9]
 800a618:	4463      	add	r3, ip
 800a61a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a61e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a622:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a62c:	4572      	cmp	r2, lr
 800a62e:	f849 3b04 	str.w	r3, [r9], #4
 800a632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a636:	d8e2      	bhi.n	800a5fe <__multiply+0xb2>
 800a638:	9b01      	ldr	r3, [sp, #4]
 800a63a:	f845 c003 	str.w	ip, [r5, r3]
 800a63e:	9b03      	ldr	r3, [sp, #12]
 800a640:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a644:	3104      	adds	r1, #4
 800a646:	f1b9 0f00 	cmp.w	r9, #0
 800a64a:	d021      	beq.n	800a690 <__multiply+0x144>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	f104 0c14 	add.w	ip, r4, #20
 800a652:	46ae      	mov	lr, r5
 800a654:	f04f 0a00 	mov.w	sl, #0
 800a658:	f8bc b000 	ldrh.w	fp, [ip]
 800a65c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a660:	fb09 770b 	mla	r7, r9, fp, r7
 800a664:	4457      	add	r7, sl
 800a666:	b29b      	uxth	r3, r3
 800a668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a66c:	f84e 3b04 	str.w	r3, [lr], #4
 800a670:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a678:	f8be 3000 	ldrh.w	r3, [lr]
 800a67c:	fb09 330a 	mla	r3, r9, sl, r3
 800a680:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a684:	4562      	cmp	r2, ip
 800a686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a68a:	d8e5      	bhi.n	800a658 <__multiply+0x10c>
 800a68c:	9f01      	ldr	r7, [sp, #4]
 800a68e:	51eb      	str	r3, [r5, r7]
 800a690:	3504      	adds	r5, #4
 800a692:	e799      	b.n	800a5c8 <__multiply+0x7c>
 800a694:	3e01      	subs	r6, #1
 800a696:	e79b      	b.n	800a5d0 <__multiply+0x84>
 800a698:	0800d61d 	.word	0x0800d61d
 800a69c:	0800d62e 	.word	0x0800d62e

0800a6a0 <__pow5mult>:
 800a6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	4615      	mov	r5, r2
 800a6a6:	f012 0203 	ands.w	r2, r2, #3
 800a6aa:	4607      	mov	r7, r0
 800a6ac:	460e      	mov	r6, r1
 800a6ae:	d007      	beq.n	800a6c0 <__pow5mult+0x20>
 800a6b0:	4c25      	ldr	r4, [pc, #148]	@ (800a748 <__pow5mult+0xa8>)
 800a6b2:	3a01      	subs	r2, #1
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6ba:	f7ff fe55 	bl	800a368 <__multadd>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	10ad      	asrs	r5, r5, #2
 800a6c2:	d03d      	beq.n	800a740 <__pow5mult+0xa0>
 800a6c4:	69fc      	ldr	r4, [r7, #28]
 800a6c6:	b97c      	cbnz	r4, 800a6e8 <__pow5mult+0x48>
 800a6c8:	2010      	movs	r0, #16
 800a6ca:	f7ff fd35 	bl	800a138 <malloc>
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	61f8      	str	r0, [r7, #28]
 800a6d2:	b928      	cbnz	r0, 800a6e0 <__pow5mult+0x40>
 800a6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a74c <__pow5mult+0xac>)
 800a6d6:	481e      	ldr	r0, [pc, #120]	@ (800a750 <__pow5mult+0xb0>)
 800a6d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a6dc:	f001 fb1c 	bl	800bd18 <__assert_func>
 800a6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a6e4:	6004      	str	r4, [r0, #0]
 800a6e6:	60c4      	str	r4, [r0, #12]
 800a6e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a6f0:	b94c      	cbnz	r4, 800a706 <__pow5mult+0x66>
 800a6f2:	f240 2171 	movw	r1, #625	@ 0x271
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	f7ff ff12 	bl	800a520 <__i2b>
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a702:	4604      	mov	r4, r0
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	07eb      	lsls	r3, r5, #31
 800a70c:	d50a      	bpl.n	800a724 <__pow5mult+0x84>
 800a70e:	4631      	mov	r1, r6
 800a710:	4622      	mov	r2, r4
 800a712:	4638      	mov	r0, r7
 800a714:	f7ff ff1a 	bl	800a54c <__multiply>
 800a718:	4631      	mov	r1, r6
 800a71a:	4680      	mov	r8, r0
 800a71c:	4638      	mov	r0, r7
 800a71e:	f7ff fe01 	bl	800a324 <_Bfree>
 800a722:	4646      	mov	r6, r8
 800a724:	106d      	asrs	r5, r5, #1
 800a726:	d00b      	beq.n	800a740 <__pow5mult+0xa0>
 800a728:	6820      	ldr	r0, [r4, #0]
 800a72a:	b938      	cbnz	r0, 800a73c <__pow5mult+0x9c>
 800a72c:	4622      	mov	r2, r4
 800a72e:	4621      	mov	r1, r4
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ff0b 	bl	800a54c <__multiply>
 800a736:	6020      	str	r0, [r4, #0]
 800a738:	f8c0 9000 	str.w	r9, [r0]
 800a73c:	4604      	mov	r4, r0
 800a73e:	e7e4      	b.n	800a70a <__pow5mult+0x6a>
 800a740:	4630      	mov	r0, r6
 800a742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a746:	bf00      	nop
 800a748:	0800d688 	.word	0x0800d688
 800a74c:	0800d5ae 	.word	0x0800d5ae
 800a750:	0800d62e 	.word	0x0800d62e

0800a754 <__lshift>:
 800a754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a758:	460c      	mov	r4, r1
 800a75a:	6849      	ldr	r1, [r1, #4]
 800a75c:	6923      	ldr	r3, [r4, #16]
 800a75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a762:	68a3      	ldr	r3, [r4, #8]
 800a764:	4607      	mov	r7, r0
 800a766:	4691      	mov	r9, r2
 800a768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a76c:	f108 0601 	add.w	r6, r8, #1
 800a770:	42b3      	cmp	r3, r6
 800a772:	db0b      	blt.n	800a78c <__lshift+0x38>
 800a774:	4638      	mov	r0, r7
 800a776:	f7ff fd95 	bl	800a2a4 <_Balloc>
 800a77a:	4605      	mov	r5, r0
 800a77c:	b948      	cbnz	r0, 800a792 <__lshift+0x3e>
 800a77e:	4602      	mov	r2, r0
 800a780:	4b28      	ldr	r3, [pc, #160]	@ (800a824 <__lshift+0xd0>)
 800a782:	4829      	ldr	r0, [pc, #164]	@ (800a828 <__lshift+0xd4>)
 800a784:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a788:	f001 fac6 	bl	800bd18 <__assert_func>
 800a78c:	3101      	adds	r1, #1
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	e7ee      	b.n	800a770 <__lshift+0x1c>
 800a792:	2300      	movs	r3, #0
 800a794:	f100 0114 	add.w	r1, r0, #20
 800a798:	f100 0210 	add.w	r2, r0, #16
 800a79c:	4618      	mov	r0, r3
 800a79e:	4553      	cmp	r3, sl
 800a7a0:	db33      	blt.n	800a80a <__lshift+0xb6>
 800a7a2:	6920      	ldr	r0, [r4, #16]
 800a7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7a8:	f104 0314 	add.w	r3, r4, #20
 800a7ac:	f019 091f 	ands.w	r9, r9, #31
 800a7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7b8:	d02b      	beq.n	800a812 <__lshift+0xbe>
 800a7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800a7be:	468a      	mov	sl, r1
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	6818      	ldr	r0, [r3, #0]
 800a7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800a7c8:	4310      	orrs	r0, r2
 800a7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d2:	459c      	cmp	ip, r3
 800a7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800a7d8:	d8f3      	bhi.n	800a7c2 <__lshift+0x6e>
 800a7da:	ebac 0304 	sub.w	r3, ip, r4
 800a7de:	3b15      	subs	r3, #21
 800a7e0:	f023 0303 	bic.w	r3, r3, #3
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	f104 0015 	add.w	r0, r4, #21
 800a7ea:	4584      	cmp	ip, r0
 800a7ec:	bf38      	it	cc
 800a7ee:	2304      	movcc	r3, #4
 800a7f0:	50ca      	str	r2, [r1, r3]
 800a7f2:	b10a      	cbz	r2, 800a7f8 <__lshift+0xa4>
 800a7f4:	f108 0602 	add.w	r6, r8, #2
 800a7f8:	3e01      	subs	r6, #1
 800a7fa:	4638      	mov	r0, r7
 800a7fc:	612e      	str	r6, [r5, #16]
 800a7fe:	4621      	mov	r1, r4
 800a800:	f7ff fd90 	bl	800a324 <_Bfree>
 800a804:	4628      	mov	r0, r5
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a80e:	3301      	adds	r3, #1
 800a810:	e7c5      	b.n	800a79e <__lshift+0x4a>
 800a812:	3904      	subs	r1, #4
 800a814:	f853 2b04 	ldr.w	r2, [r3], #4
 800a818:	f841 2f04 	str.w	r2, [r1, #4]!
 800a81c:	459c      	cmp	ip, r3
 800a81e:	d8f9      	bhi.n	800a814 <__lshift+0xc0>
 800a820:	e7ea      	b.n	800a7f8 <__lshift+0xa4>
 800a822:	bf00      	nop
 800a824:	0800d61d 	.word	0x0800d61d
 800a828:	0800d62e 	.word	0x0800d62e

0800a82c <__mcmp>:
 800a82c:	690a      	ldr	r2, [r1, #16]
 800a82e:	4603      	mov	r3, r0
 800a830:	6900      	ldr	r0, [r0, #16]
 800a832:	1a80      	subs	r0, r0, r2
 800a834:	b530      	push	{r4, r5, lr}
 800a836:	d10e      	bne.n	800a856 <__mcmp+0x2a>
 800a838:	3314      	adds	r3, #20
 800a83a:	3114      	adds	r1, #20
 800a83c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a840:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a84c:	4295      	cmp	r5, r2
 800a84e:	d003      	beq.n	800a858 <__mcmp+0x2c>
 800a850:	d205      	bcs.n	800a85e <__mcmp+0x32>
 800a852:	f04f 30ff 	mov.w	r0, #4294967295
 800a856:	bd30      	pop	{r4, r5, pc}
 800a858:	42a3      	cmp	r3, r4
 800a85a:	d3f3      	bcc.n	800a844 <__mcmp+0x18>
 800a85c:	e7fb      	b.n	800a856 <__mcmp+0x2a>
 800a85e:	2001      	movs	r0, #1
 800a860:	e7f9      	b.n	800a856 <__mcmp+0x2a>
	...

0800a864 <__mdiff>:
 800a864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a868:	4689      	mov	r9, r1
 800a86a:	4606      	mov	r6, r0
 800a86c:	4611      	mov	r1, r2
 800a86e:	4648      	mov	r0, r9
 800a870:	4614      	mov	r4, r2
 800a872:	f7ff ffdb 	bl	800a82c <__mcmp>
 800a876:	1e05      	subs	r5, r0, #0
 800a878:	d112      	bne.n	800a8a0 <__mdiff+0x3c>
 800a87a:	4629      	mov	r1, r5
 800a87c:	4630      	mov	r0, r6
 800a87e:	f7ff fd11 	bl	800a2a4 <_Balloc>
 800a882:	4602      	mov	r2, r0
 800a884:	b928      	cbnz	r0, 800a892 <__mdiff+0x2e>
 800a886:	4b3f      	ldr	r3, [pc, #252]	@ (800a984 <__mdiff+0x120>)
 800a888:	f240 2137 	movw	r1, #567	@ 0x237
 800a88c:	483e      	ldr	r0, [pc, #248]	@ (800a988 <__mdiff+0x124>)
 800a88e:	f001 fa43 	bl	800bd18 <__assert_func>
 800a892:	2301      	movs	r3, #1
 800a894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a898:	4610      	mov	r0, r2
 800a89a:	b003      	add	sp, #12
 800a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	bfbc      	itt	lt
 800a8a2:	464b      	movlt	r3, r9
 800a8a4:	46a1      	movlt	r9, r4
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8ac:	bfba      	itte	lt
 800a8ae:	461c      	movlt	r4, r3
 800a8b0:	2501      	movlt	r5, #1
 800a8b2:	2500      	movge	r5, #0
 800a8b4:	f7ff fcf6 	bl	800a2a4 <_Balloc>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	b918      	cbnz	r0, 800a8c4 <__mdiff+0x60>
 800a8bc:	4b31      	ldr	r3, [pc, #196]	@ (800a984 <__mdiff+0x120>)
 800a8be:	f240 2145 	movw	r1, #581	@ 0x245
 800a8c2:	e7e3      	b.n	800a88c <__mdiff+0x28>
 800a8c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a8c8:	6926      	ldr	r6, [r4, #16]
 800a8ca:	60c5      	str	r5, [r0, #12]
 800a8cc:	f109 0310 	add.w	r3, r9, #16
 800a8d0:	f109 0514 	add.w	r5, r9, #20
 800a8d4:	f104 0e14 	add.w	lr, r4, #20
 800a8d8:	f100 0b14 	add.w	fp, r0, #20
 800a8dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a8e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	46d9      	mov	r9, fp
 800a8e8:	f04f 0c00 	mov.w	ip, #0
 800a8ec:	9b01      	ldr	r3, [sp, #4]
 800a8ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a8f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a8f6:	9301      	str	r3, [sp, #4]
 800a8f8:	fa1f f38a 	uxth.w	r3, sl
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	b283      	uxth	r3, r0
 800a900:	1acb      	subs	r3, r1, r3
 800a902:	0c00      	lsrs	r0, r0, #16
 800a904:	4463      	add	r3, ip
 800a906:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a90a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a914:	4576      	cmp	r6, lr
 800a916:	f849 3b04 	str.w	r3, [r9], #4
 800a91a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a91e:	d8e5      	bhi.n	800a8ec <__mdiff+0x88>
 800a920:	1b33      	subs	r3, r6, r4
 800a922:	3b15      	subs	r3, #21
 800a924:	f023 0303 	bic.w	r3, r3, #3
 800a928:	3415      	adds	r4, #21
 800a92a:	3304      	adds	r3, #4
 800a92c:	42a6      	cmp	r6, r4
 800a92e:	bf38      	it	cc
 800a930:	2304      	movcc	r3, #4
 800a932:	441d      	add	r5, r3
 800a934:	445b      	add	r3, fp
 800a936:	461e      	mov	r6, r3
 800a938:	462c      	mov	r4, r5
 800a93a:	4544      	cmp	r4, r8
 800a93c:	d30e      	bcc.n	800a95c <__mdiff+0xf8>
 800a93e:	f108 0103 	add.w	r1, r8, #3
 800a942:	1b49      	subs	r1, r1, r5
 800a944:	f021 0103 	bic.w	r1, r1, #3
 800a948:	3d03      	subs	r5, #3
 800a94a:	45a8      	cmp	r8, r5
 800a94c:	bf38      	it	cc
 800a94e:	2100      	movcc	r1, #0
 800a950:	440b      	add	r3, r1
 800a952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a956:	b191      	cbz	r1, 800a97e <__mdiff+0x11a>
 800a958:	6117      	str	r7, [r2, #16]
 800a95a:	e79d      	b.n	800a898 <__mdiff+0x34>
 800a95c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a960:	46e6      	mov	lr, ip
 800a962:	0c08      	lsrs	r0, r1, #16
 800a964:	fa1c fc81 	uxtah	ip, ip, r1
 800a968:	4471      	add	r1, lr
 800a96a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a96e:	b289      	uxth	r1, r1
 800a970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a974:	f846 1b04 	str.w	r1, [r6], #4
 800a978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a97c:	e7dd      	b.n	800a93a <__mdiff+0xd6>
 800a97e:	3f01      	subs	r7, #1
 800a980:	e7e7      	b.n	800a952 <__mdiff+0xee>
 800a982:	bf00      	nop
 800a984:	0800d61d 	.word	0x0800d61d
 800a988:	0800d62e 	.word	0x0800d62e

0800a98c <__ulp>:
 800a98c:	b082      	sub	sp, #8
 800a98e:	ed8d 0b00 	vstr	d0, [sp]
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	4b0f      	ldr	r3, [pc, #60]	@ (800a9d4 <__ulp+0x48>)
 800a996:	4013      	ands	r3, r2
 800a998:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	dc08      	bgt.n	800a9b2 <__ulp+0x26>
 800a9a0:	425b      	negs	r3, r3
 800a9a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a9a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9aa:	da04      	bge.n	800a9b6 <__ulp+0x2a>
 800a9ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a9b0:	4113      	asrs	r3, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	e008      	b.n	800a9c8 <__ulp+0x3c>
 800a9b6:	f1a2 0314 	sub.w	r3, r2, #20
 800a9ba:	2b1e      	cmp	r3, #30
 800a9bc:	bfda      	itte	le
 800a9be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a9c2:	40da      	lsrle	r2, r3
 800a9c4:	2201      	movgt	r2, #1
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	4610      	mov	r0, r2
 800a9cc:	ec41 0b10 	vmov	d0, r0, r1
 800a9d0:	b002      	add	sp, #8
 800a9d2:	4770      	bx	lr
 800a9d4:	7ff00000 	.word	0x7ff00000

0800a9d8 <__b2d>:
 800a9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9dc:	6906      	ldr	r6, [r0, #16]
 800a9de:	f100 0814 	add.w	r8, r0, #20
 800a9e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a9e6:	1f37      	subs	r7, r6, #4
 800a9e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7ff fd4b 	bl	800a488 <__hi0bits>
 800a9f2:	f1c0 0320 	rsb	r3, r0, #32
 800a9f6:	280a      	cmp	r0, #10
 800a9f8:	600b      	str	r3, [r1, #0]
 800a9fa:	491b      	ldr	r1, [pc, #108]	@ (800aa68 <__b2d+0x90>)
 800a9fc:	dc15      	bgt.n	800aa2a <__b2d+0x52>
 800a9fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa02:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa06:	45b8      	cmp	r8, r7
 800aa08:	ea43 0501 	orr.w	r5, r3, r1
 800aa0c:	bf34      	ite	cc
 800aa0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa12:	2300      	movcs	r3, #0
 800aa14:	3015      	adds	r0, #21
 800aa16:	fa02 f000 	lsl.w	r0, r2, r0
 800aa1a:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa1e:	4303      	orrs	r3, r0
 800aa20:	461c      	mov	r4, r3
 800aa22:	ec45 4b10 	vmov	d0, r4, r5
 800aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2a:	45b8      	cmp	r8, r7
 800aa2c:	bf3a      	itte	cc
 800aa2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa32:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa36:	2300      	movcs	r3, #0
 800aa38:	380b      	subs	r0, #11
 800aa3a:	d012      	beq.n	800aa62 <__b2d+0x8a>
 800aa3c:	f1c0 0120 	rsb	r1, r0, #32
 800aa40:	fa23 f401 	lsr.w	r4, r3, r1
 800aa44:	4082      	lsls	r2, r0
 800aa46:	4322      	orrs	r2, r4
 800aa48:	4547      	cmp	r7, r8
 800aa4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aa4e:	bf8c      	ite	hi
 800aa50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa54:	2200      	movls	r2, #0
 800aa56:	4083      	lsls	r3, r0
 800aa58:	40ca      	lsrs	r2, r1
 800aa5a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	e7de      	b.n	800aa20 <__b2d+0x48>
 800aa62:	ea42 0501 	orr.w	r5, r2, r1
 800aa66:	e7db      	b.n	800aa20 <__b2d+0x48>
 800aa68:	3ff00000 	.word	0x3ff00000

0800aa6c <__d2b>:
 800aa6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	460f      	mov	r7, r1
 800aa72:	2101      	movs	r1, #1
 800aa74:	ec59 8b10 	vmov	r8, r9, d0
 800aa78:	4616      	mov	r6, r2
 800aa7a:	f7ff fc13 	bl	800a2a4 <_Balloc>
 800aa7e:	4604      	mov	r4, r0
 800aa80:	b930      	cbnz	r0, 800aa90 <__d2b+0x24>
 800aa82:	4602      	mov	r2, r0
 800aa84:	4b23      	ldr	r3, [pc, #140]	@ (800ab14 <__d2b+0xa8>)
 800aa86:	4824      	ldr	r0, [pc, #144]	@ (800ab18 <__d2b+0xac>)
 800aa88:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa8c:	f001 f944 	bl	800bd18 <__assert_func>
 800aa90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa98:	b10d      	cbz	r5, 800aa9e <__d2b+0x32>
 800aa9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	f1b8 0300 	subs.w	r3, r8, #0
 800aaa4:	d023      	beq.n	800aaee <__d2b+0x82>
 800aaa6:	4668      	mov	r0, sp
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	f7ff fd0c 	bl	800a4c6 <__lo0bits>
 800aaae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aab2:	b1d0      	cbz	r0, 800aaea <__d2b+0x7e>
 800aab4:	f1c0 0320 	rsb	r3, r0, #32
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	430b      	orrs	r3, r1
 800aabe:	40c2      	lsrs	r2, r0
 800aac0:	6163      	str	r3, [r4, #20]
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	9b01      	ldr	r3, [sp, #4]
 800aac6:	61a3      	str	r3, [r4, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	bf0c      	ite	eq
 800aacc:	2201      	moveq	r2, #1
 800aace:	2202      	movne	r2, #2
 800aad0:	6122      	str	r2, [r4, #16]
 800aad2:	b1a5      	cbz	r5, 800aafe <__d2b+0x92>
 800aad4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aad8:	4405      	add	r5, r0
 800aada:	603d      	str	r5, [r7, #0]
 800aadc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aae0:	6030      	str	r0, [r6, #0]
 800aae2:	4620      	mov	r0, r4
 800aae4:	b003      	add	sp, #12
 800aae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaea:	6161      	str	r1, [r4, #20]
 800aaec:	e7ea      	b.n	800aac4 <__d2b+0x58>
 800aaee:	a801      	add	r0, sp, #4
 800aaf0:	f7ff fce9 	bl	800a4c6 <__lo0bits>
 800aaf4:	9b01      	ldr	r3, [sp, #4]
 800aaf6:	6163      	str	r3, [r4, #20]
 800aaf8:	3020      	adds	r0, #32
 800aafa:	2201      	movs	r2, #1
 800aafc:	e7e8      	b.n	800aad0 <__d2b+0x64>
 800aafe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab06:	6038      	str	r0, [r7, #0]
 800ab08:	6918      	ldr	r0, [r3, #16]
 800ab0a:	f7ff fcbd 	bl	800a488 <__hi0bits>
 800ab0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab12:	e7e5      	b.n	800aae0 <__d2b+0x74>
 800ab14:	0800d61d 	.word	0x0800d61d
 800ab18:	0800d62e 	.word	0x0800d62e

0800ab1c <__ratio>:
 800ab1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	4688      	mov	r8, r1
 800ab22:	4669      	mov	r1, sp
 800ab24:	4681      	mov	r9, r0
 800ab26:	f7ff ff57 	bl	800a9d8 <__b2d>
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	ec55 4b10 	vmov	r4, r5, d0
 800ab32:	f7ff ff51 	bl	800a9d8 <__b2d>
 800ab36:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ab3a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ab44:	1a5b      	subs	r3, r3, r1
 800ab46:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800ab4a:	ec57 6b10 	vmov	r6, r7, d0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	bfd6      	itet	le
 800ab52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab56:	462a      	movgt	r2, r5
 800ab58:	463a      	movle	r2, r7
 800ab5a:	46ab      	mov	fp, r5
 800ab5c:	46a2      	mov	sl, r4
 800ab5e:	bfce      	itee	gt
 800ab60:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ab64:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800ab68:	ee00 3a90 	vmovle	s1, r3
 800ab6c:	ec4b ab17 	vmov	d7, sl, fp
 800ab70:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800ab74:	b003      	add	sp, #12
 800ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab7a <__copybits>:
 800ab7a:	3901      	subs	r1, #1
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	1149      	asrs	r1, r1, #5
 800ab80:	6914      	ldr	r4, [r2, #16]
 800ab82:	3101      	adds	r1, #1
 800ab84:	f102 0314 	add.w	r3, r2, #20
 800ab88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab90:	1f05      	subs	r5, r0, #4
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	d30c      	bcc.n	800abb0 <__copybits+0x36>
 800ab96:	1aa3      	subs	r3, r4, r2
 800ab98:	3b11      	subs	r3, #17
 800ab9a:	f023 0303 	bic.w	r3, r3, #3
 800ab9e:	3211      	adds	r2, #17
 800aba0:	42a2      	cmp	r2, r4
 800aba2:	bf88      	it	hi
 800aba4:	2300      	movhi	r3, #0
 800aba6:	4418      	add	r0, r3
 800aba8:	2300      	movs	r3, #0
 800abaa:	4288      	cmp	r0, r1
 800abac:	d305      	bcc.n	800abba <__copybits+0x40>
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800abb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800abb8:	e7eb      	b.n	800ab92 <__copybits+0x18>
 800abba:	f840 3b04 	str.w	r3, [r0], #4
 800abbe:	e7f4      	b.n	800abaa <__copybits+0x30>

0800abc0 <__any_on>:
 800abc0:	f100 0214 	add.w	r2, r0, #20
 800abc4:	6900      	ldr	r0, [r0, #16]
 800abc6:	114b      	asrs	r3, r1, #5
 800abc8:	4298      	cmp	r0, r3
 800abca:	b510      	push	{r4, lr}
 800abcc:	db11      	blt.n	800abf2 <__any_on+0x32>
 800abce:	dd0a      	ble.n	800abe6 <__any_on+0x26>
 800abd0:	f011 011f 	ands.w	r1, r1, #31
 800abd4:	d007      	beq.n	800abe6 <__any_on+0x26>
 800abd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abda:	fa24 f001 	lsr.w	r0, r4, r1
 800abde:	fa00 f101 	lsl.w	r1, r0, r1
 800abe2:	428c      	cmp	r4, r1
 800abe4:	d10b      	bne.n	800abfe <__any_on+0x3e>
 800abe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abea:	4293      	cmp	r3, r2
 800abec:	d803      	bhi.n	800abf6 <__any_on+0x36>
 800abee:	2000      	movs	r0, #0
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	4603      	mov	r3, r0
 800abf4:	e7f7      	b.n	800abe6 <__any_on+0x26>
 800abf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abfa:	2900      	cmp	r1, #0
 800abfc:	d0f5      	beq.n	800abea <__any_on+0x2a>
 800abfe:	2001      	movs	r0, #1
 800ac00:	e7f6      	b.n	800abf0 <__any_on+0x30>

0800ac02 <sulp>:
 800ac02:	b570      	push	{r4, r5, r6, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	460d      	mov	r5, r1
 800ac08:	4616      	mov	r6, r2
 800ac0a:	ec45 4b10 	vmov	d0, r4, r5
 800ac0e:	f7ff febd 	bl	800a98c <__ulp>
 800ac12:	b17e      	cbz	r6, 800ac34 <sulp+0x32>
 800ac14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd09      	ble.n	800ac34 <sulp+0x32>
 800ac20:	051b      	lsls	r3, r3, #20
 800ac22:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800ac26:	2000      	movs	r0, #0
 800ac28:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800ac2c:	ec41 0b17 	vmov	d7, r0, r1
 800ac30:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ac34:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac38 <_strtod_l>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b0a 	vpush	{d8-d12}
 800ac40:	b097      	sub	sp, #92	@ 0x5c
 800ac42:	4688      	mov	r8, r1
 800ac44:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac46:	2200      	movs	r2, #0
 800ac48:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac4a:	9005      	str	r0, [sp, #20]
 800ac4c:	f04f 0a00 	mov.w	sl, #0
 800ac50:	f04f 0b00 	mov.w	fp, #0
 800ac54:	460a      	mov	r2, r1
 800ac56:	9211      	str	r2, [sp, #68]	@ 0x44
 800ac58:	7811      	ldrb	r1, [r2, #0]
 800ac5a:	292b      	cmp	r1, #43	@ 0x2b
 800ac5c:	d04c      	beq.n	800acf8 <_strtod_l+0xc0>
 800ac5e:	d839      	bhi.n	800acd4 <_strtod_l+0x9c>
 800ac60:	290d      	cmp	r1, #13
 800ac62:	d833      	bhi.n	800accc <_strtod_l+0x94>
 800ac64:	2908      	cmp	r1, #8
 800ac66:	d833      	bhi.n	800acd0 <_strtod_l+0x98>
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	d03c      	beq.n	800ace6 <_strtod_l+0xae>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	9208      	str	r2, [sp, #32]
 800ac70:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800ac72:	782a      	ldrb	r2, [r5, #0]
 800ac74:	2a30      	cmp	r2, #48	@ 0x30
 800ac76:	f040 80b5 	bne.w	800ade4 <_strtod_l+0x1ac>
 800ac7a:	786a      	ldrb	r2, [r5, #1]
 800ac7c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ac80:	2a58      	cmp	r2, #88	@ 0x58
 800ac82:	d170      	bne.n	800ad66 <_strtod_l+0x12e>
 800ac84:	9302      	str	r3, [sp, #8]
 800ac86:	9b08      	ldr	r3, [sp, #32]
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	ab12      	add	r3, sp, #72	@ 0x48
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	4a8b      	ldr	r2, [pc, #556]	@ (800aebc <_strtod_l+0x284>)
 800ac90:	9805      	ldr	r0, [sp, #20]
 800ac92:	ab13      	add	r3, sp, #76	@ 0x4c
 800ac94:	a911      	add	r1, sp, #68	@ 0x44
 800ac96:	f001 f8d9 	bl	800be4c <__gethex>
 800ac9a:	f010 060f 	ands.w	r6, r0, #15
 800ac9e:	4604      	mov	r4, r0
 800aca0:	d005      	beq.n	800acae <_strtod_l+0x76>
 800aca2:	2e06      	cmp	r6, #6
 800aca4:	d12a      	bne.n	800acfc <_strtod_l+0xc4>
 800aca6:	3501      	adds	r5, #1
 800aca8:	2300      	movs	r3, #0
 800acaa:	9511      	str	r5, [sp, #68]	@ 0x44
 800acac:	9308      	str	r3, [sp, #32]
 800acae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f040 852f 	bne.w	800b714 <_strtod_l+0xadc>
 800acb6:	9b08      	ldr	r3, [sp, #32]
 800acb8:	ec4b ab10 	vmov	d0, sl, fp
 800acbc:	b1cb      	cbz	r3, 800acf2 <_strtod_l+0xba>
 800acbe:	eeb1 0b40 	vneg.f64	d0, d0
 800acc2:	b017      	add	sp, #92	@ 0x5c
 800acc4:	ecbd 8b0a 	vpop	{d8-d12}
 800acc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800accc:	2920      	cmp	r1, #32
 800acce:	d1cd      	bne.n	800ac6c <_strtod_l+0x34>
 800acd0:	3201      	adds	r2, #1
 800acd2:	e7c0      	b.n	800ac56 <_strtod_l+0x1e>
 800acd4:	292d      	cmp	r1, #45	@ 0x2d
 800acd6:	d1c9      	bne.n	800ac6c <_strtod_l+0x34>
 800acd8:	2101      	movs	r1, #1
 800acda:	9108      	str	r1, [sp, #32]
 800acdc:	1c51      	adds	r1, r2, #1
 800acde:	9111      	str	r1, [sp, #68]	@ 0x44
 800ace0:	7852      	ldrb	r2, [r2, #1]
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	d1c4      	bne.n	800ac70 <_strtod_l+0x38>
 800ace6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace8:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800acec:	2b00      	cmp	r3, #0
 800acee:	f040 850f 	bne.w	800b710 <_strtod_l+0xad8>
 800acf2:	ec4b ab10 	vmov	d0, sl, fp
 800acf6:	e7e4      	b.n	800acc2 <_strtod_l+0x8a>
 800acf8:	2100      	movs	r1, #0
 800acfa:	e7ee      	b.n	800acda <_strtod_l+0xa2>
 800acfc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800acfe:	b13a      	cbz	r2, 800ad10 <_strtod_l+0xd8>
 800ad00:	2135      	movs	r1, #53	@ 0x35
 800ad02:	a814      	add	r0, sp, #80	@ 0x50
 800ad04:	f7ff ff39 	bl	800ab7a <__copybits>
 800ad08:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800ad0a:	9805      	ldr	r0, [sp, #20]
 800ad0c:	f7ff fb0a 	bl	800a324 <_Bfree>
 800ad10:	1e73      	subs	r3, r6, #1
 800ad12:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d806      	bhi.n	800ad26 <_strtod_l+0xee>
 800ad18:	e8df f003 	tbb	[pc, r3]
 800ad1c:	201d0314 	.word	0x201d0314
 800ad20:	14          	.byte	0x14
 800ad21:	00          	.byte	0x00
 800ad22:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ad26:	05e3      	lsls	r3, r4, #23
 800ad28:	bf48      	it	mi
 800ad2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ad2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ad32:	0d1b      	lsrs	r3, r3, #20
 800ad34:	051b      	lsls	r3, r3, #20
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1b9      	bne.n	800acae <_strtod_l+0x76>
 800ad3a:	f7fe fba1 	bl	8009480 <__errno>
 800ad3e:	2322      	movs	r3, #34	@ 0x22
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	e7b4      	b.n	800acae <_strtod_l+0x76>
 800ad44:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800ad48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ad4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ad50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad54:	e7e7      	b.n	800ad26 <_strtod_l+0xee>
 800ad56:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800aec4 <_strtod_l+0x28c>
 800ad5a:	e7e4      	b.n	800ad26 <_strtod_l+0xee>
 800ad5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ad60:	f04f 3aff 	mov.w	sl, #4294967295
 800ad64:	e7df      	b.n	800ad26 <_strtod_l+0xee>
 800ad66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad68:	1c5a      	adds	r2, r3, #1
 800ad6a:	9211      	str	r2, [sp, #68]	@ 0x44
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b30      	cmp	r3, #48	@ 0x30
 800ad70:	d0f9      	beq.n	800ad66 <_strtod_l+0x12e>
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d09b      	beq.n	800acae <_strtod_l+0x76>
 800ad76:	2301      	movs	r3, #1
 800ad78:	2600      	movs	r6, #0
 800ad7a:	9307      	str	r3, [sp, #28]
 800ad7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ad7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad80:	46b1      	mov	r9, r6
 800ad82:	4635      	mov	r5, r6
 800ad84:	220a      	movs	r2, #10
 800ad86:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800ad88:	7804      	ldrb	r4, [r0, #0]
 800ad8a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800ad8e:	b2d9      	uxtb	r1, r3
 800ad90:	2909      	cmp	r1, #9
 800ad92:	d929      	bls.n	800ade8 <_strtod_l+0x1b0>
 800ad94:	494a      	ldr	r1, [pc, #296]	@ (800aec0 <_strtod_l+0x288>)
 800ad96:	2201      	movs	r2, #1
 800ad98:	f000 ff84 	bl	800bca4 <strncmp>
 800ad9c:	b378      	cbz	r0, 800adfe <_strtod_l+0x1c6>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	4622      	mov	r2, r4
 800ada2:	462b      	mov	r3, r5
 800ada4:	4607      	mov	r7, r0
 800ada6:	9006      	str	r0, [sp, #24]
 800ada8:	2a65      	cmp	r2, #101	@ 0x65
 800adaa:	d001      	beq.n	800adb0 <_strtod_l+0x178>
 800adac:	2a45      	cmp	r2, #69	@ 0x45
 800adae:	d117      	bne.n	800ade0 <_strtod_l+0x1a8>
 800adb0:	b91b      	cbnz	r3, 800adba <_strtod_l+0x182>
 800adb2:	9b07      	ldr	r3, [sp, #28]
 800adb4:	4303      	orrs	r3, r0
 800adb6:	d096      	beq.n	800ace6 <_strtod_l+0xae>
 800adb8:	2300      	movs	r3, #0
 800adba:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800adbe:	f108 0201 	add.w	r2, r8, #1
 800adc2:	9211      	str	r2, [sp, #68]	@ 0x44
 800adc4:	f898 2001 	ldrb.w	r2, [r8, #1]
 800adc8:	2a2b      	cmp	r2, #43	@ 0x2b
 800adca:	d06b      	beq.n	800aea4 <_strtod_l+0x26c>
 800adcc:	2a2d      	cmp	r2, #45	@ 0x2d
 800adce:	d071      	beq.n	800aeb4 <_strtod_l+0x27c>
 800add0:	f04f 0e00 	mov.w	lr, #0
 800add4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800add8:	2c09      	cmp	r4, #9
 800adda:	d979      	bls.n	800aed0 <_strtod_l+0x298>
 800addc:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ade0:	2400      	movs	r4, #0
 800ade2:	e094      	b.n	800af0e <_strtod_l+0x2d6>
 800ade4:	2300      	movs	r3, #0
 800ade6:	e7c7      	b.n	800ad78 <_strtod_l+0x140>
 800ade8:	2d08      	cmp	r5, #8
 800adea:	f100 0001 	add.w	r0, r0, #1
 800adee:	bfd4      	ite	le
 800adf0:	fb02 3909 	mlale	r9, r2, r9, r3
 800adf4:	fb02 3606 	mlagt	r6, r2, r6, r3
 800adf8:	3501      	adds	r5, #1
 800adfa:	9011      	str	r0, [sp, #68]	@ 0x44
 800adfc:	e7c3      	b.n	800ad86 <_strtod_l+0x14e>
 800adfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	9211      	str	r2, [sp, #68]	@ 0x44
 800ae04:	785a      	ldrb	r2, [r3, #1]
 800ae06:	b375      	cbz	r5, 800ae66 <_strtod_l+0x22e>
 800ae08:	4607      	mov	r7, r0
 800ae0a:	462b      	mov	r3, r5
 800ae0c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae10:	2909      	cmp	r1, #9
 800ae12:	d913      	bls.n	800ae3c <_strtod_l+0x204>
 800ae14:	2101      	movs	r1, #1
 800ae16:	9106      	str	r1, [sp, #24]
 800ae18:	e7c6      	b.n	800ada8 <_strtod_l+0x170>
 800ae1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae1c:	1c5a      	adds	r2, r3, #1
 800ae1e:	9211      	str	r2, [sp, #68]	@ 0x44
 800ae20:	785a      	ldrb	r2, [r3, #1]
 800ae22:	3001      	adds	r0, #1
 800ae24:	2a30      	cmp	r2, #48	@ 0x30
 800ae26:	d0f8      	beq.n	800ae1a <_strtod_l+0x1e2>
 800ae28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ae2c:	2b08      	cmp	r3, #8
 800ae2e:	f200 8476 	bhi.w	800b71e <_strtod_l+0xae6>
 800ae32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae34:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae36:	4607      	mov	r7, r0
 800ae38:	2000      	movs	r0, #0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	3a30      	subs	r2, #48	@ 0x30
 800ae3e:	f100 0101 	add.w	r1, r0, #1
 800ae42:	d023      	beq.n	800ae8c <_strtod_l+0x254>
 800ae44:	440f      	add	r7, r1
 800ae46:	eb00 0c03 	add.w	ip, r0, r3
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	240a      	movs	r4, #10
 800ae4e:	4561      	cmp	r1, ip
 800ae50:	d10b      	bne.n	800ae6a <_strtod_l+0x232>
 800ae52:	1c5c      	adds	r4, r3, #1
 800ae54:	4403      	add	r3, r0
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	4404      	add	r4, r0
 800ae5a:	dc11      	bgt.n	800ae80 <_strtod_l+0x248>
 800ae5c:	230a      	movs	r3, #10
 800ae5e:	fb03 2909 	mla	r9, r3, r9, r2
 800ae62:	2100      	movs	r1, #0
 800ae64:	e013      	b.n	800ae8e <_strtod_l+0x256>
 800ae66:	4628      	mov	r0, r5
 800ae68:	e7dc      	b.n	800ae24 <_strtod_l+0x1ec>
 800ae6a:	2908      	cmp	r1, #8
 800ae6c:	f101 0101 	add.w	r1, r1, #1
 800ae70:	dc02      	bgt.n	800ae78 <_strtod_l+0x240>
 800ae72:	fb04 f909 	mul.w	r9, r4, r9
 800ae76:	e7ea      	b.n	800ae4e <_strtod_l+0x216>
 800ae78:	2910      	cmp	r1, #16
 800ae7a:	bfd8      	it	le
 800ae7c:	4366      	mulle	r6, r4
 800ae7e:	e7e6      	b.n	800ae4e <_strtod_l+0x216>
 800ae80:	2b0f      	cmp	r3, #15
 800ae82:	dcee      	bgt.n	800ae62 <_strtod_l+0x22a>
 800ae84:	230a      	movs	r3, #10
 800ae86:	fb03 2606 	mla	r6, r3, r6, r2
 800ae8a:	e7ea      	b.n	800ae62 <_strtod_l+0x22a>
 800ae8c:	461c      	mov	r4, r3
 800ae8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	9211      	str	r2, [sp, #68]	@ 0x44
 800ae94:	785a      	ldrb	r2, [r3, #1]
 800ae96:	4608      	mov	r0, r1
 800ae98:	4623      	mov	r3, r4
 800ae9a:	e7b7      	b.n	800ae0c <_strtod_l+0x1d4>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	2700      	movs	r7, #0
 800aea0:	9306      	str	r3, [sp, #24]
 800aea2:	e786      	b.n	800adb2 <_strtod_l+0x17a>
 800aea4:	f04f 0e00 	mov.w	lr, #0
 800aea8:	f108 0202 	add.w	r2, r8, #2
 800aeac:	9211      	str	r2, [sp, #68]	@ 0x44
 800aeae:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aeb2:	e78f      	b.n	800add4 <_strtod_l+0x19c>
 800aeb4:	f04f 0e01 	mov.w	lr, #1
 800aeb8:	e7f6      	b.n	800aea8 <_strtod_l+0x270>
 800aeba:	bf00      	nop
 800aebc:	0800d7a0 	.word	0x0800d7a0
 800aec0:	0800d788 	.word	0x0800d788
 800aec4:	7ff00000 	.word	0x7ff00000
 800aec8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aeca:	1c54      	adds	r4, r2, #1
 800aecc:	9411      	str	r4, [sp, #68]	@ 0x44
 800aece:	7852      	ldrb	r2, [r2, #1]
 800aed0:	2a30      	cmp	r2, #48	@ 0x30
 800aed2:	d0f9      	beq.n	800aec8 <_strtod_l+0x290>
 800aed4:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800aed8:	2c08      	cmp	r4, #8
 800aeda:	d881      	bhi.n	800ade0 <_strtod_l+0x1a8>
 800aedc:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800aee0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aee2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aee6:	1c51      	adds	r1, r2, #1
 800aee8:	9111      	str	r1, [sp, #68]	@ 0x44
 800aeea:	7852      	ldrb	r2, [r2, #1]
 800aeec:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800aef0:	2c09      	cmp	r4, #9
 800aef2:	d938      	bls.n	800af66 <_strtod_l+0x32e>
 800aef4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800aef6:	1b0c      	subs	r4, r1, r4
 800aef8:	2c08      	cmp	r4, #8
 800aefa:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800aefe:	dc02      	bgt.n	800af06 <_strtod_l+0x2ce>
 800af00:	4564      	cmp	r4, ip
 800af02:	bfa8      	it	ge
 800af04:	4664      	movge	r4, ip
 800af06:	f1be 0f00 	cmp.w	lr, #0
 800af0a:	d000      	beq.n	800af0e <_strtod_l+0x2d6>
 800af0c:	4264      	negs	r4, r4
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d14e      	bne.n	800afb0 <_strtod_l+0x378>
 800af12:	9b07      	ldr	r3, [sp, #28]
 800af14:	4318      	orrs	r0, r3
 800af16:	f47f aeca 	bne.w	800acae <_strtod_l+0x76>
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f47f aee2 	bne.w	800ace6 <_strtod_l+0xae>
 800af22:	2a69      	cmp	r2, #105	@ 0x69
 800af24:	d027      	beq.n	800af76 <_strtod_l+0x33e>
 800af26:	dc24      	bgt.n	800af72 <_strtod_l+0x33a>
 800af28:	2a49      	cmp	r2, #73	@ 0x49
 800af2a:	d024      	beq.n	800af76 <_strtod_l+0x33e>
 800af2c:	2a4e      	cmp	r2, #78	@ 0x4e
 800af2e:	f47f aeda 	bne.w	800ace6 <_strtod_l+0xae>
 800af32:	4997      	ldr	r1, [pc, #604]	@ (800b190 <_strtod_l+0x558>)
 800af34:	a811      	add	r0, sp, #68	@ 0x44
 800af36:	f001 f9ab 	bl	800c290 <__match>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	f43f aed3 	beq.w	800ace6 <_strtod_l+0xae>
 800af40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b28      	cmp	r3, #40	@ 0x28
 800af46:	d12d      	bne.n	800afa4 <_strtod_l+0x36c>
 800af48:	4992      	ldr	r1, [pc, #584]	@ (800b194 <_strtod_l+0x55c>)
 800af4a:	aa14      	add	r2, sp, #80	@ 0x50
 800af4c:	a811      	add	r0, sp, #68	@ 0x44
 800af4e:	f001 f9b3 	bl	800c2b8 <__hexnan>
 800af52:	2805      	cmp	r0, #5
 800af54:	d126      	bne.n	800afa4 <_strtod_l+0x36c>
 800af56:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800af58:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800af5c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800af60:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800af64:	e6a3      	b.n	800acae <_strtod_l+0x76>
 800af66:	240a      	movs	r4, #10
 800af68:	fb04 2c0c 	mla	ip, r4, ip, r2
 800af6c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800af70:	e7b8      	b.n	800aee4 <_strtod_l+0x2ac>
 800af72:	2a6e      	cmp	r2, #110	@ 0x6e
 800af74:	e7db      	b.n	800af2e <_strtod_l+0x2f6>
 800af76:	4988      	ldr	r1, [pc, #544]	@ (800b198 <_strtod_l+0x560>)
 800af78:	a811      	add	r0, sp, #68	@ 0x44
 800af7a:	f001 f989 	bl	800c290 <__match>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f aeb1 	beq.w	800ace6 <_strtod_l+0xae>
 800af84:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af86:	4985      	ldr	r1, [pc, #532]	@ (800b19c <_strtod_l+0x564>)
 800af88:	3b01      	subs	r3, #1
 800af8a:	a811      	add	r0, sp, #68	@ 0x44
 800af8c:	9311      	str	r3, [sp, #68]	@ 0x44
 800af8e:	f001 f97f 	bl	800c290 <__match>
 800af92:	b910      	cbnz	r0, 800af9a <_strtod_l+0x362>
 800af94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af96:	3301      	adds	r3, #1
 800af98:	9311      	str	r3, [sp, #68]	@ 0x44
 800af9a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b1b0 <_strtod_l+0x578>
 800af9e:	f04f 0a00 	mov.w	sl, #0
 800afa2:	e684      	b.n	800acae <_strtod_l+0x76>
 800afa4:	487e      	ldr	r0, [pc, #504]	@ (800b1a0 <_strtod_l+0x568>)
 800afa6:	f000 feaf 	bl	800bd08 <nan>
 800afaa:	ec5b ab10 	vmov	sl, fp, d0
 800afae:	e67e      	b.n	800acae <_strtod_l+0x76>
 800afb0:	ee07 9a90 	vmov	s15, r9
 800afb4:	1be2      	subs	r2, r4, r7
 800afb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800afba:	2d00      	cmp	r5, #0
 800afbc:	bf08      	it	eq
 800afbe:	461d      	moveq	r5, r3
 800afc0:	2b10      	cmp	r3, #16
 800afc2:	9209      	str	r2, [sp, #36]	@ 0x24
 800afc4:	461a      	mov	r2, r3
 800afc6:	bfa8      	it	ge
 800afc8:	2210      	movge	r2, #16
 800afca:	2b09      	cmp	r3, #9
 800afcc:	ec5b ab17 	vmov	sl, fp, d7
 800afd0:	dc15      	bgt.n	800affe <_strtod_l+0x3c6>
 800afd2:	1be1      	subs	r1, r4, r7
 800afd4:	2900      	cmp	r1, #0
 800afd6:	f43f ae6a 	beq.w	800acae <_strtod_l+0x76>
 800afda:	eba4 0107 	sub.w	r1, r4, r7
 800afde:	dd72      	ble.n	800b0c6 <_strtod_l+0x48e>
 800afe0:	2916      	cmp	r1, #22
 800afe2:	dc59      	bgt.n	800b098 <_strtod_l+0x460>
 800afe4:	4b6f      	ldr	r3, [pc, #444]	@ (800b1a4 <_strtod_l+0x56c>)
 800afe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800afec:	ed93 7b00 	vldr	d7, [r3]
 800aff0:	ec4b ab16 	vmov	d6, sl, fp
 800aff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aff8:	ec5b ab17 	vmov	sl, fp, d7
 800affc:	e657      	b.n	800acae <_strtod_l+0x76>
 800affe:	4969      	ldr	r1, [pc, #420]	@ (800b1a4 <_strtod_l+0x56c>)
 800b000:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b004:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b008:	ee06 6a90 	vmov	s13, r6
 800b00c:	2b0f      	cmp	r3, #15
 800b00e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b012:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b016:	ec5b ab16 	vmov	sl, fp, d6
 800b01a:	ddda      	ble.n	800afd2 <_strtod_l+0x39a>
 800b01c:	1a9a      	subs	r2, r3, r2
 800b01e:	1be1      	subs	r1, r4, r7
 800b020:	440a      	add	r2, r1
 800b022:	2a00      	cmp	r2, #0
 800b024:	f340 8094 	ble.w	800b150 <_strtod_l+0x518>
 800b028:	f012 000f 	ands.w	r0, r2, #15
 800b02c:	d00a      	beq.n	800b044 <_strtod_l+0x40c>
 800b02e:	495d      	ldr	r1, [pc, #372]	@ (800b1a4 <_strtod_l+0x56c>)
 800b030:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b034:	ed91 7b00 	vldr	d7, [r1]
 800b038:	ec4b ab16 	vmov	d6, sl, fp
 800b03c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b040:	ec5b ab17 	vmov	sl, fp, d7
 800b044:	f032 020f 	bics.w	r2, r2, #15
 800b048:	d073      	beq.n	800b132 <_strtod_l+0x4fa>
 800b04a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b04e:	dd47      	ble.n	800b0e0 <_strtod_l+0x4a8>
 800b050:	2400      	movs	r4, #0
 800b052:	4625      	mov	r5, r4
 800b054:	9407      	str	r4, [sp, #28]
 800b056:	4626      	mov	r6, r4
 800b058:	9a05      	ldr	r2, [sp, #20]
 800b05a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b1b0 <_strtod_l+0x578>
 800b05e:	2322      	movs	r3, #34	@ 0x22
 800b060:	6013      	str	r3, [r2, #0]
 800b062:	f04f 0a00 	mov.w	sl, #0
 800b066:	9b07      	ldr	r3, [sp, #28]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	f43f ae20 	beq.w	800acae <_strtod_l+0x76>
 800b06e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b070:	9805      	ldr	r0, [sp, #20]
 800b072:	f7ff f957 	bl	800a324 <_Bfree>
 800b076:	9805      	ldr	r0, [sp, #20]
 800b078:	4631      	mov	r1, r6
 800b07a:	f7ff f953 	bl	800a324 <_Bfree>
 800b07e:	9805      	ldr	r0, [sp, #20]
 800b080:	4629      	mov	r1, r5
 800b082:	f7ff f94f 	bl	800a324 <_Bfree>
 800b086:	9907      	ldr	r1, [sp, #28]
 800b088:	9805      	ldr	r0, [sp, #20]
 800b08a:	f7ff f94b 	bl	800a324 <_Bfree>
 800b08e:	9805      	ldr	r0, [sp, #20]
 800b090:	4621      	mov	r1, r4
 800b092:	f7ff f947 	bl	800a324 <_Bfree>
 800b096:	e60a      	b.n	800acae <_strtod_l+0x76>
 800b098:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b09c:	1be0      	subs	r0, r4, r7
 800b09e:	4281      	cmp	r1, r0
 800b0a0:	dbbc      	blt.n	800b01c <_strtod_l+0x3e4>
 800b0a2:	4a40      	ldr	r2, [pc, #256]	@ (800b1a4 <_strtod_l+0x56c>)
 800b0a4:	f1c3 030f 	rsb	r3, r3, #15
 800b0a8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b0ac:	ed91 7b00 	vldr	d7, [r1]
 800b0b0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b0b2:	ec4b ab16 	vmov	d6, sl, fp
 800b0b6:	1acb      	subs	r3, r1, r3
 800b0b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b0bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b0c0:	ed92 6b00 	vldr	d6, [r2]
 800b0c4:	e796      	b.n	800aff4 <_strtod_l+0x3bc>
 800b0c6:	3116      	adds	r1, #22
 800b0c8:	dba8      	blt.n	800b01c <_strtod_l+0x3e4>
 800b0ca:	4b36      	ldr	r3, [pc, #216]	@ (800b1a4 <_strtod_l+0x56c>)
 800b0cc:	1b3c      	subs	r4, r7, r4
 800b0ce:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b0d2:	ed94 7b00 	vldr	d7, [r4]
 800b0d6:	ec4b ab16 	vmov	d6, sl, fp
 800b0da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b0de:	e78b      	b.n	800aff8 <_strtod_l+0x3c0>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	ec4b ab17 	vmov	d7, sl, fp
 800b0e6:	4e30      	ldr	r6, [pc, #192]	@ (800b1a8 <_strtod_l+0x570>)
 800b0e8:	1112      	asrs	r2, r2, #4
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	2a01      	cmp	r2, #1
 800b0ee:	dc23      	bgt.n	800b138 <_strtod_l+0x500>
 800b0f0:	b108      	cbz	r0, 800b0f6 <_strtod_l+0x4be>
 800b0f2:	ec5b ab17 	vmov	sl, fp, d7
 800b0f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b1a8 <_strtod_l+0x570>)
 800b0f8:	482c      	ldr	r0, [pc, #176]	@ (800b1ac <_strtod_l+0x574>)
 800b0fa:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b0fe:	ed92 7b00 	vldr	d7, [r2]
 800b102:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b106:	ec4b ab16 	vmov	d6, sl, fp
 800b10a:	4a29      	ldr	r2, [pc, #164]	@ (800b1b0 <_strtod_l+0x578>)
 800b10c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b110:	ee17 1a90 	vmov	r1, s15
 800b114:	400a      	ands	r2, r1
 800b116:	4282      	cmp	r2, r0
 800b118:	ec5b ab17 	vmov	sl, fp, d7
 800b11c:	d898      	bhi.n	800b050 <_strtod_l+0x418>
 800b11e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b122:	4282      	cmp	r2, r0
 800b124:	bf86      	itte	hi
 800b126:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b1b4 <_strtod_l+0x57c>
 800b12a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b12e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b132:	2200      	movs	r2, #0
 800b134:	9206      	str	r2, [sp, #24]
 800b136:	e076      	b.n	800b226 <_strtod_l+0x5ee>
 800b138:	f012 0f01 	tst.w	r2, #1
 800b13c:	d004      	beq.n	800b148 <_strtod_l+0x510>
 800b13e:	ed96 6b00 	vldr	d6, [r6]
 800b142:	2001      	movs	r0, #1
 800b144:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b148:	3101      	adds	r1, #1
 800b14a:	1052      	asrs	r2, r2, #1
 800b14c:	3608      	adds	r6, #8
 800b14e:	e7cd      	b.n	800b0ec <_strtod_l+0x4b4>
 800b150:	d0ef      	beq.n	800b132 <_strtod_l+0x4fa>
 800b152:	4252      	negs	r2, r2
 800b154:	f012 000f 	ands.w	r0, r2, #15
 800b158:	d00a      	beq.n	800b170 <_strtod_l+0x538>
 800b15a:	4912      	ldr	r1, [pc, #72]	@ (800b1a4 <_strtod_l+0x56c>)
 800b15c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b160:	ed91 7b00 	vldr	d7, [r1]
 800b164:	ec4b ab16 	vmov	d6, sl, fp
 800b168:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b16c:	ec5b ab17 	vmov	sl, fp, d7
 800b170:	1112      	asrs	r2, r2, #4
 800b172:	d0de      	beq.n	800b132 <_strtod_l+0x4fa>
 800b174:	2a1f      	cmp	r2, #31
 800b176:	dd1f      	ble.n	800b1b8 <_strtod_l+0x580>
 800b178:	2400      	movs	r4, #0
 800b17a:	4625      	mov	r5, r4
 800b17c:	9407      	str	r4, [sp, #28]
 800b17e:	4626      	mov	r6, r4
 800b180:	9a05      	ldr	r2, [sp, #20]
 800b182:	2322      	movs	r3, #34	@ 0x22
 800b184:	f04f 0a00 	mov.w	sl, #0
 800b188:	f04f 0b00 	mov.w	fp, #0
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e76a      	b.n	800b066 <_strtod_l+0x42e>
 800b190:	0800d575 	.word	0x0800d575
 800b194:	0800d78c 	.word	0x0800d78c
 800b198:	0800d56d 	.word	0x0800d56d
 800b19c:	0800d5a4 	.word	0x0800d5a4
 800b1a0:	0800d935 	.word	0x0800d935
 800b1a4:	0800d6c0 	.word	0x0800d6c0
 800b1a8:	0800d698 	.word	0x0800d698
 800b1ac:	7ca00000 	.word	0x7ca00000
 800b1b0:	7ff00000 	.word	0x7ff00000
 800b1b4:	7fefffff 	.word	0x7fefffff
 800b1b8:	f012 0110 	ands.w	r1, r2, #16
 800b1bc:	bf18      	it	ne
 800b1be:	216a      	movne	r1, #106	@ 0x6a
 800b1c0:	9106      	str	r1, [sp, #24]
 800b1c2:	ec4b ab17 	vmov	d7, sl, fp
 800b1c6:	49b0      	ldr	r1, [pc, #704]	@ (800b488 <_strtod_l+0x850>)
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	07d6      	lsls	r6, r2, #31
 800b1cc:	d504      	bpl.n	800b1d8 <_strtod_l+0x5a0>
 800b1ce:	ed91 6b00 	vldr	d6, [r1]
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1d8:	1052      	asrs	r2, r2, #1
 800b1da:	f101 0108 	add.w	r1, r1, #8
 800b1de:	d1f4      	bne.n	800b1ca <_strtod_l+0x592>
 800b1e0:	b108      	cbz	r0, 800b1e6 <_strtod_l+0x5ae>
 800b1e2:	ec5b ab17 	vmov	sl, fp, d7
 800b1e6:	9a06      	ldr	r2, [sp, #24]
 800b1e8:	b1b2      	cbz	r2, 800b218 <_strtod_l+0x5e0>
 800b1ea:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800b1ee:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	4658      	mov	r0, fp
 800b1f6:	dd0f      	ble.n	800b218 <_strtod_l+0x5e0>
 800b1f8:	2a1f      	cmp	r2, #31
 800b1fa:	dd55      	ble.n	800b2a8 <_strtod_l+0x670>
 800b1fc:	2a34      	cmp	r2, #52	@ 0x34
 800b1fe:	bfde      	ittt	le
 800b200:	f04f 32ff 	movle.w	r2, #4294967295
 800b204:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800b208:	408a      	lslle	r2, r1
 800b20a:	f04f 0a00 	mov.w	sl, #0
 800b20e:	bfcc      	ite	gt
 800b210:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b214:	ea02 0b00 	andle.w	fp, r2, r0
 800b218:	ec4b ab17 	vmov	d7, sl, fp
 800b21c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b224:	d0a8      	beq.n	800b178 <_strtod_l+0x540>
 800b226:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b228:	9805      	ldr	r0, [sp, #20]
 800b22a:	f8cd 9000 	str.w	r9, [sp]
 800b22e:	462a      	mov	r2, r5
 800b230:	f7ff f8e0 	bl	800a3f4 <__s2b>
 800b234:	9007      	str	r0, [sp, #28]
 800b236:	2800      	cmp	r0, #0
 800b238:	f43f af0a 	beq.w	800b050 <_strtod_l+0x418>
 800b23c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23e:	1b3f      	subs	r7, r7, r4
 800b240:	2b00      	cmp	r3, #0
 800b242:	bfb4      	ite	lt
 800b244:	463b      	movlt	r3, r7
 800b246:	2300      	movge	r3, #0
 800b248:	930a      	str	r3, [sp, #40]	@ 0x28
 800b24a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b478 <_strtod_l+0x840>
 800b250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b254:	2400      	movs	r4, #0
 800b256:	930d      	str	r3, [sp, #52]	@ 0x34
 800b258:	4625      	mov	r5, r4
 800b25a:	9b07      	ldr	r3, [sp, #28]
 800b25c:	9805      	ldr	r0, [sp, #20]
 800b25e:	6859      	ldr	r1, [r3, #4]
 800b260:	f7ff f820 	bl	800a2a4 <_Balloc>
 800b264:	4606      	mov	r6, r0
 800b266:	2800      	cmp	r0, #0
 800b268:	f43f aef6 	beq.w	800b058 <_strtod_l+0x420>
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	ec4b ab19 	vmov	d9, sl, fp
 800b274:	3202      	adds	r2, #2
 800b276:	f103 010c 	add.w	r1, r3, #12
 800b27a:	0092      	lsls	r2, r2, #2
 800b27c:	300c      	adds	r0, #12
 800b27e:	f000 fd33 	bl	800bce8 <memcpy>
 800b282:	eeb0 0b49 	vmov.f64	d0, d9
 800b286:	9805      	ldr	r0, [sp, #20]
 800b288:	aa14      	add	r2, sp, #80	@ 0x50
 800b28a:	a913      	add	r1, sp, #76	@ 0x4c
 800b28c:	f7ff fbee 	bl	800aa6c <__d2b>
 800b290:	9012      	str	r0, [sp, #72]	@ 0x48
 800b292:	2800      	cmp	r0, #0
 800b294:	f43f aee0 	beq.w	800b058 <_strtod_l+0x420>
 800b298:	9805      	ldr	r0, [sp, #20]
 800b29a:	2101      	movs	r1, #1
 800b29c:	f7ff f940 	bl	800a520 <__i2b>
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	b940      	cbnz	r0, 800b2b6 <_strtod_l+0x67e>
 800b2a4:	2500      	movs	r5, #0
 800b2a6:	e6d7      	b.n	800b058 <_strtod_l+0x420>
 800b2a8:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ac:	fa01 f202 	lsl.w	r2, r1, r2
 800b2b0:	ea02 0a0a 	and.w	sl, r2, sl
 800b2b4:	e7b0      	b.n	800b218 <_strtod_l+0x5e0>
 800b2b6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b2b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b2ba:	2f00      	cmp	r7, #0
 800b2bc:	bfab      	itete	ge
 800b2be:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b2c0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b2c2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b2c6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b2ca:	bfac      	ite	ge
 800b2cc:	eb07 0903 	addge.w	r9, r7, r3
 800b2d0:	eba3 0807 	sublt.w	r8, r3, r7
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	1aff      	subs	r7, r7, r3
 800b2d8:	4417      	add	r7, r2
 800b2da:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b2de:	4a6b      	ldr	r2, [pc, #428]	@ (800b48c <_strtod_l+0x854>)
 800b2e0:	3f01      	subs	r7, #1
 800b2e2:	4297      	cmp	r7, r2
 800b2e4:	da51      	bge.n	800b38a <_strtod_l+0x752>
 800b2e6:	1bd1      	subs	r1, r2, r7
 800b2e8:	291f      	cmp	r1, #31
 800b2ea:	eba3 0301 	sub.w	r3, r3, r1
 800b2ee:	f04f 0201 	mov.w	r2, #1
 800b2f2:	dc3e      	bgt.n	800b372 <_strtod_l+0x73a>
 800b2f4:	408a      	lsls	r2, r1
 800b2f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b2fc:	eb09 0703 	add.w	r7, r9, r3
 800b300:	4498      	add	r8, r3
 800b302:	9b06      	ldr	r3, [sp, #24]
 800b304:	45b9      	cmp	r9, r7
 800b306:	4498      	add	r8, r3
 800b308:	464b      	mov	r3, r9
 800b30a:	bfa8      	it	ge
 800b30c:	463b      	movge	r3, r7
 800b30e:	4543      	cmp	r3, r8
 800b310:	bfa8      	it	ge
 800b312:	4643      	movge	r3, r8
 800b314:	2b00      	cmp	r3, #0
 800b316:	bfc2      	ittt	gt
 800b318:	1aff      	subgt	r7, r7, r3
 800b31a:	eba8 0803 	subgt.w	r8, r8, r3
 800b31e:	eba9 0903 	subgt.w	r9, r9, r3
 800b322:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	dd16      	ble.n	800b356 <_strtod_l+0x71e>
 800b328:	4629      	mov	r1, r5
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	461a      	mov	r2, r3
 800b32e:	f7ff f9b7 	bl	800a6a0 <__pow5mult>
 800b332:	4605      	mov	r5, r0
 800b334:	2800      	cmp	r0, #0
 800b336:	d0b5      	beq.n	800b2a4 <_strtod_l+0x66c>
 800b338:	4601      	mov	r1, r0
 800b33a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b33c:	9805      	ldr	r0, [sp, #20]
 800b33e:	f7ff f905 	bl	800a54c <__multiply>
 800b342:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b344:	2800      	cmp	r0, #0
 800b346:	f43f ae87 	beq.w	800b058 <_strtod_l+0x420>
 800b34a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b34c:	9805      	ldr	r0, [sp, #20]
 800b34e:	f7fe ffe9 	bl	800a324 <_Bfree>
 800b352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b354:	9312      	str	r3, [sp, #72]	@ 0x48
 800b356:	2f00      	cmp	r7, #0
 800b358:	dc1b      	bgt.n	800b392 <_strtod_l+0x75a>
 800b35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	dd21      	ble.n	800b3a4 <_strtod_l+0x76c>
 800b360:	4631      	mov	r1, r6
 800b362:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b364:	9805      	ldr	r0, [sp, #20]
 800b366:	f7ff f99b 	bl	800a6a0 <__pow5mult>
 800b36a:	4606      	mov	r6, r0
 800b36c:	b9d0      	cbnz	r0, 800b3a4 <_strtod_l+0x76c>
 800b36e:	2600      	movs	r6, #0
 800b370:	e672      	b.n	800b058 <_strtod_l+0x420>
 800b372:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b376:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b37a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b37e:	37e2      	adds	r7, #226	@ 0xe2
 800b380:	fa02 f107 	lsl.w	r1, r2, r7
 800b384:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b386:	920c      	str	r2, [sp, #48]	@ 0x30
 800b388:	e7b8      	b.n	800b2fc <_strtod_l+0x6c4>
 800b38a:	2200      	movs	r2, #0
 800b38c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b38e:	2201      	movs	r2, #1
 800b390:	e7f9      	b.n	800b386 <_strtod_l+0x74e>
 800b392:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b394:	9805      	ldr	r0, [sp, #20]
 800b396:	463a      	mov	r2, r7
 800b398:	f7ff f9dc 	bl	800a754 <__lshift>
 800b39c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d1db      	bne.n	800b35a <_strtod_l+0x722>
 800b3a2:	e659      	b.n	800b058 <_strtod_l+0x420>
 800b3a4:	f1b8 0f00 	cmp.w	r8, #0
 800b3a8:	dd07      	ble.n	800b3ba <_strtod_l+0x782>
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	9805      	ldr	r0, [sp, #20]
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	f7ff f9d0 	bl	800a754 <__lshift>
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d0d9      	beq.n	800b36e <_strtod_l+0x736>
 800b3ba:	f1b9 0f00 	cmp.w	r9, #0
 800b3be:	dd08      	ble.n	800b3d2 <_strtod_l+0x79a>
 800b3c0:	4629      	mov	r1, r5
 800b3c2:	9805      	ldr	r0, [sp, #20]
 800b3c4:	464a      	mov	r2, r9
 800b3c6:	f7ff f9c5 	bl	800a754 <__lshift>
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	f43f ae43 	beq.w	800b058 <_strtod_l+0x420>
 800b3d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b3d4:	9805      	ldr	r0, [sp, #20]
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	f7ff fa44 	bl	800a864 <__mdiff>
 800b3dc:	4604      	mov	r4, r0
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f43f ae3a 	beq.w	800b058 <_strtod_l+0x420>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b3ea:	60c3      	str	r3, [r0, #12]
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	f7ff fa1d 	bl	800a82c <__mcmp>
 800b3f2:	2800      	cmp	r0, #0
 800b3f4:	da4e      	bge.n	800b494 <_strtod_l+0x85c>
 800b3f6:	ea58 080a 	orrs.w	r8, r8, sl
 800b3fa:	d174      	bne.n	800b4e6 <_strtod_l+0x8ae>
 800b3fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b400:	2b00      	cmp	r3, #0
 800b402:	d170      	bne.n	800b4e6 <_strtod_l+0x8ae>
 800b404:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b408:	0d1b      	lsrs	r3, r3, #20
 800b40a:	051b      	lsls	r3, r3, #20
 800b40c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b410:	d969      	bls.n	800b4e6 <_strtod_l+0x8ae>
 800b412:	6963      	ldr	r3, [r4, #20]
 800b414:	b913      	cbnz	r3, 800b41c <_strtod_l+0x7e4>
 800b416:	6923      	ldr	r3, [r4, #16]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	dd64      	ble.n	800b4e6 <_strtod_l+0x8ae>
 800b41c:	4621      	mov	r1, r4
 800b41e:	2201      	movs	r2, #1
 800b420:	9805      	ldr	r0, [sp, #20]
 800b422:	f7ff f997 	bl	800a754 <__lshift>
 800b426:	4629      	mov	r1, r5
 800b428:	4604      	mov	r4, r0
 800b42a:	f7ff f9ff 	bl	800a82c <__mcmp>
 800b42e:	2800      	cmp	r0, #0
 800b430:	dd59      	ble.n	800b4e6 <_strtod_l+0x8ae>
 800b432:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b436:	9a06      	ldr	r2, [sp, #24]
 800b438:	0d1b      	lsrs	r3, r3, #20
 800b43a:	051b      	lsls	r3, r3, #20
 800b43c:	2a00      	cmp	r2, #0
 800b43e:	d070      	beq.n	800b522 <_strtod_l+0x8ea>
 800b440:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b444:	d86d      	bhi.n	800b522 <_strtod_l+0x8ea>
 800b446:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b44a:	f67f ae99 	bls.w	800b180 <_strtod_l+0x548>
 800b44e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b480 <_strtod_l+0x848>
 800b452:	ec4b ab16 	vmov	d6, sl, fp
 800b456:	4b0e      	ldr	r3, [pc, #56]	@ (800b490 <_strtod_l+0x858>)
 800b458:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b45c:	ee17 2a90 	vmov	r2, s15
 800b460:	4013      	ands	r3, r2
 800b462:	ec5b ab17 	vmov	sl, fp, d7
 800b466:	2b00      	cmp	r3, #0
 800b468:	f47f ae01 	bne.w	800b06e <_strtod_l+0x436>
 800b46c:	9a05      	ldr	r2, [sp, #20]
 800b46e:	2322      	movs	r3, #34	@ 0x22
 800b470:	6013      	str	r3, [r2, #0]
 800b472:	e5fc      	b.n	800b06e <_strtod_l+0x436>
 800b474:	f3af 8000 	nop.w
 800b478:	ffc00000 	.word	0xffc00000
 800b47c:	41dfffff 	.word	0x41dfffff
 800b480:	00000000 	.word	0x00000000
 800b484:	39500000 	.word	0x39500000
 800b488:	0800d7b8 	.word	0x0800d7b8
 800b48c:	fffffc02 	.word	0xfffffc02
 800b490:	7ff00000 	.word	0x7ff00000
 800b494:	46d9      	mov	r9, fp
 800b496:	d15d      	bne.n	800b554 <_strtod_l+0x91c>
 800b498:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b49c:	f1b8 0f00 	cmp.w	r8, #0
 800b4a0:	d02a      	beq.n	800b4f8 <_strtod_l+0x8c0>
 800b4a2:	4aab      	ldr	r2, [pc, #684]	@ (800b750 <_strtod_l+0xb18>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d12a      	bne.n	800b4fe <_strtod_l+0x8c6>
 800b4a8:	9b06      	ldr	r3, [sp, #24]
 800b4aa:	4652      	mov	r2, sl
 800b4ac:	b1fb      	cbz	r3, 800b4ee <_strtod_l+0x8b6>
 800b4ae:	4ba9      	ldr	r3, [pc, #676]	@ (800b754 <_strtod_l+0xb1c>)
 800b4b0:	ea0b 0303 	and.w	r3, fp, r3
 800b4b4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b4b8:	f04f 31ff 	mov.w	r1, #4294967295
 800b4bc:	d81a      	bhi.n	800b4f4 <_strtod_l+0x8bc>
 800b4be:	0d1b      	lsrs	r3, r3, #20
 800b4c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d118      	bne.n	800b4fe <_strtod_l+0x8c6>
 800b4cc:	4ba2      	ldr	r3, [pc, #648]	@ (800b758 <_strtod_l+0xb20>)
 800b4ce:	4599      	cmp	r9, r3
 800b4d0:	d102      	bne.n	800b4d8 <_strtod_l+0x8a0>
 800b4d2:	3201      	adds	r2, #1
 800b4d4:	f43f adc0 	beq.w	800b058 <_strtod_l+0x420>
 800b4d8:	4b9e      	ldr	r3, [pc, #632]	@ (800b754 <_strtod_l+0xb1c>)
 800b4da:	ea09 0303 	and.w	r3, r9, r3
 800b4de:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800b4e2:	f04f 0a00 	mov.w	sl, #0
 800b4e6:	9b06      	ldr	r3, [sp, #24]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d1b0      	bne.n	800b44e <_strtod_l+0x816>
 800b4ec:	e5bf      	b.n	800b06e <_strtod_l+0x436>
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f2:	e7e9      	b.n	800b4c8 <_strtod_l+0x890>
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e7e7      	b.n	800b4c8 <_strtod_l+0x890>
 800b4f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b4fc:	d099      	beq.n	800b432 <_strtod_l+0x7fa>
 800b4fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b500:	b1c3      	cbz	r3, 800b534 <_strtod_l+0x8fc>
 800b502:	ea13 0f09 	tst.w	r3, r9
 800b506:	d0ee      	beq.n	800b4e6 <_strtod_l+0x8ae>
 800b508:	9a06      	ldr	r2, [sp, #24]
 800b50a:	4650      	mov	r0, sl
 800b50c:	4659      	mov	r1, fp
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d013      	beq.n	800b53c <_strtod_l+0x904>
 800b514:	f7ff fb75 	bl	800ac02 <sulp>
 800b518:	ee39 7b00 	vadd.f64	d7, d9, d0
 800b51c:	ec5b ab17 	vmov	sl, fp, d7
 800b520:	e7e1      	b.n	800b4e6 <_strtod_l+0x8ae>
 800b522:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b526:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b52a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b52e:	f04f 3aff 	mov.w	sl, #4294967295
 800b532:	e7d8      	b.n	800b4e6 <_strtod_l+0x8ae>
 800b534:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b536:	ea13 0f0a 	tst.w	r3, sl
 800b53a:	e7e4      	b.n	800b506 <_strtod_l+0x8ce>
 800b53c:	f7ff fb61 	bl	800ac02 <sulp>
 800b540:	ee39 0b40 	vsub.f64	d0, d9, d0
 800b544:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54c:	ec5b ab10 	vmov	sl, fp, d0
 800b550:	d1c9      	bne.n	800b4e6 <_strtod_l+0x8ae>
 800b552:	e615      	b.n	800b180 <_strtod_l+0x548>
 800b554:	4629      	mov	r1, r5
 800b556:	4620      	mov	r0, r4
 800b558:	f7ff fae0 	bl	800ab1c <__ratio>
 800b55c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800b560:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b568:	d85d      	bhi.n	800b626 <_strtod_l+0x9ee>
 800b56a:	f1b8 0f00 	cmp.w	r8, #0
 800b56e:	d164      	bne.n	800b63a <_strtod_l+0xa02>
 800b570:	f1ba 0f00 	cmp.w	sl, #0
 800b574:	d14b      	bne.n	800b60e <_strtod_l+0x9d6>
 800b576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b57a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d160      	bne.n	800b644 <_strtod_l+0xa0c>
 800b582:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800b586:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58e:	d401      	bmi.n	800b594 <_strtod_l+0x95c>
 800b590:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b594:	eeb1 ab48 	vneg.f64	d10, d8
 800b598:	486e      	ldr	r0, [pc, #440]	@ (800b754 <_strtod_l+0xb1c>)
 800b59a:	4970      	ldr	r1, [pc, #448]	@ (800b75c <_strtod_l+0xb24>)
 800b59c:	ea09 0700 	and.w	r7, r9, r0
 800b5a0:	428f      	cmp	r7, r1
 800b5a2:	ec53 2b1a 	vmov	r2, r3, d10
 800b5a6:	d17d      	bne.n	800b6a4 <_strtod_l+0xa6c>
 800b5a8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800b5ac:	ec4b ab1c 	vmov	d12, sl, fp
 800b5b0:	eeb0 0b4c 	vmov.f64	d0, d12
 800b5b4:	f7ff f9ea 	bl	800a98c <__ulp>
 800b5b8:	4866      	ldr	r0, [pc, #408]	@ (800b754 <_strtod_l+0xb1c>)
 800b5ba:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800b5be:	ee1c 3a90 	vmov	r3, s25
 800b5c2:	4a67      	ldr	r2, [pc, #412]	@ (800b760 <_strtod_l+0xb28>)
 800b5c4:	ea03 0100 	and.w	r1, r3, r0
 800b5c8:	4291      	cmp	r1, r2
 800b5ca:	ec5b ab1c 	vmov	sl, fp, d12
 800b5ce:	d93c      	bls.n	800b64a <_strtod_l+0xa12>
 800b5d0:	ee19 2a90 	vmov	r2, s19
 800b5d4:	4b60      	ldr	r3, [pc, #384]	@ (800b758 <_strtod_l+0xb20>)
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d104      	bne.n	800b5e4 <_strtod_l+0x9ac>
 800b5da:	ee19 3a10 	vmov	r3, s18
 800b5de:	3301      	adds	r3, #1
 800b5e0:	f43f ad3a 	beq.w	800b058 <_strtod_l+0x420>
 800b5e4:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800b758 <_strtod_l+0xb20>
 800b5e8:	f04f 3aff 	mov.w	sl, #4294967295
 800b5ec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b5ee:	9805      	ldr	r0, [sp, #20]
 800b5f0:	f7fe fe98 	bl	800a324 <_Bfree>
 800b5f4:	9805      	ldr	r0, [sp, #20]
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	f7fe fe94 	bl	800a324 <_Bfree>
 800b5fc:	9805      	ldr	r0, [sp, #20]
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7fe fe90 	bl	800a324 <_Bfree>
 800b604:	9805      	ldr	r0, [sp, #20]
 800b606:	4621      	mov	r1, r4
 800b608:	f7fe fe8c 	bl	800a324 <_Bfree>
 800b60c:	e625      	b.n	800b25a <_strtod_l+0x622>
 800b60e:	f1ba 0f01 	cmp.w	sl, #1
 800b612:	d103      	bne.n	800b61c <_strtod_l+0x9e4>
 800b614:	f1bb 0f00 	cmp.w	fp, #0
 800b618:	f43f adb2 	beq.w	800b180 <_strtod_l+0x548>
 800b61c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b620:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800b624:	e7b8      	b.n	800b598 <_strtod_l+0x960>
 800b626:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800b62a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	d0af      	beq.n	800b594 <_strtod_l+0x95c>
 800b634:	eeb0 ab48 	vmov.f64	d10, d8
 800b638:	e7ae      	b.n	800b598 <_strtod_l+0x960>
 800b63a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800b63e:	eeb0 8b4a 	vmov.f64	d8, d10
 800b642:	e7a9      	b.n	800b598 <_strtod_l+0x960>
 800b644:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800b648:	e7a6      	b.n	800b598 <_strtod_l+0x960>
 800b64a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b64e:	9b06      	ldr	r3, [sp, #24]
 800b650:	46d9      	mov	r9, fp
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1ca      	bne.n	800b5ec <_strtod_l+0x9b4>
 800b656:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b65a:	0d1b      	lsrs	r3, r3, #20
 800b65c:	051b      	lsls	r3, r3, #20
 800b65e:	429f      	cmp	r7, r3
 800b660:	d1c4      	bne.n	800b5ec <_strtod_l+0x9b4>
 800b662:	ec51 0b18 	vmov	r0, r1, d8
 800b666:	f7f5 f867 	bl	8000738 <__aeabi_d2lz>
 800b66a:	f7f5 f81f 	bl	80006ac <__aeabi_l2d>
 800b66e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800b672:	ec41 0b17 	vmov	d7, r0, r1
 800b676:	ea49 090a 	orr.w	r9, r9, sl
 800b67a:	ea59 0908 	orrs.w	r9, r9, r8
 800b67e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b682:	d03c      	beq.n	800b6fe <_strtod_l+0xac6>
 800b684:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800b738 <_strtod_l+0xb00>
 800b688:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b690:	f53f aced 	bmi.w	800b06e <_strtod_l+0x436>
 800b694:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800b740 <_strtod_l+0xb08>
 800b698:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a0:	dda4      	ble.n	800b5ec <_strtod_l+0x9b4>
 800b6a2:	e4e4      	b.n	800b06e <_strtod_l+0x436>
 800b6a4:	9906      	ldr	r1, [sp, #24]
 800b6a6:	b1e1      	cbz	r1, 800b6e2 <_strtod_l+0xaaa>
 800b6a8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800b6ac:	d819      	bhi.n	800b6e2 <_strtod_l+0xaaa>
 800b6ae:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800b6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b6:	d811      	bhi.n	800b6dc <_strtod_l+0xaa4>
 800b6b8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800b6bc:	ee18 3a10 	vmov	r3, s16
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	bf38      	it	cc
 800b6c4:	2301      	movcc	r3, #1
 800b6c6:	ee08 3a10 	vmov	s16, r3
 800b6ca:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800b6ce:	f1b8 0f00 	cmp.w	r8, #0
 800b6d2:	d111      	bne.n	800b6f8 <_strtod_l+0xac0>
 800b6d4:	eeb1 7b48 	vneg.f64	d7, d8
 800b6d8:	ec53 2b17 	vmov	r2, r3, d7
 800b6dc:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800b6e0:	1bcb      	subs	r3, r1, r7
 800b6e2:	eeb0 0b49 	vmov.f64	d0, d9
 800b6e6:	ec43 2b1a 	vmov	d10, r2, r3
 800b6ea:	f7ff f94f 	bl	800a98c <__ulp>
 800b6ee:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800b6f2:	ec5b ab19 	vmov	sl, fp, d9
 800b6f6:	e7aa      	b.n	800b64e <_strtod_l+0xa16>
 800b6f8:	eeb0 7b48 	vmov.f64	d7, d8
 800b6fc:	e7ec      	b.n	800b6d8 <_strtod_l+0xaa0>
 800b6fe:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800b748 <_strtod_l+0xb10>
 800b702:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b70a:	f57f af6f 	bpl.w	800b5ec <_strtod_l+0x9b4>
 800b70e:	e4ae      	b.n	800b06e <_strtod_l+0x436>
 800b710:	2300      	movs	r3, #0
 800b712:	9308      	str	r3, [sp, #32]
 800b714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b716:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	f7ff bacc 	b.w	800acb6 <_strtod_l+0x7e>
 800b71e:	2a65      	cmp	r2, #101	@ 0x65
 800b720:	f43f abbc 	beq.w	800ae9c <_strtod_l+0x264>
 800b724:	2a45      	cmp	r2, #69	@ 0x45
 800b726:	f43f abb9 	beq.w	800ae9c <_strtod_l+0x264>
 800b72a:	2301      	movs	r3, #1
 800b72c:	9306      	str	r3, [sp, #24]
 800b72e:	f7ff bbf0 	b.w	800af12 <_strtod_l+0x2da>
 800b732:	bf00      	nop
 800b734:	f3af 8000 	nop.w
 800b738:	94a03595 	.word	0x94a03595
 800b73c:	3fdfffff 	.word	0x3fdfffff
 800b740:	35afe535 	.word	0x35afe535
 800b744:	3fe00000 	.word	0x3fe00000
 800b748:	94a03595 	.word	0x94a03595
 800b74c:	3fcfffff 	.word	0x3fcfffff
 800b750:	000fffff 	.word	0x000fffff
 800b754:	7ff00000 	.word	0x7ff00000
 800b758:	7fefffff 	.word	0x7fefffff
 800b75c:	7fe00000 	.word	0x7fe00000
 800b760:	7c9fffff 	.word	0x7c9fffff

0800b764 <_strtod_r>:
 800b764:	4b01      	ldr	r3, [pc, #4]	@ (800b76c <_strtod_r+0x8>)
 800b766:	f7ff ba67 	b.w	800ac38 <_strtod_l>
 800b76a:	bf00      	nop
 800b76c:	24000070 	.word	0x24000070

0800b770 <_strtol_l.constprop.0>:
 800b770:	2b24      	cmp	r3, #36	@ 0x24
 800b772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b776:	4686      	mov	lr, r0
 800b778:	4690      	mov	r8, r2
 800b77a:	d801      	bhi.n	800b780 <_strtol_l.constprop.0+0x10>
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d106      	bne.n	800b78e <_strtol_l.constprop.0+0x1e>
 800b780:	f7fd fe7e 	bl	8009480 <__errno>
 800b784:	2316      	movs	r3, #22
 800b786:	6003      	str	r3, [r0, #0]
 800b788:	2000      	movs	r0, #0
 800b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b78e:	4834      	ldr	r0, [pc, #208]	@ (800b860 <_strtol_l.constprop.0+0xf0>)
 800b790:	460d      	mov	r5, r1
 800b792:	462a      	mov	r2, r5
 800b794:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b798:	5d06      	ldrb	r6, [r0, r4]
 800b79a:	f016 0608 	ands.w	r6, r6, #8
 800b79e:	d1f8      	bne.n	800b792 <_strtol_l.constprop.0+0x22>
 800b7a0:	2c2d      	cmp	r4, #45	@ 0x2d
 800b7a2:	d12d      	bne.n	800b800 <_strtol_l.constprop.0+0x90>
 800b7a4:	782c      	ldrb	r4, [r5, #0]
 800b7a6:	2601      	movs	r6, #1
 800b7a8:	1c95      	adds	r5, r2, #2
 800b7aa:	f033 0210 	bics.w	r2, r3, #16
 800b7ae:	d109      	bne.n	800b7c4 <_strtol_l.constprop.0+0x54>
 800b7b0:	2c30      	cmp	r4, #48	@ 0x30
 800b7b2:	d12a      	bne.n	800b80a <_strtol_l.constprop.0+0x9a>
 800b7b4:	782a      	ldrb	r2, [r5, #0]
 800b7b6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b7ba:	2a58      	cmp	r2, #88	@ 0x58
 800b7bc:	d125      	bne.n	800b80a <_strtol_l.constprop.0+0x9a>
 800b7be:	786c      	ldrb	r4, [r5, #1]
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	3502      	adds	r5, #2
 800b7c4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b7c8:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	fbbc f9f3 	udiv	r9, ip, r3
 800b7d2:	4610      	mov	r0, r2
 800b7d4:	fb03 ca19 	mls	sl, r3, r9, ip
 800b7d8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7dc:	2f09      	cmp	r7, #9
 800b7de:	d81b      	bhi.n	800b818 <_strtol_l.constprop.0+0xa8>
 800b7e0:	463c      	mov	r4, r7
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	dd27      	ble.n	800b836 <_strtol_l.constprop.0+0xc6>
 800b7e6:	1c57      	adds	r7, r2, #1
 800b7e8:	d007      	beq.n	800b7fa <_strtol_l.constprop.0+0x8a>
 800b7ea:	4581      	cmp	r9, r0
 800b7ec:	d320      	bcc.n	800b830 <_strtol_l.constprop.0+0xc0>
 800b7ee:	d101      	bne.n	800b7f4 <_strtol_l.constprop.0+0x84>
 800b7f0:	45a2      	cmp	sl, r4
 800b7f2:	db1d      	blt.n	800b830 <_strtol_l.constprop.0+0xc0>
 800b7f4:	fb00 4003 	mla	r0, r0, r3, r4
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7fe:	e7eb      	b.n	800b7d8 <_strtol_l.constprop.0+0x68>
 800b800:	2c2b      	cmp	r4, #43	@ 0x2b
 800b802:	bf04      	itt	eq
 800b804:	782c      	ldrbeq	r4, [r5, #0]
 800b806:	1c95      	addeq	r5, r2, #2
 800b808:	e7cf      	b.n	800b7aa <_strtol_l.constprop.0+0x3a>
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1da      	bne.n	800b7c4 <_strtol_l.constprop.0+0x54>
 800b80e:	2c30      	cmp	r4, #48	@ 0x30
 800b810:	bf0c      	ite	eq
 800b812:	2308      	moveq	r3, #8
 800b814:	230a      	movne	r3, #10
 800b816:	e7d5      	b.n	800b7c4 <_strtol_l.constprop.0+0x54>
 800b818:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b81c:	2f19      	cmp	r7, #25
 800b81e:	d801      	bhi.n	800b824 <_strtol_l.constprop.0+0xb4>
 800b820:	3c37      	subs	r4, #55	@ 0x37
 800b822:	e7de      	b.n	800b7e2 <_strtol_l.constprop.0+0x72>
 800b824:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b828:	2f19      	cmp	r7, #25
 800b82a:	d804      	bhi.n	800b836 <_strtol_l.constprop.0+0xc6>
 800b82c:	3c57      	subs	r4, #87	@ 0x57
 800b82e:	e7d8      	b.n	800b7e2 <_strtol_l.constprop.0+0x72>
 800b830:	f04f 32ff 	mov.w	r2, #4294967295
 800b834:	e7e1      	b.n	800b7fa <_strtol_l.constprop.0+0x8a>
 800b836:	1c53      	adds	r3, r2, #1
 800b838:	d108      	bne.n	800b84c <_strtol_l.constprop.0+0xdc>
 800b83a:	2322      	movs	r3, #34	@ 0x22
 800b83c:	f8ce 3000 	str.w	r3, [lr]
 800b840:	4660      	mov	r0, ip
 800b842:	f1b8 0f00 	cmp.w	r8, #0
 800b846:	d0a0      	beq.n	800b78a <_strtol_l.constprop.0+0x1a>
 800b848:	1e69      	subs	r1, r5, #1
 800b84a:	e006      	b.n	800b85a <_strtol_l.constprop.0+0xea>
 800b84c:	b106      	cbz	r6, 800b850 <_strtol_l.constprop.0+0xe0>
 800b84e:	4240      	negs	r0, r0
 800b850:	f1b8 0f00 	cmp.w	r8, #0
 800b854:	d099      	beq.n	800b78a <_strtol_l.constprop.0+0x1a>
 800b856:	2a00      	cmp	r2, #0
 800b858:	d1f6      	bne.n	800b848 <_strtol_l.constprop.0+0xd8>
 800b85a:	f8c8 1000 	str.w	r1, [r8]
 800b85e:	e794      	b.n	800b78a <_strtol_l.constprop.0+0x1a>
 800b860:	0800d7e1 	.word	0x0800d7e1

0800b864 <_strtol_r>:
 800b864:	f7ff bf84 	b.w	800b770 <_strtol_l.constprop.0>

0800b868 <__ssputs_r>:
 800b868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86c:	688e      	ldr	r6, [r1, #8]
 800b86e:	461f      	mov	r7, r3
 800b870:	42be      	cmp	r6, r7
 800b872:	680b      	ldr	r3, [r1, #0]
 800b874:	4682      	mov	sl, r0
 800b876:	460c      	mov	r4, r1
 800b878:	4690      	mov	r8, r2
 800b87a:	d82d      	bhi.n	800b8d8 <__ssputs_r+0x70>
 800b87c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b880:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b884:	d026      	beq.n	800b8d4 <__ssputs_r+0x6c>
 800b886:	6965      	ldr	r5, [r4, #20]
 800b888:	6909      	ldr	r1, [r1, #16]
 800b88a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b88e:	eba3 0901 	sub.w	r9, r3, r1
 800b892:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b896:	1c7b      	adds	r3, r7, #1
 800b898:	444b      	add	r3, r9
 800b89a:	106d      	asrs	r5, r5, #1
 800b89c:	429d      	cmp	r5, r3
 800b89e:	bf38      	it	cc
 800b8a0:	461d      	movcc	r5, r3
 800b8a2:	0553      	lsls	r3, r2, #21
 800b8a4:	d527      	bpl.n	800b8f6 <__ssputs_r+0x8e>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	f7fe fc70 	bl	800a18c <_malloc_r>
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	b360      	cbz	r0, 800b90a <__ssputs_r+0xa2>
 800b8b0:	6921      	ldr	r1, [r4, #16]
 800b8b2:	464a      	mov	r2, r9
 800b8b4:	f000 fa18 	bl	800bce8 <memcpy>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	6126      	str	r6, [r4, #16]
 800b8c6:	6165      	str	r5, [r4, #20]
 800b8c8:	444e      	add	r6, r9
 800b8ca:	eba5 0509 	sub.w	r5, r5, r9
 800b8ce:	6026      	str	r6, [r4, #0]
 800b8d0:	60a5      	str	r5, [r4, #8]
 800b8d2:	463e      	mov	r6, r7
 800b8d4:	42be      	cmp	r6, r7
 800b8d6:	d900      	bls.n	800b8da <__ssputs_r+0x72>
 800b8d8:	463e      	mov	r6, r7
 800b8da:	6820      	ldr	r0, [r4, #0]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4641      	mov	r1, r8
 800b8e0:	f000 f9c6 	bl	800bc70 <memmove>
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	1b9b      	subs	r3, r3, r6
 800b8e8:	60a3      	str	r3, [r4, #8]
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	4433      	add	r3, r6
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	f000 fd8b 	bl	800c412 <_realloc_r>
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1e0      	bne.n	800b8c4 <__ssputs_r+0x5c>
 800b902:	6921      	ldr	r1, [r4, #16]
 800b904:	4650      	mov	r0, sl
 800b906:	f7fe fbcd 	bl	800a0a4 <_free_r>
 800b90a:	230c      	movs	r3, #12
 800b90c:	f8ca 3000 	str.w	r3, [sl]
 800b910:	89a3      	ldrh	r3, [r4, #12]
 800b912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b916:	81a3      	strh	r3, [r4, #12]
 800b918:	f04f 30ff 	mov.w	r0, #4294967295
 800b91c:	e7e9      	b.n	800b8f2 <__ssputs_r+0x8a>
	...

0800b920 <_svfiprintf_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	4698      	mov	r8, r3
 800b926:	898b      	ldrh	r3, [r1, #12]
 800b928:	061b      	lsls	r3, r3, #24
 800b92a:	b09d      	sub	sp, #116	@ 0x74
 800b92c:	4607      	mov	r7, r0
 800b92e:	460d      	mov	r5, r1
 800b930:	4614      	mov	r4, r2
 800b932:	d510      	bpl.n	800b956 <_svfiprintf_r+0x36>
 800b934:	690b      	ldr	r3, [r1, #16]
 800b936:	b973      	cbnz	r3, 800b956 <_svfiprintf_r+0x36>
 800b938:	2140      	movs	r1, #64	@ 0x40
 800b93a:	f7fe fc27 	bl	800a18c <_malloc_r>
 800b93e:	6028      	str	r0, [r5, #0]
 800b940:	6128      	str	r0, [r5, #16]
 800b942:	b930      	cbnz	r0, 800b952 <_svfiprintf_r+0x32>
 800b944:	230c      	movs	r3, #12
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
 800b94c:	b01d      	add	sp, #116	@ 0x74
 800b94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b952:	2340      	movs	r3, #64	@ 0x40
 800b954:	616b      	str	r3, [r5, #20]
 800b956:	2300      	movs	r3, #0
 800b958:	9309      	str	r3, [sp, #36]	@ 0x24
 800b95a:	2320      	movs	r3, #32
 800b95c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b960:	f8cd 800c 	str.w	r8, [sp, #12]
 800b964:	2330      	movs	r3, #48	@ 0x30
 800b966:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bb04 <_svfiprintf_r+0x1e4>
 800b96a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b96e:	f04f 0901 	mov.w	r9, #1
 800b972:	4623      	mov	r3, r4
 800b974:	469a      	mov	sl, r3
 800b976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b97a:	b10a      	cbz	r2, 800b980 <_svfiprintf_r+0x60>
 800b97c:	2a25      	cmp	r2, #37	@ 0x25
 800b97e:	d1f9      	bne.n	800b974 <_svfiprintf_r+0x54>
 800b980:	ebba 0b04 	subs.w	fp, sl, r4
 800b984:	d00b      	beq.n	800b99e <_svfiprintf_r+0x7e>
 800b986:	465b      	mov	r3, fp
 800b988:	4622      	mov	r2, r4
 800b98a:	4629      	mov	r1, r5
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff ff6b 	bl	800b868 <__ssputs_r>
 800b992:	3001      	adds	r0, #1
 800b994:	f000 80a7 	beq.w	800bae6 <_svfiprintf_r+0x1c6>
 800b998:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b99a:	445a      	add	r2, fp
 800b99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b99e:	f89a 3000 	ldrb.w	r3, [sl]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 809f 	beq.w	800bae6 <_svfiprintf_r+0x1c6>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9b2:	f10a 0a01 	add.w	sl, sl, #1
 800b9b6:	9304      	str	r3, [sp, #16]
 800b9b8:	9307      	str	r3, [sp, #28]
 800b9ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9be:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9c0:	4654      	mov	r4, sl
 800b9c2:	2205      	movs	r2, #5
 800b9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c8:	484e      	ldr	r0, [pc, #312]	@ (800bb04 <_svfiprintf_r+0x1e4>)
 800b9ca:	f7f4 fc89 	bl	80002e0 <memchr>
 800b9ce:	9a04      	ldr	r2, [sp, #16]
 800b9d0:	b9d8      	cbnz	r0, 800ba0a <_svfiprintf_r+0xea>
 800b9d2:	06d0      	lsls	r0, r2, #27
 800b9d4:	bf44      	itt	mi
 800b9d6:	2320      	movmi	r3, #32
 800b9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9dc:	0711      	lsls	r1, r2, #28
 800b9de:	bf44      	itt	mi
 800b9e0:	232b      	movmi	r3, #43	@ 0x2b
 800b9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ec:	d015      	beq.n	800ba1a <_svfiprintf_r+0xfa>
 800b9ee:	9a07      	ldr	r2, [sp, #28]
 800b9f0:	4654      	mov	r4, sl
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	f04f 0c0a 	mov.w	ip, #10
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9fe:	3b30      	subs	r3, #48	@ 0x30
 800ba00:	2b09      	cmp	r3, #9
 800ba02:	d94b      	bls.n	800ba9c <_svfiprintf_r+0x17c>
 800ba04:	b1b0      	cbz	r0, 800ba34 <_svfiprintf_r+0x114>
 800ba06:	9207      	str	r2, [sp, #28]
 800ba08:	e014      	b.n	800ba34 <_svfiprintf_r+0x114>
 800ba0a:	eba0 0308 	sub.w	r3, r0, r8
 800ba0e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba12:	4313      	orrs	r3, r2
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	46a2      	mov	sl, r4
 800ba18:	e7d2      	b.n	800b9c0 <_svfiprintf_r+0xa0>
 800ba1a:	9b03      	ldr	r3, [sp, #12]
 800ba1c:	1d19      	adds	r1, r3, #4
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	9103      	str	r1, [sp, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bfbb      	ittet	lt
 800ba26:	425b      	neglt	r3, r3
 800ba28:	f042 0202 	orrlt.w	r2, r2, #2
 800ba2c:	9307      	strge	r3, [sp, #28]
 800ba2e:	9307      	strlt	r3, [sp, #28]
 800ba30:	bfb8      	it	lt
 800ba32:	9204      	strlt	r2, [sp, #16]
 800ba34:	7823      	ldrb	r3, [r4, #0]
 800ba36:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba38:	d10a      	bne.n	800ba50 <_svfiprintf_r+0x130>
 800ba3a:	7863      	ldrb	r3, [r4, #1]
 800ba3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba3e:	d132      	bne.n	800baa6 <_svfiprintf_r+0x186>
 800ba40:	9b03      	ldr	r3, [sp, #12]
 800ba42:	1d1a      	adds	r2, r3, #4
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	9203      	str	r2, [sp, #12]
 800ba48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba4c:	3402      	adds	r4, #2
 800ba4e:	9305      	str	r3, [sp, #20]
 800ba50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bb14 <_svfiprintf_r+0x1f4>
 800ba54:	7821      	ldrb	r1, [r4, #0]
 800ba56:	2203      	movs	r2, #3
 800ba58:	4650      	mov	r0, sl
 800ba5a:	f7f4 fc41 	bl	80002e0 <memchr>
 800ba5e:	b138      	cbz	r0, 800ba70 <_svfiprintf_r+0x150>
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	eba0 000a 	sub.w	r0, r0, sl
 800ba66:	2240      	movs	r2, #64	@ 0x40
 800ba68:	4082      	lsls	r2, r0
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	3401      	adds	r4, #1
 800ba6e:	9304      	str	r3, [sp, #16]
 800ba70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba74:	4824      	ldr	r0, [pc, #144]	@ (800bb08 <_svfiprintf_r+0x1e8>)
 800ba76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba7a:	2206      	movs	r2, #6
 800ba7c:	f7f4 fc30 	bl	80002e0 <memchr>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d036      	beq.n	800baf2 <_svfiprintf_r+0x1d2>
 800ba84:	4b21      	ldr	r3, [pc, #132]	@ (800bb0c <_svfiprintf_r+0x1ec>)
 800ba86:	bb1b      	cbnz	r3, 800bad0 <_svfiprintf_r+0x1b0>
 800ba88:	9b03      	ldr	r3, [sp, #12]
 800ba8a:	3307      	adds	r3, #7
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	3308      	adds	r3, #8
 800ba92:	9303      	str	r3, [sp, #12]
 800ba94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba96:	4433      	add	r3, r6
 800ba98:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba9a:	e76a      	b.n	800b972 <_svfiprintf_r+0x52>
 800ba9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800baa0:	460c      	mov	r4, r1
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7a8      	b.n	800b9f8 <_svfiprintf_r+0xd8>
 800baa6:	2300      	movs	r3, #0
 800baa8:	3401      	adds	r4, #1
 800baaa:	9305      	str	r3, [sp, #20]
 800baac:	4619      	mov	r1, r3
 800baae:	f04f 0c0a 	mov.w	ip, #10
 800bab2:	4620      	mov	r0, r4
 800bab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab8:	3a30      	subs	r2, #48	@ 0x30
 800baba:	2a09      	cmp	r2, #9
 800babc:	d903      	bls.n	800bac6 <_svfiprintf_r+0x1a6>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d0c6      	beq.n	800ba50 <_svfiprintf_r+0x130>
 800bac2:	9105      	str	r1, [sp, #20]
 800bac4:	e7c4      	b.n	800ba50 <_svfiprintf_r+0x130>
 800bac6:	fb0c 2101 	mla	r1, ip, r1, r2
 800baca:	4604      	mov	r4, r0
 800bacc:	2301      	movs	r3, #1
 800bace:	e7f0      	b.n	800bab2 <_svfiprintf_r+0x192>
 800bad0:	ab03      	add	r3, sp, #12
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	462a      	mov	r2, r5
 800bad6:	4b0e      	ldr	r3, [pc, #56]	@ (800bb10 <_svfiprintf_r+0x1f0>)
 800bad8:	a904      	add	r1, sp, #16
 800bada:	4638      	mov	r0, r7
 800badc:	f7fc fda4 	bl	8008628 <_printf_float>
 800bae0:	1c42      	adds	r2, r0, #1
 800bae2:	4606      	mov	r6, r0
 800bae4:	d1d6      	bne.n	800ba94 <_svfiprintf_r+0x174>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	065b      	lsls	r3, r3, #25
 800baea:	f53f af2d 	bmi.w	800b948 <_svfiprintf_r+0x28>
 800baee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baf0:	e72c      	b.n	800b94c <_svfiprintf_r+0x2c>
 800baf2:	ab03      	add	r3, sp, #12
 800baf4:	9300      	str	r3, [sp, #0]
 800baf6:	462a      	mov	r2, r5
 800baf8:	4b05      	ldr	r3, [pc, #20]	@ (800bb10 <_svfiprintf_r+0x1f0>)
 800bafa:	a904      	add	r1, sp, #16
 800bafc:	4638      	mov	r0, r7
 800bafe:	f7fd f81b 	bl	8008b38 <_printf_i>
 800bb02:	e7ed      	b.n	800bae0 <_svfiprintf_r+0x1c0>
 800bb04:	0800d8e1 	.word	0x0800d8e1
 800bb08:	0800d8eb 	.word	0x0800d8eb
 800bb0c:	08008629 	.word	0x08008629
 800bb10:	0800b869 	.word	0x0800b869
 800bb14:	0800d8e7 	.word	0x0800d8e7

0800bb18 <__sflush_r>:
 800bb18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb20:	0716      	lsls	r6, r2, #28
 800bb22:	4605      	mov	r5, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	d454      	bmi.n	800bbd2 <__sflush_r+0xba>
 800bb28:	684b      	ldr	r3, [r1, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	dc02      	bgt.n	800bb34 <__sflush_r+0x1c>
 800bb2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	dd48      	ble.n	800bbc6 <__sflush_r+0xae>
 800bb34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb36:	2e00      	cmp	r6, #0
 800bb38:	d045      	beq.n	800bbc6 <__sflush_r+0xae>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb40:	682f      	ldr	r7, [r5, #0]
 800bb42:	6a21      	ldr	r1, [r4, #32]
 800bb44:	602b      	str	r3, [r5, #0]
 800bb46:	d030      	beq.n	800bbaa <__sflush_r+0x92>
 800bb48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb4a:	89a3      	ldrh	r3, [r4, #12]
 800bb4c:	0759      	lsls	r1, r3, #29
 800bb4e:	d505      	bpl.n	800bb5c <__sflush_r+0x44>
 800bb50:	6863      	ldr	r3, [r4, #4]
 800bb52:	1ad2      	subs	r2, r2, r3
 800bb54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb56:	b10b      	cbz	r3, 800bb5c <__sflush_r+0x44>
 800bb58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb5a:	1ad2      	subs	r2, r2, r3
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb60:	6a21      	ldr	r1, [r4, #32]
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b0      	blx	r6
 800bb66:	1c43      	adds	r3, r0, #1
 800bb68:	89a3      	ldrh	r3, [r4, #12]
 800bb6a:	d106      	bne.n	800bb7a <__sflush_r+0x62>
 800bb6c:	6829      	ldr	r1, [r5, #0]
 800bb6e:	291d      	cmp	r1, #29
 800bb70:	d82b      	bhi.n	800bbca <__sflush_r+0xb2>
 800bb72:	4a2a      	ldr	r2, [pc, #168]	@ (800bc1c <__sflush_r+0x104>)
 800bb74:	410a      	asrs	r2, r1
 800bb76:	07d6      	lsls	r6, r2, #31
 800bb78:	d427      	bmi.n	800bbca <__sflush_r+0xb2>
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	6062      	str	r2, [r4, #4]
 800bb7e:	04d9      	lsls	r1, r3, #19
 800bb80:	6922      	ldr	r2, [r4, #16]
 800bb82:	6022      	str	r2, [r4, #0]
 800bb84:	d504      	bpl.n	800bb90 <__sflush_r+0x78>
 800bb86:	1c42      	adds	r2, r0, #1
 800bb88:	d101      	bne.n	800bb8e <__sflush_r+0x76>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	b903      	cbnz	r3, 800bb90 <__sflush_r+0x78>
 800bb8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb92:	602f      	str	r7, [r5, #0]
 800bb94:	b1b9      	cbz	r1, 800bbc6 <__sflush_r+0xae>
 800bb96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb9a:	4299      	cmp	r1, r3
 800bb9c:	d002      	beq.n	800bba4 <__sflush_r+0x8c>
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f7fe fa80 	bl	800a0a4 <_free_r>
 800bba4:	2300      	movs	r3, #0
 800bba6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bba8:	e00d      	b.n	800bbc6 <__sflush_r+0xae>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4628      	mov	r0, r5
 800bbae:	47b0      	blx	r6
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	1c50      	adds	r0, r2, #1
 800bbb4:	d1c9      	bne.n	800bb4a <__sflush_r+0x32>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0c6      	beq.n	800bb4a <__sflush_r+0x32>
 800bbbc:	2b1d      	cmp	r3, #29
 800bbbe:	d001      	beq.n	800bbc4 <__sflush_r+0xac>
 800bbc0:	2b16      	cmp	r3, #22
 800bbc2:	d11e      	bne.n	800bc02 <__sflush_r+0xea>
 800bbc4:	602f      	str	r7, [r5, #0]
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e022      	b.n	800bc10 <__sflush_r+0xf8>
 800bbca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbce:	b21b      	sxth	r3, r3
 800bbd0:	e01b      	b.n	800bc0a <__sflush_r+0xf2>
 800bbd2:	690f      	ldr	r7, [r1, #16]
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	d0f6      	beq.n	800bbc6 <__sflush_r+0xae>
 800bbd8:	0793      	lsls	r3, r2, #30
 800bbda:	680e      	ldr	r6, [r1, #0]
 800bbdc:	bf08      	it	eq
 800bbde:	694b      	ldreq	r3, [r1, #20]
 800bbe0:	600f      	str	r7, [r1, #0]
 800bbe2:	bf18      	it	ne
 800bbe4:	2300      	movne	r3, #0
 800bbe6:	eba6 0807 	sub.w	r8, r6, r7
 800bbea:	608b      	str	r3, [r1, #8]
 800bbec:	f1b8 0f00 	cmp.w	r8, #0
 800bbf0:	dde9      	ble.n	800bbc6 <__sflush_r+0xae>
 800bbf2:	6a21      	ldr	r1, [r4, #32]
 800bbf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbf6:	4643      	mov	r3, r8
 800bbf8:	463a      	mov	r2, r7
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	47b0      	blx	r6
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	dc08      	bgt.n	800bc14 <__sflush_r+0xfc>
 800bc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0a:	81a3      	strh	r3, [r4, #12]
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc14:	4407      	add	r7, r0
 800bc16:	eba8 0800 	sub.w	r8, r8, r0
 800bc1a:	e7e7      	b.n	800bbec <__sflush_r+0xd4>
 800bc1c:	dfbffffe 	.word	0xdfbffffe

0800bc20 <_fflush_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	690b      	ldr	r3, [r1, #16]
 800bc24:	4605      	mov	r5, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	b913      	cbnz	r3, 800bc30 <_fflush_r+0x10>
 800bc2a:	2500      	movs	r5, #0
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}
 800bc30:	b118      	cbz	r0, 800bc3a <_fflush_r+0x1a>
 800bc32:	6a03      	ldr	r3, [r0, #32]
 800bc34:	b90b      	cbnz	r3, 800bc3a <_fflush_r+0x1a>
 800bc36:	f7fd fb37 	bl	80092a8 <__sinit>
 800bc3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0f3      	beq.n	800bc2a <_fflush_r+0xa>
 800bc42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc44:	07d0      	lsls	r0, r2, #31
 800bc46:	d404      	bmi.n	800bc52 <_fflush_r+0x32>
 800bc48:	0599      	lsls	r1, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_fflush_r+0x32>
 800bc4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc4e:	f7fd fc42 	bl	80094d6 <__retarget_lock_acquire_recursive>
 800bc52:	4628      	mov	r0, r5
 800bc54:	4621      	mov	r1, r4
 800bc56:	f7ff ff5f 	bl	800bb18 <__sflush_r>
 800bc5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc5c:	07da      	lsls	r2, r3, #31
 800bc5e:	4605      	mov	r5, r0
 800bc60:	d4e4      	bmi.n	800bc2c <_fflush_r+0xc>
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	059b      	lsls	r3, r3, #22
 800bc66:	d4e1      	bmi.n	800bc2c <_fflush_r+0xc>
 800bc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc6a:	f7fd fc35 	bl	80094d8 <__retarget_lock_release_recursive>
 800bc6e:	e7dd      	b.n	800bc2c <_fflush_r+0xc>

0800bc70 <memmove>:
 800bc70:	4288      	cmp	r0, r1
 800bc72:	b510      	push	{r4, lr}
 800bc74:	eb01 0402 	add.w	r4, r1, r2
 800bc78:	d902      	bls.n	800bc80 <memmove+0x10>
 800bc7a:	4284      	cmp	r4, r0
 800bc7c:	4623      	mov	r3, r4
 800bc7e:	d807      	bhi.n	800bc90 <memmove+0x20>
 800bc80:	1e43      	subs	r3, r0, #1
 800bc82:	42a1      	cmp	r1, r4
 800bc84:	d008      	beq.n	800bc98 <memmove+0x28>
 800bc86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc8e:	e7f8      	b.n	800bc82 <memmove+0x12>
 800bc90:	4402      	add	r2, r0
 800bc92:	4601      	mov	r1, r0
 800bc94:	428a      	cmp	r2, r1
 800bc96:	d100      	bne.n	800bc9a <memmove+0x2a>
 800bc98:	bd10      	pop	{r4, pc}
 800bc9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bca2:	e7f7      	b.n	800bc94 <memmove+0x24>

0800bca4 <strncmp>:
 800bca4:	b510      	push	{r4, lr}
 800bca6:	b16a      	cbz	r2, 800bcc4 <strncmp+0x20>
 800bca8:	3901      	subs	r1, #1
 800bcaa:	1884      	adds	r4, r0, r2
 800bcac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d103      	bne.n	800bcc0 <strncmp+0x1c>
 800bcb8:	42a0      	cmp	r0, r4
 800bcba:	d001      	beq.n	800bcc0 <strncmp+0x1c>
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	d1f5      	bne.n	800bcac <strncmp+0x8>
 800bcc0:	1ad0      	subs	r0, r2, r3
 800bcc2:	bd10      	pop	{r4, pc}
 800bcc4:	4610      	mov	r0, r2
 800bcc6:	e7fc      	b.n	800bcc2 <strncmp+0x1e>

0800bcc8 <_sbrk_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d06      	ldr	r5, [pc, #24]	@ (800bce4 <_sbrk_r+0x1c>)
 800bccc:	2300      	movs	r3, #0
 800bcce:	4604      	mov	r4, r0
 800bcd0:	4608      	mov	r0, r1
 800bcd2:	602b      	str	r3, [r5, #0]
 800bcd4:	f7f6 fca8 	bl	8002628 <_sbrk>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d102      	bne.n	800bce2 <_sbrk_r+0x1a>
 800bcdc:	682b      	ldr	r3, [r5, #0]
 800bcde:	b103      	cbz	r3, 800bce2 <_sbrk_r+0x1a>
 800bce0:	6023      	str	r3, [r4, #0]
 800bce2:	bd38      	pop	{r3, r4, r5, pc}
 800bce4:	24000654 	.word	0x24000654

0800bce8 <memcpy>:
 800bce8:	440a      	add	r2, r1
 800bcea:	4291      	cmp	r1, r2
 800bcec:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcf0:	d100      	bne.n	800bcf4 <memcpy+0xc>
 800bcf2:	4770      	bx	lr
 800bcf4:	b510      	push	{r4, lr}
 800bcf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcfe:	4291      	cmp	r1, r2
 800bd00:	d1f9      	bne.n	800bcf6 <memcpy+0xe>
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	0000      	movs	r0, r0
	...

0800bd08 <nan>:
 800bd08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd10 <nan+0x8>
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	00000000 	.word	0x00000000
 800bd14:	7ff80000 	.word	0x7ff80000

0800bd18 <__assert_func>:
 800bd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd1a:	4614      	mov	r4, r2
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4b09      	ldr	r3, [pc, #36]	@ (800bd44 <__assert_func+0x2c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4605      	mov	r5, r0
 800bd24:	68d8      	ldr	r0, [r3, #12]
 800bd26:	b954      	cbnz	r4, 800bd3e <__assert_func+0x26>
 800bd28:	4b07      	ldr	r3, [pc, #28]	@ (800bd48 <__assert_func+0x30>)
 800bd2a:	461c      	mov	r4, r3
 800bd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd30:	9100      	str	r1, [sp, #0]
 800bd32:	462b      	mov	r3, r5
 800bd34:	4905      	ldr	r1, [pc, #20]	@ (800bd4c <__assert_func+0x34>)
 800bd36:	f000 fba7 	bl	800c488 <fiprintf>
 800bd3a:	f000 fbb7 	bl	800c4ac <abort>
 800bd3e:	4b04      	ldr	r3, [pc, #16]	@ (800bd50 <__assert_func+0x38>)
 800bd40:	e7f4      	b.n	800bd2c <__assert_func+0x14>
 800bd42:	bf00      	nop
 800bd44:	24000020 	.word	0x24000020
 800bd48:	0800d935 	.word	0x0800d935
 800bd4c:	0800d907 	.word	0x0800d907
 800bd50:	0800d8fa 	.word	0x0800d8fa

0800bd54 <_calloc_r>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	fba1 5402 	umull	r5, r4, r1, r2
 800bd5a:	b93c      	cbnz	r4, 800bd6c <_calloc_r+0x18>
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	f7fe fa15 	bl	800a18c <_malloc_r>
 800bd62:	4606      	mov	r6, r0
 800bd64:	b928      	cbnz	r0, 800bd72 <_calloc_r+0x1e>
 800bd66:	2600      	movs	r6, #0
 800bd68:	4630      	mov	r0, r6
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	220c      	movs	r2, #12
 800bd6e:	6002      	str	r2, [r0, #0]
 800bd70:	e7f9      	b.n	800bd66 <_calloc_r+0x12>
 800bd72:	462a      	mov	r2, r5
 800bd74:	4621      	mov	r1, r4
 800bd76:	f7fd fb30 	bl	80093da <memset>
 800bd7a:	e7f5      	b.n	800bd68 <_calloc_r+0x14>

0800bd7c <rshift>:
 800bd7c:	6903      	ldr	r3, [r0, #16]
 800bd7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bd82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bd8a:	f100 0414 	add.w	r4, r0, #20
 800bd8e:	dd45      	ble.n	800be1c <rshift+0xa0>
 800bd90:	f011 011f 	ands.w	r1, r1, #31
 800bd94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bd98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bd9c:	d10c      	bne.n	800bdb8 <rshift+0x3c>
 800bd9e:	f100 0710 	add.w	r7, r0, #16
 800bda2:	4629      	mov	r1, r5
 800bda4:	42b1      	cmp	r1, r6
 800bda6:	d334      	bcc.n	800be12 <rshift+0x96>
 800bda8:	1a9b      	subs	r3, r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	1eea      	subs	r2, r5, #3
 800bdae:	4296      	cmp	r6, r2
 800bdb0:	bf38      	it	cc
 800bdb2:	2300      	movcc	r3, #0
 800bdb4:	4423      	add	r3, r4
 800bdb6:	e015      	b.n	800bde4 <rshift+0x68>
 800bdb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bdbc:	f1c1 0820 	rsb	r8, r1, #32
 800bdc0:	40cf      	lsrs	r7, r1
 800bdc2:	f105 0e04 	add.w	lr, r5, #4
 800bdc6:	46a1      	mov	r9, r4
 800bdc8:	4576      	cmp	r6, lr
 800bdca:	46f4      	mov	ip, lr
 800bdcc:	d815      	bhi.n	800bdfa <rshift+0x7e>
 800bdce:	1a9a      	subs	r2, r3, r2
 800bdd0:	0092      	lsls	r2, r2, #2
 800bdd2:	3a04      	subs	r2, #4
 800bdd4:	3501      	adds	r5, #1
 800bdd6:	42ae      	cmp	r6, r5
 800bdd8:	bf38      	it	cc
 800bdda:	2200      	movcc	r2, #0
 800bddc:	18a3      	adds	r3, r4, r2
 800bdde:	50a7      	str	r7, [r4, r2]
 800bde0:	b107      	cbz	r7, 800bde4 <rshift+0x68>
 800bde2:	3304      	adds	r3, #4
 800bde4:	1b1a      	subs	r2, r3, r4
 800bde6:	42a3      	cmp	r3, r4
 800bde8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bdec:	bf08      	it	eq
 800bdee:	2300      	moveq	r3, #0
 800bdf0:	6102      	str	r2, [r0, #16]
 800bdf2:	bf08      	it	eq
 800bdf4:	6143      	streq	r3, [r0, #20]
 800bdf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdfa:	f8dc c000 	ldr.w	ip, [ip]
 800bdfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800be02:	ea4c 0707 	orr.w	r7, ip, r7
 800be06:	f849 7b04 	str.w	r7, [r9], #4
 800be0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be0e:	40cf      	lsrs	r7, r1
 800be10:	e7da      	b.n	800bdc8 <rshift+0x4c>
 800be12:	f851 cb04 	ldr.w	ip, [r1], #4
 800be16:	f847 cf04 	str.w	ip, [r7, #4]!
 800be1a:	e7c3      	b.n	800bda4 <rshift+0x28>
 800be1c:	4623      	mov	r3, r4
 800be1e:	e7e1      	b.n	800bde4 <rshift+0x68>

0800be20 <__hexdig_fun>:
 800be20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800be24:	2b09      	cmp	r3, #9
 800be26:	d802      	bhi.n	800be2e <__hexdig_fun+0xe>
 800be28:	3820      	subs	r0, #32
 800be2a:	b2c0      	uxtb	r0, r0
 800be2c:	4770      	bx	lr
 800be2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800be32:	2b05      	cmp	r3, #5
 800be34:	d801      	bhi.n	800be3a <__hexdig_fun+0x1a>
 800be36:	3847      	subs	r0, #71	@ 0x47
 800be38:	e7f7      	b.n	800be2a <__hexdig_fun+0xa>
 800be3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800be3e:	2b05      	cmp	r3, #5
 800be40:	d801      	bhi.n	800be46 <__hexdig_fun+0x26>
 800be42:	3827      	subs	r0, #39	@ 0x27
 800be44:	e7f1      	b.n	800be2a <__hexdig_fun+0xa>
 800be46:	2000      	movs	r0, #0
 800be48:	4770      	bx	lr
	...

0800be4c <__gethex>:
 800be4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be50:	b085      	sub	sp, #20
 800be52:	468a      	mov	sl, r1
 800be54:	9302      	str	r3, [sp, #8]
 800be56:	680b      	ldr	r3, [r1, #0]
 800be58:	9001      	str	r0, [sp, #4]
 800be5a:	4690      	mov	r8, r2
 800be5c:	1c9c      	adds	r4, r3, #2
 800be5e:	46a1      	mov	r9, r4
 800be60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800be64:	2830      	cmp	r0, #48	@ 0x30
 800be66:	d0fa      	beq.n	800be5e <__gethex+0x12>
 800be68:	eba9 0303 	sub.w	r3, r9, r3
 800be6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800be70:	f7ff ffd6 	bl	800be20 <__hexdig_fun>
 800be74:	4605      	mov	r5, r0
 800be76:	2800      	cmp	r0, #0
 800be78:	d168      	bne.n	800bf4c <__gethex+0x100>
 800be7a:	49a0      	ldr	r1, [pc, #640]	@ (800c0fc <__gethex+0x2b0>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	4648      	mov	r0, r9
 800be80:	f7ff ff10 	bl	800bca4 <strncmp>
 800be84:	4607      	mov	r7, r0
 800be86:	2800      	cmp	r0, #0
 800be88:	d167      	bne.n	800bf5a <__gethex+0x10e>
 800be8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800be8e:	4626      	mov	r6, r4
 800be90:	f7ff ffc6 	bl	800be20 <__hexdig_fun>
 800be94:	2800      	cmp	r0, #0
 800be96:	d062      	beq.n	800bf5e <__gethex+0x112>
 800be98:	4623      	mov	r3, r4
 800be9a:	7818      	ldrb	r0, [r3, #0]
 800be9c:	2830      	cmp	r0, #48	@ 0x30
 800be9e:	4699      	mov	r9, r3
 800bea0:	f103 0301 	add.w	r3, r3, #1
 800bea4:	d0f9      	beq.n	800be9a <__gethex+0x4e>
 800bea6:	f7ff ffbb 	bl	800be20 <__hexdig_fun>
 800beaa:	fab0 f580 	clz	r5, r0
 800beae:	096d      	lsrs	r5, r5, #5
 800beb0:	f04f 0b01 	mov.w	fp, #1
 800beb4:	464a      	mov	r2, r9
 800beb6:	4616      	mov	r6, r2
 800beb8:	3201      	adds	r2, #1
 800beba:	7830      	ldrb	r0, [r6, #0]
 800bebc:	f7ff ffb0 	bl	800be20 <__hexdig_fun>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	d1f8      	bne.n	800beb6 <__gethex+0x6a>
 800bec4:	498d      	ldr	r1, [pc, #564]	@ (800c0fc <__gethex+0x2b0>)
 800bec6:	2201      	movs	r2, #1
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff feeb 	bl	800bca4 <strncmp>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d13f      	bne.n	800bf52 <__gethex+0x106>
 800bed2:	b944      	cbnz	r4, 800bee6 <__gethex+0x9a>
 800bed4:	1c74      	adds	r4, r6, #1
 800bed6:	4622      	mov	r2, r4
 800bed8:	4616      	mov	r6, r2
 800beda:	3201      	adds	r2, #1
 800bedc:	7830      	ldrb	r0, [r6, #0]
 800bede:	f7ff ff9f 	bl	800be20 <__hexdig_fun>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d1f8      	bne.n	800bed8 <__gethex+0x8c>
 800bee6:	1ba4      	subs	r4, r4, r6
 800bee8:	00a7      	lsls	r7, r4, #2
 800beea:	7833      	ldrb	r3, [r6, #0]
 800beec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bef0:	2b50      	cmp	r3, #80	@ 0x50
 800bef2:	d13e      	bne.n	800bf72 <__gethex+0x126>
 800bef4:	7873      	ldrb	r3, [r6, #1]
 800bef6:	2b2b      	cmp	r3, #43	@ 0x2b
 800bef8:	d033      	beq.n	800bf62 <__gethex+0x116>
 800befa:	2b2d      	cmp	r3, #45	@ 0x2d
 800befc:	d034      	beq.n	800bf68 <__gethex+0x11c>
 800befe:	1c71      	adds	r1, r6, #1
 800bf00:	2400      	movs	r4, #0
 800bf02:	7808      	ldrb	r0, [r1, #0]
 800bf04:	f7ff ff8c 	bl	800be20 <__hexdig_fun>
 800bf08:	1e43      	subs	r3, r0, #1
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	2b18      	cmp	r3, #24
 800bf0e:	d830      	bhi.n	800bf72 <__gethex+0x126>
 800bf10:	f1a0 0210 	sub.w	r2, r0, #16
 800bf14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf18:	f7ff ff82 	bl	800be20 <__hexdig_fun>
 800bf1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800bf20:	fa5f fc8c 	uxtb.w	ip, ip
 800bf24:	f1bc 0f18 	cmp.w	ip, #24
 800bf28:	f04f 030a 	mov.w	r3, #10
 800bf2c:	d91e      	bls.n	800bf6c <__gethex+0x120>
 800bf2e:	b104      	cbz	r4, 800bf32 <__gethex+0xe6>
 800bf30:	4252      	negs	r2, r2
 800bf32:	4417      	add	r7, r2
 800bf34:	f8ca 1000 	str.w	r1, [sl]
 800bf38:	b1ed      	cbz	r5, 800bf76 <__gethex+0x12a>
 800bf3a:	f1bb 0f00 	cmp.w	fp, #0
 800bf3e:	bf0c      	ite	eq
 800bf40:	2506      	moveq	r5, #6
 800bf42:	2500      	movne	r5, #0
 800bf44:	4628      	mov	r0, r5
 800bf46:	b005      	add	sp, #20
 800bf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4c:	2500      	movs	r5, #0
 800bf4e:	462c      	mov	r4, r5
 800bf50:	e7b0      	b.n	800beb4 <__gethex+0x68>
 800bf52:	2c00      	cmp	r4, #0
 800bf54:	d1c7      	bne.n	800bee6 <__gethex+0x9a>
 800bf56:	4627      	mov	r7, r4
 800bf58:	e7c7      	b.n	800beea <__gethex+0x9e>
 800bf5a:	464e      	mov	r6, r9
 800bf5c:	462f      	mov	r7, r5
 800bf5e:	2501      	movs	r5, #1
 800bf60:	e7c3      	b.n	800beea <__gethex+0x9e>
 800bf62:	2400      	movs	r4, #0
 800bf64:	1cb1      	adds	r1, r6, #2
 800bf66:	e7cc      	b.n	800bf02 <__gethex+0xb6>
 800bf68:	2401      	movs	r4, #1
 800bf6a:	e7fb      	b.n	800bf64 <__gethex+0x118>
 800bf6c:	fb03 0002 	mla	r0, r3, r2, r0
 800bf70:	e7ce      	b.n	800bf10 <__gethex+0xc4>
 800bf72:	4631      	mov	r1, r6
 800bf74:	e7de      	b.n	800bf34 <__gethex+0xe8>
 800bf76:	eba6 0309 	sub.w	r3, r6, r9
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	2b07      	cmp	r3, #7
 800bf80:	dc0a      	bgt.n	800bf98 <__gethex+0x14c>
 800bf82:	9801      	ldr	r0, [sp, #4]
 800bf84:	f7fe f98e 	bl	800a2a4 <_Balloc>
 800bf88:	4604      	mov	r4, r0
 800bf8a:	b940      	cbnz	r0, 800bf9e <__gethex+0x152>
 800bf8c:	4b5c      	ldr	r3, [pc, #368]	@ (800c100 <__gethex+0x2b4>)
 800bf8e:	4602      	mov	r2, r0
 800bf90:	21e4      	movs	r1, #228	@ 0xe4
 800bf92:	485c      	ldr	r0, [pc, #368]	@ (800c104 <__gethex+0x2b8>)
 800bf94:	f7ff fec0 	bl	800bd18 <__assert_func>
 800bf98:	3101      	adds	r1, #1
 800bf9a:	105b      	asrs	r3, r3, #1
 800bf9c:	e7ef      	b.n	800bf7e <__gethex+0x132>
 800bf9e:	f100 0a14 	add.w	sl, r0, #20
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	4655      	mov	r5, sl
 800bfa6:	469b      	mov	fp, r3
 800bfa8:	45b1      	cmp	r9, r6
 800bfaa:	d337      	bcc.n	800c01c <__gethex+0x1d0>
 800bfac:	f845 bb04 	str.w	fp, [r5], #4
 800bfb0:	eba5 050a 	sub.w	r5, r5, sl
 800bfb4:	10ad      	asrs	r5, r5, #2
 800bfb6:	6125      	str	r5, [r4, #16]
 800bfb8:	4658      	mov	r0, fp
 800bfba:	f7fe fa65 	bl	800a488 <__hi0bits>
 800bfbe:	016d      	lsls	r5, r5, #5
 800bfc0:	f8d8 6000 	ldr.w	r6, [r8]
 800bfc4:	1a2d      	subs	r5, r5, r0
 800bfc6:	42b5      	cmp	r5, r6
 800bfc8:	dd54      	ble.n	800c074 <__gethex+0x228>
 800bfca:	1bad      	subs	r5, r5, r6
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7fe fdf6 	bl	800abc0 <__any_on>
 800bfd4:	4681      	mov	r9, r0
 800bfd6:	b178      	cbz	r0, 800bff8 <__gethex+0x1ac>
 800bfd8:	1e6b      	subs	r3, r5, #1
 800bfda:	1159      	asrs	r1, r3, #5
 800bfdc:	f003 021f 	and.w	r2, r3, #31
 800bfe0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bfe4:	f04f 0901 	mov.w	r9, #1
 800bfe8:	fa09 f202 	lsl.w	r2, r9, r2
 800bfec:	420a      	tst	r2, r1
 800bfee:	d003      	beq.n	800bff8 <__gethex+0x1ac>
 800bff0:	454b      	cmp	r3, r9
 800bff2:	dc36      	bgt.n	800c062 <__gethex+0x216>
 800bff4:	f04f 0902 	mov.w	r9, #2
 800bff8:	4629      	mov	r1, r5
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7ff febe 	bl	800bd7c <rshift>
 800c000:	442f      	add	r7, r5
 800c002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c006:	42bb      	cmp	r3, r7
 800c008:	da42      	bge.n	800c090 <__gethex+0x244>
 800c00a:	9801      	ldr	r0, [sp, #4]
 800c00c:	4621      	mov	r1, r4
 800c00e:	f7fe f989 	bl	800a324 <_Bfree>
 800c012:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c014:	2300      	movs	r3, #0
 800c016:	6013      	str	r3, [r2, #0]
 800c018:	25a3      	movs	r5, #163	@ 0xa3
 800c01a:	e793      	b.n	800bf44 <__gethex+0xf8>
 800c01c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c020:	2a2e      	cmp	r2, #46	@ 0x2e
 800c022:	d012      	beq.n	800c04a <__gethex+0x1fe>
 800c024:	2b20      	cmp	r3, #32
 800c026:	d104      	bne.n	800c032 <__gethex+0x1e6>
 800c028:	f845 bb04 	str.w	fp, [r5], #4
 800c02c:	f04f 0b00 	mov.w	fp, #0
 800c030:	465b      	mov	r3, fp
 800c032:	7830      	ldrb	r0, [r6, #0]
 800c034:	9303      	str	r3, [sp, #12]
 800c036:	f7ff fef3 	bl	800be20 <__hexdig_fun>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	f000 000f 	and.w	r0, r0, #15
 800c040:	4098      	lsls	r0, r3
 800c042:	ea4b 0b00 	orr.w	fp, fp, r0
 800c046:	3304      	adds	r3, #4
 800c048:	e7ae      	b.n	800bfa8 <__gethex+0x15c>
 800c04a:	45b1      	cmp	r9, r6
 800c04c:	d8ea      	bhi.n	800c024 <__gethex+0x1d8>
 800c04e:	492b      	ldr	r1, [pc, #172]	@ (800c0fc <__gethex+0x2b0>)
 800c050:	9303      	str	r3, [sp, #12]
 800c052:	2201      	movs	r2, #1
 800c054:	4630      	mov	r0, r6
 800c056:	f7ff fe25 	bl	800bca4 <strncmp>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d1e1      	bne.n	800c024 <__gethex+0x1d8>
 800c060:	e7a2      	b.n	800bfa8 <__gethex+0x15c>
 800c062:	1ea9      	subs	r1, r5, #2
 800c064:	4620      	mov	r0, r4
 800c066:	f7fe fdab 	bl	800abc0 <__any_on>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d0c2      	beq.n	800bff4 <__gethex+0x1a8>
 800c06e:	f04f 0903 	mov.w	r9, #3
 800c072:	e7c1      	b.n	800bff8 <__gethex+0x1ac>
 800c074:	da09      	bge.n	800c08a <__gethex+0x23e>
 800c076:	1b75      	subs	r5, r6, r5
 800c078:	4621      	mov	r1, r4
 800c07a:	9801      	ldr	r0, [sp, #4]
 800c07c:	462a      	mov	r2, r5
 800c07e:	f7fe fb69 	bl	800a754 <__lshift>
 800c082:	1b7f      	subs	r7, r7, r5
 800c084:	4604      	mov	r4, r0
 800c086:	f100 0a14 	add.w	sl, r0, #20
 800c08a:	f04f 0900 	mov.w	r9, #0
 800c08e:	e7b8      	b.n	800c002 <__gethex+0x1b6>
 800c090:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c094:	42bd      	cmp	r5, r7
 800c096:	dd6f      	ble.n	800c178 <__gethex+0x32c>
 800c098:	1bed      	subs	r5, r5, r7
 800c09a:	42ae      	cmp	r6, r5
 800c09c:	dc34      	bgt.n	800c108 <__gethex+0x2bc>
 800c09e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d022      	beq.n	800c0ec <__gethex+0x2a0>
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d024      	beq.n	800c0f4 <__gethex+0x2a8>
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d115      	bne.n	800c0da <__gethex+0x28e>
 800c0ae:	42ae      	cmp	r6, r5
 800c0b0:	d113      	bne.n	800c0da <__gethex+0x28e>
 800c0b2:	2e01      	cmp	r6, #1
 800c0b4:	d10b      	bne.n	800c0ce <__gethex+0x282>
 800c0b6:	9a02      	ldr	r2, [sp, #8]
 800c0b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c0bc:	6013      	str	r3, [r2, #0]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	f8ca 3000 	str.w	r3, [sl]
 800c0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0c8:	2562      	movs	r5, #98	@ 0x62
 800c0ca:	601c      	str	r4, [r3, #0]
 800c0cc:	e73a      	b.n	800bf44 <__gethex+0xf8>
 800c0ce:	1e71      	subs	r1, r6, #1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f7fe fd75 	bl	800abc0 <__any_on>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d1ed      	bne.n	800c0b6 <__gethex+0x26a>
 800c0da:	9801      	ldr	r0, [sp, #4]
 800c0dc:	4621      	mov	r1, r4
 800c0de:	f7fe f921 	bl	800a324 <_Bfree>
 800c0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	2550      	movs	r5, #80	@ 0x50
 800c0ea:	e72b      	b.n	800bf44 <__gethex+0xf8>
 800c0ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1f3      	bne.n	800c0da <__gethex+0x28e>
 800c0f2:	e7e0      	b.n	800c0b6 <__gethex+0x26a>
 800c0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d1dd      	bne.n	800c0b6 <__gethex+0x26a>
 800c0fa:	e7ee      	b.n	800c0da <__gethex+0x28e>
 800c0fc:	0800d788 	.word	0x0800d788
 800c100:	0800d61d 	.word	0x0800d61d
 800c104:	0800d936 	.word	0x0800d936
 800c108:	1e6f      	subs	r7, r5, #1
 800c10a:	f1b9 0f00 	cmp.w	r9, #0
 800c10e:	d130      	bne.n	800c172 <__gethex+0x326>
 800c110:	b127      	cbz	r7, 800c11c <__gethex+0x2d0>
 800c112:	4639      	mov	r1, r7
 800c114:	4620      	mov	r0, r4
 800c116:	f7fe fd53 	bl	800abc0 <__any_on>
 800c11a:	4681      	mov	r9, r0
 800c11c:	117a      	asrs	r2, r7, #5
 800c11e:	2301      	movs	r3, #1
 800c120:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c124:	f007 071f 	and.w	r7, r7, #31
 800c128:	40bb      	lsls	r3, r7
 800c12a:	4213      	tst	r3, r2
 800c12c:	4629      	mov	r1, r5
 800c12e:	4620      	mov	r0, r4
 800c130:	bf18      	it	ne
 800c132:	f049 0902 	orrne.w	r9, r9, #2
 800c136:	f7ff fe21 	bl	800bd7c <rshift>
 800c13a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c13e:	1b76      	subs	r6, r6, r5
 800c140:	2502      	movs	r5, #2
 800c142:	f1b9 0f00 	cmp.w	r9, #0
 800c146:	d047      	beq.n	800c1d8 <__gethex+0x38c>
 800c148:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d015      	beq.n	800c17c <__gethex+0x330>
 800c150:	2b03      	cmp	r3, #3
 800c152:	d017      	beq.n	800c184 <__gethex+0x338>
 800c154:	2b01      	cmp	r3, #1
 800c156:	d109      	bne.n	800c16c <__gethex+0x320>
 800c158:	f019 0f02 	tst.w	r9, #2
 800c15c:	d006      	beq.n	800c16c <__gethex+0x320>
 800c15e:	f8da 3000 	ldr.w	r3, [sl]
 800c162:	ea49 0903 	orr.w	r9, r9, r3
 800c166:	f019 0f01 	tst.w	r9, #1
 800c16a:	d10e      	bne.n	800c18a <__gethex+0x33e>
 800c16c:	f045 0510 	orr.w	r5, r5, #16
 800c170:	e032      	b.n	800c1d8 <__gethex+0x38c>
 800c172:	f04f 0901 	mov.w	r9, #1
 800c176:	e7d1      	b.n	800c11c <__gethex+0x2d0>
 800c178:	2501      	movs	r5, #1
 800c17a:	e7e2      	b.n	800c142 <__gethex+0x2f6>
 800c17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c17e:	f1c3 0301 	rsb	r3, r3, #1
 800c182:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0f0      	beq.n	800c16c <__gethex+0x320>
 800c18a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c18e:	f104 0314 	add.w	r3, r4, #20
 800c192:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c196:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c19a:	f04f 0c00 	mov.w	ip, #0
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c1a8:	d01b      	beq.n	800c1e2 <__gethex+0x396>
 800c1aa:	3201      	adds	r2, #1
 800c1ac:	6002      	str	r2, [r0, #0]
 800c1ae:	2d02      	cmp	r5, #2
 800c1b0:	f104 0314 	add.w	r3, r4, #20
 800c1b4:	d13c      	bne.n	800c230 <__gethex+0x3e4>
 800c1b6:	f8d8 2000 	ldr.w	r2, [r8]
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	42b2      	cmp	r2, r6
 800c1be:	d109      	bne.n	800c1d4 <__gethex+0x388>
 800c1c0:	1171      	asrs	r1, r6, #5
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c1c8:	f006 061f 	and.w	r6, r6, #31
 800c1cc:	fa02 f606 	lsl.w	r6, r2, r6
 800c1d0:	421e      	tst	r6, r3
 800c1d2:	d13a      	bne.n	800c24a <__gethex+0x3fe>
 800c1d4:	f045 0520 	orr.w	r5, r5, #32
 800c1d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1da:	601c      	str	r4, [r3, #0]
 800c1dc:	9b02      	ldr	r3, [sp, #8]
 800c1de:	601f      	str	r7, [r3, #0]
 800c1e0:	e6b0      	b.n	800bf44 <__gethex+0xf8>
 800c1e2:	4299      	cmp	r1, r3
 800c1e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c1e8:	d8d9      	bhi.n	800c19e <__gethex+0x352>
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	459b      	cmp	fp, r3
 800c1ee:	db17      	blt.n	800c220 <__gethex+0x3d4>
 800c1f0:	6861      	ldr	r1, [r4, #4]
 800c1f2:	9801      	ldr	r0, [sp, #4]
 800c1f4:	3101      	adds	r1, #1
 800c1f6:	f7fe f855 	bl	800a2a4 <_Balloc>
 800c1fa:	4681      	mov	r9, r0
 800c1fc:	b918      	cbnz	r0, 800c206 <__gethex+0x3ba>
 800c1fe:	4b1a      	ldr	r3, [pc, #104]	@ (800c268 <__gethex+0x41c>)
 800c200:	4602      	mov	r2, r0
 800c202:	2184      	movs	r1, #132	@ 0x84
 800c204:	e6c5      	b.n	800bf92 <__gethex+0x146>
 800c206:	6922      	ldr	r2, [r4, #16]
 800c208:	3202      	adds	r2, #2
 800c20a:	f104 010c 	add.w	r1, r4, #12
 800c20e:	0092      	lsls	r2, r2, #2
 800c210:	300c      	adds	r0, #12
 800c212:	f7ff fd69 	bl	800bce8 <memcpy>
 800c216:	4621      	mov	r1, r4
 800c218:	9801      	ldr	r0, [sp, #4]
 800c21a:	f7fe f883 	bl	800a324 <_Bfree>
 800c21e:	464c      	mov	r4, r9
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c228:	6122      	str	r2, [r4, #16]
 800c22a:	2201      	movs	r2, #1
 800c22c:	615a      	str	r2, [r3, #20]
 800c22e:	e7be      	b.n	800c1ae <__gethex+0x362>
 800c230:	6922      	ldr	r2, [r4, #16]
 800c232:	455a      	cmp	r2, fp
 800c234:	dd0b      	ble.n	800c24e <__gethex+0x402>
 800c236:	2101      	movs	r1, #1
 800c238:	4620      	mov	r0, r4
 800c23a:	f7ff fd9f 	bl	800bd7c <rshift>
 800c23e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c242:	3701      	adds	r7, #1
 800c244:	42bb      	cmp	r3, r7
 800c246:	f6ff aee0 	blt.w	800c00a <__gethex+0x1be>
 800c24a:	2501      	movs	r5, #1
 800c24c:	e7c2      	b.n	800c1d4 <__gethex+0x388>
 800c24e:	f016 061f 	ands.w	r6, r6, #31
 800c252:	d0fa      	beq.n	800c24a <__gethex+0x3fe>
 800c254:	4453      	add	r3, sl
 800c256:	f1c6 0620 	rsb	r6, r6, #32
 800c25a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c25e:	f7fe f913 	bl	800a488 <__hi0bits>
 800c262:	42b0      	cmp	r0, r6
 800c264:	dbe7      	blt.n	800c236 <__gethex+0x3ea>
 800c266:	e7f0      	b.n	800c24a <__gethex+0x3fe>
 800c268:	0800d61d 	.word	0x0800d61d

0800c26c <L_shift>:
 800c26c:	f1c2 0208 	rsb	r2, r2, #8
 800c270:	0092      	lsls	r2, r2, #2
 800c272:	b570      	push	{r4, r5, r6, lr}
 800c274:	f1c2 0620 	rsb	r6, r2, #32
 800c278:	6843      	ldr	r3, [r0, #4]
 800c27a:	6804      	ldr	r4, [r0, #0]
 800c27c:	fa03 f506 	lsl.w	r5, r3, r6
 800c280:	432c      	orrs	r4, r5
 800c282:	40d3      	lsrs	r3, r2
 800c284:	6004      	str	r4, [r0, #0]
 800c286:	f840 3f04 	str.w	r3, [r0, #4]!
 800c28a:	4288      	cmp	r0, r1
 800c28c:	d3f4      	bcc.n	800c278 <L_shift+0xc>
 800c28e:	bd70      	pop	{r4, r5, r6, pc}

0800c290 <__match>:
 800c290:	b530      	push	{r4, r5, lr}
 800c292:	6803      	ldr	r3, [r0, #0]
 800c294:	3301      	adds	r3, #1
 800c296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c29a:	b914      	cbnz	r4, 800c2a2 <__match+0x12>
 800c29c:	6003      	str	r3, [r0, #0]
 800c29e:	2001      	movs	r0, #1
 800c2a0:	bd30      	pop	{r4, r5, pc}
 800c2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c2aa:	2d19      	cmp	r5, #25
 800c2ac:	bf98      	it	ls
 800c2ae:	3220      	addls	r2, #32
 800c2b0:	42a2      	cmp	r2, r4
 800c2b2:	d0f0      	beq.n	800c296 <__match+0x6>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e7f3      	b.n	800c2a0 <__match+0x10>

0800c2b8 <__hexnan>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	680b      	ldr	r3, [r1, #0]
 800c2be:	6801      	ldr	r1, [r0, #0]
 800c2c0:	115e      	asrs	r6, r3, #5
 800c2c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c2c6:	f013 031f 	ands.w	r3, r3, #31
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	bf18      	it	ne
 800c2ce:	3604      	addne	r6, #4
 800c2d0:	2500      	movs	r5, #0
 800c2d2:	1f37      	subs	r7, r6, #4
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	4690      	mov	r8, r2
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f846 5c04 	str.w	r5, [r6, #-4]
 800c2de:	46b9      	mov	r9, r7
 800c2e0:	463c      	mov	r4, r7
 800c2e2:	9502      	str	r5, [sp, #8]
 800c2e4:	46ab      	mov	fp, r5
 800c2e6:	784a      	ldrb	r2, [r1, #1]
 800c2e8:	1c4b      	adds	r3, r1, #1
 800c2ea:	9303      	str	r3, [sp, #12]
 800c2ec:	b342      	cbz	r2, 800c340 <__hexnan+0x88>
 800c2ee:	4610      	mov	r0, r2
 800c2f0:	9105      	str	r1, [sp, #20]
 800c2f2:	9204      	str	r2, [sp, #16]
 800c2f4:	f7ff fd94 	bl	800be20 <__hexdig_fun>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	d151      	bne.n	800c3a0 <__hexnan+0xe8>
 800c2fc:	9a04      	ldr	r2, [sp, #16]
 800c2fe:	9905      	ldr	r1, [sp, #20]
 800c300:	2a20      	cmp	r2, #32
 800c302:	d818      	bhi.n	800c336 <__hexnan+0x7e>
 800c304:	9b02      	ldr	r3, [sp, #8]
 800c306:	459b      	cmp	fp, r3
 800c308:	dd13      	ble.n	800c332 <__hexnan+0x7a>
 800c30a:	454c      	cmp	r4, r9
 800c30c:	d206      	bcs.n	800c31c <__hexnan+0x64>
 800c30e:	2d07      	cmp	r5, #7
 800c310:	dc04      	bgt.n	800c31c <__hexnan+0x64>
 800c312:	462a      	mov	r2, r5
 800c314:	4649      	mov	r1, r9
 800c316:	4620      	mov	r0, r4
 800c318:	f7ff ffa8 	bl	800c26c <L_shift>
 800c31c:	4544      	cmp	r4, r8
 800c31e:	d952      	bls.n	800c3c6 <__hexnan+0x10e>
 800c320:	2300      	movs	r3, #0
 800c322:	f1a4 0904 	sub.w	r9, r4, #4
 800c326:	f844 3c04 	str.w	r3, [r4, #-4]
 800c32a:	f8cd b008 	str.w	fp, [sp, #8]
 800c32e:	464c      	mov	r4, r9
 800c330:	461d      	mov	r5, r3
 800c332:	9903      	ldr	r1, [sp, #12]
 800c334:	e7d7      	b.n	800c2e6 <__hexnan+0x2e>
 800c336:	2a29      	cmp	r2, #41	@ 0x29
 800c338:	d157      	bne.n	800c3ea <__hexnan+0x132>
 800c33a:	3102      	adds	r1, #2
 800c33c:	f8ca 1000 	str.w	r1, [sl]
 800c340:	f1bb 0f00 	cmp.w	fp, #0
 800c344:	d051      	beq.n	800c3ea <__hexnan+0x132>
 800c346:	454c      	cmp	r4, r9
 800c348:	d206      	bcs.n	800c358 <__hexnan+0xa0>
 800c34a:	2d07      	cmp	r5, #7
 800c34c:	dc04      	bgt.n	800c358 <__hexnan+0xa0>
 800c34e:	462a      	mov	r2, r5
 800c350:	4649      	mov	r1, r9
 800c352:	4620      	mov	r0, r4
 800c354:	f7ff ff8a 	bl	800c26c <L_shift>
 800c358:	4544      	cmp	r4, r8
 800c35a:	d936      	bls.n	800c3ca <__hexnan+0x112>
 800c35c:	f1a8 0204 	sub.w	r2, r8, #4
 800c360:	4623      	mov	r3, r4
 800c362:	f853 1b04 	ldr.w	r1, [r3], #4
 800c366:	f842 1f04 	str.w	r1, [r2, #4]!
 800c36a:	429f      	cmp	r7, r3
 800c36c:	d2f9      	bcs.n	800c362 <__hexnan+0xaa>
 800c36e:	1b3b      	subs	r3, r7, r4
 800c370:	f023 0303 	bic.w	r3, r3, #3
 800c374:	3304      	adds	r3, #4
 800c376:	3401      	adds	r4, #1
 800c378:	3e03      	subs	r6, #3
 800c37a:	42b4      	cmp	r4, r6
 800c37c:	bf88      	it	hi
 800c37e:	2304      	movhi	r3, #4
 800c380:	4443      	add	r3, r8
 800c382:	2200      	movs	r2, #0
 800c384:	f843 2b04 	str.w	r2, [r3], #4
 800c388:	429f      	cmp	r7, r3
 800c38a:	d2fb      	bcs.n	800c384 <__hexnan+0xcc>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	b91b      	cbnz	r3, 800c398 <__hexnan+0xe0>
 800c390:	4547      	cmp	r7, r8
 800c392:	d128      	bne.n	800c3e6 <__hexnan+0x12e>
 800c394:	2301      	movs	r3, #1
 800c396:	603b      	str	r3, [r7, #0]
 800c398:	2005      	movs	r0, #5
 800c39a:	b007      	add	sp, #28
 800c39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a0:	3501      	adds	r5, #1
 800c3a2:	2d08      	cmp	r5, #8
 800c3a4:	f10b 0b01 	add.w	fp, fp, #1
 800c3a8:	dd06      	ble.n	800c3b8 <__hexnan+0x100>
 800c3aa:	4544      	cmp	r4, r8
 800c3ac:	d9c1      	bls.n	800c332 <__hexnan+0x7a>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3b4:	2501      	movs	r5, #1
 800c3b6:	3c04      	subs	r4, #4
 800c3b8:	6822      	ldr	r2, [r4, #0]
 800c3ba:	f000 000f 	and.w	r0, r0, #15
 800c3be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c3c2:	6020      	str	r0, [r4, #0]
 800c3c4:	e7b5      	b.n	800c332 <__hexnan+0x7a>
 800c3c6:	2508      	movs	r5, #8
 800c3c8:	e7b3      	b.n	800c332 <__hexnan+0x7a>
 800c3ca:	9b01      	ldr	r3, [sp, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d0dd      	beq.n	800c38c <__hexnan+0xd4>
 800c3d0:	f1c3 0320 	rsb	r3, r3, #32
 800c3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c3d8:	40da      	lsrs	r2, r3
 800c3da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c3de:	4013      	ands	r3, r2
 800c3e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c3e4:	e7d2      	b.n	800c38c <__hexnan+0xd4>
 800c3e6:	3f04      	subs	r7, #4
 800c3e8:	e7d0      	b.n	800c38c <__hexnan+0xd4>
 800c3ea:	2004      	movs	r0, #4
 800c3ec:	e7d5      	b.n	800c39a <__hexnan+0xe2>

0800c3ee <__ascii_mbtowc>:
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	b901      	cbnz	r1, 800c3f4 <__ascii_mbtowc+0x6>
 800c3f2:	a901      	add	r1, sp, #4
 800c3f4:	b142      	cbz	r2, 800c408 <__ascii_mbtowc+0x1a>
 800c3f6:	b14b      	cbz	r3, 800c40c <__ascii_mbtowc+0x1e>
 800c3f8:	7813      	ldrb	r3, [r2, #0]
 800c3fa:	600b      	str	r3, [r1, #0]
 800c3fc:	7812      	ldrb	r2, [r2, #0]
 800c3fe:	1e10      	subs	r0, r2, #0
 800c400:	bf18      	it	ne
 800c402:	2001      	movne	r0, #1
 800c404:	b002      	add	sp, #8
 800c406:	4770      	bx	lr
 800c408:	4610      	mov	r0, r2
 800c40a:	e7fb      	b.n	800c404 <__ascii_mbtowc+0x16>
 800c40c:	f06f 0001 	mvn.w	r0, #1
 800c410:	e7f8      	b.n	800c404 <__ascii_mbtowc+0x16>

0800c412 <_realloc_r>:
 800c412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c416:	4680      	mov	r8, r0
 800c418:	4615      	mov	r5, r2
 800c41a:	460c      	mov	r4, r1
 800c41c:	b921      	cbnz	r1, 800c428 <_realloc_r+0x16>
 800c41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c422:	4611      	mov	r1, r2
 800c424:	f7fd beb2 	b.w	800a18c <_malloc_r>
 800c428:	b92a      	cbnz	r2, 800c436 <_realloc_r+0x24>
 800c42a:	f7fd fe3b 	bl	800a0a4 <_free_r>
 800c42e:	2400      	movs	r4, #0
 800c430:	4620      	mov	r0, r4
 800c432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c436:	f000 f840 	bl	800c4ba <_malloc_usable_size_r>
 800c43a:	4285      	cmp	r5, r0
 800c43c:	4606      	mov	r6, r0
 800c43e:	d802      	bhi.n	800c446 <_realloc_r+0x34>
 800c440:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c444:	d8f4      	bhi.n	800c430 <_realloc_r+0x1e>
 800c446:	4629      	mov	r1, r5
 800c448:	4640      	mov	r0, r8
 800c44a:	f7fd fe9f 	bl	800a18c <_malloc_r>
 800c44e:	4607      	mov	r7, r0
 800c450:	2800      	cmp	r0, #0
 800c452:	d0ec      	beq.n	800c42e <_realloc_r+0x1c>
 800c454:	42b5      	cmp	r5, r6
 800c456:	462a      	mov	r2, r5
 800c458:	4621      	mov	r1, r4
 800c45a:	bf28      	it	cs
 800c45c:	4632      	movcs	r2, r6
 800c45e:	f7ff fc43 	bl	800bce8 <memcpy>
 800c462:	4621      	mov	r1, r4
 800c464:	4640      	mov	r0, r8
 800c466:	f7fd fe1d 	bl	800a0a4 <_free_r>
 800c46a:	463c      	mov	r4, r7
 800c46c:	e7e0      	b.n	800c430 <_realloc_r+0x1e>

0800c46e <__ascii_wctomb>:
 800c46e:	4603      	mov	r3, r0
 800c470:	4608      	mov	r0, r1
 800c472:	b141      	cbz	r1, 800c486 <__ascii_wctomb+0x18>
 800c474:	2aff      	cmp	r2, #255	@ 0xff
 800c476:	d904      	bls.n	800c482 <__ascii_wctomb+0x14>
 800c478:	228a      	movs	r2, #138	@ 0x8a
 800c47a:	601a      	str	r2, [r3, #0]
 800c47c:	f04f 30ff 	mov.w	r0, #4294967295
 800c480:	4770      	bx	lr
 800c482:	700a      	strb	r2, [r1, #0]
 800c484:	2001      	movs	r0, #1
 800c486:	4770      	bx	lr

0800c488 <fiprintf>:
 800c488:	b40e      	push	{r1, r2, r3}
 800c48a:	b503      	push	{r0, r1, lr}
 800c48c:	4601      	mov	r1, r0
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	4805      	ldr	r0, [pc, #20]	@ (800c4a8 <fiprintf+0x20>)
 800c492:	f853 2b04 	ldr.w	r2, [r3], #4
 800c496:	6800      	ldr	r0, [r0, #0]
 800c498:	9301      	str	r3, [sp, #4]
 800c49a:	f000 f83f 	bl	800c51c <_vfiprintf_r>
 800c49e:	b002      	add	sp, #8
 800c4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4a4:	b003      	add	sp, #12
 800c4a6:	4770      	bx	lr
 800c4a8:	24000020 	.word	0x24000020

0800c4ac <abort>:
 800c4ac:	b508      	push	{r3, lr}
 800c4ae:	2006      	movs	r0, #6
 800c4b0:	f000 fa08 	bl	800c8c4 <raise>
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f7f6 f85b 	bl	8002570 <_exit>

0800c4ba <_malloc_usable_size_r>:
 800c4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4be:	1f18      	subs	r0, r3, #4
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bfbc      	itt	lt
 800c4c4:	580b      	ldrlt	r3, [r1, r0]
 800c4c6:	18c0      	addlt	r0, r0, r3
 800c4c8:	4770      	bx	lr

0800c4ca <__sfputc_r>:
 800c4ca:	6893      	ldr	r3, [r2, #8]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	b410      	push	{r4}
 800c4d2:	6093      	str	r3, [r2, #8]
 800c4d4:	da08      	bge.n	800c4e8 <__sfputc_r+0x1e>
 800c4d6:	6994      	ldr	r4, [r2, #24]
 800c4d8:	42a3      	cmp	r3, r4
 800c4da:	db01      	blt.n	800c4e0 <__sfputc_r+0x16>
 800c4dc:	290a      	cmp	r1, #10
 800c4de:	d103      	bne.n	800c4e8 <__sfputc_r+0x1e>
 800c4e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4e4:	f000 b932 	b.w	800c74c <__swbuf_r>
 800c4e8:	6813      	ldr	r3, [r2, #0]
 800c4ea:	1c58      	adds	r0, r3, #1
 800c4ec:	6010      	str	r0, [r2, #0]
 800c4ee:	7019      	strb	r1, [r3, #0]
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <__sfputs_r>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	460f      	mov	r7, r1
 800c4fe:	4614      	mov	r4, r2
 800c500:	18d5      	adds	r5, r2, r3
 800c502:	42ac      	cmp	r4, r5
 800c504:	d101      	bne.n	800c50a <__sfputs_r+0x12>
 800c506:	2000      	movs	r0, #0
 800c508:	e007      	b.n	800c51a <__sfputs_r+0x22>
 800c50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c50e:	463a      	mov	r2, r7
 800c510:	4630      	mov	r0, r6
 800c512:	f7ff ffda 	bl	800c4ca <__sfputc_r>
 800c516:	1c43      	adds	r3, r0, #1
 800c518:	d1f3      	bne.n	800c502 <__sfputs_r+0xa>
 800c51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c51c <_vfiprintf_r>:
 800c51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c520:	460d      	mov	r5, r1
 800c522:	b09d      	sub	sp, #116	@ 0x74
 800c524:	4614      	mov	r4, r2
 800c526:	4698      	mov	r8, r3
 800c528:	4606      	mov	r6, r0
 800c52a:	b118      	cbz	r0, 800c534 <_vfiprintf_r+0x18>
 800c52c:	6a03      	ldr	r3, [r0, #32]
 800c52e:	b90b      	cbnz	r3, 800c534 <_vfiprintf_r+0x18>
 800c530:	f7fc feba 	bl	80092a8 <__sinit>
 800c534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c536:	07d9      	lsls	r1, r3, #31
 800c538:	d405      	bmi.n	800c546 <_vfiprintf_r+0x2a>
 800c53a:	89ab      	ldrh	r3, [r5, #12]
 800c53c:	059a      	lsls	r2, r3, #22
 800c53e:	d402      	bmi.n	800c546 <_vfiprintf_r+0x2a>
 800c540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c542:	f7fc ffc8 	bl	80094d6 <__retarget_lock_acquire_recursive>
 800c546:	89ab      	ldrh	r3, [r5, #12]
 800c548:	071b      	lsls	r3, r3, #28
 800c54a:	d501      	bpl.n	800c550 <_vfiprintf_r+0x34>
 800c54c:	692b      	ldr	r3, [r5, #16]
 800c54e:	b99b      	cbnz	r3, 800c578 <_vfiprintf_r+0x5c>
 800c550:	4629      	mov	r1, r5
 800c552:	4630      	mov	r0, r6
 800c554:	f000 f938 	bl	800c7c8 <__swsetup_r>
 800c558:	b170      	cbz	r0, 800c578 <_vfiprintf_r+0x5c>
 800c55a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c55c:	07dc      	lsls	r4, r3, #31
 800c55e:	d504      	bpl.n	800c56a <_vfiprintf_r+0x4e>
 800c560:	f04f 30ff 	mov.w	r0, #4294967295
 800c564:	b01d      	add	sp, #116	@ 0x74
 800c566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56a:	89ab      	ldrh	r3, [r5, #12]
 800c56c:	0598      	lsls	r0, r3, #22
 800c56e:	d4f7      	bmi.n	800c560 <_vfiprintf_r+0x44>
 800c570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c572:	f7fc ffb1 	bl	80094d8 <__retarget_lock_release_recursive>
 800c576:	e7f3      	b.n	800c560 <_vfiprintf_r+0x44>
 800c578:	2300      	movs	r3, #0
 800c57a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c57c:	2320      	movs	r3, #32
 800c57e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c582:	f8cd 800c 	str.w	r8, [sp, #12]
 800c586:	2330      	movs	r3, #48	@ 0x30
 800c588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c738 <_vfiprintf_r+0x21c>
 800c58c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c590:	f04f 0901 	mov.w	r9, #1
 800c594:	4623      	mov	r3, r4
 800c596:	469a      	mov	sl, r3
 800c598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c59c:	b10a      	cbz	r2, 800c5a2 <_vfiprintf_r+0x86>
 800c59e:	2a25      	cmp	r2, #37	@ 0x25
 800c5a0:	d1f9      	bne.n	800c596 <_vfiprintf_r+0x7a>
 800c5a2:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a6:	d00b      	beq.n	800c5c0 <_vfiprintf_r+0xa4>
 800c5a8:	465b      	mov	r3, fp
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7ff ffa2 	bl	800c4f8 <__sfputs_r>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	f000 80a7 	beq.w	800c708 <_vfiprintf_r+0x1ec>
 800c5ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5bc:	445a      	add	r2, fp
 800c5be:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 809f 	beq.w	800c708 <_vfiprintf_r+0x1ec>
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c5d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5d4:	f10a 0a01 	add.w	sl, sl, #1
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	9307      	str	r3, [sp, #28]
 800c5dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c5e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c5e2:	4654      	mov	r4, sl
 800c5e4:	2205      	movs	r2, #5
 800c5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ea:	4853      	ldr	r0, [pc, #332]	@ (800c738 <_vfiprintf_r+0x21c>)
 800c5ec:	f7f3 fe78 	bl	80002e0 <memchr>
 800c5f0:	9a04      	ldr	r2, [sp, #16]
 800c5f2:	b9d8      	cbnz	r0, 800c62c <_vfiprintf_r+0x110>
 800c5f4:	06d1      	lsls	r1, r2, #27
 800c5f6:	bf44      	itt	mi
 800c5f8:	2320      	movmi	r3, #32
 800c5fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c5fe:	0713      	lsls	r3, r2, #28
 800c600:	bf44      	itt	mi
 800c602:	232b      	movmi	r3, #43	@ 0x2b
 800c604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c608:	f89a 3000 	ldrb.w	r3, [sl]
 800c60c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c60e:	d015      	beq.n	800c63c <_vfiprintf_r+0x120>
 800c610:	9a07      	ldr	r2, [sp, #28]
 800c612:	4654      	mov	r4, sl
 800c614:	2000      	movs	r0, #0
 800c616:	f04f 0c0a 	mov.w	ip, #10
 800c61a:	4621      	mov	r1, r4
 800c61c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c620:	3b30      	subs	r3, #48	@ 0x30
 800c622:	2b09      	cmp	r3, #9
 800c624:	d94b      	bls.n	800c6be <_vfiprintf_r+0x1a2>
 800c626:	b1b0      	cbz	r0, 800c656 <_vfiprintf_r+0x13a>
 800c628:	9207      	str	r2, [sp, #28]
 800c62a:	e014      	b.n	800c656 <_vfiprintf_r+0x13a>
 800c62c:	eba0 0308 	sub.w	r3, r0, r8
 800c630:	fa09 f303 	lsl.w	r3, r9, r3
 800c634:	4313      	orrs	r3, r2
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	46a2      	mov	sl, r4
 800c63a:	e7d2      	b.n	800c5e2 <_vfiprintf_r+0xc6>
 800c63c:	9b03      	ldr	r3, [sp, #12]
 800c63e:	1d19      	adds	r1, r3, #4
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	9103      	str	r1, [sp, #12]
 800c644:	2b00      	cmp	r3, #0
 800c646:	bfbb      	ittet	lt
 800c648:	425b      	neglt	r3, r3
 800c64a:	f042 0202 	orrlt.w	r2, r2, #2
 800c64e:	9307      	strge	r3, [sp, #28]
 800c650:	9307      	strlt	r3, [sp, #28]
 800c652:	bfb8      	it	lt
 800c654:	9204      	strlt	r2, [sp, #16]
 800c656:	7823      	ldrb	r3, [r4, #0]
 800c658:	2b2e      	cmp	r3, #46	@ 0x2e
 800c65a:	d10a      	bne.n	800c672 <_vfiprintf_r+0x156>
 800c65c:	7863      	ldrb	r3, [r4, #1]
 800c65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c660:	d132      	bne.n	800c6c8 <_vfiprintf_r+0x1ac>
 800c662:	9b03      	ldr	r3, [sp, #12]
 800c664:	1d1a      	adds	r2, r3, #4
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	9203      	str	r2, [sp, #12]
 800c66a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c66e:	3402      	adds	r4, #2
 800c670:	9305      	str	r3, [sp, #20]
 800c672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c748 <_vfiprintf_r+0x22c>
 800c676:	7821      	ldrb	r1, [r4, #0]
 800c678:	2203      	movs	r2, #3
 800c67a:	4650      	mov	r0, sl
 800c67c:	f7f3 fe30 	bl	80002e0 <memchr>
 800c680:	b138      	cbz	r0, 800c692 <_vfiprintf_r+0x176>
 800c682:	9b04      	ldr	r3, [sp, #16]
 800c684:	eba0 000a 	sub.w	r0, r0, sl
 800c688:	2240      	movs	r2, #64	@ 0x40
 800c68a:	4082      	lsls	r2, r0
 800c68c:	4313      	orrs	r3, r2
 800c68e:	3401      	adds	r4, #1
 800c690:	9304      	str	r3, [sp, #16]
 800c692:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c696:	4829      	ldr	r0, [pc, #164]	@ (800c73c <_vfiprintf_r+0x220>)
 800c698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c69c:	2206      	movs	r2, #6
 800c69e:	f7f3 fe1f 	bl	80002e0 <memchr>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	d03f      	beq.n	800c726 <_vfiprintf_r+0x20a>
 800c6a6:	4b26      	ldr	r3, [pc, #152]	@ (800c740 <_vfiprintf_r+0x224>)
 800c6a8:	bb1b      	cbnz	r3, 800c6f2 <_vfiprintf_r+0x1d6>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	3307      	adds	r3, #7
 800c6ae:	f023 0307 	bic.w	r3, r3, #7
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	9303      	str	r3, [sp, #12]
 800c6b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6b8:	443b      	add	r3, r7
 800c6ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6bc:	e76a      	b.n	800c594 <_vfiprintf_r+0x78>
 800c6be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6c2:	460c      	mov	r4, r1
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	e7a8      	b.n	800c61a <_vfiprintf_r+0xfe>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	3401      	adds	r4, #1
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	f04f 0c0a 	mov.w	ip, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6da:	3a30      	subs	r2, #48	@ 0x30
 800c6dc:	2a09      	cmp	r2, #9
 800c6de:	d903      	bls.n	800c6e8 <_vfiprintf_r+0x1cc>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d0c6      	beq.n	800c672 <_vfiprintf_r+0x156>
 800c6e4:	9105      	str	r1, [sp, #20]
 800c6e6:	e7c4      	b.n	800c672 <_vfiprintf_r+0x156>
 800c6e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e7f0      	b.n	800c6d4 <_vfiprintf_r+0x1b8>
 800c6f2:	ab03      	add	r3, sp, #12
 800c6f4:	9300      	str	r3, [sp, #0]
 800c6f6:	462a      	mov	r2, r5
 800c6f8:	4b12      	ldr	r3, [pc, #72]	@ (800c744 <_vfiprintf_r+0x228>)
 800c6fa:	a904      	add	r1, sp, #16
 800c6fc:	4630      	mov	r0, r6
 800c6fe:	f7fb ff93 	bl	8008628 <_printf_float>
 800c702:	4607      	mov	r7, r0
 800c704:	1c78      	adds	r0, r7, #1
 800c706:	d1d6      	bne.n	800c6b6 <_vfiprintf_r+0x19a>
 800c708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c70a:	07d9      	lsls	r1, r3, #31
 800c70c:	d405      	bmi.n	800c71a <_vfiprintf_r+0x1fe>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	059a      	lsls	r2, r3, #22
 800c712:	d402      	bmi.n	800c71a <_vfiprintf_r+0x1fe>
 800c714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c716:	f7fc fedf 	bl	80094d8 <__retarget_lock_release_recursive>
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	065b      	lsls	r3, r3, #25
 800c71e:	f53f af1f 	bmi.w	800c560 <_vfiprintf_r+0x44>
 800c722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c724:	e71e      	b.n	800c564 <_vfiprintf_r+0x48>
 800c726:	ab03      	add	r3, sp, #12
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	462a      	mov	r2, r5
 800c72c:	4b05      	ldr	r3, [pc, #20]	@ (800c744 <_vfiprintf_r+0x228>)
 800c72e:	a904      	add	r1, sp, #16
 800c730:	4630      	mov	r0, r6
 800c732:	f7fc fa01 	bl	8008b38 <_printf_i>
 800c736:	e7e4      	b.n	800c702 <_vfiprintf_r+0x1e6>
 800c738:	0800d8e1 	.word	0x0800d8e1
 800c73c:	0800d8eb 	.word	0x0800d8eb
 800c740:	08008629 	.word	0x08008629
 800c744:	0800c4f9 	.word	0x0800c4f9
 800c748:	0800d8e7 	.word	0x0800d8e7

0800c74c <__swbuf_r>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	460e      	mov	r6, r1
 800c750:	4614      	mov	r4, r2
 800c752:	4605      	mov	r5, r0
 800c754:	b118      	cbz	r0, 800c75e <__swbuf_r+0x12>
 800c756:	6a03      	ldr	r3, [r0, #32]
 800c758:	b90b      	cbnz	r3, 800c75e <__swbuf_r+0x12>
 800c75a:	f7fc fda5 	bl	80092a8 <__sinit>
 800c75e:	69a3      	ldr	r3, [r4, #24]
 800c760:	60a3      	str	r3, [r4, #8]
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	071a      	lsls	r2, r3, #28
 800c766:	d501      	bpl.n	800c76c <__swbuf_r+0x20>
 800c768:	6923      	ldr	r3, [r4, #16]
 800c76a:	b943      	cbnz	r3, 800c77e <__swbuf_r+0x32>
 800c76c:	4621      	mov	r1, r4
 800c76e:	4628      	mov	r0, r5
 800c770:	f000 f82a 	bl	800c7c8 <__swsetup_r>
 800c774:	b118      	cbz	r0, 800c77e <__swbuf_r+0x32>
 800c776:	f04f 37ff 	mov.w	r7, #4294967295
 800c77a:	4638      	mov	r0, r7
 800c77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	1a98      	subs	r0, r3, r2
 800c784:	6963      	ldr	r3, [r4, #20]
 800c786:	b2f6      	uxtb	r6, r6
 800c788:	4283      	cmp	r3, r0
 800c78a:	4637      	mov	r7, r6
 800c78c:	dc05      	bgt.n	800c79a <__swbuf_r+0x4e>
 800c78e:	4621      	mov	r1, r4
 800c790:	4628      	mov	r0, r5
 800c792:	f7ff fa45 	bl	800bc20 <_fflush_r>
 800c796:	2800      	cmp	r0, #0
 800c798:	d1ed      	bne.n	800c776 <__swbuf_r+0x2a>
 800c79a:	68a3      	ldr	r3, [r4, #8]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	60a3      	str	r3, [r4, #8]
 800c7a0:	6823      	ldr	r3, [r4, #0]
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	701e      	strb	r6, [r3, #0]
 800c7a8:	6962      	ldr	r2, [r4, #20]
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d004      	beq.n	800c7ba <__swbuf_r+0x6e>
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	07db      	lsls	r3, r3, #31
 800c7b4:	d5e1      	bpl.n	800c77a <__swbuf_r+0x2e>
 800c7b6:	2e0a      	cmp	r6, #10
 800c7b8:	d1df      	bne.n	800c77a <__swbuf_r+0x2e>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f7ff fa2f 	bl	800bc20 <_fflush_r>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d0d9      	beq.n	800c77a <__swbuf_r+0x2e>
 800c7c6:	e7d6      	b.n	800c776 <__swbuf_r+0x2a>

0800c7c8 <__swsetup_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4b29      	ldr	r3, [pc, #164]	@ (800c870 <__swsetup_r+0xa8>)
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	460c      	mov	r4, r1
 800c7d2:	b118      	cbz	r0, 800c7dc <__swsetup_r+0x14>
 800c7d4:	6a03      	ldr	r3, [r0, #32]
 800c7d6:	b90b      	cbnz	r3, 800c7dc <__swsetup_r+0x14>
 800c7d8:	f7fc fd66 	bl	80092a8 <__sinit>
 800c7dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7e0:	0719      	lsls	r1, r3, #28
 800c7e2:	d422      	bmi.n	800c82a <__swsetup_r+0x62>
 800c7e4:	06da      	lsls	r2, r3, #27
 800c7e6:	d407      	bmi.n	800c7f8 <__swsetup_r+0x30>
 800c7e8:	2209      	movs	r2, #9
 800c7ea:	602a      	str	r2, [r5, #0]
 800c7ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f6:	e033      	b.n	800c860 <__swsetup_r+0x98>
 800c7f8:	0758      	lsls	r0, r3, #29
 800c7fa:	d512      	bpl.n	800c822 <__swsetup_r+0x5a>
 800c7fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7fe:	b141      	cbz	r1, 800c812 <__swsetup_r+0x4a>
 800c800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c804:	4299      	cmp	r1, r3
 800c806:	d002      	beq.n	800c80e <__swsetup_r+0x46>
 800c808:	4628      	mov	r0, r5
 800c80a:	f7fd fc4b 	bl	800a0a4 <_free_r>
 800c80e:	2300      	movs	r3, #0
 800c810:	6363      	str	r3, [r4, #52]	@ 0x34
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	2300      	movs	r3, #0
 800c81c:	6063      	str	r3, [r4, #4]
 800c81e:	6923      	ldr	r3, [r4, #16]
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	89a3      	ldrh	r3, [r4, #12]
 800c824:	f043 0308 	orr.w	r3, r3, #8
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	6923      	ldr	r3, [r4, #16]
 800c82c:	b94b      	cbnz	r3, 800c842 <__swsetup_r+0x7a>
 800c82e:	89a3      	ldrh	r3, [r4, #12]
 800c830:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c838:	d003      	beq.n	800c842 <__swsetup_r+0x7a>
 800c83a:	4621      	mov	r1, r4
 800c83c:	4628      	mov	r0, r5
 800c83e:	f000 f883 	bl	800c948 <__smakebuf_r>
 800c842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c846:	f013 0201 	ands.w	r2, r3, #1
 800c84a:	d00a      	beq.n	800c862 <__swsetup_r+0x9a>
 800c84c:	2200      	movs	r2, #0
 800c84e:	60a2      	str	r2, [r4, #8]
 800c850:	6962      	ldr	r2, [r4, #20]
 800c852:	4252      	negs	r2, r2
 800c854:	61a2      	str	r2, [r4, #24]
 800c856:	6922      	ldr	r2, [r4, #16]
 800c858:	b942      	cbnz	r2, 800c86c <__swsetup_r+0xa4>
 800c85a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c85e:	d1c5      	bne.n	800c7ec <__swsetup_r+0x24>
 800c860:	bd38      	pop	{r3, r4, r5, pc}
 800c862:	0799      	lsls	r1, r3, #30
 800c864:	bf58      	it	pl
 800c866:	6962      	ldrpl	r2, [r4, #20]
 800c868:	60a2      	str	r2, [r4, #8]
 800c86a:	e7f4      	b.n	800c856 <__swsetup_r+0x8e>
 800c86c:	2000      	movs	r0, #0
 800c86e:	e7f7      	b.n	800c860 <__swsetup_r+0x98>
 800c870:	24000020 	.word	0x24000020

0800c874 <_raise_r>:
 800c874:	291f      	cmp	r1, #31
 800c876:	b538      	push	{r3, r4, r5, lr}
 800c878:	4605      	mov	r5, r0
 800c87a:	460c      	mov	r4, r1
 800c87c:	d904      	bls.n	800c888 <_raise_r+0x14>
 800c87e:	2316      	movs	r3, #22
 800c880:	6003      	str	r3, [r0, #0]
 800c882:	f04f 30ff 	mov.w	r0, #4294967295
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c88a:	b112      	cbz	r2, 800c892 <_raise_r+0x1e>
 800c88c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c890:	b94b      	cbnz	r3, 800c8a6 <_raise_r+0x32>
 800c892:	4628      	mov	r0, r5
 800c894:	f000 f830 	bl	800c8f8 <_getpid_r>
 800c898:	4622      	mov	r2, r4
 800c89a:	4601      	mov	r1, r0
 800c89c:	4628      	mov	r0, r5
 800c89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8a2:	f000 b817 	b.w	800c8d4 <_kill_r>
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d00a      	beq.n	800c8c0 <_raise_r+0x4c>
 800c8aa:	1c59      	adds	r1, r3, #1
 800c8ac:	d103      	bne.n	800c8b6 <_raise_r+0x42>
 800c8ae:	2316      	movs	r3, #22
 800c8b0:	6003      	str	r3, [r0, #0]
 800c8b2:	2001      	movs	r0, #1
 800c8b4:	e7e7      	b.n	800c886 <_raise_r+0x12>
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c8bc:	4620      	mov	r0, r4
 800c8be:	4798      	blx	r3
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	e7e0      	b.n	800c886 <_raise_r+0x12>

0800c8c4 <raise>:
 800c8c4:	4b02      	ldr	r3, [pc, #8]	@ (800c8d0 <raise+0xc>)
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	f7ff bfd3 	b.w	800c874 <_raise_r>
 800c8ce:	bf00      	nop
 800c8d0:	24000020 	.word	0x24000020

0800c8d4 <_kill_r>:
 800c8d4:	b538      	push	{r3, r4, r5, lr}
 800c8d6:	4d07      	ldr	r5, [pc, #28]	@ (800c8f4 <_kill_r+0x20>)
 800c8d8:	2300      	movs	r3, #0
 800c8da:	4604      	mov	r4, r0
 800c8dc:	4608      	mov	r0, r1
 800c8de:	4611      	mov	r1, r2
 800c8e0:	602b      	str	r3, [r5, #0]
 800c8e2:	f7f5 fe35 	bl	8002550 <_kill>
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	d102      	bne.n	800c8f0 <_kill_r+0x1c>
 800c8ea:	682b      	ldr	r3, [r5, #0]
 800c8ec:	b103      	cbz	r3, 800c8f0 <_kill_r+0x1c>
 800c8ee:	6023      	str	r3, [r4, #0]
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
 800c8f2:	bf00      	nop
 800c8f4:	24000654 	.word	0x24000654

0800c8f8 <_getpid_r>:
 800c8f8:	f7f5 be22 	b.w	8002540 <_getpid>

0800c8fc <__swhatbuf_r>:
 800c8fc:	b570      	push	{r4, r5, r6, lr}
 800c8fe:	460c      	mov	r4, r1
 800c900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c904:	2900      	cmp	r1, #0
 800c906:	b096      	sub	sp, #88	@ 0x58
 800c908:	4615      	mov	r5, r2
 800c90a:	461e      	mov	r6, r3
 800c90c:	da0d      	bge.n	800c92a <__swhatbuf_r+0x2e>
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c914:	f04f 0100 	mov.w	r1, #0
 800c918:	bf14      	ite	ne
 800c91a:	2340      	movne	r3, #64	@ 0x40
 800c91c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c920:	2000      	movs	r0, #0
 800c922:	6031      	str	r1, [r6, #0]
 800c924:	602b      	str	r3, [r5, #0]
 800c926:	b016      	add	sp, #88	@ 0x58
 800c928:	bd70      	pop	{r4, r5, r6, pc}
 800c92a:	466a      	mov	r2, sp
 800c92c:	f000 f848 	bl	800c9c0 <_fstat_r>
 800c930:	2800      	cmp	r0, #0
 800c932:	dbec      	blt.n	800c90e <__swhatbuf_r+0x12>
 800c934:	9901      	ldr	r1, [sp, #4]
 800c936:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c93a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c93e:	4259      	negs	r1, r3
 800c940:	4159      	adcs	r1, r3
 800c942:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c946:	e7eb      	b.n	800c920 <__swhatbuf_r+0x24>

0800c948 <__smakebuf_r>:
 800c948:	898b      	ldrh	r3, [r1, #12]
 800c94a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c94c:	079d      	lsls	r5, r3, #30
 800c94e:	4606      	mov	r6, r0
 800c950:	460c      	mov	r4, r1
 800c952:	d507      	bpl.n	800c964 <__smakebuf_r+0x1c>
 800c954:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c958:	6023      	str	r3, [r4, #0]
 800c95a:	6123      	str	r3, [r4, #16]
 800c95c:	2301      	movs	r3, #1
 800c95e:	6163      	str	r3, [r4, #20]
 800c960:	b003      	add	sp, #12
 800c962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c964:	ab01      	add	r3, sp, #4
 800c966:	466a      	mov	r2, sp
 800c968:	f7ff ffc8 	bl	800c8fc <__swhatbuf_r>
 800c96c:	9f00      	ldr	r7, [sp, #0]
 800c96e:	4605      	mov	r5, r0
 800c970:	4639      	mov	r1, r7
 800c972:	4630      	mov	r0, r6
 800c974:	f7fd fc0a 	bl	800a18c <_malloc_r>
 800c978:	b948      	cbnz	r0, 800c98e <__smakebuf_r+0x46>
 800c97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c97e:	059a      	lsls	r2, r3, #22
 800c980:	d4ee      	bmi.n	800c960 <__smakebuf_r+0x18>
 800c982:	f023 0303 	bic.w	r3, r3, #3
 800c986:	f043 0302 	orr.w	r3, r3, #2
 800c98a:	81a3      	strh	r3, [r4, #12]
 800c98c:	e7e2      	b.n	800c954 <__smakebuf_r+0xc>
 800c98e:	89a3      	ldrh	r3, [r4, #12]
 800c990:	6020      	str	r0, [r4, #0]
 800c992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	9b01      	ldr	r3, [sp, #4]
 800c99a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c99e:	b15b      	cbz	r3, 800c9b8 <__smakebuf_r+0x70>
 800c9a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	f000 f81d 	bl	800c9e4 <_isatty_r>
 800c9aa:	b128      	cbz	r0, 800c9b8 <__smakebuf_r+0x70>
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	f023 0303 	bic.w	r3, r3, #3
 800c9b2:	f043 0301 	orr.w	r3, r3, #1
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	431d      	orrs	r5, r3
 800c9bc:	81a5      	strh	r5, [r4, #12]
 800c9be:	e7cf      	b.n	800c960 <__smakebuf_r+0x18>

0800c9c0 <_fstat_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	@ (800c9e0 <_fstat_r+0x20>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	f7f5 fe03 	bl	80025d8 <_fstat>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d102      	bne.n	800c9dc <_fstat_r+0x1c>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b103      	cbz	r3, 800c9dc <_fstat_r+0x1c>
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	24000654 	.word	0x24000654

0800c9e4 <_isatty_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4d06      	ldr	r5, [pc, #24]	@ (800ca00 <_isatty_r+0x1c>)
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	4608      	mov	r0, r1
 800c9ee:	602b      	str	r3, [r5, #0]
 800c9f0:	f7f5 fe02 	bl	80025f8 <_isatty>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_isatty_r+0x1a>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_isatty_r+0x1a>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	24000654 	.word	0x24000654

0800ca04 <asinf>:
 800ca04:	b508      	push	{r3, lr}
 800ca06:	ed2d 8b02 	vpush	{d8}
 800ca0a:	eeb0 8a40 	vmov.f32	s16, s0
 800ca0e:	f000 fab3 	bl	800cf78 <__ieee754_asinf>
 800ca12:	eeb4 8a48 	vcmp.f32	s16, s16
 800ca16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1a:	eef0 8a40 	vmov.f32	s17, s0
 800ca1e:	d615      	bvs.n	800ca4c <asinf+0x48>
 800ca20:	eeb0 0a48 	vmov.f32	s0, s16
 800ca24:	f000 f81c 	bl	800ca60 <fabsf>
 800ca28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ca2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ca30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca34:	dd0a      	ble.n	800ca4c <asinf+0x48>
 800ca36:	f7fc fd23 	bl	8009480 <__errno>
 800ca3a:	ecbd 8b02 	vpop	{d8}
 800ca3e:	2321      	movs	r3, #33	@ 0x21
 800ca40:	6003      	str	r3, [r0, #0]
 800ca42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ca46:	4804      	ldr	r0, [pc, #16]	@ (800ca58 <asinf+0x54>)
 800ca48:	f7fc bd48 	b.w	80094dc <nanf>
 800ca4c:	eeb0 0a68 	vmov.f32	s0, s17
 800ca50:	ecbd 8b02 	vpop	{d8}
 800ca54:	bd08      	pop	{r3, pc}
 800ca56:	bf00      	nop
 800ca58:	0800d935 	.word	0x0800d935

0800ca5c <atan2f>:
 800ca5c:	f000 bb72 	b.w	800d144 <__ieee754_atan2f>

0800ca60 <fabsf>:
 800ca60:	ee10 3a10 	vmov	r3, s0
 800ca64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca68:	ee00 3a10 	vmov	s0, r3
 800ca6c:	4770      	bx	lr

0800ca6e <checkint>:
 800ca6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca72:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800ca76:	429a      	cmp	r2, r3
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	dd2a      	ble.n	800cad2 <checkint+0x64>
 800ca7c:	f240 4333 	movw	r3, #1075	@ 0x433
 800ca80:	429a      	cmp	r2, r3
 800ca82:	dc24      	bgt.n	800cace <checkint+0x60>
 800ca84:	1a9b      	subs	r3, r3, r2
 800ca86:	f1a3 0620 	sub.w	r6, r3, #32
 800ca8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca8e:	fa02 f403 	lsl.w	r4, r2, r3
 800ca92:	fa02 f606 	lsl.w	r6, r2, r6
 800ca96:	f1c3 0520 	rsb	r5, r3, #32
 800ca9a:	fa22 f505 	lsr.w	r5, r2, r5
 800ca9e:	4334      	orrs	r4, r6
 800caa0:	432c      	orrs	r4, r5
 800caa2:	409a      	lsls	r2, r3
 800caa4:	ea20 0202 	bic.w	r2, r0, r2
 800caa8:	ea21 0404 	bic.w	r4, r1, r4
 800caac:	4322      	orrs	r2, r4
 800caae:	f1a3 0420 	sub.w	r4, r3, #32
 800cab2:	f1c3 0220 	rsb	r2, r3, #32
 800cab6:	d10c      	bne.n	800cad2 <checkint+0x64>
 800cab8:	40d8      	lsrs	r0, r3
 800caba:	fa01 f302 	lsl.w	r3, r1, r2
 800cabe:	4318      	orrs	r0, r3
 800cac0:	40e1      	lsrs	r1, r4
 800cac2:	4308      	orrs	r0, r1
 800cac4:	f000 0001 	and.w	r0, r0, #1
 800cac8:	f1d0 0002 	rsbs	r0, r0, #2
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	2002      	movs	r0, #2
 800cad0:	e7fc      	b.n	800cacc <checkint+0x5e>
 800cad2:	2000      	movs	r0, #0
 800cad4:	e7fa      	b.n	800cacc <checkint+0x5e>
	...

0800cad8 <pow>:
 800cad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cadc:	ee10 4a90 	vmov	r4, s1
 800cae0:	ed2d 8b0a 	vpush	{d8-d12}
 800cae4:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800cae8:	ee11 aa90 	vmov	sl, s3
 800caec:	f108 32ff 	add.w	r2, r8, #4294967295
 800caf0:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800caf4:	429a      	cmp	r2, r3
 800caf6:	ee10 5a10 	vmov	r5, s0
 800cafa:	ee11 0a10 	vmov	r0, s2
 800cafe:	b087      	sub	sp, #28
 800cb00:	46c4      	mov	ip, r8
 800cb02:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800cb06:	d806      	bhi.n	800cb16 <pow+0x3e>
 800cb08:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800cb0c:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800cb10:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb12:	f240 8157 	bls.w	800cdc4 <pow+0x2ec>
 800cb16:	1802      	adds	r2, r0, r0
 800cb18:	eb4a 010a 	adc.w	r1, sl, sl
 800cb1c:	f06f 0b01 	mvn.w	fp, #1
 800cb20:	1e57      	subs	r7, r2, #1
 800cb22:	f141 33ff 	adc.w	r3, r1, #4294967295
 800cb26:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800cb2a:	45bb      	cmp	fp, r7
 800cb2c:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cb30:	d242      	bcs.n	800cbb8 <pow+0xe0>
 800cb32:	ea52 0301 	orrs.w	r3, r2, r1
 800cb36:	f04f 0300 	mov.w	r3, #0
 800cb3a:	d10c      	bne.n	800cb56 <pow+0x7e>
 800cb3c:	196d      	adds	r5, r5, r5
 800cb3e:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800cb42:	4164      	adcs	r4, r4
 800cb44:	42ab      	cmp	r3, r5
 800cb46:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cb4a:	41a3      	sbcs	r3, r4
 800cb4c:	f0c0 808f 	bcc.w	800cc6e <pow+0x196>
 800cb50:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cb54:	e02b      	b.n	800cbae <pow+0xd6>
 800cb56:	4ed4      	ldr	r6, [pc, #848]	@ (800cea8 <pow+0x3d0>)
 800cb58:	42b4      	cmp	r4, r6
 800cb5a:	bf08      	it	eq
 800cb5c:	429d      	cmpeq	r5, r3
 800cb5e:	d109      	bne.n	800cb74 <pow+0x9c>
 800cb60:	1800      	adds	r0, r0, r0
 800cb62:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800cb66:	eb4a 0a0a 	adc.w	sl, sl, sl
 800cb6a:	4283      	cmp	r3, r0
 800cb6c:	4bcf      	ldr	r3, [pc, #828]	@ (800ceac <pow+0x3d4>)
 800cb6e:	eb73 030a 	sbcs.w	r3, r3, sl
 800cb72:	e7eb      	b.n	800cb4c <pow+0x74>
 800cb74:	196d      	adds	r5, r5, r5
 800cb76:	48ce      	ldr	r0, [pc, #824]	@ (800ceb0 <pow+0x3d8>)
 800cb78:	4164      	adcs	r4, r4
 800cb7a:	42ab      	cmp	r3, r5
 800cb7c:	eb70 0604 	sbcs.w	r6, r0, r4
 800cb80:	d375      	bcc.n	800cc6e <pow+0x196>
 800cb82:	4281      	cmp	r1, r0
 800cb84:	bf08      	it	eq
 800cb86:	429a      	cmpeq	r2, r3
 800cb88:	d171      	bne.n	800cc6e <pow+0x196>
 800cb8a:	4aca      	ldr	r2, [pc, #808]	@ (800ceb4 <pow+0x3dc>)
 800cb8c:	4294      	cmp	r4, r2
 800cb8e:	bf08      	it	eq
 800cb90:	429d      	cmpeq	r5, r3
 800cb92:	d0dd      	beq.n	800cb50 <pow+0x78>
 800cb94:	4294      	cmp	r4, r2
 800cb96:	ea6f 0a0a 	mvn.w	sl, sl
 800cb9a:	bf34      	ite	cc
 800cb9c:	2400      	movcc	r4, #0
 800cb9e:	2401      	movcs	r4, #1
 800cba0:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800cba4:	4554      	cmp	r4, sl
 800cba6:	f040 81dc 	bne.w	800cf62 <pow+0x48a>
 800cbaa:	ee21 0b01 	vmul.f64	d0, d1, d1
 800cbae:	b007      	add	sp, #28
 800cbb0:	ecbd 8b0a 	vpop	{d8-d12}
 800cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb8:	196f      	adds	r7, r5, r5
 800cbba:	eb44 0904 	adc.w	r9, r4, r4
 800cbbe:	1e7a      	subs	r2, r7, #1
 800cbc0:	f169 0300 	sbc.w	r3, r9, #0
 800cbc4:	4593      	cmp	fp, r2
 800cbc6:	eb7e 0303 	sbcs.w	r3, lr, r3
 800cbca:	d225      	bcs.n	800cc18 <pow+0x140>
 800cbcc:	ee20 0b00 	vmul.f64	d0, d0, d0
 800cbd0:	2c00      	cmp	r4, #0
 800cbd2:	da13      	bge.n	800cbfc <pow+0x124>
 800cbd4:	4651      	mov	r1, sl
 800cbd6:	f7ff ff4a 	bl	800ca6e <checkint>
 800cbda:	2801      	cmp	r0, #1
 800cbdc:	d10e      	bne.n	800cbfc <pow+0x124>
 800cbde:	eeb1 0b40 	vneg.f64	d0, d0
 800cbe2:	ea57 0909 	orrs.w	r9, r7, r9
 800cbe6:	d10b      	bne.n	800cc00 <pow+0x128>
 800cbe8:	f1ba 0f00 	cmp.w	sl, #0
 800cbec:	dadf      	bge.n	800cbae <pow+0xd6>
 800cbee:	b007      	add	sp, #28
 800cbf0:	ecbd 8b0a 	vpop	{d8-d12}
 800cbf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf8:	f000 bc46 	b.w	800d488 <__math_divzero>
 800cbfc:	2000      	movs	r0, #0
 800cbfe:	e7f0      	b.n	800cbe2 <pow+0x10a>
 800cc00:	f1ba 0f00 	cmp.w	sl, #0
 800cc04:	dad3      	bge.n	800cbae <pow+0xd6>
 800cc06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800cc0a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cc0e:	ed8d 7b00 	vstr	d7, [sp]
 800cc12:	ed9d 0b00 	vldr	d0, [sp]
 800cc16:	e7ca      	b.n	800cbae <pow+0xd6>
 800cc18:	2c00      	cmp	r4, #0
 800cc1a:	da2b      	bge.n	800cc74 <pow+0x19c>
 800cc1c:	4651      	mov	r1, sl
 800cc1e:	f7ff ff26 	bl	800ca6e <checkint>
 800cc22:	b930      	cbnz	r0, 800cc32 <pow+0x15a>
 800cc24:	b007      	add	sp, #28
 800cc26:	ecbd 8b0a 	vpop	{d8-d12}
 800cc2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc2e:	f000 bc43 	b.w	800d4b8 <__math_invalid>
 800cc32:	1e41      	subs	r1, r0, #1
 800cc34:	4248      	negs	r0, r1
 800cc36:	4148      	adcs	r0, r1
 800cc38:	0480      	lsls	r0, r0, #18
 800cc3a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800cc3e:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800cc42:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800cc46:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800cc4a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc4c:	d92d      	bls.n	800ccaa <pow+0x1d2>
 800cc4e:	4b96      	ldr	r3, [pc, #600]	@ (800cea8 <pow+0x3d0>)
 800cc50:	2000      	movs	r0, #0
 800cc52:	429c      	cmp	r4, r3
 800cc54:	bf08      	it	eq
 800cc56:	4285      	cmpeq	r5, r0
 800cc58:	f43f af7a 	beq.w	800cb50 <pow+0x78>
 800cc5c:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800cc60:	428a      	cmp	r2, r1
 800cc62:	d80c      	bhi.n	800cc7e <pow+0x1a6>
 800cc64:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cc68:	42a8      	cmp	r0, r5
 800cc6a:	41a3      	sbcs	r3, r4
 800cc6c:	d204      	bcs.n	800cc78 <pow+0x1a0>
 800cc6e:	ee31 0b00 	vadd.f64	d0, d1, d0
 800cc72:	e79c      	b.n	800cbae <pow+0xd6>
 800cc74:	2000      	movs	r0, #0
 800cc76:	e7e4      	b.n	800cc42 <pow+0x16a>
 800cc78:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cc7c:	e797      	b.n	800cbae <pow+0xd6>
 800cc7e:	2d01      	cmp	r5, #1
 800cc80:	eb74 0303 	sbcs.w	r3, r4, r3
 800cc84:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cc88:	bf34      	ite	cc
 800cc8a:	2301      	movcc	r3, #1
 800cc8c:	2300      	movcs	r3, #0
 800cc8e:	4296      	cmp	r6, r2
 800cc90:	bf8c      	ite	hi
 800cc92:	2600      	movhi	r6, #0
 800cc94:	2601      	movls	r6, #1
 800cc96:	42b3      	cmp	r3, r6
 800cc98:	f000 809c 	beq.w	800cdd4 <pow+0x2fc>
 800cc9c:	b007      	add	sp, #28
 800cc9e:	ecbd 8b0a 	vpop	{d8-d12}
 800cca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cca6:	f000 bbe7 	b.w	800d478 <__math_oflow>
 800ccaa:	f1bc 0f00 	cmp.w	ip, #0
 800ccae:	d10a      	bne.n	800ccc6 <pow+0x1ee>
 800ccb0:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800ce98 <pow+0x3c0>
 800ccb4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ccb8:	ec53 2b17 	vmov	r2, r3, d7
 800ccbc:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800ccc0:	4615      	mov	r5, r2
 800ccc2:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800ccc6:	4a7c      	ldr	r2, [pc, #496]	@ (800ceb8 <pow+0x3e0>)
 800ccc8:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800cccc:	4422      	add	r2, r4
 800ccce:	1513      	asrs	r3, r2, #20
 800ccd0:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800ccd4:	ee03 3a10 	vmov	s6, r3
 800ccd8:	0d12      	lsrs	r2, r2, #20
 800ccda:	4b78      	ldr	r3, [pc, #480]	@ (800cebc <pow+0x3e4>)
 800ccdc:	0512      	lsls	r2, r2, #20
 800ccde:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800cce2:	1aa7      	subs	r7, r4, r2
 800cce4:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800cce8:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800ccec:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800ccf0:	1e2e      	subs	r6, r5, #0
 800ccf2:	ec47 6b14 	vmov	d4, r6, r7
 800ccf6:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800ccfa:	eea4 6b05 	vfma.f64	d6, d4, d5
 800ccfe:	ed93 5b00 	vldr	d5, [r3]
 800cd02:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800cd06:	eea3 2b05 	vfma.f64	d2, d3, d5
 800cd0a:	ed93 5b02 	vldr	d5, [r3, #8]
 800cd0e:	ee36 4b02 	vadd.f64	d4, d6, d2
 800cd12:	ee32 2b44 	vsub.f64	d2, d2, d4
 800cd16:	eea3 7b05 	vfma.f64	d7, d3, d5
 800cd1a:	ed93 5b04 	vldr	d5, [r3, #16]
 800cd1e:	ee32 2b06 	vadd.f64	d2, d2, d6
 800cd22:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cd26:	ee26 5b05 	vmul.f64	d5, d6, d5
 800cd2a:	ee26 0b05 	vmul.f64	d0, d6, d5
 800cd2e:	ee34 8b00 	vadd.f64	d8, d4, d0
 800cd32:	eeb0 9b40 	vmov.f64	d9, d0
 800cd36:	ee34 4b48 	vsub.f64	d4, d4, d8
 800cd3a:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800cd3e:	ee34 ab00 	vadd.f64	d10, d4, d0
 800cd42:	ed93 5b06 	vldr	d5, [r3, #24]
 800cd46:	ee26 bb00 	vmul.f64	d11, d6, d0
 800cd4a:	ee37 7b09 	vadd.f64	d7, d7, d9
 800cd4e:	ed93 4b08 	vldr	d4, [r3, #32]
 800cd52:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800cd56:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800cd5a:	eea6 5b04 	vfma.f64	d5, d6, d4
 800cd5e:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800cd62:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800cd66:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cd6a:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800cd6e:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800cd72:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cd76:	eea0 5b04 	vfma.f64	d5, d0, d4
 800cd7a:	eeab 7b05 	vfma.f64	d7, d11, d5
 800cd7e:	ee38 4b07 	vadd.f64	d4, d8, d7
 800cd82:	ee21 6b04 	vmul.f64	d6, d1, d4
 800cd86:	ee16 3a90 	vmov	r3, s13
 800cd8a:	eeb0 5b46 	vmov.f64	d5, d6
 800cd8e:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800cd92:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800cd96:	18b2      	adds	r2, r6, r2
 800cd98:	2a3e      	cmp	r2, #62	@ 0x3e
 800cd9a:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800cd9e:	ee38 8b44 	vsub.f64	d8, d8, d4
 800cda2:	ee38 8b07 	vadd.f64	d8, d8, d7
 800cda6:	eea1 5b08 	vfma.f64	d5, d1, d8
 800cdaa:	d91b      	bls.n	800cde4 <pow+0x30c>
 800cdac:	2a00      	cmp	r2, #0
 800cdae:	da0b      	bge.n	800cdc8 <pow+0x2f0>
 800cdb0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800cdb4:	ee36 0b00 	vadd.f64	d0, d6, d0
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	f43f aef8 	beq.w	800cbae <pow+0xd6>
 800cdbe:	eeb1 0b40 	vneg.f64	d0, d0
 800cdc2:	e6f4      	b.n	800cbae <pow+0xd6>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e77e      	b.n	800ccc6 <pow+0x1ee>
 800cdc8:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800cdcc:	d909      	bls.n	800cde2 <pow+0x30a>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f6bf af64 	bge.w	800cc9c <pow+0x1c4>
 800cdd4:	b007      	add	sp, #28
 800cdd6:	ecbd 8b0a 	vpop	{d8-d12}
 800cdda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdde:	f000 bb43 	b.w	800d468 <__math_uflow>
 800cde2:	2600      	movs	r6, #0
 800cde4:	4936      	ldr	r1, [pc, #216]	@ (800cec0 <pow+0x3e8>)
 800cde6:	ed91 4b02 	vldr	d4, [r1, #8]
 800cdea:	ed91 3b00 	vldr	d3, [r1]
 800cdee:	eeb0 7b44 	vmov.f64	d7, d4
 800cdf2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800cdf6:	ee17 5a10 	vmov	r5, s14
 800cdfa:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cdfe:	ed91 4b04 	vldr	d4, [r1, #16]
 800ce02:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800ce06:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ce0a:	ed91 4b06 	vldr	d4, [r1, #24]
 800ce0e:	18dc      	adds	r4, r3, r3
 800ce10:	f104 030f 	add.w	r3, r4, #15
 800ce14:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ce18:	eea7 6b04 	vfma.f64	d6, d7, d4
 800ce1c:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800ce20:	ee35 5b06 	vadd.f64	d5, d5, d6
 800ce24:	ee25 6b05 	vmul.f64	d6, d5, d5
 800ce28:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800ce2c:	ed91 4b08 	vldr	d4, [r1, #32]
 800ce30:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ce34:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800ce38:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ce3c:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800ce40:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ce44:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ce48:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800ce4c:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800ce50:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800ce54:	eea5 4b03 	vfma.f64	d4, d5, d3
 800ce58:	1940      	adds	r0, r0, r5
 800ce5a:	2700      	movs	r7, #0
 800ce5c:	eb17 020c 	adds.w	r2, r7, ip
 800ce60:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800ce64:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	d175      	bne.n	800cf58 <pow+0x480>
 800ce6c:	42bd      	cmp	r5, r7
 800ce6e:	db29      	blt.n	800cec4 <pow+0x3ec>
 800ce70:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800ce74:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800ce78:	4610      	mov	r0, r2
 800ce7a:	ec41 0b10 	vmov	d0, r0, r1
 800ce7e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800ce82:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800cea0 <pow+0x3c8>
 800ce86:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ce8a:	b007      	add	sp, #28
 800ce8c:	ecbd 8b0a 	vpop	{d8-d12}
 800ce90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	f000 bb28 	b.w	800d4e8 <__math_check_oflow>
 800ce98:	00000000 	.word	0x00000000
 800ce9c:	43300000 	.word	0x43300000
 800cea0:	00000000 	.word	0x00000000
 800cea4:	7f000000 	.word	0x7f000000
 800cea8:	3ff00000 	.word	0x3ff00000
 800ceac:	fff00000 	.word	0xfff00000
 800ceb0:	ffe00000 	.word	0xffe00000
 800ceb4:	7fe00000 	.word	0x7fe00000
 800ceb8:	c0196aab 	.word	0xc0196aab
 800cebc:	0800d998 	.word	0x0800d998
 800cec0:	0800ea18 	.word	0x0800ea18
 800cec4:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800cec8:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800cecc:	4610      	mov	r0, r2
 800cece:	ec41 0b15 	vmov	d5, r0, r1
 800ced2:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800ced6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ceda:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cede:	eeb0 4bc7 	vabs.f64	d4, d7
 800cee2:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800cee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceea:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800cf68 <pow+0x490>
 800ceee:	d52a      	bpl.n	800cf46 <pow+0x46e>
 800cef0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cef4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefc:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cf00:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800cf04:	bf58      	it	pl
 800cf06:	eeb0 4b43 	vmovpl.f64	d4, d3
 800cf0a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800cf0e:	ee34 6b43 	vsub.f64	d6, d4, d3
 800cf12:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cf16:	ee36 6b05 	vadd.f64	d6, d6, d5
 800cf1a:	ee36 6b03 	vadd.f64	d6, d6, d3
 800cf1e:	ee36 7b44 	vsub.f64	d7, d6, d4
 800cf22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2a:	d104      	bne.n	800cf36 <pow+0x45e>
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800cf32:	ec43 2b17 	vmov	d7, r2, r3
 800cf36:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cf3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cf3e:	ee26 6b00 	vmul.f64	d6, d6, d0
 800cf42:	ed8d 6b04 	vstr	d6, [sp, #16]
 800cf46:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cf4a:	b007      	add	sp, #28
 800cf4c:	ecbd 8b0a 	vpop	{d8-d12}
 800cf50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf54:	f000 babf 	b.w	800d4d6 <__math_check_uflow>
 800cf58:	ec43 2b10 	vmov	d0, r2, r3
 800cf5c:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cf60:	e625      	b.n	800cbae <pow+0xd6>
 800cf62:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800cf70 <pow+0x498>
 800cf66:	e622      	b.n	800cbae <pow+0xd6>
 800cf68:	00000000 	.word	0x00000000
 800cf6c:	00100000 	.word	0x00100000
	...

0800cf78 <__ieee754_asinf>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	ee10 5a10 	vmov	r5, s0
 800cf7e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800cf82:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800cf86:	ed2d 8b04 	vpush	{d8-d9}
 800cf8a:	d10c      	bne.n	800cfa6 <__ieee754_asinf+0x2e>
 800cf8c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 800d104 <__ieee754_asinf+0x18c>
 800cf90:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800d108 <__ieee754_asinf+0x190>
 800cf94:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cf98:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cf9c:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa0:	ecbd 8b04 	vpop	{d8-d9}
 800cfa4:	bd38      	pop	{r3, r4, r5, pc}
 800cfa6:	d904      	bls.n	800cfb2 <__ieee754_asinf+0x3a>
 800cfa8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cfac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cfb0:	e7f6      	b.n	800cfa0 <__ieee754_asinf+0x28>
 800cfb2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cfb6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800cfba:	d20b      	bcs.n	800cfd4 <__ieee754_asinf+0x5c>
 800cfbc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800cfc0:	d252      	bcs.n	800d068 <__ieee754_asinf+0xf0>
 800cfc2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 800d10c <__ieee754_asinf+0x194>
 800cfc6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cfca:	eef4 7ae8 	vcmpe.f32	s15, s17
 800cfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd2:	dce5      	bgt.n	800cfa0 <__ieee754_asinf+0x28>
 800cfd4:	f7ff fd44 	bl	800ca60 <fabsf>
 800cfd8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800cfdc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cfe0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800cfe4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800d110 <__ieee754_asinf+0x198>
 800cfe8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 800d114 <__ieee754_asinf+0x19c>
 800cfec:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 800d118 <__ieee754_asinf+0x1a0>
 800cff0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800cff4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800d11c <__ieee754_asinf+0x1a4>
 800cff8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800cffc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800d120 <__ieee754_asinf+0x1a8>
 800d000:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d004:	eddf 7a47 	vldr	s15, [pc, #284]	@ 800d124 <__ieee754_asinf+0x1ac>
 800d008:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d00c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800d128 <__ieee754_asinf+0x1b0>
 800d010:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d014:	eddf 7a45 	vldr	s15, [pc, #276]	@ 800d12c <__ieee754_asinf+0x1b4>
 800d018:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d01c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800d130 <__ieee754_asinf+0x1b8>
 800d020:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d024:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800d134 <__ieee754_asinf+0x1bc>
 800d028:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d02c:	eeb0 0a48 	vmov.f32	s0, s16
 800d030:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d034:	f000 fa6c 	bl	800d510 <__ieee754_sqrtf>
 800d038:	4b3f      	ldr	r3, [pc, #252]	@ (800d138 <__ieee754_asinf+0x1c0>)
 800d03a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d03e:	429c      	cmp	r4, r3
 800d040:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d044:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d048:	d93d      	bls.n	800d0c6 <__ieee754_asinf+0x14e>
 800d04a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d04e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800d13c <__ieee754_asinf+0x1c4>
 800d052:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d056:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 800d108 <__ieee754_asinf+0x190>
 800d05a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d05e:	2d00      	cmp	r5, #0
 800d060:	bfd8      	it	le
 800d062:	eeb1 0a40 	vnegle.f32	s0, s0
 800d066:	e79b      	b.n	800cfa0 <__ieee754_asinf+0x28>
 800d068:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d06c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800d114 <__ieee754_asinf+0x19c>
 800d070:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800d110 <__ieee754_asinf+0x198>
 800d074:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 800d128 <__ieee754_asinf+0x1b0>
 800d078:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d07c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d11c <__ieee754_asinf+0x1a4>
 800d080:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d084:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800d120 <__ieee754_asinf+0x1a8>
 800d088:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d08c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800d124 <__ieee754_asinf+0x1ac>
 800d090:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d094:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800d118 <__ieee754_asinf+0x1a0>
 800d098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d09c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800d12c <__ieee754_asinf+0x1b4>
 800d0a0:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d0a4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800d130 <__ieee754_asinf+0x1b8>
 800d0a8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d0ac:	eddf 6a21 	vldr	s13, [pc, #132]	@ 800d134 <__ieee754_asinf+0x1bc>
 800d0b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0b8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d0bc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d0c0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d0c4:	e76c      	b.n	800cfa0 <__ieee754_asinf+0x28>
 800d0c6:	ee10 3a10 	vmov	r3, s0
 800d0ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800d0ce:	f023 030f 	bic.w	r3, r3, #15
 800d0d2:	ee07 3a10 	vmov	s14, r3
 800d0d6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d0da:	ee70 5a00 	vadd.f32	s11, s0, s0
 800d0de:	ee30 0a07 	vadd.f32	s0, s0, s14
 800d0e2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d104 <__ieee754_asinf+0x18c>
 800d0e6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800d0ea:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800d140 <__ieee754_asinf+0x1c8>
 800d0ee:	eee5 7a66 	vfms.f32	s15, s10, s13
 800d0f2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800d0f6:	eeb0 6a40 	vmov.f32	s12, s0
 800d0fa:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d0fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d102:	e7aa      	b.n	800d05a <__ieee754_asinf+0xe2>
 800d104:	b33bbd2e 	.word	0xb33bbd2e
 800d108:	3fc90fdb 	.word	0x3fc90fdb
 800d10c:	7149f2ca 	.word	0x7149f2ca
 800d110:	3a4f7f04 	.word	0x3a4f7f04
 800d114:	3811ef08 	.word	0x3811ef08
 800d118:	3e2aaaab 	.word	0x3e2aaaab
 800d11c:	bd241146 	.word	0xbd241146
 800d120:	3e4e0aa8 	.word	0x3e4e0aa8
 800d124:	bea6b090 	.word	0xbea6b090
 800d128:	3d9dc62e 	.word	0x3d9dc62e
 800d12c:	bf303361 	.word	0xbf303361
 800d130:	4001572d 	.word	0x4001572d
 800d134:	c019d139 	.word	0xc019d139
 800d138:	3f799999 	.word	0x3f799999
 800d13c:	333bbd2e 	.word	0x333bbd2e
 800d140:	3f490fdb 	.word	0x3f490fdb

0800d144 <__ieee754_atan2f>:
 800d144:	ee10 2a90 	vmov	r2, s1
 800d148:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800d14c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d150:	b510      	push	{r4, lr}
 800d152:	eef0 7a40 	vmov.f32	s15, s0
 800d156:	d806      	bhi.n	800d166 <__ieee754_atan2f+0x22>
 800d158:	ee10 0a10 	vmov	r0, s0
 800d15c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800d160:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d164:	d904      	bls.n	800d170 <__ieee754_atan2f+0x2c>
 800d166:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d16a:	eeb0 0a67 	vmov.f32	s0, s15
 800d16e:	bd10      	pop	{r4, pc}
 800d170:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800d174:	d103      	bne.n	800d17e <__ieee754_atan2f+0x3a>
 800d176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d17a:	f000 b881 	b.w	800d280 <atanf>
 800d17e:	1794      	asrs	r4, r2, #30
 800d180:	f004 0402 	and.w	r4, r4, #2
 800d184:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d188:	b93b      	cbnz	r3, 800d19a <__ieee754_atan2f+0x56>
 800d18a:	2c02      	cmp	r4, #2
 800d18c:	d05c      	beq.n	800d248 <__ieee754_atan2f+0x104>
 800d18e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d25c <__ieee754_atan2f+0x118>
 800d192:	2c03      	cmp	r4, #3
 800d194:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800d198:	e7e7      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d19a:	b939      	cbnz	r1, 800d1ac <__ieee754_atan2f+0x68>
 800d19c:	eddf 7a30 	vldr	s15, [pc, #192]	@ 800d260 <__ieee754_atan2f+0x11c>
 800d1a0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d264 <__ieee754_atan2f+0x120>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d1aa:	e7de      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d1ac:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d1b0:	d110      	bne.n	800d1d4 <__ieee754_atan2f+0x90>
 800d1b2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d1b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800d1ba:	d107      	bne.n	800d1cc <__ieee754_atan2f+0x88>
 800d1bc:	2c02      	cmp	r4, #2
 800d1be:	d846      	bhi.n	800d24e <__ieee754_atan2f+0x10a>
 800d1c0:	4b29      	ldr	r3, [pc, #164]	@ (800d268 <__ieee754_atan2f+0x124>)
 800d1c2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d1c6:	edd3 7a00 	vldr	s15, [r3]
 800d1ca:	e7ce      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d1cc:	2c02      	cmp	r4, #2
 800d1ce:	d841      	bhi.n	800d254 <__ieee754_atan2f+0x110>
 800d1d0:	4b26      	ldr	r3, [pc, #152]	@ (800d26c <__ieee754_atan2f+0x128>)
 800d1d2:	e7f6      	b.n	800d1c2 <__ieee754_atan2f+0x7e>
 800d1d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d1d8:	d0e0      	beq.n	800d19c <__ieee754_atan2f+0x58>
 800d1da:	1a5b      	subs	r3, r3, r1
 800d1dc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800d1e0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d1e4:	da1a      	bge.n	800d21c <__ieee754_atan2f+0xd8>
 800d1e6:	2a00      	cmp	r2, #0
 800d1e8:	da01      	bge.n	800d1ee <__ieee754_atan2f+0xaa>
 800d1ea:	313c      	adds	r1, #60	@ 0x3c
 800d1ec:	db19      	blt.n	800d222 <__ieee754_atan2f+0xde>
 800d1ee:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d1f2:	f7ff fc35 	bl	800ca60 <fabsf>
 800d1f6:	f000 f843 	bl	800d280 <atanf>
 800d1fa:	eef0 7a40 	vmov.f32	s15, s0
 800d1fe:	2c01      	cmp	r4, #1
 800d200:	d012      	beq.n	800d228 <__ieee754_atan2f+0xe4>
 800d202:	2c02      	cmp	r4, #2
 800d204:	d017      	beq.n	800d236 <__ieee754_atan2f+0xf2>
 800d206:	2c00      	cmp	r4, #0
 800d208:	d0af      	beq.n	800d16a <__ieee754_atan2f+0x26>
 800d20a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d270 <__ieee754_atan2f+0x12c>
 800d20e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d212:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800d274 <__ieee754_atan2f+0x130>
 800d216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d21a:	e7a6      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d21c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800d260 <__ieee754_atan2f+0x11c>
 800d220:	e7ed      	b.n	800d1fe <__ieee754_atan2f+0xba>
 800d222:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d278 <__ieee754_atan2f+0x134>
 800d226:	e7ea      	b.n	800d1fe <__ieee754_atan2f+0xba>
 800d228:	ee17 3a90 	vmov	r3, s15
 800d22c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d230:	ee07 3a90 	vmov	s15, r3
 800d234:	e799      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d236:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800d270 <__ieee754_atan2f+0x12c>
 800d23a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d23e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800d274 <__ieee754_atan2f+0x130>
 800d242:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d246:	e790      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d248:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800d274 <__ieee754_atan2f+0x130>
 800d24c:	e78d      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d24e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800d27c <__ieee754_atan2f+0x138>
 800d252:	e78a      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d254:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800d278 <__ieee754_atan2f+0x134>
 800d258:	e787      	b.n	800d16a <__ieee754_atan2f+0x26>
 800d25a:	bf00      	nop
 800d25c:	c0490fdb 	.word	0xc0490fdb
 800d260:	3fc90fdb 	.word	0x3fc90fdb
 800d264:	bfc90fdb 	.word	0xbfc90fdb
 800d268:	0800e9ec 	.word	0x0800e9ec
 800d26c:	0800e9e0 	.word	0x0800e9e0
 800d270:	33bbbd2e 	.word	0x33bbbd2e
 800d274:	40490fdb 	.word	0x40490fdb
 800d278:	00000000 	.word	0x00000000
 800d27c:	3f490fdb 	.word	0x3f490fdb

0800d280 <atanf>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	ee10 5a10 	vmov	r5, s0
 800d286:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800d28a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800d28e:	eef0 7a40 	vmov.f32	s15, s0
 800d292:	d30f      	bcc.n	800d2b4 <atanf+0x34>
 800d294:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800d298:	d904      	bls.n	800d2a4 <atanf+0x24>
 800d29a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d29e:	eeb0 0a67 	vmov.f32	s0, s15
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800d3dc <atanf+0x15c>
 800d2a8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800d3e0 <atanf+0x160>
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	fe77 7a27 	vselgt.f32	s15, s14, s15
 800d2b2:	e7f4      	b.n	800d29e <atanf+0x1e>
 800d2b4:	4b4b      	ldr	r3, [pc, #300]	@ (800d3e4 <atanf+0x164>)
 800d2b6:	429c      	cmp	r4, r3
 800d2b8:	d810      	bhi.n	800d2dc <atanf+0x5c>
 800d2ba:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800d2be:	d20a      	bcs.n	800d2d6 <atanf+0x56>
 800d2c0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800d3e8 <atanf+0x168>
 800d2c4:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d2c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2cc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d4:	dce3      	bgt.n	800d29e <atanf+0x1e>
 800d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2da:	e013      	b.n	800d304 <atanf+0x84>
 800d2dc:	f7ff fbc0 	bl	800ca60 <fabsf>
 800d2e0:	4b42      	ldr	r3, [pc, #264]	@ (800d3ec <atanf+0x16c>)
 800d2e2:	429c      	cmp	r4, r3
 800d2e4:	d84f      	bhi.n	800d386 <atanf+0x106>
 800d2e6:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d2ea:	429c      	cmp	r4, r3
 800d2ec:	d841      	bhi.n	800d372 <atanf+0xf2>
 800d2ee:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800d2f2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d2f6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d300:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800d30a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800d3f0 <atanf+0x170>
 800d30e:	eddf 5a39 	vldr	s11, [pc, #228]	@ 800d3f4 <atanf+0x174>
 800d312:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 800d3f8 <atanf+0x178>
 800d316:	ee66 6a06 	vmul.f32	s13, s12, s12
 800d31a:	eee6 5a87 	vfma.f32	s11, s13, s14
 800d31e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800d3fc <atanf+0x17c>
 800d322:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d326:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d400 <atanf+0x180>
 800d32a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d32e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800d404 <atanf+0x184>
 800d332:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d336:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d408 <atanf+0x188>
 800d33a:	eee7 5a26 	vfma.f32	s11, s14, s13
 800d33e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800d40c <atanf+0x18c>
 800d342:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d346:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800d410 <atanf+0x190>
 800d34a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d34e:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 800d414 <atanf+0x194>
 800d352:	eea7 5a26 	vfma.f32	s10, s14, s13
 800d356:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800d418 <atanf+0x198>
 800d35a:	eea5 7a26 	vfma.f32	s14, s10, s13
 800d35e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d362:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d36a:	d121      	bne.n	800d3b0 <atanf+0x130>
 800d36c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d370:	e795      	b.n	800d29e <atanf+0x1e>
 800d372:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800d376:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d37a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d37e:	2301      	movs	r3, #1
 800d380:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d384:	e7be      	b.n	800d304 <atanf+0x84>
 800d386:	4b25      	ldr	r3, [pc, #148]	@ (800d41c <atanf+0x19c>)
 800d388:	429c      	cmp	r4, r3
 800d38a:	d80b      	bhi.n	800d3a4 <atanf+0x124>
 800d38c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800d390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d394:	eea0 7a27 	vfma.f32	s14, s0, s15
 800d398:	2302      	movs	r3, #2
 800d39a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d39e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3a2:	e7af      	b.n	800d304 <atanf+0x84>
 800d3a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d3a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e7a9      	b.n	800d304 <atanf+0x84>
 800d3b0:	4a1b      	ldr	r2, [pc, #108]	@ (800d420 <atanf+0x1a0>)
 800d3b2:	491c      	ldr	r1, [pc, #112]	@ (800d424 <atanf+0x1a4>)
 800d3b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d3b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d3bc:	edd3 6a00 	vldr	s13, [r3]
 800d3c0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d3c4:	2d00      	cmp	r5, #0
 800d3c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3ca:	edd2 7a00 	vldr	s15, [r2]
 800d3ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3d2:	bfb8      	it	lt
 800d3d4:	eef1 7a67 	vneglt.f32	s15, s15
 800d3d8:	e761      	b.n	800d29e <atanf+0x1e>
 800d3da:	bf00      	nop
 800d3dc:	bfc90fdb 	.word	0xbfc90fdb
 800d3e0:	3fc90fdb 	.word	0x3fc90fdb
 800d3e4:	3edfffff 	.word	0x3edfffff
 800d3e8:	7149f2ca 	.word	0x7149f2ca
 800d3ec:	3f97ffff 	.word	0x3f97ffff
 800d3f0:	3c8569d7 	.word	0x3c8569d7
 800d3f4:	3d4bda59 	.word	0x3d4bda59
 800d3f8:	bd6ef16b 	.word	0xbd6ef16b
 800d3fc:	3d886b35 	.word	0x3d886b35
 800d400:	3dba2e6e 	.word	0x3dba2e6e
 800d404:	3e124925 	.word	0x3e124925
 800d408:	3eaaaaab 	.word	0x3eaaaaab
 800d40c:	bd15a221 	.word	0xbd15a221
 800d410:	bd9d8795 	.word	0xbd9d8795
 800d414:	bde38e38 	.word	0xbde38e38
 800d418:	be4ccccd 	.word	0xbe4ccccd
 800d41c:	401bffff 	.word	0x401bffff
 800d420:	0800ea08 	.word	0x0800ea08
 800d424:	0800e9f8 	.word	0x0800e9f8

0800d428 <with_errno>:
 800d428:	b510      	push	{r4, lr}
 800d42a:	ed2d 8b02 	vpush	{d8}
 800d42e:	eeb0 8b40 	vmov.f64	d8, d0
 800d432:	4604      	mov	r4, r0
 800d434:	f7fc f824 	bl	8009480 <__errno>
 800d438:	eeb0 0b48 	vmov.f64	d0, d8
 800d43c:	ecbd 8b02 	vpop	{d8}
 800d440:	6004      	str	r4, [r0, #0]
 800d442:	bd10      	pop	{r4, pc}

0800d444 <xflow>:
 800d444:	b082      	sub	sp, #8
 800d446:	b158      	cbz	r0, 800d460 <xflow+0x1c>
 800d448:	eeb1 7b40 	vneg.f64	d7, d0
 800d44c:	ed8d 7b00 	vstr	d7, [sp]
 800d450:	ed9d 7b00 	vldr	d7, [sp]
 800d454:	2022      	movs	r0, #34	@ 0x22
 800d456:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d45a:	b002      	add	sp, #8
 800d45c:	f7ff bfe4 	b.w	800d428 <with_errno>
 800d460:	eeb0 7b40 	vmov.f64	d7, d0
 800d464:	e7f2      	b.n	800d44c <xflow+0x8>
	...

0800d468 <__math_uflow>:
 800d468:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d470 <__math_uflow+0x8>
 800d46c:	f7ff bfea 	b.w	800d444 <xflow>
 800d470:	00000000 	.word	0x00000000
 800d474:	10000000 	.word	0x10000000

0800d478 <__math_oflow>:
 800d478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d480 <__math_oflow+0x8>
 800d47c:	f7ff bfe2 	b.w	800d444 <xflow>
 800d480:	00000000 	.word	0x00000000
 800d484:	70000000 	.word	0x70000000

0800d488 <__math_divzero>:
 800d488:	b082      	sub	sp, #8
 800d48a:	2800      	cmp	r0, #0
 800d48c:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d490:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800d494:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800d498:	ed8d 7b00 	vstr	d7, [sp]
 800d49c:	ed9d 0b00 	vldr	d0, [sp]
 800d4a0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800d4b0 <__math_divzero+0x28>
 800d4a4:	2022      	movs	r0, #34	@ 0x22
 800d4a6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d4aa:	b002      	add	sp, #8
 800d4ac:	f7ff bfbc 	b.w	800d428 <with_errno>
	...

0800d4b8 <__math_invalid>:
 800d4b8:	eeb0 7b40 	vmov.f64	d7, d0
 800d4bc:	eeb4 7b47 	vcmp.f64	d7, d7
 800d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d4c8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d4cc:	d602      	bvs.n	800d4d4 <__math_invalid+0x1c>
 800d4ce:	2021      	movs	r0, #33	@ 0x21
 800d4d0:	f7ff bfaa 	b.w	800d428 <with_errno>
 800d4d4:	4770      	bx	lr

0800d4d6 <__math_check_uflow>:
 800d4d6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4de:	d102      	bne.n	800d4e6 <__math_check_uflow+0x10>
 800d4e0:	2022      	movs	r0, #34	@ 0x22
 800d4e2:	f7ff bfa1 	b.w	800d428 <with_errno>
 800d4e6:	4770      	bx	lr

0800d4e8 <__math_check_oflow>:
 800d4e8:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800d508 <__math_check_oflow+0x20>
 800d4ec:	eeb0 7bc0 	vabs.f64	d7, d0
 800d4f0:	eeb4 7b46 	vcmp.f64	d7, d6
 800d4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f8:	dd02      	ble.n	800d500 <__math_check_oflow+0x18>
 800d4fa:	2022      	movs	r0, #34	@ 0x22
 800d4fc:	f7ff bf94 	b.w	800d428 <with_errno>
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	f3af 8000 	nop.w
 800d508:	ffffffff 	.word	0xffffffff
 800d50c:	7fefffff 	.word	0x7fefffff

0800d510 <__ieee754_sqrtf>:
 800d510:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d514:	4770      	bx	lr
	...

0800d518 <_init>:
 800d518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d51a:	bf00      	nop
 800d51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51e:	bc08      	pop	{r3}
 800d520:	469e      	mov	lr, r3
 800d522:	4770      	bx	lr

0800d524 <_fini>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr
